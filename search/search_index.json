{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\(\\)\\,\\-]+"},"docs":[{"location":"","text":"Rapise Documentation \u00b6 Quick Links Know Your Way Around Web Testing Desktop Testing Mobile Testing API Testing Scriptless Testing Manual Testing Microsoft Dynamics Testing About the Docs \u00b6 From this page you can reach different parts of the documentation. Use menu at the top and table of contents to the left. Top Menu User's Guide explains Rapise UI, features and technologies. RVL describes the Rapise Visual Language used for codeless test automation. Libraries contains Object API reference. Manuals features selected topics on how to prepare testing environments. KB is a list of knowledge base articles. Release Notes provides information about new features and improvements in Rapise releases. UI Test Automation Playground \u00b6 We've built a collection of puzzles you may use to sharpen test automation skills. Check it out .","title":"RapiseDocs"},{"location":"#rapise-documentation","text":"Quick Links Know Your Way Around Web Testing Desktop Testing Mobile Testing API Testing Scriptless Testing Manual Testing Microsoft Dynamics Testing","title":"Rapise Documentation"},{"location":"#about-the-docs","text":"From this page you can reach different parts of the documentation. Use menu at the top and table of contents to the left. Top Menu User's Guide explains Rapise UI, features and technologies. RVL describes the Rapise Visual Language used for codeless test automation. Libraries contains Object API reference. Manuals features selected topics on how to prepare testing environments. KB is a list of knowledge base articles. Release Notes provides information about new features and improvements in Rapise releases.","title":"About the Docs"},{"location":"#ui-test-automation-playground","text":"We've built a collection of puzzles you may use to sharpen test automation skills. Check it out .","title":"UI Test Automation Playground"},{"location":"api/","text":"REST/SOAP API testing \u00b6 Rapise can test REST/SOAP APIs. We recommend to start from the tutorials: Tutorial: REST Web Services Tutorial: SOAP Web Services In-depth documentation on Web Service testing: Web Service Testing Webinars \u00b6 Overview: SOAP/REST API Testing Automating REST/SOAP API Testing See Also \u00b6 Testing REST Web Services Testing SOAP Web Services","title":"REST/SOAP API testing"},{"location":"api/#restsoap-api-testing","text":"Rapise can test REST/SOAP APIs. We recommend to start from the tutorials: Tutorial: REST Web Services Tutorial: SOAP Web Services In-depth documentation on Web Service testing: Web Service Testing","title":"REST/SOAP API testing"},{"location":"api/#webinars","text":"Overview: SOAP/REST API Testing Automating REST/SOAP API Testing","title":"Webinars"},{"location":"api/#see-also","text":"Testing REST Web Services Testing SOAP Web Services","title":"See Also"},{"location":"assistance/","text":"Get Assistance \u00b6 Hey! We can help making your first test with Rapise. Sign up using the link below and one of our automation experts will schedule a screen sharing session with you. Fill Request","title":"Get Assistance"},{"location":"assistance/#get-assistance","text":"Hey! We can help making your first test with Rapise. Sign up using the link below and one of our automation experts will schedule a screen sharing session with you. Fill Request","title":"Get Assistance"},{"location":"codeless/","text":"Scriptless/Codeless Testing \u00b6 With Rapise you can record and playback a test without writing a single line of code. This is referred to as codeless test automation. In Rapise you achieve codeless automation via Rapise Visual Language (RVL). About RVL Why RVL? RVL Reference Webinars \u00b6 Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools Introduction into Codeless Test Automation","title":"Scriptless/Codeless Testing"},{"location":"codeless/#scriptlesscodeless-testing","text":"With Rapise you can record and playback a test without writing a single line of code. This is referred to as codeless test automation. In Rapise you achieve codeless automation via Rapise Visual Language (RVL). About RVL Why RVL? RVL Reference","title":"Scriptless/Codeless Testing"},{"location":"codeless/#webinars","text":"Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools Introduction into Codeless Test Automation","title":"Webinars"},{"location":"desktop/","text":"Desktop Testing \u00b6 If you plan to record and playback the very first desktop test - check out the tutorials: Tutorial: Windows Testing Tutorial: Java Testing Learn more about testing desktop applications: Testing Windows Applications Testing Oracle Forms Webinars \u00b6 Automating Desktop UI Testing Testing Microsoft Dynamics NAV desktop client Testing Microsoft Dynamics AX desktop client See Also \u00b6 UIAutomation Spy UIAutomation Library","title":"Desktop Testing"},{"location":"desktop/#desktop-testing","text":"If you plan to record and playback the very first desktop test - check out the tutorials: Tutorial: Windows Testing Tutorial: Java Testing Learn more about testing desktop applications: Testing Windows Applications Testing Oracle Forms","title":"Desktop Testing"},{"location":"desktop/#webinars","text":"Automating Desktop UI Testing Testing Microsoft Dynamics NAV desktop client Testing Microsoft Dynamics AX desktop client","title":"Webinars"},{"location":"desktop/#see-also","text":"UIAutomation Spy UIAutomation Library","title":"See Also"},{"location":"dynamics/","text":"Microsoft Dynamics Testing \u00b6 Rapise provides out of the box support for the following different versions of Microsoft Dynamics: Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter. Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central. Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids). Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components. Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface. Which One Do you Have? \u00b6 KB272 Microsoft Dynamics Solutions - Which One Do You Have? Webinars \u00b6 Testing MS Dynamics NAV Testing MS Dynamics AX Testing MS Dynamics 365 for Sales Testing MS Dynamics 365 for Finance & Operations See Also \u00b6 Microsoft Dynamics Testing in Rapise","title":"Microsoft Dynamics Testing"},{"location":"dynamics/#microsoft-dynamics-testing","text":"Rapise provides out of the box support for the following different versions of Microsoft Dynamics: Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter. Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central. Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids). Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components. Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface.","title":"Microsoft Dynamics Testing"},{"location":"dynamics/#which-one-do-you-have","text":"KB272 Microsoft Dynamics Solutions - Which One Do You Have?","title":"Which One Do you Have?"},{"location":"dynamics/#webinars","text":"Testing MS Dynamics NAV Testing MS Dynamics AX Testing MS Dynamics 365 for Sales Testing MS Dynamics 365 for Finance & Operations","title":"Webinars"},{"location":"dynamics/#see-also","text":"Microsoft Dynamics Testing in Rapise","title":"See Also"},{"location":"emptyfile/","text":"","title":"Emptyfile"},{"location":"manual/","text":"Manual Testing \u00b6 If you plan to create the very first manual test - check out the tutorial: Tutorial: Manual Testing Learn more about manual testing with Rapise: Manual Testing","title":"Manual Testing"},{"location":"manual/#manual-testing","text":"If you plan to create the very first manual test - check out the tutorial: Tutorial: Manual Testing Learn more about manual testing with Rapise: Manual Testing","title":"Manual Testing"},{"location":"mobile/","text":"Mobile Testing \u00b6 Mobile Testing in Rapise Preparing the Environment \u00b6 Preparing Environment for Android Mobile Testing Preparing Environment for iOS Mobile Testing Tutorials \u00b6 Mobile Testing on Android Mobile Testing on iOS Webinars \u00b6 Automating Mobile UI Testing See Also \u00b6 Mobile Spy","title":"Mobile Testing"},{"location":"mobile/#mobile-testing","text":"Mobile Testing in Rapise","title":"Mobile Testing"},{"location":"mobile/#preparing-the-environment","text":"Preparing Environment for Android Mobile Testing Preparing Environment for iOS Mobile Testing","title":"Preparing the Environment"},{"location":"mobile/#tutorials","text":"Mobile Testing on Android Mobile Testing on iOS","title":"Tutorials"},{"location":"mobile/#webinars","text":"Automating Mobile UI Testing","title":"Webinars"},{"location":"mobile/#see-also","text":"Mobile Spy","title":"See Also"},{"location":"oninstall/","text":"Rapise Installed Successfully \u00b6 What's next? \u00b6 Watch the webinar: Introduction to Test Automation with Rapise","title":"Rapise Installed Successfully"},{"location":"oninstall/#rapise-installed-successfully","text":"","title":"Rapise Installed Successfully"},{"location":"oninstall/#whats-next","text":"Watch the webinar: Introduction to Test Automation with Rapise","title":"What's next?"},{"location":"onuninstall/","text":"Rapise Uninstalled Successfully \u00b6 What's next? \u00b6 Download the Latest Version \u00b6 To get the latest build of Rapise sign-in to your Customer Area scroll down to My Downloads section and click the link in Download URL column. Drop Us a Message \u00b6 Contact us with your questions, feedback, comments, or suggestions.","title":"Rapise Uninstalled Successfully"},{"location":"onuninstall/#rapise-uninstalled-successfully","text":"","title":"Rapise Uninstalled Successfully"},{"location":"onuninstall/#whats-next","text":"","title":"What's next?"},{"location":"onuninstall/#download-the-latest-version","text":"To get the latest build of Rapise sign-in to your Customer Area scroll down to My Downloads section and click the link in Download URL column.","title":"Download the Latest Version"},{"location":"onuninstall/#drop-us-a-message","text":"Contact us with your questions, feedback, comments, or suggestions.","title":"Drop Us a Message"},{"location":"web/","text":"Web Testing \u00b6 If you plan to record and playback the very first web test - check out the tutorial: Tutorial: Web Testing To use Chrome or Firefox browser for recording you may need to install the plugins: Setting Up Web Browsers To improve default recording experience get familiar with Web Application Profiles In-depth documentation on web testing: Web Testing Webinars \u00b6 Introduction To Powerful New Rapise 6.0 Live Demo: Data-driven Codeless Test Automating Web UI Testing See Also \u00b6 Web Spy Self-healing Web Locators HTMLObject Navigator","title":"Web Testing"},{"location":"web/#web-testing","text":"If you plan to record and playback the very first web test - check out the tutorial: Tutorial: Web Testing To use Chrome or Firefox browser for recording you may need to install the plugins: Setting Up Web Browsers To improve default recording experience get familiar with Web Application Profiles In-depth documentation on web testing: Web Testing","title":"Web Testing"},{"location":"web/#webinars","text":"Introduction To Powerful New Rapise 6.0 Live Demo: Data-driven Codeless Test Automating Web UI Testing","title":"Webinars"},{"location":"web/#see-also","text":"Web Spy Self-healing Web Locators HTMLObject Navigator","title":"See Also"},{"location":"Guide/about_this_guide/","text":"About this Guide \u00b6 The Rapise User's Guide is divided into four sections: Getting Started; Features; Dialogs, Views, and Menus; HowTos. Getting Started \u00b6 The Getting Started section is for new Rapise users. It has the following subsections: An Overview of Rapise: what it's for and how to use it. Samples Index , where the sample projects included with Rapise are described. Tutorial: Windows Testing , a step-by-step tutorial for creating your first test with Rapise using a Windows desktop application. Tutorial: Web Testing , a slightly more advanced tutorial in using Rapise to test a web page. Tutorial: REST Web Services , a tutorial in using Rapise to test a RESTful web service API. Tutorial: SOAP Web Services - a tutorial in using Rapise to test a SOAP web service API. Tutorial: Mobile Testing - a tutorial explaining how to use Rapise to test a mobile application (in this case using Android) Tutorial: Manual Testing - a tutorial explaining how to use Rapise to do exploratory / manual testing . Tutorial: Java Testing - a step-by-step tutorial for creating a Rapise test for Java AWT, Swing and SWT applications Tutorial: QtFramework - a step-by-step tutorial for creating a Rapise test for Qt Framework desktop applications. Features \u00b6 The features of Rapise are many. The features have been designed to make all aspects of test automation as easy as possible. Most of the features of Rapise fall into one of five categories: Building test scripts with little or no manual scripting. Reading and interpreting results and reports. Additional features and capabilities for sophisticated testing. Writing more involved or complicated tests using scripting. Extending Rapise to learn new or extended libraries of capabilities. Depending on the application set being tested, not all of these features are necessarily needed for every situation. For each feature, this document attempts to present: The reason you might use a given feature. A summary of the basic value of the feature. An overview of how the feature works from the perspective of using it. At least one useful sample that demonstrates how to use the feature. Dialogs, Views, and Menus \u00b6 This section details the Rapise GUI. Each subsection describes the function of a particular Dialog, View, or Menu. The purpose and consequences of all buttons, options, lists, and check boxes are listed. How-Tos \u00b6 This section focuses on specific tasks that a Rapise user might want to accomplish.","title":"About this Guide"},{"location":"Guide/about_this_guide/#about-this-guide","text":"The Rapise User's Guide is divided into four sections: Getting Started; Features; Dialogs, Views, and Menus; HowTos.","title":"About this Guide"},{"location":"Guide/about_this_guide/#getting-started","text":"The Getting Started section is for new Rapise users. It has the following subsections: An Overview of Rapise: what it's for and how to use it. Samples Index , where the sample projects included with Rapise are described. Tutorial: Windows Testing , a step-by-step tutorial for creating your first test with Rapise using a Windows desktop application. Tutorial: Web Testing , a slightly more advanced tutorial in using Rapise to test a web page. Tutorial: REST Web Services , a tutorial in using Rapise to test a RESTful web service API. Tutorial: SOAP Web Services - a tutorial in using Rapise to test a SOAP web service API. Tutorial: Mobile Testing - a tutorial explaining how to use Rapise to test a mobile application (in this case using Android) Tutorial: Manual Testing - a tutorial explaining how to use Rapise to do exploratory / manual testing . Tutorial: Java Testing - a step-by-step tutorial for creating a Rapise test for Java AWT, Swing and SWT applications Tutorial: QtFramework - a step-by-step tutorial for creating a Rapise test for Qt Framework desktop applications.","title":"Getting Started"},{"location":"Guide/about_this_guide/#features","text":"The features of Rapise are many. The features have been designed to make all aspects of test automation as easy as possible. Most of the features of Rapise fall into one of five categories: Building test scripts with little or no manual scripting. Reading and interpreting results and reports. Additional features and capabilities for sophisticated testing. Writing more involved or complicated tests using scripting. Extending Rapise to learn new or extended libraries of capabilities. Depending on the application set being tested, not all of these features are necessarily needed for every situation. For each feature, this document attempts to present: The reason you might use a given feature. A summary of the basic value of the feature. An overview of how the feature works from the perspective of using it. At least one useful sample that demonstrates how to use the feature.","title":"Features"},{"location":"Guide/about_this_guide/#dialogs-views-and-menus","text":"This section details the Rapise GUI. Each subsection describes the function of a particular Dialog, View, or Menu. The purpose and consequences of all buttons, options, lists, and check boxes are listed.","title":"Dialogs, Views, and Menus"},{"location":"Guide/about_this_guide/#how-tos","text":"This section focuses on specific tasks that a Rapise user might want to accomplish.","title":"How-Tos"},{"location":"Guide/absolute_analog_learning/","text":"Absolute Analog Recording \u00b6 Purpose \u00b6 Absolute analog recording is used to track mouse usage (movement and clicks) and keyboard events. For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. (In contrast, in relative analog, the events are recorded relative to the upper-left corner of the selected objects.) The events are recorded in a file of type arf (Analog Recording File). Value \u00b6 Not all applications can be recorded by locating and learning objects being used. A very good example of this is free-hand drawing in an application such as Microsoft Paint ( Start Menu > Accessories > Paint ). There are several reasons why this application cannot be recorded using object tracking, learning and recording. The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars. Absolute analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications. See Also \u00b6 Do Absolute Analog Recording Relative Analog Recording","title":"Absolute Analog Recording"},{"location":"Guide/absolute_analog_learning/#absolute-analog-recording","text":"","title":"Absolute Analog Recording"},{"location":"Guide/absolute_analog_learning/#purpose","text":"Absolute analog recording is used to track mouse usage (movement and clicks) and keyboard events. For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. (In contrast, in relative analog, the events are recorded relative to the upper-left corner of the selected objects.) The events are recorded in a file of type arf (Analog Recording File).","title":"Purpose"},{"location":"Guide/absolute_analog_learning/#value","text":"Not all applications can be recorded by locating and learning objects being used. A very good example of this is free-hand drawing in an application such as Microsoft Paint ( Start Menu > Accessories > Paint ). There are several reasons why this application cannot be recorded using object tracking, learning and recording. The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars. Absolute analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications.","title":"Value"},{"location":"Guide/absolute_analog_learning/#see-also","text":"Do Absolute Analog Recording Relative Analog Recording","title":"See Also"},{"location":"Guide/accessing_files_and_i_o_functi/","text":"Accessing Files and I/O Functions \u00b6 Overview \u00b6 Sometimes using Rapise you need to access files on the Windows file system, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file. File Global Object \u00b6 Normally file operations in Rapise are done with global File object. function Test () { var fn = \"TestFile.txt\" ; var cnt = \"Hello world!\" ; // Test exists/delete if ( File . Exists ( fn )) { File . Delete ( fn ); Tester . Assert ( \"File deleted\" , ! File . Exists ( fn )); } // Test read/write File . Write ( fn , cnt ); if ( Tester . Assert ( \"File exists\" , File . Exists ( fn ))) { var text = File . Read ( fn ); Tester . AssertEqual ( \"File write/read\" , text , cnt ); } // Test append File . Write ( fn , \"C\" ); File . Append ( fn , \"C\" ); var text = File . Read ( fn ); Tester . AssertEqual ( \"File append works\" , \"CC\" , text ); // Folder exists/create/delete var folderExists = File . FolderExists ( \".\" ); Tester . Assert ( \"Folder exists\" , folderExists ); var testFolderPath = File . FolderInfo ( \".\" ). Path ; Tester . Message ( testFolderPath ); var subFolderPath = testFolderPath + \"\\\\SubFolder20170314\" ; File . CreateFolder ( subFolderPath ); Tester . Assert ( \"Sub folder exists, CreateFolder works\" , File . FolderExists ( subFolderPath )); File . DeleteFolder ( subFolderPath ); Tester . Assert ( \"Sub folder does not exist, DeleteFolder works\" , ! File . FolderExists ( subFolderPath )); } FileSystemObject \u00b6 Alternatively you can can access the file system using the FileSystemObject . http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx function Test () { //IOMode constants var IOMode \\ _ForReading = 1 ; var IOMode \\ _ForWriting = 2 ; var IOMode \\ _ForAppending = 8 ; //var Format constants var IOFormat \\ _ASCII = 0 ; var IOFormat \\ _Unicode = - 1 ; //This sample demonstrates how to manipulate the Windows file system using Rapise //We shall open a text file for writing in this simple example var fso = new ActiveXObject ( 'Scripting.FileSystemObject' ); var ts = fso . CreateTextFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts . Close (); var file = fso . GetFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts = file . OpenAsTextStream ( IOMode \\ _ForWriting , IOFormat \\ _Unicode ); ts . WriteLine ( 'Hello World!' ); ts . Close (); Tester . Message ( 'Wrote File' ); //Now read this file back file = fso . GetFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts = file . OpenAsTextStream ( IOMode \\ _ForReading , IOFormat \\ _Unicode ); var text = ts . ReadLine (); Tester . Message ( text ); ts . Close (); } See Also \u00b6 How-Tos","title":"Accessing Files and I/O Functions"},{"location":"Guide/accessing_files_and_i_o_functi/#accessing-files-and-io-functions","text":"","title":"Accessing Files and I/O Functions"},{"location":"Guide/accessing_files_and_i_o_functi/#overview","text":"Sometimes using Rapise you need to access files on the Windows file system, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file.","title":"Overview"},{"location":"Guide/accessing_files_and_i_o_functi/#file-global-object","text":"Normally file operations in Rapise are done with global File object. function Test () { var fn = \"TestFile.txt\" ; var cnt = \"Hello world!\" ; // Test exists/delete if ( File . Exists ( fn )) { File . Delete ( fn ); Tester . Assert ( \"File deleted\" , ! File . Exists ( fn )); } // Test read/write File . Write ( fn , cnt ); if ( Tester . Assert ( \"File exists\" , File . Exists ( fn ))) { var text = File . Read ( fn ); Tester . AssertEqual ( \"File write/read\" , text , cnt ); } // Test append File . Write ( fn , \"C\" ); File . Append ( fn , \"C\" ); var text = File . Read ( fn ); Tester . AssertEqual ( \"File append works\" , \"CC\" , text ); // Folder exists/create/delete var folderExists = File . FolderExists ( \".\" ); Tester . Assert ( \"Folder exists\" , folderExists ); var testFolderPath = File . FolderInfo ( \".\" ). Path ; Tester . Message ( testFolderPath ); var subFolderPath = testFolderPath + \"\\\\SubFolder20170314\" ; File . CreateFolder ( subFolderPath ); Tester . Assert ( \"Sub folder exists, CreateFolder works\" , File . FolderExists ( subFolderPath )); File . DeleteFolder ( subFolderPath ); Tester . Assert ( \"Sub folder does not exist, DeleteFolder works\" , ! File . FolderExists ( subFolderPath )); }","title":"File Global Object"},{"location":"Guide/accessing_files_and_i_o_functi/#filesystemobject","text":"Alternatively you can can access the file system using the FileSystemObject . http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx function Test () { //IOMode constants var IOMode \\ _ForReading = 1 ; var IOMode \\ _ForWriting = 2 ; var IOMode \\ _ForAppending = 8 ; //var Format constants var IOFormat \\ _ASCII = 0 ; var IOFormat \\ _Unicode = - 1 ; //This sample demonstrates how to manipulate the Windows file system using Rapise //We shall open a text file for writing in this simple example var fso = new ActiveXObject ( 'Scripting.FileSystemObject' ); var ts = fso . CreateTextFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts . Close (); var file = fso . GetFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts = file . OpenAsTextStream ( IOMode \\ _ForWriting , IOFormat \\ _Unicode ); ts . WriteLine ( 'Hello World!' ); ts . Close (); Tester . Message ( 'Wrote File' ); //Now read this file back file = fso . GetFile ( 'C:\\\\\\\\Temp\\\\\\\\MyTestFile.txt' ); ts = file . OpenAsTextStream ( IOMode \\ _ForReading , IOFormat \\ _Unicode ); var text = ts . ReadLine (); Tester . Message ( text ); ts . Close (); }","title":"FileSystemObject"},{"location":"Guide/accessing_files_and_i_o_functi/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/actions/","text":"Actions \u00b6 Purpose \u00b6 Actions are anything the user can do to a GUI control, such as click, select, fill with text, etc. You can override the behavior of an action, without creating or altering a Recording Library , using SeSOverrideAction() . Overriding an action affects Playback , but not Recording . Usage \u00b6 SeSOverrideAction() is used to override an action handler or add a new DoAction handler: /** * Overrides Behavior. * this may be used if some behavior should be tweaked. Default action handler * is passed to the callback as the first parameter. * https://www.inflectra.com/support/knowledgebase/kb354.aspx * @param objectType Either object_type of the rule or regexp pattern for object_type. * @param actionName action name. For example \"DoClick\". * @param callback new action handler for specified action. * @returns 'true' if object_type is found and replacement is successful, 'false' otherwise. */ function SeSOverrideAction ( /**string*/ objectType , /**string*/ actionName , callback ) In most cases SeSOverrideAction() should be called from within TestInit() . Calling Base Actions \u00b6 The function you are overriding is called the base action . It is passed to the overriding action as first defaultActionHandler parameter. You can call the base action like this: function MyHTMLObjectDoClick ( defaultActionHandler , x , y , forceEvent ) { Tester . Message ( \"Click on \" + this . object_name ); this . highlight (); Global . DoSleep ( 500 ); return defaultActionHandler . apply ( this , [ x , y , forceEvent ]); // calling the base action } See Also \u00b6 KB354 How to override an action for an object type","title":"Actions"},{"location":"Guide/actions/#actions","text":"","title":"Actions"},{"location":"Guide/actions/#purpose","text":"Actions are anything the user can do to a GUI control, such as click, select, fill with text, etc. You can override the behavior of an action, without creating or altering a Recording Library , using SeSOverrideAction() . Overriding an action affects Playback , but not Recording .","title":"Purpose"},{"location":"Guide/actions/#usage","text":"SeSOverrideAction() is used to override an action handler or add a new DoAction handler: /** * Overrides Behavior. * this may be used if some behavior should be tweaked. Default action handler * is passed to the callback as the first parameter. * https://www.inflectra.com/support/knowledgebase/kb354.aspx * @param objectType Either object_type of the rule or regexp pattern for object_type. * @param actionName action name. For example \"DoClick\". * @param callback new action handler for specified action. * @returns 'true' if object_type is found and replacement is successful, 'false' otherwise. */ function SeSOverrideAction ( /**string*/ objectType , /**string*/ actionName , callback ) In most cases SeSOverrideAction() should be called from within TestInit() .","title":"Usage"},{"location":"Guide/actions/#calling-base-actions","text":"The function you are overriding is called the base action . It is passed to the overriding action as first defaultActionHandler parameter. You can call the base action like this: function MyHTMLObjectDoClick ( defaultActionHandler , x , y , forceEvent ) { Tester . Message ( \"Click on \" + this . object_name ); this . highlight (); Global . DoSleep ( 500 ); return defaultActionHandler . apply ( this , [ x , y , forceEvent ]); // calling the base action }","title":"Calling Base Actions"},{"location":"Guide/actions/#see-also","text":"KB354 How to override an action for an object type","title":"See Also"},{"location":"Guide/ado_integration/","text":"Azure DevOps Integration v2 \u00b6 Tip This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3 . From this topic you will learn how to run Rapise tests with Node-Tap and Azure DevOps . Node-Tap \u00b6 Prerequisites \u00b6 Download and install Node.js . Open command prompt and run the following commands to make sure you have Node.js and npm installed: C: \\U sers \\i nflectra>node --version v10.16.3 C: \\U sers \\i nflectra>npm --version 6 .9.0 Install Node-Tap package with npm : npm install tap -g Discover the folder where Node-Tap is installed: C: \\U sers \\i nflectra>npm list tap -g C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm -- tap@14.6.9 Configure system variable NODE_PATH and set it to node_modules subfolder. In our case it is: C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm \\n ode_modules Relaunch Command Prompt and verify the system variable: C: \\U sers \\i nflectra>echo %NODE_PATH% C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm \\n ode_modules Test Framework \u00b6 As a starting point you may use sample framework we published on GitHub. The root folder of the framework contains: rapise.js - node.js module capable of running Rapise tests; runtest.cmd - command file used by rapise.js , adjust SES_ENGINE_HOME variable in this file if needed; fixunit.js , tap2xunit.cmd - these two files convert execution results from TAP format to XUnit format accepted by Azure DevOps. Each Rapise test in this framework is a direct subfolder of the root folder: AzureDevOpsFriendlyArchitecture | |-CreateNewBook |-FailedLogin test folder contains entries for Node-Tap. These are files with predefined content and names equal to names of Rapise tests. AzureDevOpsFriendlyArchitecture | |- test | |-CreateNewBook.js |-FailedLogin.js Predefined content of the files is: var rapise = require ( '../rapise' ) var tap = require ( 'tap' ) var path = require ( 'path' ); var testName = path . basename ( __filename ); rapise . run ( testName , function ( exit_code ) { tap . ok ( exit_code == 0 , testName ); }) There is also tap-parallel-not-ok in tests folder that instructs Node-Tap to run tests sequentially. Run Tests with Tap \u00b6 To run tests on a local machine open command prompt in the root folder of the framework and execute: tap You should see tests running: To pass parameters to a Rapise test specify --test-arg . The value is JSON stringified object. Every property of this object will be evaluated by Rapise as a global variable: tap --test-arg = \"{'g_browserLibrary':'Selenium - Chrome'}\" Azure DevOps Pipeline v1 \u00b6 To run tests in Azure DevOps you need to configure a pipeline . Here is the template to run Rapise tests: azure-pipelines.yml # Starter pipeline # Start with a minimal pipeline that you can customize to build and deploy your code. # Add steps that build, run tests, deploy, and more: # https://aka.ms/yaml trigger : - master pool : name : 'default' steps : - script : | echo Running tests... tap --test-arg=\"{'g_browserLibrary':'Selenium - Chrome'}\" displayName : 'Execute Tests' continueOnError : true - script : | call tap2xunit.cmd displayName : \"Convert TAP to XUnit\" - script : | cscript.exe fixunit.js displayName : 'Fix XUnit Reports' - task : CopyFiles@2 inputs : contents : 'reports/**' targetFolder : $(Build.ArtifactStagingDirectory) - task : PublishBuildArtifacts@1 inputs : pathToPublish : $(Build.ArtifactStagingDirectory) artifactName : TestRunReports - task : PublishTestResults@2 inputs : testResultsFormat : 'JUnit' testResultsFiles : 'results/*.xml' testRunTitle : 'Basic Tests' failTaskOnFailedTests : true The pipeline above assumes that default agent pool contains a Self-hosted Windows Agent installed on a machine with Rapise and Node-Tap (see Prerequisites ). See the video to learn how to install and configure a self-hosted agent. The pipeline consists of the following steps: Run tests via tap command. You can pass parameters if needed. Convert TAP formatted execution results to XUnit formatted reports. Adjust XUnit reports for better processing by Azure DevOps. Gather logs and reports in TAP/TRP formats in reports folder for Publish Build Artifacts task . Upload test results to Azure with Publish Test Results task . After execution of the pipeline one can review test results: and reports/logs (.tap, .trp, .log): Note: TRP files are standard reports you can view with Rapise. Azure DevOps Pipeline v2 \u00b6 If you do not want each step of a Rapise test to be reported as test case in Azure DevOps use modified pipeline version: azure-pipelines-summary.yml # Starter pipeline # Start with a minimal pipeline that you can customize to build and deploy your code. # Add steps that build, run tests, deploy, and more: # https://aka.ms/yaml trigger : none pool : name : 'default' steps : - script : | echo Running tests... tap --no-coverage --test-arg=\"{'g_browserLibrary':'Chrome HTML'}\" displayName : 'Execute Tests' continueOnError : true - script : | call tap2xunit.cmd displayName : \"Convert TAP to XUnit\" - script : | .exe summarize.js displayName : 'Fix XUnit Reports' - task : CopyFiles@2 inputs : contents : 'reports/**' targetFolder : $(Build.ArtifactStagingDirectory) - task : PublishBuildArtifacts@1 inputs : pathToPublish : $(Build.ArtifactStagingDirectory) artifactName : TestRunReports - task : PublishTestResults@2 inputs : testResultsFormat : 'JUnit' testResultsFiles : 'results/*.xml' testRunTitle : 'Basic Tests' failTaskOnFailedTests : true It calls summarize.js to adjust XUnit reports. Azure DevOps report for this pipeline looks like: Detailed logs and reports (.tap, .trp, .log files) are also available for download as a ZIP archive: Note: TRP files are standard reports you can view with Rapise.","title":"Azure DevOps Integration v2"},{"location":"Guide/ado_integration/#azure-devops-integration-v2","text":"Tip This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3 . From this topic you will learn how to run Rapise tests with Node-Tap and Azure DevOps .","title":"Azure DevOps Integration v2"},{"location":"Guide/ado_integration/#node-tap","text":"","title":"Node-Tap"},{"location":"Guide/ado_integration/#prerequisites","text":"Download and install Node.js . Open command prompt and run the following commands to make sure you have Node.js and npm installed: C: \\U sers \\i nflectra>node --version v10.16.3 C: \\U sers \\i nflectra>npm --version 6 .9.0 Install Node-Tap package with npm : npm install tap -g Discover the folder where Node-Tap is installed: C: \\U sers \\i nflectra>npm list tap -g C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm -- tap@14.6.9 Configure system variable NODE_PATH and set it to node_modules subfolder. In our case it is: C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm \\n ode_modules Relaunch Command Prompt and verify the system variable: C: \\U sers \\i nflectra>echo %NODE_PATH% C: \\U sers \\i nflectra \\A ppData \\R oaming \\n pm \\n ode_modules","title":"Prerequisites"},{"location":"Guide/ado_integration/#test-framework","text":"As a starting point you may use sample framework we published on GitHub. The root folder of the framework contains: rapise.js - node.js module capable of running Rapise tests; runtest.cmd - command file used by rapise.js , adjust SES_ENGINE_HOME variable in this file if needed; fixunit.js , tap2xunit.cmd - these two files convert execution results from TAP format to XUnit format accepted by Azure DevOps. Each Rapise test in this framework is a direct subfolder of the root folder: AzureDevOpsFriendlyArchitecture | |-CreateNewBook |-FailedLogin test folder contains entries for Node-Tap. These are files with predefined content and names equal to names of Rapise tests. AzureDevOpsFriendlyArchitecture | |- test | |-CreateNewBook.js |-FailedLogin.js Predefined content of the files is: var rapise = require ( '../rapise' ) var tap = require ( 'tap' ) var path = require ( 'path' ); var testName = path . basename ( __filename ); rapise . run ( testName , function ( exit_code ) { tap . ok ( exit_code == 0 , testName ); }) There is also tap-parallel-not-ok in tests folder that instructs Node-Tap to run tests sequentially.","title":"Test Framework"},{"location":"Guide/ado_integration/#run-tests-with-tap","text":"To run tests on a local machine open command prompt in the root folder of the framework and execute: tap You should see tests running: To pass parameters to a Rapise test specify --test-arg . The value is JSON stringified object. Every property of this object will be evaluated by Rapise as a global variable: tap --test-arg = \"{'g_browserLibrary':'Selenium - Chrome'}\"","title":"Run Tests with Tap"},{"location":"Guide/ado_integration/#azure-devops-pipeline-v1","text":"To run tests in Azure DevOps you need to configure a pipeline . Here is the template to run Rapise tests: azure-pipelines.yml # Starter pipeline # Start with a minimal pipeline that you can customize to build and deploy your code. # Add steps that build, run tests, deploy, and more: # https://aka.ms/yaml trigger : - master pool : name : 'default' steps : - script : | echo Running tests... tap --test-arg=\"{'g_browserLibrary':'Selenium - Chrome'}\" displayName : 'Execute Tests' continueOnError : true - script : | call tap2xunit.cmd displayName : \"Convert TAP to XUnit\" - script : | cscript.exe fixunit.js displayName : 'Fix XUnit Reports' - task : CopyFiles@2 inputs : contents : 'reports/**' targetFolder : $(Build.ArtifactStagingDirectory) - task : PublishBuildArtifacts@1 inputs : pathToPublish : $(Build.ArtifactStagingDirectory) artifactName : TestRunReports - task : PublishTestResults@2 inputs : testResultsFormat : 'JUnit' testResultsFiles : 'results/*.xml' testRunTitle : 'Basic Tests' failTaskOnFailedTests : true The pipeline above assumes that default agent pool contains a Self-hosted Windows Agent installed on a machine with Rapise and Node-Tap (see Prerequisites ). See the video to learn how to install and configure a self-hosted agent. The pipeline consists of the following steps: Run tests via tap command. You can pass parameters if needed. Convert TAP formatted execution results to XUnit formatted reports. Adjust XUnit reports for better processing by Azure DevOps. Gather logs and reports in TAP/TRP formats in reports folder for Publish Build Artifacts task . Upload test results to Azure with Publish Test Results task . After execution of the pipeline one can review test results: and reports/logs (.tap, .trp, .log): Note: TRP files are standard reports you can view with Rapise.","title":"Azure DevOps Pipeline v1"},{"location":"Guide/ado_integration/#azure-devops-pipeline-v2","text":"If you do not want each step of a Rapise test to be reported as test case in Azure DevOps use modified pipeline version: azure-pipelines-summary.yml # Starter pipeline # Start with a minimal pipeline that you can customize to build and deploy your code. # Add steps that build, run tests, deploy, and more: # https://aka.ms/yaml trigger : none pool : name : 'default' steps : - script : | echo Running tests... tap --no-coverage --test-arg=\"{'g_browserLibrary':'Chrome HTML'}\" displayName : 'Execute Tests' continueOnError : true - script : | call tap2xunit.cmd displayName : \"Convert TAP to XUnit\" - script : | .exe summarize.js displayName : 'Fix XUnit Reports' - task : CopyFiles@2 inputs : contents : 'reports/**' targetFolder : $(Build.ArtifactStagingDirectory) - task : PublishBuildArtifacts@1 inputs : pathToPublish : $(Build.ArtifactStagingDirectory) artifactName : TestRunReports - task : PublishTestResults@2 inputs : testResultsFormat : 'JUnit' testResultsFiles : 'results/*.xml' testRunTitle : 'Basic Tests' failTaskOnFailedTests : true It calls summarize.js to adjust XUnit reports. Azure DevOps report for this pipeline looks like: Detailed logs and reports (.tap, .trp, .log files) are also available for download as a ZIP archive: Note: TRP files are standard reports you can view with Rapise.","title":"Azure DevOps Pipeline v2"},{"location":"Guide/analog_recording/","text":"Analog Recording \u00b6 Concept \u00b6 Sometimes you have to automate the testing of an application that contains some controls or elements that are not standard objects that can be recognized by Rapise. For example you may have a drawing canvas inside an application that allows you to annotate a diagram. You can use the standard Rapise libraries for the rest of the controls but the actual drawing events cannot be captured that way. Analog recording is available to \u2018fill in the gaps\u2019 in such scenarios. During Analog Recording , Rapise records mouse movements, keyboard inputs, and clicks and stores them in a special .ARF (Analog Recording File) format file: There are two types of Analog Recording: Absolute and Relative . Absolute : Mouse coordinates are recorded relative to the top left corner of the screen. Relative : Mouse coordinates are recorded relative to the top left corner of the object beneath the mouse cursor. Usage \u00b6 When you are recording your test using the application you may come to a point where there are user actions that you need to record that don\u2019t have any identifiable objects (for example drawing a signature). You can click on the \u2018Analog\u2019 button on the recorder to engage Analog mode: Now when you use the mouse and keyboard to test the application, Rapise is storing the coordinates of your mouse clicks and keyboard events and storing them in a separate .ARF file that is part of your test project. Once completed, the entire analog section is included as one step within the complete test script so you can include an analog sequence within a test script that contains other non-analog events. This lets you have the robustness of true object-based recording for 95% of your test and analog when you need it for the remaining 5%. This is the best of both worlds. See Also \u00b6 Recording Activity Dialog","title":"Analog Recording"},{"location":"Guide/analog_recording/#analog-recording","text":"","title":"Analog Recording"},{"location":"Guide/analog_recording/#concept","text":"Sometimes you have to automate the testing of an application that contains some controls or elements that are not standard objects that can be recognized by Rapise. For example you may have a drawing canvas inside an application that allows you to annotate a diagram. You can use the standard Rapise libraries for the rest of the controls but the actual drawing events cannot be captured that way. Analog recording is available to \u2018fill in the gaps\u2019 in such scenarios. During Analog Recording , Rapise records mouse movements, keyboard inputs, and clicks and stores them in a special .ARF (Analog Recording File) format file: There are two types of Analog Recording: Absolute and Relative . Absolute : Mouse coordinates are recorded relative to the top left corner of the screen. Relative : Mouse coordinates are recorded relative to the top left corner of the object beneath the mouse cursor.","title":"Concept"},{"location":"Guide/analog_recording/#usage","text":"When you are recording your test using the application you may come to a point where there are user actions that you need to record that don\u2019t have any identifiable objects (for example drawing a signature). You can click on the \u2018Analog\u2019 button on the recorder to engage Analog mode: Now when you use the mouse and keyboard to test the application, Rapise is storing the coordinates of your mouse clicks and keyboard events and storing them in a separate .ARF file that is part of your test project. Once completed, the entire analog section is included as one step within the complete test script so you can include an analog sequence within a test script that contains other non-analog events. This lets you have the robustness of true object-based recording for 95% of your test and analog when you need it for the remaining 5%. This is the best of both worlds.","title":"Usage"},{"location":"Guide/analog_recording/#see-also","text":"Recording Activity Dialog","title":"See Also"},{"location":"Guide/assertions/","text":"Assertions \u00b6 Purpose \u00b6 An assert statement is a special Boolean condition that represents an assumption about program state at a particular point in test execution. When an assert is encountered, the condition is evaluated. A value of False indicates a program error. In some languages, execution will halt if an assertion evaluates to False . In Rapise, the result is logged to the report with failed status, and execution continues or not depending on StopOnError test option. There are explicit and implicit assertions (or checkpoints) generated during the script execution and reflected in the report. Each report line is produced by one of the following statements: RVL Action - has an implicit assertion as a side-effect. Success means successful action execution. JavaScript Action - has an implicit assertion as a side-effect. Success means successful action execution. RVL Assertion - explicit comparison (checkpoint) Code Assertion - explicit comparison (checkpoint) Execution Error Image Comparison (Checkpoint) Create a Checkpoint \u00b6 To create a checkpoint using an assertion, you will have to manually alter the test script (another way is to use the Verify Object Properties dialog during Recording ): Select a location in your script. Query for the application state . For object properties use Get<..> methods. For example: 1 2 var xx = SeS ( \"OkButton\" ) . GetX (); // X position of the object var image = SeS ( 'Customer' ) . GetBitmap (); // Image of the object Save the state (optional) . If you are creating an image checkpoint, you may want to save the image to a file. Compare . Use the ImageWrapper class to compare images. Write an Assert Statement . Make an appropriate call to one of Tester.Assert methods. Besides a Boolean condition, pass additional data to be placed in the Report . Read about Tester.Assert syntax in the Libraries documentation part. Example: Simple Property Checkpoint \u00b6 JavaScript Tester . AssertEqual ( \"Verify that: ColumnCount=11\" , SeS ( 'DataGridView' ). GetColumnCount (), 11 ); RVL Failure Representation in Report Example: Bitmap Checkpoint \u00b6 JavaScript Tester . AssertImage ( \"Compare Customer bitmap to Images\\\\Checkpoint0001.png\" , SeS ( 'Customer' ). GetBitmap (), Global . GetFullPath ( \"Images\\\\Checkpoint0001.png\" )); RVL Failure Representation in Report See Also \u00b6 KB330 Compare two SpreadSheets in Rapise The test samples include a UsingImageCheckpoint test Verifying Object Properties Writing to the Report","title":"Assert Statements"},{"location":"Guide/assertions/#assertions","text":"","title":"Assertions"},{"location":"Guide/assertions/#purpose","text":"An assert statement is a special Boolean condition that represents an assumption about program state at a particular point in test execution. When an assert is encountered, the condition is evaluated. A value of False indicates a program error. In some languages, execution will halt if an assertion evaluates to False . In Rapise, the result is logged to the report with failed status, and execution continues or not depending on StopOnError test option. There are explicit and implicit assertions (or checkpoints) generated during the script execution and reflected in the report. Each report line is produced by one of the following statements: RVL Action - has an implicit assertion as a side-effect. Success means successful action execution. JavaScript Action - has an implicit assertion as a side-effect. Success means successful action execution. RVL Assertion - explicit comparison (checkpoint) Code Assertion - explicit comparison (checkpoint) Execution Error Image Comparison (Checkpoint)","title":"Purpose"},{"location":"Guide/assertions/#create-a-checkpoint","text":"To create a checkpoint using an assertion, you will have to manually alter the test script (another way is to use the Verify Object Properties dialog during Recording ): Select a location in your script. Query for the application state . For object properties use Get<..> methods. For example: 1 2 var xx = SeS ( \"OkButton\" ) . GetX (); // X position of the object var image = SeS ( 'Customer' ) . GetBitmap (); // Image of the object Save the state (optional) . If you are creating an image checkpoint, you may want to save the image to a file. Compare . Use the ImageWrapper class to compare images. Write an Assert Statement . Make an appropriate call to one of Tester.Assert methods. Besides a Boolean condition, pass additional data to be placed in the Report . Read about Tester.Assert syntax in the Libraries documentation part.","title":"Create a Checkpoint"},{"location":"Guide/assertions/#example-simple-property-checkpoint","text":"JavaScript Tester . AssertEqual ( \"Verify that: ColumnCount=11\" , SeS ( 'DataGridView' ). GetColumnCount (), 11 ); RVL Failure Representation in Report","title":"Example: Simple Property Checkpoint"},{"location":"Guide/assertions/#example-bitmap-checkpoint","text":"JavaScript Tester . AssertImage ( \"Compare Customer bitmap to Images\\\\Checkpoint0001.png\" , SeS ( 'Customer' ). GetBitmap (), Global . GetFullPath ( \"Images\\\\Checkpoint0001.png\" )); RVL Failure Representation in Report","title":"Example: Bitmap Checkpoint"},{"location":"Guide/assertions/#see-also","text":"KB330 Compare two SpreadSheets in Rapise The test samples include a UsingImageCheckpoint test Verifying Object Properties Writing to the Report","title":"See Also"},{"location":"Guide/automated_reporting/","text":"Automated Reporting \u00b6 Purpose \u00b6 Each time you playback a test, Rapise automatically generates a report detailing the steps of the test, the data values used, and the outcome of each step. Usage \u00b6 Execute your test using the instructions here . When the test is complete a report file (ending in .trp ) will open in the Content View . It will look like this: The first row (with a white background) is used for Report Filtering . The rows below that each represent a step in the test. The rows with green text represent success; the rows with red text represent failure. You can reposition the columns by dragging and dropping the column names. The Columns \u00b6 # : For displaying icons. Name : The test name. Start : The time the test step began executing. Type : Can be one of the following values: Test; Assert; Message. Comment : Assertions and messages have associated comments. They are displayed here. Status : Whether the step passed, failed, or was merely informational. See also assertions for more information about possible type of report comparisons. Spira Column Mapping \u00b6 Whenever the test is executed using the RapiseLauncher its results are uploaded to the SpiraTest . The set of columns displayed by the Test Run Details view differs from Rapise Report Viewer, so the following mapping occurs: There is always a source .trp file attached to the test run, you may find it to in the test run Attachments tab: So you may download it and open using Rapise to see the full featured automated test report. Custom Spira Column Mapping \u00b6 You may have more fine grained control over SpiraTest column display by applying tags parameter to the Tester.Assert function. Tester . Assert ( \"Assertion Message\" , true , \"Comment goes to ActualResult\" , { \"expectedResult\" : \"expected\" , \"sampleData\" : \"sampleData\" } ); In this case ReportViewer shows two additional columns - ExpectedResult and SampleData and uses them to fill corresponding columns in the Spira test report. Note: Assertion message, ActualResult or SampleData may contain a reference to the Manual Test Step in format [TS:X] , where X is the number representing the Test Step ID. This is useful when you migrating manual test cases to automated scripts and want to keep the trace to manual test steps in the report. Report Formats \u00b6 Whenever one runs a test, the report will be stored in the following formats: .trp - default Rapise test report format. Contains all information, status and images. Rapise displays it using built in Report Viewer . .tap - pure text, Test Anything Protocol formatted output. Usually saved as last.tap . It is a simplest way for integrating the test into external/custom execution pipelines. index.html and imageNNN.png - flow output. It is saved into <test folder>\\Reports\\<Date_Time>\\ folder: Export Report \u00b6 Report may be exported as .xls , .pdf , .xps or .html using the Report popup menu. Export as HTML Dialog \u00b6 HTML export supports a number of templates. So if you do Report/Export as HTML you then have to specify the export format using the following dialog: Report File - source .trp to be used for export. Report Type - choose one of the following export templates: Full Execution Report (images embedded into html) - full report, combined in a single file. Full Execution Report (images saved as separate files) - same as previous, but all images are saved next to the main .html file. High level report (only test status) - short report containing only test-level status. Destination HTML - path to the target .html file. This type of export may also be done from JavaScript code. var ldr = new ActiveXObject ( \"Rapise.LogLoader\" ); ldr . LoadTrp ( \"Reports\\\\ReportAssertions_2020-11-04_15-20.trp\" ); ldr . ExportAsHtml ( \"C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\TrpExporter\\\\FullReportImgTpl.tt\" , \"FullReport.html\" ); Column Grouping \u00b6 Report viewer enables grouping rows by column values. Just drag the column header to this section: Use to order by the values in the chosen column. The result of dragging the Status column over looks like this: You can expand each item to see the corresponding report rows: Drag the Status icon back to undo the sort: TODO Rows \u00b6 Whenever Name starts with TODO the viewer automatically does the following: If report row Type is Info then it is highlighted in Yellow and TODO counter is incremented: If report row Type is Assert then it stays green or red, but TODO counter is still incremented. If you hover over last execution status in Rapise main window, the tooltip would contain then total number of TODO items found in the report (i.e. TODO counter): See Also \u00b6 Report Filtering The report output file is specified in the Settings Dialog ( Settings > ReportPath ).","title":"Automated Reporting"},{"location":"Guide/automated_reporting/#automated-reporting","text":"","title":"Automated Reporting"},{"location":"Guide/automated_reporting/#purpose","text":"Each time you playback a test, Rapise automatically generates a report detailing the steps of the test, the data values used, and the outcome of each step.","title":"Purpose"},{"location":"Guide/automated_reporting/#usage","text":"Execute your test using the instructions here . When the test is complete a report file (ending in .trp ) will open in the Content View . It will look like this: The first row (with a white background) is used for Report Filtering . The rows below that each represent a step in the test. The rows with green text represent success; the rows with red text represent failure. You can reposition the columns by dragging and dropping the column names.","title":"Usage"},{"location":"Guide/automated_reporting/#the-columns","text":"# : For displaying icons. Name : The test name. Start : The time the test step began executing. Type : Can be one of the following values: Test; Assert; Message. Comment : Assertions and messages have associated comments. They are displayed here. Status : Whether the step passed, failed, or was merely informational. See also assertions for more information about possible type of report comparisons.","title":"The Columns"},{"location":"Guide/automated_reporting/#spira-column-mapping","text":"Whenever the test is executed using the RapiseLauncher its results are uploaded to the SpiraTest . The set of columns displayed by the Test Run Details view differs from Rapise Report Viewer, so the following mapping occurs: There is always a source .trp file attached to the test run, you may find it to in the test run Attachments tab: So you may download it and open using Rapise to see the full featured automated test report.","title":"Spira Column Mapping"},{"location":"Guide/automated_reporting/#custom-spira-column-mapping","text":"You may have more fine grained control over SpiraTest column display by applying tags parameter to the Tester.Assert function. Tester . Assert ( \"Assertion Message\" , true , \"Comment goes to ActualResult\" , { \"expectedResult\" : \"expected\" , \"sampleData\" : \"sampleData\" } ); In this case ReportViewer shows two additional columns - ExpectedResult and SampleData and uses them to fill corresponding columns in the Spira test report. Note: Assertion message, ActualResult or SampleData may contain a reference to the Manual Test Step in format [TS:X] , where X is the number representing the Test Step ID. This is useful when you migrating manual test cases to automated scripts and want to keep the trace to manual test steps in the report.","title":"Custom Spira Column Mapping"},{"location":"Guide/automated_reporting/#report-formats","text":"Whenever one runs a test, the report will be stored in the following formats: .trp - default Rapise test report format. Contains all information, status and images. Rapise displays it using built in Report Viewer . .tap - pure text, Test Anything Protocol formatted output. Usually saved as last.tap . It is a simplest way for integrating the test into external/custom execution pipelines. index.html and imageNNN.png - flow output. It is saved into <test folder>\\Reports\\<Date_Time>\\ folder:","title":"Report Formats"},{"location":"Guide/automated_reporting/#export-report","text":"Report may be exported as .xls , .pdf , .xps or .html using the Report popup menu.","title":"Export Report"},{"location":"Guide/automated_reporting/#export-as-html-dialog","text":"HTML export supports a number of templates. So if you do Report/Export as HTML you then have to specify the export format using the following dialog: Report File - source .trp to be used for export. Report Type - choose one of the following export templates: Full Execution Report (images embedded into html) - full report, combined in a single file. Full Execution Report (images saved as separate files) - same as previous, but all images are saved next to the main .html file. High level report (only test status) - short report containing only test-level status. Destination HTML - path to the target .html file. This type of export may also be done from JavaScript code. var ldr = new ActiveXObject ( \"Rapise.LogLoader\" ); ldr . LoadTrp ( \"Reports\\\\ReportAssertions_2020-11-04_15-20.trp\" ); ldr . ExportAsHtml ( \"C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\TrpExporter\\\\FullReportImgTpl.tt\" , \"FullReport.html\" );","title":"Export as HTML Dialog"},{"location":"Guide/automated_reporting/#column-grouping","text":"Report viewer enables grouping rows by column values. Just drag the column header to this section: Use to order by the values in the chosen column. The result of dragging the Status column over looks like this: You can expand each item to see the corresponding report rows: Drag the Status icon back to undo the sort:","title":"Column Grouping"},{"location":"Guide/automated_reporting/#todo-rows","text":"Whenever Name starts with TODO the viewer automatically does the following: If report row Type is Info then it is highlighted in Yellow and TODO counter is incremented: If report row Type is Assert then it stays green or red, but TODO counter is still incremented. If you hover over last execution status in Rapise main window, the tooltip would contain then total number of TODO items found in the report (i.e. TODO counter):","title":"TODO Rows"},{"location":"Guide/automated_reporting/#see-also","text":"Report Filtering The report output file is specified in the Settings Dialog ( Settings > ReportPath ).","title":"See Also"},{"location":"Guide/breakpoints/","text":"Breakpoints \u00b6 Purpose \u00b6 Breakpoints stop execution of the test at a specific line in the script. They allow you to investigate program state, and trace execution flow. Usage \u00b6 To set a Breakpoint : Open the script you would like to debug in the Source Editor . Place the cursor at the line where you want a breakpoint. Press F9 or click on the gray strip to the left of line numbers. See Also \u00b6 Internal Debugger Debugger Toolbar Execution Control","title":"Breakpoints"},{"location":"Guide/breakpoints/#breakpoints","text":"","title":"Breakpoints"},{"location":"Guide/breakpoints/#purpose","text":"Breakpoints stop execution of the test at a specific line in the script. They allow you to investigate program state, and trace execution flow.","title":"Purpose"},{"location":"Guide/breakpoints/#usage","text":"To set a Breakpoint : Open the script you would like to debug in the Source Editor . Place the cursor at the line where you want a breakpoint. Press F9 or click on the gray strip to the left of line numbers.","title":"Usage"},{"location":"Guide/breakpoints/#see-also","text":"Internal Debugger Debugger Toolbar Execution Control","title":"See Also"},{"location":"Guide/browser_settings/","text":"Browser Settings Dialog \u00b6 Web Browser Profile \u00b6 Use Browser Settings Dialog to configure Web Browser Profiles . A browser profile specifies type of a browser ( IE , Chrome , Firefox ), browser launch parameters and other profile options. Rapise uses currently active browser profile to do recording and playback. You may want to create additional browser profiles if you have several different versions of a web browser on the same machine (e.g. Firefox Latest vs. Firefox ESR, or different versions of Chrome portable) or if you want to be able to run a browser with different command-line options (e.g. Chrome normal, Chrome incognito mode, Chrome with specific screen size). Browser Settings Dialog box displays the list of native (not using Selenium ) web browsers that have been configured for use by Rapise and lets you create a new browser profile, modify a profile or make a new profile based on an existing one. How to Open \u00b6 You can open this dialog box using main menu Settings > Browser or by pressing ... button in the top right corner of Rapise window. Toolbar Controls \u00b6 This dialog box has the following toolbar controls: Select Profile - This dropdown list lets you select a different web browser profile to be displayed in the dialog. Test - This button will test the connection from Rapise to the specified browser Duplicate - This button will create a new browser profile based on the currently viewed one. Create - This button will create a new empty browser profile that you can edit. Rename - This button will change the name of the current browser profile being edited. Delete - This button will delete the currently displayed browser profile. There is no undo, so be careful! Profile Options \u00b6 This section has various settings, each of which are described below: Browser Library - The type of browser being used, currently can be: Internet Explorer HTML Chrome HTML Firefox HTML Browser Path - The path to the location of the web browser executable (e.g. chrome.exe, iexplore.exe, firefox.exe) on the computer CMD Line Parameters - Any command-line parameters to pass to the web browser (e.g. -extoff for IE safe mode) Default Click Mode -Species the default 'click mode' for tests using this web browser profile auto - This tries to locate an element on the screen, moves the mouse over it and then sends the appropriate DOM 'click' event (the default) event - Just sends the DOM click event to the element with no prior mouse-move click - Simulates an actual click on the element rather than sending a DOM click event Local Browser Profiles \u00b6 Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host. To create a local profile just press Duplicate for one of global profiles and set Local checkbox before clicking OK button. Global and Local profile may have same name, in this case Local profile is used for execution. If a test contains local browser profiles they can be seen in the dropdowns. Local profiles are stored inside <Test Root>\\Profiles\\BrowserProfiles and <Test Root>\\Profiles\\SeleniumProfiles folders.","title":"Browser Settings Dialog"},{"location":"Guide/browser_settings/#browser-settings-dialog","text":"","title":"Browser Settings Dialog"},{"location":"Guide/browser_settings/#web-browser-profile","text":"Use Browser Settings Dialog to configure Web Browser Profiles . A browser profile specifies type of a browser ( IE , Chrome , Firefox ), browser launch parameters and other profile options. Rapise uses currently active browser profile to do recording and playback. You may want to create additional browser profiles if you have several different versions of a web browser on the same machine (e.g. Firefox Latest vs. Firefox ESR, or different versions of Chrome portable) or if you want to be able to run a browser with different command-line options (e.g. Chrome normal, Chrome incognito mode, Chrome with specific screen size). Browser Settings Dialog box displays the list of native (not using Selenium ) web browsers that have been configured for use by Rapise and lets you create a new browser profile, modify a profile or make a new profile based on an existing one.","title":"Web Browser Profile"},{"location":"Guide/browser_settings/#how-to-open","text":"You can open this dialog box using main menu Settings > Browser or by pressing ... button in the top right corner of Rapise window.","title":"How to Open"},{"location":"Guide/browser_settings/#toolbar-controls","text":"This dialog box has the following toolbar controls: Select Profile - This dropdown list lets you select a different web browser profile to be displayed in the dialog. Test - This button will test the connection from Rapise to the specified browser Duplicate - This button will create a new browser profile based on the currently viewed one. Create - This button will create a new empty browser profile that you can edit. Rename - This button will change the name of the current browser profile being edited. Delete - This button will delete the currently displayed browser profile. There is no undo, so be careful!","title":"Toolbar Controls"},{"location":"Guide/browser_settings/#profile-options","text":"This section has various settings, each of which are described below: Browser Library - The type of browser being used, currently can be: Internet Explorer HTML Chrome HTML Firefox HTML Browser Path - The path to the location of the web browser executable (e.g. chrome.exe, iexplore.exe, firefox.exe) on the computer CMD Line Parameters - Any command-line parameters to pass to the web browser (e.g. -extoff for IE safe mode) Default Click Mode -Species the default 'click mode' for tests using this web browser profile auto - This tries to locate an element on the screen, moves the mouse over it and then sends the appropriate DOM 'click' event (the default) event - Just sends the DOM click event to the element with no prior mouse-move click - Simulates an actual click on the element rather than sending a DOM click event","title":"Profile Options"},{"location":"Guide/browser_settings/#local-browser-profiles","text":"Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host. To create a local profile just press Duplicate for one of global profiles and set Local checkbox before clicking OK button. Global and Local profile may have same name, in this case Local profile is used for execution. If a test contains local browser profiles they can be seen in the dropdowns. Local profiles are stored inside <Test Root>\\Profiles\\BrowserProfiles and <Test Root>\\Profiles\\SeleniumProfiles folders.","title":"Local Browser Profiles"},{"location":"Guide/change_test_entry_point/","text":"Change Test Entry Point \u00b6 Rapise assumes that the entry point of a test - Test() function is defined in a file specified in ScriptPath property of the Settings dialog. If you want to place Test() function in another file then do not forget to update ScriptPath property of the test. See Also \u00b6 How-Tos","title":"Change Test Entry Point"},{"location":"Guide/change_test_entry_point/#change-test-entry-point","text":"Rapise assumes that the entry point of a test - Test() function is defined in a file specified in ScriptPath property of the Settings dialog. If you want to place Test() function in another file then do not forget to update ScriptPath property of the test.","title":"Change Test Entry Point"},{"location":"Guide/change_test_entry_point/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/change_the_libraries_being_use/","text":"Change the Libraries Being Used \u00b6 Sometimes you are recording a test using a library (e.g. Firefox HTML) and you realize that you need to add additional libraries to the test to make the recording more efficient. For example, you are recording using the Firefox web browser and you need to include the Microsoft Dynamics 365 libraries so that you can more easily record actions in Dynamics 365 while using Firefox. The additional library will allow Rapise to recognize the grids and treeviews as Dynamics objects rather than just standard HTML tables or DIVs. How to Change the Libraries \u00b6 To change the recording library being used select Tools > Libraries in the main application menu. That will bring up the Recording selection dialog box : Now you can check the boxes of the additional libraries you want to use (or remove any existing ones that you no longer need). Keyboard Shortcuts \u00b6 In addition, there are a couple of shortcuts that you may want to use: Record - clicking Record on its own will start Rapise recording using the current selected libraries (this is the default action) Shift + Record - This brings up the library selector (shown above), and is equivalent to clicking the Tools > Libraries in the menu before starting recording. Ctrl + Record - This brings up the application selector (see below) and lets you change the application and library being recorded: See Also \u00b6 How-Tos","title":"Change the Libraries Being Used"},{"location":"Guide/change_the_libraries_being_use/#change-the-libraries-being-used","text":"Sometimes you are recording a test using a library (e.g. Firefox HTML) and you realize that you need to add additional libraries to the test to make the recording more efficient. For example, you are recording using the Firefox web browser and you need to include the Microsoft Dynamics 365 libraries so that you can more easily record actions in Dynamics 365 while using Firefox. The additional library will allow Rapise to recognize the grids and treeviews as Dynamics objects rather than just standard HTML tables or DIVs.","title":"Change the Libraries Being Used"},{"location":"Guide/change_the_libraries_being_use/#how-to-change-the-libraries","text":"To change the recording library being used select Tools > Libraries in the main application menu. That will bring up the Recording selection dialog box : Now you can check the boxes of the additional libraries you want to use (or remove any existing ones that you no longer need).","title":"How to Change the Libraries"},{"location":"Guide/change_the_libraries_being_use/#keyboard-shortcuts","text":"In addition, there are a couple of shortcuts that you may want to use: Record - clicking Record on its own will start Rapise recording using the current selected libraries (this is the default action) Shift + Record - This brings up the library selector (shown above), and is equivalent to clicking the Tools > Libraries in the menu before starting recording. Ctrl + Record - This brings up the application selector (see below) and lets you change the application and library being recorded:","title":"Keyboard Shortcuts"},{"location":"Guide/change_the_libraries_being_use/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/changing_the_url_of_website_be/","text":"Changing the URL of Website being Tested \u00b6 Question \u00b6 We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address? Recommended Solution \u00b6 You do not need to convert scripts and objects. You can keep the script the same and just add the following code at the start of the test: Navigator . Open ( 'http://www.website.com' ); or using a variable: g_webSiteBaseUrl = 'http://www.website.com' ; Navigator . Open ( g_webSiteBaseUrl ); The variable may be defined by external execution engine like SpiraTest . See Also \u00b6 How-Tos","title":"Changing the URL of Website being Tested"},{"location":"Guide/changing_the_url_of_website_be/#changing-the-url-of-website-being-tested","text":"","title":"Changing the URL of Website being Tested"},{"location":"Guide/changing_the_url_of_website_be/#question","text":"We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address?","title":"Question"},{"location":"Guide/changing_the_url_of_website_be/#recommended-solution","text":"You do not need to convert scripts and objects. You can keep the script the same and just add the following code at the start of the test: Navigator . Open ( 'http://www.website.com' ); or using a variable: g_webSiteBaseUrl = 'http://www.website.com' ; Navigator . Open ( g_webSiteBaseUrl ); The variable may be defined by external execution engine like SpiraTest .","title":"Recommended Solution"},{"location":"Guide/changing_the_url_of_website_be/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/cheatsheet/","text":"Rapise Cheat Sheet \u00b6 Global Shortcuts \u00b6 Ctrl + S - Save All: Save current test and all open documents Shift + Ctrl + F - Find in Files F1 - Show Help for the selected item (source token, selected object in Object tree, selected object in RVL editor) Ctrl + Z - Undo Ctrl + Y - Redo RVL Editor \u00b6 Ctrl + I - Insert Row Ctrl + D - Delete Row Shift + Enter - Add Row After Ctrl + Down - Show dropdown for the current cell F2 - enter edit mode for the selected cell (So LEFT and RIGHT keys move the cursor in the editor field) Ctrl + P - show optional params for a selected action Source Editor \u00b6 Ctrl + C - Copy Ctrl + V - Paste Ctrl + X - Cut Ctrl + A - Select All Ctrl + / - Comment/Uncomment selected block of JS code. Tab - Tabify Selection Shift + Tab - Untabify selection Ctrl + 0 - Collapse all foldings Ctrl + 1 - Collapse folding level 1 Shift + Ctrl + 1 - Expand folding level 1 Ctrl + 2 - Collapse folding level 2 Shift + Ctrl + 2 - Expand folding level 2 Ctrl + 3 - Collapse folding level 3 Shift + Ctrl + 3 - Expand folding level 3 Ctrl + 4 - Collapse folding level 4 Shift + Ctrl + 4 - Expand folding level 4 F9 - Toggle breakpoint F12 - Find definition of the selected function/variable Source Debugger \u00b6 F5 - Continue executing script F11 - Step Into Function/Procedure Shift + F11 - Step out F10 - Step Over Shift + F5 - Terminate Script Execution Recording Activity Dialog \u00b6 Ctrl + 1 - Verify element under cursor Ctrl + 2 - Learn object under cursor Ctrl + 3 - Finish Ctrl + 5 - Show Spy Execution Monitor \u00b6 Shift + Ctrl + F12 - Terminate Execution Spy: UIAutomation, Java, Accessible, Managed \u00b6 Ctrl + G - Start tracking / Stop tracking and show currently selected object properties Web Spy \u00b6 Ctrl + G - Get snapshot Ctrl + T - Start/stop tracking Special Shortcuts \u00b6 Shift + Ctrl + E - Add Engine as a Sub-Test Shift + Ctrl + F5 - Generate Global Object Metadata: (shortcut only works in source editor with a file containing SeSGlobalObject ).","title":"Cheatsheet"},{"location":"Guide/cheatsheet/#rapise-cheat-sheet","text":"","title":"Rapise Cheat Sheet"},{"location":"Guide/cheatsheet/#global-shortcuts","text":"Ctrl + S - Save All: Save current test and all open documents Shift + Ctrl + F - Find in Files F1 - Show Help for the selected item (source token, selected object in Object tree, selected object in RVL editor) Ctrl + Z - Undo Ctrl + Y - Redo","title":"Global Shortcuts"},{"location":"Guide/cheatsheet/#rvl-editor","text":"Ctrl + I - Insert Row Ctrl + D - Delete Row Shift + Enter - Add Row After Ctrl + Down - Show dropdown for the current cell F2 - enter edit mode for the selected cell (So LEFT and RIGHT keys move the cursor in the editor field) Ctrl + P - show optional params for a selected action","title":"RVL Editor"},{"location":"Guide/cheatsheet/#source-editor","text":"Ctrl + C - Copy Ctrl + V - Paste Ctrl + X - Cut Ctrl + A - Select All Ctrl + / - Comment/Uncomment selected block of JS code. Tab - Tabify Selection Shift + Tab - Untabify selection Ctrl + 0 - Collapse all foldings Ctrl + 1 - Collapse folding level 1 Shift + Ctrl + 1 - Expand folding level 1 Ctrl + 2 - Collapse folding level 2 Shift + Ctrl + 2 - Expand folding level 2 Ctrl + 3 - Collapse folding level 3 Shift + Ctrl + 3 - Expand folding level 3 Ctrl + 4 - Collapse folding level 4 Shift + Ctrl + 4 - Expand folding level 4 F9 - Toggle breakpoint F12 - Find definition of the selected function/variable","title":"Source Editor"},{"location":"Guide/cheatsheet/#source-debugger","text":"F5 - Continue executing script F11 - Step Into Function/Procedure Shift + F11 - Step out F10 - Step Over Shift + F5 - Terminate Script Execution","title":"Source Debugger"},{"location":"Guide/cheatsheet/#recording-activity-dialog","text":"Ctrl + 1 - Verify element under cursor Ctrl + 2 - Learn object under cursor Ctrl + 3 - Finish Ctrl + 5 - Show Spy","title":"Recording Activity Dialog"},{"location":"Guide/cheatsheet/#execution-monitor","text":"Shift + Ctrl + F12 - Terminate Execution","title":"Execution Monitor"},{"location":"Guide/cheatsheet/#spy-uiautomation-java-accessible-managed","text":"Ctrl + G - Start tracking / Stop tracking and show currently selected object properties","title":"Spy: UIAutomation, Java, Accessible, Managed"},{"location":"Guide/cheatsheet/#web-spy","text":"Ctrl + G - Get snapshot Ctrl + T - Start/stop tracking","title":"Web Spy"},{"location":"Guide/cheatsheet/#special-shortcuts","text":"Shift + Ctrl + E - Add Engine as a Sub-Test Shift + Ctrl + F5 - Generate Global Object Metadata: (shortcut only works in source editor with a file containing SeSGlobalObject ).","title":"Special Shortcuts"},{"location":"Guide/checkpoints/","text":"Checkpoints (aka Verification Points) \u00b6 Purpose \u00b6 A Checkpoint is defined by two things: a location in the test execution path and a subset of AUT state. Each time the checkpoint executes, the AUT state is compared to a predefined value. Discrepancies are noted, and may show a regression in program behavior in the test execution report . Usage \u00b6 A checkpoint can be added in two ways: during recording, with the Verify Object Properties dialog , or by manually adding an Assertion to the test script. See Also \u00b6 Recording","title":"Checkpoints"},{"location":"Guide/checkpoints/#checkpoints-aka-verification-points","text":"","title":"Checkpoints (aka Verification Points)"},{"location":"Guide/checkpoints/#purpose","text":"A Checkpoint is defined by two things: a location in the test execution path and a subset of AUT state. Each time the checkpoint executes, the AUT state is compared to a predefined value. Discrepancies are noted, and may show a regression in program behavior in the test execution report .","title":"Purpose"},{"location":"Guide/checkpoints/#usage","text":"A checkpoint can be added in two ways: during recording, with the Verify Object Properties dialog , or by manually adding an Assertion to the test script.","title":"Usage"},{"location":"Guide/checkpoints/#see-also","text":"Recording","title":"See Also"},{"location":"Guide/client_performance_monitoring/","text":"Client Performance Monitoring \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. Concept and Architecture \u00b6 The purpose of this integration is to satisfy the following use case. The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level load test: How long does each transaction take whilst 1000 VUs are hitting the same system The user interface could be web, mobile or thick client (e.g. ERP system) The following describes the technical architecture that would need to be in place: The process flow for the above architecture would be as follows: User schedules the performance test in SpiraTest. RemoteLaunch connected to the NeoLoad controller and SpiraTest initiates the start of the testing. The NeoLoad controller sends commands to the NeoLoad load generators to start the performance scenario. During the performance scenario, NeoLoad calls Rapise through its command-line to start a specific test At specific points in the Rapise function test (which is grouped into transactions), timing code in the Rapise script (see next section) will call the NeoLoad REST API to report back the timing for the transaction block. The NeoLoad controller will need to correlate each of the blocks with the appropriate transaction in the performance scenario. At the end of the performance test, RemoteLaunch will read the entire performance test and send back the results to SpiraTest. NeoLoad Global Object \u00b6 Rapise has a global object named NeoLoad which is capable of sending client performance metrics to the NeoLoad controller. NeoLoad will display the received data in a both tree and graph views. NeoLoad Tree View \u00b6 The root of the tree is the name of a script that was executed by Rapise. On the first level we have three groups: LG Performance \u2013 this is a folder of a load generator essential metrics captured by Rapise: CPU, Memory, Network Sent/Received bytes. Page Load \u2013 this folder contains nodes for each page and nested resource. Duration values are obtained using Window.performance structure. See also http://www.w3.org/TR/navigation-timing/#processing-model Transactions \u2013 this folder contains counters for transactions defined by a script. Graph View \u00b6 Each leaf node can be dragged to the graph view for visualization: Performance Filters \u00b6 Performance results obtained from different runs can be filtered using result filter on the toolbar. You can open the Results Filter dialogs by pressing \u2026 button. Platform is a combination of hardware \u2013 OS. Hardware is passed by a user script, OS is determined by Rapise automatically. E.g. hardware1 \u2013 Microsoft Windows 8.1 Pro. Client Software is Rapise. Location is supplied by a script. E.g. location1. Script is a combination of script name and time stamp. E.g. NeoLoad Object API Reference \u00b6 The methods of the global NeoLoad object are described on this page . How to Use \u00b6 In order to send performance metrics to NeoLoad you need to add a sequence of calls to your script. First, connect to the NeoLoad. When this call is executed NeoLoad must be running a script, otherwise an error will be returned. NeoLoad . CreateClient ( \"hardware1\" , \"location1\" , \"Broadcom 802.11ac Network Adapter \\_2\" ); Let\u2019s look at the following block: NeoLoad . CaptureHostPerformance (); NeoLoad . StartTransaction ( 'T Home' ); NeoLoad . CaptureBrowserPerformance ( SeS ( 'Log\\_In' ). GetPageURL ()); //Click on Log In SeS ( 'Log\\_In' ). DoClick (); NeoLoad . CaptureBrowserPerformance ( SeS ( 'Username\\_' ). GetPageURL ()); NeoLoad . EndTransaction ( 'T Home' ); CaptureHostPerformance call sends immediate values of CPU, Memory and Network load to the NeoLoad controller. StartTransaction/EndTransaction calls define a transaction with name \u2018T Home\u2019. Upon EndTransaction call the duration of it is sent to the NeoLoad controller. CalculateBrowserPerformance call sends page load performance metrics to the NeoLoad controller. There is also a general call that can send any user-defined metric to the NeoLoad controller: NeoLoad . CapturePerformanceValue ( \"First Level Folder\" , \"Transaction1|Duration\" , \"milliseconds\" , 120 ); Components of the second parameters can be separated by |. It allows to add more levels to the tree.","title":"Client Performance Monitoring"},{"location":"Guide/client_performance_monitoring/#client-performance-monitoring","text":"Important NeoLoad integration has been removed in Rapise 7.0.","title":"Client Performance Monitoring"},{"location":"Guide/client_performance_monitoring/#concept-and-architecture","text":"The purpose of this integration is to satisfy the following use case. The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level load test: How long does each transaction take whilst 1000 VUs are hitting the same system The user interface could be web, mobile or thick client (e.g. ERP system) The following describes the technical architecture that would need to be in place: The process flow for the above architecture would be as follows: User schedules the performance test in SpiraTest. RemoteLaunch connected to the NeoLoad controller and SpiraTest initiates the start of the testing. The NeoLoad controller sends commands to the NeoLoad load generators to start the performance scenario. During the performance scenario, NeoLoad calls Rapise through its command-line to start a specific test At specific points in the Rapise function test (which is grouped into transactions), timing code in the Rapise script (see next section) will call the NeoLoad REST API to report back the timing for the transaction block. The NeoLoad controller will need to correlate each of the blocks with the appropriate transaction in the performance scenario. At the end of the performance test, RemoteLaunch will read the entire performance test and send back the results to SpiraTest.","title":"Concept and Architecture"},{"location":"Guide/client_performance_monitoring/#neoload-global-object","text":"Rapise has a global object named NeoLoad which is capable of sending client performance metrics to the NeoLoad controller. NeoLoad will display the received data in a both tree and graph views.","title":"NeoLoad Global Object"},{"location":"Guide/client_performance_monitoring/#neoload-tree-view","text":"The root of the tree is the name of a script that was executed by Rapise. On the first level we have three groups: LG Performance \u2013 this is a folder of a load generator essential metrics captured by Rapise: CPU, Memory, Network Sent/Received bytes. Page Load \u2013 this folder contains nodes for each page and nested resource. Duration values are obtained using Window.performance structure. See also http://www.w3.org/TR/navigation-timing/#processing-model Transactions \u2013 this folder contains counters for transactions defined by a script.","title":"NeoLoad Tree View"},{"location":"Guide/client_performance_monitoring/#graph-view","text":"Each leaf node can be dragged to the graph view for visualization:","title":"Graph View"},{"location":"Guide/client_performance_monitoring/#performance-filters","text":"Performance results obtained from different runs can be filtered using result filter on the toolbar. You can open the Results Filter dialogs by pressing \u2026 button. Platform is a combination of hardware \u2013 OS. Hardware is passed by a user script, OS is determined by Rapise automatically. E.g. hardware1 \u2013 Microsoft Windows 8.1 Pro. Client Software is Rapise. Location is supplied by a script. E.g. location1. Script is a combination of script name and time stamp. E.g.","title":"Performance Filters"},{"location":"Guide/client_performance_monitoring/#neoload-object-api-reference","text":"The methods of the global NeoLoad object are described on this page .","title":"NeoLoad Object API Reference"},{"location":"Guide/client_performance_monitoring/#how-to-use","text":"In order to send performance metrics to NeoLoad you need to add a sequence of calls to your script. First, connect to the NeoLoad. When this call is executed NeoLoad must be running a script, otherwise an error will be returned. NeoLoad . CreateClient ( \"hardware1\" , \"location1\" , \"Broadcom 802.11ac Network Adapter \\_2\" ); Let\u2019s look at the following block: NeoLoad . CaptureHostPerformance (); NeoLoad . StartTransaction ( 'T Home' ); NeoLoad . CaptureBrowserPerformance ( SeS ( 'Log\\_In' ). GetPageURL ()); //Click on Log In SeS ( 'Log\\_In' ). DoClick (); NeoLoad . CaptureBrowserPerformance ( SeS ( 'Username\\_' ). GetPageURL ()); NeoLoad . EndTransaction ( 'T Home' ); CaptureHostPerformance call sends immediate values of CPU, Memory and Network load to the NeoLoad controller. StartTransaction/EndTransaction calls define a transaction with name \u2018T Home\u2019. Upon EndTransaction call the duration of it is sent to the NeoLoad controller. CalculateBrowserPerformance call sends page load performance metrics to the NeoLoad controller. There is also a general call that can send any user-defined metric to the NeoLoad controller: NeoLoad . CapturePerformanceValue ( \"First Level Folder\" , \"Transaction1|Duration\" , \"milliseconds\" , 120 ); Components of the second parameters can be separated by |. It allows to add more levels to the tree.","title":"How to Use"},{"location":"Guide/code_folding/","text":"Code Folding \u00b6 Purpose \u00b6 Code Folding allows you to hide or show blocks of code. These blocks have syntactic meaning, such as a function body, a class declaration, a loop, or a comment. Usage \u00b6 Every javascript file opened in Rapise will display with hide and show buttons to the top left of their corresponding block. In the following screenshot, hide buttons are highlighted with green boxes; show buttons are highlighted with purple boxes: See Also \u00b6 Source Editor","title":"Code Folding"},{"location":"Guide/code_folding/#code-folding","text":"","title":"Code Folding"},{"location":"Guide/code_folding/#purpose","text":"Code Folding allows you to hide or show blocks of code. These blocks have syntactic meaning, such as a function body, a class declaration, a loop, or a comment.","title":"Purpose"},{"location":"Guide/code_folding/#usage","text":"Every javascript file opened in Rapise will display with hide and show buttons to the top left of their corresponding block. In the following screenshot, hide buttons are highlighted with green boxes; show buttons are highlighted with purple boxes:","title":"Usage"},{"location":"Guide/code_folding/#see-also","text":"Source Editor","title":"See Also"},{"location":"Guide/code_helper/","text":"Code Completion \u00b6 Purpose \u00b6 Rapise provides Code Completion for class, method and field names. Usage \u00b6 Begin typing a class, method, or field name. Press Ctrl + Space to open a list of possible completions. Advanced \u00b6 Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However since JavaScript is fundamentally an un-typed language, for the code completion to work, there are some tips and tricks that you can use. Rapise scans for variable definitions when one saves the .js source file. So if anything goes wrong (no hints) then first thing is to save the file. One may define a variable as simple as: var p ; In this example p is just a variable with undefined type. It may be used as number, string or object. So Rapise has no idea of how to deal with it. So if you type a dot after p. no code-completion window appears. There are several ways of giving Rapise a \"hint\" about the variable type: Static Assignment \u00b6 First, is static assignment. Suppose you specify some constant value when defining a variable: var p = \"some string\" ; In this case Rapise knows the type of p . So it would assist you when you type a dot . after p : Using Comments to Suggest the Type \u00b6 In some cases variable type is not clear from its definition or assignments is not static: var v1 = input ; var v2 ; To deal with such cases the code should be instrumented. For example, if we know that input is string and v2 will be used as number then we may explain it to Rapise by placing variable type using special comment: /**var_type*/ right together with var definition. It should be placed right either between var keyword and variable name or right after an assignment operation ( = ), if any. I.e.: var v1 = /**string*/ input ; var /**number*/ v2 ; So now Rapise will be able to display the list of available methods and properties: Another common case is a function parameter. If you have function that is defined: function my_func ( patient_index , patient_name ) { } The type of parameters patient_index and patient_name are not known, but may be explained in a similar way: function my_func ( /**number*/ patient_index , /**string*/ patient_name ) So it becomes known to Rapise: Code completion for variable names is useful when you have multiple variables or function parameters and need to type them quickly. In this case Ctrl + Space key combination will bring up a list of variables and functions starting with just typed keyword. Code Completion for Objects \u00b6 If you type SeS ( \"<object ID>\" ). A list of available actions and properties will be suggested for repository object with the given ID. Since Rapise 6.4 you may specify type of a dynamically created object as well. var username = /**HTMLObject*/ Navigator . Find ( \"//button[id='username']\" ); Save the edited file to let Rapise re-parse it. Then you may type username . and Rapise will suggest actions and properties for the HTMLObject type. See Also \u00b6 Source Editor","title":"Code Completion"},{"location":"Guide/code_helper/#code-completion","text":"","title":"Code Completion"},{"location":"Guide/code_helper/#purpose","text":"Rapise provides Code Completion for class, method and field names.","title":"Purpose"},{"location":"Guide/code_helper/#usage","text":"Begin typing a class, method, or field name. Press Ctrl + Space to open a list of possible completions.","title":"Usage"},{"location":"Guide/code_helper/#advanced","text":"Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However since JavaScript is fundamentally an un-typed language, for the code completion to work, there are some tips and tricks that you can use. Rapise scans for variable definitions when one saves the .js source file. So if anything goes wrong (no hints) then first thing is to save the file. One may define a variable as simple as: var p ; In this example p is just a variable with undefined type. It may be used as number, string or object. So Rapise has no idea of how to deal with it. So if you type a dot after p. no code-completion window appears. There are several ways of giving Rapise a \"hint\" about the variable type:","title":"Advanced"},{"location":"Guide/code_helper/#static-assignment","text":"First, is static assignment. Suppose you specify some constant value when defining a variable: var p = \"some string\" ; In this case Rapise knows the type of p . So it would assist you when you type a dot . after p :","title":"Static Assignment"},{"location":"Guide/code_helper/#using-comments-to-suggest-the-type","text":"In some cases variable type is not clear from its definition or assignments is not static: var v1 = input ; var v2 ; To deal with such cases the code should be instrumented. For example, if we know that input is string and v2 will be used as number then we may explain it to Rapise by placing variable type using special comment: /**var_type*/ right together with var definition. It should be placed right either between var keyword and variable name or right after an assignment operation ( = ), if any. I.e.: var v1 = /**string*/ input ; var /**number*/ v2 ; So now Rapise will be able to display the list of available methods and properties: Another common case is a function parameter. If you have function that is defined: function my_func ( patient_index , patient_name ) { } The type of parameters patient_index and patient_name are not known, but may be explained in a similar way: function my_func ( /**number*/ patient_index , /**string*/ patient_name ) So it becomes known to Rapise: Code completion for variable names is useful when you have multiple variables or function parameters and need to type them quickly. In this case Ctrl + Space key combination will bring up a list of variables and functions starting with just typed keyword.","title":"Using Comments to Suggest the Type"},{"location":"Guide/code_helper/#code-completion-for-objects","text":"If you type SeS ( \"<object ID>\" ). A list of available actions and properties will be suggested for repository object with the given ID. Since Rapise 6.4 you may specify type of a dynamically created object as well. var username = /**HTMLObject*/ Navigator . Find ( \"//button[id='username']\" ); Save the edited file to let Rapise re-parse it. Then you may type username . and Rapise will suggest actions and properties for the HTMLObject type.","title":"Code Completion for Objects"},{"location":"Guide/code_helper/#see-also","text":"Source Editor","title":"See Also"},{"location":"Guide/com_testing_support/","text":"COM Testing Support \u00b6 Purpose \u00b6 Microsoft's Component Object Model (COM) is a standard for communication between separately engineered software components ( source ). Any object with a COM interface can be created and used remotely. Usage \u00b6 Creating a COM Object \u00b6 You can create a COM object using Windows' ActiveXObject class. Once the object is created, method invocation is the same as with any other object in your program. The methods available will depend on the object's COM interface. The following example shows how to create an instance of the Word application and open a file. var doc = new ActiveXObject ( \"Word.Application\" ); doc . Documents . Open ( wordFileName ); Test Samples \u00b6 There are several test samples that show how to Unit Test application modules via COM interface: UsingMSWord UsingMSExcel UsingMSAccess See Also \u00b6 Learn more about COM . Learn more about ActiveXObject .","title":"COM Testing Support"},{"location":"Guide/com_testing_support/#com-testing-support","text":"","title":"COM Testing Support"},{"location":"Guide/com_testing_support/#purpose","text":"Microsoft's Component Object Model (COM) is a standard for communication between separately engineered software components ( source ). Any object with a COM interface can be created and used remotely.","title":"Purpose"},{"location":"Guide/com_testing_support/#usage","text":"","title":"Usage"},{"location":"Guide/com_testing_support/#creating-a-com-object","text":"You can create a COM object using Windows' ActiveXObject class. Once the object is created, method invocation is the same as with any other object in your program. The methods available will depend on the object's COM interface. The following example shows how to create an instance of the Word application and open a file. var doc = new ActiveXObject ( \"Word.Application\" ); doc . Documents . Open ( wordFileName );","title":"Creating a COM Object"},{"location":"Guide/com_testing_support/#test-samples","text":"There are several test samples that show how to Unit Test application modules via COM interface: UsingMSWord UsingMSExcel UsingMSAccess","title":"Test Samples"},{"location":"Guide/com_testing_support/#see-also","text":"Learn more about COM . Learn more about ActiveXObject .","title":"See Also"},{"location":"Guide/command_line/","text":"Command Line \u00b6 Purpose \u00b6 Rapise test scripts can be run from the command line . Usage \u00b6 The form of the command is: %windir%\\syswow64\\cscript.exe \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSExecutor.js\" <path_to_sstest_file> [evals*] where path_to_sstest_file is a path to sstest file, e.g. \"C:\\Program Files\\Inflectra\\Rapise\\Samples\\SmarteATM\\SmarteATM.sstest\" evals (optional) is a statement like this: -eval:* varname1 =*value1; varname2 = value2;... varname is a global variable associated with an option in the Settings Dialog . Global variables are prefixed with a g_. The global variables under the Execution and Recording headings can be found by clicking on the corresponding option in the Settings Dialog (see below): Other variables include: * g_scriptPath g_reportPath g_objectsPath g_configPath any global variable defined in the JavaScript or RVL. Exit Code: \u2022 0 indicates a pass \u2022 1 indicates failure See Also \u00b6 Settings Dialog KB17 Running a Rapise script from the command-line on a 64-bit machine","title":"Command Line"},{"location":"Guide/command_line/#command-line","text":"","title":"Command Line"},{"location":"Guide/command_line/#purpose","text":"Rapise test scripts can be run from the command line .","title":"Purpose"},{"location":"Guide/command_line/#usage","text":"The form of the command is: %windir%\\syswow64\\cscript.exe \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSExecutor.js\" <path_to_sstest_file> [evals*] where path_to_sstest_file is a path to sstest file, e.g. \"C:\\Program Files\\Inflectra\\Rapise\\Samples\\SmarteATM\\SmarteATM.sstest\" evals (optional) is a statement like this: -eval:* varname1 =*value1; varname2 = value2;... varname is a global variable associated with an option in the Settings Dialog . Global variables are prefixed with a g_. The global variables under the Execution and Recording headings can be found by clicking on the corresponding option in the Settings Dialog (see below): Other variables include: * g_scriptPath g_reportPath g_objectsPath g_configPath any global variable defined in the JavaScript or RVL. Exit Code: \u2022 0 indicates a pass \u2022 1 indicates failure","title":"Usage"},{"location":"Guide/command_line/#see-also","text":"Settings Dialog KB17 Running a Rapise script from the command-line on a 64-bit machine","title":"See Also"},{"location":"Guide/company__copyright/","text":"Company & Copyright \u00b6 This documentation and the software it describes is the proprietary and copyrighted intellectual property of Inflectra Corporation. \u00a9 All Rights Reserved. Rapise\u00ae, Inflectra\u00ae, SpiraTest\u00ae, SpiraTeam\u00ae and Spira\u2122 are either trademarks or registered trademarks of Inflectra Corporation.","title":"Company & Copyright"},{"location":"Guide/company__copyright/#company-copyright","text":"This documentation and the software it describes is the proprietary and copyrighted intellectual property of Inflectra Corporation. \u00a9 All Rights Reserved. Rapise\u00ae, Inflectra\u00ae, SpiraTest\u00ae, SpiraTeam\u00ae and Spira\u2122 are either trademarks or registered trademarks of Inflectra Corporation.","title":"Company &amp; Copyright"},{"location":"Guide/content_view/","text":"Content View \u00b6 Purpose \u00b6 To view and edit files. This includes the following file types: JavaScript ( .js ) automated test script files . Report ( .trp ) files that open in the Report Viewer . Excel ( .xls ) files that can be displayed in the Spreadsheet Editor REST ( .rest ) web service definition files that open in the REST Editor . SOAP ( .soap ) web service definition files that open in the SOAP Editor . Analog Recording Files ( .arf ) that contain analog testing mouse clicks and coordinates. Manual test steps ( .rmt ) that open in the Manual Test Editor . How to Open \u00b6 Open a file using the Test Files View . The file will open inside of the Content View .","title":"Content View"},{"location":"Guide/content_view/#content-view","text":"","title":"Content View"},{"location":"Guide/content_view/#purpose","text":"To view and edit files. This includes the following file types: JavaScript ( .js ) automated test script files . Report ( .trp ) files that open in the Report Viewer . Excel ( .xls ) files that can be displayed in the Spreadsheet Editor REST ( .rest ) web service definition files that open in the REST Editor . SOAP ( .soap ) web service definition files that open in the SOAP Editor . Analog Recording Files ( .arf ) that contain analog testing mouse clicks and coordinates. Manual test steps ( .rmt ) that open in the Manual Test Editor .","title":"Purpose"},{"location":"Guide/content_view/#how-to-open","text":"Open a file using the Test Files View . The file will open inside of the Content View .","title":"How to Open"},{"location":"Guide/control_execution/","text":"Control Execution \u00b6 Purpose \u00b6 Execution Control allows you to manually direct the execution of the script. Usage \u00b6 Set a Breakpoint where you want to take control of the execution. Use the buttons on the Debugger toolbar to step through the script. See Also \u00b6 Internal Debugger Debugger Toolbar","title":"Control Execution"},{"location":"Guide/control_execution/#control-execution","text":"","title":"Control Execution"},{"location":"Guide/control_execution/#purpose","text":"Execution Control allows you to manually direct the execution of the script.","title":"Purpose"},{"location":"Guide/control_execution/#usage","text":"Set a Breakpoint where you want to take control of the execution. Use the buttons on the Debugger toolbar to step through the script.","title":"Usage"},{"location":"Guide/control_execution/#see-also","text":"Internal Debugger Debugger Toolbar","title":"See Also"},{"location":"Guide/convert_functional_to_load_tes/","text":"Convert Functional to Load Test \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. This aspect of the Rapise-NeoLoad integration describes the process for taking an existing test script written in Rapise and converting it seamlessly into a performance scenario in the NeoLoad load testing system. This feature allows you to convert Rapise tests for HTTP/HTTPS based applications into protocol-based NeoLoad scripts that can be executed by a large number of virtual users (VUs) that simulate a load on the application being tested. Prerequisites \u00b6 In order to use the integration with NeoLoad, you need to have the following: Rapise 5.0 or above NeoLoad 5.1 or above Both tools must be installed on the same Windows host. NeoLoad must have a license with Recording API enabled. The default trial version does not have this capability. The Rapise test needs to be testing an application that uses HTTP/HTTPs or other NeoLoad supported protocols. The Steps for Converting a Rapise Test \u00b6 Launch NeoLoad \u00b6 Open NeoLoad via the Start menu or using a command line: 1 c:\\Program Files (x86)\\NeoLoad 5.1\\bin\\NeoLoadGUI.exe Create or Open Existing Load Project \u00b6 Use menu File > New or File > Open . Open a Test Script in Rapise to be Converted \u00b6 Inside Rapise, open the script you want to convert. Make sure the application it is testing is a web-based application using the HTTP/HTTPS protocols: Ensure that the Internet Explorer HTML library is set in the test parameters. Open Conversion Dialog \u00b6 From the main menu select Tools > Convert to NeoLoad . This will display the NeoLoad convertor dialog . On this dialog box, set the following parameters: Virtual User In this field, you need to enter the name of the virtual user to create in NeoLoad: The default value is \"VirtualUser\" If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented. If the name has invalid characters then they will be escaped as an underscore (_). Base Container This specifies the base container where we want to start the recording (Init / Actions / End). The default value is Actions. Container/Business Transaction This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers. The default is no container. If the name is already used then it will be made unique by adding _1, _2, etc. If the name is empty then no container will be used. Detect Dynamic Parameters When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID). In the NeoLoad tree it looks this way: Press Convert Button \u00b6 After pressing Convert button Rapise will launch the test and NeoLoad will start capturing network traffic. When test playback is finished you\u2019ll see the dialog: Troubleshooting \u00b6 During conversion you may get a few error messages. This section provides a list of common messages and their solution. Unable to connect to the remote server \u00b6 If you get this message, check that NeoLoad is running. Usually this message means that NeoLoad is not started or another application is using port 7400, preventing NeoLoad binding to it. No project is open \u00b6 If you get this message, check that a project is opened in NeoLoad. NeoLoad is not ready for recording \u00b6 If you get this message, it means that NeoLoad is in the recording state. To fix the issue, you need to stop the existing recording in NeoLoad. NeoLoad Integration Settings \u00b6 There are a few global options for the Rapise \u2013 NeoLoad integration. To reach them use menu Settings > NeoLoad Integration . This is the NeoLoad Settings dialog. Normally there is no any reason to change these settings, but for completeness they are described below: NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API","title":"Convert Functional to Load Test"},{"location":"Guide/convert_functional_to_load_tes/#convert-functional-to-load-test","text":"Important NeoLoad integration has been removed in Rapise 7.0. This aspect of the Rapise-NeoLoad integration describes the process for taking an existing test script written in Rapise and converting it seamlessly into a performance scenario in the NeoLoad load testing system. This feature allows you to convert Rapise tests for HTTP/HTTPS based applications into protocol-based NeoLoad scripts that can be executed by a large number of virtual users (VUs) that simulate a load on the application being tested.","title":"Convert Functional to Load Test"},{"location":"Guide/convert_functional_to_load_tes/#prerequisites","text":"In order to use the integration with NeoLoad, you need to have the following: Rapise 5.0 or above NeoLoad 5.1 or above Both tools must be installed on the same Windows host. NeoLoad must have a license with Recording API enabled. The default trial version does not have this capability. The Rapise test needs to be testing an application that uses HTTP/HTTPs or other NeoLoad supported protocols.","title":"Prerequisites"},{"location":"Guide/convert_functional_to_load_tes/#the-steps-for-converting-a-rapise-test","text":"","title":"The Steps for Converting a Rapise Test"},{"location":"Guide/convert_functional_to_load_tes/#launch-neoload","text":"Open NeoLoad via the Start menu or using a command line: 1 c:\\Program Files (x86)\\NeoLoad 5.1\\bin\\NeoLoadGUI.exe","title":"Launch NeoLoad"},{"location":"Guide/convert_functional_to_load_tes/#create-or-open-existing-load-project","text":"Use menu File > New or File > Open .","title":"Create or Open Existing Load Project"},{"location":"Guide/convert_functional_to_load_tes/#open-a-test-script-in-rapise-to-be-converted","text":"Inside Rapise, open the script you want to convert. Make sure the application it is testing is a web-based application using the HTTP/HTTPS protocols: Ensure that the Internet Explorer HTML library is set in the test parameters.","title":"Open a Test Script in Rapise to be Converted"},{"location":"Guide/convert_functional_to_load_tes/#open-conversion-dialog","text":"From the main menu select Tools > Convert to NeoLoad . This will display the NeoLoad convertor dialog . On this dialog box, set the following parameters: Virtual User In this field, you need to enter the name of the virtual user to create in NeoLoad: The default value is \"VirtualUser\" If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented. If the name has invalid characters then they will be escaped as an underscore (_). Base Container This specifies the base container where we want to start the recording (Init / Actions / End). The default value is Actions. Container/Business Transaction This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers. The default is no container. If the name is already used then it will be made unique by adding _1, _2, etc. If the name is empty then no container will be used. Detect Dynamic Parameters When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID). In the NeoLoad tree it looks this way:","title":"Open Conversion Dialog"},{"location":"Guide/convert_functional_to_load_tes/#press-convert-button","text":"After pressing Convert button Rapise will launch the test and NeoLoad will start capturing network traffic. When test playback is finished you\u2019ll see the dialog:","title":"Press Convert Button"},{"location":"Guide/convert_functional_to_load_tes/#troubleshooting","text":"During conversion you may get a few error messages. This section provides a list of common messages and their solution.","title":"Troubleshooting"},{"location":"Guide/convert_functional_to_load_tes/#unable-to-connect-to-the-remote-server","text":"If you get this message, check that NeoLoad is running. Usually this message means that NeoLoad is not started or another application is using port 7400, preventing NeoLoad binding to it.","title":"Unable to connect to the remote server"},{"location":"Guide/convert_functional_to_load_tes/#no-project-is-open","text":"If you get this message, check that a project is opened in NeoLoad.","title":"No project is open"},{"location":"Guide/convert_functional_to_load_tes/#neoload-is-not-ready-for-recording","text":"If you get this message, it means that NeoLoad is in the recording state. To fix the issue, you need to stop the existing recording in NeoLoad.","title":"NeoLoad is not ready for recording"},{"location":"Guide/convert_functional_to_load_tes/#neoload-integration-settings","text":"There are a few global options for the Rapise \u2013 NeoLoad integration. To reach them use menu Settings > NeoLoad Integration . This is the NeoLoad Settings dialog. Normally there is no any reason to change these settings, but for completeness they are described below: NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API","title":"NeoLoad Integration Settings"},{"location":"Guide/create_a_new_test/","text":"Create a New Test \u00b6 Select the File > New Test menu option. The Create New Test dialog will appear. Follow the instructions on this dialog. See Also \u00b6 How-Tos","title":"Create a New Test"},{"location":"Guide/create_a_new_test/#create-a-new-test","text":"Select the File > New Test menu option. The Create New Test dialog will appear. Follow the instructions on this dialog.","title":"Create a New Test"},{"location":"Guide/create_a_new_test/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/create_new_test_dialog/","text":"Create New Test Dialog \u00b6 Purpose \u00b6 Create a new Rapise test. You have the option of either connecting to Spira and storing the new test in our central test management system or simply saving the new test locally. The test may be a root of the bigger test framework. In this case it is recommended to check KB 371 . How to Open \u00b6 Simply choose File > New Test on the File menu . (a) Creating in Spira \u00b6 By default Rapise will ask you to save the new test into the Spira test management system: Assuming that you have already configured the connection to Spira , first you need to select the project in Spira. That will then display the test case folders and test cases in Spira: If there is already a test case in Spira that has not already been linked to Rapise then you can simply select that test case, which will display any existing manual test steps that exist: If this is the test case you want to associate the new Rapise test with, then simply click Create from Spira . If you want to create a new test case in Spira to use, simply click New Test Case : Then enter the name of the new test case and click OK . Once it has been created you can then select it in the test case list and click Create from Spira . Sometimes there is no existing folder inside Spira that makes sense to use. In which case you can first use the New Folder button to create an empty folder that new test cases can be created in: Regardless of which option you choose, before you click Create from Spira , you have the choice of test methodology to use. Currently there are four methodologies available in Rapise: Basic: Windows Desktop Application (WIndows Native, .NET, Java, WPF etc - this should be used for testing desktop applications or any testing not involving web browsers or mobile devices. Manual: Manual-only Testing - this should be selected if you are only going to be creating or executing manual tests Mobile: Mobile Support - this should be selected if you are going to be testing apps running on mobile devices Web: Cross Browser Testing Support - this should be selected if you are going to be testing web applications running in a web browser. If you do not plan on using Spira for managing your test scripts (or you are not able to connect when you want to create the test), you can click on the Create Locally... to just create the test case locally (see next section). You can always save to Spira later on. Once you have created the test, Rapise will ask you to choose the Scripting language ( RVL or JavaScript ). (b) Creating Locally \u00b6 If you choose the option to Create Locally the following dialog box is displayed: You need to enter the following information and click Create : The name of the new test - please enter the name of the new test that you wish to create. Folder - please choose the folder on your local computer that you wish to store the Rapise test in. Specify methodology - there are currently four methodologies available in Rapise: Basic: Windows Desktop Application (WIndows Native, .NET, Java, WPF etc - this should be used for testing desktop applications or any testing not involving web browsers or mobile devices. Manual: Manual-only Testing - this should be selected if you are only going to be creating or executing manual tests Mobile: Mobile Support - this should be selected if you are going to be testing apps running on mobile devices Web: Cross Browser Testing Support - this should be selected if you are going to be testing web applications running in a web browser. Once you click Create , Rapise will ask you to choose the Scripting language ( RVL or JavaScript ). Once you have chosen the scripting language, the new test will be created and saved locally.","title":"Create New Test Dialog"},{"location":"Guide/create_new_test_dialog/#create-new-test-dialog","text":"","title":"Create New Test Dialog"},{"location":"Guide/create_new_test_dialog/#purpose","text":"Create a new Rapise test. You have the option of either connecting to Spira and storing the new test in our central test management system or simply saving the new test locally. The test may be a root of the bigger test framework. In this case it is recommended to check KB 371 .","title":"Purpose"},{"location":"Guide/create_new_test_dialog/#how-to-open","text":"Simply choose File > New Test on the File menu .","title":"How to Open"},{"location":"Guide/create_new_test_dialog/#a-creating-in-spira","text":"By default Rapise will ask you to save the new test into the Spira test management system: Assuming that you have already configured the connection to Spira , first you need to select the project in Spira. That will then display the test case folders and test cases in Spira: If there is already a test case in Spira that has not already been linked to Rapise then you can simply select that test case, which will display any existing manual test steps that exist: If this is the test case you want to associate the new Rapise test with, then simply click Create from Spira . If you want to create a new test case in Spira to use, simply click New Test Case : Then enter the name of the new test case and click OK . Once it has been created you can then select it in the test case list and click Create from Spira . Sometimes there is no existing folder inside Spira that makes sense to use. In which case you can first use the New Folder button to create an empty folder that new test cases can be created in: Regardless of which option you choose, before you click Create from Spira , you have the choice of test methodology to use. Currently there are four methodologies available in Rapise: Basic: Windows Desktop Application (WIndows Native, .NET, Java, WPF etc - this should be used for testing desktop applications or any testing not involving web browsers or mobile devices. Manual: Manual-only Testing - this should be selected if you are only going to be creating or executing manual tests Mobile: Mobile Support - this should be selected if you are going to be testing apps running on mobile devices Web: Cross Browser Testing Support - this should be selected if you are going to be testing web applications running in a web browser. If you do not plan on using Spira for managing your test scripts (or you are not able to connect when you want to create the test), you can click on the Create Locally... to just create the test case locally (see next section). You can always save to Spira later on. Once you have created the test, Rapise will ask you to choose the Scripting language ( RVL or JavaScript ).","title":"(a) Creating in Spira"},{"location":"Guide/create_new_test_dialog/#b-creating-locally","text":"If you choose the option to Create Locally the following dialog box is displayed: You need to enter the following information and click Create : The name of the new test - please enter the name of the new test that you wish to create. Folder - please choose the folder on your local computer that you wish to store the Rapise test in. Specify methodology - there are currently four methodologies available in Rapise: Basic: Windows Desktop Application (WIndows Native, .NET, Java, WPF etc - this should be used for testing desktop applications or any testing not involving web browsers or mobile devices. Manual: Manual-only Testing - this should be selected if you are only going to be creating or executing manual tests Mobile: Mobile Support - this should be selected if you are going to be testing apps running on mobile devices Web: Cross Browser Testing Support - this should be selected if you are going to be testing web applications running in a web browser. Once you click Create , Rapise will ask you to choose the Scripting language ( RVL or JavaScript ). Once you have chosen the scripting language, the new test will be created and saved locally.","title":"(b) Creating Locally"},{"location":"Guide/create_sub_test_dialog/","text":"Create Sub-Test Dialog \u00b6 Purpose \u00b6 Create a sub-test . New test should have own set of Objects : Uncheck it if you want to create a scenario re-using objects from parent test. New test should have own User-defined functions : Uncheck it if you want to create a scenario re-using utility functions from its parent test.The Sub-Test is always created inside the folder of its parent test. If parent test is saved to a new location then sub-test is also saved as a sub-folder of a new location. How to Open \u00b6 Choose Create Sub-Test... in the context menu of a folder in Test Files view.","title":"Create Sub-Test Dialog"},{"location":"Guide/create_sub_test_dialog/#create-sub-test-dialog","text":"","title":"Create Sub-Test Dialog"},{"location":"Guide/create_sub_test_dialog/#purpose","text":"Create a sub-test . New test should have own set of Objects : Uncheck it if you want to create a scenario re-using objects from parent test. New test should have own User-defined functions : Uncheck it if you want to create a scenario re-using utility functions from its parent test.The Sub-Test is always created inside the folder of its parent test. If parent test is saved to a new location then sub-test is also saved as a sub-folder of a new location.","title":"Purpose"},{"location":"Guide/create_sub_test_dialog/#how-to-open","text":"Choose Create Sub-Test... in the context menu of a folder in Test Files view.","title":"How to Open"},{"location":"Guide/cross_browser_testing/","text":"Cross Browser Testing \u00b6 Choosing the Browser When Creating a Test \u00b6 When you first create a Rapise test with the Methodology set to Web you will be asked to choose the initial web browser profile : You can run your recording in a different browser than the one in which it was recorded. Selecting a new Playback Browser \u00b6 In the right top corner of Rapise window expand the dropdown with available browser. Change the browser to either one of the native browsers such as Firefox , Internet Explorer or Chrome , or one of the Selenium WebDriver based browser profiles. Once you have changed this setting, Playback the script normally and it will playback in the selected browser. Changing this setting will effectively set the value of the g_browserLibrary global variable. Note: in Rapise 6.3+ you may define local profiles . Playback in Multiple Browsers - SpiraTest \u00b6 Executing a test in multiple browsers is slightly more complicated. We recommend that you use SpiraTest Test Sets where you may define multiple test cases pointing to the same Test with a different g_browserLibrary parameter value. See the SpiraTest Integration topic for detailed information on using Rapise with SpiraTest. Playback in Multiple Browsers - DoInvokeTest \u00b6 To iterate through browsers in Rapise create a new test with Web methodology. Open Main.js file of the test and modify g_load_libraries line as follows: g_load_libraries = [ \"Internet Explorer HTML\" , \"Firefox HTML\" , \"Chrome HTML\" ]; It will ensure that our test will load all browser libraries upon playback. Now add a reference to the Web test you want to run in different browsers. In the Files view right click the test node and choose Add File(s)... . Provide the path to *.sstest file. You will see the reference added to the Files view. Drag the reference to the editor window. Rapise will generate DoInvokeTest call. To execute a test with a given browser profile you need a pair of commands. Navigator . SelectBrowserProfile ( \"BROWSER PROFILE\" ); Global . DoInvokeTest ( 'PATH TO THE TEST' ); So to run the test in three different browsers we get the following content of the Test.js : function Test ( params ) { Navigator . SelectBrowserProfile ( \"Internet Explorer HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); Navigator . SelectBrowserProfile ( \"Chrome HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); Navigator . SelectBrowserProfile ( \"Firefox HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); } g_load_libraries = [ \"Internet Explorer HTML\" , \"Firefox HTML\" , \"Chrome HTML\" ]; In RVL it will look like:","title":"Cross Browser Testing"},{"location":"Guide/cross_browser_testing/#cross-browser-testing","text":"","title":"Cross Browser Testing"},{"location":"Guide/cross_browser_testing/#choosing-the-browser-when-creating-a-test","text":"When you first create a Rapise test with the Methodology set to Web you will be asked to choose the initial web browser profile : You can run your recording in a different browser than the one in which it was recorded.","title":"Choosing the Browser When Creating a Test"},{"location":"Guide/cross_browser_testing/#selecting-a-new-playback-browser","text":"In the right top corner of Rapise window expand the dropdown with available browser. Change the browser to either one of the native browsers such as Firefox , Internet Explorer or Chrome , or one of the Selenium WebDriver based browser profiles. Once you have changed this setting, Playback the script normally and it will playback in the selected browser. Changing this setting will effectively set the value of the g_browserLibrary global variable. Note: in Rapise 6.3+ you may define local profiles .","title":"Selecting a new Playback Browser"},{"location":"Guide/cross_browser_testing/#playback-in-multiple-browsers-spiratest","text":"Executing a test in multiple browsers is slightly more complicated. We recommend that you use SpiraTest Test Sets where you may define multiple test cases pointing to the same Test with a different g_browserLibrary parameter value. See the SpiraTest Integration topic for detailed information on using Rapise with SpiraTest.","title":"Playback in Multiple Browsers - SpiraTest"},{"location":"Guide/cross_browser_testing/#playback-in-multiple-browsers-doinvoketest","text":"To iterate through browsers in Rapise create a new test with Web methodology. Open Main.js file of the test and modify g_load_libraries line as follows: g_load_libraries = [ \"Internet Explorer HTML\" , \"Firefox HTML\" , \"Chrome HTML\" ]; It will ensure that our test will load all browser libraries upon playback. Now add a reference to the Web test you want to run in different browsers. In the Files view right click the test node and choose Add File(s)... . Provide the path to *.sstest file. You will see the reference added to the Files view. Drag the reference to the editor window. Rapise will generate DoInvokeTest call. To execute a test with a given browser profile you need a pair of commands. Navigator . SelectBrowserProfile ( \"BROWSER PROFILE\" ); Global . DoInvokeTest ( 'PATH TO THE TEST' ); So to run the test in three different browsers we get the following content of the Test.js : function Test ( params ) { Navigator . SelectBrowserProfile ( \"Internet Explorer HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); Navigator . SelectBrowserProfile ( \"Chrome HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); Navigator . SelectBrowserProfile ( \"Firefox HTML\" ); Global . DoInvokeTest ( '%WORKDIR%/../Web Testing 2/Web Testing 2.sstest' ); } g_load_libraries = [ \"Internet Explorer HTML\" , \"Firefox HTML\" , \"Chrome HTML\" ]; In RVL it will look like:","title":"Playback in Multiple Browsers - DoInvokeTest"},{"location":"Guide/css/","text":"Web Testing - Using CSS Selectors \u00b6 Purpose \u00b6 When testing web applications you will often want to use Cascading Style Sheets (CSS) selectors to query the browser DOM for elements based on the scenario under test. This section explains how you can use CSS selectors with Rapise to make your browser testing more flexible and adaptive to changes on the screen. CSS is an alternative to XPath that is often better at selecting multiple elements from across different parts of the DOM Tree, unlike XPath which is strictly hierarchical. However since CSS is not always able to uniquely locate an object, when Rapise is used in recording mode, it will learn objects automatically using XPath. CSS Fundamentals \u00b6 In CSS, selectors are patterns used to select the element(s) you want to style. Here are the different operators that you can use in CSS selectors: CSS Selector Reference One limitation (as compared to XPath) is that there is not a way to select an element based on its contents. So it would not be possible to locate a cell in a grid (for example) based on the contents of the cell. For that you would need to use XPath. Rapise CSS Extensions \u00b6 Since Rapise uses XPath as its primary means of locating an HTML element, when you Learn an object using CSS, Rapise will prefix the Locator (listed under the XPath property for that object in the Object Tree ) with css= to let Rapise know that the locator is actually using a CSS selector. css=html > body > form#ctl01 > div:nth-of-type(3) > div:first-of-type > div:first-of-type There are several different ways to use CSS selectors in Rapise. Using Web Spy \u00b6 To most easily use CSS selectors in Rapise, we recommend using the Web Spy tool. Make sure that CSS edit is enabled: If you enter in the CSS selector at the top, when you click Test it will display all of the DOM elements that match the selector: You can now refine the query to only find the items you want to test. Learning Objects \u00b6 When you have created the query in the Web Spy that returns the HTML elements that you were expecting, you can click on the Learn button to learn that object. What this will do is create a new Rapise object in the Object Tree that maps to this specific CSS. That means that the \"object\" in Rapise is effectively a pointer to this specific CSS selector. For example, if you want to find a specific book in a grid of books by its CSS class, style, ID or other attribute, you can search using the appropriate CSS selector, then learn this object as Book_1 so that you can access it in your code as SeS(\"Book_1\") . Every time you call a function on Book_1 , Rapise will use the learned CSS selector and use that to evaluate which HTML element in the web page to access. Dynamic Queries \u00b6 In addition to learning objects based on specific CSS selector, there are a set of general functions that can be used to query for objects in the web page: SeS ( 'Book_Management' ). DoDOMQueryCss ( 'tr td[data=book1]' ); Will dynamically query for any HTML element that is a child of the learned Book Management object that matches the CSS selector. In this example it will look for any table cell in a table row that has the attribute data=\"book1\" .","title":"CSS"},{"location":"Guide/css/#web-testing-using-css-selectors","text":"","title":"Web Testing - Using CSS Selectors"},{"location":"Guide/css/#purpose","text":"When testing web applications you will often want to use Cascading Style Sheets (CSS) selectors to query the browser DOM for elements based on the scenario under test. This section explains how you can use CSS selectors with Rapise to make your browser testing more flexible and adaptive to changes on the screen. CSS is an alternative to XPath that is often better at selecting multiple elements from across different parts of the DOM Tree, unlike XPath which is strictly hierarchical. However since CSS is not always able to uniquely locate an object, when Rapise is used in recording mode, it will learn objects automatically using XPath.","title":"Purpose"},{"location":"Guide/css/#css-fundamentals","text":"In CSS, selectors are patterns used to select the element(s) you want to style. Here are the different operators that you can use in CSS selectors: CSS Selector Reference One limitation (as compared to XPath) is that there is not a way to select an element based on its contents. So it would not be possible to locate a cell in a grid (for example) based on the contents of the cell. For that you would need to use XPath.","title":"CSS Fundamentals"},{"location":"Guide/css/#rapise-css-extensions","text":"Since Rapise uses XPath as its primary means of locating an HTML element, when you Learn an object using CSS, Rapise will prefix the Locator (listed under the XPath property for that object in the Object Tree ) with css= to let Rapise know that the locator is actually using a CSS selector. css=html > body > form#ctl01 > div:nth-of-type(3) > div:first-of-type > div:first-of-type There are several different ways to use CSS selectors in Rapise.","title":"Rapise CSS Extensions"},{"location":"Guide/css/#using-web-spy","text":"To most easily use CSS selectors in Rapise, we recommend using the Web Spy tool. Make sure that CSS edit is enabled: If you enter in the CSS selector at the top, when you click Test it will display all of the DOM elements that match the selector: You can now refine the query to only find the items you want to test.","title":"Using Web Spy"},{"location":"Guide/css/#learning-objects","text":"When you have created the query in the Web Spy that returns the HTML elements that you were expecting, you can click on the Learn button to learn that object. What this will do is create a new Rapise object in the Object Tree that maps to this specific CSS. That means that the \"object\" in Rapise is effectively a pointer to this specific CSS selector. For example, if you want to find a specific book in a grid of books by its CSS class, style, ID or other attribute, you can search using the appropriate CSS selector, then learn this object as Book_1 so that you can access it in your code as SeS(\"Book_1\") . Every time you call a function on Book_1 , Rapise will use the learned CSS selector and use that to evaluate which HTML element in the web page to access.","title":"Learning Objects"},{"location":"Guide/css/#dynamic-queries","text":"In addition to learning objects based on specific CSS selector, there are a set of general functions that can be used to query for objects in the web page: SeS ( 'Book_Management' ). DoDOMQueryCss ( 'tr td[data=book1]' ); Will dynamically query for any HTML element that is a child of the learned Book Management object that matches the CSS selector. In this example it will look for any table cell in a table row that has the attribute data=\"book1\" .","title":"Dynamic Queries"},{"location":"Guide/custom_libraries/","text":"Custom Libraries \u00b6 Purpose \u00b6 If your application doesn't work with the predefined Recording Libraries , you can create your own. Usage \u00b6 Your library can provide Basic , Advanced or Full support for your application. Basic support allows you to define a global object with common functionality. Advanced allows enables Learn of application-specific object types, write test scripts , and Playback your scripts. Full support allows you to Record as well. Create your library via Create... > User Lib... menu. Basic Support \u00b6 Define one or many application-specific Global Objects . Advanced Support \u00b6 Add a Matcher Rule to the library for every object type in your application. The SeSMatcherRule includes information to identify the object and a set of behaviors. var * yourApplicationRule * = new SeSMatcherRule ( { object_type : \"*yourAppObject*\" , classname : \"*yourAppFrame*\" , //You can use a [regular expression](regular_expressions.md) here behavior : [ * yourAppBehavior * ] }) Override Actions : Override actions in yourAppBehavior (above). The action definitions you provides will be used during Playback . Overriding actions does not affect recording. var HTMLFirefoxBehavior = { actions : [{ actionName : \"Click\" , DoAction : function (){} }, { actionName : \"SetText\" , DoAction : function ( /**string*/ txt ){} }] } Full Support \u00b6 Enable Recording : You can enable recording in two ways. If your application notifies the Accessibility Events interface about application events, you can override events in the behavior section of SeSMatcherRules : var newBehavior = { actions : [{ /*section deleted for brevity*/ }], events : { OnSelect : function ( /**SeSObject*/ param , /*boolean*/ badd ) { /*...*/ }, OnSelectAdd : function ( /**SeSObject*/ param , /**boolean*/ badd ) { /*...*/ } } } var newRule = new SeSMatcherRule ({ object_type : \"someType\" , role : \"someRole\" , behavior : [ newBehavior ], }) Otherwise, you will have to implement Custom Recording . Custom Recording : With custom recording, it is the library's responsibility to: detect user actions in the application, and call RegisterAction () (which writes the action to the script). See Also \u00b6 Tutorial: Custom Library Another Example of Creating a Custom Library To see what actions and events can be overridden, see SeSBehavior.js (in the Rapise Engine) . Check the C:\\Program Files(x86)\\Inflectra\\Rapise\\Engine\\Lib directory as an example of rapise core libraries. You can alter the behavior of an action without creating an entire library. See the Actions section for more details.","title":"Custom Libraries"},{"location":"Guide/custom_libraries/#custom-libraries","text":"","title":"Custom Libraries"},{"location":"Guide/custom_libraries/#purpose","text":"If your application doesn't work with the predefined Recording Libraries , you can create your own.","title":"Purpose"},{"location":"Guide/custom_libraries/#usage","text":"Your library can provide Basic , Advanced or Full support for your application. Basic support allows you to define a global object with common functionality. Advanced allows enables Learn of application-specific object types, write test scripts , and Playback your scripts. Full support allows you to Record as well. Create your library via Create... > User Lib... menu.","title":"Usage"},{"location":"Guide/custom_libraries/#basic-support","text":"Define one or many application-specific Global Objects .","title":"Basic Support"},{"location":"Guide/custom_libraries/#advanced-support","text":"Add a Matcher Rule to the library for every object type in your application. The SeSMatcherRule includes information to identify the object and a set of behaviors. var * yourApplicationRule * = new SeSMatcherRule ( { object_type : \"*yourAppObject*\" , classname : \"*yourAppFrame*\" , //You can use a [regular expression](regular_expressions.md) here behavior : [ * yourAppBehavior * ] }) Override Actions : Override actions in yourAppBehavior (above). The action definitions you provides will be used during Playback . Overriding actions does not affect recording. var HTMLFirefoxBehavior = { actions : [{ actionName : \"Click\" , DoAction : function (){} }, { actionName : \"SetText\" , DoAction : function ( /**string*/ txt ){} }] }","title":"Advanced Support"},{"location":"Guide/custom_libraries/#full-support","text":"Enable Recording : You can enable recording in two ways. If your application notifies the Accessibility Events interface about application events, you can override events in the behavior section of SeSMatcherRules : var newBehavior = { actions : [{ /*section deleted for brevity*/ }], events : { OnSelect : function ( /**SeSObject*/ param , /*boolean*/ badd ) { /*...*/ }, OnSelectAdd : function ( /**SeSObject*/ param , /**boolean*/ badd ) { /*...*/ } } } var newRule = new SeSMatcherRule ({ object_type : \"someType\" , role : \"someRole\" , behavior : [ newBehavior ], }) Otherwise, you will have to implement Custom Recording . Custom Recording : With custom recording, it is the library's responsibility to: detect user actions in the application, and call RegisterAction () (which writes the action to the script).","title":"Full Support"},{"location":"Guide/custom_libraries/#see-also","text":"Tutorial: Custom Library Another Example of Creating a Custom Library To see what actions and events can be overridden, see SeSBehavior.js (in the Rapise Engine) . Check the C:\\Program Files(x86)\\Inflectra\\Rapise\\Engine\\Lib directory as an example of rapise core libraries. You can alter the behavior of an action without creating an entire library. See the Actions section for more details.","title":"See Also"},{"location":"Guide/customizable_engine/","text":"Customizable Engine \u00b6 Purpose \u00b6 The source for most of the Rapise implementation is available for you to read and modify. You may find it useful to look at if you decide to create a library customized for your application. Usage \u00b6 Unless you specified otherwise, Rapise will be installed at 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\ The source code is in the Engine directory. You'll find the recording / learning libraries in Engine\\Lib . The core logic is in four files: SeSAction.js ; SeSBehavior.js ; SeSCommon.js ; SeSConfig.js . Note: If you plan to make changes to the Rapise Engine, we recommend you use a version control system capable of reconciling code conflicts, as we do not support user customizations. However, let us know if you feel that your customizations are generally useful; if we decide to integrate them into Rapise, we will support them. To add Engine to any of your tests use Ctrl + Shift + E shortcut. See Also \u00b6 \u2022 Custom Libraries \u2022 Scripting","title":"Customizable Engine"},{"location":"Guide/customizable_engine/#customizable-engine","text":"","title":"Customizable Engine"},{"location":"Guide/customizable_engine/#purpose","text":"The source for most of the Rapise implementation is available for you to read and modify. You may find it useful to look at if you decide to create a library customized for your application.","title":"Purpose"},{"location":"Guide/customizable_engine/#usage","text":"Unless you specified otherwise, Rapise will be installed at 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\ The source code is in the Engine directory. You'll find the recording / learning libraries in Engine\\Lib . The core logic is in four files: SeSAction.js ; SeSBehavior.js ; SeSCommon.js ; SeSConfig.js . Note: If you plan to make changes to the Rapise Engine, we recommend you use a version control system capable of reconciling code conflicts, as we do not support user customizations. However, let us know if you feel that your customizations are generally useful; if we decide to integrate them into Rapise, we will support them. To add Engine to any of your tests use Ctrl + Shift + E shortcut.","title":"Usage"},{"location":"Guide/customizable_engine/#see-also","text":"\u2022 Custom Libraries \u2022 Scripting","title":"See Also"},{"location":"Guide/data_driven_testing/","text":"Data-Driven Testing (JavaScript) \u00b6 Purpose \u00b6 Data Driven Testing is an automated testing technique in which test case data is separated from test case logic. Each set of test case data consists of input values and a set of expected output values. The actual output values are compared to the expected output values to determine whether the test passed. You can perform data-driven testing either using an MS-Excel spreadsheet as the datasource or a relational database . Using an MS-Excel Spreadsheet \u00b6 The Spreadsheet object is useful for implementing data-driven tests. It allows you to connect to, query, and read an excel spreadsheet from your test script. To create a data-driven test, you will: 1. Record a Test \u00b6 The exact inputs you use for the recording will not matter as much as your interactions with the objects. The following excerpt was recorded using www.google.com : function Test () { //Set Text Inflectra in q SeS ( 'Obj1' ). DoSetText ( \"Inflectra\" ); //Click on btnG SeS ( 'Obj2' ). DoClick (); } The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button. 2. Parameterize the Test() Function \u00b6 The Test() function has all of the procedural logic for the test. Replace input values with variables. Encapsulate the logic in a nested function with one parameter for each variable you created. As an example, we will parameterize the Test() function we created in step one: function Test () { function Logic ( searchterm ) { //our new function encapsulates the test logic //Set Text using searchterm SeS ( 'Obj1' ). DoSetText ( searchterm ) //here we changed a hard-coded value into a variable //Click on btnG SeS ( 'Obj2' ). DoClick () } Logic ( \"Inflectra\" ) //don't forget to call your new function } 3. Create the Test Case Data \u00b6 Create a spreadsheet with name searchterms.xlsx . For this right click the test node and choose Create > Spreadsheet... . Enter the name and click Create button. In the spreadsheet create a column for every variable in step two. Add columns for any expected output values you wish to verify. Each row is a test case. In our google example, we only have one input value ( searchterm ) and we're not comparing any expected output values, so we will only need one column in our spreadsheet. 4. Attach Spreadsheet Object to searchterms.xlsx \u00b6 Drag the searchterms.xlsx from files tree into appropriate place in your test source: 5. Use Spreadsheet to Access the Test Case Data \u00b6 In our example, we use a Spreadsheet object and run the test logic once for every row. function Test () { function Logic ( searchterm ) { //Set Text searchterm in q SeS ( 'Obj1' ). DoSetText ( searchterm ) //Click on btnG SeS ( 'Obj2' ). DoClick () } Spreadsheet . DoAttach ( '%WORKDIR%/searchterms.xlsx' ); // Go through all rows while ( Spreadsheet . DoSequential ()) { // Read cell value from column 0 var term = Spreadsheet . GetCell ( 0 ); // Pass it into Logic function Logic ( term ); } } Using a Relational Database \u00b6 Rapise comes with the Database query global object that allows you to send SQL queries to a database and then iterate through the results. The process for creating such a data-driven test is as follows: 1. Record a Test \u00b6 The exact inputs you use for the recording will not matter as much as your interactions with the objects. The following excerpt was recorded using www.google.com : function Test () { //Set Text Inflectra in q SeS ( 'Obj1' ). DoSetText ( \"Inflectra\" ); //Click on btnG SeS ( 'Obj2' ). DoClick (); } The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button. 2. Parameterize the Test() Function \u00b6 The Test() function has all of the procedural logic for the test. Replace input values with variables. Encapsulate the logic in a nested function with one parameter for each variable you created. As an example, we will parameterize the Test() function we created in step one: function Test () { function Logic ( searchterm ) { //our new function encapsulates the test logic //Set Text using searchterm SeS ( 'Obj1' ). DoSetText ( searchterm ) //here we changed a hard-coded value into a variable //Click on btnG SeS ( 'Obj2' ). DoClick () } Logic ( \"Inflectra\" ) //don't forget to call your new function } 3. Use Database to Connect the Test Case Data. \u00b6 This assumes that you already have an ODBC or OLE DB compatible relational database that contains the necessary test data. You drag the Database global object into the script editor: and then use: Database.DoAttach() - to make the database connection and specify the SQL query Database.GetRowCount() - to verify that there is data Database.DoSequential() - to loop through the data set row by row Database.GetValue() - to get that row's data Here is an example of the code needed to loop through a list of records (taken from the SpiraTest database as an example) and call our Logic() parameterized function with the appropriate test data: var success = Database . DoAttach ( 'Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=SpiraTest;Data Source=.' , 'SELECT * FROM TST_PROJECT' ); Tester . Assert ( 'Successfully Connected' , success ); var count = Database . GetRowCount (); Tester . Message ( count ); //Loop through the rows while ( Database . DoSequential ()) { var projectId = Database . GetValue ( \"PROJECT_ID\" ); var name = Database . GetValue ( \"NAME\" ); var description = Database . GetValue ( \"DESCRIPTION\" ); Logic ( name ); } See Also \u00b6 KB357 Data-driven testing with spreadsheets and RVL KB317 Read external Excel spreadsheet in RVL The Connection Strings Reference","title":"Data Driven Testing"},{"location":"Guide/data_driven_testing/#data-driven-testing-javascript","text":"","title":"Data-Driven Testing (JavaScript)"},{"location":"Guide/data_driven_testing/#purpose","text":"Data Driven Testing is an automated testing technique in which test case data is separated from test case logic. Each set of test case data consists of input values and a set of expected output values. The actual output values are compared to the expected output values to determine whether the test passed. You can perform data-driven testing either using an MS-Excel spreadsheet as the datasource or a relational database .","title":"Purpose"},{"location":"Guide/data_driven_testing/#using-an-ms-excel-spreadsheet","text":"The Spreadsheet object is useful for implementing data-driven tests. It allows you to connect to, query, and read an excel spreadsheet from your test script. To create a data-driven test, you will:","title":"Using an MS-Excel Spreadsheet"},{"location":"Guide/data_driven_testing/#1-record-a-test","text":"The exact inputs you use for the recording will not matter as much as your interactions with the objects. The following excerpt was recorded using www.google.com : function Test () { //Set Text Inflectra in q SeS ( 'Obj1' ). DoSetText ( \"Inflectra\" ); //Click on btnG SeS ( 'Obj2' ). DoClick (); } The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button.","title":"1. Record a Test"},{"location":"Guide/data_driven_testing/#2-parameterize-the-test-function","text":"The Test() function has all of the procedural logic for the test. Replace input values with variables. Encapsulate the logic in a nested function with one parameter for each variable you created. As an example, we will parameterize the Test() function we created in step one: function Test () { function Logic ( searchterm ) { //our new function encapsulates the test logic //Set Text using searchterm SeS ( 'Obj1' ). DoSetText ( searchterm ) //here we changed a hard-coded value into a variable //Click on btnG SeS ( 'Obj2' ). DoClick () } Logic ( \"Inflectra\" ) //don't forget to call your new function }","title":"2. Parameterize the Test() Function"},{"location":"Guide/data_driven_testing/#3-create-the-test-case-data","text":"Create a spreadsheet with name searchterms.xlsx . For this right click the test node and choose Create > Spreadsheet... . Enter the name and click Create button. In the spreadsheet create a column for every variable in step two. Add columns for any expected output values you wish to verify. Each row is a test case. In our google example, we only have one input value ( searchterm ) and we're not comparing any expected output values, so we will only need one column in our spreadsheet.","title":"3. Create the Test Case Data"},{"location":"Guide/data_driven_testing/#4-attach-spreadsheet-object-to-searchtermsxlsx","text":"Drag the searchterms.xlsx from files tree into appropriate place in your test source:","title":"4. Attach Spreadsheet Object to searchterms.xlsx"},{"location":"Guide/data_driven_testing/#5-use-spreadsheet-to-access-the-test-case-data","text":"In our example, we use a Spreadsheet object and run the test logic once for every row. function Test () { function Logic ( searchterm ) { //Set Text searchterm in q SeS ( 'Obj1' ). DoSetText ( searchterm ) //Click on btnG SeS ( 'Obj2' ). DoClick () } Spreadsheet . DoAttach ( '%WORKDIR%/searchterms.xlsx' ); // Go through all rows while ( Spreadsheet . DoSequential ()) { // Read cell value from column 0 var term = Spreadsheet . GetCell ( 0 ); // Pass it into Logic function Logic ( term ); } }","title":"5. Use Spreadsheet to Access the Test Case Data"},{"location":"Guide/data_driven_testing/#using-a-relational-database","text":"Rapise comes with the Database query global object that allows you to send SQL queries to a database and then iterate through the results. The process for creating such a data-driven test is as follows:","title":"Using a Relational Database"},{"location":"Guide/data_driven_testing/#1-record-a-test_1","text":"The exact inputs you use for the recording will not matter as much as your interactions with the objects. The following excerpt was recorded using www.google.com : function Test () { //Set Text Inflectra in q SeS ( 'Obj1' ). DoSetText ( \"Inflectra\" ); //Click on btnG SeS ( 'Obj2' ). DoClick (); } The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button.","title":"1. Record a Test"},{"location":"Guide/data_driven_testing/#2-parameterize-the-test-function_1","text":"The Test() function has all of the procedural logic for the test. Replace input values with variables. Encapsulate the logic in a nested function with one parameter for each variable you created. As an example, we will parameterize the Test() function we created in step one: function Test () { function Logic ( searchterm ) { //our new function encapsulates the test logic //Set Text using searchterm SeS ( 'Obj1' ). DoSetText ( searchterm ) //here we changed a hard-coded value into a variable //Click on btnG SeS ( 'Obj2' ). DoClick () } Logic ( \"Inflectra\" ) //don't forget to call your new function }","title":"2. Parameterize the Test() Function"},{"location":"Guide/data_driven_testing/#3-use-database-to-connect-the-test-case-data","text":"This assumes that you already have an ODBC or OLE DB compatible relational database that contains the necessary test data. You drag the Database global object into the script editor: and then use: Database.DoAttach() - to make the database connection and specify the SQL query Database.GetRowCount() - to verify that there is data Database.DoSequential() - to loop through the data set row by row Database.GetValue() - to get that row's data Here is an example of the code needed to loop through a list of records (taken from the SpiraTest database as an example) and call our Logic() parameterized function with the appropriate test data: var success = Database . DoAttach ( 'Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=SpiraTest;Data Source=.' , 'SELECT * FROM TST_PROJECT' ); Tester . Assert ( 'Successfully Connected' , success ); var count = Database . GetRowCount (); Tester . Message ( count ); //Loop through the rows while ( Database . DoSequential ()) { var projectId = Database . GetValue ( \"PROJECT_ID\" ); var name = Database . GetValue ( \"NAME\" ); var description = Database . GetValue ( \"DESCRIPTION\" ); Logic ( name ); }","title":"3. Use Database to Connect the Test Case Data."},{"location":"Guide/data_driven_testing/#see-also","text":"KB357 Data-driven testing with spreadsheets and RVL KB317 Read external Excel spreadsheet in RVL The Connection Strings Reference","title":"See Also"},{"location":"Guide/ddt/","text":"Data-Driven Testing \u00b6 Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes. You will also learn how to define data within a test and in an external spreadsheet. DDT in RVL \u00b6 Let's start from RVL mode first. With RVL you can delegate low-level complex automation tasks to a developer team and focus on testing scenarios and data used to fill forms and tables. Embedded Data \u00b6 First, define data schema. In the Flow column of RVL spreadsheet choose Map. Then hit Tab on the keyboard and Rapise will generate a template for the data table. Give this new map a name and define columns and initial set of rows with values. In our example the map has name Data and it has three columns: FirstName , LastName and Company . It also has two rows with data values. Now in our test we can just use the map and refer to it's columns by name. Data becomes one of parameter types. And when Data is selected as a parameter type then column names are available in the drop down. Now our RVL looks like this. Execution of the test produces the report. The test simply prints first line of the data table. The data table we just created is an object in Rapise object repository and it has actions. With actions one can manipulate active row and column index and read arbitrary data from the table. For the detailed description of actions one can do upon data tables refer to Map Object reference. Let's advance to next row in our table before printing values. After execution the report displays data from the second row. Excel Data \u00b6 Now we are ready to put data into external spreadsheet. Let's create one. In the Files view right click Scripts folder and choose Create > Spreadsheet... We'll go with default options. Rapise has built-in spreadsheet editor and you do not need Excel to be installed on the machine. Let's bind to this spreadsheet in RVL. Insert a line below Data map we created in previous section. In the Flow column choose Map and then set map type to Range . Give the map same name Data and make sure that it references Data.xlsx which we just created. Running the test. Now data is taken from the Data.xlsx . Notice that in Data.xlsx we named columns same way as in the previous section. If we'll do a loop with Data map Rapise will iterate through all lines on execution. DDT in JavaScript \u00b6 One can read data from a spreadsheet in JavaScript mode as well. There is a global Spreadsheet object that is available in every test. Here is an example of Spreadsheet API usage. Spreadsheet . DoAttach ( 'Calc.xls' , 'Calc Data' ); while ( Spreadsheet . DoSequential ()) { EnterNumber ( Spreadsheet . GetCell ( \"Item1\" )); Operation ( Spreadsheet . GetCell ( \"Operation\" )); EnterNumber ( Spreadsheet . GetCell ( \"Item2\" )); SeS ( 'ResultButton' ). DoAction (); Tester . Assert ( '' + Spreadsheet . GetCell ( \"Item1\" ) + Spreadsheet . GetCell ( \"Operation\" ) + Spreadsheet . GetCell ( \"Item2\" ) + '=' + Spreadsheet . GetCell ( \"Result\" ), CheckResult ( Spreadsheet . GetCell ( \"Result\" ))); } Description of all Spreadsheet actions and properties is available here . Open UsingSpreadsheet sample test from the start page to see a working example (scroll the list of samples down). See Also \u00b6 Data-Driven Testing (webinar) How To: Easily Attaching RVL Script to an External Spreadsheet in Rapise ( watch video ) KB432 Writing data to an Excel spreadsheet KB27 Using Rapise to extract test data from an Excel sheet Blog: Data Driven Testing using the Spreadsheet object (JavaScript) Data-driven testing tutorial (JavaScript)","title":"Data-Driven Testing"},{"location":"Guide/ddt/#data-driven-testing","text":"Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes. You will also learn how to define data within a test and in an external spreadsheet.","title":"Data-Driven Testing"},{"location":"Guide/ddt/#ddt-in-rvl","text":"Let's start from RVL mode first. With RVL you can delegate low-level complex automation tasks to a developer team and focus on testing scenarios and data used to fill forms and tables.","title":"DDT in RVL"},{"location":"Guide/ddt/#embedded-data","text":"First, define data schema. In the Flow column of RVL spreadsheet choose Map. Then hit Tab on the keyboard and Rapise will generate a template for the data table. Give this new map a name and define columns and initial set of rows with values. In our example the map has name Data and it has three columns: FirstName , LastName and Company . It also has two rows with data values. Now in our test we can just use the map and refer to it's columns by name. Data becomes one of parameter types. And when Data is selected as a parameter type then column names are available in the drop down. Now our RVL looks like this. Execution of the test produces the report. The test simply prints first line of the data table. The data table we just created is an object in Rapise object repository and it has actions. With actions one can manipulate active row and column index and read arbitrary data from the table. For the detailed description of actions one can do upon data tables refer to Map Object reference. Let's advance to next row in our table before printing values. After execution the report displays data from the second row.","title":"Embedded Data"},{"location":"Guide/ddt/#excel-data","text":"Now we are ready to put data into external spreadsheet. Let's create one. In the Files view right click Scripts folder and choose Create > Spreadsheet... We'll go with default options. Rapise has built-in spreadsheet editor and you do not need Excel to be installed on the machine. Let's bind to this spreadsheet in RVL. Insert a line below Data map we created in previous section. In the Flow column choose Map and then set map type to Range . Give the map same name Data and make sure that it references Data.xlsx which we just created. Running the test. Now data is taken from the Data.xlsx . Notice that in Data.xlsx we named columns same way as in the previous section. If we'll do a loop with Data map Rapise will iterate through all lines on execution.","title":"Excel Data"},{"location":"Guide/ddt/#ddt-in-javascript","text":"One can read data from a spreadsheet in JavaScript mode as well. There is a global Spreadsheet object that is available in every test. Here is an example of Spreadsheet API usage. Spreadsheet . DoAttach ( 'Calc.xls' , 'Calc Data' ); while ( Spreadsheet . DoSequential ()) { EnterNumber ( Spreadsheet . GetCell ( \"Item1\" )); Operation ( Spreadsheet . GetCell ( \"Operation\" )); EnterNumber ( Spreadsheet . GetCell ( \"Item2\" )); SeS ( 'ResultButton' ). DoAction (); Tester . Assert ( '' + Spreadsheet . GetCell ( \"Item1\" ) + Spreadsheet . GetCell ( \"Operation\" ) + Spreadsheet . GetCell ( \"Item2\" ) + '=' + Spreadsheet . GetCell ( \"Result\" ), CheckResult ( Spreadsheet . GetCell ( \"Result\" ))); } Description of all Spreadsheet actions and properties is available here . Open UsingSpreadsheet sample test from the start page to see a working example (scroll the list of samples down).","title":"DDT in JavaScript"},{"location":"Guide/ddt/#see-also","text":"Data-Driven Testing (webinar) How To: Easily Attaching RVL Script to an External Spreadsheet in Rapise ( watch video ) KB432 Writing data to an Excel spreadsheet KB27 Using Rapise to extract test data from an Excel sheet Blog: Data Driven Testing using the Spreadsheet object (JavaScript) Data-driven testing tutorial (JavaScript)","title":"See Also"},{"location":"Guide/deal_with_a_simulated_object/","text":"Deal with a Simulated Object \u00b6 Sample Application \u00b6 The color box of Microsoft's Paint utility is a compound object that contains color tiles surrounded by a containing box. To understand this completely, start mspaint.exe from the Rapise. Steps: Open a new test under Rapise. Press the Record button on the application bar. When the Select an Application to Record dialog appears, select the Run Application tab. Enter mspaint in the Full path to application edit box. Press the Run button. If you are unfamiliar with MS Paint, take a few minutes to play with it. In particular, notice the color selection box that appears on the upper-right of the application window. Press Ctrl+5 to spy on the UI. Press Ctrl + G to spy on the Paint application. Notice several things about the behavior of the MS Paint application under the Object Spy. As you move the mouse inside the color box, the entire surrounding box will show a red highlight but the individual color tiles will not. Properties of the color box control have no clues on how to find a particular color. This combination makes it impossible for Rapise to identify and learn the colors as integral objects. The way in which Rapise can be taught to deal with the color box is by \"simulating\" it. In fact, Rapise will recognize these non-objects without you having to take particular action. Let's discover this and what it means: Open a new test under Rapise; call it MSPaint . Press the Record button on the application bar. When the Select an Application to Record dialog appears, clear all selection boxes in the library list box. You will have to scroll that section of the dialog box to make sure all selections are clear. We are choosing no loaded libraries so that Rapise will not be able to \"cheat\" and know about any objects on the screen. Select the Run Application tab. Enter mspaint in the Full path to application edit box. Press the Run button. > Note: Applications that reside in C:\\windows\\system32 can be started by their names because C:\\windows\\system32 must be in the system path. When the Recording Activity dialog is displayed, press Learn Ctrl + 2 Do a small amount of things in Paint. For example: Click on the red color in the palette. Click on the green color in the palette. Click on the blue color in the palette. Look at the Recording Activity dialog grid. It will be something like this: Notice that the three clicks in the color box were recorded as simulated objects. Press Ctrl + 3 to end the recording. See Also \u00b6 How-Tos","title":"Deal with a Simulated Object"},{"location":"Guide/deal_with_a_simulated_object/#deal-with-a-simulated-object","text":"","title":"Deal with a Simulated Object"},{"location":"Guide/deal_with_a_simulated_object/#sample-application","text":"The color box of Microsoft's Paint utility is a compound object that contains color tiles surrounded by a containing box. To understand this completely, start mspaint.exe from the Rapise. Steps: Open a new test under Rapise. Press the Record button on the application bar. When the Select an Application to Record dialog appears, select the Run Application tab. Enter mspaint in the Full path to application edit box. Press the Run button. If you are unfamiliar with MS Paint, take a few minutes to play with it. In particular, notice the color selection box that appears on the upper-right of the application window. Press Ctrl+5 to spy on the UI. Press Ctrl + G to spy on the Paint application. Notice several things about the behavior of the MS Paint application under the Object Spy. As you move the mouse inside the color box, the entire surrounding box will show a red highlight but the individual color tiles will not. Properties of the color box control have no clues on how to find a particular color. This combination makes it impossible for Rapise to identify and learn the colors as integral objects. The way in which Rapise can be taught to deal with the color box is by \"simulating\" it. In fact, Rapise will recognize these non-objects without you having to take particular action. Let's discover this and what it means: Open a new test under Rapise; call it MSPaint . Press the Record button on the application bar. When the Select an Application to Record dialog appears, clear all selection boxes in the library list box. You will have to scroll that section of the dialog box to make sure all selections are clear. We are choosing no loaded libraries so that Rapise will not be able to \"cheat\" and know about any objects on the screen. Select the Run Application tab. Enter mspaint in the Full path to application edit box. Press the Run button. > Note: Applications that reside in C:\\windows\\system32 can be started by their names because C:\\windows\\system32 must be in the system path. When the Recording Activity dialog is displayed, press Learn Ctrl + 2 Do a small amount of things in Paint. For example: Click on the red color in the palette. Click on the green color in the palette. Click on the blue color in the palette. Look at the Recording Activity dialog grid. It will be something like this: Notice that the three clicks in the color box were recorded as simulated objects. Press Ctrl + 3 to end the recording.","title":"Sample Application"},{"location":"Guide/deal_with_a_simulated_object/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/defining_functions/","text":"Defining Functions \u00b6 Purpose \u00b6 The Rapise test script is in JavaScript. You may define as many JavaScript functions as you would like to call from your test script. Usage \u00b6 There are two ways to maintain additional functions: (1) Inside your test script and (2) in an external file. Inside your Test Script \u00b6 In Main.js \u00b6 Define the function inside of one of the following functions: Test() , TestInit() , TestFinish() , or TestPrepare() . The Script Recorder will erase code placed outside of these functions. In User.js \u00b6 It is recommended to put all user functions into User.js file available in any test from its creation. This file is automatically attached into every script. All variables and functions defined in it may be used in the test. User-defined functions are also available under the User Functions node in the Object Tree: In an External File \u00b6 You can define your function in another file and include it. For example: function Test () { // Withdraw is defined inside the \"Test\" function function Withdraw ( amount ) { Log ( \"Start Withdraw of:\" + amount ); // Withdraw logic is here } Withdraw ( 12.34 ); // Include \"UtilityFunctions.js\" to get at function Deposit() eval ( File . Include ( \"UtilityFunctions.js\" )); // Deposit is defined in \"UtilityFunctions.js\" Deposit ( 56.78 ); } See Also \u00b6 To learn more about what the Script Recorder will change in your test script, see Multiple Recordings .","title":"Defining Functions"},{"location":"Guide/defining_functions/#defining-functions","text":"","title":"Defining Functions"},{"location":"Guide/defining_functions/#purpose","text":"The Rapise test script is in JavaScript. You may define as many JavaScript functions as you would like to call from your test script.","title":"Purpose"},{"location":"Guide/defining_functions/#usage","text":"There are two ways to maintain additional functions: (1) Inside your test script and (2) in an external file.","title":"Usage"},{"location":"Guide/defining_functions/#inside-your-test-script","text":"","title":"Inside your Test Script"},{"location":"Guide/defining_functions/#in-mainjs","text":"Define the function inside of one of the following functions: Test() , TestInit() , TestFinish() , or TestPrepare() . The Script Recorder will erase code placed outside of these functions.","title":"In Main.js"},{"location":"Guide/defining_functions/#in-userjs","text":"It is recommended to put all user functions into User.js file available in any test from its creation. This file is automatically attached into every script. All variables and functions defined in it may be used in the test. User-defined functions are also available under the User Functions node in the Object Tree:","title":"In User.js"},{"location":"Guide/defining_functions/#in-an-external-file","text":"You can define your function in another file and include it. For example: function Test () { // Withdraw is defined inside the \"Test\" function function Withdraw ( amount ) { Log ( \"Start Withdraw of:\" + amount ); // Withdraw logic is here } Withdraw ( 12.34 ); // Include \"UtilityFunctions.js\" to get at function Deposit() eval ( File . Include ( \"UtilityFunctions.js\" )); // Deposit is defined in \"UtilityFunctions.js\" Deposit ( 56.78 ); }","title":"In an External File"},{"location":"Guide/defining_functions/#see-also","text":"To learn more about what the Script Recorder will change in your test script, see Multiple Recordings .","title":"See Also"},{"location":"Guide/detecting_the_presence_of_an_o/","text":"Detecting the presence of an object \u00b6 Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this. Recommended Solution \u00b6 You can use the special SeSFindObj('object name') command to perform the check: if ( SeSFindObj ( 'Object Name' )) { // Object is available } else { // Object is not available } See Also \u00b6 How-Tos","title":"Detecting the Presence of an Object"},{"location":"Guide/detecting_the_presence_of_an_o/#detecting-the-presence-of-an-object","text":"Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this.","title":"Detecting the presence of an object"},{"location":"Guide/detecting_the_presence_of_an_o/#recommended-solution","text":"You can use the special SeSFindObj('object name') command to perform the check: if ( SeSFindObj ( 'Object Name' )) { // Object is available } else { // Object is not available }","title":"Recommended Solution"},{"location":"Guide/detecting_the_presence_of_an_o/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/dialog_add_web_service/","text":"Add New Web Service Dialog \u00b6 Screenshot \u00b6 Purpose \u00b6 Adds a new REST or SOAP web service to your Rapise test. It adds the web service as a .rest or .soap file that is added to the Services folder of the Files section: How to Open \u00b6 Click on the Tools > Web Services menu item.","title":"Add Web Service Dialog"},{"location":"Guide/dialog_add_web_service/#add-new-web-service-dialog","text":"","title":"Add New Web Service Dialog"},{"location":"Guide/dialog_add_web_service/#screenshot","text":"","title":"Screenshot"},{"location":"Guide/dialog_add_web_service/#purpose","text":"Adds a new REST or SOAP web service to your Rapise test. It adds the web service as a .rest or .soap file that is added to the Services folder of the Files section:","title":"Purpose"},{"location":"Guide/dialog_add_web_service/#how-to-open","text":"Click on the Tools > Web Services menu item.","title":"How to Open"},{"location":"Guide/dialogs_views_menus/","text":"Dialogs, Views, and Menus \u00b6 This section details the Rapise GUI. Each subsection describes the function of a particular Dialog, View, or Menu. The purpose and consequences of all buttons, options, lists, and check boxes are listed. A - I: Add Web Service Dialog Browser Settings Dialog Content View Create New Test Dialog Create Sub-Test Dialog Enter Filter Criteria For... Dialog Errors View Find and Replace Dialog Find Results View Find Text dialog Image Capture Incident Logging M - R: Manual Playback Manual Test Editor Main Menu Mobile Settings Dialog Mobile Test Locator Dialog NameValue Collection Editor Dialog NeoLoad Convertor Dialog NeoLoad Settings Dialog Object Tree View Options Dialog Output View Properties Dialog Recording Activity Dialog Replace Text Dialog Report Viewer REST Definition Editor RVL Editor S - Z: Scripting Choice Dialog Select an Application to Record... Dialog Selenium Settings Dialog Test Settings Dialog SOAP Definition Editor Source Editor Spira Dashboard Spira Properties Dialog Spreadsheet Editor Spy Dialog Start Page Test Files View Toolbar: REST Toolbar: SOAP Toolbar: Spreadsheet Variable/Call Stack View Verify Object Properties Dialog Warning View Watch View Web Spy Settings","title":"Dialogs, Views, and Menus"},{"location":"Guide/dialogs_views_menus/#dialogs-views-and-menus","text":"This section details the Rapise GUI. Each subsection describes the function of a particular Dialog, View, or Menu. The purpose and consequences of all buttons, options, lists, and check boxes are listed. A - I: Add Web Service Dialog Browser Settings Dialog Content View Create New Test Dialog Create Sub-Test Dialog Enter Filter Criteria For... Dialog Errors View Find and Replace Dialog Find Results View Find Text dialog Image Capture Incident Logging M - R: Manual Playback Manual Test Editor Main Menu Mobile Settings Dialog Mobile Test Locator Dialog NameValue Collection Editor Dialog NeoLoad Convertor Dialog NeoLoad Settings Dialog Object Tree View Options Dialog Output View Properties Dialog Recording Activity Dialog Replace Text Dialog Report Viewer REST Definition Editor RVL Editor S - Z: Scripting Choice Dialog Select an Application to Record... Dialog Selenium Settings Dialog Test Settings Dialog SOAP Definition Editor Source Editor Spira Dashboard Spira Properties Dialog Spreadsheet Editor Spy Dialog Start Page Test Files View Toolbar: REST Toolbar: SOAP Toolbar: Spreadsheet Variable/Call Stack View Verify Object Properties Dialog Warning View Watch View Web Spy Settings","title":"Dialogs, Views, and Menus"},{"location":"Guide/dll_testing/","text":"DLL Testing \u00b6 Purpose \u00b6 You can create objects and invoke methods from both managed and unmanaged dlls. Usage \u00b6 Rapise provides API calls to work with managed DLLs. The Windows object WScript can be used with unmanaged DLLs. Managed DLLs \u00b6 Util.InvokeMember - Invoke a class method in a managed DLL. Util.CreateClassInstance - Creates an instance of a class in a managed DLL. Util.SetFieldValue - Sets a field value in an object created with CreateClassInstance. Unmanaged DLLs \u00b6 WScript.CreateObject(\"DynamicWrapper\") - Create a DynamicWrapper object. The Register and ShellExecute methods of the DynamicWrapper object can be used to invoke DLL methods as in the following example: var UserWrap = WScript . CreateObject ( \"DynamicWrapper\" ); UserWrap . Register ( \"shell32.dll\" , \"ShellExecute\" , \"I=hssssl\" , \"f=s\" , \"r=l\" ); UserWrap . Register ( \"USER32.DLL\" , \"MessageBoxA\" , \"I=HsSu\" , \"f=s\" , \"R=l\" ); UserWrap . MessageBoxA ( null , \"\" + elapsed , \"Time Elapsed:\" , 0x30 ); Test Samples \u00b6 There are two test samples that illustrate working with DLLs: UsingDLLHandlerManaged UsingDLLHandlerUnManaged See Also \u00b6 More information on the WScript object","title":"DLL Testing"},{"location":"Guide/dll_testing/#dll-testing","text":"","title":"DLL Testing"},{"location":"Guide/dll_testing/#purpose","text":"You can create objects and invoke methods from both managed and unmanaged dlls.","title":"Purpose"},{"location":"Guide/dll_testing/#usage","text":"Rapise provides API calls to work with managed DLLs. The Windows object WScript can be used with unmanaged DLLs.","title":"Usage"},{"location":"Guide/dll_testing/#managed-dlls","text":"Util.InvokeMember - Invoke a class method in a managed DLL. Util.CreateClassInstance - Creates an instance of a class in a managed DLL. Util.SetFieldValue - Sets a field value in an object created with CreateClassInstance.","title":"Managed DLLs"},{"location":"Guide/dll_testing/#unmanaged-dlls","text":"WScript.CreateObject(\"DynamicWrapper\") - Create a DynamicWrapper object. The Register and ShellExecute methods of the DynamicWrapper object can be used to invoke DLL methods as in the following example: var UserWrap = WScript . CreateObject ( \"DynamicWrapper\" ); UserWrap . Register ( \"shell32.dll\" , \"ShellExecute\" , \"I=hssssl\" , \"f=s\" , \"r=l\" ); UserWrap . Register ( \"USER32.DLL\" , \"MessageBoxA\" , \"I=HsSu\" , \"f=s\" , \"R=l\" ); UserWrap . MessageBoxA ( null , \"\" + elapsed , \"Time Elapsed:\" , 0x30 );","title":"Unmanaged DLLs"},{"location":"Guide/dll_testing/#test-samples","text":"There are two test samples that illustrate working with DLLs: UsingDLLHandlerManaged UsingDLLHandlerUnManaged","title":"Test Samples"},{"location":"Guide/dll_testing/#see-also","text":"More information on the WScript object","title":"See Also"},{"location":"Guide/do_absolute_analog_recording/","text":"Do Absolute Analog Recording \u00b6 Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording. Run the TwoDialogs sample AUT \u00b6 By default this will be located in the 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe location. Create New Test \u00b6 Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute . Start Recording \u00b6 Press the Record button in the toolbar of Rapise. Select an Application to Record \u00b6 When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. Press the Select button. The Recording Activity Dialog \u00b6 The Recording Activity Dialog will be displayed with an empty grid. This recording session is going o be a little different from previous sessions. Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. However, note also that screen contents are not recorded by Rapise. Bring the Application To Front \u00b6 If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording. Start Analog Recording \u00b6 When you're ready to record the session, hit Ctrl + 4 on the Recording Activity dialog. You will need to click on the Advanced button to display the Analog button. Note: Pressing the Analog button on the Recording Activity dialog starts a relative analog recording session. Use the Ctrl + 4 key sequence to start the absolute analog recording session. Rapise will begin recording all mouse and keyboard activity until you stop the recording. Note also that the prompt in the notification/status area of the Recording Activity dialog is different from that for relative analog. It tells you that Your mouse and keyboard activity is now being recorded. Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording. Do Analog Recording \u00b6 Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording. Click the mouse on the empty \"Please enter your name\" text box. Type a name in the text box. Hit the TAB key or click the left mouse button to advance the input position to the second text box. Type another name. Move the mouse to the OK button and press the mouse left button. Stop Analog Recording \u00b6 When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl + Break . Note: If you use the Close button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the Close button will be recorded as part of the analog recording output. This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. For this reason, Ctrl + Break is probably a better option to terminate analog recording. Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid. Optional Steps \u00b6 You can now record additional analog sessions, if you wish. You can record normal object activity before and/or after the analog recording. Stop Recording \u00b6 When you have finished all recording press the Finish button or hit Ctrl + 3 . Notice that the Analog entry is added to the grid. The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with TwoDialogsAnalogAbsolute.js script displayed. You should see code something like the following: //Plays recorded events from \"Analog\\\\Analog0003.arf\" file SeS ( 'Simulated' ). DoAnalogPlay ( \"Analog\\\\\\\\Analog0003.arf\" ); Playback \u00b6 Press the Play button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back. Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog or at the last action before you pressed Ctrl + Break . When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. Play the recording again, and watch the operation unfold. The most important thing to realize is that the absolute analog recording will playback the recording wherever the application is positioned on the screen wherever the AUT was positioned when you made the recording. Absolute analog recording records relative to the top-left corner of the system screen. Try this for yourself, but be sure to minimize all applications before starting. See Also \u00b6 How-Tos","title":"Do Absolute Analog Recording"},{"location":"Guide/do_absolute_analog_recording/#do-absolute-analog-recording","text":"Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording.","title":"Do Absolute Analog Recording"},{"location":"Guide/do_absolute_analog_recording/#run-the-twodialogs-sample-aut","text":"By default this will be located in the 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe location.","title":"Run the TwoDialogs sample AUT"},{"location":"Guide/do_absolute_analog_recording/#create-new-test","text":"Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute .","title":"Create New Test"},{"location":"Guide/do_absolute_analog_recording/#start-recording","text":"Press the Record button in the toolbar of Rapise.","title":"Start Recording"},{"location":"Guide/do_absolute_analog_recording/#select-an-application-to-record","text":"When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. Press the Select button.","title":"Select an Application to Record"},{"location":"Guide/do_absolute_analog_recording/#the-recording-activity-dialog","text":"The Recording Activity Dialog will be displayed with an empty grid. This recording session is going o be a little different from previous sessions. Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. However, note also that screen contents are not recorded by Rapise.","title":"The Recording Activity Dialog"},{"location":"Guide/do_absolute_analog_recording/#bring-the-application-to-front","text":"If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording.","title":"Bring the Application To Front"},{"location":"Guide/do_absolute_analog_recording/#start-analog-recording","text":"When you're ready to record the session, hit Ctrl + 4 on the Recording Activity dialog. You will need to click on the Advanced button to display the Analog button. Note: Pressing the Analog button on the Recording Activity dialog starts a relative analog recording session. Use the Ctrl + 4 key sequence to start the absolute analog recording session. Rapise will begin recording all mouse and keyboard activity until you stop the recording. Note also that the prompt in the notification/status area of the Recording Activity dialog is different from that for relative analog. It tells you that Your mouse and keyboard activity is now being recorded. Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording.","title":"Start Analog Recording"},{"location":"Guide/do_absolute_analog_recording/#do-analog-recording","text":"Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording. Click the mouse on the empty \"Please enter your name\" text box. Type a name in the text box. Hit the TAB key or click the left mouse button to advance the input position to the second text box. Type another name. Move the mouse to the OK button and press the mouse left button.","title":"Do Analog Recording"},{"location":"Guide/do_absolute_analog_recording/#stop-analog-recording","text":"When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl + Break . Note: If you use the Close button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the Close button will be recorded as part of the analog recording output. This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. For this reason, Ctrl + Break is probably a better option to terminate analog recording. Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid.","title":"Stop Analog Recording"},{"location":"Guide/do_absolute_analog_recording/#optional-steps","text":"You can now record additional analog sessions, if you wish. You can record normal object activity before and/or after the analog recording.","title":"Optional Steps"},{"location":"Guide/do_absolute_analog_recording/#stop-recording","text":"When you have finished all recording press the Finish button or hit Ctrl + 3 . Notice that the Analog entry is added to the grid. The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with TwoDialogsAnalogAbsolute.js script displayed. You should see code something like the following: //Plays recorded events from \"Analog\\\\Analog0003.arf\" file SeS ( 'Simulated' ). DoAnalogPlay ( \"Analog\\\\\\\\Analog0003.arf\" );","title":"Stop Recording"},{"location":"Guide/do_absolute_analog_recording/#playback","text":"Press the Play button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back. Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog or at the last action before you pressed Ctrl + Break . When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. Play the recording again, and watch the operation unfold. The most important thing to realize is that the absolute analog recording will playback the recording wherever the application is positioned on the screen wherever the AUT was positioned when you made the recording. Absolute analog recording records relative to the top-left corner of the system screen. Try this for yourself, but be sure to minimize all applications before starting.","title":"Playback"},{"location":"Guide/do_absolute_analog_recording/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/do_relative_analog_recording/","text":"Do Relative Analog Recording \u00b6 Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording. Run the TwoDialogs sample AUT \u00b6 By default this will be located in the 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe location. Create New Test \u00b6 Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute . Start Recording \u00b6 Press the Record button in the toolbar of Rapise. Select an Application to Record \u00b6 When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. Press the Select button. The Recording Activity Dialog \u00b6 The Recording Activity Dialog will be displayed with an empty grid. This recording session is going o be a little different from previous sessions. Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. However, note also that screen contents are not recorded by Rapise. Bring the Application To Front \u00b6 If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording. Start Analog Recording \u00b6 When you're ready to record the session, hit the Analog button on the Recording Activity dialog. Note: The key sequence Ctrl + 4 starts an absolute analog recording session. Press the Analog button to start the relative analog recording session. When you press the Analog button, two things will happen. Firstly, the status bar of the Recording Activity dialog will change to read, Click on object to start analog recording. After the next mouse click, Rapise is recording all mouse and keyboard activity until you stop the recording. Secondly, Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording. Do Analog Recording \u00b6 Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording. Click the mouse on the empty \"Please enter your name\" text box. Type a name in the text box. Hit the Tab key or click the left mouse button to advance the input position to the second text box. Type another name. Move the mouse to the OK button and press the mouse left button. Stop Analog Recording \u00b6 When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl + Break . Note: If you use the Close button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the Close button will be recorded as part of the analog recording output. This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. For this reason, Ctrl + Break is probably a better option to terminate analog recording. Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid. Optional Steps \u00b6 You can now record additional analog sessions, if you wish. You can record normal object activity before and/or after the analog recording. Stop Recording \u00b6 When you have finished all recording press the Finish button or hit Ctrl + 3 . Notice that the Analog entry is added to the grid. The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with TwoDialogsAnalogAbsolute.js script displayed. You should see code something like the following: //Plays recorded events from \"Analog\\\\Analog0003.arf\" file SeS ( 'Simulated' ). DoAnalogPlay ( \"Analog\\\\\\\\Analog0003.arf\" ); Playback \u00b6 Press the Play button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back. Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog. If you used Ctrl + Break to end the recording then the last recorded activity will be the one that keystroke. When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. Play the recording again, and watch the operation unfold. The most important thing to realize is that the relative analog recording will playback the recording wherever the application is positioned on the screen. This is because you used relative analog recording. However, once the recording within the AUT is complete, all mouse motion and keyboard strokes are relative to the current position of the AUT. Suppose that during analog recording, you click the OK button in TwoDialogs.exe, then move the mouse to terminate the recording using the analog recording Close button. Now, prior to playback, you move the AUT to a different location on the screen and hit playback. All the activity within the AUT will be faithfully reproduced. However, the mouse motion outside the AUT will be relative to the position, so the following activities will not be accurately reproduced. Try this for yourself, but be sure to minimize all applications before starting so you don't cause mouse events where they will do harm to other applications on the screen. See Also \u00b6 How-Tos","title":"Do Relative Analog Recording"},{"location":"Guide/do_relative_analog_recording/#do-relative-analog-recording","text":"Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording.","title":"Do Relative Analog Recording"},{"location":"Guide/do_relative_analog_recording/#run-the-twodialogs-sample-aut","text":"By default this will be located in the 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe location.","title":"Run the TwoDialogs sample AUT"},{"location":"Guide/do_relative_analog_recording/#create-new-test","text":"Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute .","title":"Create New Test"},{"location":"Guide/do_relative_analog_recording/#start-recording","text":"Press the Record button in the toolbar of Rapise.","title":"Start Recording"},{"location":"Guide/do_relative_analog_recording/#select-an-application-to-record","text":"When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. Press the Select button.","title":"Select an Application to Record"},{"location":"Guide/do_relative_analog_recording/#the-recording-activity-dialog","text":"The Recording Activity Dialog will be displayed with an empty grid. This recording session is going o be a little different from previous sessions. Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. However, note also that screen contents are not recorded by Rapise.","title":"The Recording Activity Dialog"},{"location":"Guide/do_relative_analog_recording/#bring-the-application-to-front","text":"If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording.","title":"Bring the Application To Front"},{"location":"Guide/do_relative_analog_recording/#start-analog-recording","text":"When you're ready to record the session, hit the Analog button on the Recording Activity dialog. Note: The key sequence Ctrl + 4 starts an absolute analog recording session. Press the Analog button to start the relative analog recording session. When you press the Analog button, two things will happen. Firstly, the status bar of the Recording Activity dialog will change to read, Click on object to start analog recording. After the next mouse click, Rapise is recording all mouse and keyboard activity until you stop the recording. Secondly, Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording.","title":"Start Analog Recording"},{"location":"Guide/do_relative_analog_recording/#do-analog-recording","text":"Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording. Click the mouse on the empty \"Please enter your name\" text box. Type a name in the text box. Hit the Tab key or click the left mouse button to advance the input position to the second text box. Type another name. Move the mouse to the OK button and press the mouse left button.","title":"Do Analog Recording"},{"location":"Guide/do_relative_analog_recording/#stop-analog-recording","text":"When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl + Break . Note: If you use the Close button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the Close button will be recorded as part of the analog recording output. This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. For this reason, Ctrl + Break is probably a better option to terminate analog recording. Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid.","title":"Stop Analog Recording"},{"location":"Guide/do_relative_analog_recording/#optional-steps","text":"You can now record additional analog sessions, if you wish. You can record normal object activity before and/or after the analog recording.","title":"Optional Steps"},{"location":"Guide/do_relative_analog_recording/#stop-recording","text":"When you have finished all recording press the Finish button or hit Ctrl + 3 . Notice that the Analog entry is added to the grid. The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with TwoDialogsAnalogAbsolute.js script displayed. You should see code something like the following: //Plays recorded events from \"Analog\\\\Analog0003.arf\" file SeS ( 'Simulated' ). DoAnalogPlay ( \"Analog\\\\\\\\Analog0003.arf\" );","title":"Stop Recording"},{"location":"Guide/do_relative_analog_recording/#playback","text":"Press the Play button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back. Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog. If you used Ctrl + Break to end the recording then the last recorded activity will be the one that keystroke. When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. Play the recording again, and watch the operation unfold. The most important thing to realize is that the relative analog recording will playback the recording wherever the application is positioned on the screen. This is because you used relative analog recording. However, once the recording within the AUT is complete, all mouse motion and keyboard strokes are relative to the current position of the AUT. Suppose that during analog recording, you click the OK button in TwoDialogs.exe, then move the mouse to terminate the recording using the analog recording Close button. Now, prior to playback, you move the AUT to a different location on the screen and hit playback. All the activity within the AUT will be faithfully reproduced. However, the mouse motion outside the AUT will be relative to the position, so the following activities will not be accurately reproduced. Try this for yourself, but be sure to minimize all applications before starting so you don't cause mouse events where they will do harm to other applications on the screen.","title":"Playback"},{"location":"Guide/do_relative_analog_recording/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/dynamics_365/","text":"Dynamics 365 for Finance and Operations \u00b6 Overview \u00b6 Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365 . This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations) and an updated Microsoft Dynamics CRM Online. This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based. There are two main modules that Rapise has specialized support for: Dynamics 365 for Finance and Operations \u2013 this is the subject of this section, please read on if you are testing these modules. Dynamics 365 for Sales \u2013 this is a rebrand of Dynamics CRM and is covered in corresponding section . Recording a Test \u00b6 Dynamics 365 for Finance and Operations is completely web-based (unlike Dynamics AX) and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests: Most of the Dynamics 365 user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside Dynamics 365 that Rapise has specialized support for. For that reason you'll also see the DomDynamicsAx library added to your test as well as the browser one. This DomDynamicsAx library adds additional rules that identify certain Dynamics 365 objects to make testing easier. When you record your first test, you'll see the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g_browserLibrary:Internet Explorer HTML%\" , \"DomDynamicsAx\" ]; If you don\u2019t see the DomDynamicsAx library listed in your test, then you will need to manually add it . Recording and Learning Objects \u00b6 During recording while you interact with Dynamics 365, Rapise captures objects and displays them in the object tree : Some of these objects will be standard HTML DOM objects (e.g. button): and others will be specific to Dynamics 365: Tips for Interacting with Objects \u00b6 One of the most important UI elements inside Dynamics 365 is the multi-level menu bar: The Dynamics 365 menu bar is used to quickly and easily navigate between different parts of the application and it is very common to need to interact with it in test scripts. Learn the menu using Ctrl + 2 on the menu open button: Rapise will learn the DomDynamicsAXMenuBar object: In additional to the standard HTML object methods and properties, you have the special functions that you can perform on the menu : DoMenu(path, separator) \u2013 selects the menu entries in specified path, using the specified separator (or semicolon if none specified). Here is a sample test that was recorded using Dynamics 365 for Finance and Operations and Rapise. RVL JavaScript function Test ( params ) { Navigator . Open ( \"https://d365oef0aab7797234d85aos.cloudax.dynamics.com/?cmp=DAT&mi=DefaultDashboard\" ); SeS ( 'DAT' ). DoClick (); SeS ( 'SysCompanyChooser_DataArea_id' ). DoOpen (); SeS ( 'SysCompanyChooserLookup_Grid' ). DoClickCell ( \"USPI\" , 1 ); SeS ( 'NavigationSearchBox' ). DoClick (); SeS ( 'NavigationSearchBox' ). DoClick (); SeS ( 'NavigationSearchBox' ). DoSearch ( \"purchase orders\" ); SeS ( '_New' ). DoClick (); SeS ( 'PurchCreateOrder_PurchTable_Orde' ). DoOpen (); SeS ( 'VendTable_SysTL_Grid' ). DoClickCell ( \"Contoso Chemicals Japan\" , \"Name\" ); SeS ( 'PurchCreateOrder_PurchTable_Inve' ). DoEnsureVisible (); SeS ( 'PurchCreateOrder_PurchTable_Inve' ). DoOpen (); SeS ( 'InventLocationIdLookup_GridInven' ). DoClickCell ( \"Ingredients - Cleaners\" , \"Name\" ); SeS ( 'OK' ). DoClick (); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Item number\" ); SeS ( 'InventItemIdLookupPurchase_Grid' ). DoClickCell ( \"SodiumHydroxide\" , \"Search name\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Unit\" ); SeS ( 'UnitOfMeasureLookup_GridConverti' ). DoClickCell ( \"kilogram\" , \"Translated description\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Quantity\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoSetText ( \"5\" ); SeS ( 'Add_line' ). DoEnsureVisible (); SeS ( 'Add_line' ). DoClick (); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 1 , \"Item number\" ); SeS ( 'InventItemIdLookupPurchase_Grid' ). DoClickCell ( \"OleicAcid\" , \"Search name\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 1 , \"Quantity\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoSetText ( \"3\" ); SeS ( 'Save' ). DoClick (); } g_load_libraries = [ \"%g_browserLibrary:Chrome HTML%\" , \"DomDynamicsAX\" ]; See Also \u00b6 Microsoft Dynamics Get the framework for testing Dynamics 365 for Operations (github) Demo: How to Create a PO in Microsoft Dynamics 365 for Operations Webinar: Testing Microsoft Dynamics 365 for Operations with Rapise","title":"Dynamics 365 for Operations"},{"location":"Guide/dynamics_365/#dynamics-365-for-finance-and-operations","text":"","title":"Dynamics 365 for Finance and Operations"},{"location":"Guide/dynamics_365/#overview","text":"Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365 . This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations) and an updated Microsoft Dynamics CRM Online. This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based. There are two main modules that Rapise has specialized support for: Dynamics 365 for Finance and Operations \u2013 this is the subject of this section, please read on if you are testing these modules. Dynamics 365 for Sales \u2013 this is a rebrand of Dynamics CRM and is covered in corresponding section .","title":"Overview"},{"location":"Guide/dynamics_365/#recording-a-test","text":"Dynamics 365 for Finance and Operations is completely web-based (unlike Dynamics AX) and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests: Most of the Dynamics 365 user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside Dynamics 365 that Rapise has specialized support for. For that reason you'll also see the DomDynamicsAx library added to your test as well as the browser one. This DomDynamicsAx library adds additional rules that identify certain Dynamics 365 objects to make testing easier. When you record your first test, you'll see the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g_browserLibrary:Internet Explorer HTML%\" , \"DomDynamicsAx\" ]; If you don\u2019t see the DomDynamicsAx library listed in your test, then you will need to manually add it .","title":"Recording a Test"},{"location":"Guide/dynamics_365/#recording-and-learning-objects","text":"During recording while you interact with Dynamics 365, Rapise captures objects and displays them in the object tree : Some of these objects will be standard HTML DOM objects (e.g. button): and others will be specific to Dynamics 365:","title":"Recording and Learning Objects"},{"location":"Guide/dynamics_365/#tips-for-interacting-with-objects","text":"One of the most important UI elements inside Dynamics 365 is the multi-level menu bar: The Dynamics 365 menu bar is used to quickly and easily navigate between different parts of the application and it is very common to need to interact with it in test scripts. Learn the menu using Ctrl + 2 on the menu open button: Rapise will learn the DomDynamicsAXMenuBar object: In additional to the standard HTML object methods and properties, you have the special functions that you can perform on the menu : DoMenu(path, separator) \u2013 selects the menu entries in specified path, using the specified separator (or semicolon if none specified). Here is a sample test that was recorded using Dynamics 365 for Finance and Operations and Rapise. RVL JavaScript function Test ( params ) { Navigator . Open ( \"https://d365oef0aab7797234d85aos.cloudax.dynamics.com/?cmp=DAT&mi=DefaultDashboard\" ); SeS ( 'DAT' ). DoClick (); SeS ( 'SysCompanyChooser_DataArea_id' ). DoOpen (); SeS ( 'SysCompanyChooserLookup_Grid' ). DoClickCell ( \"USPI\" , 1 ); SeS ( 'NavigationSearchBox' ). DoClick (); SeS ( 'NavigationSearchBox' ). DoClick (); SeS ( 'NavigationSearchBox' ). DoSearch ( \"purchase orders\" ); SeS ( '_New' ). DoClick (); SeS ( 'PurchCreateOrder_PurchTable_Orde' ). DoOpen (); SeS ( 'VendTable_SysTL_Grid' ). DoClickCell ( \"Contoso Chemicals Japan\" , \"Name\" ); SeS ( 'PurchCreateOrder_PurchTable_Inve' ). DoEnsureVisible (); SeS ( 'PurchCreateOrder_PurchTable_Inve' ). DoOpen (); SeS ( 'InventLocationIdLookup_GridInven' ). DoClickCell ( \"Ingredients - Cleaners\" , \"Name\" ); SeS ( 'OK' ). DoClick (); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Item number\" ); SeS ( 'InventItemIdLookupPurchase_Grid' ). DoClickCell ( \"SodiumHydroxide\" , \"Search name\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Unit\" ); SeS ( 'UnitOfMeasureLookup_GridConverti' ). DoClickCell ( \"kilogram\" , \"Translated description\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 0 , \"Quantity\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoSetText ( \"5\" ); SeS ( 'Add_line' ). DoEnsureVisible (); SeS ( 'Add_line' ). DoClick (); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 1 , \"Item number\" ); SeS ( 'InventItemIdLookupPurchase_Grid' ). DoClickCell ( \"OleicAcid\" , \"Search name\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoClickCell ( 1 , \"Quantity\" ); SeS ( 'purchtablelistpageopen_LineSpec' ). DoSetText ( \"3\" ); SeS ( 'Save' ). DoClick (); } g_load_libraries = [ \"%g_browserLibrary:Chrome HTML%\" , \"DomDynamicsAX\" ];","title":"Tips for Interacting with Objects"},{"location":"Guide/dynamics_365/#see-also","text":"Microsoft Dynamics Get the framework for testing Dynamics 365 for Operations (github) Demo: How to Create a PO in Microsoft Dynamics 365 for Operations Webinar: Testing Microsoft Dynamics 365 for Operations with Rapise","title":"See Also"},{"location":"Guide/dynamics_ax/","text":"Dynamics AX \u00b6 Overview \u00b6 Microsoft Dynamics AX (usually referred to as just AX ) - is an ERP system for mid-size to large enterprises. It is the most robust, scalable, and functionally rich enterprise resource planning system in the Microsoft Dynamics family of products. The system was originally known as Axapta, owned by the Danish software company Damgaard. Dynamics AX consists of a client-server architecture with a thick-client ERP interface for entering/adding data in the system: Rapise includes specialized libraries for testing Dynamics AX applications that are built-upon the standard Microsoft Windows UIAutomation library with special extensions for handling unique AX controls such as tree views, the navigation explorer and the various grids used to edit data. In addition Rapise can test the following extensions to Dynamics AX: Dynamics AX Management Reporter - Rapise can test this extension using its Generic Windows library . Dynamics AX Web Portals - Rapise can test the various web portals using its web browser libraries . Start Recording a New Test \u00b6 First you need to create a new Basic test and start recording session. Choose Dynamics AX from the list of applications: Then press Select button to start recording. Rapise will automatically plug the UIAutomation and DynamicsAX libraries. Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. DynamicsAX library supports set of controls specific to Microsoft Dynamics AX 2012 application. When recording is completed you can see attached libraries in the code of Main.js file: g_load_libraries = [ \"UIAutomation\" , \"DynamicsAX\" ]; Automatic Adjustment of Window Title Object Property \u00b6 Main window title of Dynamics AX is dynamic by nature. It contains not only application name but also domain and AOS information and session Id. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression in object properties. Here it is: 1 regex:.Microsoft Dynamics AX.* So recorded object properties automatically adjusted as Also Rapise automatically sets Record Title in test settings to the same regular expression so you do not need to choose the Dynamics AX main window during subsequent recording sessions. Titles of Child Windows \u00b6 Child windows of Dynamics AX also may have dynamic titles. Rapise does not know all the available patterns, so for child windows you need to write regular expressions yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the window title property automatically. In other words when Rapise learns a new object and it's window title is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression. Object Location \u00b6 Object location property has the form of 1 id1/id2/id3... where ids refer to parent objects along the path to the top window object. Sometimes such ids also can be dynamic, e.g.: 1 Dimensions display (1 - k13) - Sales order: S30014323, CE15P, Sales order: S30014323/InventDimParmFixed/Pane/View/Style In this case change dynamic parts by corresponding regular expressions. In the above example updated location looks like: 1 regex:Dimensions display.*/InventDimParmFixed/Pane/View/Style Here is updated location in the property grid: How to Launch Dynamics AX Client \u00b6 If in your test you want to check that Dynamics AX application is installed and running place this function into User.js : function DynamicsAXLaunch () { function _DaxIsRunning () { var windows = g_util . FindWindows ( \"regex:.Microsoft Dynamics AX.*\" , \"AxMainFrame\" ); return windows . length > 0 ; } if ( _DaxIsRunning ()) { Tester . Message ( \"Dynamics AX Client is already running\" ); return true ; } var fso = new ActiveXObject ( \"Scripting.FileSystemObject\" ); var pfFolder = Global . GetSpecialFolderPath ( \"ProgramFilesX86\" ); var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics AX\\\\60\\\\Client\\\\Bin\\\\Ax32.exe\" if ( ! fso . FileExists ( dynamicsPath )) { Tester . Message ( \"Dynamics AX Client is not installed on this computer\" ); return false ; } Global . DoLaunch ( dynamicsPath ); for ( var i = 0 ; i < 60 ; i ++ ) { if ( _DaxIsRunning ()) { Tester . Message ( \"Dynamics AX Client started successfully\" ); return true ; } Global . DoSleep ( 1000 ); } Tester . Message ( \"Dynamics AX Client did not start\" ); return false ; } You can now use this function in RVL and in JavaScript: DynamicsAXLaunch (); Recording Actions and Learning Objects \u00b6 During recording while you interact with Dynamics AX controls Rapise captures actions and displays them in the recording dialog. When recording is finished Rapise automatically generates the test. In Rapise Visual Language(RVL) it looks like In JavaScript: function Test ( params ) { DynamicsAXLaunch (); SeS ( 'AddressBarContainer' ). DoSetText ( \"DAT/Retail essentials/Area page\" ); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Customers\" ); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Customers;All customers\" ); SeS ( '_New' ). DoMenu ( \"Customer\" ); SeS ( 'Customer_account' ). DoClick (); SeS ( 'Customer_account' ). DoSetText ( \"Google\" ); SeS ( 'Name' ). DoClick (); SeS ( 'Name' ). DoSetText ( \"Google\" ); SeS ( 'Customer_group' ). DoClick (); SeS ( 'Add' ). DoClick (); SeS ( 'Customer_group' ). DoClick (); SeS ( 'Customer_group_lookup_button' ). DoClick (); SeS ( 'Grid' ). DoClickCell ( \"SOFTWARE\" , \"Customer group\" ); SeS ( 'Save_and_close' ). DoClick (); SeS ( 'List' ). DoMenu ( \"Refresh\" ); SeS ( 'ListPageGrid' ). DoClickCell ( \"Google\" , \"Name\" ); SeS ( 'Maintain' ). DoMenu ( \"Delete\" ); SeS ( 'Yes' ). DoClick (); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Area page\" ); SeS ( 'TabControl' ). DoSelectTab ( \"Home\" ); } If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl + 2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. Pause/Resume button is located at the right side of the Recording Activity dialog . Tips for Interacting with Objects \u00b6 Text Box \u00b6 To allow Rapise to capture the entered text interact with a text box in two steps: Click into the edit box Type text using keyboard ComboBox \u00b6 Dynamics AX has several types of combo boxes. Standard Combo Box \u00b6 Standard combo box like Worker type in the Hire New Worker form. Rapise treats such combo boxes as atomic objects abd records them as DynamicsAXComboBox . To record interaction with the combo box Click on the combo box to expand the dropwdown with choices Select a value from the list Generated script step looks like: RVL JavaScript SeS ( 'Worker_type' ). DoSelectItem ( \"Employee\" ); Table Filter Combo \u00b6 Table filter combo is recognized as a pair of objects: Scope and DropDown . The Scope is of type DynamicsAXMenuItem and used to open the DropDown of type DynamicsAXMenuDropDownList . Recorded steps look like: RVL JavaScript //User clicks 'Scope' SeS ( 'Scope' ). DoClick (); //DropDown item selected:'Search name' SeS ( 'DropDown' ). DoSelectItem ( \"Search name\" ); Lookup Field \u00b6 Lookup field consists of an edit box, open button and a dropdown table. Record lookup interactions in three steps: Click the edit field. Recorded as DynamicsAXTextBox . Click the open button. Recorded as UIAObject . Click the value in the dropdown grid. Recorded as DynamicsAXTable . RVL JavaScript // Click on the edit box SeS ( 'Customer_group' ). DoClick (); // Click open button SeS ( 'Customer_group_lookup_button' ). DoClick (); // Select value from the dropdown grid using column name (Customer group) and value (SOFTWARE) SeS ( 'Grid' ). DoClickCell ( \"SOFTWARE\" , \"Customer group\" ); Address Bar \u00b6 Click in empty area of the address bar and enter the address where you want to navigate. Rapise will capture DynamicsAXAddressBar object and record DoSetText action. RVL JavaScript SeS ( 'AddressBarContainer' ). DoSetText ( 'DAT/Retail essentials/Employees/Users' ); Menu \u00b6 Rapise supports both recording and learning of the main menu. When recording make sure you click on every component along the path. E.g. you want to navigate to File > View > Modules > General ledger . During recording click on File , View , Modules and General ledger . Captured menu object has type DynamicsAXMenu . Generated script looks like: RVL JavaScript //Menu item selected:'General ledger' SeS ( 'File' ). DoMenu ( \"File;View;Modules;General ledger\" ); Rapise captures menu as top level object ( File in the example above). Notice that menu path components are separated with ; . If you want for example to open menu File > Tools > Telephone list then use File;Tools;Telephone list as path parameter. Table \u00b6 Rapise recognizes Dynamics AX grids as DynamicsAXTable When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like: RVL JavaScript SeS ( 'ListPageGrid' ). DoClickCell ( \"Contoso Retail Chicago\" , \"Name\" ); Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check DynamicsAXTable for more details. Infolog \u00b6 In some case Dynamics AX can report an error using Infolog window. To obtain text of the messages in this window learn the Tree object - place cursor over the error text and press Ctrl + 2 shortcut. The object is learned as UIATree . In the case of infolog tree - all nodes are immediate children of the root. So in the example shown on the image above the tree contains two child nodes of the tree node. To get the number of messages and read individual messages use GetChildrenCount and GetChildAt actions of UIATree . RVL JavaScript // Get the number of messages in the infolog. // For the presented example it returns 2. var messageCount = SeS ( 'InfologTree' ). GetChildrenCount (); // Get second message text, returns \"Field 'User ID' must be filled in.\" var messageText = SeS ( 'Tree' ). GetChildAt ( 0 , 1 ); Type to filter Field \u00b6 Almost each standard grid in Dynamics AX has a text field for filtering grid data. When you learn this field it has a name Type to filter . However when this field gets focus it's name changes to Text box . To enable Rapise to find this field during playback set Ignore Object Name property of the object to True . Dynamics AX Cook Book \u00b6 Maximize/Minimize/Restore Window \u00b6 You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id AddressBarContainer . First place the following code into your User.js : function MaximizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = true ; } function MinimizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = false ; } function RestoreWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Iconic = false ; } Now you can use these functions in RVL and JavaScript. RVL JavaScript MaximizeWindow ( \"AddressBarContainer\" ); RestoreWindow ( \"AddressBarContainer\" ); MinimizeWindow ( \"AddressBarContainer\" ); Scroll to the Bottom of a Grid \u00b6 If your grid looks like this and you want to scroll to the last record of it learn the Last Record button and click on it during test playback. RVL JavaScript SeS ( 'Last_Record' ). DoClick (); Scroll and Click on a Cell in a Grid \u00b6 If you know the value of a cell in a grid then Rapise will automatically scroll the grid before click. Assume that you want to click on a cell with value Alen Shen in a column Search name . This cell is not visible on the picture and requires scrolling to show up. The following script performs the click: RVL JavaScript SeS ( 'CustomerGrid' ). DoClickCell ( \"Alen Shen\" , \"Search name\" ); If you do not know the value of a cell you can get it this way RVL JavaScript var cellValue = SeS ( 'CustomerGrid' ). GetCell ( 9 , \"Search name\" ); Tester . Message ( cellValue ); Where 9 is row number. See Also \u00b6 Microsoft Dynamics Get the framework for testing Dynamics AX (github) KB: If recording of actions in Dynamics AX or Dynamics NAV does not work KB: Creating a Purchase Order in Dynamics AX KB: Rapise Tips, Tricks & Workarounds when Testing Dynamics AX 2012 KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX KB378 RPA - importing data into Dynamics AX Webinar: Testing Microsoft Dynamics AX with Rapise Webinar: Test Automation & RPA for Dynamics AX with Rapise Dynamics AX Sample Tests with source and recording/playback video links","title":"Dynamics AX"},{"location":"Guide/dynamics_ax/#dynamics-ax","text":"","title":"Dynamics AX"},{"location":"Guide/dynamics_ax/#overview","text":"Microsoft Dynamics AX (usually referred to as just AX ) - is an ERP system for mid-size to large enterprises. It is the most robust, scalable, and functionally rich enterprise resource planning system in the Microsoft Dynamics family of products. The system was originally known as Axapta, owned by the Danish software company Damgaard. Dynamics AX consists of a client-server architecture with a thick-client ERP interface for entering/adding data in the system: Rapise includes specialized libraries for testing Dynamics AX applications that are built-upon the standard Microsoft Windows UIAutomation library with special extensions for handling unique AX controls such as tree views, the navigation explorer and the various grids used to edit data. In addition Rapise can test the following extensions to Dynamics AX: Dynamics AX Management Reporter - Rapise can test this extension using its Generic Windows library . Dynamics AX Web Portals - Rapise can test the various web portals using its web browser libraries .","title":"Overview"},{"location":"Guide/dynamics_ax/#start-recording-a-new-test","text":"First you need to create a new Basic test and start recording session. Choose Dynamics AX from the list of applications: Then press Select button to start recording. Rapise will automatically plug the UIAutomation and DynamicsAX libraries. Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. DynamicsAX library supports set of controls specific to Microsoft Dynamics AX 2012 application. When recording is completed you can see attached libraries in the code of Main.js file: g_load_libraries = [ \"UIAutomation\" , \"DynamicsAX\" ];","title":"Start Recording a New Test"},{"location":"Guide/dynamics_ax/#automatic-adjustment-of-window-title-object-property","text":"Main window title of Dynamics AX is dynamic by nature. It contains not only application name but also domain and AOS information and session Id. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression in object properties. Here it is: 1 regex:.Microsoft Dynamics AX.* So recorded object properties automatically adjusted as Also Rapise automatically sets Record Title in test settings to the same regular expression so you do not need to choose the Dynamics AX main window during subsequent recording sessions.","title":"Automatic Adjustment of Window Title Object Property"},{"location":"Guide/dynamics_ax/#titles-of-child-windows","text":"Child windows of Dynamics AX also may have dynamic titles. Rapise does not know all the available patterns, so for child windows you need to write regular expressions yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the window title property automatically. In other words when Rapise learns a new object and it's window title is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression.","title":"Titles of Child Windows"},{"location":"Guide/dynamics_ax/#object-location","text":"Object location property has the form of 1 id1/id2/id3... where ids refer to parent objects along the path to the top window object. Sometimes such ids also can be dynamic, e.g.: 1 Dimensions display (1 - k13) - Sales order: S30014323, CE15P, Sales order: S30014323/InventDimParmFixed/Pane/View/Style In this case change dynamic parts by corresponding regular expressions. In the above example updated location looks like: 1 regex:Dimensions display.*/InventDimParmFixed/Pane/View/Style Here is updated location in the property grid:","title":"Object Location"},{"location":"Guide/dynamics_ax/#how-to-launch-dynamics-ax-client","text":"If in your test you want to check that Dynamics AX application is installed and running place this function into User.js : function DynamicsAXLaunch () { function _DaxIsRunning () { var windows = g_util . FindWindows ( \"regex:.Microsoft Dynamics AX.*\" , \"AxMainFrame\" ); return windows . length > 0 ; } if ( _DaxIsRunning ()) { Tester . Message ( \"Dynamics AX Client is already running\" ); return true ; } var fso = new ActiveXObject ( \"Scripting.FileSystemObject\" ); var pfFolder = Global . GetSpecialFolderPath ( \"ProgramFilesX86\" ); var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics AX\\\\60\\\\Client\\\\Bin\\\\Ax32.exe\" if ( ! fso . FileExists ( dynamicsPath )) { Tester . Message ( \"Dynamics AX Client is not installed on this computer\" ); return false ; } Global . DoLaunch ( dynamicsPath ); for ( var i = 0 ; i < 60 ; i ++ ) { if ( _DaxIsRunning ()) { Tester . Message ( \"Dynamics AX Client started successfully\" ); return true ; } Global . DoSleep ( 1000 ); } Tester . Message ( \"Dynamics AX Client did not start\" ); return false ; } You can now use this function in RVL and in JavaScript: DynamicsAXLaunch ();","title":"How to Launch Dynamics AX Client"},{"location":"Guide/dynamics_ax/#recording-actions-and-learning-objects","text":"During recording while you interact with Dynamics AX controls Rapise captures actions and displays them in the recording dialog. When recording is finished Rapise automatically generates the test. In Rapise Visual Language(RVL) it looks like In JavaScript: function Test ( params ) { DynamicsAXLaunch (); SeS ( 'AddressBarContainer' ). DoSetText ( \"DAT/Retail essentials/Area page\" ); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Customers\" ); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Customers;All customers\" ); SeS ( '_New' ). DoMenu ( \"Customer\" ); SeS ( 'Customer_account' ). DoClick (); SeS ( 'Customer_account' ). DoSetText ( \"Google\" ); SeS ( 'Name' ). DoClick (); SeS ( 'Name' ). DoSetText ( \"Google\" ); SeS ( 'Customer_group' ). DoClick (); SeS ( 'Add' ). DoClick (); SeS ( 'Customer_group' ). DoClick (); SeS ( 'Customer_group_lookup_button' ). DoClick (); SeS ( 'Grid' ). DoClickCell ( \"SOFTWARE\" , \"Customer group\" ); SeS ( 'Save_and_close' ). DoClick (); SeS ( 'List' ). DoMenu ( \"Refresh\" ); SeS ( 'ListPageGrid' ). DoClickCell ( \"Google\" , \"Name\" ); SeS ( 'Maintain' ). DoMenu ( \"Delete\" ); SeS ( 'Yes' ). DoClick (); SeS ( 'Tree' ). DoClickNode ( \"Retail essentials;Area page\" ); SeS ( 'TabControl' ). DoSelectTab ( \"Home\" ); } If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl + 2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. Pause/Resume button is located at the right side of the Recording Activity dialog .","title":"Recording Actions and Learning Objects"},{"location":"Guide/dynamics_ax/#tips-for-interacting-with-objects","text":"","title":"Tips for Interacting with Objects"},{"location":"Guide/dynamics_ax/#text-box","text":"To allow Rapise to capture the entered text interact with a text box in two steps: Click into the edit box Type text using keyboard","title":"Text Box"},{"location":"Guide/dynamics_ax/#combobox","text":"Dynamics AX has several types of combo boxes.","title":"ComboBox"},{"location":"Guide/dynamics_ax/#standard-combo-box","text":"Standard combo box like Worker type in the Hire New Worker form. Rapise treats such combo boxes as atomic objects abd records them as DynamicsAXComboBox . To record interaction with the combo box Click on the combo box to expand the dropwdown with choices Select a value from the list Generated script step looks like: RVL JavaScript SeS ( 'Worker_type' ). DoSelectItem ( \"Employee\" );","title":"Standard Combo Box"},{"location":"Guide/dynamics_ax/#table-filter-combo","text":"Table filter combo is recognized as a pair of objects: Scope and DropDown . The Scope is of type DynamicsAXMenuItem and used to open the DropDown of type DynamicsAXMenuDropDownList . Recorded steps look like: RVL JavaScript //User clicks 'Scope' SeS ( 'Scope' ). DoClick (); //DropDown item selected:'Search name' SeS ( 'DropDown' ). DoSelectItem ( \"Search name\" );","title":"Table Filter Combo"},{"location":"Guide/dynamics_ax/#lookup-field","text":"Lookup field consists of an edit box, open button and a dropdown table. Record lookup interactions in three steps: Click the edit field. Recorded as DynamicsAXTextBox . Click the open button. Recorded as UIAObject . Click the value in the dropdown grid. Recorded as DynamicsAXTable . RVL JavaScript // Click on the edit box SeS ( 'Customer_group' ). DoClick (); // Click open button SeS ( 'Customer_group_lookup_button' ). DoClick (); // Select value from the dropdown grid using column name (Customer group) and value (SOFTWARE) SeS ( 'Grid' ). DoClickCell ( \"SOFTWARE\" , \"Customer group\" );","title":"Lookup Field"},{"location":"Guide/dynamics_ax/#address-bar","text":"Click in empty area of the address bar and enter the address where you want to navigate. Rapise will capture DynamicsAXAddressBar object and record DoSetText action. RVL JavaScript SeS ( 'AddressBarContainer' ). DoSetText ( 'DAT/Retail essentials/Employees/Users' );","title":"Address Bar"},{"location":"Guide/dynamics_ax/#menu","text":"Rapise supports both recording and learning of the main menu. When recording make sure you click on every component along the path. E.g. you want to navigate to File > View > Modules > General ledger . During recording click on File , View , Modules and General ledger . Captured menu object has type DynamicsAXMenu . Generated script looks like: RVL JavaScript //Menu item selected:'General ledger' SeS ( 'File' ). DoMenu ( \"File;View;Modules;General ledger\" ); Rapise captures menu as top level object ( File in the example above). Notice that menu path components are separated with ; . If you want for example to open menu File > Tools > Telephone list then use File;Tools;Telephone list as path parameter.","title":"Menu"},{"location":"Guide/dynamics_ax/#table","text":"Rapise recognizes Dynamics AX grids as DynamicsAXTable When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like: RVL JavaScript SeS ( 'ListPageGrid' ). DoClickCell ( \"Contoso Retail Chicago\" , \"Name\" ); Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check DynamicsAXTable for more details.","title":"Table"},{"location":"Guide/dynamics_ax/#infolog","text":"In some case Dynamics AX can report an error using Infolog window. To obtain text of the messages in this window learn the Tree object - place cursor over the error text and press Ctrl + 2 shortcut. The object is learned as UIATree . In the case of infolog tree - all nodes are immediate children of the root. So in the example shown on the image above the tree contains two child nodes of the tree node. To get the number of messages and read individual messages use GetChildrenCount and GetChildAt actions of UIATree . RVL JavaScript // Get the number of messages in the infolog. // For the presented example it returns 2. var messageCount = SeS ( 'InfologTree' ). GetChildrenCount (); // Get second message text, returns \"Field 'User ID' must be filled in.\" var messageText = SeS ( 'Tree' ). GetChildAt ( 0 , 1 );","title":"Infolog"},{"location":"Guide/dynamics_ax/#type-to-filter-field","text":"Almost each standard grid in Dynamics AX has a text field for filtering grid data. When you learn this field it has a name Type to filter . However when this field gets focus it's name changes to Text box . To enable Rapise to find this field during playback set Ignore Object Name property of the object to True .","title":"Type to filter Field"},{"location":"Guide/dynamics_ax/#dynamics-ax-cook-book","text":"","title":"Dynamics AX Cook Book"},{"location":"Guide/dynamics_ax/#maximizeminimizerestore-window","text":"You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id AddressBarContainer . First place the following code into your User.js : function MaximizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = true ; } function MinimizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = false ; } function RestoreWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Iconic = false ; } Now you can use these functions in RVL and JavaScript. RVL JavaScript MaximizeWindow ( \"AddressBarContainer\" ); RestoreWindow ( \"AddressBarContainer\" ); MinimizeWindow ( \"AddressBarContainer\" );","title":"Maximize/Minimize/Restore Window"},{"location":"Guide/dynamics_ax/#scroll-to-the-bottom-of-a-grid","text":"If your grid looks like this and you want to scroll to the last record of it learn the Last Record button and click on it during test playback. RVL JavaScript SeS ( 'Last_Record' ). DoClick ();","title":"Scroll to the Bottom of a Grid"},{"location":"Guide/dynamics_ax/#scroll-and-click-on-a-cell-in-a-grid","text":"If you know the value of a cell in a grid then Rapise will automatically scroll the grid before click. Assume that you want to click on a cell with value Alen Shen in a column Search name . This cell is not visible on the picture and requires scrolling to show up. The following script performs the click: RVL JavaScript SeS ( 'CustomerGrid' ). DoClickCell ( \"Alen Shen\" , \"Search name\" ); If you do not know the value of a cell you can get it this way RVL JavaScript var cellValue = SeS ( 'CustomerGrid' ). GetCell ( 9 , \"Search name\" ); Tester . Message ( cellValue ); Where 9 is row number.","title":"Scroll and Click on a Cell in a Grid"},{"location":"Guide/dynamics_ax/#see-also","text":"Microsoft Dynamics Get the framework for testing Dynamics AX (github) KB: If recording of actions in Dynamics AX or Dynamics NAV does not work KB: Creating a Purchase Order in Dynamics AX KB: Rapise Tips, Tricks & Workarounds when Testing Dynamics AX 2012 KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX KB378 RPA - importing data into Dynamics AX Webinar: Testing Microsoft Dynamics AX with Rapise Webinar: Test Automation & RPA for Dynamics AX with Rapise Dynamics AX Sample Tests with source and recording/playback video links","title":"See Also"},{"location":"Guide/dynamics_crm/","text":"Dynamics CRM/365 for Sales \u00b6 Overview \u00b6 Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online . Rapise can be used to test installations of Dynamics CRM both on-premise and online. Latest version of Dynamics CRM is called Dynamics 365 for Sales . It is also supported. Rapise can handle both Web and Unified Interface . Dynamics 365 for Sales - Unified Interface \u00b6 Legacy \u00b6 Dynamics 365 for Sales - Web Interface \u00b6 Dynamics CRM On-Premise \u00b6 Dynamics CRM Online \u00b6 Recording a Test \u00b6 All versions of Dynamics CRM are completely web-based and use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests : Most of the Dynamics CRM user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside CRM that Rapise has specialized support for. For that reason you'll also see the DomDynamicsCrm library added to your test as well as the browser one. This DomDynamicsCrm library adds additional rules that identify certain CRM objects to make testing easier. When you record your first test, you'll get the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g_browserLibrary:Chrome HTML%\" , \"DomDynamicsCrm\" ]; If you don\u2019t see the DomDynamicsCrm library listed in your test, then you will need to manually add it . Recording and Learning Objects \u00b6 During recording while you interact with Dynamics CRM/365, Rapise captures objects and displays them in the object tree : Some of these objects will be standard HTML DOM objects (e.g. text field): and others will be specific to Dynamics CRM/365: Tips for Interacting with Objects \u00b6 The following unique objects are available within Dynamics CRM/365 that Rapise has special support for: Dynamics CRM/365 Grid \u00b6 One of the the most important UI elements inside Dynamics CRM/365 is the sortable, filterable grid: The Dynamics CRM/365 Grid is used in lots of different screens inside Dynamics CRM/365 (e.g. Leads, Accounts, etc.) and it is very common to need to interact with it in test scripts. When you record operations on such a grid or simply learn the entire grid using Ctrl + 2 you will learn the DomDynamicsCrmGrid or DomDynamicsCrmUnifiedInterfaceGrid object: See Also \u00b6 Microsoft Dynamics Get the framework for testing Dynamics 365 for Sales (github) Tips & Tricks for Rapise and Dynamics 365 for Sales (Web Interface) KB: How to automate testing of Unified Service Desk for Microsoft Dynamics 365 Webinar: Testing Dynamics CRM & 365 for Sales using Rapise","title":"Dynamics CRM/365 for Sales"},{"location":"Guide/dynamics_crm/#dynamics-crm365-for-sales","text":"","title":"Dynamics CRM/365 for Sales"},{"location":"Guide/dynamics_crm/#overview","text":"Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online . Rapise can be used to test installations of Dynamics CRM both on-premise and online. Latest version of Dynamics CRM is called Dynamics 365 for Sales . It is also supported. Rapise can handle both Web and Unified Interface .","title":"Overview"},{"location":"Guide/dynamics_crm/#dynamics-365-for-sales-unified-interface","text":"","title":"Dynamics 365 for Sales - Unified Interface"},{"location":"Guide/dynamics_crm/#legacy","text":"","title":"Legacy"},{"location":"Guide/dynamics_crm/#dynamics-365-for-sales-web-interface","text":"","title":"Dynamics 365 for Sales - Web Interface"},{"location":"Guide/dynamics_crm/#dynamics-crm-on-premise","text":"","title":"Dynamics CRM On-Premise"},{"location":"Guide/dynamics_crm/#dynamics-crm-online","text":"","title":"Dynamics CRM Online"},{"location":"Guide/dynamics_crm/#recording-a-test","text":"All versions of Dynamics CRM are completely web-based and use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests : Most of the Dynamics CRM user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside CRM that Rapise has specialized support for. For that reason you'll also see the DomDynamicsCrm library added to your test as well as the browser one. This DomDynamicsCrm library adds additional rules that identify certain CRM objects to make testing easier. When you record your first test, you'll get the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g_browserLibrary:Chrome HTML%\" , \"DomDynamicsCrm\" ]; If you don\u2019t see the DomDynamicsCrm library listed in your test, then you will need to manually add it .","title":"Recording a Test"},{"location":"Guide/dynamics_crm/#recording-and-learning-objects","text":"During recording while you interact with Dynamics CRM/365, Rapise captures objects and displays them in the object tree : Some of these objects will be standard HTML DOM objects (e.g. text field): and others will be specific to Dynamics CRM/365:","title":"Recording and Learning Objects"},{"location":"Guide/dynamics_crm/#tips-for-interacting-with-objects","text":"The following unique objects are available within Dynamics CRM/365 that Rapise has special support for:","title":"Tips for Interacting with Objects"},{"location":"Guide/dynamics_crm/#dynamics-crm365-grid","text":"One of the the most important UI elements inside Dynamics CRM/365 is the sortable, filterable grid: The Dynamics CRM/365 Grid is used in lots of different screens inside Dynamics CRM/365 (e.g. Leads, Accounts, etc.) and it is very common to need to interact with it in test scripts. When you record operations on such a grid or simply learn the entire grid using Ctrl + 2 you will learn the DomDynamicsCrmGrid or DomDynamicsCrmUnifiedInterfaceGrid object:","title":"Dynamics CRM/365 Grid"},{"location":"Guide/dynamics_crm/#see-also","text":"Microsoft Dynamics Get the framework for testing Dynamics 365 for Sales (github) Tips & Tricks for Rapise and Dynamics 365 for Sales (Web Interface) KB: How to automate testing of Unified Service Desk for Microsoft Dynamics 365 Webinar: Testing Dynamics CRM & 365 for Sales using Rapise","title":"See Also"},{"location":"Guide/dynamics_nav/","text":"Dynamics NAV \u00b6 Overview \u00b6 In this guide we describe how to master tests for Dynamics NAV desktop client using Rapise. Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries. Dynamics NAV Web Client Testing Note \u00b6 Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test. Start Recording a New Test \u00b6 First you need to create a new Basic test and start recording session. Choose Dynamics NAV from the list of applications: Then press Select button to start recording. When recording is completed you will see that Rapise automatically attached necessary libraries in the code of Main.js file: g_load_libraries = [ \"UIAutomation\" , \"DynamicsNAV\" ]; Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. DynamicsNAV library supports set of controls specific to Microsoft Dynamics NAV application. Automatic Adjustment of Window Title Object Property \u00b6 Main window title of Dynamics NAV is dynamic by nature. It may contain not only application name but also name of currently active page or information about currently opened record. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression. You can see it in the object tree and properties of captured objects. Here it is: 1 regex:.*Microsoft Dynamics NAV Also Rapise adjusts Record Title in test settings to the same regular expression so you do not need to choose the Dynamics NAV main window during subsequent recording sessions. Titles of Child Windows \u00b6 Child windows of Dynamics NAV also may have dynamic titles. Rapise tries to generate a regular expression for such titles as well. If it does not do so - write the expression yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the window title property automatically. In other words when Rapise learns a new object and it's window title is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression. How to Launch Dynamics NAV Client \u00b6 If in your test you want to check that Dynamics NAV application is installed and running place this function into User.js : function DynamicsNAVLaunch () { function _NavIsRunning () { var windows = g_util . FindWindows ( \"regex:.*Microsoft Dynamics NAV\" , \"regex:WindowsForms10.*\" ); return windows . length > 0 ; } if ( _NavIsRunning ()) { Tester . Message ( \"Dynamics NAV Client is already running\" ); return true ; } var fso = new ActiveXObject ( \"Scripting.FileSystemObject\" ); var pfFolder = Global . GetSpecialFolderPath ( \"ProgramFilesX86\" ); var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics NAV\\\\100\\\\RoleTailored Client\\\\Microsoft.Dynamics.Nav.Client.exe\" if ( ! fso . FileExists ( dynamicsPath )) { Tester . Message ( \"Dynamics NAV Client is not installed on this computer\" ); return false ; } Global . DoLaunch ( dynamicsPath ); for ( var i = 0 ; i < 60 ; i ++ ) { if ( _NavIsRunning ()) { Tester . Message ( \"Dynamics NAV Client started successfully\" ); return true ; } Global . DoSleep ( 1000 ); } Tester . Message ( \"Dynamics NAV Client did not start\" ); return false ; } You can now use this function in RVL and in JavaScript: DynamicsNAVLaunch (); Recording Actions and Learning Objects \u00b6 During recording while you interact with Dynamics NAV controls Rapise captures actions and displays them in the recording dialog. After this recording session corresponding UI area looks as follows: When recording is finished Rapise automatically generates the test. In Rapise Visual Language(RVL) it looks like In JavaScript: function Test () { SeS ( '_New' ). DoClick (); SeS ( 'OK' ). DoAction (); SeS ( 'Name' ). DoClick (); SeS ( 'Name' ). DoSetText ( \"CONTOSO\" ); SeS ( 'Address' ). DoClick (); SeS ( 'Address' ). DoSetText ( \"1200 Market St\" ); } If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl + 2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. Pause/Resume button is located at the right side of the Recording Activity dialog . Tips for Interacting with Objects \u00b6 Text Box \u00b6 To allow Rapise to capture the entered text interact with a text box in two steps: Click into the edit box Type text using keyboard ComboBox \u00b6 Dynamics NAV combo box consists of three elements: edit box, open button and a dropdown table. For reliable recording of combo box interactions follow these steps: click on the edit box, click on the open button, click on a cell in the table. Rapise will record this as: RVL JavaScript // Click on the edit box SeS ( 'City' ). DoClick ); // Click on the open button SeS ( 'City1' ). DoAction (); // Select city in the table, choose \"Gmunden\" value in the column \"City\" SeS ( 'DataGridView' ). DoClickCell ( \"Gmunden\" , \"City\" ); Table \u00b6 Rapise has complete support for Dynamics NAV grids/tables. It recognizes Dynamics NAV grids as DynamicsNAVTable object. Rapise can record user clicks on cells and also provides API to get the number of rows, columns, get column name by index. When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like: RVL JavaScript SeS ( 'DataGridView' ). DoClickCell ( \"Gmunden\" , \"City\" ); Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check DynamicsNAVTable for more details. Here is an example of interacting with a grid. var grid = SeS ( 'DataGridView' ); var cell = grid . GetCell ( 3 , \"Name\" ); Tester . Message ( cell ); var colValues = grid . GetColumnValues ( 2 , 10 ); Tester . Message ( colValues . join ( ',' )); grid . DoClickCell ( \"Bilabankinn\" , \"Name\" ); grid . DoClickColumn ( 1 ); grid . DoClickColumn ( \"Name\" ); var rowCount = grid . GetRowCount (); Tester . Message ( rowCount ); var colCount = grid . GetColumnCount (); Tester . Message ( colCount ); for ( var i = 0 ; i < colCount ; i ++ ) { var colName = grid . GetColumnName ( i ); Tester . Message ( \"\\\"\" + colName + \"\\\"\" ); var colIndex = grid . GetColumnIndex ( colName ); Tester . Message ( colIndex ); } Dynamics NAV Cook Book \u00b6 Maximize/Minimize/Restore Window \u00b6 You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id ToolBar . First place the following code into your User.js : function MaximizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = true ; } function MinimizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = false ; } function RestoreWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Iconic = false ; } Now you can use these functions in RVL and JavaScript. RVL JavaScript MaximizeWindow ( \"ToolBar\" ); RestoreWindow ( \"ToolBar\" ); MinimizeWindow ( \"ToolBar\" ); Scroll to a Specific Row of a Grid \u00b6 Generally Dynamics NAV grids do not allow accessing cells which are not currently visible on screen. Using scrolling it is possible to make a specific row/column of a grid visible. If you perform DoClickCell action Rapise will automatically ensure that the cell is visible on screen. There is also explicit scroll action DoScrollTo . RVL JavaScript SeS ( 'CustomerGrid' ). DoClickCell ( \"Francematic\" , \"Name\" ); SeS ( 'CustomerGrid' ). DoScrollTo ( 30 , 7 ); See Also \u00b6 Microsoft Dynamics Get the framework for testing Dynamics NAV (github) KB: How to start Dynamics NAV client KB: If recording of actions in Dynamics AX or Dynamics NAV does not work KB: How to record entering of data into Dynamics NAV tables KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV Webinar: Testing Microsoft Dynamics NAV with Rapise Webinar: Testing MS Dynamics NAV & Robotic Process Automation with Rapise","title":"Dynamics NAV"},{"location":"Guide/dynamics_nav/#dynamics-nav","text":"","title":"Dynamics NAV"},{"location":"Guide/dynamics_nav/#overview","text":"In this guide we describe how to master tests for Dynamics NAV desktop client using Rapise. Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries.","title":"Overview"},{"location":"Guide/dynamics_nav/#dynamics-nav-web-client-testing-note","text":"Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test.","title":"Dynamics NAV Web Client Testing Note"},{"location":"Guide/dynamics_nav/#start-recording-a-new-test","text":"First you need to create a new Basic test and start recording session. Choose Dynamics NAV from the list of applications: Then press Select button to start recording. When recording is completed you will see that Rapise automatically attached necessary libraries in the code of Main.js file: g_load_libraries = [ \"UIAutomation\" , \"DynamicsNAV\" ]; Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. DynamicsNAV library supports set of controls specific to Microsoft Dynamics NAV application.","title":"Start Recording a New Test"},{"location":"Guide/dynamics_nav/#automatic-adjustment-of-window-title-object-property","text":"Main window title of Dynamics NAV is dynamic by nature. It may contain not only application name but also name of currently active page or information about currently opened record. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression. You can see it in the object tree and properties of captured objects. Here it is: 1 regex:.*Microsoft Dynamics NAV Also Rapise adjusts Record Title in test settings to the same regular expression so you do not need to choose the Dynamics NAV main window during subsequent recording sessions.","title":"Automatic Adjustment of Window Title Object Property"},{"location":"Guide/dynamics_nav/#titles-of-child-windows","text":"Child windows of Dynamics NAV also may have dynamic titles. Rapise tries to generate a regular expression for such titles as well. If it does not do so - write the expression yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the window title property automatically. In other words when Rapise learns a new object and it's window title is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression.","title":"Titles of Child Windows"},{"location":"Guide/dynamics_nav/#how-to-launch-dynamics-nav-client","text":"If in your test you want to check that Dynamics NAV application is installed and running place this function into User.js : function DynamicsNAVLaunch () { function _NavIsRunning () { var windows = g_util . FindWindows ( \"regex:.*Microsoft Dynamics NAV\" , \"regex:WindowsForms10.*\" ); return windows . length > 0 ; } if ( _NavIsRunning ()) { Tester . Message ( \"Dynamics NAV Client is already running\" ); return true ; } var fso = new ActiveXObject ( \"Scripting.FileSystemObject\" ); var pfFolder = Global . GetSpecialFolderPath ( \"ProgramFilesX86\" ); var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics NAV\\\\100\\\\RoleTailored Client\\\\Microsoft.Dynamics.Nav.Client.exe\" if ( ! fso . FileExists ( dynamicsPath )) { Tester . Message ( \"Dynamics NAV Client is not installed on this computer\" ); return false ; } Global . DoLaunch ( dynamicsPath ); for ( var i = 0 ; i < 60 ; i ++ ) { if ( _NavIsRunning ()) { Tester . Message ( \"Dynamics NAV Client started successfully\" ); return true ; } Global . DoSleep ( 1000 ); } Tester . Message ( \"Dynamics NAV Client did not start\" ); return false ; } You can now use this function in RVL and in JavaScript: DynamicsNAVLaunch ();","title":"How to Launch Dynamics NAV Client"},{"location":"Guide/dynamics_nav/#recording-actions-and-learning-objects","text":"During recording while you interact with Dynamics NAV controls Rapise captures actions and displays them in the recording dialog. After this recording session corresponding UI area looks as follows: When recording is finished Rapise automatically generates the test. In Rapise Visual Language(RVL) it looks like In JavaScript: function Test () { SeS ( '_New' ). DoClick (); SeS ( 'OK' ). DoAction (); SeS ( 'Name' ). DoClick (); SeS ( 'Name' ). DoSetText ( \"CONTOSO\" ); SeS ( 'Address' ). DoClick (); SeS ( 'Address' ). DoSetText ( \"1200 Market St\" ); } If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl + 2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. Pause/Resume button is located at the right side of the Recording Activity dialog .","title":"Recording Actions and Learning Objects"},{"location":"Guide/dynamics_nav/#tips-for-interacting-with-objects","text":"","title":"Tips for Interacting with Objects"},{"location":"Guide/dynamics_nav/#text-box","text":"To allow Rapise to capture the entered text interact with a text box in two steps: Click into the edit box Type text using keyboard","title":"Text Box"},{"location":"Guide/dynamics_nav/#combobox","text":"Dynamics NAV combo box consists of three elements: edit box, open button and a dropdown table. For reliable recording of combo box interactions follow these steps: click on the edit box, click on the open button, click on a cell in the table. Rapise will record this as: RVL JavaScript // Click on the edit box SeS ( 'City' ). DoClick ); // Click on the open button SeS ( 'City1' ). DoAction (); // Select city in the table, choose \"Gmunden\" value in the column \"City\" SeS ( 'DataGridView' ). DoClickCell ( \"Gmunden\" , \"City\" );","title":"ComboBox"},{"location":"Guide/dynamics_nav/#table","text":"Rapise has complete support for Dynamics NAV grids/tables. It recognizes Dynamics NAV grids as DynamicsNAVTable object. Rapise can record user clicks on cells and also provides API to get the number of rows, columns, get column name by index. When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like: RVL JavaScript SeS ( 'DataGridView' ). DoClickCell ( \"Gmunden\" , \"City\" ); Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check DynamicsNAVTable for more details. Here is an example of interacting with a grid. var grid = SeS ( 'DataGridView' ); var cell = grid . GetCell ( 3 , \"Name\" ); Tester . Message ( cell ); var colValues = grid . GetColumnValues ( 2 , 10 ); Tester . Message ( colValues . join ( ',' )); grid . DoClickCell ( \"Bilabankinn\" , \"Name\" ); grid . DoClickColumn ( 1 ); grid . DoClickColumn ( \"Name\" ); var rowCount = grid . GetRowCount (); Tester . Message ( rowCount ); var colCount = grid . GetColumnCount (); Tester . Message ( colCount ); for ( var i = 0 ; i < colCount ; i ++ ) { var colName = grid . GetColumnName ( i ); Tester . Message ( \"\\\"\" + colName + \"\\\"\" ); var colIndex = grid . GetColumnIndex ( colName ); Tester . Message ( colIndex ); }","title":"Table"},{"location":"Guide/dynamics_nav/#dynamics-nav-cook-book","text":"","title":"Dynamics NAV Cook Book"},{"location":"Guide/dynamics_nav/#maximizeminimizerestore-window","text":"You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id ToolBar . First place the following code into your User.js : function MaximizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = true ; } function MinimizeWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Maximized = false ; } function RestoreWindow ( /**objectId*/ objectId ) { SeS ( objectId ). getDesktopWindow (). Iconic = false ; } Now you can use these functions in RVL and JavaScript. RVL JavaScript MaximizeWindow ( \"ToolBar\" ); RestoreWindow ( \"ToolBar\" ); MinimizeWindow ( \"ToolBar\" );","title":"Maximize/Minimize/Restore Window"},{"location":"Guide/dynamics_nav/#scroll-to-a-specific-row-of-a-grid","text":"Generally Dynamics NAV grids do not allow accessing cells which are not currently visible on screen. Using scrolling it is possible to make a specific row/column of a grid visible. If you perform DoClickCell action Rapise will automatically ensure that the cell is visible on screen. There is also explicit scroll action DoScrollTo . RVL JavaScript SeS ( 'CustomerGrid' ). DoClickCell ( \"Francematic\" , \"Name\" ); SeS ( 'CustomerGrid' ). DoScrollTo ( 30 , 7 );","title":"Scroll to a Specific Row of a Grid"},{"location":"Guide/dynamics_nav/#see-also","text":"Microsoft Dynamics Get the framework for testing Dynamics NAV (github) KB: How to start Dynamics NAV client KB: If recording of actions in Dynamics AX or Dynamics NAV does not work KB: How to record entering of data into Dynamics NAV tables KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV Webinar: Testing Microsoft Dynamics NAV with Rapise Webinar: Testing MS Dynamics NAV & Robotic Process Automation with Rapise","title":"See Also"},{"location":"Guide/enter_filter_criteria_for____d/","text":"Enter filter criteria for... Dialog \u00b6 Purpose \u00b6 Allow more than one filter criteria for the same column. How to Open \u00b6 In the Report Viewer , open the drop-down menu for one of the filter cells ; select the Custom option (see below): Conditions \u00b6 You may specify as many conditions as you like. Each condition has two properties, a Matching Criteria on the left and a filter value on the right. The filter value is a string, and the matching criteria specifies what constitutes a match. For more details, look HERE . Filter Aggregation \u00b6 There are two ways you can aggregate / combine filter conditions: All : All conditions must be true to constitute a match. Any : At least one condition must be true to constitute a match. Buttons \u00b6 Add : Add a extra condition row. Delete : Delete the selected condition. You can select a condition by clicking on the field name to the left of the matching criteria: OK : Close the dialog and apply the filter. Cancel : Close the dialog. Do not apply the filter.","title":"Enter Filter Criteria For... Dialog"},{"location":"Guide/enter_filter_criteria_for____d/#enter-filter-criteria-for-dialog","text":"","title":"Enter filter criteria for... Dialog"},{"location":"Guide/enter_filter_criteria_for____d/#purpose","text":"Allow more than one filter criteria for the same column.","title":"Purpose"},{"location":"Guide/enter_filter_criteria_for____d/#how-to-open","text":"In the Report Viewer , open the drop-down menu for one of the filter cells ; select the Custom option (see below):","title":"How to Open"},{"location":"Guide/enter_filter_criteria_for____d/#conditions","text":"You may specify as many conditions as you like. Each condition has two properties, a Matching Criteria on the left and a filter value on the right. The filter value is a string, and the matching criteria specifies what constitutes a match. For more details, look HERE .","title":"Conditions"},{"location":"Guide/enter_filter_criteria_for____d/#filter-aggregation","text":"There are two ways you can aggregate / combine filter conditions: All : All conditions must be true to constitute a match. Any : At least one condition must be true to constitute a match.","title":"Filter Aggregation"},{"location":"Guide/enter_filter_criteria_for____d/#buttons","text":"Add : Add a extra condition row. Delete : Delete the selected condition. You can select a condition by clicking on the field name to the left of the matching criteria: OK : Close the dialog and apply the filter. Cancel : Close the dialog. Do not apply the filter.","title":"Buttons"},{"location":"Guide/errors_view/","text":"Errors View \u00b6 Purpose \u00b6 The Errors View displays execution error details. Execution errors are those that cause Recording or Playback to stop. How to Open \u00b6 The Errors View is hidden in the Default Layout . You may then show it using View > Show > Output . Error Message \u00b6 Double click on an error message to go to the corresponding source line. Widgets \u00b6 The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output .","title":"Errors View"},{"location":"Guide/errors_view/#errors-view","text":"","title":"Errors View"},{"location":"Guide/errors_view/#purpose","text":"The Errors View displays execution error details. Execution errors are those that cause Recording or Playback to stop.","title":"Purpose"},{"location":"Guide/errors_view/#how-to-open","text":"The Errors View is hidden in the Default Layout . You may then show it using View > Show > Output .","title":"How to Open"},{"location":"Guide/errors_view/#error-message","text":"Double click on an error message to go to the corresponding source line.","title":"Error Message"},{"location":"Guide/errors_view/#widgets","text":"The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output .","title":"Widgets"},{"location":"Guide/extensibility/","text":"Extensibility \u00b6 The Extensibility section is for experienced Rapise users who want to extend capabilities of the tool. Tutorial: Custom Library Defining Global Objects","title":"Extensibility"},{"location":"Guide/extensibility/#extensibility","text":"The Extensibility section is for experienced Rapise users who want to extend capabilities of the tool. Tutorial: Custom Library Defining Global Objects","title":"Extensibility"},{"location":"Guide/extracting_test_data_from_an_e/","text":"Extracting Test Data From an Excel Spreadsheet \u00b6 Overview \u00b6 Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this. Recommended Solution \u00b6 In this example we have a spreadsheet that contains some lookup data: Test Test Data Test1 valuetest1 Test2 valuetest2 Test3 valuetest3 Test4 valuetest4 Test5 valuetest5 We want to dynamically query this Excel sheet and find the test data associated with a specific case. For example if we query for Test2 we want to return back the test data valuetest2 . The function that will do this uses the built-in Spreadsheet object: function FindValueFromFile ( filename , valueToFind ) { //Open the spreadsheet var success = Spreadsheet . DoAttach ( filename , 'Sheet1' ); Tester . Assert ( 'Open Spreadsheet' , success ); //Now loop through and see if we can find that value var rowCount = Spreadsheet . GetRowCount (); Spreadsheet . SetRange ( 2 , rowCount + 1 , 1 , 2 ); //Loop through all the rows and find the match var data = '' ; while ( Spreadsheet . DoSequential ()) { if ( Spreadsheet . GetCell ( 0 ) == valueToFind ) { data = Spreadsheet . GetCell ( 1 ); } } return data ; } See Also \u00b6 How-Tos","title":"Extracting Test Data From an Excel Spreadsheet"},{"location":"Guide/extracting_test_data_from_an_e/#extracting-test-data-from-an-excel-spreadsheet","text":"","title":"Extracting Test Data From an Excel Spreadsheet"},{"location":"Guide/extracting_test_data_from_an_e/#overview","text":"Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this.","title":"Overview"},{"location":"Guide/extracting_test_data_from_an_e/#recommended-solution","text":"In this example we have a spreadsheet that contains some lookup data: Test Test Data Test1 valuetest1 Test2 valuetest2 Test3 valuetest3 Test4 valuetest4 Test5 valuetest5 We want to dynamically query this Excel sheet and find the test data associated with a specific case. For example if we query for Test2 we want to return back the test data valuetest2 . The function that will do this uses the built-in Spreadsheet object: function FindValueFromFile ( filename , valueToFind ) { //Open the spreadsheet var success = Spreadsheet . DoAttach ( filename , 'Sheet1' ); Tester . Assert ( 'Open Spreadsheet' , success ); //Now loop through and see if we can find that value var rowCount = Spreadsheet . GetRowCount (); Spreadsheet . SetRange ( 2 , rowCount + 1 , 1 , 2 ); //Loop through all the rows and find the match var data = '' ; while ( Spreadsheet . DoSequential ()) { if ( Spreadsheet . GetCell ( 0 ) == valueToFind ) { data = Spreadsheet . GetCell ( 1 ); } } return data ; }","title":"Recommended Solution"},{"location":"Guide/extracting_test_data_from_an_e/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/features/","text":"Features \u00b6 Rapise is a feature-rich test automation system, however all the features have been designed to make test automation as easy as possible. Most of the features of Rapise fall into one of five categories: Building test scripts with little or no manual scripting. Recording and Learning Rapise Visual Language (RVL) Recording Libraries Reading and interpreting results and reports. Taking Screenshots Automated Reporting Additional features and capabilities for sophisticated testing. Object Spy Tests and Sub-Tests Test Management Writing more involved or complicated tests using scripting. Scripting Understanding the Script JavaScript IDE Extending Rapise to learn new or extended libraries of capabilities. Custom Libraries Depending on the application set being tested, not all of these features are necessarily needed for every situation. For each feature, the docs describe: The reason you might use a given feature. A summary of the basic value of the feature. An overview of how the feature works from the perspective of using it. At least one useful sample that demonstrates how to use the feature.","title":"Features"},{"location":"Guide/features/#features","text":"Rapise is a feature-rich test automation system, however all the features have been designed to make test automation as easy as possible. Most of the features of Rapise fall into one of five categories: Building test scripts with little or no manual scripting. Recording and Learning Rapise Visual Language (RVL) Recording Libraries Reading and interpreting results and reports. Taking Screenshots Automated Reporting Additional features and capabilities for sophisticated testing. Object Spy Tests and Sub-Tests Test Management Writing more involved or complicated tests using scripting. Scripting Understanding the Script JavaScript IDE Extending Rapise to learn new or extended libraries of capabilities. Custom Libraries Depending on the application set being tested, not all of these features are necessarily needed for every situation. For each feature, the docs describe: The reason you might use a given feature. A summary of the basic value of the feature. An overview of how the feature works from the perspective of using it. At least one useful sample that demonstrates how to use the feature.","title":"Features"},{"location":"Guide/find_and_replace_dialog/","text":"Find and Replace Dialog \u00b6 Purpose \u00b6 To find and replace text in files displayed in the Rapise Content View . How to Open \u00b6 Use main menu Edit > Find in Files or click magnifier icon on the toolbar. Find in Files Tab \u00b6 Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Directory path : Use the Directory Path text-box to specify the directory in which to search. The Directory path text-box cannot be accessed (and is ignored) if the Test files checkbox is checked. Check the Include sub-folders option to search recursively from the directory specified in the Directory Path text-box. The Include sub-folders option cannot be accessed if the Test files checkbox is checked. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches. Look at these file types : Search only files with the specified file type(s). Find and Replace Tab \u00b6 There is only one significant difference between the Find in Files Tab and Find and Replace Tab: the Replace with text-box. Replace with text-box : All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.","title":"Find and Replace Dialog"},{"location":"Guide/find_and_replace_dialog/#find-and-replace-dialog","text":"","title":"Find and Replace Dialog"},{"location":"Guide/find_and_replace_dialog/#purpose","text":"To find and replace text in files displayed in the Rapise Content View .","title":"Purpose"},{"location":"Guide/find_and_replace_dialog/#how-to-open","text":"Use main menu Edit > Find in Files or click magnifier icon on the toolbar.","title":"How to Open"},{"location":"Guide/find_and_replace_dialog/#find-in-files-tab","text":"Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Directory path : Use the Directory Path text-box to specify the directory in which to search. The Directory path text-box cannot be accessed (and is ignored) if the Test files checkbox is checked. Check the Include sub-folders option to search recursively from the directory specified in the Directory Path text-box. The Include sub-folders option cannot be accessed if the Test files checkbox is checked. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches. Look at these file types : Search only files with the specified file type(s).","title":"Find in Files Tab"},{"location":"Guide/find_and_replace_dialog/#find-and-replace-tab","text":"There is only one significant difference between the Find in Files Tab and Find and Replace Tab: the Replace with text-box. Replace with text-box : All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.","title":"Find and Replace Tab"},{"location":"Guide/find_results_view/","text":"Find Results View \u00b6 Purpose \u00b6 Displays results for the Find and Replace Dialog . How to Open \u00b6 The Find Results view is part of the Default Layout . Messages \u00b6 Double click on a message to go to the corresponding source line. Widgets \u00b6 From left to right: The text box is a search box. Find Next Entry Copy Selected Clear All Text","title":"Find Results View"},{"location":"Guide/find_results_view/#find-results-view","text":"","title":"Find Results View"},{"location":"Guide/find_results_view/#purpose","text":"Displays results for the Find and Replace Dialog .","title":"Purpose"},{"location":"Guide/find_results_view/#how-to-open","text":"The Find Results view is part of the Default Layout .","title":"How to Open"},{"location":"Guide/find_results_view/#messages","text":"Double click on a message to go to the corresponding source line.","title":"Messages"},{"location":"Guide/find_results_view/#widgets","text":"From left to right: The text box is a search box. Find Next Entry Copy Selected Clear All Text","title":"Widgets"},{"location":"Guide/find_text_dialog/","text":"Find Text dialog \u00b6 Purpose \u00b6 Find occurrences of the Search Term text in the currently visible Source Editor . How to Open \u00b6 Use main menu Edit > Find or type Ctrl + F on the keyboard when the source editor is active. Find Tab \u00b6 Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches.","title":"Find Text dialog"},{"location":"Guide/find_text_dialog/#find-text-dialog","text":"","title":"Find Text dialog"},{"location":"Guide/find_text_dialog/#purpose","text":"Find occurrences of the Search Term text in the currently visible Source Editor .","title":"Purpose"},{"location":"Guide/find_text_dialog/#how-to-open","text":"Use main menu Edit > Find or type Ctrl + F on the keyboard when the source editor is active.","title":"How to Open"},{"location":"Guide/find_text_dialog/#find-tab","text":"Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches.","title":"Find Tab"},{"location":"Guide/getting_started/","text":"Getting Started \u00b6 The Getting Started section is for new Rapise users. It has the following subsections: An Overview of Rapise: what it's for and how to use it. Samples Index , where the sample projects included with Rapise are described. Tutorial: Windows Testing , a step-by-step tutorial for creating your first test with Rapise using a Windows desktop application. Tutorial: Web Testing , a slightly more advanced tutorial in using Rapise to test a web page. Tutorial: Testing REST Web Services , a tutorial in using Rapise to test a RESTful web service API. Tutorial: Testing SOAP Web Services , a tutorial in using Rapise to test a SOAP web service API. Tutorial: Mobile Testing - a tutorial explaining how to use Rapise to test a mobile application (in this case using Android) Tutorial: Manual Testing - a tutorial explaining how to use Rapise to create and execute manual tests . Tutorial: Java Testing - a tutorial explaining how to use Raise to test some simple AWT, Swing and SWT applications Tutorial: Qt Framework - a tutorial explaining how to use Rapise to test a simple Qt Framework application","title":"Getting Started"},{"location":"Guide/getting_started/#getting-started","text":"The Getting Started section is for new Rapise users. It has the following subsections: An Overview of Rapise: what it's for and how to use it. Samples Index , where the sample projects included with Rapise are described. Tutorial: Windows Testing , a step-by-step tutorial for creating your first test with Rapise using a Windows desktop application. Tutorial: Web Testing , a slightly more advanced tutorial in using Rapise to test a web page. Tutorial: Testing REST Web Services , a tutorial in using Rapise to test a RESTful web service API. Tutorial: Testing SOAP Web Services , a tutorial in using Rapise to test a SOAP web service API. Tutorial: Mobile Testing - a tutorial explaining how to use Rapise to test a mobile application (in this case using Android) Tutorial: Manual Testing - a tutorial explaining how to use Rapise to create and execute manual tests . Tutorial: Java Testing - a tutorial explaining how to use Raise to test some simple AWT, Swing and SWT applications Tutorial: Qt Framework - a tutorial explaining how to use Rapise to test a simple Qt Framework application","title":"Getting Started"},{"location":"Guide/git_integration/","text":"Rapise and Git Integration \u00b6 Purpose \u00b6 Git has become the de-facto standard for code versioning. SpiraTest Integration built into Rapise meets basic needs of distributed development, source control and file versioning. However the growth of the team and increasing complexity of project as well as introduction of CI/CD and build pipelines making it more natural to use Git for the test source management. Also it is common practice to store test files together with source code and documentation, and this makes another vote for having it all in Git repository. When to Use \u00b6 You probably don't need Git support, if you are developing few or many tests alone or in a small team. And you will benefit from Git if it is already used in your project, or you have a large project containing many dependent tests, shared data and files. Git Repository \u00b6 Having Git means having one more node on the diagram: In addition to Rapise used for test development and SpiraTeam used for test management, we have a Git Repository used for source version control. When linking a test case to Spira, Rapise should know that test sources are managed by Git and don't need to be stored into the repository. Usage \u00b6 Git Client \u00b6 In the majority of cases when tests are managed by Git, the source repository contains additional information and files. You need to have a git client installed. All standard Git operations, such as commit , fetch , pull and push are done externally in the git client. Linking New Test to Spira \u00b6 When using Save to Spira button, Rapise checks if current test is stored within the Git repository folder structure. And, if existing repository has been identified, the following prompt is shown: This means that Rapise detected that folder containing the test is within the .git repository structure. And it suggests to keep your test files in Git and only put a link into the Spira Test Case. How It is Stored in Spira \u00b6 When Test Case is Saved to Spira in a 'standard' manner, it shows the folder that is created in Spira Documents: After saving, the folder will contain test file versions: And the test case will refer to an .sstest document within this folder: How It is Stored in Git \u00b6 When the test stays in Git then Spira Documents section contains only one item - a link to a local file starting with %GITROOT% : And the Test Case uses that link: This means that to access this file, there should be an environment variable %GITROOT% pointing to the root of the local repository containing the test. Saving Existing Test and SyncToSpira.cmd \u00b6 If Test stored in Git and linked to Spira then pressing on Save to Spira link again have no visual effect - the test is already linked to test case and file versioning should be done by user using the installed git client . Sometimes we want to sync test file with Git every time we press Save to Spira . It is common practice to do commit , pull and then push every time we press it. This may be achieved by defining a file SyncToSpira.cmd . This file may be stored either common folder: c:\\Users\\Public\\Documents\\Rapise\\SyncToSpira.cmd Or in the root of current test framework . It gets path to the framework root as a 1 st parameter (%1) and path to .sstest as 2 nd (%2). Basic SyncToSpira.cmd \u00b6 Simplest, command line only implementation may look like that: @echo Test is being saved to Spira %2 @echo Framework Root: %1 pushd %1 git commit -m \"Auto-Save from Rapise\" git pull git push popd Interactive SyncToSpira.cmd \u00b6 Depending on your preferred git client, you may specify different implementations of Save to Spira . For example, here is an interactive version of it using TortoiseGit : @echo =============================== @echo Test is being saved to Spira %2 @echo Framework Root: %1 @set PATH=%PATH%;\"c:\\Program Files\\TortoiseGit\\bin\" pushd %1 tortoisegitproc /command:commit tortoisegitproc /command:pull tortoisegitproc /command:push popd @echo =============================== Executing With RapiseLauncher \u00b6 RapiseLauncher may execute scheduled test sets containing Test Cases linked to Git and having %GITROOT% in the file reference just like other test cases. Depending on how you want the source code to be checked out during execution there are two ways on specifying the %GITROOT% . Checkout By RapiseLauncher \u00b6 There are two ways on telling RapiseLauncher where the origin from which Git is supposed to do a checkout: using Spira custom properties or using system environment variables. Using Spira Custom Properties \u00b6 In this case, you need to add custom fields to the Test Set definition in Spira : GitUrl - Git remote repository URL. I.e. https://github.com/Inflectra/rapise-samples . GitUser - optional. Needed when repository is protected and requires an authentication. GitPassword - optional. Username for authentication. GitBranch - optional. You link test case to specific branch instead of default master branch. GitRoot - optional. Target folder for checkout. If empty or absent, default Rapise Launcher temp folder is used. Using System Environment Variables \u00b6 In this case you may have only one checkout source for all test sets executed by RapiseLauncher on the given host. It is fine if your host is dedicated to run tests from specific repository and is a bit easier to set up. In this case you need to define system variables named exactly the same as corresponding custom properties described in the previous block: GitUrl , GitUser , GitPassword , GitBranch , GitRoot . All but GitUrl are optional. When both Environment Variable and Spira Custom Property are defined and custom property value is non-empty, then Custom Property's value is used. Checkout Externally \u00b6 In CI/CD systems it is typical that test sources are checked out before the pipeline execution and already present on the local drive. In this case no need to define custom properties for Test Set (or, if already defined, leave them empty). The only thing that is required is GITROOT variable that should point to the root of the local Git repository. For example, if the pipeline checks the sources to c:\\Build folder from the Url https://github.com/Inflectra/rapise-samples the GITROOT should be set to C:\\Build so that the test link %GITROOT%\\rapise-samples\\RVLConcatStrings\\RVLConcatStrings.sstest gets correctly resolved to c:\\Build\\rapise-samples\\RVLConcatStrings\\RVLConcatStrings.sstest . See Also \u00b6 Demo of Git Integration (video) Framework Spira Integration","title":"Git Integration"},{"location":"Guide/git_integration/#rapise-and-git-integration","text":"","title":"Rapise and Git Integration"},{"location":"Guide/git_integration/#purpose","text":"Git has become the de-facto standard for code versioning. SpiraTest Integration built into Rapise meets basic needs of distributed development, source control and file versioning. However the growth of the team and increasing complexity of project as well as introduction of CI/CD and build pipelines making it more natural to use Git for the test source management. Also it is common practice to store test files together with source code and documentation, and this makes another vote for having it all in Git repository.","title":"Purpose"},{"location":"Guide/git_integration/#when-to-use","text":"You probably don't need Git support, if you are developing few or many tests alone or in a small team. And you will benefit from Git if it is already used in your project, or you have a large project containing many dependent tests, shared data and files.","title":"When to Use"},{"location":"Guide/git_integration/#git-repository","text":"Having Git means having one more node on the diagram: In addition to Rapise used for test development and SpiraTeam used for test management, we have a Git Repository used for source version control. When linking a test case to Spira, Rapise should know that test sources are managed by Git and don't need to be stored into the repository.","title":"Git Repository"},{"location":"Guide/git_integration/#usage","text":"","title":"Usage"},{"location":"Guide/git_integration/#git-client","text":"In the majority of cases when tests are managed by Git, the source repository contains additional information and files. You need to have a git client installed. All standard Git operations, such as commit , fetch , pull and push are done externally in the git client.","title":"Git Client"},{"location":"Guide/git_integration/#linking-new-test-to-spira","text":"When using Save to Spira button, Rapise checks if current test is stored within the Git repository folder structure. And, if existing repository has been identified, the following prompt is shown: This means that Rapise detected that folder containing the test is within the .git repository structure. And it suggests to keep your test files in Git and only put a link into the Spira Test Case.","title":"Linking New Test to Spira"},{"location":"Guide/git_integration/#how-it-is-stored-in-spira","text":"When Test Case is Saved to Spira in a 'standard' manner, it shows the folder that is created in Spira Documents: After saving, the folder will contain test file versions: And the test case will refer to an .sstest document within this folder:","title":"How It is Stored in Spira"},{"location":"Guide/git_integration/#how-it-is-stored-in-git","text":"When the test stays in Git then Spira Documents section contains only one item - a link to a local file starting with %GITROOT% : And the Test Case uses that link: This means that to access this file, there should be an environment variable %GITROOT% pointing to the root of the local repository containing the test.","title":"How It is Stored in Git"},{"location":"Guide/git_integration/#saving-existing-test-and-synctospiracmd","text":"If Test stored in Git and linked to Spira then pressing on Save to Spira link again have no visual effect - the test is already linked to test case and file versioning should be done by user using the installed git client . Sometimes we want to sync test file with Git every time we press Save to Spira . It is common practice to do commit , pull and then push every time we press it. This may be achieved by defining a file SyncToSpira.cmd . This file may be stored either common folder: c:\\Users\\Public\\Documents\\Rapise\\SyncToSpira.cmd Or in the root of current test framework . It gets path to the framework root as a 1 st parameter (%1) and path to .sstest as 2 nd (%2).","title":"Saving Existing Test and SyncToSpira.cmd"},{"location":"Guide/git_integration/#basic-synctospiracmd","text":"Simplest, command line only implementation may look like that: @echo Test is being saved to Spira %2 @echo Framework Root: %1 pushd %1 git commit -m \"Auto-Save from Rapise\" git pull git push popd","title":"Basic SyncToSpira.cmd"},{"location":"Guide/git_integration/#interactive-synctospiracmd","text":"Depending on your preferred git client, you may specify different implementations of Save to Spira . For example, here is an interactive version of it using TortoiseGit : @echo =============================== @echo Test is being saved to Spira %2 @echo Framework Root: %1 @set PATH=%PATH%;\"c:\\Program Files\\TortoiseGit\\bin\" pushd %1 tortoisegitproc /command:commit tortoisegitproc /command:pull tortoisegitproc /command:push popd @echo ===============================","title":"Interactive SyncToSpira.cmd"},{"location":"Guide/git_integration/#executing-with-rapiselauncher","text":"RapiseLauncher may execute scheduled test sets containing Test Cases linked to Git and having %GITROOT% in the file reference just like other test cases. Depending on how you want the source code to be checked out during execution there are two ways on specifying the %GITROOT% .","title":"Executing With RapiseLauncher"},{"location":"Guide/git_integration/#checkout-by-rapiselauncher","text":"There are two ways on telling RapiseLauncher where the origin from which Git is supposed to do a checkout: using Spira custom properties or using system environment variables.","title":"Checkout By RapiseLauncher"},{"location":"Guide/git_integration/#using-spira-custom-properties","text":"In this case, you need to add custom fields to the Test Set definition in Spira : GitUrl - Git remote repository URL. I.e. https://github.com/Inflectra/rapise-samples . GitUser - optional. Needed when repository is protected and requires an authentication. GitPassword - optional. Username for authentication. GitBranch - optional. You link test case to specific branch instead of default master branch. GitRoot - optional. Target folder for checkout. If empty or absent, default Rapise Launcher temp folder is used.","title":"Using Spira Custom Properties"},{"location":"Guide/git_integration/#using-system-environment-variables","text":"In this case you may have only one checkout source for all test sets executed by RapiseLauncher on the given host. It is fine if your host is dedicated to run tests from specific repository and is a bit easier to set up. In this case you need to define system variables named exactly the same as corresponding custom properties described in the previous block: GitUrl , GitUser , GitPassword , GitBranch , GitRoot . All but GitUrl are optional. When both Environment Variable and Spira Custom Property are defined and custom property value is non-empty, then Custom Property's value is used.","title":"Using System Environment Variables"},{"location":"Guide/git_integration/#checkout-externally","text":"In CI/CD systems it is typical that test sources are checked out before the pipeline execution and already present on the local drive. In this case no need to define custom properties for Test Set (or, if already defined, leave them empty). The only thing that is required is GITROOT variable that should point to the root of the local Git repository. For example, if the pipeline checks the sources to c:\\Build folder from the Url https://github.com/Inflectra/rapise-samples the GITROOT should be set to C:\\Build so that the test link %GITROOT%\\rapise-samples\\RVLConcatStrings\\RVLConcatStrings.sstest gets correctly resolved to c:\\Build\\rapise-samples\\RVLConcatStrings\\RVLConcatStrings.sstest .","title":"Checkout Externally"},{"location":"Guide/git_integration/#see-also","text":"Demo of Git Integration (video) Framework Spira Integration","title":"See Also"},{"location":"Guide/global_objects/","text":"Defining Global Objects \u00b6 Note This feature requires Rapise 6.6+ Why \u00b6 If you are building a framework and write custom functions in JavaScript you may combine the functions and define a global object. It will make RVL more readable and easier to write. Compare variants A and B. In variant A you choose Functions as an object and then select the custom function. In variant B you choose the global object and then it's action. The global object and it's actions can be seen in the Object Tree: How \u00b6 Let's see how to define your own global object. First, you need a JavaScript file where you will define the actions of the object and declare the object itself. A good candidate for such a file is the main file of a user-defined library or simply User.js . We'll use an example to explain the format of object definition. Here is the definition of a global object MyApp . Example \u00b6 // MyApp definition // to generate metadata press Ctrl-Shift-F5 function MyApp_Launch () { } function MyApp_Close () { } function MyApp_Login ( /**string*/ username , /**string*/ password ) { Tester . Message ( \"Logging as \" + username + \"/\" + password ); } _paramInfoMyApp_Login = { _description : \"Logs into the application\" , _type : \"boolean\" , _returns : \"`true` if login is ok\" , username : { description : \"Name of the user\" }, password : { description : \"Pwd of the user\" } } SeSGlobalObject ( \"MyApp\" ); Format \u00b6 Every action of MyApp object is prefixed with MyApp_ . We have three such actions: Launch , Close and Login . function MyApp_Launch () { } function MyApp_Close () { } function MyApp_Login ( /**string*/ username , /**string*/ password ) { Tester . Message ( \"Logging as \" + username + \"/\" + password ); } To declare the object use SeSGlobalObject call. It must be placed after definitions of all the actions. SeSGlobalObject ( \"MyApp\" ); You may specify action parameter types through comments /**<type>*/ . function MyApp_Login ( /**string*/ username , /**string*/ password ) You may also describe actions and parameters using paramInfo objects (should have a name of format _paramInfo<action function name> ). _paramInfoMyApp_Login = { _description : \"Logs into the application\" , _type : \"boolean\" , _returns : \"`true` if login is ok\" , username : { description : \"Name of the user\" }, password : { description : \"Pwd of the user\" } } Compile Metadata \u00b6 When the object is declared you need to compile the metadata for it. To do this open the file where you defined the object and press Ctrl + Shift + F5 . Object Icons \u00b6 If you want a specific icon for your object then create two .png files with dimensions 16x16 and 32x32 , name them as <object name>16.png and <object name>32.png and place them beside the file where you declared the object. See Also \u00b6 How to define a global object (video)","title":"Defining Global Objects"},{"location":"Guide/global_objects/#defining-global-objects","text":"Note This feature requires Rapise 6.6+","title":"Defining Global Objects"},{"location":"Guide/global_objects/#why","text":"If you are building a framework and write custom functions in JavaScript you may combine the functions and define a global object. It will make RVL more readable and easier to write. Compare variants A and B. In variant A you choose Functions as an object and then select the custom function. In variant B you choose the global object and then it's action. The global object and it's actions can be seen in the Object Tree:","title":"Why"},{"location":"Guide/global_objects/#how","text":"Let's see how to define your own global object. First, you need a JavaScript file where you will define the actions of the object and declare the object itself. A good candidate for such a file is the main file of a user-defined library or simply User.js . We'll use an example to explain the format of object definition. Here is the definition of a global object MyApp .","title":"How"},{"location":"Guide/global_objects/#example","text":"// MyApp definition // to generate metadata press Ctrl-Shift-F5 function MyApp_Launch () { } function MyApp_Close () { } function MyApp_Login ( /**string*/ username , /**string*/ password ) { Tester . Message ( \"Logging as \" + username + \"/\" + password ); } _paramInfoMyApp_Login = { _description : \"Logs into the application\" , _type : \"boolean\" , _returns : \"`true` if login is ok\" , username : { description : \"Name of the user\" }, password : { description : \"Pwd of the user\" } } SeSGlobalObject ( \"MyApp\" );","title":"Example"},{"location":"Guide/global_objects/#format","text":"Every action of MyApp object is prefixed with MyApp_ . We have three such actions: Launch , Close and Login . function MyApp_Launch () { } function MyApp_Close () { } function MyApp_Login ( /**string*/ username , /**string*/ password ) { Tester . Message ( \"Logging as \" + username + \"/\" + password ); } To declare the object use SeSGlobalObject call. It must be placed after definitions of all the actions. SeSGlobalObject ( \"MyApp\" ); You may specify action parameter types through comments /**<type>*/ . function MyApp_Login ( /**string*/ username , /**string*/ password ) You may also describe actions and parameters using paramInfo objects (should have a name of format _paramInfo<action function name> ). _paramInfoMyApp_Login = { _description : \"Logs into the application\" , _type : \"boolean\" , _returns : \"`true` if login is ok\" , username : { description : \"Name of the user\" }, password : { description : \"Pwd of the user\" } }","title":"Format"},{"location":"Guide/global_objects/#compile-metadata","text":"When the object is declared you need to compile the metadata for it. To do this open the file where you defined the object and press Ctrl + Shift + F5 .","title":"Compile Metadata"},{"location":"Guide/global_objects/#object-icons","text":"If you want a specific icon for your object then create two .png files with dimensions 16x16 and 32x32 , name them as <object name>16.png and <object name>32.png and place them beside the file where you declared the object.","title":"Object Icons"},{"location":"Guide/global_objects/#see-also","text":"How to define a global object (video)","title":"See Also"},{"location":"Guide/global_variables/","text":"Global Variables \u00b6 Purpose \u00b6 Global variables are variables that can be accessed anywhere in the script. There are restrictions (specific to Rapise) as to where they may be placed in the test script. These restrictions do not apply to any additional script files you write and then call from your test script. Global variable may declared one or more times. For example, you may declare it in RVL and in JavaScript to share the value. You should not place variables in the Main.js . Use RVL Sheet, User.js or any other Common file for that. Usage \u00b6 Using RVL \u00b6 See Global Variables in RVL . Using User.js \u00b6 Any variable defined in the User.js is assumed to be a global variable. // Note, the variable should be declared outside the scope of any function to be global var g_myGlobalVar = 5 ; function SomeFunction () { } ... Using Common.js \u00b6 You may want to have a common file with global variable re-used across different tests. In this case you need to include the Common.js in the root of the User.js (it is not recommended to do include from within the Test() function). User.js : // Include Common.js eval(File.Include(`%WORKDIR%/Common.js`)) ... The variable re-used across tests should be declared using the lazy initalization mode as follows Common.js : // Global variable lazy declaration: if ( typeof ( g_myGlobalVar ) == 'undefined' ) g_myGlobalVar = 5 ; Using TestInit \u00b6 Note: This is an older way of defining local variables. Since Rapise 3 new way is preferred. Define your global variables in TestInit() . Because Rapise uses JavaScript, you can initialize global variables inside of functions. See the sample TestInit() below. function TestInit () { number_of_visited_links = 0 ; // This variable becomes global var local_var = 5 ; // This variable is local for TestInit function } The keyword var gives variables local scope. A variable initialized without the keyword var will have global scope. The Script Recorder knows about the following functions: Test(), TestInit(), TestPrepare() , and TestFinish() . Do not declare global variables outside of one of the preceding four functions. The Script Recorder alters the script each time it is run, and may erase your changes. See Also \u00b6 See Making Multiple Recordings for details on what effect the script recorder will have on your test script. For details on the structure of the test script, see Understanding the Script .","title":"Global Variables"},{"location":"Guide/global_variables/#global-variables","text":"","title":"Global Variables"},{"location":"Guide/global_variables/#purpose","text":"Global variables are variables that can be accessed anywhere in the script. There are restrictions (specific to Rapise) as to where they may be placed in the test script. These restrictions do not apply to any additional script files you write and then call from your test script. Global variable may declared one or more times. For example, you may declare it in RVL and in JavaScript to share the value. You should not place variables in the Main.js . Use RVL Sheet, User.js or any other Common file for that.","title":"Purpose"},{"location":"Guide/global_variables/#usage","text":"","title":"Usage"},{"location":"Guide/global_variables/#using-rvl","text":"See Global Variables in RVL .","title":"Using RVL"},{"location":"Guide/global_variables/#using-userjs","text":"Any variable defined in the User.js is assumed to be a global variable. // Note, the variable should be declared outside the scope of any function to be global var g_myGlobalVar = 5 ; function SomeFunction () { } ...","title":"Using User.js"},{"location":"Guide/global_variables/#using-commonjs","text":"You may want to have a common file with global variable re-used across different tests. In this case you need to include the Common.js in the root of the User.js (it is not recommended to do include from within the Test() function). User.js : // Include Common.js eval(File.Include(`%WORKDIR%/Common.js`)) ... The variable re-used across tests should be declared using the lazy initalization mode as follows Common.js : // Global variable lazy declaration: if ( typeof ( g_myGlobalVar ) == 'undefined' ) g_myGlobalVar = 5 ;","title":"Using Common.js"},{"location":"Guide/global_variables/#using-testinit","text":"Note: This is an older way of defining local variables. Since Rapise 3 new way is preferred. Define your global variables in TestInit() . Because Rapise uses JavaScript, you can initialize global variables inside of functions. See the sample TestInit() below. function TestInit () { number_of_visited_links = 0 ; // This variable becomes global var local_var = 5 ; // This variable is local for TestInit function } The keyword var gives variables local scope. A variable initialized without the keyword var will have global scope. The Script Recorder knows about the following functions: Test(), TestInit(), TestPrepare() , and TestFinish() . Do not declare global variables outside of one of the preceding four functions. The Script Recorder alters the script each time it is run, and may erase your changes.","title":"Using TestInit"},{"location":"Guide/global_variables/#see-also","text":"See Making Multiple Recordings for details on what effect the script recorder will have on your test script. For details on the structure of the test script, see Understanding the Script .","title":"See Also"},{"location":"Guide/glossary/","text":"Glossary \u00b6 This glossary presents a list of terms and their definitions as they are used in this guide. API - Application Programming Interface AUT - Application Under Test DOM - Document Object Model GUI - Graphical User Interface GWT - Google Web Toolkit IDE - Integrated Development Environment JSON - JavaScript Object Notation REST - REpresentation State Transfer SOAP - Simple Object Access Protocol UI - User Interface XML - eXtensible Markup Language YUI - Yahoo! User Interface (library)","title":"Glossary"},{"location":"Guide/glossary/#glossary","text":"This glossary presents a list of terms and their definitions as they are used in this guide. API - Application Programming Interface AUT - Application Under Test DOM - Document Object Model GUI - Graphical User Interface GWT - Google Web Toolkit IDE - Integrated Development Environment JSON - JavaScript Object Notation REST - REpresentation State Transfer SOAP - Simple Object Access Protocol UI - User Interface XML - eXtensible Markup Language YUI - Yahoo! User Interface (library)","title":"Glossary"},{"location":"Guide/howtos/","text":"How-Tos \u00b6 This section focuses on specific tasks that a Rapise user might want to accomplish. Accessing Files and I/O Functions Change Test Entry Point Change the libraries being used Changing the URL of Website being Tested Create a New Test Deal with a Simulated Object Detecting the Presence of an Object Do Absolute Analog Recording Do Relative Analog Recording Extracting test data from an Excel spread sheet Learn an Object Object Not Found - How to Fix Open a Test Restoring the Default Layout Sending Special Keys to the Current Application","title":"HowTos"},{"location":"Guide/howtos/#how-tos","text":"This section focuses on specific tasks that a Rapise user might want to accomplish. Accessing Files and I/O Functions Change Test Entry Point Change the libraries being used Changing the URL of Website being Tested Create a New Test Deal with a Simulated Object Detecting the Presence of an Object Do Absolute Analog Recording Do Relative Analog Recording Extracting test data from an Excel spread sheet Learn an Object Object Not Found - How to Fix Open a Test Restoring the Default Layout Sending Special Keys to the Current Application","title":"How-Tos"},{"location":"Guide/image_capture/","text":"Image Capture \u00b6 Purpose \u00b6 The Drawing Tools image editor lets you capture a section of the current screen or application under test, add annotations to help document the image and then attach the final result to the current test case , test step, or manual test result . How to Open \u00b6 You can open the Drawing Tools dialog box by clicking on the Image icon on the various rich text editors in Rapise. When you do that, Rapise will minimize itself and display the following screen: You now need to draw a rectangle on your screen that tells Rapise which part of the screen you want to capture. Once that is done, the image editor will open with that part of the screen selected. If you click ESC on the keyboard, it will just open the editor with no initial image. Image Editor Toolbar \u00b6 The image editor provides the following tools: Image Capture - this lets you discard the current image and capture a new screenshot instead Paste From Clipboard - this lets you paste in an image from the Windows clipboard Open - this lets you open an existing image saved on your local computer Save - this lets you save the current image to your local computer Pointer - this lets you select an annotation to edit (arrow, rectangle, ellipse, line, text, etc.) Arrow - this lets you draw an arrow in the current color on top of the current image Rectangle - this lets you draw square / rectangle in the current color on top of the current image Ellipse - this lets you draw a circle / ellipse in the current color on top of the current image Line - this lets you draw a straight line in the current color on top of the current image Pencil - this lets you draw freehand in the current color on top of the current image Text - this lets you add text in the current color and current font on top of the current image. You will need to draw a rectangle to mark the size of the text box before entering in the text. Undo - this will undo the last operation Redo - this will redo the last operation Font Name - this will let you change the font family and size: Color - This lets you change the current color (used in the various annotations): Line Width - This lets you change the current line width (used in the various annotations) Image Editor Footer \u00b6 The footer of the Drawing Tools provides the following options: Scale - this changes the zoom of the current window, allowing you to more easily view small/large images Accept - this accepts the current image and inserts it into the test case , test step or test run that was being edited.","title":"Image Capture"},{"location":"Guide/image_capture/#image-capture","text":"","title":"Image Capture"},{"location":"Guide/image_capture/#purpose","text":"The Drawing Tools image editor lets you capture a section of the current screen or application under test, add annotations to help document the image and then attach the final result to the current test case , test step, or manual test result .","title":"Purpose"},{"location":"Guide/image_capture/#how-to-open","text":"You can open the Drawing Tools dialog box by clicking on the Image icon on the various rich text editors in Rapise. When you do that, Rapise will minimize itself and display the following screen: You now need to draw a rectangle on your screen that tells Rapise which part of the screen you want to capture. Once that is done, the image editor will open with that part of the screen selected. If you click ESC on the keyboard, it will just open the editor with no initial image.","title":"How to Open"},{"location":"Guide/image_capture/#image-editor-toolbar","text":"The image editor provides the following tools: Image Capture - this lets you discard the current image and capture a new screenshot instead Paste From Clipboard - this lets you paste in an image from the Windows clipboard Open - this lets you open an existing image saved on your local computer Save - this lets you save the current image to your local computer Pointer - this lets you select an annotation to edit (arrow, rectangle, ellipse, line, text, etc.) Arrow - this lets you draw an arrow in the current color on top of the current image Rectangle - this lets you draw square / rectangle in the current color on top of the current image Ellipse - this lets you draw a circle / ellipse in the current color on top of the current image Line - this lets you draw a straight line in the current color on top of the current image Pencil - this lets you draw freehand in the current color on top of the current image Text - this lets you add text in the current color and current font on top of the current image. You will need to draw a rectangle to mark the size of the text box before entering in the text. Undo - this will undo the last operation Redo - this will redo the last operation Font Name - this will let you change the font family and size: Color - This lets you change the current color (used in the various annotations): Line Width - This lets you change the current line width (used in the various annotations)","title":"Image Editor Toolbar"},{"location":"Guide/image_capture/#image-editor-footer","text":"The footer of the Drawing Tools provides the following options: Scale - this changes the zoom of the current window, allowing you to more easily view small/large images Accept - this accepts the current image and inserts it into the test case , test step or test run that was being edited.","title":"Image Editor Footer"},{"location":"Guide/incident_logging/","text":"Incident Logging \u00b6 Screenshot \u00b6 Purpose \u00b6 The New Incident logging dialog box lets you log a new incident (also known as a bug or defect) into a connected SpiraTest instance. If you logged the new incident during a manual test execution , it will be linked to the current test run. How to Open \u00b6 You can open the New Incident using Tools > New Incident menu, or by clicking the Log Incident button on the Manual Playback dialog box. Details / Description \u00b6 The Details/Description section lets you enter the short name and long description of the new incident as well as the following fields: Type - the type of the incident (e.g. bug) Detected By - who found the bug (typically your user) Priority - how important the bug is Severity - how critical the bug is Owned By - who the bug should be assigned to (or left unassigned) Detected Release - which version of the system was the bug found in Resolved Release - which version of the system should the bug be fixed in Verified Release - which version of the system was the bug retested in Custom Fields - in addition any custom fields created in your Spira instance will be displayed Comments \u00b6 The Comments section lets you enter a comment that will be logged with the new incident. The field is a rich text field that can contain formatted text. Schedule \u00b6 The Schedule section lets you enter in schedule/effort related information for the new incident: Start Date - This is the planned start date of the new incident End Date - This is the planned completion date of the new incident Estimated Effort - This is the number of hours the incident is expected to take Actual Effort - This is the number of hours that were actually expended Remaining Effort - This is the number of hours remaining to fix the incident In addition, the following calculated fields will be displayed: Percent Complete - This is the measure of much of the incident has been completed. It is calculated from 100% - (Remaining Effort / Estimated Effort) Projected Effort - This the current measure of how long the incident is expected to take based on current information. It is calculated from (Actual Effort + Remaining Effort) Attachments \u00b6 This section displays the list of attachments associated with the new incident. Since Rapise already has a screenshot capture utility built-in, this section is typically not used.","title":"Incident Logging"},{"location":"Guide/incident_logging/#incident-logging","text":"","title":"Incident Logging"},{"location":"Guide/incident_logging/#screenshot","text":"","title":"Screenshot"},{"location":"Guide/incident_logging/#purpose","text":"The New Incident logging dialog box lets you log a new incident (also known as a bug or defect) into a connected SpiraTest instance. If you logged the new incident during a manual test execution , it will be linked to the current test run.","title":"Purpose"},{"location":"Guide/incident_logging/#how-to-open","text":"You can open the New Incident using Tools > New Incident menu, or by clicking the Log Incident button on the Manual Playback dialog box.","title":"How to Open"},{"location":"Guide/incident_logging/#details-description","text":"The Details/Description section lets you enter the short name and long description of the new incident as well as the following fields: Type - the type of the incident (e.g. bug) Detected By - who found the bug (typically your user) Priority - how important the bug is Severity - how critical the bug is Owned By - who the bug should be assigned to (or left unassigned) Detected Release - which version of the system was the bug found in Resolved Release - which version of the system should the bug be fixed in Verified Release - which version of the system was the bug retested in Custom Fields - in addition any custom fields created in your Spira instance will be displayed","title":"Details / Description"},{"location":"Guide/incident_logging/#comments","text":"The Comments section lets you enter a comment that will be logged with the new incident. The field is a rich text field that can contain formatted text.","title":"Comments"},{"location":"Guide/incident_logging/#schedule","text":"The Schedule section lets you enter in schedule/effort related information for the new incident: Start Date - This is the planned start date of the new incident End Date - This is the planned completion date of the new incident Estimated Effort - This is the number of hours the incident is expected to take Actual Effort - This is the number of hours that were actually expended Remaining Effort - This is the number of hours remaining to fix the incident In addition, the following calculated fields will be displayed: Percent Complete - This is the measure of much of the incident has been completed. It is calculated from 100% - (Remaining Effort / Estimated Effort) Projected Effort - This the current measure of how long the incident is expected to take based on current information. It is calculated from (Actual Effort + Remaining Effort)","title":"Schedule"},{"location":"Guide/incident_logging/#attachments","text":"This section displays the list of attachments associated with the new incident. Since Rapise already has a screenshot capture utility built-in, this section is typically not used.","title":"Attachments"},{"location":"Guide/including_other_files/","text":"Including other Files \u00b6 Purpose \u00b6 The eval keyword lets you use external functions and data structures in your test script; eval is a JavaScript reserved word. Usage \u00b6 See the example below: function Test () { eval ( File . Include ( \"myfunctions.js\" )); } See Also \u00b6 Understanding the Script","title":"Including other Files"},{"location":"Guide/including_other_files/#including-other-files","text":"","title":"Including other Files"},{"location":"Guide/including_other_files/#purpose","text":"The eval keyword lets you use external functions and data structures in your test script; eval is a JavaScript reserved word.","title":"Purpose"},{"location":"Guide/including_other_files/#usage","text":"See the example below: function Test () { eval ( File . Include ( \"myfunctions.js\" )); }","title":"Usage"},{"location":"Guide/including_other_files/#see-also","text":"Understanding the Script","title":"See Also"},{"location":"Guide/internal_debugger/","text":"Internal Debugger \u00b6 Purpose \u00b6 The Internal Debugger provides: Persistent Breakpoints Execution Control Watch View Variable/Call Stack View Tooltips . Usage \u00b6 To enable debugger for a test click button on the toolbar or use menu Tools > Debugger : Set a breakpoint on the first line of the Test function and click Play button on the toolbar. If you start debugging for the first time Rapise may prompt you to install Microsoft Script Debugger : Follow the prompts. When Microsoft Script Debugger is installed click Play once again. Rapise will stop execution at the first line of the test and show debugger controls and views. In the screenshot above, you can see the Debugger buttons available on the toolbar at the top of the screen as well as the Variables and Watch sections in the lower pane. Next statement is highlighted in yellow color.","title":"Internal Debugger"},{"location":"Guide/internal_debugger/#internal-debugger","text":"","title":"Internal Debugger"},{"location":"Guide/internal_debugger/#purpose","text":"The Internal Debugger provides: Persistent Breakpoints Execution Control Watch View Variable/Call Stack View Tooltips .","title":"Purpose"},{"location":"Guide/internal_debugger/#usage","text":"To enable debugger for a test click button on the toolbar or use menu Tools > Debugger : Set a breakpoint on the first line of the Test function and click Play button on the toolbar. If you start debugging for the first time Rapise may prompt you to install Microsoft Script Debugger : Follow the prompts. When Microsoft Script Debugger is installed click Play once again. Rapise will stop execution at the first line of the test and show debugger controls and views. In the screenshot above, you can see the Debugger buttons available on the toolbar at the top of the screen as well as the Variables and Watch sections in the lower pane. Next statement is highlighted in yellow color.","title":"Usage"},{"location":"Guide/java_awt_swing_testing/","text":"Java AWT/Swing Testing \u00b6 Purpose \u00b6 Rapise supports the testing of Java applications using either the Abstract Window Toolkit (AWT) or Swing graphic user interface toolkits. For maximum flexibility, Rapise can connect to your choice of JVM. Java Bridge Installation \u00b6 In order to use a particular Java Virtual Machine (JVM) with Rapise you need to install Java Bridge into it. Installation process consists of several simple steps: Click on the Settings > Java button. This will launch the Java Bridge installation dialog: Choose target JVM in the list of available Java machines and press Install button Verify that the installation is successful To verify that the bridge installed correctly, check that the following files have been installed inside your Java VM (typically found at C:\\Program Files (x86)\\Java\\jre1.x.x_xxx ): lib\\accessibility.properties lib\\ext\\jaccess.jar lib\\ext\\smartestudio-bridge.jar If you don't see all three of these files then it means the bridge was not installed correctly. Troubleshooting the Configuration \u00b6 To help you make sure that your environment is correctly setup and also to help you try out Rapise, we have a sample application called AUTJava (AUT = A pplication U nder T est) that can be found in the folder: C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA To run the application, right-click on the x86run.cmd file and choose Run as Administrator . If the application doesn't appear correctly then you may need to set the JAVA_HOME environment variable. To do this, open up the Windows control panel and choose System > Advanced System Settings : Click on the Environment Variables button: Click on the option to add a System Variable and then add the following: Variable = JAVA_HOME Value = C:\\Program Files (x86)\\Java\\jre1.x.x_xxx (you will need to match the location of your actual Java VM) Now you should be able to launch the AUTJava sample application. To verify that Rapise is configured correctly, click on the SPY menu in Rapise and choose Java . Then click on the main Spy icon and the Java Spy will start up: Click the Ctrl + G button combination to start tracking and then move the mouse over one of the buttons in the sample application and click Ctrl + G again. You should see the following: Which shows that Rapise is able to see the AWT button (in this example) and its properties. However if you see the following instead: it means that you didn't run the sample application using \"Run as Administrator \", close the application and try again using \"Run as Administrator\" and you will see: You are now ready to start testing your real application. Make sure to also start it using \"Run as Administrator \". Analyzing the Java Application using the Java Spy \u00b6 With Spy you can walk along the tree of Java objects in your application. Save to File \u00b6 You can save the Spy data for a particular node and all its descendants to a text file. Reflection Information \u00b6 You can save reflection information for a java class used to implement a GUI control.","title":"Java AWT/Swing"},{"location":"Guide/java_awt_swing_testing/#java-awtswing-testing","text":"","title":"Java AWT/Swing Testing"},{"location":"Guide/java_awt_swing_testing/#purpose","text":"Rapise supports the testing of Java applications using either the Abstract Window Toolkit (AWT) or Swing graphic user interface toolkits. For maximum flexibility, Rapise can connect to your choice of JVM.","title":"Purpose"},{"location":"Guide/java_awt_swing_testing/#java-bridge-installation","text":"In order to use a particular Java Virtual Machine (JVM) with Rapise you need to install Java Bridge into it. Installation process consists of several simple steps: Click on the Settings > Java button. This will launch the Java Bridge installation dialog: Choose target JVM in the list of available Java machines and press Install button Verify that the installation is successful To verify that the bridge installed correctly, check that the following files have been installed inside your Java VM (typically found at C:\\Program Files (x86)\\Java\\jre1.x.x_xxx ): lib\\accessibility.properties lib\\ext\\jaccess.jar lib\\ext\\smartestudio-bridge.jar If you don't see all three of these files then it means the bridge was not installed correctly.","title":"Java Bridge Installation"},{"location":"Guide/java_awt_swing_testing/#troubleshooting-the-configuration","text":"To help you make sure that your environment is correctly setup and also to help you try out Rapise, we have a sample application called AUTJava (AUT = A pplication U nder T est) that can be found in the folder: C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA To run the application, right-click on the x86run.cmd file and choose Run as Administrator . If the application doesn't appear correctly then you may need to set the JAVA_HOME environment variable. To do this, open up the Windows control panel and choose System > Advanced System Settings : Click on the Environment Variables button: Click on the option to add a System Variable and then add the following: Variable = JAVA_HOME Value = C:\\Program Files (x86)\\Java\\jre1.x.x_xxx (you will need to match the location of your actual Java VM) Now you should be able to launch the AUTJava sample application. To verify that Rapise is configured correctly, click on the SPY menu in Rapise and choose Java . Then click on the main Spy icon and the Java Spy will start up: Click the Ctrl + G button combination to start tracking and then move the mouse over one of the buttons in the sample application and click Ctrl + G again. You should see the following: Which shows that Rapise is able to see the AWT button (in this example) and its properties. However if you see the following instead: it means that you didn't run the sample application using \"Run as Administrator \", close the application and try again using \"Run as Administrator\" and you will see: You are now ready to start testing your real application. Make sure to also start it using \"Run as Administrator \".","title":"Troubleshooting the Configuration"},{"location":"Guide/java_awt_swing_testing/#analyzing-the-java-application-using-the-java-spy","text":"With Spy you can walk along the tree of Java objects in your application.","title":"Analyzing the Java Application using the Java Spy"},{"location":"Guide/java_awt_swing_testing/#save-to-file","text":"You can save the Spy data for a particular node and all its descendants to a text file.","title":"Save to File"},{"location":"Guide/java_awt_swing_testing/#reflection-information","text":"You can save reflection information for a java class used to implement a GUI control.","title":"Reflection Information"},{"location":"Guide/java_swt/","text":"Java SWT \u00b6 Overview \u00b6 The Java SWT GUI library is an alternative to Swing developed by the Eclipse foundation and it provides Java applications the ability to access the native GUI libraries of the operating system using JNI (Java Native Interface) in a manner that is similar to those programs written using operating system-specific APIs. Programs that call SWT are portable, but the implementation of the toolkit, despite part of it being written in Java, is unique for each platform. Rapise supports the testing of applications written using Java Standard Widget Toolkit (SWT) using its JavaSWT extensions library (which is based on the UI Automation technology in Windows). Since SWT displays applications using native Windows controls it doesn\u2019t need the Java Access Bridge to be installed (unlike Java AWT/Swing applications). Sample Application \u00b6 In the Samples section of the Rapise Start Page you should see our sample Java SWT AUT: You can use this application with Rapise to try out the Java SWT testing capabilities: You should record tests using the special SWT library You should use the UIAutomation Spy for inspecting objects.","title":"Java SWT"},{"location":"Guide/java_swt/#java-swt","text":"","title":"Java SWT"},{"location":"Guide/java_swt/#overview","text":"The Java SWT GUI library is an alternative to Swing developed by the Eclipse foundation and it provides Java applications the ability to access the native GUI libraries of the operating system using JNI (Java Native Interface) in a manner that is similar to those programs written using operating system-specific APIs. Programs that call SWT are portable, but the implementation of the toolkit, despite part of it being written in Java, is unique for each platform. Rapise supports the testing of applications written using Java Standard Widget Toolkit (SWT) using its JavaSWT extensions library (which is based on the UI Automation technology in Windows). Since SWT displays applications using native Windows controls it doesn\u2019t need the Java Access Bridge to be installed (unlike Java AWT/Swing applications).","title":"Overview"},{"location":"Guide/java_swt/#sample-application","text":"In the Samples section of the Rapise Start Page you should see our sample Java SWT AUT: You can use this application with Rapise to try out the Java SWT testing capabilities: You should record tests using the special SWT library You should use the UIAutomation Spy for inspecting objects.","title":"Sample Application"},{"location":"Guide/javascript_ide/","text":"JavaScript IDE \u00b6 Purpose \u00b6 The JavaScript IDE includes an editor and a debugger . Usage \u00b6 Simply open a script to view the editing features; create a breakpoint and play the script to view the debugging features . See Also \u00b6 Learn about MS JScript .","title":"JavaScript IDE"},{"location":"Guide/javascript_ide/#javascript-ide","text":"","title":"JavaScript IDE"},{"location":"Guide/javascript_ide/#purpose","text":"The JavaScript IDE includes an editor and a debugger .","title":"Purpose"},{"location":"Guide/javascript_ide/#usage","text":"Simply open a script to view the editing features; create a breakpoint and play the script to view the debugging features .","title":"Usage"},{"location":"Guide/javascript_ide/#see-also","text":"Learn about MS JScript .","title":"See Also"},{"location":"Guide/jscript_language_reference/","text":"JScript Language Reference \u00b6 NodeJS vs JScript \u00b6 Default JS engine for Rapise is Microsoft JScript with WScript runtime. This document contains language reference for this version. Since Rapise 6.7 there is an alternative JavaScript runtime - NodeJS v14.15.3. As for 6.7 it is an experimental feature that you may enable either for single test project or globally . NodeJS Support Features and Limitations \u00b6 As of Rapise 6.7 NodeJS support is still experimental and default engine is still JScript/WScript. However the plan is to make NodeJS the default in the future. Switching to NodeJS is safe in most of the cases - older tests should just work on new JS runtime without any noticeable differences. The engine is defined in two places: In the Test Settings (one of Default , Node , WScript ). Where Default means use engine defined in the Global Options . In Global Options (one of Default , Node , WScript ). Where Default means WScript , but in the future it will be Node . Features \u00b6 NodeJS v14 contains most of latest features of JavaScript including EcmaScript2015 (ES6) and beyond . You may see more detailed list of features here . You may find the most complete and up to date language reference at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference . You may use most of available npm packages in your test scripts. You may include node_modules folders in the root of your testing framework (i.e. %WORKDIR%\\node_modules ). Limitations \u00b6 Rapise IDE and JavaScript editor contains lots of features for comfortable JavaScript editing. This part is now tailored for JScript/WScript and may show false negative behavior. It may show warnings during editing because some syntax is not JScript compatible (although it is fine for Node/ES6). I.e. the following language features are not understood by the parser and may show a warning that you need to just ignore: let , const keywords ()=>lambda function definitions (...args) {parts,of,obj} = someobj obj = {field, defs} '`' strings class support getters, setters object methods. NodeJS engine now runs in 32 bit mode. This is required to keep compatibility with ActiveXObject support that is an essential part of WScript but has to be emulated in NodeJS. Rapise has own copy of node.exe installed. So if you have npm modules installed globally and need to use them in your test, you have to install them locally into the framework. npm is not installed with Rapise. So if you want ot use it, you need to have one installed separately. Reference \u00b6 The language reference covers EcmaScript v2 supported by default JScript Engine. It is missing majority of latest features, properties and methods. For example, there is no Array.join or String.trim . Feature Information Microsoft JScript Features - ECMA Microsoft JScript Features - Non-ECMA Errors JScript Run-time Errors JScript Syntax Errors Functions GetObject Function ScriptEngine Function ScriptEngineBuildVersion Function ScriptEngineMajorVersion Function ScriptEngineMinorVersion Function Methods A-C \u00b6 abs Method acos Method anchor Method apply Method asin Method atan Method atan2 Method atEnd Method big Method blink Method bold Method call Method ceil Method charAt Method charCodeAt Method compile Method concat Method (Array) concat Method (String) cos Method Methods D-F \u00b6 decodeURI Method decodeURIComponent Method dimensions Method encodeURI Method encodeURIComponent Method escape Method eval Method exec Method exp Method fixed Method floor Method fontcolor Method fontsize Method fromCharCode Method Methods G \u00b6 getDate Method getDay Method getFullYear Method getHours Method getItem Method getMilliseconds Method getMinutes Method getMonth Method getSeconds Method getTime Method getTimezoneOffset Method getUTCDate Method getUTCDay Method getUTCFullYear Method getUTCHours Method getUTCMilliseconds Method getUTCMinutes Method getUTCMonth Method getUTCSeconds Method getVarDate Method getYear Method Methods I-M \u00b6 indexOf Method isFinite Method isNaN Method italics Method item Method join Method lastIndexOf Method lbound Method link Method localeCompare Method log Method match Method max Method min Method moveFirst Method moveNext Method Methods P-R \u00b6 parse Method parseFloat Method parseInt Method pop Method pow Method push Method random Method replace Method reverse Method round Method Methods S \u00b6 search Method setDate Method setFullYear Method setHours Method setMilliseconds Method setMinutes Method setMonth Method setSeconds Method setTime Method setUTCDate Method setUTCFullYear Method setUTCHours Method setUTCMilliseconds Method setUTCMinutes Method setUTCMonth Method setUTCSeconds Method setYear Method shift Method sin Method slice Method (Array) slice Method (String) small Method sort Method splice Method split Method sqrt Method strike Method sub Method substr Method substring Method sup Method Methods T-V \u00b6 tan Method test Method toArray Method toDateString Method toExponential Method toFixed Method toGMTString Method toLocaleDateString Method toLocaleLowerCase Method toLocaleString Method toLocaleTimeString Method toLocaleUpperCase Method toLowerCase Method toPrecision Method toString Method toTimeString Method toUpperCase Method toUTCString Method ubound Method unescape Method unshift Method UTC Method valueOf Method Objects \u00b6 ActiveXObject Object Array Object arguments Object Boolean Object Date Object Enumerator Object Error Object Function Object Global Object Math Object Number Object Object Object RegExp Object Regular Expression Object String Object VBArray Object Operators \u00b6 Addition Assignment Operator (+=) Addition Operator (+) Assignment Operator (=) Bitwise AND Assignment Operator (&=) Bitwise AND Operator (&) Bitwise Left Shift Operator (<<) Bitwise NOT Operator (~) Bitwise OR Assignment Operator (|=) Bitwise OR Operator (|) Bitwise Right Shift Operator (>>) Bitwise XOR Assignment Operator (^=) Bitwise XOR Operator (^) Comma Operator (,) Comparison Operators Compound Assignment Operators Conditional (Ternary) Operator (?:) delete Operator Division Assignment Operator (/=) Division Operator (/) in Operator Increment (++) and Decrement (--) Operators instanceof Operator Left Shift Assignment Operator (<<=) Logical AND Operator (&&) Logical NOT Operator (!) Logical OR Operator (||) Modulus Assignment Operator (%=) Modulus Operator (%) Multiplication Assignment Operator (*=) Multiplication Operator (*) new Operator Right Shift Assignment Operator (>>=) Subtraction Assignment Operator (-=) Subtraction Operator (-) typeof Operator Unsigned Right Shift Operator (>>>) Unsigned Right Shift Assignment Operator (>>>=) void Operator Properties \u00b6 0...n Properties $1...$9 Properties arguments Property callee Property caller Property constructor Property description Property E Property global Property hasOwnProperty Method ignoreCase Property index Property Infinity Property input Property ($_) isPrototypeOf Method lastIndex Property leftContext Property ($`) length Property (arguments) length Property (Array) lastMatch Property ($&) lastParen Property ($+) length Property (Function) length Property (String) LN10 Property LN2 Property LOG10E Property LOG2E Property MAX_VALUE Property message Property MIN_VALUE Property multiline Property name Property NaN Property NaN Property (Global) NEGATIVE_INFINITY Property number Property PI Property POSITIVE_INFINITY Property propertyIsEnumerable Property prototype Property rightContext Property ($') source Property SQRT1_2 Property SQRT2 Property undefined Property Statements \u00b6 @cc_on Statement @if Statement @set Statement break Statement Comment Statements continue Statement do...while Statement for Statement for...in Statement function Statement if...else Statement Labeled Statement return Statement switch Statement this Statement throw Statement try...catch...finally Statement var Statement while Statement with Statement JScript Fundamentals \u00b6 What Is JScript? Writing JScript Code JScript Variables JScript Data Types JScript Operators Operator Precedence Controlling Program Flow JScript Functions JScript Objects Creating Your Own Objects Intrinsic Objects JScript Reserved Words Advanced JScript \u00b6 Advanced Object Creation Recursion Variable Scope Copying, Passing, and Comparing Data Using Arrays Special Characters Troubleshooting Your Scripts Conditional Compilation Conditional Compilation Variables Introduction to Regular Expressions \u00b6 Regular Expressions Early Beginnings Uses for Regular Expressions Regular Expression Syntax Build a Regular Expression Order of Precedence Ordinary Characters Special Characters Non-Printable Characters Character Matching Quantifiers Anchors Alternation and Grouping Backreferences","title":"JScript Language Reference"},{"location":"Guide/jscript_language_reference/#jscript-language-reference","text":"","title":"JScript Language Reference"},{"location":"Guide/jscript_language_reference/#nodejs-vs-jscript","text":"Default JS engine for Rapise is Microsoft JScript with WScript runtime. This document contains language reference for this version. Since Rapise 6.7 there is an alternative JavaScript runtime - NodeJS v14.15.3. As for 6.7 it is an experimental feature that you may enable either for single test project or globally .","title":"NodeJS vs JScript"},{"location":"Guide/jscript_language_reference/#nodejs-support-features-and-limitations","text":"As of Rapise 6.7 NodeJS support is still experimental and default engine is still JScript/WScript. However the plan is to make NodeJS the default in the future. Switching to NodeJS is safe in most of the cases - older tests should just work on new JS runtime without any noticeable differences. The engine is defined in two places: In the Test Settings (one of Default , Node , WScript ). Where Default means use engine defined in the Global Options . In Global Options (one of Default , Node , WScript ). Where Default means WScript , but in the future it will be Node .","title":"NodeJS Support Features and Limitations"},{"location":"Guide/jscript_language_reference/#features","text":"NodeJS v14 contains most of latest features of JavaScript including EcmaScript2015 (ES6) and beyond . You may see more detailed list of features here . You may find the most complete and up to date language reference at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference . You may use most of available npm packages in your test scripts. You may include node_modules folders in the root of your testing framework (i.e. %WORKDIR%\\node_modules ).","title":"Features"},{"location":"Guide/jscript_language_reference/#limitations","text":"Rapise IDE and JavaScript editor contains lots of features for comfortable JavaScript editing. This part is now tailored for JScript/WScript and may show false negative behavior. It may show warnings during editing because some syntax is not JScript compatible (although it is fine for Node/ES6). I.e. the following language features are not understood by the parser and may show a warning that you need to just ignore: let , const keywords ()=>lambda function definitions (...args) {parts,of,obj} = someobj obj = {field, defs} '`' strings class support getters, setters object methods. NodeJS engine now runs in 32 bit mode. This is required to keep compatibility with ActiveXObject support that is an essential part of WScript but has to be emulated in NodeJS. Rapise has own copy of node.exe installed. So if you have npm modules installed globally and need to use them in your test, you have to install them locally into the framework. npm is not installed with Rapise. So if you want ot use it, you need to have one installed separately.","title":"Limitations"},{"location":"Guide/jscript_language_reference/#reference","text":"The language reference covers EcmaScript v2 supported by default JScript Engine. It is missing majority of latest features, properties and methods. For example, there is no Array.join or String.trim . Feature Information Microsoft JScript Features - ECMA Microsoft JScript Features - Non-ECMA Errors JScript Run-time Errors JScript Syntax Errors Functions GetObject Function ScriptEngine Function ScriptEngineBuildVersion Function ScriptEngineMajorVersion Function ScriptEngineMinorVersion Function","title":"Reference"},{"location":"Guide/jscript_language_reference/#methods-a-c","text":"abs Method acos Method anchor Method apply Method asin Method atan Method atan2 Method atEnd Method big Method blink Method bold Method call Method ceil Method charAt Method charCodeAt Method compile Method concat Method (Array) concat Method (String) cos Method","title":"Methods A-C"},{"location":"Guide/jscript_language_reference/#methods-d-f","text":"decodeURI Method decodeURIComponent Method dimensions Method encodeURI Method encodeURIComponent Method escape Method eval Method exec Method exp Method fixed Method floor Method fontcolor Method fontsize Method fromCharCode Method","title":"Methods D-F"},{"location":"Guide/jscript_language_reference/#methods-g","text":"getDate Method getDay Method getFullYear Method getHours Method getItem Method getMilliseconds Method getMinutes Method getMonth Method getSeconds Method getTime Method getTimezoneOffset Method getUTCDate Method getUTCDay Method getUTCFullYear Method getUTCHours Method getUTCMilliseconds Method getUTCMinutes Method getUTCMonth Method getUTCSeconds Method getVarDate Method getYear Method","title":"Methods G"},{"location":"Guide/jscript_language_reference/#methods-i-m","text":"indexOf Method isFinite Method isNaN Method italics Method item Method join Method lastIndexOf Method lbound Method link Method localeCompare Method log Method match Method max Method min Method moveFirst Method moveNext Method","title":"Methods I-M"},{"location":"Guide/jscript_language_reference/#methods-p-r","text":"parse Method parseFloat Method parseInt Method pop Method pow Method push Method random Method replace Method reverse Method round Method","title":"Methods P-R"},{"location":"Guide/jscript_language_reference/#methods-s","text":"search Method setDate Method setFullYear Method setHours Method setMilliseconds Method setMinutes Method setMonth Method setSeconds Method setTime Method setUTCDate Method setUTCFullYear Method setUTCHours Method setUTCMilliseconds Method setUTCMinutes Method setUTCMonth Method setUTCSeconds Method setYear Method shift Method sin Method slice Method (Array) slice Method (String) small Method sort Method splice Method split Method sqrt Method strike Method sub Method substr Method substring Method sup Method","title":"Methods S"},{"location":"Guide/jscript_language_reference/#methods-t-v","text":"tan Method test Method toArray Method toDateString Method toExponential Method toFixed Method toGMTString Method toLocaleDateString Method toLocaleLowerCase Method toLocaleString Method toLocaleTimeString Method toLocaleUpperCase Method toLowerCase Method toPrecision Method toString Method toTimeString Method toUpperCase Method toUTCString Method ubound Method unescape Method unshift Method UTC Method valueOf Method","title":"Methods T-V"},{"location":"Guide/jscript_language_reference/#objects","text":"ActiveXObject Object Array Object arguments Object Boolean Object Date Object Enumerator Object Error Object Function Object Global Object Math Object Number Object Object Object RegExp Object Regular Expression Object String Object VBArray Object","title":"Objects"},{"location":"Guide/jscript_language_reference/#operators","text":"Addition Assignment Operator (+=) Addition Operator (+) Assignment Operator (=) Bitwise AND Assignment Operator (&=) Bitwise AND Operator (&) Bitwise Left Shift Operator (<<) Bitwise NOT Operator (~) Bitwise OR Assignment Operator (|=) Bitwise OR Operator (|) Bitwise Right Shift Operator (>>) Bitwise XOR Assignment Operator (^=) Bitwise XOR Operator (^) Comma Operator (,) Comparison Operators Compound Assignment Operators Conditional (Ternary) Operator (?:) delete Operator Division Assignment Operator (/=) Division Operator (/) in Operator Increment (++) and Decrement (--) Operators instanceof Operator Left Shift Assignment Operator (<<=) Logical AND Operator (&&) Logical NOT Operator (!) Logical OR Operator (||) Modulus Assignment Operator (%=) Modulus Operator (%) Multiplication Assignment Operator (*=) Multiplication Operator (*) new Operator Right Shift Assignment Operator (>>=) Subtraction Assignment Operator (-=) Subtraction Operator (-) typeof Operator Unsigned Right Shift Operator (>>>) Unsigned Right Shift Assignment Operator (>>>=) void Operator","title":"Operators"},{"location":"Guide/jscript_language_reference/#properties","text":"0...n Properties $1...$9 Properties arguments Property callee Property caller Property constructor Property description Property E Property global Property hasOwnProperty Method ignoreCase Property index Property Infinity Property input Property ($_) isPrototypeOf Method lastIndex Property leftContext Property ($`) length Property (arguments) length Property (Array) lastMatch Property ($&) lastParen Property ($+) length Property (Function) length Property (String) LN10 Property LN2 Property LOG10E Property LOG2E Property MAX_VALUE Property message Property MIN_VALUE Property multiline Property name Property NaN Property NaN Property (Global) NEGATIVE_INFINITY Property number Property PI Property POSITIVE_INFINITY Property propertyIsEnumerable Property prototype Property rightContext Property ($') source Property SQRT1_2 Property SQRT2 Property undefined Property","title":"Properties"},{"location":"Guide/jscript_language_reference/#statements","text":"@cc_on Statement @if Statement @set Statement break Statement Comment Statements continue Statement do...while Statement for Statement for...in Statement function Statement if...else Statement Labeled Statement return Statement switch Statement this Statement throw Statement try...catch...finally Statement var Statement while Statement with Statement","title":"Statements"},{"location":"Guide/jscript_language_reference/#jscript-fundamentals","text":"What Is JScript? Writing JScript Code JScript Variables JScript Data Types JScript Operators Operator Precedence Controlling Program Flow JScript Functions JScript Objects Creating Your Own Objects Intrinsic Objects JScript Reserved Words","title":"JScript Fundamentals"},{"location":"Guide/jscript_language_reference/#advanced-jscript","text":"Advanced Object Creation Recursion Variable Scope Copying, Passing, and Comparing Data Using Arrays Special Characters Troubleshooting Your Scripts Conditional Compilation Conditional Compilation Variables","title":"Advanced JScript"},{"location":"Guide/jscript_language_reference/#introduction-to-regular-expressions","text":"Regular Expressions Early Beginnings Uses for Regular Expressions Regular Expression Syntax Build a Regular Expression Order of Precedence Ordinary Characters Special Characters Non-Printable Characters Character Matching Quantifiers Anchors Alternation and Grouping Backreferences","title":"Introduction to Regular Expressions"},{"location":"Guide/learn_object/","text":"Learn an Object \u00b6 To illustrate learning an object, we return to the TwoDialogs sample. First, let's learn the OK button using recording. We have done this before in the TwoDialogs sample. RECORD \u00b6 Step 1. Run the Application \u00b6 Run TwoDialogs sample application. By default this will be located in 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Step 2. Create a New Test \u00b6 Start Rapise and create a new test, choose the Basic methodology, and call it TwoDialogsRecording . Select JavaScript scripting mode when prompted. Step 3. Start Recording \u00b6 Press the Record button in the toolbar of Rapise. Step 4. Select an Application to Record \u00b6 When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and in the library list, select only the top library on the list - Auto . Press the Select button. Step 5. Do Recording \u00b6 In the TwoDialogs application, use the mouse to press the OK button. Dismiss the alert message box complaining about the empty name. Step 6. Observe \u00b6 Notice that two things will happen. Firstly, the OK button will be surrounded with a red marker, indicating that the OK button has been learned. Secondly, the action of clicking the OK button is recorded in the Recording Activity dialog. That recording has a single entry: Step 7. Finish Recording \u00b6 Press the Finish button (or press Ctrl + 3 ) to end the recording. Step 8. Observe \u00b6 Rapise will return to be the foreground application, and it will have selected the Main.js . Notice that there is a single line or script that has been added to the script file: SeS ( \"OK\" ). DoAction (); This line of script has two interesting parts. The SeS(\"OK\") is the identity (not the locator or location) of the OK button. This is the object that was learned during recording. The DoAction() is the instruction to the running script to take the action associated with a button. A normal button has only a single possible action - to be pressed. The Record/Learn process has taken both steps for you, and joined them together. Now, let's use (normal) object learning to learn the same OK button and to call a method for the object. LEARN \u00b6 Step 1. Run the Application \u00b6 Run TwoDialogs sample application. By default this will be located in 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Step 2. Create a New Test \u00b6 Start Rapise and create a new test, choose the Basic methodology, and call it TwoDialogsLearn . Select JavaScript scripting mode when prompted. Step 3. Start Recording \u00b6 Press the Record button in the toolbar of Rapise. Step 4. Select an Application to Record \u00b6 When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application. Leave the library selection in its default state - we will not be using it this time. Press Select . Wait for the Recording Activity dialog to appear in the lower-right corner of the screen. Step 5. Do Learn \u00b6 Hover the mouse over the OK button of the TwoDialogs AUT but do not press the button. With the mouse positioned over the OK button, press Ctrl + 2 ( the Learn command). You will see the OK button surrounded with a red highlight. You will also see that the Recording Activity dialog has been updated with a Learn event. Step 6. Finish Recording \u00b6 Press the Finish button or Ctrl + 3 to end the recording session. Step 7. Observe \u00b6 You will now see that Rapise has learned about the OK button, and the Object Tree in the upper left-hand pane of the Rapise has a new entry called OK (shown here expanded). The list of items contained under the OK button entry in the Object Tree is the set of methods and properties available for the OK object. Actions and properties have different icons. The items are grouped by the library, so the DoAction() method is unique to the OK UIAButton object whereas the DoClick() method is generic and available for all Windows objects. Notice that the DoAction is listed and recall in the previous section when we recorded pressing the button, the DoAction method was chosen for the button-press action. While we are looking at this OK object, let's make a few observations about it. These observations will be useful for your later dealings with Rapise and will make the script more informational and relevant as you delve into Rapise. First, look down at the Properties box that appears under the Object Tree in the bottom left corner of the Rapise screen. The screenshot below has some of the tree nodes expanded. First , notice that the OK button has a locator defined. When you have Rapise learn an object. it must collect data about that object so that it can relocate it even if the application has moved on the screen, and even if the application is in a different state of execution. In order to accomplish this, Rapise looks for all useful ways to uniquely identify the object. As bad, or perhaps worse, than not being able to find an object would be to find the wrong object on the AUT. Every time Rapise is required to locate this object, it will first try to use the first locator. If it fails to positively and uniquely match with that locator, it will try the second (if defined), and so on. Rapise will not give up and declare failure until it has failed to identify with all available locators. Second , notice the ID entry in the Object section of the pane. This is the name of the object from Rapise's perspective. All Rapise objects are available through the SeS() function call. Therefore, if we want to refer to the OK object, we will use SeS(\"OK\") to refer to it. Once we have correctly identified the object, all valid methods and properties can be accessed by using that object as the basis. Thirdly , notice in the main editor window of the Rapise, that no code has been added. When you identified the OK button, all Rapise did was add the new object to the Object Tree. It did not write any code in the JavaScript file. Step 8. Use Learned Object \u00b6 In the automated (recorded) section above, you saw that when you pressed the OK button on the dialog, Rapise recorded a function like this: SeS ( \"OK\" ). DoAction (); This time, you will use the established name of the OK button object, but do something a little more interesting than its default action to demonstrate how to use Rapise. Move the cursor into the editor part of the Rapise and make sure you are editing the file called Main.js . At the moment, this file still looks something like this: //########## Script Steps ############## function Test(params) { } g_load_libraries=[\"UIAutomation\"]; Between the open and close brace, add the following command: SeS ( \"OK\" ). DoClick (); Hit the Play button and watch what happens. The click will register as a command to the object and it will perform the action on the object. While we have the context of this situation, let's complicate it just a little more to illustrate the intricacy as well as the flexibility of Rapise. There is a method whose name looks interesting: DoLButtonDown() . If we were to invoke DoLButtonDown() on the OK object, we would expect this would be the same as DoClick(). However, go back to the AUT for a moment. Using the mouse, press the left mouse button over the OK button but don't take your finger off the left mouse button. What happens is that the button takes its pressed state in appearance, but the button is not clicked. The reason for this is that the DoClick() (or DoAction() ) events cause the mouse button be clicked as well as released. Therefore, we would need to have a pair of events: SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); in order to make the \"click\" happen. Try this in the test script you have created by adding those two lines of code in place of the DoClick() line. It doesn't work! Let's play a little with this problem. When you press the Play button, leave the mouse alone. Just press the left mouse button on the Rapise Play button and take your hand away from the mouse. The script does not press the OK button in the TwoDialogs AUT. Now, press the Play button on the Rapise and quickly move the mouse to hover over the OK button in the TwoDialogs AUT. Now it works! What's going on here is that the DoLButtonDown() and DoLButtonUp() methods are pressing the mouse irrespective of where the mouse cursor is positioned. The other functions, DoClick and DoAction are methods that are applied to the button and so they are applied to the button. Before we can expect DoLButtonDown() and DoLButtonUp() methods to work, we have to first the mouse cursor to the button. function Test ( params ) { SeS ( \"OK\" ). DoMouseMove ( 25 , 15 ); SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); } will accomplish that. Notice that Rapise will actually move the mouse to the coordinates (25, 15) within the OK button. Also notice that if you move the mouse while the test is playing, you will make the test fail. As a last experiment in this arena, try moving the mouse outside the boundaries of the OK button object before calling the DoLButtonDown() function. function Test ( params ) { SeS ( \"OK\" ). DoMouseMove ( 250 , 150 ); SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); } Once again, the script will fail. See Also \u00b6 How-Tos","title":"Learn an Object"},{"location":"Guide/learn_object/#learn-an-object","text":"To illustrate learning an object, we return to the TwoDialogs sample. First, let's learn the OK button using recording. We have done this before in the TwoDialogs sample.","title":"Learn an Object"},{"location":"Guide/learn_object/#record","text":"","title":"RECORD"},{"location":"Guide/learn_object/#step-1-run-the-application","text":"Run TwoDialogs sample application. By default this will be located in 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe","title":"Step 1. Run the Application"},{"location":"Guide/learn_object/#step-2-create-a-new-test","text":"Start Rapise and create a new test, choose the Basic methodology, and call it TwoDialogsRecording . Select JavaScript scripting mode when prompted.","title":"Step 2. Create a New Test"},{"location":"Guide/learn_object/#step-3-start-recording","text":"Press the Record button in the toolbar of Rapise.","title":"Step 3. Start Recording"},{"location":"Guide/learn_object/#step-4-select-an-application-to-record","text":"When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and in the library list, select only the top library on the list - Auto . Press the Select button.","title":"Step 4. Select an Application to Record"},{"location":"Guide/learn_object/#step-5-do-recording","text":"In the TwoDialogs application, use the mouse to press the OK button. Dismiss the alert message box complaining about the empty name.","title":"Step 5. Do Recording"},{"location":"Guide/learn_object/#step-6-observe","text":"Notice that two things will happen. Firstly, the OK button will be surrounded with a red marker, indicating that the OK button has been learned. Secondly, the action of clicking the OK button is recorded in the Recording Activity dialog. That recording has a single entry:","title":"Step 6. Observe"},{"location":"Guide/learn_object/#step-7-finish-recording","text":"Press the Finish button (or press Ctrl + 3 ) to end the recording.","title":"Step 7. Finish Recording"},{"location":"Guide/learn_object/#step-8-observe","text":"Rapise will return to be the foreground application, and it will have selected the Main.js . Notice that there is a single line or script that has been added to the script file: SeS ( \"OK\" ). DoAction (); This line of script has two interesting parts. The SeS(\"OK\") is the identity (not the locator or location) of the OK button. This is the object that was learned during recording. The DoAction() is the instruction to the running script to take the action associated with a button. A normal button has only a single possible action - to be pressed. The Record/Learn process has taken both steps for you, and joined them together. Now, let's use (normal) object learning to learn the same OK button and to call a method for the object.","title":"Step 8. Observe"},{"location":"Guide/learn_object/#learn","text":"","title":"LEARN"},{"location":"Guide/learn_object/#step-1-run-the-application_1","text":"Run TwoDialogs sample application. By default this will be located in 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe","title":"Step 1. Run the Application"},{"location":"Guide/learn_object/#step-2-create-a-new-test_1","text":"Start Rapise and create a new test, choose the Basic methodology, and call it TwoDialogsLearn . Select JavaScript scripting mode when prompted.","title":"Step 2. Create a New Test"},{"location":"Guide/learn_object/#step-3-start-recording_1","text":"Press the Record button in the toolbar of Rapise.","title":"Step 3. Start Recording"},{"location":"Guide/learn_object/#step-4-select-an-application-to-record_1","text":"When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application. Leave the library selection in its default state - we will not be using it this time. Press Select . Wait for the Recording Activity dialog to appear in the lower-right corner of the screen.","title":"Step 4. Select an Application to Record"},{"location":"Guide/learn_object/#step-5-do-learn","text":"Hover the mouse over the OK button of the TwoDialogs AUT but do not press the button. With the mouse positioned over the OK button, press Ctrl + 2 ( the Learn command). You will see the OK button surrounded with a red highlight. You will also see that the Recording Activity dialog has been updated with a Learn event.","title":"Step 5. Do Learn"},{"location":"Guide/learn_object/#step-6-finish-recording","text":"Press the Finish button or Ctrl + 3 to end the recording session.","title":"Step 6. Finish Recording"},{"location":"Guide/learn_object/#step-7-observe","text":"You will now see that Rapise has learned about the OK button, and the Object Tree in the upper left-hand pane of the Rapise has a new entry called OK (shown here expanded). The list of items contained under the OK button entry in the Object Tree is the set of methods and properties available for the OK object. Actions and properties have different icons. The items are grouped by the library, so the DoAction() method is unique to the OK UIAButton object whereas the DoClick() method is generic and available for all Windows objects. Notice that the DoAction is listed and recall in the previous section when we recorded pressing the button, the DoAction method was chosen for the button-press action. While we are looking at this OK object, let's make a few observations about it. These observations will be useful for your later dealings with Rapise and will make the script more informational and relevant as you delve into Rapise. First, look down at the Properties box that appears under the Object Tree in the bottom left corner of the Rapise screen. The screenshot below has some of the tree nodes expanded. First , notice that the OK button has a locator defined. When you have Rapise learn an object. it must collect data about that object so that it can relocate it even if the application has moved on the screen, and even if the application is in a different state of execution. In order to accomplish this, Rapise looks for all useful ways to uniquely identify the object. As bad, or perhaps worse, than not being able to find an object would be to find the wrong object on the AUT. Every time Rapise is required to locate this object, it will first try to use the first locator. If it fails to positively and uniquely match with that locator, it will try the second (if defined), and so on. Rapise will not give up and declare failure until it has failed to identify with all available locators. Second , notice the ID entry in the Object section of the pane. This is the name of the object from Rapise's perspective. All Rapise objects are available through the SeS() function call. Therefore, if we want to refer to the OK object, we will use SeS(\"OK\") to refer to it. Once we have correctly identified the object, all valid methods and properties can be accessed by using that object as the basis. Thirdly , notice in the main editor window of the Rapise, that no code has been added. When you identified the OK button, all Rapise did was add the new object to the Object Tree. It did not write any code in the JavaScript file.","title":"Step 7. Observe"},{"location":"Guide/learn_object/#step-8-use-learned-object","text":"In the automated (recorded) section above, you saw that when you pressed the OK button on the dialog, Rapise recorded a function like this: SeS ( \"OK\" ). DoAction (); This time, you will use the established name of the OK button object, but do something a little more interesting than its default action to demonstrate how to use Rapise. Move the cursor into the editor part of the Rapise and make sure you are editing the file called Main.js . At the moment, this file still looks something like this: //########## Script Steps ############## function Test(params) { } g_load_libraries=[\"UIAutomation\"]; Between the open and close brace, add the following command: SeS ( \"OK\" ). DoClick (); Hit the Play button and watch what happens. The click will register as a command to the object and it will perform the action on the object. While we have the context of this situation, let's complicate it just a little more to illustrate the intricacy as well as the flexibility of Rapise. There is a method whose name looks interesting: DoLButtonDown() . If we were to invoke DoLButtonDown() on the OK object, we would expect this would be the same as DoClick(). However, go back to the AUT for a moment. Using the mouse, press the left mouse button over the OK button but don't take your finger off the left mouse button. What happens is that the button takes its pressed state in appearance, but the button is not clicked. The reason for this is that the DoClick() (or DoAction() ) events cause the mouse button be clicked as well as released. Therefore, we would need to have a pair of events: SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); in order to make the \"click\" happen. Try this in the test script you have created by adding those two lines of code in place of the DoClick() line. It doesn't work! Let's play a little with this problem. When you press the Play button, leave the mouse alone. Just press the left mouse button on the Rapise Play button and take your hand away from the mouse. The script does not press the OK button in the TwoDialogs AUT. Now, press the Play button on the Rapise and quickly move the mouse to hover over the OK button in the TwoDialogs AUT. Now it works! What's going on here is that the DoLButtonDown() and DoLButtonUp() methods are pressing the mouse irrespective of where the mouse cursor is positioned. The other functions, DoClick and DoAction are methods that are applied to the button and so they are applied to the button. Before we can expect DoLButtonDown() and DoLButtonUp() methods to work, we have to first the mouse cursor to the button. function Test ( params ) { SeS ( \"OK\" ). DoMouseMove ( 25 , 15 ); SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); } will accomplish that. Notice that Rapise will actually move the mouse to the coordinates (25, 15) within the OK button. Also notice that if you move the mouse while the test is playing, you will make the test fail. As a last experiment in this arena, try moving the mouse outside the boundaries of the OK button object before calling the DoLButtonDown() function. function Test ( params ) { SeS ( \"OK\" ). DoMouseMove ( 250 , 150 ); SeS ( \"OK\" ). DoLButtonDown (); SeS ( \"OK\" ). DoLButtonUp (); } Once again, the script will fail.","title":"Step 8. Use Learned Object"},{"location":"Guide/learn_object/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/manual_playback/","text":"Manual Playback \u00b6 Purpose \u00b6 The Manual Playback dialog box lets you execute a series of manual test cases (including those part of a test set) from within Rapise. The results from the manual test result will be reported back into your connected Spira instance. During the executing of the manual test, you can attach screenshots, files and log incidents related to the test result How to Open \u00b6 You can open the Manual Playback dialog box by either doing Test > Execute Manual or by playing the whole test via Test > Play . Test Case Details & Test Step Selector \u00b6 The top part of the manual playback screen lets you view the name and description of the test case, navigate between the test steps and click one of the result buttons to indicate how the application being tested behaved: Pass - The current test step was completed successfully and the expected result was observed. Pass All - All of the steps in the test case could be completed successfully and the expected results were observed in all steps. Blocked - The current test step could not be performed because something else prevented its completion. Caution - The current test step could be performed but the actual result only partially matched the expected result (there were minor differences). Fail - Either the current test step could not be performed successfully or the observed actual result did not match the expected result. Test Step Expected & Actual Result \u00b6 This section displays the details of the current test step and lets you enter in the observed actual result: Description - This displays the description of the action that the tester should carry out on the application being tested. Expected Result - This contains a description of the expected result if the application performs as expected Sample Data - This (optional) field contains any sample data that should be used during testing Actual Result - This is a formatted text box where the tester should enter in what actually happened during testing. It is required if you Fail, Block or Caution the test step, but is optional for steps that Pass. In addition, you can click on the picture icon to add a screenshot , or use one of the two buttons underneath: Add Attachment - this lets you choose a file from your local system and attach to the test result. Log Incident - this lets you log a bug/incident that is connected to the test step (e.g. if it failed) and will display the New Incident dialog box. Minimized Playback Dialog \u00b6 Sometimes you want to be able to reduce the amount of space taken up by the testing dialog box so that you can view the application and the test steps on the same screen at the same time. To make this easier, if you click on the Minimize ( <| ) icon in the top-right of the dialog box it will change the manual playback dialog to the mini version show above. You can click on the icon again to switch back to the standard player.","title":"Manual Playback"},{"location":"Guide/manual_playback/#manual-playback","text":"","title":"Manual Playback"},{"location":"Guide/manual_playback/#purpose","text":"The Manual Playback dialog box lets you execute a series of manual test cases (including those part of a test set) from within Rapise. The results from the manual test result will be reported back into your connected Spira instance. During the executing of the manual test, you can attach screenshots, files and log incidents related to the test result","title":"Purpose"},{"location":"Guide/manual_playback/#how-to-open","text":"You can open the Manual Playback dialog box by either doing Test > Execute Manual or by playing the whole test via Test > Play .","title":"How to Open"},{"location":"Guide/manual_playback/#test-case-details-test-step-selector","text":"The top part of the manual playback screen lets you view the name and description of the test case, navigate between the test steps and click one of the result buttons to indicate how the application being tested behaved: Pass - The current test step was completed successfully and the expected result was observed. Pass All - All of the steps in the test case could be completed successfully and the expected results were observed in all steps. Blocked - The current test step could not be performed because something else prevented its completion. Caution - The current test step could be performed but the actual result only partially matched the expected result (there were minor differences). Fail - Either the current test step could not be performed successfully or the observed actual result did not match the expected result.","title":"Test Case Details &amp; Test Step Selector"},{"location":"Guide/manual_playback/#test-step-expected-actual-result","text":"This section displays the details of the current test step and lets you enter in the observed actual result: Description - This displays the description of the action that the tester should carry out on the application being tested. Expected Result - This contains a description of the expected result if the application performs as expected Sample Data - This (optional) field contains any sample data that should be used during testing Actual Result - This is a formatted text box where the tester should enter in what actually happened during testing. It is required if you Fail, Block or Caution the test step, but is optional for steps that Pass. In addition, you can click on the picture icon to add a screenshot , or use one of the two buttons underneath: Add Attachment - this lets you choose a file from your local system and attach to the test result. Log Incident - this lets you log a bug/incident that is connected to the test step (e.g. if it failed) and will display the New Incident dialog box.","title":"Test Step Expected &amp; Actual Result"},{"location":"Guide/manual_playback/#minimized-playback-dialog","text":"Sometimes you want to be able to reduce the amount of space taken up by the testing dialog box so that you can view the application and the test steps on the same screen at the same time. To make this easier, if you click on the Minimize ( <| ) icon in the top-right of the dialog box it will change the manual playback dialog to the mini version show above. You can click on the icon again to switch back to the standard player.","title":"Minimized Playback Dialog"},{"location":"Guide/manual_test_editor/","text":"Manual Test Editor \u00b6 Purpose \u00b6 The Manual Test Editor lets you create and edit manual test cases that are stored in Spira . These manual test cases contain a high level description of the test case as well a detailed set of steps and associated expected results that make up the manual test script. These manual tests can be executed manually in Rapise (or in Spira) as well as used as the basis for creating a related automated test script. Such automated test scripts may be linked to individual test steps by means of the test scenario approach. How to Open \u00b6 You can open the Manual toolbar by either clicking on the Manual Steps icon on the main Main Toolbar or clicking on the ManualSteps.rmt file in the Files tab. The Manual Toolbar will be displayed whenever you have the Manual Test Editor open. Test Case Name/Description \u00b6 This section lets you edit the name and long formatted description of the test case. The rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists. In addition there is a button that lets you add screenshots . Test Step Editor \u00b6 This section lets you add, edit and delete test steps from the manual test case. Each of the test steps contains four fields: Step ID - this contains the position number of the test step (e.g. step 1) as well as the ID of the test step as it exists in Spira. If you click on the [TS:xxx] label it will automatically copy this into the Windows clipboard. This allows you to easily paste the ID of the test step into your automated test scripts which allows Rapise to report back test results to Spira against specific test steps. Description - this is a description of the test procedure that the tester should perform. Expected Result - This is a description of the expected result that should be observed if the system being tested performs correctly. Sample Data - This is an optional field that contains any sample data that should be used in the test Each of the fields provides a rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists. In addition there is a button that lets you add screenshots to the test step. For ease of editing, you can navigate between the rows and columns using the ALT + Arrow keys on the keyboard. Automating Test Steps \u00b6 Sometimes you have a primarily manual test case that you want to automate certain steps of. For example you may want to automate the setup of the test data or login to the application before carrying out manual testing. Such a test is called a semi-manual test . To do this, you enter the syntax @FunctionName(); in the Description box of the test step. Then when you run the test, that step will be executed automatically. The @FunctionName(); refers to a JavaScript user function called function FunctionName() in the User.js file. For example \u00b6","title":"Manual Test Editor"},{"location":"Guide/manual_test_editor/#manual-test-editor","text":"","title":"Manual Test Editor"},{"location":"Guide/manual_test_editor/#purpose","text":"The Manual Test Editor lets you create and edit manual test cases that are stored in Spira . These manual test cases contain a high level description of the test case as well a detailed set of steps and associated expected results that make up the manual test script. These manual tests can be executed manually in Rapise (or in Spira) as well as used as the basis for creating a related automated test script. Such automated test scripts may be linked to individual test steps by means of the test scenario approach.","title":"Purpose"},{"location":"Guide/manual_test_editor/#how-to-open","text":"You can open the Manual toolbar by either clicking on the Manual Steps icon on the main Main Toolbar or clicking on the ManualSteps.rmt file in the Files tab. The Manual Toolbar will be displayed whenever you have the Manual Test Editor open.","title":"How to Open"},{"location":"Guide/manual_test_editor/#test-case-namedescription","text":"This section lets you edit the name and long formatted description of the test case. The rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists. In addition there is a button that lets you add screenshots .","title":"Test Case Name/Description"},{"location":"Guide/manual_test_editor/#test-step-editor","text":"This section lets you add, edit and delete test steps from the manual test case. Each of the test steps contains four fields: Step ID - this contains the position number of the test step (e.g. step 1) as well as the ID of the test step as it exists in Spira. If you click on the [TS:xxx] label it will automatically copy this into the Windows clipboard. This allows you to easily paste the ID of the test step into your automated test scripts which allows Rapise to report back test results to Spira against specific test steps. Description - this is a description of the test procedure that the tester should perform. Expected Result - This is a description of the expected result that should be observed if the system being tested performs correctly. Sample Data - This is an optional field that contains any sample data that should be used in the test Each of the fields provides a rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists. In addition there is a button that lets you add screenshots to the test step. For ease of editing, you can navigate between the rows and columns using the ALT + Arrow keys on the keyboard.","title":"Test Step Editor"},{"location":"Guide/manual_test_editor/#automating-test-steps","text":"Sometimes you have a primarily manual test case that you want to automate certain steps of. For example you may want to automate the setup of the test data or login to the application before carrying out manual testing. Such a test is called a semi-manual test . To do this, you enter the syntax @FunctionName(); in the Description box of the test step. Then when you run the test, that step will be executed automatically. The @FunctionName(); refers to a JavaScript user function called function FunctionName() in the User.js file.","title":"Automating Test Steps"},{"location":"Guide/manual_test_editor/#for-example","text":"","title":"For example"},{"location":"Guide/manual_testing/","text":"Manual Testing \u00b6 Purpose \u00b6 Manual testing is used for situations where automated testing does not make sense. This may be due to technical reasons (the application being tested does not have an API that lets tools such as Rapise interact with them) or economic (this part of the application is rarely used and the user interface is changing in each release). However Rapise can help accelerate and optimize your manual testing as well. Rapise lets you rapidly create manual tests 5x faster than creating them by hand. It integrates with Spira for test management, so you still have a central repository of version-controlled test cases, but Rapise allows you to edit them offline when you have no connection to Spira and also to execute them from within Rapise . Usage \u00b6 To start manual testing, simply create your test as normal using the New Test dialog box. For pure manual test you need to select the manual test methodology: Then once the test has been created, click on the Tools > Manual Steps menu and then you will be taken to the Manual Editor with the Manual Test Toolbar Visible: From here you can start creating your new manual test using the Manual Recorder , then edit the created test steps in the Manual Editor . Finally you can save the test to Spira and then play it back using the Manual Playback and Incident Logging screens. In addition to being used for manual testing, the test step editor lets you view the test steps that define the test scenario so that when you automate the test case, you can easily tie back specific verification points with test steps in Spira . Finally you can also have the best of manual and automated testing in the same test script, using semi-manual testing. That allows you to automate some of the repetitive tasks in a primarily manual test case. Example \u00b6 For a full tutorial using the manual playback, refer to the Exploratory Testing tutorial. In addition, a working sample of manual testing is available from Spira , simply connect to the sample \"Library Information System \" project and open the 'Ability to Create New Book (TC2)' test case in the \" Functional Tests \" folder of the project. That will then display the sample manual test within Rapise: See Also \u00b6 Manual Recording Manual Playback Exploratory Testing Tutorial Dialogs, Views and Menus Manual Toolbar Manual Test Editor Manual Playback Incident Logging","title":"Manual Testing"},{"location":"Guide/manual_testing/#manual-testing","text":"","title":"Manual Testing"},{"location":"Guide/manual_testing/#purpose","text":"Manual testing is used for situations where automated testing does not make sense. This may be due to technical reasons (the application being tested does not have an API that lets tools such as Rapise interact with them) or economic (this part of the application is rarely used and the user interface is changing in each release). However Rapise can help accelerate and optimize your manual testing as well. Rapise lets you rapidly create manual tests 5x faster than creating them by hand. It integrates with Spira for test management, so you still have a central repository of version-controlled test cases, but Rapise allows you to edit them offline when you have no connection to Spira and also to execute them from within Rapise .","title":"Purpose"},{"location":"Guide/manual_testing/#usage","text":"To start manual testing, simply create your test as normal using the New Test dialog box. For pure manual test you need to select the manual test methodology: Then once the test has been created, click on the Tools > Manual Steps menu and then you will be taken to the Manual Editor with the Manual Test Toolbar Visible: From here you can start creating your new manual test using the Manual Recorder , then edit the created test steps in the Manual Editor . Finally you can save the test to Spira and then play it back using the Manual Playback and Incident Logging screens. In addition to being used for manual testing, the test step editor lets you view the test steps that define the test scenario so that when you automate the test case, you can easily tie back specific verification points with test steps in Spira . Finally you can also have the best of manual and automated testing in the same test script, using semi-manual testing. That allows you to automate some of the repetitive tasks in a primarily manual test case.","title":"Usage"},{"location":"Guide/manual_testing/#example","text":"For a full tutorial using the manual playback, refer to the Exploratory Testing tutorial. In addition, a working sample of manual testing is available from Spira , simply connect to the sample \"Library Information System \" project and open the 'Ability to Create New Book (TC2)' test case in the \" Functional Tests \" folder of the project. That will then display the sample manual test within Rapise:","title":"Example"},{"location":"Guide/manual_testing/#see-also","text":"Manual Recording Manual Playback Exploratory Testing Tutorial Dialogs, Views and Menus Manual Toolbar Manual Test Editor Manual Playback Incident Logging","title":"See Also"},{"location":"Guide/manual_testing_playback/","text":"Manual Testing: Playback \u00b6 Purpose \u00b6 As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual testing tool that lets you execute manual test cases stored in SpiraTest . The advantage of using Rapise to execute the manual tests (instead of just using SpiraTest itself) is that Rapise can display the execution window as a small minimizable dialog box that gets rid of the need to have two screens (one to display the test and one to test the application). Also Rapise provides superior image manipulation tools over those available in a web application. Step 1 - Open the Manual Test \u00b6 Using the MS-Paint example manual test that we created previously , open up the test in Rapise. Click on the Tools > Manual Steps menu and you should see the list of test steps: Now that we have the test opened, we can start the playback. Step 2 - Executing the Manual Test \u00b6 Choose the Release from the list of those available in the project: Then click on the ' Execute' icon to start manual test execution. That will bring up the manual playback screen: On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the Pass button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the >| button. Once you get to Step 7, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect: Next we shall attach a screenshot of what actually happened and log a test failure and associated incident / defect. Step 3 - Capturing and Annotating a Screenshot \u00b6 Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture: If the MS Paint application is not in the foreground, just click ESC on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor: You can now use the annotation tools to add labels, text and other items to explain the issue that you found: In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result: Now we can log an incident that is associated with this test failure. Step 4 - Logging the Incident / Defect \u00b6 Click on the ' Log Incident ' button to display the new incident entry screen: Choose the type of incident, enter the name , description , priority, detected release and any other required fields as defined by the workflow in the project that you are connected to. Once you have entered in the various fields, click the Save icon in the top left. This will return you to the manual execution screen with the Incident ID [IN:xxx] and name displayed at the bottom. Now click on the Fail button and the test case will be marked as failed: Finally, click on the Finish button and the results will be posted to Spira . Step 5 - Viewing the Results \u00b6 Now to view the results in Spira, click on the View > View Manual Test in Spira menu. Then under the 'My Created' test cases, click on the link for the test case you execute. That will bring up the test case in Spira. Now click on the 'Failed' hyperlink in Spira and the new test run will be displayed: If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot): If you click on the Incidents tab, you can also see the new incident that was logged, linked to this test run: Congratulations! You have now successfully executed a manual test using Rapise. See Also \u00b6 Manual Testing Manual Recording","title":"Manual Playback"},{"location":"Guide/manual_testing_playback/#manual-testing-playback","text":"","title":"Manual Testing: Playback"},{"location":"Guide/manual_testing_playback/#purpose","text":"As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual testing tool that lets you execute manual test cases stored in SpiraTest . The advantage of using Rapise to execute the manual tests (instead of just using SpiraTest itself) is that Rapise can display the execution window as a small minimizable dialog box that gets rid of the need to have two screens (one to display the test and one to test the application). Also Rapise provides superior image manipulation tools over those available in a web application.","title":"Purpose"},{"location":"Guide/manual_testing_playback/#step-1-open-the-manual-test","text":"Using the MS-Paint example manual test that we created previously , open up the test in Rapise. Click on the Tools > Manual Steps menu and you should see the list of test steps: Now that we have the test opened, we can start the playback.","title":"Step 1 - Open the Manual Test"},{"location":"Guide/manual_testing_playback/#step-2-executing-the-manual-test","text":"Choose the Release from the list of those available in the project: Then click on the ' Execute' icon to start manual test execution. That will bring up the manual playback screen: On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the Pass button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the >| button. Once you get to Step 7, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect: Next we shall attach a screenshot of what actually happened and log a test failure and associated incident / defect.","title":"Step 2 - Executing the Manual Test"},{"location":"Guide/manual_testing_playback/#step-3-capturing-and-annotating-a-screenshot","text":"Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture: If the MS Paint application is not in the foreground, just click ESC on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor: You can now use the annotation tools to add labels, text and other items to explain the issue that you found: In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result: Now we can log an incident that is associated with this test failure.","title":"Step 3 - Capturing and Annotating a Screenshot"},{"location":"Guide/manual_testing_playback/#step-4-logging-the-incident-defect","text":"Click on the ' Log Incident ' button to display the new incident entry screen: Choose the type of incident, enter the name , description , priority, detected release and any other required fields as defined by the workflow in the project that you are connected to. Once you have entered in the various fields, click the Save icon in the top left. This will return you to the manual execution screen with the Incident ID [IN:xxx] and name displayed at the bottom. Now click on the Fail button and the test case will be marked as failed: Finally, click on the Finish button and the results will be posted to Spira .","title":"Step 4 - Logging the Incident / Defect"},{"location":"Guide/manual_testing_playback/#step-5-viewing-the-results","text":"Now to view the results in Spira, click on the View > View Manual Test in Spira menu. Then under the 'My Created' test cases, click on the link for the test case you execute. That will bring up the test case in Spira. Now click on the 'Failed' hyperlink in Spira and the new test run will be displayed: If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot): If you click on the Incidents tab, you can also see the new incident that was logged, linked to this test run: Congratulations! You have now successfully executed a manual test using Rapise.","title":"Step 5 - Viewing the Results"},{"location":"Guide/manual_testing_playback/#see-also","text":"Manual Testing Manual Recording","title":"See Also"},{"location":"Guide/manual_testing_recording/","text":"Manual Testing: Recording \u00b6 Purpose \u00b6 As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual test generation system that can help you create test cases 5x faster than simply creating test cases by hand step by step. This section describes how you can record a set of steps automatically by simply using the application being tested . Unlike an automated test however, Rapise will store a human-readable description of what was performed along with a screenshot , rather than actual computer code that can be played back by a computer. Step 1 - Creating a New Test \u00b6 To start manual testing, simply create your test as normal using the New Test dialog box. Then once the test has been created, click on the Tools > Manual Steps menu and then you will be taken to the Manual Editor with the Manual Test Toolbar Visible: The test step list will initially be empty. Step 2 - Recording Some Steps \u00b6 Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test. To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options: Now click the ' Record Manual ' button and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording. As you click through the application, the recording will display the list of steps and actions being captured: In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold: When you click Finish to complete the recording, Rapise will now display the list of populated manual test steps with the embedded screen captures: You will notice that the description of each test step will use the form \"User [action] at [coordinates] in '[object name]'\" and the expected result will include the screenshot of what the user was doing. In addition, the sample data will contains the equivalent Rapise automation code for reference. This can be useful later if you decide to automate this test. Step 3 - Editing the Steps \u00b6 Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows: Click Save to make sure the updates are all saved locally. Now before you can execute these tests , you will need to Save them to Spira (our web-based test management system). Step 4 - Saving to Spira \u00b6 Click on the option to Save to Spira , you will be asked to confirm the creation of the document folder in Spira that will hold the test files: Click on ' Create' and then the manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in Tester.Assert commands to relate specific verification points with test steps during automated testing. Now that the test has been saved in Spira, you can click on the 'View in Browser' option to see how the test steps look inside Spira. Now this test case is ready for manual playback . See Also \u00b6 Manual Testing Manual Playback","title":"Manual Recording"},{"location":"Guide/manual_testing_recording/#manual-testing-recording","text":"","title":"Manual Testing: Recording"},{"location":"Guide/manual_testing_recording/#purpose","text":"As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual test generation system that can help you create test cases 5x faster than simply creating test cases by hand step by step. This section describes how you can record a set of steps automatically by simply using the application being tested . Unlike an automated test however, Rapise will store a human-readable description of what was performed along with a screenshot , rather than actual computer code that can be played back by a computer.","title":"Purpose"},{"location":"Guide/manual_testing_recording/#step-1-creating-a-new-test","text":"To start manual testing, simply create your test as normal using the New Test dialog box. Then once the test has been created, click on the Tools > Manual Steps menu and then you will be taken to the Manual Editor with the Manual Test Toolbar Visible: The test step list will initially be empty.","title":"Step 1 - Creating a New Test"},{"location":"Guide/manual_testing_recording/#step-2-recording-some-steps","text":"Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test. To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options: Now click the ' Record Manual ' button and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording. As you click through the application, the recording will display the list of steps and actions being captured: In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold: When you click Finish to complete the recording, Rapise will now display the list of populated manual test steps with the embedded screen captures: You will notice that the description of each test step will use the form \"User [action] at [coordinates] in '[object name]'\" and the expected result will include the screenshot of what the user was doing. In addition, the sample data will contains the equivalent Rapise automation code for reference. This can be useful later if you decide to automate this test.","title":"Step 2 - Recording Some Steps"},{"location":"Guide/manual_testing_recording/#step-3-editing-the-steps","text":"Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows: Click Save to make sure the updates are all saved locally. Now before you can execute these tests , you will need to Save them to Spira (our web-based test management system).","title":"Step 3 - Editing the Steps"},{"location":"Guide/manual_testing_recording/#step-4-saving-to-spira","text":"Click on the option to Save to Spira , you will be asked to confirm the creation of the document folder in Spira that will hold the test files: Click on ' Create' and then the manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in Tester.Assert commands to relate specific verification points with test steps during automated testing. Now that the test has been saved in Spira, you can click on the 'View in Browser' option to see how the test steps look inside Spira. Now this test case is ready for manual playback .","title":"Step 4 - Saving to Spira"},{"location":"Guide/manual_testing_recording/#see-also","text":"Manual Testing Manual Playback","title":"See Also"},{"location":"Guide/menu_and_toolbars/","text":"Main Menu and Toolbars \u00b6 File \u00b6 Default : Manual : The File menu provides quick access to all the File management functions in Rapise. Many of these are also available on the main toolbar . New Test - creates a new Rapise test, it can be saved either to Spira or locally. Open - opens an existing test ( .sstest ) that is already available locally. Open Test from Spira - opens a test from SpiraTest test management repository and downloads to the local repository Save to Spira - saves the current test to the Spira test management system so that it updates the version in your Spira test management repository Open File - opens a single file and shows it in editor. File is not added to the current test project. Recent Tests - open one of recently used tests projects Save All (Shortcut: CTRL+S) - saves the current test project and all open documents locally. To save to a different location, use the Save As option in the File > Save As . Save As - creates a new, differently named copy of the test project and all files explicitly included into it. Exit - exits Rapise. Save Manual Test to Spira Manual: Upload all modified steps to the Spira Test Case. Save Manual Test Locally Manual: Save manual Test Case Steps as a local .rmt file. Reload Manual Test from Spira Manual: Reload test steps from the Spira Test Case overriding local changes. Edit \u00b6 The Edit menu provides tools for editing currently open script file. Menu contents depend on the active editor currently open in the content view . Default : JavaScript : RVL : Manual : Find , Find in Files - search using the Find and Replace Dialog . Ins Row (Shortcut: Ctrl+I) RVL: Insert RVL Row before active. Del Row (Shortcut: Ctrl+D) RVL: Delete active Row. If several rows selected then all of them are deleted. Params (Shortcut: Ctrl+P) RVL: Show all parameters (including optional) for the currently edited action. Add Link Manual: Insert link to other Manual step Add Step (Shortcut: CTRL+Ins) Manual: Append new manual step to the end Remove Step Manual: Delete selected step. Up Manual: Move selected step Up. Down Manual: Move selected step Down. Select All JavaScript: select all text in the text editor. Copy (Shortcut: CTRL+C) JavaScript: copies whatever text you have highlighted to the clipboard. RVL: copy selected Rows or Cells Cut (Shortcut: CTRL+X) JavaScript: erases whatever text you have highlighted, and copies it to the clipboard. RVL: copy rows to the Clipboard Paste (Shortcut: CTRL+V) JavaScript: pastes from the clipboard. RVL: paste cells form the clipboard. Undo (CTRL+Z) reverses the last deletion or insertion made. Redo button (CTRL+Y) reverses the last undo action. Toggle Breakpoint (Shortcut: F9) inserts or removes a breakpoint at the current cursor position. Save File JavaScript: saves the script file you are editing. View \u00b6 The View menu contents depend on the active editor currently open in the content view . Default : Manual : Start Page - opens the Rapise Start Page . Spira Dashboard - opens Spira Dashboard . RVL - opens the RVL editor . Main - opens the primary test script file (normally Main.js ). User - This opens the user functions script file containing any user-defined testing functions (called User.js ). Show View > Show > Test Files - show and highlight Test files view View > Show > Objects - show and highlight Objects repository tree. View > Show > Output - show and highlight output view . View > Show > Properties - show and highlight properties view Manual Steps - open manual test steps for given step (if any). If no manual steps defined yet, create new. REST - find and open SOAP definition file in the content view . If no .soap file is yet defined, nothing happens. SOAP - find and open REST definition file in the content view . If no .rest file is yet defined, nothing happens. View Manual Test in Spira Manual: Open current test in Spira web interface. Don't forget to do File > Save to Spira if you did any changes to manual steps locally. Test \u00b6 The Test menu contents depend on the active editor currently open in the content view . Default : Manual : Play - this item executes the current test. Record - this item is used for recording and learning , clicking it will open the Recording Activity Dialog . Note there are some additional options available when using the Record button: Record - clicking Record on its own will start Rapise recording using the currently selected libraries (this is the default action). Shift+Record - This brings up the library selector (shown above), and is equivalent to clicking the [] libraries button in the ribbon before starting recording. Ctrl+Record - This brings up the application selector (see below) and lets you change the application and library being recorded. Test Settings - display test settings . Open Root ...... - Open the root of current test framework in this Rapise window. Only visible then we are in sub-test of any nesting level. Open Parent ...... - Open parent test containing this sub-test in this Rapise window. This item is only visible when parent is not yet a framework root (i.e. we have a deeply nested test case). Spira Properties - opens the Spira Properties dialog that allows you to see the name of the SpiraTest project and test case that the current Rapise test is linked to. Record Manual Manual: start the Select Application to Record dialog box. This dialog box is the same one that you'll use for automated testing, however when you click through the application under test it will record manual test steps instead of automated script code. Execute Manual Manual: executes the current manual test. You will be asked to save the test case to Spira, then the latest version from Spira will be downloaded into the Rapise manual test execution wizard so that you can start manual testing. Screenshots Manual: option will tell Rapise to capture the current screenshot when performing manual recording and include the screenshot with the recorded test step. These are two sub-options: Window Manual: when checked, this will record the entire window. Warning, this may take up large amounts of disk space. Otherwise it will record just the object underneath the current cursor. Cursor Manual: when checked, this will record the location of the mouse pointer/cursor inside the image. Tools \u00b6 The Tools menu contents depend on the active editor currently open in the content view . Default : Manual : Spy - dropdown to select active Spy . You use the Spy to look at the running application and find specific objects that you want to perform an operation or verification on. Debugger - toggles debugger . Verbose Level - drop-down list controls the Verbosity Level . Libraries - this button opens the Select an Application Dialog so that you can add/change the libraries being used to record the current test. Npm Console - show an npm console for the current testing framework . This way you may quickly install new packages or initialize using existing package.json . Web Services - allows you to add a new web service definition to your Rapise test. Clicking on this displays the Add Web Service dialog box. Object Manager - open the Object Manager add-in; this add-in is used to copy recorded objects between test scripts. into a NeoLoad performance test . RPA Monitor - open RPA Monitor . Rapise Launcher - starts Rapise Launcher . New Incident Manual: open the Incident Logging dialog box so that you can log a new incident in SpiraTeam . Settings \u00b6 Provides access to all the global settings and options in Rapise. Settings relevant to just the current test are available as Test > Test Settings.. . Global - This brings up the Global Settings dialog that lets you change any of the system-wide settings for Rapise. SpiraTest - takes you to a dialog box that lets you change how Rapise is integrated with the SpiraTest test management system. It will let you change the URL, username and password used to connect. Web Spy - displays the Web Spy Settings dialog box. This lets you change the settings. Browser - displays the Browser Settings dialog box. This lets you edit and select the web browser profile being used for web testing (for non-Selenium browser profiles). Selenium - displays the Selenium settings dialog box. This is used to edit the different Selenium web browser profiles that can be used by Rapise. related to using the Web Spy to inspect the DOM objects in web pages. Mobile - displays the Mobile Settings dialog box. This lets you configure the different mobile devices that are available for testing by Rapise. NeoLoad Integration Settings - displays the NeoLoad Integration Settings dialog. These settings may need to be changed when using Rapise with NeoLoad. Java - displays the Install Java Access Bridge dialog box. Installing the Java Access Bridge lets Rapise connect to Java AWT/Swing applications so that they can be tested. Help \u00b6 About - information about the running instance of Rapise, including the version number. Activation - opens the Rapise license activation screen. This can be used to deactivate the current license so that it can be used on a different machine. Help - provides access to the interactive help system. You can also bring up the help system by pressing F1 on the keyboard. Online Help - opens online version of the help system (updated regularly). Remote Assistance - launches GoToMeeting session with a given ID. Read more about Remote Assistance . Report \u00b6 The Report menu is available anytime you have a report ( .trp ) file visible in the Content View . Plain - view test steps, assertions, and messages aligned in a table. Hierarchical - switch to hierarchical display to more clearly see what assertions, messages, and data are associated with which test steps. Collapse - collapse the report to show only the top level. What is visible will depend on how the report is sorted. Expand - expand all report rows. Images - toggle between hiding and revealing images. Export to HTML - save the report as HTML document . Export to Excel - save the report as an Excel file. Export to PDF - save the report as an Acrobat PDF file. Export to XPS - save the report as XML Paper Specification file. Choose Columns - to hide or reveal report columns. Merge Cells - merge identical consecutive cells. The drop-down combo lets you choose between previously saved layouts. Selected layout is loaded using next item Load Layout . Save Layout - press to keep your layout changes after closing Rapise. Reset Layout - undo any changes you've made. See Also: Automated Reporting Debugger \u00b6 The Debugger menu and toolbar is available while the javascript debugger is being used. To use the the Debugger, first enable it by toggling the the corresponding toolbar button: then Play your script. Continue F5 - continue executing the script. Step In F11 - step into a function/procedure. Step Out Shift + F11 - continue until the current procedure is exited. Step Over F10 - go to the next line in the current procedure/function. Stop Debugger Shift + F5 - stop executing the script and exit the debugger. Main Toolbar \u00b6 The Main is the primary toolbar providing tools to help with creating and executing tests. It is always visible: RVL Toolbar \u00b6 The RVL toolbar is is shown for RVL editor : Manual Toolbar \u00b6 The Manual toolbar is shown for manual test editor : Select Current Release dropdown list displays the list of releases in the current Spira project. You can then choose the appropriate release that the current test is being executed against. Report Viewer Toolbar \u00b6 The Report toolbar is shown for report viewer : Debugger Toolbar \u00b6 The Report toolbar is shown while JavaScript debug session is active. It is a set of shortcuts for debugger menu:","title":"Main Menu and Toolbars"},{"location":"Guide/menu_and_toolbars/#main-menu-and-toolbars","text":"","title":"Main Menu and Toolbars"},{"location":"Guide/menu_and_toolbars/#file","text":"Default : Manual : The File menu provides quick access to all the File management functions in Rapise. Many of these are also available on the main toolbar . New Test - creates a new Rapise test, it can be saved either to Spira or locally. Open - opens an existing test ( .sstest ) that is already available locally. Open Test from Spira - opens a test from SpiraTest test management repository and downloads to the local repository Save to Spira - saves the current test to the Spira test management system so that it updates the version in your Spira test management repository Open File - opens a single file and shows it in editor. File is not added to the current test project. Recent Tests - open one of recently used tests projects Save All (Shortcut: CTRL+S) - saves the current test project and all open documents locally. To save to a different location, use the Save As option in the File > Save As . Save As - creates a new, differently named copy of the test project and all files explicitly included into it. Exit - exits Rapise. Save Manual Test to Spira Manual: Upload all modified steps to the Spira Test Case. Save Manual Test Locally Manual: Save manual Test Case Steps as a local .rmt file. Reload Manual Test from Spira Manual: Reload test steps from the Spira Test Case overriding local changes.","title":"File"},{"location":"Guide/menu_and_toolbars/#edit","text":"The Edit menu provides tools for editing currently open script file. Menu contents depend on the active editor currently open in the content view . Default : JavaScript : RVL : Manual : Find , Find in Files - search using the Find and Replace Dialog . Ins Row (Shortcut: Ctrl+I) RVL: Insert RVL Row before active. Del Row (Shortcut: Ctrl+D) RVL: Delete active Row. If several rows selected then all of them are deleted. Params (Shortcut: Ctrl+P) RVL: Show all parameters (including optional) for the currently edited action. Add Link Manual: Insert link to other Manual step Add Step (Shortcut: CTRL+Ins) Manual: Append new manual step to the end Remove Step Manual: Delete selected step. Up Manual: Move selected step Up. Down Manual: Move selected step Down. Select All JavaScript: select all text in the text editor. Copy (Shortcut: CTRL+C) JavaScript: copies whatever text you have highlighted to the clipboard. RVL: copy selected Rows or Cells Cut (Shortcut: CTRL+X) JavaScript: erases whatever text you have highlighted, and copies it to the clipboard. RVL: copy rows to the Clipboard Paste (Shortcut: CTRL+V) JavaScript: pastes from the clipboard. RVL: paste cells form the clipboard. Undo (CTRL+Z) reverses the last deletion or insertion made. Redo button (CTRL+Y) reverses the last undo action. Toggle Breakpoint (Shortcut: F9) inserts or removes a breakpoint at the current cursor position. Save File JavaScript: saves the script file you are editing.","title":"Edit"},{"location":"Guide/menu_and_toolbars/#view","text":"The View menu contents depend on the active editor currently open in the content view . Default : Manual : Start Page - opens the Rapise Start Page . Spira Dashboard - opens Spira Dashboard . RVL - opens the RVL editor . Main - opens the primary test script file (normally Main.js ). User - This opens the user functions script file containing any user-defined testing functions (called User.js ). Show View > Show > Test Files - show and highlight Test files view View > Show > Objects - show and highlight Objects repository tree. View > Show > Output - show and highlight output view . View > Show > Properties - show and highlight properties view Manual Steps - open manual test steps for given step (if any). If no manual steps defined yet, create new. REST - find and open SOAP definition file in the content view . If no .soap file is yet defined, nothing happens. SOAP - find and open REST definition file in the content view . If no .rest file is yet defined, nothing happens. View Manual Test in Spira Manual: Open current test in Spira web interface. Don't forget to do File > Save to Spira if you did any changes to manual steps locally.","title":"View"},{"location":"Guide/menu_and_toolbars/#test","text":"The Test menu contents depend on the active editor currently open in the content view . Default : Manual : Play - this item executes the current test. Record - this item is used for recording and learning , clicking it will open the Recording Activity Dialog . Note there are some additional options available when using the Record button: Record - clicking Record on its own will start Rapise recording using the currently selected libraries (this is the default action). Shift+Record - This brings up the library selector (shown above), and is equivalent to clicking the [] libraries button in the ribbon before starting recording. Ctrl+Record - This brings up the application selector (see below) and lets you change the application and library being recorded. Test Settings - display test settings . Open Root ...... - Open the root of current test framework in this Rapise window. Only visible then we are in sub-test of any nesting level. Open Parent ...... - Open parent test containing this sub-test in this Rapise window. This item is only visible when parent is not yet a framework root (i.e. we have a deeply nested test case). Spira Properties - opens the Spira Properties dialog that allows you to see the name of the SpiraTest project and test case that the current Rapise test is linked to. Record Manual Manual: start the Select Application to Record dialog box. This dialog box is the same one that you'll use for automated testing, however when you click through the application under test it will record manual test steps instead of automated script code. Execute Manual Manual: executes the current manual test. You will be asked to save the test case to Spira, then the latest version from Spira will be downloaded into the Rapise manual test execution wizard so that you can start manual testing. Screenshots Manual: option will tell Rapise to capture the current screenshot when performing manual recording and include the screenshot with the recorded test step. These are two sub-options: Window Manual: when checked, this will record the entire window. Warning, this may take up large amounts of disk space. Otherwise it will record just the object underneath the current cursor. Cursor Manual: when checked, this will record the location of the mouse pointer/cursor inside the image.","title":"Test"},{"location":"Guide/menu_and_toolbars/#tools","text":"The Tools menu contents depend on the active editor currently open in the content view . Default : Manual : Spy - dropdown to select active Spy . You use the Spy to look at the running application and find specific objects that you want to perform an operation or verification on. Debugger - toggles debugger . Verbose Level - drop-down list controls the Verbosity Level . Libraries - this button opens the Select an Application Dialog so that you can add/change the libraries being used to record the current test. Npm Console - show an npm console for the current testing framework . This way you may quickly install new packages or initialize using existing package.json . Web Services - allows you to add a new web service definition to your Rapise test. Clicking on this displays the Add Web Service dialog box. Object Manager - open the Object Manager add-in; this add-in is used to copy recorded objects between test scripts. into a NeoLoad performance test . RPA Monitor - open RPA Monitor . Rapise Launcher - starts Rapise Launcher . New Incident Manual: open the Incident Logging dialog box so that you can log a new incident in SpiraTeam .","title":"Tools"},{"location":"Guide/menu_and_toolbars/#settings","text":"Provides access to all the global settings and options in Rapise. Settings relevant to just the current test are available as Test > Test Settings.. . Global - This brings up the Global Settings dialog that lets you change any of the system-wide settings for Rapise. SpiraTest - takes you to a dialog box that lets you change how Rapise is integrated with the SpiraTest test management system. It will let you change the URL, username and password used to connect. Web Spy - displays the Web Spy Settings dialog box. This lets you change the settings. Browser - displays the Browser Settings dialog box. This lets you edit and select the web browser profile being used for web testing (for non-Selenium browser profiles). Selenium - displays the Selenium settings dialog box. This is used to edit the different Selenium web browser profiles that can be used by Rapise. related to using the Web Spy to inspect the DOM objects in web pages. Mobile - displays the Mobile Settings dialog box. This lets you configure the different mobile devices that are available for testing by Rapise. NeoLoad Integration Settings - displays the NeoLoad Integration Settings dialog. These settings may need to be changed when using Rapise with NeoLoad. Java - displays the Install Java Access Bridge dialog box. Installing the Java Access Bridge lets Rapise connect to Java AWT/Swing applications so that they can be tested.","title":"Settings"},{"location":"Guide/menu_and_toolbars/#help","text":"About - information about the running instance of Rapise, including the version number. Activation - opens the Rapise license activation screen. This can be used to deactivate the current license so that it can be used on a different machine. Help - provides access to the interactive help system. You can also bring up the help system by pressing F1 on the keyboard. Online Help - opens online version of the help system (updated regularly). Remote Assistance - launches GoToMeeting session with a given ID. Read more about Remote Assistance .","title":"Help"},{"location":"Guide/menu_and_toolbars/#report","text":"The Report menu is available anytime you have a report ( .trp ) file visible in the Content View . Plain - view test steps, assertions, and messages aligned in a table. Hierarchical - switch to hierarchical display to more clearly see what assertions, messages, and data are associated with which test steps. Collapse - collapse the report to show only the top level. What is visible will depend on how the report is sorted. Expand - expand all report rows. Images - toggle between hiding and revealing images. Export to HTML - save the report as HTML document . Export to Excel - save the report as an Excel file. Export to PDF - save the report as an Acrobat PDF file. Export to XPS - save the report as XML Paper Specification file. Choose Columns - to hide or reveal report columns. Merge Cells - merge identical consecutive cells. The drop-down combo lets you choose between previously saved layouts. Selected layout is loaded using next item Load Layout . Save Layout - press to keep your layout changes after closing Rapise. Reset Layout - undo any changes you've made. See Also: Automated Reporting","title":"Report"},{"location":"Guide/menu_and_toolbars/#debugger","text":"The Debugger menu and toolbar is available while the javascript debugger is being used. To use the the Debugger, first enable it by toggling the the corresponding toolbar button: then Play your script. Continue F5 - continue executing the script. Step In F11 - step into a function/procedure. Step Out Shift + F11 - continue until the current procedure is exited. Step Over F10 - go to the next line in the current procedure/function. Stop Debugger Shift + F5 - stop executing the script and exit the debugger.","title":"Debugger"},{"location":"Guide/menu_and_toolbars/#main-toolbar","text":"The Main is the primary toolbar providing tools to help with creating and executing tests. It is always visible:","title":"Main Toolbar"},{"location":"Guide/menu_and_toolbars/#rvl-toolbar","text":"The RVL toolbar is is shown for RVL editor :","title":"RVL Toolbar"},{"location":"Guide/menu_and_toolbars/#manual-toolbar","text":"The Manual toolbar is shown for manual test editor : Select Current Release dropdown list displays the list of releases in the current Spira project. You can then choose the appropriate release that the current test is being executed against.","title":"Manual Toolbar"},{"location":"Guide/menu_and_toolbars/#report-viewer-toolbar","text":"The Report toolbar is shown for report viewer :","title":"Report Viewer Toolbar"},{"location":"Guide/menu_and_toolbars/#debugger-toolbar","text":"The Report toolbar is shown while JavaScript debug session is active. It is a set of shortcuts for debugger menu:","title":"Debugger Toolbar"},{"location":"Guide/microsoft_dynamics/","text":"Microsoft Dynamics \u00b6 Overview \u00b6 Microsoft Dynamics is a line of enterprise resource planning (ERP) and customer relationship management (CRM) software applications from Microsoft. The Microsoft Dynamics focus industries are retail, service, manufacturing, financial services, and the public sector. Microsoft Dynamics offers support for small, medium, and large businesses. Microsoft Dynamics ERP comprises a group of enterprise-resource-planning products primarily geared toward midsize organizations with simple corporate structures and low-to-moderately complex production models. Microsoft Dynamics ERP includes three primary products: Microsoft Dynamics AX (formerly Axapta) - multi-language, multi-currency enterprise resource planning (ERP) business software with global business management features for financial, human resources, and operations management as well as additional industry capabilities for retailers, professional service industries, financial service businesses, manufacturers, and public-sector organizations. Microsoft Dynamics GP (formerly Great Plains Software) - ERP software for small and midsize businesses: helps manage financials, supply chain, and employees. Microsoft Dynamics NAV (formerly Navision) - business management solution that helps small and mid-sized businesses manage their financials, supply chain, and people. It features multiple languages and multiple currencies. Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Microsoft Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online . Starting in late 2016, Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365 . This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations), combined with a new web based version of Dynamics NAV (called Dynamics 365 Business Central) and an updated Microsoft Dynamics CRM Online (Dynamics 365 for Sales). This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based. Rapise Support \u00b6 Rapise provides out of the box support for the following different versions of Microsoft Dynamics: Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter. Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central. Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids). Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components. Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface. See Also \u00b6 KB272 Microsoft Dynamics Solutions - Which One Do You Have?","title":"Microsoft Dynamics"},{"location":"Guide/microsoft_dynamics/#microsoft-dynamics","text":"","title":"Microsoft Dynamics"},{"location":"Guide/microsoft_dynamics/#overview","text":"Microsoft Dynamics is a line of enterprise resource planning (ERP) and customer relationship management (CRM) software applications from Microsoft. The Microsoft Dynamics focus industries are retail, service, manufacturing, financial services, and the public sector. Microsoft Dynamics offers support for small, medium, and large businesses. Microsoft Dynamics ERP comprises a group of enterprise-resource-planning products primarily geared toward midsize organizations with simple corporate structures and low-to-moderately complex production models. Microsoft Dynamics ERP includes three primary products: Microsoft Dynamics AX (formerly Axapta) - multi-language, multi-currency enterprise resource planning (ERP) business software with global business management features for financial, human resources, and operations management as well as additional industry capabilities for retailers, professional service industries, financial service businesses, manufacturers, and public-sector organizations. Microsoft Dynamics GP (formerly Great Plains Software) - ERP software for small and midsize businesses: helps manage financials, supply chain, and employees. Microsoft Dynamics NAV (formerly Navision) - business management solution that helps small and mid-sized businesses manage their financials, supply chain, and people. It features multiple languages and multiple currencies. Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Microsoft Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online . Starting in late 2016, Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365 . This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations), combined with a new web based version of Dynamics NAV (called Dynamics 365 Business Central) and an updated Microsoft Dynamics CRM Online (Dynamics 365 for Sales). This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based.","title":"Overview"},{"location":"Guide/microsoft_dynamics/#rapise-support","text":"Rapise provides out of the box support for the following different versions of Microsoft Dynamics: Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter. Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central. Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids). Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components. Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface.","title":"Rapise Support"},{"location":"Guide/microsoft_dynamics/#see-also","text":"KB272 Microsoft Dynamics Solutions - Which One Do You Have?","title":"See Also"},{"location":"Guide/mobile_reconnect/","text":"Reconnect Mobile Session \u00b6 Since version 6.2 Rapise is able to reconnect mobile sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the application and perform manual steps to reach desired application state. Maintenance Scenario \u00b6 You run a test and it fails at some point because some object is not found on screen. You use the Mobile Spy to reconnect to the application and analyze the cause of the failure. You use the Mobile Spy to re-learn the object. You run the test exactly from the step where it stopped working to make sure the test is fixed. Multi Session Recording Scenario \u00b6 You record first steps of a test case. You run the test to make sure it works as expected (optional). You start next recording session and reconnect to the application. No time is wasted for launching the application and performing steps manually to prepare it for recording. Reusing Session to Run Multiple Tests \u00b6 Since application launch is time consuming operation in mobile testing you may run multiple tests on the same application instance. You run a test and it leaves the application running. You run next test and so on. This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially. How it Works \u00b6 To leave application running and save session information use AppiumDriver.SaveSession call in TestFinish block of your test. function TestFinish () { AppiumDriver . SaveSession (); } To reconnect to the running application use AppiumDriver.ReconnectSession call in TestPrepare block of your test. function TestPrepare () { AppiumDriver . ReconnectSession (); } If you want Rapise to launch a new application session if there is no saved one pass true to AppiumDriver.ReconnectSession call. function TestPrepare () { AppiumDriver . ReconnectSession ( true ); } Note: TestPrepare block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL ( Play Selection, Play From Here, etc. ). Active Session \u00b6 When you launch a Mobile Spy from the main toolbar it first checks if Appium server has active sessions. If there are active sessions then the Spy connects to one of them. You may switch the session using the dropdown on the spy toolbar. See Also \u00b6 Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.","title":"Reconnect Mobile Session"},{"location":"Guide/mobile_reconnect/#reconnect-mobile-session","text":"Since version 6.2 Rapise is able to reconnect mobile sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the application and perform manual steps to reach desired application state.","title":"Reconnect Mobile Session"},{"location":"Guide/mobile_reconnect/#maintenance-scenario","text":"You run a test and it fails at some point because some object is not found on screen. You use the Mobile Spy to reconnect to the application and analyze the cause of the failure. You use the Mobile Spy to re-learn the object. You run the test exactly from the step where it stopped working to make sure the test is fixed.","title":"Maintenance Scenario"},{"location":"Guide/mobile_reconnect/#multi-session-recording-scenario","text":"You record first steps of a test case. You run the test to make sure it works as expected (optional). You start next recording session and reconnect to the application. No time is wasted for launching the application and performing steps manually to prepare it for recording.","title":"Multi Session Recording Scenario"},{"location":"Guide/mobile_reconnect/#reusing-session-to-run-multiple-tests","text":"Since application launch is time consuming operation in mobile testing you may run multiple tests on the same application instance. You run a test and it leaves the application running. You run next test and so on. This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially.","title":"Reusing Session to Run Multiple Tests"},{"location":"Guide/mobile_reconnect/#how-it-works","text":"To leave application running and save session information use AppiumDriver.SaveSession call in TestFinish block of your test. function TestFinish () { AppiumDriver . SaveSession (); } To reconnect to the running application use AppiumDriver.ReconnectSession call in TestPrepare block of your test. function TestPrepare () { AppiumDriver . ReconnectSession (); } If you want Rapise to launch a new application session if there is no saved one pass true to AppiumDriver.ReconnectSession call. function TestPrepare () { AppiumDriver . ReconnectSession ( true ); } Note: TestPrepare block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL ( Play Selection, Play From Here, etc. ).","title":"How it Works"},{"location":"Guide/mobile_reconnect/#active-session","text":"When you launch a Mobile Spy from the main toolbar it first checks if Appium server has active sessions. If there are active sessions then the Spy connects to one of them. You may switch the session using the dropdown on the spy toolbar.","title":"Active Session"},{"location":"Guide/mobile_reconnect/#see-also","text":"Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.","title":"See Also"},{"location":"Guide/mobile_settings_dialog/","text":"Mobile Settings Dialog \u00b6 Mobile Profiles \u00b6 Use Mobile Settings Dialog to configure Mobile Profiles . A mobile profile specifies how to connect to a simulator or device via Appium . You may configure as many profiles as you need to run your tests on different devices. Mobile Settings Dialog box displays the list of mobile profiles that have been configured for use by Rapise and lets you create a new profile, modify a profile or make a new profile based on an existing one. How to Open \u00b6 You can open this dialog box from two places: From the main Rapise menu Settings > Mobile . From the Mobile Spy tool when you click on the Edit Profiles toolbar button. Menu Options \u00b6 This dialog box has the following menu options: Select Profile - This dropdown list lets you select a different mobile profile to be displayed in the dialog. Save - This button will save the changes to the current mobile profile. Test URL - This button will test the Connection (URL) from Rapise to Appium (which is used to manage the devices) and the connection from Appium to the physical (or simulated) device. Duplicate - This button will create a new mobile profile based on the currently viewed one. Create - This button will create a new empty mobile profile that you can edit. Rename - This button will change the name of the current mobile profile being edited. Delete - This button will delete the currently displayed mobile profile. There is no undo, so be careful! Connection \u00b6 This section lets you enter the URL used to connect to the Appium server which hosts the mobile devices being tested. It is typically of the form: http://server:4723/wd/hub Where the port number used by Appium is 4723 by default and the /ed/hub suffix is added. Details \u00b6 This section has various settings, some of which are used by all mobile devices, some only by simulated devices, some only by physical devices and some are specific to the type of device (iOS vs. Android). For details check out Appium Desired Capabilities page. Kobiton / SauceLabs Settings \u00b6 In addition, there are some settings, unique to running Appium mobile device tests through either the SauceLabs or Kobiton cloud platforms: Kobiton / Sauce Labs accessKey - This needs to be populated with your Kobiton/SauceLabs cloud access key. captureScreenshots - This can be set to determine if you want to capture screenshots or not. deviceGroup - The default value is group device belonged to. Group device value could be either: ORGANIZATION or KOBITON. System will filter device in any existing group if you set deviceGroup is empty. sessionDescription - The description of the session (e.g. \"This is an example for iOS web\"). sessionName - The name of the session being performed (e.g. \"Automation test session on second device\"). username - This needs to be populated with your Kobiton/SauceLabs username. Browser Stack Settings \u00b6 In addition, there are some settings, unique to running Appium mobile device tests through the BrowserStack cloud platform: BrowserStack browserstack.appium_version - Use this capability to set the Appium version in your test scripts. browserstack.key - This needs to be populated with your Browserstack cloud access key. browserstack.user - This needs to be populated with your Browserstack username. device - Specifies a particular mobile device for the test environment. os_version - Use this capability to specify the OS version of the device. realMobile - Use this flag to test on a physical mobile device. Local Mobile Profiles \u00b6 Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host. To create a local profile just press Duplicate for one of global profiles and set Local checkbox before clicking OK button. Global and Local profile may have same name, in this case Local profile is used for execution. If a test contains local mobile profiles they can be seen in the dropdowns. Local profiles are stored inside <Test Root>\\Profiles\\MobileProfiles folder.","title":"Mobile Settings Dialog"},{"location":"Guide/mobile_settings_dialog/#mobile-settings-dialog","text":"","title":"Mobile Settings Dialog"},{"location":"Guide/mobile_settings_dialog/#mobile-profiles","text":"Use Mobile Settings Dialog to configure Mobile Profiles . A mobile profile specifies how to connect to a simulator or device via Appium . You may configure as many profiles as you need to run your tests on different devices. Mobile Settings Dialog box displays the list of mobile profiles that have been configured for use by Rapise and lets you create a new profile, modify a profile or make a new profile based on an existing one.","title":"Mobile Profiles"},{"location":"Guide/mobile_settings_dialog/#how-to-open","text":"You can open this dialog box from two places: From the main Rapise menu Settings > Mobile . From the Mobile Spy tool when you click on the Edit Profiles toolbar button.","title":"How to Open"},{"location":"Guide/mobile_settings_dialog/#menu-options","text":"This dialog box has the following menu options: Select Profile - This dropdown list lets you select a different mobile profile to be displayed in the dialog. Save - This button will save the changes to the current mobile profile. Test URL - This button will test the Connection (URL) from Rapise to Appium (which is used to manage the devices) and the connection from Appium to the physical (or simulated) device. Duplicate - This button will create a new mobile profile based on the currently viewed one. Create - This button will create a new empty mobile profile that you can edit. Rename - This button will change the name of the current mobile profile being edited. Delete - This button will delete the currently displayed mobile profile. There is no undo, so be careful!","title":"Menu Options"},{"location":"Guide/mobile_settings_dialog/#connection","text":"This section lets you enter the URL used to connect to the Appium server which hosts the mobile devices being tested. It is typically of the form: http://server:4723/wd/hub Where the port number used by Appium is 4723 by default and the /ed/hub suffix is added.","title":"Connection"},{"location":"Guide/mobile_settings_dialog/#details","text":"This section has various settings, some of which are used by all mobile devices, some only by simulated devices, some only by physical devices and some are specific to the type of device (iOS vs. Android). For details check out Appium Desired Capabilities page.","title":"Details"},{"location":"Guide/mobile_settings_dialog/#kobiton-saucelabs-settings","text":"In addition, there are some settings, unique to running Appium mobile device tests through either the SauceLabs or Kobiton cloud platforms: Kobiton / Sauce Labs accessKey - This needs to be populated with your Kobiton/SauceLabs cloud access key. captureScreenshots - This can be set to determine if you want to capture screenshots or not. deviceGroup - The default value is group device belonged to. Group device value could be either: ORGANIZATION or KOBITON. System will filter device in any existing group if you set deviceGroup is empty. sessionDescription - The description of the session (e.g. \"This is an example for iOS web\"). sessionName - The name of the session being performed (e.g. \"Automation test session on second device\"). username - This needs to be populated with your Kobiton/SauceLabs username.","title":"Kobiton / SauceLabs Settings"},{"location":"Guide/mobile_settings_dialog/#browser-stack-settings","text":"In addition, there are some settings, unique to running Appium mobile device tests through the BrowserStack cloud platform: BrowserStack browserstack.appium_version - Use this capability to set the Appium version in your test scripts. browserstack.key - This needs to be populated with your Browserstack cloud access key. browserstack.user - This needs to be populated with your Browserstack username. device - Specifies a particular mobile device for the test environment. os_version - Use this capability to specify the OS version of the device. realMobile - Use this flag to test on a physical mobile device.","title":"Browser Stack Settings"},{"location":"Guide/mobile_settings_dialog/#local-mobile-profiles","text":"Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host. To create a local profile just press Duplicate for one of global profiles and set Local checkbox before clicking OK button. Global and Local profile may have same name, in this case Local profile is used for execution. If a test contains local mobile profiles they can be seen in the dropdowns. Local profiles are stored inside <Test Root>\\Profiles\\MobileProfiles folder.","title":"Local Mobile Profiles"},{"location":"Guide/mobile_test_locator_dialog/","text":"Mobile Test Locator Dialog \u00b6 Purpose \u00b6 This dialog box lets you create a test locator for mobile applications using one of the supported methods (XPath, ID, etc.) and display the results of using that locator interactively. How to Open \u00b6 You open this dialog from the Mobile Spy by clicking the Test Locator button on that dialog. How to Use \u00b6 To use this dialog, you simply choose which type of locator you wish to test (in the example above we are using XPath on an iOS device) and click the button. The properties discovered from using this locator on the device in question will be displayed in the right panel. The following locator types are available: XPath - This allows you to enter an XPath selector that uniquely locates a specific element in the mobile object hierarchy Id - This allows you to enter the ID of a specific object and test to see if it can be found. CSS - For mobile website testing only, this lets you enter a CSS selector that can uniquely locate an object Tag Name - This lets you find elements by their Tag Name field. For web testing this is the name of the DOM element. Class Name - This lets you find elements by their UI Component Type Name - This lets you find elements by their Name field Android - This lets you enter a string corresponding to a recursive element search using the UiAutomator Api (Android-only) iOS - This allows you to enter a string corresponding to a recursive element search using the UIAutomation library (iOS-only) Accessibility - This lets you enter a string corresponding to a recursive element search using the Id/Name that the native Accessibility options utilize. Link - Based on the WebDriver standard, it lets you find hyperlinks using an exact match of the link anchor text Partial Link - Based on the WebDriver standard, it lets you find hyperlinks using a partial match of the link anchor text Script - For iOS testing, this lets you enter raw script that will be sent to the iOS device to find the element","title":"Mobile Test Locator Dialog"},{"location":"Guide/mobile_test_locator_dialog/#mobile-test-locator-dialog","text":"","title":"Mobile Test Locator Dialog"},{"location":"Guide/mobile_test_locator_dialog/#purpose","text":"This dialog box lets you create a test locator for mobile applications using one of the supported methods (XPath, ID, etc.) and display the results of using that locator interactively.","title":"Purpose"},{"location":"Guide/mobile_test_locator_dialog/#how-to-open","text":"You open this dialog from the Mobile Spy by clicking the Test Locator button on that dialog.","title":"How to Open"},{"location":"Guide/mobile_test_locator_dialog/#how-to-use","text":"To use this dialog, you simply choose which type of locator you wish to test (in the example above we are using XPath on an iOS device) and click the button. The properties discovered from using this locator on the device in question will be displayed in the right panel. The following locator types are available: XPath - This allows you to enter an XPath selector that uniquely locates a specific element in the mobile object hierarchy Id - This allows you to enter the ID of a specific object and test to see if it can be found. CSS - For mobile website testing only, this lets you enter a CSS selector that can uniquely locate an object Tag Name - This lets you find elements by their Tag Name field. For web testing this is the name of the DOM element. Class Name - This lets you find elements by their UI Component Type Name - This lets you find elements by their Name field Android - This lets you enter a string corresponding to a recursive element search using the UiAutomator Api (Android-only) iOS - This allows you to enter a string corresponding to a recursive element search using the UIAutomation library (iOS-only) Accessibility - This lets you enter a string corresponding to a recursive element search using the Id/Name that the native Accessibility options utilize. Link - Based on the WebDriver standard, it lets you find hyperlinks using an exact match of the link anchor text Partial Link - Based on the WebDriver standard, it lets you find hyperlinks using a partial match of the link anchor text Script - For iOS testing, this lets you enter raw script that will be sent to the iOS device to find the element","title":"How to Use"},{"location":"Guide/mobile_testing2/","text":"Mobile Testing \u00b6 Purpose \u00b6 Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android . Rapise gives you the flexibility to test your applications on either real or simulated devices. Usage \u00b6 Since the process for testing mobile devices depends heavily on the platform being used, we have split the guide into four separate sections: Preparing Environment for iOS Mobile Testing Mobile Testing using iOS Preparing Environment for Android Mobile Testing Mobile Testing using Android Samples \u00b6 You can find the mobile sample tests and sample Applications (called AUTAndroid for Android and AUTiOS for Apple iOS) at the following locations: AUTAndroid Repository AUTiOS Repository See Also \u00b6 Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. Reconnect Mobile Session - to learn how to save time when recording, fixing, and running tests.","title":"Mobile Testing"},{"location":"Guide/mobile_testing2/#mobile-testing","text":"","title":"Mobile Testing"},{"location":"Guide/mobile_testing2/#purpose","text":"Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android . Rapise gives you the flexibility to test your applications on either real or simulated devices.","title":"Purpose"},{"location":"Guide/mobile_testing2/#usage","text":"Since the process for testing mobile devices depends heavily on the platform being used, we have split the guide into four separate sections: Preparing Environment for iOS Mobile Testing Mobile Testing using iOS Preparing Environment for Android Mobile Testing Mobile Testing using Android","title":"Usage"},{"location":"Guide/mobile_testing2/#samples","text":"You can find the mobile sample tests and sample Applications (called AUTAndroid for Android and AUTiOS for Apple iOS) at the following locations: AUTAndroid Repository AUTiOS Repository","title":"Samples"},{"location":"Guide/mobile_testing2/#see-also","text":"Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. Reconnect Mobile Session - to learn how to save time when recording, fixing, and running tests.","title":"See Also"},{"location":"Guide/mobile_testing_android/","text":"Mobile Testing using Android \u00b6 Purpose \u00b6 Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android . Rapise gives you the flexibility to test your applications on either real or simulated devices. This tutorial is a simple example of using Rapise to record and playback a simple test against a sample Android application running on the Android Emulator on your local PC. It does not require any physical mobile devices and only uses the PC that you have already installed Rapise on. (There is other documentation that describes the full range of mobile testing options) . Setting up Environment \u00b6 The first thing you need to do is install Appium and Android Studio . Launch Android Virtual Device (AVD) Manager from the menu: Use the Create Virtual Device... button to create a Virtual Device. Learn more about how to create and manage virtual devices . You can then start the device and then connect to it using Rapise. Configure the Mobile Profile \u00b6 To begin the actual mobile testing, create a new test , using the File > New Test option in Rapise. Make sure you choose the mobile methodology option Mobile: Mobile Support : Once you have entered the name for the new test you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the Android App Simulator generic profile): When you click the OK button, Rapise will ask you to choose the Scripting Language: Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the Android App Simulator profile selected. Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click ... button in the top right corner of Rapise window to bring up the Mobile Settings dialog box: In the mobile profile screen, make sure you change the following: app - this needs to the path to the Application being tested on the device. You can download one from AUTAndroid Repository . deviceName - for emulator testing it must be Android Emulator . platformName - this needs to be set to Android . platformVersion - this needs to be set to the same version of Android that the virtual device is running. Once you have entered in the information and saved the profile, make sure that Appium is running on the PC and then click the Test Url button to verify the connection with Appium: Using the Mobile Spy \u00b6 The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface. If you do not see Mobile Spy button on the toolbar then choose Mobile Spy from the main menu: Tools > Spy > Mobile . Click Mobile Spy button, Mobile Spy will be displayed in Discovery Mode . Now click the Get Snapshot button to display the application specified in the mobile profile on the screen: In the example above, we are displaying the sample Android application that is available in AUTAndroid Repository . If you click on one of objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object: If you want to view the contents of the Spy as a text file, just click Spy > Page Source menu and you will see the contents of the Spy properties window as a text file. If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons. Now click on Tap and Rapise will send a tap event to the application, switching the application to the next page: Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on Spy > Disconnect menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script. Recording and Playing a Test \u00b6 With the new Rapise mobile test script open, click on the Record button on the toolbar and that will display the recording activity dialog : Now click on the Spy button and the Rapise Spy will be displayed in Recording Mode : We now want to record a click on one of the menu options, simply click on the Login button on the screenshot you see in Mobile Spy: Now click the Tap button to move the sample app to the next screen; Rapise will automatically reload the page in the Mobile Spy to get the updated screen: Now highlight user name field, put text into the edit field on the toolbar and press Send Keys button. Do the same for password field and record tap action on the Login and Home (back arrow) buttons. You will see the events in the recording activity dialog: Now click on the Finish button and you will be taken back to the test script with the Android objects listed and actions displayed on the RVL sheet: Now to playback the test simply click Play in the Rapise toolbar and the test will play back in the Android Emulator . This is the report of the test being executed. Sample Application and Tests \u00b6 You can find the Android sample tests and sample Application in AUTAndroid Repository . See Also \u00b6 Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. KB382 Android Testing Hints KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI? KB278 How to run a cross-browser test on a mobile device?","title":"Mobile Testing using Android"},{"location":"Guide/mobile_testing_android/#mobile-testing-using-android","text":"","title":"Mobile Testing using Android"},{"location":"Guide/mobile_testing_android/#purpose","text":"Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android . Rapise gives you the flexibility to test your applications on either real or simulated devices. This tutorial is a simple example of using Rapise to record and playback a simple test against a sample Android application running on the Android Emulator on your local PC. It does not require any physical mobile devices and only uses the PC that you have already installed Rapise on. (There is other documentation that describes the full range of mobile testing options) .","title":"Purpose"},{"location":"Guide/mobile_testing_android/#setting-up-environment","text":"The first thing you need to do is install Appium and Android Studio . Launch Android Virtual Device (AVD) Manager from the menu: Use the Create Virtual Device... button to create a Virtual Device. Learn more about how to create and manage virtual devices . You can then start the device and then connect to it using Rapise.","title":"Setting up Environment"},{"location":"Guide/mobile_testing_android/#configure-the-mobile-profile","text":"To begin the actual mobile testing, create a new test , using the File > New Test option in Rapise. Make sure you choose the mobile methodology option Mobile: Mobile Support : Once you have entered the name for the new test you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the Android App Simulator generic profile): When you click the OK button, Rapise will ask you to choose the Scripting Language: Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the Android App Simulator profile selected. Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click ... button in the top right corner of Rapise window to bring up the Mobile Settings dialog box: In the mobile profile screen, make sure you change the following: app - this needs to the path to the Application being tested on the device. You can download one from AUTAndroid Repository . deviceName - for emulator testing it must be Android Emulator . platformName - this needs to be set to Android . platformVersion - this needs to be set to the same version of Android that the virtual device is running. Once you have entered in the information and saved the profile, make sure that Appium is running on the PC and then click the Test Url button to verify the connection with Appium:","title":"Configure the Mobile Profile"},{"location":"Guide/mobile_testing_android/#using-the-mobile-spy","text":"The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface. If you do not see Mobile Spy button on the toolbar then choose Mobile Spy from the main menu: Tools > Spy > Mobile . Click Mobile Spy button, Mobile Spy will be displayed in Discovery Mode . Now click the Get Snapshot button to display the application specified in the mobile profile on the screen: In the example above, we are displaying the sample Android application that is available in AUTAndroid Repository . If you click on one of objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object: If you want to view the contents of the Spy as a text file, just click Spy > Page Source menu and you will see the contents of the Spy properties window as a text file. If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons. Now click on Tap and Rapise will send a tap event to the application, switching the application to the next page: Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on Spy > Disconnect menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script.","title":"Using the Mobile Spy"},{"location":"Guide/mobile_testing_android/#recording-and-playing-a-test","text":"With the new Rapise mobile test script open, click on the Record button on the toolbar and that will display the recording activity dialog : Now click on the Spy button and the Rapise Spy will be displayed in Recording Mode : We now want to record a click on one of the menu options, simply click on the Login button on the screenshot you see in Mobile Spy: Now click the Tap button to move the sample app to the next screen; Rapise will automatically reload the page in the Mobile Spy to get the updated screen: Now highlight user name field, put text into the edit field on the toolbar and press Send Keys button. Do the same for password field and record tap action on the Login and Home (back arrow) buttons. You will see the events in the recording activity dialog: Now click on the Finish button and you will be taken back to the test script with the Android objects listed and actions displayed on the RVL sheet: Now to playback the test simply click Play in the Rapise toolbar and the test will play back in the Android Emulator . This is the report of the test being executed.","title":"Recording and Playing a Test"},{"location":"Guide/mobile_testing_android/#sample-application-and-tests","text":"You can find the Android sample tests and sample Application in AUTAndroid Repository .","title":"Sample Application and Tests"},{"location":"Guide/mobile_testing_android/#see-also","text":"Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. KB382 Android Testing Hints KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI? KB278 How to run a cross-browser test on a mobile device?","title":"See Also"},{"location":"Guide/mobile_testing_ios/","text":"Mobile Testing using iOS \u00b6 Purpose \u00b6 Rapise lets you record and play automated tests on real iOS devices (iPad and iPhone) as well as test applications using the iOS simulator that ships with Xcode. No jailbreaking needed! With Rapise you can record on one device and playback on multiple. Prerequisites \u00b6 This section assumes that you have already installed and configured all of the necessary components. For details on this, please refer to the Preparing Environment for iOS Mobile Testing section. Configure the Mobile Profile \u00b6 To begin the actual mobile testing, create a new test , using the File > New Test option in Rapise. Make sure you choose the mobile methodology option Mobile: Mobile Support : Once you have entered the name for the new test (with the mobile methodology selected) you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the iOS App Simulator generic profile): When you click the OK button, Rapise will ask you to choose the Scripting Language: Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the iOS App Simulator profile selected. Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click ... button in the top right corner of Rapise window The example screeenshot above is for an iPhone X simulator running iOS 11.4. For any iOS device (real or simulated) you will need to provide the following: Uri - this is the URL to your Appium server. We shall discuss this shortly. app - this needs to the path (on the Mac running Appium) to the Application being tested on the device (e.g. /Users/user.name/Library/Developer/Xcode/DerivedData/AUTiOS-gvdyymxgyzrfgqdfvfylapawjoyd/Build/Products/Debug-iphonesimulator/AUTiOS.app ) deviceName - this needs to match the name of the device being connected. platformName - this needs to be set to iOS . platformVersion - this needs to be set to the correct version of iOS that the device is running. In addition, for physical devices only, you need to specify: udid - The unique device identifier of the connected physical device (leave blank for simulated devices). Once you have entered in the information and saved the profile, make sure that Appium is running on the Mac and then click the Test Url button to verify the connection with Appium: Now you can start testing your mobile iOS application. Using the Mobile Spy \u00b6 The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface. If you do not see Mobile Spy button on the toolbar then choose Mobile Spy from the main menu: Tools > Spy > Mobile . Click Mobile Spy button, Mobile Spy will be displayed in Discovery Mode . Now click the Get Snapshot button to display the application specified in the mobile profile on the screen: In the example above, we are displaying the sample iOS application that is available in AUTiOS Repository . If you click on one objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object: If you want to view the contents of the Spy as a text file, just click Spy > Page Source menu and you will see the contents of the Spy properties window as a text file. If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons. Now click on Tap and Rapise will send a tap event to the application, switching the application to the next page: Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on Spy > Disconnect menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script. Recording and Playing a Test \u00b6 With the new Rapise mobile test script open, click on the Record button on the toolbar and that will display the recording activity dialog : Now click on the Spy button and the Rapise Spy will be displayed in Recording Mode : We now want to record a click on one of the menu options, simply click on the Basic Controls list item on the screenshot you see in Mobile Spy: Now click the Tap button to move the sample app to the next screen; Rapise will automatically reload the page in the Mobile Spy to get the updated screen: Now highlight user name field, put text into the edit field on the toolbar and press Send Keys button. Do the same for password field and record tap action on the Login and Home (back arrow) buttons. You will see the events in the recording activity dialog: Now click on the Finish button and you will be taken back to the test script with the iOS objects listed and actions displayed on the RVL sheet: Now to playback the test simply click Play in the Rapise toolbar and the test will play back in the iOS Simulator . This is the report of the test being executed. Sample Application and Tests \u00b6 You can find the Android sample tests and sample Application in AUTiOS Repository . See Also \u00b6 Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. KB381 iOS Testing Hints KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI? KB278 How to run a cross-browser test on a mobile device? KB418 Is it possible to automate an iOS Web App using Rapise?","title":"Mobile Testing using iOS"},{"location":"Guide/mobile_testing_ios/#mobile-testing-using-ios","text":"","title":"Mobile Testing using iOS"},{"location":"Guide/mobile_testing_ios/#purpose","text":"Rapise lets you record and play automated tests on real iOS devices (iPad and iPhone) as well as test applications using the iOS simulator that ships with Xcode. No jailbreaking needed! With Rapise you can record on one device and playback on multiple.","title":"Purpose"},{"location":"Guide/mobile_testing_ios/#prerequisites","text":"This section assumes that you have already installed and configured all of the necessary components. For details on this, please refer to the Preparing Environment for iOS Mobile Testing section.","title":"Prerequisites"},{"location":"Guide/mobile_testing_ios/#configure-the-mobile-profile","text":"To begin the actual mobile testing, create a new test , using the File > New Test option in Rapise. Make sure you choose the mobile methodology option Mobile: Mobile Support : Once you have entered the name for the new test (with the mobile methodology selected) you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the iOS App Simulator generic profile): When you click the OK button, Rapise will ask you to choose the Scripting Language: Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the iOS App Simulator profile selected. Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click ... button in the top right corner of Rapise window The example screeenshot above is for an iPhone X simulator running iOS 11.4. For any iOS device (real or simulated) you will need to provide the following: Uri - this is the URL to your Appium server. We shall discuss this shortly. app - this needs to the path (on the Mac running Appium) to the Application being tested on the device (e.g. /Users/user.name/Library/Developer/Xcode/DerivedData/AUTiOS-gvdyymxgyzrfgqdfvfylapawjoyd/Build/Products/Debug-iphonesimulator/AUTiOS.app ) deviceName - this needs to match the name of the device being connected. platformName - this needs to be set to iOS . platformVersion - this needs to be set to the correct version of iOS that the device is running. In addition, for physical devices only, you need to specify: udid - The unique device identifier of the connected physical device (leave blank for simulated devices). Once you have entered in the information and saved the profile, make sure that Appium is running on the Mac and then click the Test Url button to verify the connection with Appium: Now you can start testing your mobile iOS application.","title":"Configure the Mobile Profile"},{"location":"Guide/mobile_testing_ios/#using-the-mobile-spy","text":"The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface. If you do not see Mobile Spy button on the toolbar then choose Mobile Spy from the main menu: Tools > Spy > Mobile . Click Mobile Spy button, Mobile Spy will be displayed in Discovery Mode . Now click the Get Snapshot button to display the application specified in the mobile profile on the screen: In the example above, we are displaying the sample iOS application that is available in AUTiOS Repository . If you click on one objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object: If you want to view the contents of the Spy as a text file, just click Spy > Page Source menu and you will see the contents of the Spy properties window as a text file. If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons. Now click on Tap and Rapise will send a tap event to the application, switching the application to the next page: Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on Spy > Disconnect menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script.","title":"Using the Mobile Spy"},{"location":"Guide/mobile_testing_ios/#recording-and-playing-a-test","text":"With the new Rapise mobile test script open, click on the Record button on the toolbar and that will display the recording activity dialog : Now click on the Spy button and the Rapise Spy will be displayed in Recording Mode : We now want to record a click on one of the menu options, simply click on the Basic Controls list item on the screenshot you see in Mobile Spy: Now click the Tap button to move the sample app to the next screen; Rapise will automatically reload the page in the Mobile Spy to get the updated screen: Now highlight user name field, put text into the edit field on the toolbar and press Send Keys button. Do the same for password field and record tap action on the Login and Home (back arrow) buttons. You will see the events in the recording activity dialog: Now click on the Finish button and you will be taken back to the test script with the iOS objects listed and actions displayed on the RVL sheet: Now to playback the test simply click Play in the Rapise toolbar and the test will play back in the iOS Simulator . This is the report of the test being executed.","title":"Recording and Playing a Test"},{"location":"Guide/mobile_testing_ios/#sample-application-and-tests","text":"You can find the Android sample tests and sample Application in AUTiOS Repository .","title":"Sample Application and Tests"},{"location":"Guide/mobile_testing_ios/#see-also","text":"Mobile Testing , for an overview of mobile testing with sub-sections on testing. Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing. Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application. KB381 iOS Testing Hints KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI? KB278 How to run a cross-browser test on a mobile device? KB418 Is it possible to automate an iOS Web App using Rapise?","title":"See Also"},{"location":"Guide/multiple_recordings/","text":"Multiple Recordings \u00b6 Purpose \u00b6 Every time you record, the script recorder updates your test script. Be cautious about what changes you make to the test script; some changes could be lost if the recorder is re-run (see Usage ). Usage \u00b6 The test script path can be found in the title of Rapise window. Unless you specify otherwise, the test script is named Main.js . Note that the Script Recorder only has knowledge of four functions and two data structures: function Test() function TestInit() function TestFinish() function TestPrepare() array g_load_libraries map saved_script_objects You can make changes to the body of any of the above functions, and you can alter the initialization of g_load_libraries and saved_script_objects . All other changes are unsafe. During Recording, the Script Recorder: Appends newly recorded actions to the Test() function Appends newly encountered objects to the saved_script_objects array Updates g_load_libraries to reflect the library selections you made in the Select an Application to Record... Dialog Ignores (and leaves intact) the definitions of TestInit() , TestFinish() , and TestPrepare() For example, suppose that you have the following code inside your script file: //External comment // UNSAFE: will be removed by recorder /*Another comment*/ // UNSAFE var external_var ; // UNSAFE function Test () { //comment --SAFE var external_var ; //SAFE: defines a local variable for function \u201cTest\u201d global_var = value ; //SAFE: updates (or defines) a global variable //SAFE everything inside this function will be kept intact after recording } The parts of code marked UNSAFE will be deleted by the script recorder. See Also \u00b6 Settings Dialog Select an Application to Record... Dialog Recording","title":"Multiple Recordings"},{"location":"Guide/multiple_recordings/#multiple-recordings","text":"","title":"Multiple Recordings"},{"location":"Guide/multiple_recordings/#purpose","text":"Every time you record, the script recorder updates your test script. Be cautious about what changes you make to the test script; some changes could be lost if the recorder is re-run (see Usage ).","title":"Purpose"},{"location":"Guide/multiple_recordings/#usage","text":"The test script path can be found in the title of Rapise window. Unless you specify otherwise, the test script is named Main.js . Note that the Script Recorder only has knowledge of four functions and two data structures: function Test() function TestInit() function TestFinish() function TestPrepare() array g_load_libraries map saved_script_objects You can make changes to the body of any of the above functions, and you can alter the initialization of g_load_libraries and saved_script_objects . All other changes are unsafe. During Recording, the Script Recorder: Appends newly recorded actions to the Test() function Appends newly encountered objects to the saved_script_objects array Updates g_load_libraries to reflect the library selections you made in the Select an Application to Record... Dialog Ignores (and leaves intact) the definitions of TestInit() , TestFinish() , and TestPrepare() For example, suppose that you have the following code inside your script file: //External comment // UNSAFE: will be removed by recorder /*Another comment*/ // UNSAFE var external_var ; // UNSAFE function Test () { //comment --SAFE var external_var ; //SAFE: defines a local variable for function \u201cTest\u201d global_var = value ; //SAFE: updates (or defines) a global variable //SAFE everything inside this function will be kept intact after recording } The parts of code marked UNSAFE will be deleted by the script recorder.","title":"Usage"},{"location":"Guide/multiple_recordings/#see-also","text":"Settings Dialog Select an Application to Record... Dialog Recording","title":"See Also"},{"location":"Guide/namevalue_collection_editor_di/","text":"TestParam Collection Editor Dialog \u00b6 Purpose \u00b6 To specify Custom Strings and their values. How to Open \u00b6 Open from the Settings Dialog , TestParams option: Widgets \u00b6 Add a custom string. If you press Add , you'll see this: Remove: removes selected custom string. OK : Save changes and close dialog. Cancel : Close dialog without saving changes.","title":"NameValue Collection Editor Dialog"},{"location":"Guide/namevalue_collection_editor_di/#testparam-collection-editor-dialog","text":"","title":"TestParam Collection Editor Dialog"},{"location":"Guide/namevalue_collection_editor_di/#purpose","text":"To specify Custom Strings and their values.","title":"Purpose"},{"location":"Guide/namevalue_collection_editor_di/#how-to-open","text":"Open from the Settings Dialog , TestParams option:","title":"How to Open"},{"location":"Guide/namevalue_collection_editor_di/#widgets","text":"Add a custom string. If you press Add , you'll see this: Remove: removes selected custom string. OK : Save changes and close dialog. Cancel : Close dialog without saving changes.","title":"Widgets"},{"location":"Guide/naming_conventions/","text":"Naming Conventions \u00b6 Purpose \u00b6 The Rapise engine and API follow some simple naming conventions. Usage \u00b6 You will find descriptions of the naming conventions below. Note: italicized text represents placeholders. SeS*<...>* - public functions for user Do*<Action>* - action implementations _ <somevar> and _ <somename> - private functions and objects g_ <varname> - system global variable. Examples \u00b6 Here are some examples to clarify the above conventions: SeS ( \"object\" ) // gets the object named \"object\" DoClick () // public action function to click on something _mydata // private variable called mydata g_publicdata // global variable called publicdata","title":"Naming Conventions"},{"location":"Guide/naming_conventions/#naming-conventions","text":"","title":"Naming Conventions"},{"location":"Guide/naming_conventions/#purpose","text":"The Rapise engine and API follow some simple naming conventions.","title":"Purpose"},{"location":"Guide/naming_conventions/#usage","text":"You will find descriptions of the naming conventions below. Note: italicized text represents placeholders. SeS*<...>* - public functions for user Do*<Action>* - action implementations _ <somevar> and _ <somename> - private functions and objects g_ <varname> - system global variable.","title":"Usage"},{"location":"Guide/naming_conventions/#examples","text":"Here are some examples to clarify the above conventions: SeS ( \"object\" ) // gets the object named \"object\" DoClick () // public action function to click on something _mydata // private variable called mydata g_publicdata // global variable called publicdata","title":"Examples"},{"location":"Guide/neoload_convertor_dialog/","text":"NeoLoad Convertor Dialog \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. Purpose \u00b6 The purpose of this dialog is to allow you to convert a functional test script from Rapise into a protocol-based performance script that can be executed using the NeoLoad performance testing tool from Neotys. How to Open \u00b6 Use menu Tools > Convert to Neoload . Virtual User \u00b6 In this field, you need to enter the name of the virtual user to create in NeoLoad: The default value is \"VirtualUser\" If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented. If the name has invalid characters then they will be escaped as an underscore (_). Base Container \u00b6 This specifies the base container where we want to start the recording (Init / Actions / End) The default value is Actions. Container/Business Transaction \u00b6 This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers. The default is no container. If the name is already used then it will be made unique by adding _1, _2, etc. If the name is empty then no container will be used. Detect Dynamic Parameters \u00b6 When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID). Actions \u00b6 Convert will start the Rapise > NeoLoad test conversion process Cancel will abort the conversion and return you to Rapise","title":"NeoLoad Convertor Dialog"},{"location":"Guide/neoload_convertor_dialog/#neoload-convertor-dialog","text":"Important NeoLoad integration has been removed in Rapise 7.0.","title":"NeoLoad Convertor Dialog"},{"location":"Guide/neoload_convertor_dialog/#purpose","text":"The purpose of this dialog is to allow you to convert a functional test script from Rapise into a protocol-based performance script that can be executed using the NeoLoad performance testing tool from Neotys.","title":"Purpose"},{"location":"Guide/neoload_convertor_dialog/#how-to-open","text":"Use menu Tools > Convert to Neoload .","title":"How to Open"},{"location":"Guide/neoload_convertor_dialog/#virtual-user","text":"In this field, you need to enter the name of the virtual user to create in NeoLoad: The default value is \"VirtualUser\" If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented. If the name has invalid characters then they will be escaped as an underscore (_).","title":"Virtual User"},{"location":"Guide/neoload_convertor_dialog/#base-container","text":"This specifies the base container where we want to start the recording (Init / Actions / End) The default value is Actions.","title":"Base Container"},{"location":"Guide/neoload_convertor_dialog/#containerbusiness-transaction","text":"This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers. The default is no container. If the name is already used then it will be made unique by adding _1, _2, etc. If the name is empty then no container will be used.","title":"Container/Business Transaction"},{"location":"Guide/neoload_convertor_dialog/#detect-dynamic-parameters","text":"When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID).","title":"Detect Dynamic Parameters"},{"location":"Guide/neoload_convertor_dialog/#actions","text":"Convert will start the Rapise > NeoLoad test conversion process Cancel will abort the conversion and return you to Rapise","title":"Actions"},{"location":"Guide/neoload_integration/","text":"NeoLoad Integration \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. This section describes the integration between Inflectra\u2019s Rapise functional testing tool and Neotys\u2019 NeoLoad performance testing tool. The purpose of this integration is to satisfy the following two use cases: The tester has written a test script in Rapise that tests the user interface of the application (by clicking on buttons and performing other UI tasks) but now wants to load test the server behind the user interface to make sure it can withstand the load of 10,000+ similar users making requests. The existing Rapise test is not suitable because it would mean launching 10,000+ instances of the application or web browser on a single client machine, or having 10,000 instances of the application run on different machines at the same time. The solution is to use a protocol-based load testing tool such as NeoLoad that sends the HTTP/HTTPS requests directly to the server. However it is laborious and time consuming to manually record the entire script in NeoLoad from scratch. The solution is to automatically convert the Rapise script to NeoLoad by playing the Rapise script at the same time as NeoLoad records the generated HTTP/HTTPS traffic. The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level level load test. How long does each transaction take whilst 1000 VUs are hitting the same system. The user interface could be web, mobile or thick client (e.g. ERP system).","title":"NeoLoad Integration"},{"location":"Guide/neoload_integration/#neoload-integration","text":"Important NeoLoad integration has been removed in Rapise 7.0. This section describes the integration between Inflectra\u2019s Rapise functional testing tool and Neotys\u2019 NeoLoad performance testing tool. The purpose of this integration is to satisfy the following two use cases: The tester has written a test script in Rapise that tests the user interface of the application (by clicking on buttons and performing other UI tasks) but now wants to load test the server behind the user interface to make sure it can withstand the load of 10,000+ similar users making requests. The existing Rapise test is not suitable because it would mean launching 10,000+ instances of the application or web browser on a single client machine, or having 10,000 instances of the application run on different machines at the same time. The solution is to use a protocol-based load testing tool such as NeoLoad that sends the HTTP/HTTPS requests directly to the server. However it is laborious and time consuming to manually record the entire script in NeoLoad from scratch. The solution is to automatically convert the Rapise script to NeoLoad by playing the Rapise script at the same time as NeoLoad records the generated HTTP/HTTPS traffic. The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level level load test. How long does each transaction take whilst 1000 VUs are hitting the same system. The user interface could be web, mobile or thick client (e.g. ERP system).","title":"NeoLoad Integration"},{"location":"Guide/neoload_settings_dialog/","text":"NeoLoad Settings Dialog \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. Purpose \u00b6 The purpose of this dialog is to allow you to specify the global options for integrating Rapise with NeoLoad , the performance testing tool from Neotys. How to Open \u00b6 Use menu Settings > NeoLoad Integration . Normally there is no any reason to change these settings, but for completeness they are described below: NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API","title":"NeoLoad Settings Dialog"},{"location":"Guide/neoload_settings_dialog/#neoload-settings-dialog","text":"Important NeoLoad integration has been removed in Rapise 7.0.","title":"NeoLoad Settings Dialog"},{"location":"Guide/neoload_settings_dialog/#purpose","text":"The purpose of this dialog is to allow you to specify the global options for integrating Rapise with NeoLoad , the performance testing tool from Neotys.","title":"Purpose"},{"location":"Guide/neoload_settings_dialog/#how-to-open","text":"Use menu Settings > NeoLoad Integration . Normally there is no any reason to change these settings, but for completeness they are described below: NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API","title":"How to Open"},{"location":"Guide/nunit/","text":"NUnit \u00b6 About NUnit Integration \u00b6 SeSNUnit is a sample of using NUnit. We provide special attribute to help executing Rapise GUI tests from within NUnit tests. Standard NUnit test looks like this: using System ; using NUnit.Framework ; [TestFixture] public class MyTests { [Test] /* \u2013 THIS IS AN ATTRIBUTE FOR STANDARD NUnit Test */ public void MyTest1 () { Assert . AreEqual ( 1 , 2 , \"Check equality\" ); } } Each test case is a function with a special attribute [ Test ]. NUnit uses it to find test cases, then collects cases in sets and so on. Rapise integration makes execution of Rapise tests as simple as execution of normal NUnit tests: using System ; using NUnit.Framework ; using SeSNUnit ; // We include Rapise helper class [TestFixture] public class PlayerTesting { // Next line means: this is an NUnit test that executes Cross Browser.sstest with Rapise [SeSNUnitTest(@\"T:\\Samples\\Cross Browser\\CrossBrowser.sstest\")] public void TestIEandFirefox () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } } Now we use another attribute to mark the test: [SeSNUnitTest(@\"<path to .sstest>\")] We just mark this test as a wrapper for concrete Rapise test instance. Installing NUnit \u00b6 To run this sample you need NUnit. You can download NUnit from this site http://www.nunit.org/index.php?p=download . Download and install NUnit package (for example, NUnit-2.4.8-net-2.0.msi). It is installation package file, so only thing that you need to do after download is to double click on that file. Run NUnit from the start menu: Select \u201cOpenProject\u2026\u201d from \u201cFile\u201d menu: In opened window find and select 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit\\SeSSamplesNUnit\\bin\\Release\\SeSSamplesNUnit.dll Press \u201cRun\u201d to start the test After the test ended NUnit GUI must look like: Tree Display \u00b6 There is a test tree in the left part of a window, it contains tests of current NUnit project. From this tree you can easily determine the test status. Successful tests are colored green, with a check mark. If any tests had failed, they would be marked red, with an X symbol. Progress Bar \u00b6 The progress bar shows the progress of the test. It is colored according to the \"worst\" result obtained: red if there were any failures, yellow if some tests were ignored and green for success. Result Tabs \u00b6 The tabs in the right-hand part of the display show the results of running a test. The Errors and Failures tab displays the error message and stack trace for both unexpected exceptions and assertion failures. The Tests Not Run tab provides a list of all tests that were selected for running but were not run, together with the reason. The Console.Out , Console.Error and Trace Output tabs display text output from the tests. Visual Studio Templates \u00b6 Templates are available to help you creating tests in Visual Studio. To install them use run installer file: 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit.vsi and follow the installation process This will add code snippets and project templates described below. Creating SeSNUnit test \u00b6 Maybe you will want to write your own SeSNUnit test. We have special template which will help you to do that. In this part we\u2019ll explain how to use it. The only thing you need to do is just to create SeSNUnitTests type project. For that open VS2005, on Start Page click on Project... (in the right side of Create: ) and in opened window from My Templates part select SeSNUnitTests . If you want you can change name of dll. By default it is SeSNUnitTests1 : In the created project Open Fixture1.cs file. All necessary references are already added: using System ; using System.Collections.Generic ; using System.Text ; using System.Diagnostics ; using NUnit.Framework ; using SeSNUnit ; File also contains Fixture1class with [TestFixture] attribute: [TestFixture] public class Fixture1 { ... } This is the attribute that marks a class that contains tests and, optionally, setup or teardown methods. There are a few restrictions on a class that is used as a test fixture. It must be a publicly exported type. It must not be abstract. It must have a default constructor It must have no more than one of each of the following method types: SetUp , TearDown , TestFixtureSetUp and TestFixtureTearDown . If any of these restrictions are violated the class will be shown as a non-runnable test fixture and will turn yellow in the NUnit GUI if you attempt to run it. In addition it is advisable that the constructor not have any side effects since NUnit may construct the object multiple times in the course of a session. In class we have SetUp() and TearDown() methods, and one more test method: [SetUp()] public void SetUp () { //TODO - Setup your test objects here } [TearDown()] public void TearDown () { //TODO - Tidy up your test objects here } [SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)] public void TestSeS () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } Now you also have a snippet, by which you can easily add TestSeS method with [SeSNUnitTest(@\"<path to .sstest>\")] attribute. Right click in class body and from opened context menu select Insert Snippet\u2026 : From it select My Code Snippets (if your snippets are in My Code Snippets folder, otherwise select proper folder), and then SeSNUnitTest : This code will be added: [SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)] public void TestSeS () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } You just need to add path of .sstest file to SeSNUnitTest attribute. If you add code via snippet in standard SeSNUnit Test project you will have two TestSeS methods, so don\u2019t forget to change the name of one of them.","title":"NUnit"},{"location":"Guide/nunit/#nunit","text":"","title":"NUnit"},{"location":"Guide/nunit/#about-nunit-integration","text":"SeSNUnit is a sample of using NUnit. We provide special attribute to help executing Rapise GUI tests from within NUnit tests. Standard NUnit test looks like this: using System ; using NUnit.Framework ; [TestFixture] public class MyTests { [Test] /* \u2013 THIS IS AN ATTRIBUTE FOR STANDARD NUnit Test */ public void MyTest1 () { Assert . AreEqual ( 1 , 2 , \"Check equality\" ); } } Each test case is a function with a special attribute [ Test ]. NUnit uses it to find test cases, then collects cases in sets and so on. Rapise integration makes execution of Rapise tests as simple as execution of normal NUnit tests: using System ; using NUnit.Framework ; using SeSNUnit ; // We include Rapise helper class [TestFixture] public class PlayerTesting { // Next line means: this is an NUnit test that executes Cross Browser.sstest with Rapise [SeSNUnitTest(@\"T:\\Samples\\Cross Browser\\CrossBrowser.sstest\")] public void TestIEandFirefox () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } } Now we use another attribute to mark the test: [SeSNUnitTest(@\"<path to .sstest>\")] We just mark this test as a wrapper for concrete Rapise test instance.","title":"About NUnit Integration"},{"location":"Guide/nunit/#installing-nunit","text":"To run this sample you need NUnit. You can download NUnit from this site http://www.nunit.org/index.php?p=download . Download and install NUnit package (for example, NUnit-2.4.8-net-2.0.msi). It is installation package file, so only thing that you need to do after download is to double click on that file. Run NUnit from the start menu: Select \u201cOpenProject\u2026\u201d from \u201cFile\u201d menu: In opened window find and select 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit\\SeSSamplesNUnit\\bin\\Release\\SeSSamplesNUnit.dll Press \u201cRun\u201d to start the test After the test ended NUnit GUI must look like:","title":"Installing NUnit"},{"location":"Guide/nunit/#tree-display","text":"There is a test tree in the left part of a window, it contains tests of current NUnit project. From this tree you can easily determine the test status. Successful tests are colored green, with a check mark. If any tests had failed, they would be marked red, with an X symbol.","title":"Tree Display"},{"location":"Guide/nunit/#progress-bar","text":"The progress bar shows the progress of the test. It is colored according to the \"worst\" result obtained: red if there were any failures, yellow if some tests were ignored and green for success.","title":"Progress Bar"},{"location":"Guide/nunit/#result-tabs","text":"The tabs in the right-hand part of the display show the results of running a test. The Errors and Failures tab displays the error message and stack trace for both unexpected exceptions and assertion failures. The Tests Not Run tab provides a list of all tests that were selected for running but were not run, together with the reason. The Console.Out , Console.Error and Trace Output tabs display text output from the tests.","title":"Result Tabs"},{"location":"Guide/nunit/#visual-studio-templates","text":"Templates are available to help you creating tests in Visual Studio. To install them use run installer file: 1 C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit.vsi and follow the installation process This will add code snippets and project templates described below.","title":"Visual Studio Templates"},{"location":"Guide/nunit/#creating-sesnunit-test","text":"Maybe you will want to write your own SeSNUnit test. We have special template which will help you to do that. In this part we\u2019ll explain how to use it. The only thing you need to do is just to create SeSNUnitTests type project. For that open VS2005, on Start Page click on Project... (in the right side of Create: ) and in opened window from My Templates part select SeSNUnitTests . If you want you can change name of dll. By default it is SeSNUnitTests1 : In the created project Open Fixture1.cs file. All necessary references are already added: using System ; using System.Collections.Generic ; using System.Text ; using System.Diagnostics ; using NUnit.Framework ; using SeSNUnit ; File also contains Fixture1class with [TestFixture] attribute: [TestFixture] public class Fixture1 { ... } This is the attribute that marks a class that contains tests and, optionally, setup or teardown methods. There are a few restrictions on a class that is used as a test fixture. It must be a publicly exported type. It must not be abstract. It must have a default constructor It must have no more than one of each of the following method types: SetUp , TearDown , TestFixtureSetUp and TestFixtureTearDown . If any of these restrictions are violated the class will be shown as a non-runnable test fixture and will turn yellow in the NUnit GUI if you attempt to run it. In addition it is advisable that the constructor not have any side effects since NUnit may construct the object multiple times in the course of a session. In class we have SetUp() and TearDown() methods, and one more test method: [SetUp()] public void SetUp () { //TODO - Setup your test objects here } [TearDown()] public void TearDown () { //TODO - Tidy up your test objects here } [SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)] public void TestSeS () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } Now you also have a snippet, by which you can easily add TestSeS method with [SeSNUnitTest(@\"<path to .sstest>\")] attribute. Right click in class body and from opened context menu select Insert Snippet\u2026 : From it select My Code Snippets (if your snippets are in My Code Snippets folder, otherwise select proper folder), and then SeSNUnitTest : This code will be added: [SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)] public void TestSeS () { int exitCode = SeSNUnitHelper . TestExecute (); Assert . AreEqual ( 0 , exitCode ); } You just need to add path of .sstest file to SeSNUnitTest attribute. If you add code via snippet in standard SeSNUnit Test project you will have two TestSeS methods, so don\u2019t forget to change the name of one of them.","title":"Creating SeSNUnit test"},{"location":"Guide/object_learning/","text":"Learning \u00b6 Purpose \u00b6 Objects are the controls and items on the screen of the AUT. Learning an object refers to the process of Rapise collecting enough information about the on-screen item to be able to reference the item when the test script is run without ambiguity and regardless of its location on the UI. When Rapise learns an object, it records the object's type, its name and how to find the object again (locator). It saves everything it learns to the script so that the object can be identified when the test is run. Rapise gives the object a simple name so that you can easily refer to it later if you decide to modify the script. Usage \u00b6 Objects are learned in three ways: (1) automatically during recording, (2) manually using Learn button, (3) using the Spy tool. 1. Automatic Learn \u00b6 During a Recording session, Rapise learns about each object with which you interact. For details, see Recording . 2. Manual Learn \u00b6 Open the Recording Activity Dialog . Instructions are HERE . Place your mouse over the object you wish to learn. It should become surrounded by a purple box. Press Ctrl + 2 . You will see a new entry in the Recording Activity Dialog, signifying that the object was learned. 3. Spy Tool \u00b6 During a Recording session, you can also click on the Spy button inspect the object hierarchy of the application you are testing. The Spy lets you pick specific objects that might not be visible on the screen, or may be parent/child objects of the one highlighted. When you have found the correct object in the Spy, you can use the Learn Object button inside the Spy to add it to Rapise's learned object list. The Object Tree \u00b6 Regardless of how you learn the object, it will be displayed in the Object tree : Each object has various properties and actions that can be performed on it. Expanding the object name lets you see the available actions and properties: Everything Rapise learns about an object is saved in saved_script_objects array. You can see this variable defined in the Objects.js file that will be listed in the Files tab of the Rapise. The following shows what Rapise saved about the \"Please enter your name\" text box in the Tutorial: Windows Testing : \"Please_enter_your_name_\" : { \"locations\" : [ { \"locator_name\" : \"UIAutomation\" , \"location\" : { \"location\" : \"param:location\" , \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" } } ], \"window_class\" : \"#32770\" , \"object_text\" : \"\" , \"object_role\" : \"param:object_class\" , \"object_class\" : \"Edit\" , \"version\" : 0 , \"object_type\" : \"UIATextBox\" , \"object_flavor\" : \"Text\" , \"object_name\" : \"Please enter your name:\" , \"object_library\" : \"UIAutomation\" , \"window_name\" : \"Inflectra Rapise Two Dialogs Sample\" , \"location\" : \"Inflectra Rapise Two Dialogs Sample/Please enter your name:[1]\" } See Also \u00b6 Recording Learning invisible and Simulated Objects is slightly more complicated. You can find information on both in the Recording Activity Dialog section. Learn Object","title":"Learning"},{"location":"Guide/object_learning/#learning","text":"","title":"Learning"},{"location":"Guide/object_learning/#purpose","text":"Objects are the controls and items on the screen of the AUT. Learning an object refers to the process of Rapise collecting enough information about the on-screen item to be able to reference the item when the test script is run without ambiguity and regardless of its location on the UI. When Rapise learns an object, it records the object's type, its name and how to find the object again (locator). It saves everything it learns to the script so that the object can be identified when the test is run. Rapise gives the object a simple name so that you can easily refer to it later if you decide to modify the script.","title":"Purpose"},{"location":"Guide/object_learning/#usage","text":"Objects are learned in three ways: (1) automatically during recording, (2) manually using Learn button, (3) using the Spy tool.","title":"Usage"},{"location":"Guide/object_learning/#1-automatic-learn","text":"During a Recording session, Rapise learns about each object with which you interact. For details, see Recording .","title":"1. Automatic Learn"},{"location":"Guide/object_learning/#2-manual-learn","text":"Open the Recording Activity Dialog . Instructions are HERE . Place your mouse over the object you wish to learn. It should become surrounded by a purple box. Press Ctrl + 2 . You will see a new entry in the Recording Activity Dialog, signifying that the object was learned.","title":"2. Manual Learn"},{"location":"Guide/object_learning/#3-spy-tool","text":"During a Recording session, you can also click on the Spy button inspect the object hierarchy of the application you are testing. The Spy lets you pick specific objects that might not be visible on the screen, or may be parent/child objects of the one highlighted. When you have found the correct object in the Spy, you can use the Learn Object button inside the Spy to add it to Rapise's learned object list.","title":"3. Spy Tool"},{"location":"Guide/object_learning/#the-object-tree","text":"Regardless of how you learn the object, it will be displayed in the Object tree : Each object has various properties and actions that can be performed on it. Expanding the object name lets you see the available actions and properties: Everything Rapise learns about an object is saved in saved_script_objects array. You can see this variable defined in the Objects.js file that will be listed in the Files tab of the Rapise. The following shows what Rapise saved about the \"Please enter your name\" text box in the Tutorial: Windows Testing : \"Please_enter_your_name_\" : { \"locations\" : [ { \"locator_name\" : \"UIAutomation\" , \"location\" : { \"location\" : \"param:location\" , \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" } } ], \"window_class\" : \"#32770\" , \"object_text\" : \"\" , \"object_role\" : \"param:object_class\" , \"object_class\" : \"Edit\" , \"version\" : 0 , \"object_type\" : \"UIATextBox\" , \"object_flavor\" : \"Text\" , \"object_name\" : \"Please enter your name:\" , \"object_library\" : \"UIAutomation\" , \"window_name\" : \"Inflectra Rapise Two Dialogs Sample\" , \"location\" : \"Inflectra Rapise Two Dialogs Sample/Please enter your name:[1]\" }","title":"The Object Tree"},{"location":"Guide/object_learning/#see-also","text":"Recording Learning invisible and Simulated Objects is slightly more complicated. You can find information on both in the Recording Activity Dialog section. Learn Object","title":"See Also"},{"location":"Guide/object_locator/","text":"Object Locator \u00b6 Purpose \u00b6 Object locators are created during Recording / Learning and used during Playback to identify learned objects and simulated objects . There are many types of locators. In most libraries (Web, Desktop, Mobile) only one locator is generated when you record or learn an object. Legacy Generic library supports 4 different locators added each time you learn or record object: Location : This locator uses the object's index relative to encapsulating objects for identification. The location is stored as a period separated list of indexes. For instance, 1.2.3 would be \"the third object in the second object in the first object.\" The name, class, and role of the object are also stored. LocationPath : This locator remembers name, class, and role property information for the object and all of its encapsulating objects. LocationRect : This locator stores screen coordinates. Ordinal : This locator creates an array of object name/object class combinations. Each object is assigned an index in the array. Usage \u00b6 The locator for the selected object is shown in the Properties view: How Locators are Stored \u00b6 The locator for each object is specified in saved_script_objects array in Objects.js of a test. Locator information is stored in locations array of each object. \"Simulated\" : { \"locations\" : [ { \"locator_name\" : \"Location\" , \"location\" : { \"location\" : \"4.3.4.1.4.1.4.1.4.1.4.10.1.1.7.3\" , \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" } }, { \"locator_name\" : \"LocationPath\" , \"location\" : { // ... } }, { \"locator_name\" : \"LocationRect\" , \"location\" : { \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" , \"rect\" : { \"object_name\" : \"\" , \"object_class\" : \"param:object_class\" , \"object_role\" : \"param:object_role\" , \"x\" : 573 , \"y\" : 59 , \"w\" : 220 , \"h\" : 66 } } } ], \"window_class\" : \"MSPaintApp\" , \"object_text\" : \"\" , \"object_role\" : \"ROLE_SYSTEM_GROUPING\" , \"object_class\" : \"NetUIHWND\" , \"version\" : 0 , \"object_type\" : \"SeSSimulated\" , \"object_flavor\" : \"Simulated\" , \"object_name\" : \"Simulated\" , \"ignore_object_name\" : true , \"window_name\" : \"Untitled - Paint\" } Locator Parameters \u00b6 If a piece of information in the locator matches a piece of object info ( object_name , object_class , object_role , object_text ) then it is stored in the locator as param:object_info . For example: \"object_name\" : \"param:object_name\" , \"object_class\" : \"param:object_class\" , \"object_role\" : \"param:object_role\" Over-riding Locator Parameters (RVL) \u00b6 See also RVL.SetLocatorOpts and this KB Article for more detailed explanation and example of overriding locator parameters in RVL. Over-riding Locator Parameters (JS) \u00b6 You can over-ride the information used to locate your object at runtime. Normally, to refer to an object, you use the SeS function: SeS ( 'Username' ) To override locator parameters, specify the new value in the function call. In the following example, we over-ride the object_name parameter for object Username : SeS ( 'Username' , { object_name : \"regex:.*\" }) You may want to change a parameter value for every locator/object in the program. For instance, perhaps the url of the webpage has changed. Use the global variable g_locatorparams as in the following example: function Test () { // Here we use direct parameter overriding SeS ( 'Obj1' , { url : \"http://newaddr/\" }). DoAction (); SeS ( 'Obj2' , { url : \"http://newaddr/\" }). DoAction (); // And this is equivalent to above g_locatorparams [ \"url\" ] = \"http://newaddr/\" ; SeS ( \"Obj1\" ). DoAction (); SeS ( \"Obj2\" ). DoAction (); // ... } See Also \u00b6 Object Learning Playback","title":"Object Locator"},{"location":"Guide/object_locator/#object-locator","text":"","title":"Object Locator"},{"location":"Guide/object_locator/#purpose","text":"Object locators are created during Recording / Learning and used during Playback to identify learned objects and simulated objects . There are many types of locators. In most libraries (Web, Desktop, Mobile) only one locator is generated when you record or learn an object. Legacy Generic library supports 4 different locators added each time you learn or record object: Location : This locator uses the object's index relative to encapsulating objects for identification. The location is stored as a period separated list of indexes. For instance, 1.2.3 would be \"the third object in the second object in the first object.\" The name, class, and role of the object are also stored. LocationPath : This locator remembers name, class, and role property information for the object and all of its encapsulating objects. LocationRect : This locator stores screen coordinates. Ordinal : This locator creates an array of object name/object class combinations. Each object is assigned an index in the array.","title":"Purpose"},{"location":"Guide/object_locator/#usage","text":"The locator for the selected object is shown in the Properties view:","title":"Usage"},{"location":"Guide/object_locator/#how-locators-are-stored","text":"The locator for each object is specified in saved_script_objects array in Objects.js of a test. Locator information is stored in locations array of each object. \"Simulated\" : { \"locations\" : [ { \"locator_name\" : \"Location\" , \"location\" : { \"location\" : \"4.3.4.1.4.1.4.1.4.1.4.10.1.1.7.3\" , \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" } }, { \"locator_name\" : \"LocationPath\" , \"location\" : { // ... } }, { \"locator_name\" : \"LocationRect\" , \"location\" : { \"window_name\" : \"param:window_name\" , \"window_class\" : \"param:window_class\" , \"rect\" : { \"object_name\" : \"\" , \"object_class\" : \"param:object_class\" , \"object_role\" : \"param:object_role\" , \"x\" : 573 , \"y\" : 59 , \"w\" : 220 , \"h\" : 66 } } } ], \"window_class\" : \"MSPaintApp\" , \"object_text\" : \"\" , \"object_role\" : \"ROLE_SYSTEM_GROUPING\" , \"object_class\" : \"NetUIHWND\" , \"version\" : 0 , \"object_type\" : \"SeSSimulated\" , \"object_flavor\" : \"Simulated\" , \"object_name\" : \"Simulated\" , \"ignore_object_name\" : true , \"window_name\" : \"Untitled - Paint\" }","title":"How Locators are Stored"},{"location":"Guide/object_locator/#locator-parameters","text":"If a piece of information in the locator matches a piece of object info ( object_name , object_class , object_role , object_text ) then it is stored in the locator as param:object_info . For example: \"object_name\" : \"param:object_name\" , \"object_class\" : \"param:object_class\" , \"object_role\" : \"param:object_role\"","title":"Locator Parameters"},{"location":"Guide/object_locator/#over-riding-locator-parameters-rvl","text":"See also RVL.SetLocatorOpts and this KB Article for more detailed explanation and example of overriding locator parameters in RVL.","title":"Over-riding Locator Parameters (RVL)"},{"location":"Guide/object_locator/#over-riding-locator-parameters-js","text":"You can over-ride the information used to locate your object at runtime. Normally, to refer to an object, you use the SeS function: SeS ( 'Username' ) To override locator parameters, specify the new value in the function call. In the following example, we over-ride the object_name parameter for object Username : SeS ( 'Username' , { object_name : \"regex:.*\" }) You may want to change a parameter value for every locator/object in the program. For instance, perhaps the url of the webpage has changed. Use the global variable g_locatorparams as in the following example: function Test () { // Here we use direct parameter overriding SeS ( 'Obj1' , { url : \"http://newaddr/\" }). DoAction (); SeS ( 'Obj2' , { url : \"http://newaddr/\" }). DoAction (); // And this is equivalent to above g_locatorparams [ \"url\" ] = \"http://newaddr/\" ; SeS ( \"Obj1\" ). DoAction (); SeS ( \"Obj2\" ). DoAction (); // ... }","title":"Over-riding Locator Parameters (JS)"},{"location":"Guide/object_locator/#see-also","text":"Object Learning Playback","title":"See Also"},{"location":"Guide/object_manager/","text":"Object Manager \u00b6 Purpose \u00b6 The Object Manager allows you to merge the object trees of two different Rapise tests. This can be useful when you have a new test that needs some of the objects from a test that you have already written. How to Open \u00b6 Use menu Tools > Object Manager . Choosing Files to Merge \u00b6 In the example above we have opened up a test case that has some objects. Now we need to open up another test that also has some objects. To do this, click on the ... button to the right of the Destination text box to open up a Rapise test object file ( Objects.js ): This will then bring up the File selection dialog box, where you can choose which other object file to open: Once you have selected the file, the Object Manager dialog will display the list of objects to be merged (see next section). If you click on the ... button in left hand side of the dialog box, marked Source , you will be able to select a different Rapise test object file ( Objects.js ) that you want to copy the objects from . If you want to make the current test the Destination rather than the Source (i.e. you want to add objects to the current test rather than exporting from the current test), simply click the blue Arrow icon and the current test will be moved to the destination: Viewing the Objects to Merge \u00b6 Once you have selected both the source and destination object files, the system will display the dialog that lets you see all the objects defined the source and destination tests. You can now choose which objects to add/delete to/from the destination test: For each object in the object manager you will see an > expand icon in the left-hand side. When you click on this icon it will expand the object to display its properties. If the same object is in both the source and destination, you will see the properties of both versions on the left and right hand sides respectively. If it only exists in the source or destination, then it will only show the properties on the appropriate side: Each object in the source object list will be displayed with one of two icons: equals (=) - this means that the same object exists in both the source and destination test object files. not-equals (\u2260) - this means that the object only exists in the source file and not in the destination or vice-versa You can see which file(s) an objects is defined in (source, destination or both) by looking for the ... icon. If you see this on the left hand side only, this object only exists in the source file, if you see it in the right-hand side, it only exists in the destination. If you see it on both sides then it exists in both the source and destination: Merging the Objects \u00b6 To add an object from the source > destination test (for example the 'Amsterdam' object in this example) select the row in question: Then click on the 'Copy Object to the Right (F5)' icon in the toolbar. This will copy the object from the source to the destination: You can tell that the object has been copied because the not-equals (\u2260) sign changes to the equals option (=) . Conversely, to remove an object (e.g. Hound of the Baskervilles ) from the destination, simply select the row: Then click on the ' Remove from Destination ( Ctrl + D )' : The object will now have been removed from the destination object tree. Warning: All of the changes you make to the objects file are committed immediately, so only delete objects in the destination test that you no longer want to be part of the test.","title":"Object Manager"},{"location":"Guide/object_manager/#object-manager","text":"","title":"Object Manager"},{"location":"Guide/object_manager/#purpose","text":"The Object Manager allows you to merge the object trees of two different Rapise tests. This can be useful when you have a new test that needs some of the objects from a test that you have already written.","title":"Purpose"},{"location":"Guide/object_manager/#how-to-open","text":"Use menu Tools > Object Manager .","title":"How to Open"},{"location":"Guide/object_manager/#choosing-files-to-merge","text":"In the example above we have opened up a test case that has some objects. Now we need to open up another test that also has some objects. To do this, click on the ... button to the right of the Destination text box to open up a Rapise test object file ( Objects.js ): This will then bring up the File selection dialog box, where you can choose which other object file to open: Once you have selected the file, the Object Manager dialog will display the list of objects to be merged (see next section). If you click on the ... button in left hand side of the dialog box, marked Source , you will be able to select a different Rapise test object file ( Objects.js ) that you want to copy the objects from . If you want to make the current test the Destination rather than the Source (i.e. you want to add objects to the current test rather than exporting from the current test), simply click the blue Arrow icon and the current test will be moved to the destination:","title":"Choosing Files to Merge"},{"location":"Guide/object_manager/#viewing-the-objects-to-merge","text":"Once you have selected both the source and destination object files, the system will display the dialog that lets you see all the objects defined the source and destination tests. You can now choose which objects to add/delete to/from the destination test: For each object in the object manager you will see an > expand icon in the left-hand side. When you click on this icon it will expand the object to display its properties. If the same object is in both the source and destination, you will see the properties of both versions on the left and right hand sides respectively. If it only exists in the source or destination, then it will only show the properties on the appropriate side: Each object in the source object list will be displayed with one of two icons: equals (=) - this means that the same object exists in both the source and destination test object files. not-equals (\u2260) - this means that the object only exists in the source file and not in the destination or vice-versa You can see which file(s) an objects is defined in (source, destination or both) by looking for the ... icon. If you see this on the left hand side only, this object only exists in the source file, if you see it in the right-hand side, it only exists in the destination. If you see it on both sides then it exists in both the source and destination:","title":"Viewing the Objects to Merge"},{"location":"Guide/object_manager/#merging-the-objects","text":"To add an object from the source > destination test (for example the 'Amsterdam' object in this example) select the row in question: Then click on the 'Copy Object to the Right (F5)' icon in the toolbar. This will copy the object from the source to the destination: You can tell that the object has been copied because the not-equals (\u2260) sign changes to the equals option (=) . Conversely, to remove an object (e.g. Hound of the Baskervilles ) from the destination, simply select the row: Then click on the ' Remove from Destination ( Ctrl + D )' : The object will now have been removed from the destination object tree. Warning: All of the changes you make to the objects file are committed immediately, so only delete objects in the destination test that you no longer want to be part of the test.","title":"Merging the Objects"},{"location":"Guide/object_not_found/","text":"Object Is Not Found - How to Fix \u00b6 We recommend to follow this algorithm. Some nodes are clickable. Click them to get more information. See Also \u00b6 How-Tos","title":"Object Not Found - How to Fix"},{"location":"Guide/object_not_found/#object-is-not-found-how-to-fix","text":"We recommend to follow this algorithm. Some nodes are clickable. Click them to get more information.","title":"Object Is Not Found - How to Fix"},{"location":"Guide/object_not_found/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/object_spy/","text":"Object Spy \u00b6 Purpose \u00b6 The Object Spy allows you to inspect an object's properties and state. Many controls on User Interfaces are compound objects or there may be many instances of a similar object. To be sure to select precisely the correct object, or to select the correct object from a collection of similar objects, the object's properties can be used to further identify the correct instance. Usage \u00b6 Select Spy \u00b6 To spy on an object choose the type of Object Spy that you want to use. This can be done by using the menu Tools > Spy > ... or by clicking the down-arrow next to the Spy icon in the toolbar : There are 6 types of Spy available: Accessible - This is used to inspect applications that expose their properties using the Microsoft Active Accessibility (MSAA) technology. This is typically used by applications written in MFC, ATL, Qt, C++ and Visual Basic. Java - This is used to inspect applications written using the Java AWT and Swing UI frameworks. Managed - This is used to inspect applications written in .NET 1.1, .NET 2.0, .NET 4.0 using Microsoft Windows Forms. Mobile - This is used to inspect mobile applications running on iOS or Android devices as well as the iOS or Android simulator. UIAutomation - This is used to inspect applications that expose their properties using the Microsoft's newer UIAutomation technology. This is typically used by applications written in WPF, Silverlight and Java SWT. Web - This is used to inspect Web application running in browsers: Internet Explorer, Chrome, Firefox or any browser accessible via Selenium. For more details on each Spy type, refer to specific topic above. Object Tracking \u00b6 Open the Spy Dialog . This can be done directly using the Spy button in the main Rapise toolbar , or by pressing the Spy button in the Recording Activity dialog during recording or learning. Click the Start Tracking button (or press Ctrl + G (or Ctrl + T in Web Spy). As your mouse moves over different objects, you will see the contents of the Object Spy dialog change as it collects information about the object. Mouse over the object you wish to spy on and press Ctrl + G . The reduced-size tracking dialog will be expanded into the the larger Object Spy Dialog , presenting all the available information for the object. See Also \u00b6 See the Object Spy Dialog for more details.","title":"Object Spy"},{"location":"Guide/object_spy/#object-spy","text":"","title":"Object Spy"},{"location":"Guide/object_spy/#purpose","text":"The Object Spy allows you to inspect an object's properties and state. Many controls on User Interfaces are compound objects or there may be many instances of a similar object. To be sure to select precisely the correct object, or to select the correct object from a collection of similar objects, the object's properties can be used to further identify the correct instance.","title":"Purpose"},{"location":"Guide/object_spy/#usage","text":"","title":"Usage"},{"location":"Guide/object_spy/#select-spy","text":"To spy on an object choose the type of Object Spy that you want to use. This can be done by using the menu Tools > Spy > ... or by clicking the down-arrow next to the Spy icon in the toolbar : There are 6 types of Spy available: Accessible - This is used to inspect applications that expose their properties using the Microsoft Active Accessibility (MSAA) technology. This is typically used by applications written in MFC, ATL, Qt, C++ and Visual Basic. Java - This is used to inspect applications written using the Java AWT and Swing UI frameworks. Managed - This is used to inspect applications written in .NET 1.1, .NET 2.0, .NET 4.0 using Microsoft Windows Forms. Mobile - This is used to inspect mobile applications running on iOS or Android devices as well as the iOS or Android simulator. UIAutomation - This is used to inspect applications that expose their properties using the Microsoft's newer UIAutomation technology. This is typically used by applications written in WPF, Silverlight and Java SWT. Web - This is used to inspect Web application running in browsers: Internet Explorer, Chrome, Firefox or any browser accessible via Selenium. For more details on each Spy type, refer to specific topic above.","title":"Select Spy"},{"location":"Guide/object_spy/#object-tracking","text":"Open the Spy Dialog . This can be done directly using the Spy button in the main Rapise toolbar , or by pressing the Spy button in the Recording Activity dialog during recording or learning. Click the Start Tracking button (or press Ctrl + G (or Ctrl + T in Web Spy). As your mouse moves over different objects, you will see the contents of the Object Spy dialog change as it collects information about the object. Mouse over the object you wish to spy on and press Ctrl + G . The reduced-size tracking dialog will be expanded into the the larger Object Spy Dialog , presenting all the available information for the object.","title":"Object Tracking"},{"location":"Guide/object_spy/#see-also","text":"See the Object Spy Dialog for more details.","title":"See Also"},{"location":"Guide/object_spy_accessible/","text":"Accessible (MSAA) Spy \u00b6 Purpose \u00b6 The Accessible Spy is used to inspect applications that contain Microsoft Active Accessible (MSAA) objects. Features \u00b6 The Accessible Spy has the following features: The Tree pane lets you view the hierarchy of MSAA objects available in the application The Properties pane lets you view the exposed properties of the highlighted MSAA object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn . Commands \u00b6 In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Default Action - this will perform the default action on the selected object in the Spy Mouse Click - this will perform a simple mouse click on the selected object in the Spy Save to File - this will save the properties of the currently selected object to a text file. See Also \u00b6 Object Spy Microsoft Active Accessibility HWND","title":"Accessible (MSAA) Spy"},{"location":"Guide/object_spy_accessible/#accessible-msaa-spy","text":"","title":"Accessible (MSAA) Spy"},{"location":"Guide/object_spy_accessible/#purpose","text":"The Accessible Spy is used to inspect applications that contain Microsoft Active Accessible (MSAA) objects.","title":"Purpose"},{"location":"Guide/object_spy_accessible/#features","text":"The Accessible Spy has the following features: The Tree pane lets you view the hierarchy of MSAA objects available in the application The Properties pane lets you view the exposed properties of the highlighted MSAA object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn .","title":"Features"},{"location":"Guide/object_spy_accessible/#commands","text":"In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Default Action - this will perform the default action on the selected object in the Spy Mouse Click - this will perform a simple mouse click on the selected object in the Spy Save to File - this will save the properties of the currently selected object to a text file.","title":"Commands"},{"location":"Guide/object_spy_accessible/#see-also","text":"Object Spy Microsoft Active Accessibility HWND","title":"See Also"},{"location":"Guide/object_spy_java/","text":"Java Spy \u00b6 Purpose \u00b6 The Java Spy is used to inspect applications that contain Java (Swing / AWT) objects. Features \u00b6 The Java Spy has the following features: The Tree pane lets you view the hierarchy of Java objects available in the application The Properties pane lets you view the exposed properties of the highlighted Java object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn . Commands \u00b6 In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save Java object class information to a text file. See Also \u00b6 Object Spy","title":"Java Spy"},{"location":"Guide/object_spy_java/#java-spy","text":"","title":"Java Spy"},{"location":"Guide/object_spy_java/#purpose","text":"The Java Spy is used to inspect applications that contain Java (Swing / AWT) objects.","title":"Purpose"},{"location":"Guide/object_spy_java/#features","text":"The Java Spy has the following features: The Tree pane lets you view the hierarchy of Java objects available in the application The Properties pane lets you view the exposed properties of the highlighted Java object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn .","title":"Features"},{"location":"Guide/object_spy_java/#commands","text":"In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save Java object class information to a text file.","title":"Commands"},{"location":"Guide/object_spy_java/#see-also","text":"Object Spy","title":"See Also"},{"location":"Guide/object_spy_managed/","text":"Managed (.NET) Spy \u00b6 Purpose \u00b6 The Managed Spy is used to inspect Microsoft .NET applications that contain .NET framework objects (e.g. using Windows Forms). Features \u00b6 The Managed Spy has the following features: The Tree pane lets you view the hierarchy of .NET objects available in the application The Properties pane lets you view the exposed properties of the highlighted .NET object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn . Commands \u00b6 In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save object class type information to a text file. See Also \u00b6 Object Spy","title":"Managed (.NET) Spy"},{"location":"Guide/object_spy_managed/#managed-net-spy","text":"","title":"Managed (.NET) Spy"},{"location":"Guide/object_spy_managed/#purpose","text":"The Managed Spy is used to inspect Microsoft .NET applications that contain .NET framework objects (e.g. using Windows Forms).","title":"Purpose"},{"location":"Guide/object_spy_managed/#features","text":"The Managed Spy has the following features: The Tree pane lets you view the hierarchy of .NET objects available in the application The Properties pane lets you view the exposed properties of the highlighted .NET object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn .","title":"Features"},{"location":"Guide/object_spy_managed/#commands","text":"In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save object class type information to a text file.","title":"Commands"},{"location":"Guide/object_spy_managed/#see-also","text":"Object Spy","title":"See Also"},{"location":"Guide/object_spy_mobile/","text":"Mobile Spy \u00b6 Purpose \u00b6 The Mobile Spy is used to inspect applications running on connected Mobile Devices (e.g. Apple iOS and Android devices). The Mobile Spy dialog shows a snapshot of the screen displayed on the connected Mobile device as well as the properties of the currently selected object. You can selected the object either by clicking on the screen snapshot or the control hierarchy displayed to the left. The properties displayed will depend on the type of mobile device being tested (iOS vs. Android). Tree Pane \u00b6 The spied upon object and its children are displayed here. When you click on an object it will also be highlighted in the snapshot pane to the right. Properties Pane \u00b6 Object fields and field values are displayed here. Snapshot Pane \u00b6 This displays a snapshot of what is displayed on the mobile device being tested. The objects in the snapshot are clickable, which allows you to visually select objects from the hierarchy. Toolbar First Row \u00b6 Get Snapshot ( Ctrl + G ) - This will connect to the mobile device and get the latest snapshot from the mobile device and display in the right-hand window. Spy > Disconnect - This option disconnects the Spy from the mobile device and ends the connection. Learn Object - This option is only displayed in Recording mode and lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test. Spy > Page Source - This lets you view the source of the mobile device in a text editor such as Notepad. It will show the objects in the treeview represented as an XML document. Spy > Go to Url - This will instruct the mobile device to navigate its built in web browser to a specific URL. Test Locator - This will display the Mobile Test Locator dialog box that lets you try different locators to resolve specific objects in the object hierarchy. It will include options such as using XPath and IDs. Profile - This lets you change the profile of the mobile device you are testing while the Spy dialog is open. Edit Profiles - This will open up the Mobile Settings dialog box. You cannot be connected to do this. Context - This will display either 'Maintenance Mode' or 'Recording Mode'. Toolbar Second Row \u00b6 The Mobile Spy also includes toolbar controls that let you send events to mobile device from Rapise, as if you were actually performing them on the device: This dialog lets you perform the following events on the device: Tap - this will simulate tapping the currently selected object on the device. Swipe - you specify the start and end points of the swipe operation. This is useful for simulating a real swipe on the device in a specific direction at a specific location (e.g. on a progress selector). Shake - for devices that support it (e.g. iOS) this simulates shaking the device physically. Precise Tap - you specific the specific location on the screen within the bounds of the current object that you will be simulating a tap. Scroll To - simulates scrolling to the selected object in the device object tree (which may not be visible). Text / Send Keys - to use this, enter in text in the text box and click 'Send Keys', this sends text to the currently selected object as if you were using the virtual keyboard on the device. Clear - select a text box and use Clear to erase text displayed in it. Accept Alert - if you have a popup alert on the device, this simulates accepting it. Dismiss Alert - if you have a popup alert on the device, this simulates dismissing it. Change Orientation - for devices that support it, this simulates changing the orientation of the device from landscape to portrait (or vice-versa). Execute Script - this is not currently supported and is for future functionality . Maintenance Mode \u00b6 Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy from the toolbar (it will be launched in Maintenance Mode) it will show the object tree in the right side panel. To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon. If an object is found it will be highlighted on the screenshot and selected in the tree of application objects (left pane). To fix a locator for object that is not found do the following: Select the object in the object tree (right pane) Select the element on the screenshot or in the application tree (left pane) Press relearn button on the toolbar. See Also \u00b6 Object Spy","title":"Mobile Spy"},{"location":"Guide/object_spy_mobile/#mobile-spy","text":"","title":"Mobile Spy"},{"location":"Guide/object_spy_mobile/#purpose","text":"The Mobile Spy is used to inspect applications running on connected Mobile Devices (e.g. Apple iOS and Android devices). The Mobile Spy dialog shows a snapshot of the screen displayed on the connected Mobile device as well as the properties of the currently selected object. You can selected the object either by clicking on the screen snapshot or the control hierarchy displayed to the left. The properties displayed will depend on the type of mobile device being tested (iOS vs. Android).","title":"Purpose"},{"location":"Guide/object_spy_mobile/#tree-pane","text":"The spied upon object and its children are displayed here. When you click on an object it will also be highlighted in the snapshot pane to the right.","title":"Tree Pane"},{"location":"Guide/object_spy_mobile/#properties-pane","text":"Object fields and field values are displayed here.","title":"Properties Pane"},{"location":"Guide/object_spy_mobile/#snapshot-pane","text":"This displays a snapshot of what is displayed on the mobile device being tested. The objects in the snapshot are clickable, which allows you to visually select objects from the hierarchy.","title":"Snapshot Pane"},{"location":"Guide/object_spy_mobile/#toolbar-first-row","text":"Get Snapshot ( Ctrl + G ) - This will connect to the mobile device and get the latest snapshot from the mobile device and display in the right-hand window. Spy > Disconnect - This option disconnects the Spy from the mobile device and ends the connection. Learn Object - This option is only displayed in Recording mode and lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test. Spy > Page Source - This lets you view the source of the mobile device in a text editor such as Notepad. It will show the objects in the treeview represented as an XML document. Spy > Go to Url - This will instruct the mobile device to navigate its built in web browser to a specific URL. Test Locator - This will display the Mobile Test Locator dialog box that lets you try different locators to resolve specific objects in the object hierarchy. It will include options such as using XPath and IDs. Profile - This lets you change the profile of the mobile device you are testing while the Spy dialog is open. Edit Profiles - This will open up the Mobile Settings dialog box. You cannot be connected to do this. Context - This will display either 'Maintenance Mode' or 'Recording Mode'.","title":"Toolbar First Row"},{"location":"Guide/object_spy_mobile/#toolbar-second-row","text":"The Mobile Spy also includes toolbar controls that let you send events to mobile device from Rapise, as if you were actually performing them on the device: This dialog lets you perform the following events on the device: Tap - this will simulate tapping the currently selected object on the device. Swipe - you specify the start and end points of the swipe operation. This is useful for simulating a real swipe on the device in a specific direction at a specific location (e.g. on a progress selector). Shake - for devices that support it (e.g. iOS) this simulates shaking the device physically. Precise Tap - you specific the specific location on the screen within the bounds of the current object that you will be simulating a tap. Scroll To - simulates scrolling to the selected object in the device object tree (which may not be visible). Text / Send Keys - to use this, enter in text in the text box and click 'Send Keys', this sends text to the currently selected object as if you were using the virtual keyboard on the device. Clear - select a text box and use Clear to erase text displayed in it. Accept Alert - if you have a popup alert on the device, this simulates accepting it. Dismiss Alert - if you have a popup alert on the device, this simulates dismissing it. Change Orientation - for devices that support it, this simulates changing the orientation of the device from landscape to portrait (or vice-versa). Execute Script - this is not currently supported and is for future functionality .","title":"Toolbar Second Row"},{"location":"Guide/object_spy_mobile/#maintenance-mode","text":"Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy from the toolbar (it will be launched in Maintenance Mode) it will show the object tree in the right side panel. To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon. If an object is found it will be highlighted on the screenshot and selected in the tree of application objects (left pane). To fix a locator for object that is not found do the following: Select the object in the object tree (right pane) Select the element on the screenshot or in the application tree (left pane) Press relearn button on the toolbar.","title":"Maintenance Mode"},{"location":"Guide/object_spy_mobile/#see-also","text":"Object Spy","title":"See Also"},{"location":"Guide/object_spy_uiautomation/","text":"UI Automation Spy \u00b6 Purpose \u00b6 The UIAutomation Spy is used to inspect applications that contain Microsoft UIAutomation objects (e.g. Windows Presentation Framework, Silverlight or Java's Standard Widget Toolkit running on Windows). How to Open \u00b6 In the main menu select Tools > Spy > UIAutomation . Then on the toolbar click UIAutomation Spy button. Features \u00b6 The UIAutomation Spy has the following features: The Tree pane lets you view the hierarchy of UIAutomation objects available in the application The Properties pane lets you view the exposed properties of the highlighted UIAutomation object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn . Commands \u00b6 In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save information about UI Automation object properties and patterns to a text file. See Also \u00b6 Object Spy Microsoft UIAutomation","title":"UI Automation Spy"},{"location":"Guide/object_spy_uiautomation/#ui-automation-spy","text":"","title":"UI Automation Spy"},{"location":"Guide/object_spy_uiautomation/#purpose","text":"The UIAutomation Spy is used to inspect applications that contain Microsoft UIAutomation objects (e.g. Windows Presentation Framework, Silverlight or Java's Standard Widget Toolkit running on Windows).","title":"Purpose"},{"location":"Guide/object_spy_uiautomation/#how-to-open","text":"In the main menu select Tools > Spy > UIAutomation . Then on the toolbar click UIAutomation Spy button.","title":"How to Open"},{"location":"Guide/object_spy_uiautomation/#features","text":"The UIAutomation Spy has the following features: The Tree pane lets you view the hierarchy of UIAutomation objects available in the application The Properties pane lets you view the exposed properties of the highlighted UIAutomation object The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn .","title":"Features"},{"location":"Guide/object_spy_uiautomation/#commands","text":"In addition to viewing the object hierarchy and object properties, you can perform the following tasks: Parent - This selects the parent object of the one displayed Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy. Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application. Save to File - this will save the properties of the currently selected object to a text file. Save Type Information - this will save information about UI Automation object properties and patterns to a text file.","title":"Commands"},{"location":"Guide/object_spy_uiautomation/#see-also","text":"Object Spy Microsoft UIAutomation","title":"See Also"},{"location":"Guide/object_tree/","text":"Object Tree View \u00b6 Purpose \u00b6 Display learned objects. How to Open \u00b6 The Objects dialog is part of the Default Layout . Filtering \u00b6 Object Tree has build in filtering and display mode switches. Filter - quick filter to narrow down range displayed in the object tree. Updates the tree while you type. If you want to cancel the filtering then simply remove everything from this input box. Display modes switch: id - show object IDs in the tree. n - show object names in the tree. id[n] - show each object in format object_id [ object_name ] in the tree. Context Menu (root node) \u00b6 Right click the Object Tree node to see: Refresh checks for new objects to display. Refresh also re-loads list of user-defined functions and populates 'Functions' and 'Variables' nodes. Collapse all collapses the entire object tree. Expand all expands the entire object tree. Context Menu (window) \u00b6 Right click the Window node to see: Flash opens the application/url where the object is located. A frame will blink around the window. Remove remove window and all contained objects. Context Menu (object) \u00b6 Right click on an object in the Object Tree dialog to see: Flash opens the application/url where the object is located. A frame will blink around the object to show you where it is on the page. Re-Learn will open up the Recorder , allowing you to re-learn the object. This is useful if the AUT has changed and the object definition will no longer correctly locate the object. Rename opens Rename dialog for the object. Clone makes a copy of the object definition and adds the cloned version into the tree. You can then make changes to the cloned copy. Add Parameter opens up a dialog box that lets you add a custom parameter to the learned object definition (stored in the Objects.js file). Delete simply removes the selected object from the tree.","title":"Object Tree View"},{"location":"Guide/object_tree/#object-tree-view","text":"","title":"Object Tree View"},{"location":"Guide/object_tree/#purpose","text":"Display learned objects.","title":"Purpose"},{"location":"Guide/object_tree/#how-to-open","text":"The Objects dialog is part of the Default Layout .","title":"How to Open"},{"location":"Guide/object_tree/#filtering","text":"Object Tree has build in filtering and display mode switches. Filter - quick filter to narrow down range displayed in the object tree. Updates the tree while you type. If you want to cancel the filtering then simply remove everything from this input box. Display modes switch: id - show object IDs in the tree. n - show object names in the tree. id[n] - show each object in format object_id [ object_name ] in the tree.","title":"Filtering"},{"location":"Guide/object_tree/#context-menu-root-node","text":"Right click the Object Tree node to see: Refresh checks for new objects to display. Refresh also re-loads list of user-defined functions and populates 'Functions' and 'Variables' nodes. Collapse all collapses the entire object tree. Expand all expands the entire object tree.","title":"Context Menu (root node)"},{"location":"Guide/object_tree/#context-menu-window","text":"Right click the Window node to see: Flash opens the application/url where the object is located. A frame will blink around the window. Remove remove window and all contained objects.","title":"Context Menu (window)"},{"location":"Guide/object_tree/#context-menu-object","text":"Right click on an object in the Object Tree dialog to see: Flash opens the application/url where the object is located. A frame will blink around the object to show you where it is on the page. Re-Learn will open up the Recorder , allowing you to re-learn the object. This is useful if the AUT has changed and the object definition will no longer correctly locate the object. Rename opens Rename dialog for the object. Clone makes a copy of the object definition and adds the cloned version into the tree. You can then make changes to the cloned copy. Add Parameter opens up a dialog box that lets you add a custom parameter to the learned object definition (stored in the Objects.js file). Delete simply removes the selected object from the tree.","title":"Context Menu (object)"},{"location":"Guide/object_types/","text":"Recording and Learning \u00b6 Purpose \u00b6 To understand what different objects might be found on a UI screen, and how to recognize them, record their characteristics and interact with them using Rapise. Value \u00b6 A UI screen entity (object) may consist of many different parts and components. Actions on these objects, and usage of these controls, must be captured in different ways, depending on the properties of the object. Rapise provides five fundamental methods for capturing objects and corresponding user actions: Recording - Rapise is able to track user interactions with AUT and automatically capture affected objects and corresponding user actions. See Recording for more information. Learning - there are cases when it is not necessary or is not possible to track user interactions with AUT. In this case user can manually point to an object that should be captured by Rapise. See Learning for more information. Analog Recording (Absolute/Relative) - this is for objects that are not standard in some important way, and so activity on them cannot be captured using recording or cannot be specified after learning. Absolute Analog Recording is used to track mouse usage (movement and clicks) and keyboard events. For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. (In contrast, in Relative Analog Recording , the events are recorded relative to the upper-left corner of the selected objects.) The events are recorded in a file of type arf (Analog Recording File). Simulated Object Recording - a Rapise user can use simulated objects when some objects are not natively supported by Rapise (e.g. their internal structure, properties and actions are unknown). In this case, what is recorded are mouse clicks and keyboard activity. Compare to Analog Recording when all mouse and keyboard actions are recorded, including mouse up/down, mouse move events. See Simulated Objects for more information. Manual Recording - In addition to providing automated testing functionality, Rapise enables you to create manual tests (ones that will be carried out by a human tester ) rapidly without having to laboriously enter in test steps and screenshots by hand. It does this by using the same recording mechanism used for automated testing to create a manual test case that contains a list of the tester's interactions and screenshots of what was performed. This is useful for exploratory testing and is a huge time saver. Usage \u00b6 Before an operation (press, enter text, select, click, etc.) can be performed on an object automatically, Rapise must be able to identify the object. That identification must be able to locate the object definitively, and it must be able to duplicate the action or operation precisely. This carries several implications. Firstly, if the AUT is in a different position on the screen when it is started, Rapise must still be able to find the objects in the AUT window. Secondly, if the positioning of objects on the AUT window is proportional or relative to the screen size of shape, Rapise must still be able to locate the object. A secondary set of considerations relates to the fact that the AUT UI layout maybe sensitive to the context of the state of the application. For example, consider the case of a word processor. Pressing the \"bold\" button doesn't predict what the result will be unless it is known whether the text highlighted is currently bold or not. A far more illustrative example is that of the Microsoft Paint utility. The Microsoft Paint utility is the subject of a Inflectra sample, Simulated Object . The most instructive way to identify the objects to Rapise is to practice with the tool and different types of objects. The best methodology to use is as follows: First, try to use Record/Learn to learn the object and record actions in a single step. If learning.recording fails to record actions in the grid, use the Object Spy to observe the object carefully and discover what libraries and classes are being used by the AUT. Use Verify (++ctrl+1+) from the Recording Activity dialog to get summary information about the object. Use a more appropriate set of libraries when selecting the AUT prior to recording. Use Analog Recording with absolute positioning to identify and locate the object. Use Analog Recording with relative positioning to identify and locate the object. Use Simulated Object Recording to track the actions required and at the positions required. Look for custom libraries that support the technology being used by the AUT. Build your own custom library to support the technology in use by the AUT. Finally if it will not be worth developing automated tests for this AUT, use the manual recording feature to speed up your manual test writing. See Also: \u00b6 KB 289 How Object Recognition Works in Rapise","title":"Recording and Learning"},{"location":"Guide/object_types/#recording-and-learning","text":"","title":"Recording and Learning"},{"location":"Guide/object_types/#purpose","text":"To understand what different objects might be found on a UI screen, and how to recognize them, record their characteristics and interact with them using Rapise.","title":"Purpose"},{"location":"Guide/object_types/#value","text":"A UI screen entity (object) may consist of many different parts and components. Actions on these objects, and usage of these controls, must be captured in different ways, depending on the properties of the object. Rapise provides five fundamental methods for capturing objects and corresponding user actions: Recording - Rapise is able to track user interactions with AUT and automatically capture affected objects and corresponding user actions. See Recording for more information. Learning - there are cases when it is not necessary or is not possible to track user interactions with AUT. In this case user can manually point to an object that should be captured by Rapise. See Learning for more information. Analog Recording (Absolute/Relative) - this is for objects that are not standard in some important way, and so activity on them cannot be captured using recording or cannot be specified after learning. Absolute Analog Recording is used to track mouse usage (movement and clicks) and keyboard events. For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. (In contrast, in Relative Analog Recording , the events are recorded relative to the upper-left corner of the selected objects.) The events are recorded in a file of type arf (Analog Recording File). Simulated Object Recording - a Rapise user can use simulated objects when some objects are not natively supported by Rapise (e.g. their internal structure, properties and actions are unknown). In this case, what is recorded are mouse clicks and keyboard activity. Compare to Analog Recording when all mouse and keyboard actions are recorded, including mouse up/down, mouse move events. See Simulated Objects for more information. Manual Recording - In addition to providing automated testing functionality, Rapise enables you to create manual tests (ones that will be carried out by a human tester ) rapidly without having to laboriously enter in test steps and screenshots by hand. It does this by using the same recording mechanism used for automated testing to create a manual test case that contains a list of the tester's interactions and screenshots of what was performed. This is useful for exploratory testing and is a huge time saver.","title":"Value"},{"location":"Guide/object_types/#usage","text":"Before an operation (press, enter text, select, click, etc.) can be performed on an object automatically, Rapise must be able to identify the object. That identification must be able to locate the object definitively, and it must be able to duplicate the action or operation precisely. This carries several implications. Firstly, if the AUT is in a different position on the screen when it is started, Rapise must still be able to find the objects in the AUT window. Secondly, if the positioning of objects on the AUT window is proportional or relative to the screen size of shape, Rapise must still be able to locate the object. A secondary set of considerations relates to the fact that the AUT UI layout maybe sensitive to the context of the state of the application. For example, consider the case of a word processor. Pressing the \"bold\" button doesn't predict what the result will be unless it is known whether the text highlighted is currently bold or not. A far more illustrative example is that of the Microsoft Paint utility. The Microsoft Paint utility is the subject of a Inflectra sample, Simulated Object . The most instructive way to identify the objects to Rapise is to practice with the tool and different types of objects. The best methodology to use is as follows: First, try to use Record/Learn to learn the object and record actions in a single step. If learning.recording fails to record actions in the grid, use the Object Spy to observe the object carefully and discover what libraries and classes are being used by the AUT. Use Verify (++ctrl+1+) from the Recording Activity dialog to get summary information about the object. Use a more appropriate set of libraries when selecting the AUT prior to recording. Use Analog Recording with absolute positioning to identify and locate the object. Use Analog Recording with relative positioning to identify and locate the object. Use Simulated Object Recording to track the actions required and at the positions required. Look for custom libraries that support the technology being used by the AUT. Build your own custom library to support the technology in use by the AUT. Finally if it will not be worth developing automated tests for this AUT, use the manual recording feature to speed up your manual test writing.","title":"Usage"},{"location":"Guide/object_types/#see-also","text":"KB 289 How Object Recognition Works in Rapise","title":"See Also:"},{"location":"Guide/open_a_test/","text":"Open a Test \u00b6 You can open a test from the main menu. The main menu has an Open option, and a list of Recent Test from which you may choose: You can also open a test that is stored in SpiraTest (our web-based test management system) instead of the local filesystem. This is done by clicking on the Open Test from Spira option instead. More details on using Rapise with SpiraTest can be found in the SpiraTest Integration section. See Also \u00b6 How-Tos","title":"Open a Test"},{"location":"Guide/open_a_test/#open-a-test","text":"You can open a test from the main menu. The main menu has an Open option, and a list of Recent Test from which you may choose: You can also open a test that is stored in SpiraTest (our web-based test management system) instead of the local filesystem. This is done by clicking on the Open Test from Spira option instead. More details on using Rapise with SpiraTest can be found in the SpiraTest Integration section.","title":"Open a Test"},{"location":"Guide/open_a_test/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/options_dialog/","text":"Rapise Settings Dialog \u00b6 Purpose \u00b6 Use the Rapise Settings dialog to change the global options. Your changes will apply to all tests. How to Open \u00b6 User Settings > Global menu item. Global Settings \u00b6 Misc \u00b6 SplashScreen : A splash screen is the image that appears while a program initializes. The Rapise splash screen looks like this: Set SplashScreen to False to prevent the splash screen from appearing. API \u00b6 API Callback Timeout : Defaults to 10000. Number of milliseconds to wait when doing Before-Request and After-Response REST Callbacks . The timeout applies to each callback call individually. Generate Full Name : If 'Record REST Objects' is true , then true : Generate long name for objects and variables, i.e. 'Libraryinformationsystem_Login' false : Generate short name, i.e. 'Login' Generate Short REST Path : If 'Record REST Objects' is false , then true : Generate short path, i.e. 'RESTDef.rest' false : Generate full path, i.e. '%WORKDIR%/SubTest/RESTDef.rest'. May be needed when you have .rest definition files with the same name in your framework. Record Failed REST Actions : true means: If recorded REST action is failed, generate .DoExecute(...,true) that ignores the response code so generated test is passing. Record REST Objects : Generate Object for Each REST request. true : An object added to the Object Repository for each request. Then it is initialized using var <request_object_id> = SeS(<request_object_id>) . false : Don't add anything to the object tree. Each request is initialized as var <request_object_id> = /**RESTRequest*/Session.GetRESTRequest('<definition>.rest', '<request_id>') . This approach makes it easier to generate re-usable functions doing REST calls without need to load objects. See Session.GetRESTRequest . Execution \u00b6 JSEngineType : In the test settings (one of Default , Node , WScript ). Where Default means WScript , but in the future it will eventually become Node . Settings \u00b6 Always use Test.sstest : Defaults to False . If set to True , the test file name is set to Test.sstest rather than <test folder name>.sstest . This may be useful in rare cases when your testing framework has deep nested structure, you have very long file names and need to fit into 260 chars of Windows MAX_PATH limit. AutoReloadModifiedFiles : If set to True , any files you modify outside of Rapise are automatically reloaded in Rapise. Confirm Object Removal : Ask when deleting object form the Object Tree . DefaultFolder specifies where new tests are kept before you explicitly save them. The location is relative to the Rapise executable. Default Scripting Language : JavaScript, RVL or Ask. LoadLastTestOnStartup : If set to True , Rapise will open the last test you worked on and saved. If set to False , Rapise will create a new test named MyTest<#> where <#> is an integer. A folder for MyTest<#> is created in the folder specified by the DefaultFolder option. NormalizeFileName : If set to True , files are referred to (in the *.sstest file) using a a path relative to the *.sstest file. Otherwise, their absolute path is used. RecentTests : The maximum number of recent files displayed in the Recent Tests list. To see the Recent Tests list, open the Application Menu: Remember Debugger Layout : If True , Rapise will remember the window layout for debug mode separately. For example, this may be useful if you want to work full screen while authoring the Test and half-screen to debug. This way the AUT and the Rapise debugger fit on the screen. ShowCommonFileAliases : Legacy, not needed since Rapise 6.0. Enable Execution Monitor : specifies whether the execution monitor dialog box will be displayed during playback . ShowDashboardOnStartUp : If True , the Spira Dashboard will open automatically when Rapise is opened. ShowStartPageOnStartUp : If True , the Start Page will open automatically when Rapise is opened. Spira Integration : Enables all dialogs and menus for SpiraTest Integration . Temp Folder : default folder for temporary tests. Test Auto Upgrade : if set to True each opened .sstest file is automatically upgraded to the latest format. Recorder \u00b6 FrameStyle : Specifies which frame to draw around objects when you Record , Learn , and Spy . The Basic frame is on the left and the Modern frame is on the right: * DefaultSpy specifies which of the various types of Object Spy will be displayed by default. * GenerateComments : True to automatically generate JavaScript or RVL comment for each recorded action. Text Editor \u00b6 Convert Tabs to Spaces : True to force tabs to spaces conversion for the text editor. Tab Size : Editor Tab Size Utilities \u00b6 Utility functions Set of Open buttons: Open Web Profiles Folder Open Selenium Profiles Folder Open Mobile Profiles Folder Open Samples Folder Open User Libraries Folder Open Application Log Folder Reset Layout - Pressing the Reset Layout button restores the default layout . Rapise will restart.","title":"Rapise Settings Dialog"},{"location":"Guide/options_dialog/#rapise-settings-dialog","text":"","title":"Rapise Settings Dialog"},{"location":"Guide/options_dialog/#purpose","text":"Use the Rapise Settings dialog to change the global options. Your changes will apply to all tests.","title":"Purpose"},{"location":"Guide/options_dialog/#how-to-open","text":"User Settings > Global menu item.","title":"How to Open"},{"location":"Guide/options_dialog/#global-settings","text":"","title":"Global Settings"},{"location":"Guide/options_dialog/#misc","text":"SplashScreen : A splash screen is the image that appears while a program initializes. The Rapise splash screen looks like this: Set SplashScreen to False to prevent the splash screen from appearing.","title":"Misc"},{"location":"Guide/options_dialog/#api","text":"API Callback Timeout : Defaults to 10000. Number of milliseconds to wait when doing Before-Request and After-Response REST Callbacks . The timeout applies to each callback call individually. Generate Full Name : If 'Record REST Objects' is true , then true : Generate long name for objects and variables, i.e. 'Libraryinformationsystem_Login' false : Generate short name, i.e. 'Login' Generate Short REST Path : If 'Record REST Objects' is false , then true : Generate short path, i.e. 'RESTDef.rest' false : Generate full path, i.e. '%WORKDIR%/SubTest/RESTDef.rest'. May be needed when you have .rest definition files with the same name in your framework. Record Failed REST Actions : true means: If recorded REST action is failed, generate .DoExecute(...,true) that ignores the response code so generated test is passing. Record REST Objects : Generate Object for Each REST request. true : An object added to the Object Repository for each request. Then it is initialized using var <request_object_id> = SeS(<request_object_id>) . false : Don't add anything to the object tree. Each request is initialized as var <request_object_id> = /**RESTRequest*/Session.GetRESTRequest('<definition>.rest', '<request_id>') . This approach makes it easier to generate re-usable functions doing REST calls without need to load objects. See Session.GetRESTRequest .","title":"API"},{"location":"Guide/options_dialog/#execution","text":"JSEngineType : In the test settings (one of Default , Node , WScript ). Where Default means WScript , but in the future it will eventually become Node .","title":"Execution"},{"location":"Guide/options_dialog/#settings","text":"Always use Test.sstest : Defaults to False . If set to True , the test file name is set to Test.sstest rather than <test folder name>.sstest . This may be useful in rare cases when your testing framework has deep nested structure, you have very long file names and need to fit into 260 chars of Windows MAX_PATH limit. AutoReloadModifiedFiles : If set to True , any files you modify outside of Rapise are automatically reloaded in Rapise. Confirm Object Removal : Ask when deleting object form the Object Tree . DefaultFolder specifies where new tests are kept before you explicitly save them. The location is relative to the Rapise executable. Default Scripting Language : JavaScript, RVL or Ask. LoadLastTestOnStartup : If set to True , Rapise will open the last test you worked on and saved. If set to False , Rapise will create a new test named MyTest<#> where <#> is an integer. A folder for MyTest<#> is created in the folder specified by the DefaultFolder option. NormalizeFileName : If set to True , files are referred to (in the *.sstest file) using a a path relative to the *.sstest file. Otherwise, their absolute path is used. RecentTests : The maximum number of recent files displayed in the Recent Tests list. To see the Recent Tests list, open the Application Menu: Remember Debugger Layout : If True , Rapise will remember the window layout for debug mode separately. For example, this may be useful if you want to work full screen while authoring the Test and half-screen to debug. This way the AUT and the Rapise debugger fit on the screen. ShowCommonFileAliases : Legacy, not needed since Rapise 6.0. Enable Execution Monitor : specifies whether the execution monitor dialog box will be displayed during playback . ShowDashboardOnStartUp : If True , the Spira Dashboard will open automatically when Rapise is opened. ShowStartPageOnStartUp : If True , the Start Page will open automatically when Rapise is opened. Spira Integration : Enables all dialogs and menus for SpiraTest Integration . Temp Folder : default folder for temporary tests. Test Auto Upgrade : if set to True each opened .sstest file is automatically upgraded to the latest format.","title":"Settings"},{"location":"Guide/options_dialog/#recorder","text":"FrameStyle : Specifies which frame to draw around objects when you Record , Learn , and Spy . The Basic frame is on the left and the Modern frame is on the right: * DefaultSpy specifies which of the various types of Object Spy will be displayed by default. * GenerateComments : True to automatically generate JavaScript or RVL comment for each recorded action.","title":"Recorder"},{"location":"Guide/options_dialog/#text-editor","text":"Convert Tabs to Spaces : True to force tabs to spaces conversion for the text editor. Tab Size : Editor Tab Size","title":"Text Editor"},{"location":"Guide/options_dialog/#utilities","text":"Utility functions Set of Open buttons: Open Web Profiles Folder Open Selenium Profiles Folder Open Mobile Profiles Folder Open Samples Folder Open User Libraries Folder Open Application Log Folder Reset Layout - Pressing the Reset Layout button restores the default layout . Rapise will restart.","title":"Utilities"},{"location":"Guide/oracleforms_testing/","text":"Oracle Forms Support \u00b6 Overview \u00b6 Rapise Oracle Forms Library enables recording, learning and playback of various Oracle Forms controls. Supported Oracle Forms Versions \u00b6 Rapise 7.1 has support for Oracle Forms version 10 and higher. Supported Java Versions \u00b6 Integration was tested with Java JRE Version 8 32 bit. Integration should work with other versions of Java (5 and higher). But it must be 32 bit (x86) version. Preparing Environment \u00b6 1. Java Support \u00b6 Don't forget to deploy Rapise Java bridge as described here . 2. _JAVA_OPTIONS \u00b6 You need to set environment variable _JAVA_OPTIONS . \"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\" It may be set it through system or user Environment variables. Also, if your application is launched through the .bat file, you may assign _JAVA_OPTIONS there: ... set _JAVA_OPTIONS=\"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\" ... rem <launch of the application.jar> Setting _JAVA_OPTIONS globally may affect other software or tools, so, in case of any problems you may remove this variable or rename it to something else. 3. Change the Launch URL \u00b6 See Launching Oracle Forms Application to learn more about the changes to the launch process that needs to be done to enable testing Launching Oracle Forms Application \u00b6 There are two major ways on how your application may be started: using Internet Explorer or using Java Web Start ( .jnlp file). In either case, you need to make sure that the URL to the application contains the following parameters: From Internet Explorer \u00b6 You need to append the following parameter to the URL: ...&record=names In case of Internet Explorer this means that URL contains this part: From Java Web Start .jnlp File \u00b6 `...&38;record=names Global Object \u00b6 Rapise Oracle Forms Library includes OracleForms global object. It mostly used to deal with main menu, notifications and status bar.","title":"Oracle Forms"},{"location":"Guide/oracleforms_testing/#oracle-forms-support","text":"","title":"Oracle Forms Support"},{"location":"Guide/oracleforms_testing/#overview","text":"Rapise Oracle Forms Library enables recording, learning and playback of various Oracle Forms controls.","title":"Overview"},{"location":"Guide/oracleforms_testing/#supported-oracle-forms-versions","text":"Rapise 7.1 has support for Oracle Forms version 10 and higher.","title":"Supported Oracle Forms Versions"},{"location":"Guide/oracleforms_testing/#supported-java-versions","text":"Integration was tested with Java JRE Version 8 32 bit. Integration should work with other versions of Java (5 and higher). But it must be 32 bit (x86) version.","title":"Supported Java Versions"},{"location":"Guide/oracleforms_testing/#preparing-environment","text":"","title":"Preparing Environment"},{"location":"Guide/oracleforms_testing/#1-java-support","text":"Don't forget to deploy Rapise Java bridge as described here .","title":"1. Java Support"},{"location":"Guide/oracleforms_testing/#2-_java_options","text":"You need to set environment variable _JAVA_OPTIONS . \"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\" It may be set it through system or user Environment variables. Also, if your application is launched through the .bat file, you may assign _JAVA_OPTIONS there: ... set _JAVA_OPTIONS=\"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\" ... rem <launch of the application.jar> Setting _JAVA_OPTIONS globally may affect other software or tools, so, in case of any problems you may remove this variable or rename it to something else.","title":"2. _JAVA_OPTIONS"},{"location":"Guide/oracleforms_testing/#3-change-the-launch-url","text":"See Launching Oracle Forms Application to learn more about the changes to the launch process that needs to be done to enable testing","title":"3. Change the Launch URL"},{"location":"Guide/oracleforms_testing/#launching-oracle-forms-application","text":"There are two major ways on how your application may be started: using Internet Explorer or using Java Web Start ( .jnlp file). In either case, you need to make sure that the URL to the application contains the following parameters:","title":"Launching Oracle Forms Application"},{"location":"Guide/oracleforms_testing/#from-internet-explorer","text":"You need to append the following parameter to the URL: ...&record=names In case of Internet Explorer this means that URL contains this part:","title":"From Internet Explorer"},{"location":"Guide/oracleforms_testing/#from-java-web-start-jnlp-file","text":"`...&38;record=names","title":"From Java Web Start .jnlp File"},{"location":"Guide/oracleforms_testing/#global-object","text":"Rapise Oracle Forms Library includes OracleForms global object. It mostly used to deal with main menu, notifications and status bar.","title":"Global Object"},{"location":"Guide/output_view/","text":"Output View \u00b6 Purpose \u00b6 The Output View displays Rapise output. The amount of output depends on the Verbosity Level . How to Open \u00b6 The Errors View is hidden in the Default Layout . You may then show it using View > Show > Output . Writing to the Output View \u00b6 Use the global Log() function to write to the Output View . Widgets \u00b6 The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output .","title":"Output View"},{"location":"Guide/output_view/#output-view","text":"","title":"Output View"},{"location":"Guide/output_view/#purpose","text":"The Output View displays Rapise output. The amount of output depends on the Verbosity Level .","title":"Purpose"},{"location":"Guide/output_view/#how-to-open","text":"The Errors View is hidden in the Default Layout . You may then show it using View > Show > Output .","title":"How to Open"},{"location":"Guide/output_view/#writing-to-the-output-view","text":"Use the global Log() function to write to the Output View .","title":"Writing to the Output View"},{"location":"Guide/output_view/#widgets","text":"The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output .","title":"Widgets"},{"location":"Guide/overview/","text":"Overview \u00b6 Why Use Rapise? \u00b6 Rapise was created to make software testing easy and manageable without being prohibitively expensive. Rapise was made easy for software test professionals, developers and professionals concerned with quality assurance to simply and quickly write a test to cover an application, a web page, or a single bug to prevent regression. Make Testing Fast and Repeatable \u00b6 Consider for a moment what it is you do to test your software today. Most likely it has some user interface (UI) , probably a graphic user interface (GUI) . So you will run the application, click around, perhaps in some way that gives you complete coverage of all the features (but probably not if it's a large application or web). Then you will login, if appropriate, and you will fetch some data and modify some data, test some more controls - edit boxes, buttons, drop-down lists, links, etc. If you have just fixed a bug then you will focus on the area of the application where the bug occurred. You will enter data that causes the bug, or go through the control sequence that causes the bug. Next time you come to fix a bug in this application, you will do the same thing again .. Once again, you will focus on the area where the bug was. Rapise presents you with two methods for capturing specific tests , and it will keep the test as a solo test or as part of a suite of tests that help you to qualify the application for release or a more formal QA process. Rapise is designed to allow the developer or the test professional to add new tests quickly and so to build up a library of tests. There are two methods for capturing tests: Record and playback . In this type of test creation, you turn on the recorder and perform the actions needed to execute the test. Each test is saved to its own directory. A test consists of a javascript test script ( .js ), a meta-data file ( *.sstest), and any number of additional supplementary scripts and data files. The test script is automatically generated after recording; simple modifications are required to make the test data driven . Checkpoints can be added during recording, or manually into the script.\\ Object -driven learning . Rapise considers each item on the page or within the application window to be an object. Examples are buttons, edit boxes, links, etc. To create a test using this technique, you have Rapise \" learn \" each control, and it will keep a miniature database of all the controls you \"teach\" it. To create a test, you write a script to instruct Rapise to perform a particular action on each object in the prescribed order. As any point along the way, the script you write can instruct Rapise to look inside an object and read its data and compare that value or content with what you expect it to be. There are many methodologies with their own recommended approaches for designing testing strategies to ensure that application coverage is complete and meets the business requirements specification of the work being accomplished. Inflectra in general, recommends that you create a new test for each software requirement (to track progress) and for each issue in your issue tracking system (to test for regressions). Choice of Scripting or Scriptless Rapise Visual Language (RVL) \u00b6 Rapise gives you the choice of recording/writing your tests in a full scripting language - JavaScript , or the Rapise Visual Language (RVL) which provides a completely scriptless approach to writing tests (based on a simple table-based format). The RVL option is simpler for users that are not programmers but it has less flexibility than using JavaScript. You can have the best of both worlds, putting the more sophisticated steps into JavaScript scenarios and then including in the main RVL file. Integration with Test Management \u00b6 To help you manage the requirements and issue tracking processes and to ensure that you have adequate test coverage , Inflectra recommend that you use Rapise with a test management system such as SpiraTest . That way you can maintain all your requirements, test cases and defects in a single place. Once you have created the test, you can playback your test from within Rapise, run it from the command-line or execute it remotely using RapiseLauncher in conjunction with SpiraTest . A report detailing the outcome of each step of the test will be automatically generated. Recording , playback , the report , and the Rapise engine are all customizable.","title":"Overview"},{"location":"Guide/overview/#overview","text":"","title":"Overview"},{"location":"Guide/overview/#why-use-rapise","text":"Rapise was created to make software testing easy and manageable without being prohibitively expensive. Rapise was made easy for software test professionals, developers and professionals concerned with quality assurance to simply and quickly write a test to cover an application, a web page, or a single bug to prevent regression.","title":"Why Use Rapise?"},{"location":"Guide/overview/#make-testing-fast-and-repeatable","text":"Consider for a moment what it is you do to test your software today. Most likely it has some user interface (UI) , probably a graphic user interface (GUI) . So you will run the application, click around, perhaps in some way that gives you complete coverage of all the features (but probably not if it's a large application or web). Then you will login, if appropriate, and you will fetch some data and modify some data, test some more controls - edit boxes, buttons, drop-down lists, links, etc. If you have just fixed a bug then you will focus on the area of the application where the bug occurred. You will enter data that causes the bug, or go through the control sequence that causes the bug. Next time you come to fix a bug in this application, you will do the same thing again .. Once again, you will focus on the area where the bug was. Rapise presents you with two methods for capturing specific tests , and it will keep the test as a solo test or as part of a suite of tests that help you to qualify the application for release or a more formal QA process. Rapise is designed to allow the developer or the test professional to add new tests quickly and so to build up a library of tests. There are two methods for capturing tests: Record and playback . In this type of test creation, you turn on the recorder and perform the actions needed to execute the test. Each test is saved to its own directory. A test consists of a javascript test script ( .js ), a meta-data file ( *.sstest), and any number of additional supplementary scripts and data files. The test script is automatically generated after recording; simple modifications are required to make the test data driven . Checkpoints can be added during recording, or manually into the script.\\ Object -driven learning . Rapise considers each item on the page or within the application window to be an object. Examples are buttons, edit boxes, links, etc. To create a test using this technique, you have Rapise \" learn \" each control, and it will keep a miniature database of all the controls you \"teach\" it. To create a test, you write a script to instruct Rapise to perform a particular action on each object in the prescribed order. As any point along the way, the script you write can instruct Rapise to look inside an object and read its data and compare that value or content with what you expect it to be. There are many methodologies with their own recommended approaches for designing testing strategies to ensure that application coverage is complete and meets the business requirements specification of the work being accomplished. Inflectra in general, recommends that you create a new test for each software requirement (to track progress) and for each issue in your issue tracking system (to test for regressions).","title":"Make Testing Fast and Repeatable"},{"location":"Guide/overview/#choice-of-scripting-or-scriptless-rapise-visual-language-rvl","text":"Rapise gives you the choice of recording/writing your tests in a full scripting language - JavaScript , or the Rapise Visual Language (RVL) which provides a completely scriptless approach to writing tests (based on a simple table-based format). The RVL option is simpler for users that are not programmers but it has less flexibility than using JavaScript. You can have the best of both worlds, putting the more sophisticated steps into JavaScript scenarios and then including in the main RVL file.","title":"Choice of Scripting or Scriptless Rapise Visual Language (RVL)"},{"location":"Guide/overview/#integration-with-test-management","text":"To help you manage the requirements and issue tracking processes and to ensure that you have adequate test coverage , Inflectra recommend that you use Rapise with a test management system such as SpiraTest . That way you can maintain all your requirements, test cases and defects in a single place. Once you have created the test, you can playback your test from within Rapise, run it from the command-line or execute it remotely using RapiseLauncher in conjunction with SpiraTest . A report detailing the outcome of each step of the test will be automatically generated. Recording , playback , the report , and the Rapise engine are all customizable.","title":"Integration with Test Management"},{"location":"Guide/playback/","text":"Playback \u00b6 Purpose \u00b6 When you record a test, Rapise translates your actions into a script. When you playback the test, the script is executed. Usage \u00b6 You can either run your script from the Command Line , or you can play it back while Rapise is open (described below): You will first need to open your test . There is no need to have the AUT (Application Under Test) open. Rapise will open the AUT before it begins execution of the test. Now, press the play button at the top of the Rapise toolbar. During test execution, Rapise displays an execution monitor dialog box that lets the user see the progress of testing playback. The dialog is only shown during test execution and can be turned off in the Options dialog. The following is a screenshot of the test execution monitor. The user can pause or stop the test execution by clicking either the Pause or Stop button. When Rapise is done executing the test, results will be displayed in a table. The rows with green text are steps that passed; the rows with red text are steps that failed. The following is a screenshot of test results where every step passed: Test Execution Monitor \u00b6 Shows test execution status during playback. Progress bar shows test execution progress. This is just an estimate (number of actions executed compared to previous number of actions) Passed: , Failed: , Unresolved: - number of actions with corresponding execution status. Stop ( Ctrl + Shift + F12 ) - terminate execution. Pause - hold test execution until another press of the same button. Hide - hide execution monitor itself. The monitor can be turned off at all in the Options dialog. See Also \u00b6 For more information about the report, see Automated Reporting . For information about recording a test, see Recording . For instructions on using the Command Line , look HERE .","title":"Playback"},{"location":"Guide/playback/#playback","text":"","title":"Playback"},{"location":"Guide/playback/#purpose","text":"When you record a test, Rapise translates your actions into a script. When you playback the test, the script is executed.","title":"Purpose"},{"location":"Guide/playback/#usage","text":"You can either run your script from the Command Line , or you can play it back while Rapise is open (described below): You will first need to open your test . There is no need to have the AUT (Application Under Test) open. Rapise will open the AUT before it begins execution of the test. Now, press the play button at the top of the Rapise toolbar. During test execution, Rapise displays an execution monitor dialog box that lets the user see the progress of testing playback. The dialog is only shown during test execution and can be turned off in the Options dialog. The following is a screenshot of the test execution monitor. The user can pause or stop the test execution by clicking either the Pause or Stop button. When Rapise is done executing the test, results will be displayed in a table. The rows with green text are steps that passed; the rows with red text are steps that failed. The following is a screenshot of test results where every step passed:","title":"Usage"},{"location":"Guide/playback/#test-execution-monitor","text":"Shows test execution status during playback. Progress bar shows test execution progress. This is just an estimate (number of actions executed compared to previous number of actions) Passed: , Failed: , Unresolved: - number of actions with corresponding execution status. Stop ( Ctrl + Shift + F12 ) - terminate execution. Pause - hold test execution until another press of the same button. Hide - hide execution monitor itself. The monitor can be turned off at all in the Options dialog.","title":"Test Execution Monitor"},{"location":"Guide/playback/#see-also","text":"For more information about the report, see Automated Reporting . For information about recording a test, see Recording . For instructions on using the Command Line , look HERE .","title":"See Also"},{"location":"Guide/properties/","text":"Properties View \u00b6 Purpose \u00b6 To display the properties of the object, file, or folder you last clicked on. Objects are in the Object Tree View and files/folders are in the Test Files View . Some properties are longer than fit into the editor field. So you may use ... button: to show Value Editor : How to Open \u00b6 The Properties Dialog is part of the Default Layout .","title":"Properties Dialog"},{"location":"Guide/properties/#properties-view","text":"","title":"Properties View"},{"location":"Guide/properties/#purpose","text":"To display the properties of the object, file, or folder you last clicked on. Objects are in the Object Tree View and files/folders are in the Test Files View . Some properties are longer than fit into the editor field. So you may use ... button: to show Value Editor :","title":"Purpose"},{"location":"Guide/properties/#how-to-open","text":"The Properties Dialog is part of the Default Layout .","title":"How to Open"},{"location":"Guide/qt_framework_testing/","text":"Qt Framework \u00b6 Purpose \u00b6 Rapise includes support for testing applications written using the Qt Framework written using QWidget controls. Usage \u00b6 Rapise fully supports the test automation of Qt based applications. To ensure that Rapise can access the UI elements and properties in the Qt application, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled. This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). Loading Accessible Plug-in for your Qt application: Copy the \" accessible \" directory (and all its contents) from the Qt SDK (used to build the application under test) installation folder to the folder of the automated application (e.g. \u201c Program Files/Your-Application/plugins \u201d). If you do not have access to the Qt SDK which the Qt application is developed with, please contact the developer of the application and request the \"accessible\" directory from him. Create a file called \" qt.conf \" (or append if the file already exists) in the root directory of the automated application (e.g. \" Program Files/Your-Application \") with following content (copy and paste the following two lines): [Paths] Plugins = plugins Sample \u00b6 In the Samples section of the Rapise Start Page you should see our sample Qt Framework AUT: You can use this application with Rapise to try out the Qt Framework testing capabilities: You should record tests using the special Qt Framework library You should use the Accessible Spy for inspecting objects.","title":"Qt Framework"},{"location":"Guide/qt_framework_testing/#qt-framework","text":"","title":"Qt Framework"},{"location":"Guide/qt_framework_testing/#purpose","text":"Rapise includes support for testing applications written using the Qt Framework written using QWidget controls.","title":"Purpose"},{"location":"Guide/qt_framework_testing/#usage","text":"Rapise fully supports the test automation of Qt based applications. To ensure that Rapise can access the UI elements and properties in the Qt application, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled. This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). Loading Accessible Plug-in for your Qt application: Copy the \" accessible \" directory (and all its contents) from the Qt SDK (used to build the application under test) installation folder to the folder of the automated application (e.g. \u201c Program Files/Your-Application/plugins \u201d). If you do not have access to the Qt SDK which the Qt application is developed with, please contact the developer of the application and request the \"accessible\" directory from him. Create a file called \" qt.conf \" (or append if the file already exists) in the root directory of the automated application (e.g. \" Program Files/Your-Application \") with following content (copy and paste the following two lines): [Paths] Plugins = plugins","title":"Usage"},{"location":"Guide/qt_framework_testing/#sample","text":"In the Samples section of the Rapise Start Page you should see our sample Qt Framework AUT: You can use this application with Rapise to try out the Qt Framework testing capabilities: You should record tests using the special Qt Framework library You should use the Accessible Spy for inspecting objects.","title":"Sample"},{"location":"Guide/recording/","text":"Recording \u00b6 Purpose \u00b6 Recording is the name given to having Rapise track your interactions with an application. The actions you take in using the AUT are observed by Rapise and are transformed into a script ( RVL or JavaScript), which you can execute using the Play button. The script can be extended and modified to suit special purposes. Usage \u00b6 The Recording Activity (RA) Dialog is opened when you start recording using the Record toolbar button. When the Recording Activity dialog appears, Rapise has connected to your AUT and is ready to monitor and record your interactions. You'll find instructions here or look at one of the examples: Tutorial: Windows Testing Tutorial: Web Testing Tutorial: Mobile Testing . You'll notice that the RA dialog has a grid. As you interact with the AUT, your actions will be listed in the grid. If you record an incorrect action, you can right-click on the action and delete it. To ensure you successfully record your interaction with the AUT, navigate slowly through the AUT. Wait a second or two between each action to make sure Rapise has time to interpret and record your action. Once your interaction is updated in the RA dialog grid, you are free to continue with the next action. When you are done recording, press the Finish button on the RA dialog or type Ctrl + 3 . The RA dialog will disappear, and you will see an automatically generated script opened in Rapise. For Mobile Testing , you will need to use the Spy button which then allows you to pick a specific object from the Mobile Spy : See also \u00b6 If you have already recorded a script and want to record additional interactions in the same test, be sure to read Making Multiple Recordings . The RA dialog is described more thoroughly in Recording Activity > Dialog . To learn how to run the script, see Playback . To learn how to modify the script, see Scripting . For a detailed tutorial, see Tutorial: Record and Playback in the Getting Started section. For more information on the Spy capability, see Object > Spy .","title":"Recording"},{"location":"Guide/recording/#recording","text":"","title":"Recording"},{"location":"Guide/recording/#purpose","text":"Recording is the name given to having Rapise track your interactions with an application. The actions you take in using the AUT are observed by Rapise and are transformed into a script ( RVL or JavaScript), which you can execute using the Play button. The script can be extended and modified to suit special purposes.","title":"Purpose"},{"location":"Guide/recording/#usage","text":"The Recording Activity (RA) Dialog is opened when you start recording using the Record toolbar button. When the Recording Activity dialog appears, Rapise has connected to your AUT and is ready to monitor and record your interactions. You'll find instructions here or look at one of the examples: Tutorial: Windows Testing Tutorial: Web Testing Tutorial: Mobile Testing . You'll notice that the RA dialog has a grid. As you interact with the AUT, your actions will be listed in the grid. If you record an incorrect action, you can right-click on the action and delete it. To ensure you successfully record your interaction with the AUT, navigate slowly through the AUT. Wait a second or two between each action to make sure Rapise has time to interpret and record your action. Once your interaction is updated in the RA dialog grid, you are free to continue with the next action. When you are done recording, press the Finish button on the RA dialog or type Ctrl + 3 . The RA dialog will disappear, and you will see an automatically generated script opened in Rapise. For Mobile Testing , you will need to use the Spy button which then allows you to pick a specific object from the Mobile Spy :","title":"Usage"},{"location":"Guide/recording/#see-also","text":"If you have already recorded a script and want to record additional interactions in the same test, be sure to read Making Multiple Recordings . The RA dialog is described more thoroughly in Recording Activity > Dialog . To learn how to run the script, see Playback . To learn how to modify the script, see Scripting . For a detailed tutorial, see Tutorial: Record and Playback in the Getting Started section. For more information on the Spy capability, see Object > Spy .","title":"See also"},{"location":"Guide/recording_activity_dialog/","text":"Recording Activity Dialog \u00b6 Purpose \u00b6 The Recording Activity Dialog is used for Recording , Analog recording ( absolute and relative ), Object Learning , and creating Simulated Objects . How to Open \u00b6 This dialog is opened slightly differently depending on the type of test being recorded: Web Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed. Mobile Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed. Other Testing - After selecting the application to be recorded in the Select an Application to Record dialog, this dialog is displayed. Advanced Mode vs. Standard Mode \u00b6 When you first open the dialog, it will be displayed in Standard mode: This mode shows the most widely used options and is normally sufficient for most recording needs. However if you need to do analog recording or you want more control over the type of object being recorded, you can click on the Advanced link to switch to Advanced mode: Clicking on the Advanced link will switch it back to Standard mode. The Grid \u00b6 As you interact with the AUT ( A**pplication **U**nder **T**est), your actions are recorded in the grid of the **Recording Activity dialog . The following screenshot shows the Recording Activity dialog after two interactions with www.google.com : (1) first, Inflectra was entered into the query text box and (2) the Google Search button was then pressed. Context Menu \u00b6 If you right click in the grid, you'll see a context menu with three options: Delete Action removes the selected row. Edit Action opens the Action Editor Dialog . This is also opened by double-clicking a grid entry. Press Try Action and Rapise will execute the action. Standard Mode Features \u00b6 The following options are available in the dialog in both modes: Verify Ctrl + 1 - Press to open the Verify Object Properties dialog. Learn Ctrl + 2 - Use to learn an object. Place the mouse cursor over the object you wish to learn. It should become highlighted with a purple box. Press Ctrl + 2 while the object is highlighted. You will see a line added to the Recording Activity dialog, signifying that the object was learned. SPY Ctrl + 5 - The Spy Button opens the Object Spy dialog . The Object Spy dialog allows you to view the state of the objects in your program. Viewing object state is called Object Spying . The Object Spy dialog is described here . You can also use the SPY button to learn an object that is not visible or covered by another object. Pause - The Pause Button temporarily stops Recording. Any interacting you d* with the AUT is ignored. When you press the Pause Button, the title of the button changes to Resume . Press the Resume button to continue recording. Finish Ctrl + 3 - The Finish button ends the Recording session. The dialog is closed, and the information collected during Recording is used to create a script. The script is displayed. Cancel - The Cancel button stops Recording, closes the dialog, and discards any actions recorded or objects learned during the Recording session. Advanced Mode Features \u00b6 The following additional features are available in Advanced mode: Analog Ctrl + 4 - The Analog button begins Analog Recording . Analog Recording tracks mouse movements, keyboard inputs, and clicks. To end Analog Recording, press Ctrl + Break Simulated Drop-Down Menu - An object can be learned if it matches a rule specified in the Recording/Learning libraries available. The drop-down menu lists the possible rules for learning objects in the current application: If you cannot learn an object with one library rule, try another in the list. Create a Simulated Object only if the other, more flexible alternatives have been exhausted. To learn an object using a specific library Double click on a rule in the drop down list. The button text should change to the text that you selected. Press the button. Select an object on the screen and make sure it is highlighted with a rectangle. Press Ctrl + 2 to learn the object. Transparent Option \u00b6 While the Recording Activity (RA) dialog is open, it is always on top. The Transparent checkbox makes the RA Dialog transparent so that you can interact with objects behind it. The image below illustrates the difference: When you click the Transparent option, it will look like the following: The main advantage of this mode is that you can click in the area where the RA dialog is displayed and the clicks will be sent through to the AUT.","title":"Recording Activity Dialog"},{"location":"Guide/recording_activity_dialog/#recording-activity-dialog","text":"","title":"Recording Activity Dialog"},{"location":"Guide/recording_activity_dialog/#purpose","text":"The Recording Activity Dialog is used for Recording , Analog recording ( absolute and relative ), Object Learning , and creating Simulated Objects .","title":"Purpose"},{"location":"Guide/recording_activity_dialog/#how-to-open","text":"This dialog is opened slightly differently depending on the type of test being recorded: Web Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed. Mobile Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed. Other Testing - After selecting the application to be recorded in the Select an Application to Record dialog, this dialog is displayed.","title":"How to Open"},{"location":"Guide/recording_activity_dialog/#advanced-mode-vs-standard-mode","text":"When you first open the dialog, it will be displayed in Standard mode: This mode shows the most widely used options and is normally sufficient for most recording needs. However if you need to do analog recording or you want more control over the type of object being recorded, you can click on the Advanced link to switch to Advanced mode: Clicking on the Advanced link will switch it back to Standard mode.","title":"Advanced Mode vs. Standard Mode"},{"location":"Guide/recording_activity_dialog/#the-grid","text":"As you interact with the AUT ( A**pplication **U**nder **T**est), your actions are recorded in the grid of the **Recording Activity dialog . The following screenshot shows the Recording Activity dialog after two interactions with www.google.com : (1) first, Inflectra was entered into the query text box and (2) the Google Search button was then pressed.","title":"The Grid"},{"location":"Guide/recording_activity_dialog/#context-menu","text":"If you right click in the grid, you'll see a context menu with three options: Delete Action removes the selected row. Edit Action opens the Action Editor Dialog . This is also opened by double-clicking a grid entry. Press Try Action and Rapise will execute the action.","title":"Context Menu"},{"location":"Guide/recording_activity_dialog/#standard-mode-features","text":"The following options are available in the dialog in both modes: Verify Ctrl + 1 - Press to open the Verify Object Properties dialog. Learn Ctrl + 2 - Use to learn an object. Place the mouse cursor over the object you wish to learn. It should become highlighted with a purple box. Press Ctrl + 2 while the object is highlighted. You will see a line added to the Recording Activity dialog, signifying that the object was learned. SPY Ctrl + 5 - The Spy Button opens the Object Spy dialog . The Object Spy dialog allows you to view the state of the objects in your program. Viewing object state is called Object Spying . The Object Spy dialog is described here . You can also use the SPY button to learn an object that is not visible or covered by another object. Pause - The Pause Button temporarily stops Recording. Any interacting you d* with the AUT is ignored. When you press the Pause Button, the title of the button changes to Resume . Press the Resume button to continue recording. Finish Ctrl + 3 - The Finish button ends the Recording session. The dialog is closed, and the information collected during Recording is used to create a script. The script is displayed. Cancel - The Cancel button stops Recording, closes the dialog, and discards any actions recorded or objects learned during the Recording session.","title":"Standard Mode Features"},{"location":"Guide/recording_activity_dialog/#advanced-mode-features","text":"The following additional features are available in Advanced mode: Analog Ctrl + 4 - The Analog button begins Analog Recording . Analog Recording tracks mouse movements, keyboard inputs, and clicks. To end Analog Recording, press Ctrl + Break Simulated Drop-Down Menu - An object can be learned if it matches a rule specified in the Recording/Learning libraries available. The drop-down menu lists the possible rules for learning objects in the current application: If you cannot learn an object with one library rule, try another in the list. Create a Simulated Object only if the other, more flexible alternatives have been exhausted. To learn an object using a specific library Double click on a rule in the drop down list. The button text should change to the text that you selected. Press the button. Select an object on the screen and make sure it is highlighted with a rectangle. Press Ctrl + 2 to learn the object.","title":"Advanced Mode Features"},{"location":"Guide/recording_activity_dialog/#transparent-option","text":"While the Recording Activity (RA) dialog is open, it is always on top. The Transparent checkbox makes the RA Dialog transparent so that you can interact with objects behind it. The image below illustrates the difference: When you click the Transparent option, it will look like the following: The main advantage of this mode is that you can click in the area where the RA dialog is displayed and the clicks will be sent through to the AUT.","title":"Transparent Option"},{"location":"Guide/recording_library/","text":"Object Libraries \u00b6 Purpose \u00b6 Object libraries define what objects and interactions Rapise understands during Recording and Learning . Most Object Libraries are specific to an application or a set of applications. Usage \u00b6 Rapise comes with many different object libraries. See the list of libraries and supported control types below. Note: Selecting Auto as the application recording library will cause Rapise to select the one that it deems is most appropriate. Note: You can add your own Recording library - one that understands the objects in your application. Libraries \u00b6 Auto Generic UIAutomation Managed DevExpress Infragistics Syncfusion Telerik Advanced Accessibility ActiveX ActiveXC1 ActiveXSft FarPoint VSFlexGrid Java SWT Qt HTML HTML5 Selenium jQuery GWT GWTExt DomSmartGwt YUI Web Services Mobile DynamicsAX DynamicsNAV NavPOSControls DomDynamicsNAV DomDynamicsAX DomDynamicsCrm DomSalesforce See Also \u00b6 Recording To write an Object library specific to your application, see Custom Libraries . Cross Browser Testing If you interact with an object that is not defined in your chosen recording library, it will be treated as a Simulated Object .","title":"Object Libraries"},{"location":"Guide/recording_library/#object-libraries","text":"","title":"Object Libraries"},{"location":"Guide/recording_library/#purpose","text":"Object libraries define what objects and interactions Rapise understands during Recording and Learning . Most Object Libraries are specific to an application or a set of applications.","title":"Purpose"},{"location":"Guide/recording_library/#usage","text":"Rapise comes with many different object libraries. See the list of libraries and supported control types below. Note: Selecting Auto as the application recording library will cause Rapise to select the one that it deems is most appropriate. Note: You can add your own Recording library - one that understands the objects in your application.","title":"Usage"},{"location":"Guide/recording_library/#libraries","text":"Auto Generic UIAutomation Managed DevExpress Infragistics Syncfusion Telerik Advanced Accessibility ActiveX ActiveXC1 ActiveXSft FarPoint VSFlexGrid Java SWT Qt HTML HTML5 Selenium jQuery GWT GWTExt DomSmartGwt YUI Web Services Mobile DynamicsAX DynamicsNAV NavPOSControls DomDynamicsNAV DomDynamicsAX DomDynamicsCrm DomSalesforce","title":"Libraries"},{"location":"Guide/recording_library/#see-also","text":"Recording To write an Object library specific to your application, see Custom Libraries . Cross Browser Testing If you interact with an object that is not defined in your chosen recording library, it will be treated as a Simulated Object .","title":"See Also"},{"location":"Guide/regular_expressions/","text":"Regular Expressions \u00b6 Purpose \u00b6 A regular expression is a sequence of characters that describes how to construct a set of strings. It is composed of character literals and special characters . Each character literal represents one single character (such as \"a\", \"b\", \"C\", \"1\"). The special characters can represent a character, many characters, or a choice about how to select characters. Usage \u00b6 In Rapise, you must prepend regular expressions with the string regex: . So the regular expression describing all strings would be: regex:.* There are three uses for regular expressions in Rapise: (1) in Object Locators , (2) in action overriding code , (3) in Custom Libraries . Examples \u00b6 In Object Locator to match a dynamic Window Title: regex:.*Microsoft Dynamics NAV matches any Window Title ending with Microsoft Dynamics NAV , e.g. 1 Posted Sales Shipments - Microsoft Dynamics NAV or 1 Sales Invoices - Microsoft Dynamics NAV","title":"Regular Expressions"},{"location":"Guide/regular_expressions/#regular-expressions","text":"","title":"Regular Expressions"},{"location":"Guide/regular_expressions/#purpose","text":"A regular expression is a sequence of characters that describes how to construct a set of strings. It is composed of character literals and special characters . Each character literal represents one single character (such as \"a\", \"b\", \"C\", \"1\"). The special characters can represent a character, many characters, or a choice about how to select characters.","title":"Purpose"},{"location":"Guide/regular_expressions/#usage","text":"In Rapise, you must prepend regular expressions with the string regex: . So the regular expression describing all strings would be: regex:.* There are three uses for regular expressions in Rapise: (1) in Object Locators , (2) in action overriding code , (3) in Custom Libraries .","title":"Usage"},{"location":"Guide/regular_expressions/#examples","text":"In Object Locator to match a dynamic Window Title: regex:.*Microsoft Dynamics NAV matches any Window Title ending with Microsoft Dynamics NAV , e.g. 1 Posted Sales Shipments - Microsoft Dynamics NAV or 1 Sales Invoices - Microsoft Dynamics NAV","title":"Examples"},{"location":"Guide/relative_analog_learning/","text":"Relative Analog Recording \u00b6 Purpose \u00b6 Relative analog recording is used to track mouse usage (movement and clicks) and keyboard events. For relative analog recording, events are recorded in relation to the top-left corner of the application's window. The events are recorded in a file of type arf (Analog Recording File). Value \u00b6 Not all applications can be recorded by locating and learning objects being used. A very good example of this is free-hand drawing in an application such as Microsoft Paint ( Start Menu > Accessories > Paint ). There are several reasons why this application cannot be recorded using object tracking, learning and recording. The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars. Relative analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications. See Also \u00b6 Do Relative Analog Recording Absolute Analog Recording","title":"Relative Analog Recording"},{"location":"Guide/relative_analog_learning/#relative-analog-recording","text":"","title":"Relative Analog Recording"},{"location":"Guide/relative_analog_learning/#purpose","text":"Relative analog recording is used to track mouse usage (movement and clicks) and keyboard events. For relative analog recording, events are recorded in relation to the top-left corner of the application's window. The events are recorded in a file of type arf (Analog Recording File).","title":"Purpose"},{"location":"Guide/relative_analog_learning/#value","text":"Not all applications can be recorded by locating and learning objects being used. A very good example of this is free-hand drawing in an application such as Microsoft Paint ( Start Menu > Accessories > Paint ). There are several reasons why this application cannot be recorded using object tracking, learning and recording. The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars. Relative analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications.","title":"Value"},{"location":"Guide/relative_analog_learning/#see-also","text":"Do Relative Analog Recording Absolute Analog Recording","title":"See Also"},{"location":"Guide/replace_text_dialog/","text":"Replace Text Dialog \u00b6 Purpose \u00b6 Replace occurrences of the Search Term text with the Replacement Text in the currently visible Source Editor . How to Open \u00b6 Use main menu Edit > Find . Replace Tab \u00b6 Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches. Replace with text-box : All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.","title":"Replace Text Dialog"},{"location":"Guide/replace_text_dialog/#replace-text-dialog","text":"","title":"Replace Text Dialog"},{"location":"Guide/replace_text_dialog/#purpose","text":"Replace occurrences of the Search Term text with the Replacement Text in the currently visible Source Editor .","title":"Purpose"},{"location":"Guide/replace_text_dialog/#how-to-open","text":"Use main menu Edit > Find .","title":"How to Open"},{"location":"Guide/replace_text_dialog/#replace-tab","text":"Find what : Place the string you would like to search for in the Find what text box. Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder. Match case option: If unselected, case is ignored in the search. Match whole word option : If set to true, parts of words will not count as matches. Replace with text-box : All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.","title":"Replace Tab"},{"location":"Guide/report_filtering/","text":"Report Filtering \u00b6 Purpose \u00b6 Report Filtering lets you specify criteria to filter your view of the test execution report . Rows that do not match your criteria are hidden. Usage \u00b6 You can filter the report view while the file is open. Directly above the first row of the report, there is a row of filter cells. Each one has a matching criteria button , a text-box to specify a filter value, a drop-down menu with predefined filter values , and a clear button : Matching Criteria \u00b6 Matching criteria determine how to compare the filter string value you input with the values in the report. You can select from 16 matching criteria. Press the button marked A above the column you are filtering to see the possible criteria: Predefined Filter Values \u00b6 If we expand the filter cell's drop-down menu, we will see a list of predefined filtering options: (Custom) : This option has to do with the next section Custom Filter Options . (Blanks) : Matches all rows where the value for this column is blank. (NonBlanks) : Matches all rows there the value for this column is not blank. All other predefined values are copied from cells in the column you are filtering. Custom Filter Option \u00b6 To create a filter with multiple matching criteria and filter values, select (Custom) from the filter cell's drop-down menu. The Enter filter criteria for... Dialog will open. Instructions for how to use it are here . Undo Filtering \u00b6 To undo filtering for a particular column, press the clear button for that column: See Also \u00b6 Automated Reporting Enter filter criteria for... Dialog","title":"Report Filtering"},{"location":"Guide/report_filtering/#report-filtering","text":"","title":"Report Filtering"},{"location":"Guide/report_filtering/#purpose","text":"Report Filtering lets you specify criteria to filter your view of the test execution report . Rows that do not match your criteria are hidden.","title":"Purpose"},{"location":"Guide/report_filtering/#usage","text":"You can filter the report view while the file is open. Directly above the first row of the report, there is a row of filter cells. Each one has a matching criteria button , a text-box to specify a filter value, a drop-down menu with predefined filter values , and a clear button :","title":"Usage"},{"location":"Guide/report_filtering/#matching-criteria","text":"Matching criteria determine how to compare the filter string value you input with the values in the report. You can select from 16 matching criteria. Press the button marked A above the column you are filtering to see the possible criteria:","title":"Matching Criteria"},{"location":"Guide/report_filtering/#predefined-filter-values","text":"If we expand the filter cell's drop-down menu, we will see a list of predefined filtering options: (Custom) : This option has to do with the next section Custom Filter Options . (Blanks) : Matches all rows where the value for this column is blank. (NonBlanks) : Matches all rows there the value for this column is not blank. All other predefined values are copied from cells in the column you are filtering.","title":"Predefined Filter Values"},{"location":"Guide/report_filtering/#custom-filter-option","text":"To create a filter with multiple matching criteria and filter values, select (Custom) from the filter cell's drop-down menu. The Enter filter criteria for... Dialog will open. Instructions for how to use it are here .","title":"Custom Filter Option"},{"location":"Guide/report_filtering/#undo-filtering","text":"To undo filtering for a particular column, press the clear button for that column:","title":"Undo Filtering"},{"location":"Guide/report_filtering/#see-also","text":"Automated Reporting Enter filter criteria for... Dialog","title":"See Also"},{"location":"Guide/report_viewer/","text":"Report Viewer \u00b6 Purpose \u00b6 The Report Viewer displays test result ( .trp ) files. How to Open \u00b6 Use the Test Files View to open a report (trp) file. The report file will be opened in a Report Viewer in the Content View . The report toolbar and report menu will also open. Or, you can Playback the test script. The report file will display in a Report Viewer after the test completes. See Also \u00b6 For more info on Reports, see Automated Reporting .","title":"Report Viewer"},{"location":"Guide/report_viewer/#report-viewer","text":"","title":"Report Viewer"},{"location":"Guide/report_viewer/#purpose","text":"The Report Viewer displays test result ( .trp ) files.","title":"Purpose"},{"location":"Guide/report_viewer/#how-to-open","text":"Use the Test Files View to open a report (trp) file. The report file will be opened in a Report Viewer in the Content View . The report toolbar and report menu will also open. Or, you can Playback the test script. The report file will display in a Report Viewer after the test completes.","title":"How to Open"},{"location":"Guide/report_viewer/#see-also","text":"For more info on Reports, see Automated Reporting .","title":"See Also"},{"location":"Guide/rest_definition_editor/","text":"REST Definition Editor \u00b6 Purpose \u00b6 The REST Definition Editor allows you to edit REST web service definition files ( .rest ). How to Open \u00b6 Use the Add Web Service Dialog to create a new REST definition ( .rest ) file. The definition file will be opened in a REST Editor in the Content View . Or, you can double-click on an existing .rest file in the Test Files View explorer window. The definition file will be opened in a REST Editor in the Content View . The REST Toolbar is also open on the top of the editor. Request \u00b6 The request form has several sections that you need to populate: * Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.) * URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above) * Credentials - Any HTTP Basic Authentication Headers * Headers - Any other HTTP headers (both standard and custom) * Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script. * Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON. Response \u00b6 The HTTP Response Headers are displayed: The HTTP Response in XML format is formatted and displayed: The HTTP Response in JSON format is formatted and displayed: This displays the output from the last web service request. It has several tabs: * Response Header - Displays a list of the HTTP response headers (name and value). If the request received a 200 OK code back, it's displayed in green, if it receives an error code back, it's displayed in red. * Response Body * * Raw - Displays the raw text of the HTTP response body received from the server. * * XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body. * * JSON - If the received body content is identified as JSON, this tab displays nicely formatted, indented JSON that is easier to read than the raw response body. Operation Explorer \u00b6 This section lets you add, open, delete and clone REST requests in the definition file. Add request - Adds a new REST operation to the current .rest definition file. Clone request - Makes a copy of the currently selected REST operation and allows you to give the copy a new name. Delete request - Deletes the currently selected REST operation from the current REST definition file. Script Steps \u00b6 The REST Script Steps tab in the bottom view lets you see the list of recorded REST operations and use them to create your test script in the main test file. Create Script - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script. Remote Step - This removes the recorded step from the script box Clean - This removes all of the recorded steps from the script box. Each of the steps displayed in the script box will contain the name of the REST operation along with its HTTP method (GET, POST, PUT, DELETE, etc.). Steps displayed in bold* with an asterisk also have a verification point recorded . That means when the script is generated, it will include a Tester.Assert function to verify the results. See Also \u00b6 For more info on REST Web Services, see REST Web Services . For a tutorial on creating a REST web service test, see the Web Services REST Tutorial .","title":"REST Definition Editor"},{"location":"Guide/rest_definition_editor/#rest-definition-editor","text":"","title":"REST Definition Editor"},{"location":"Guide/rest_definition_editor/#purpose","text":"The REST Definition Editor allows you to edit REST web service definition files ( .rest ).","title":"Purpose"},{"location":"Guide/rest_definition_editor/#how-to-open","text":"Use the Add Web Service Dialog to create a new REST definition ( .rest ) file. The definition file will be opened in a REST Editor in the Content View . Or, you can double-click on an existing .rest file in the Test Files View explorer window. The definition file will be opened in a REST Editor in the Content View . The REST Toolbar is also open on the top of the editor.","title":"How to Open"},{"location":"Guide/rest_definition_editor/#request","text":"The request form has several sections that you need to populate: * Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.) * URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above) * Credentials - Any HTTP Basic Authentication Headers * Headers - Any other HTTP headers (both standard and custom) * Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script. * Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON.","title":"Request"},{"location":"Guide/rest_definition_editor/#response","text":"The HTTP Response Headers are displayed: The HTTP Response in XML format is formatted and displayed: The HTTP Response in JSON format is formatted and displayed: This displays the output from the last web service request. It has several tabs: * Response Header - Displays a list of the HTTP response headers (name and value). If the request received a 200 OK code back, it's displayed in green, if it receives an error code back, it's displayed in red. * Response Body * * Raw - Displays the raw text of the HTTP response body received from the server. * * XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body. * * JSON - If the received body content is identified as JSON, this tab displays nicely formatted, indented JSON that is easier to read than the raw response body.","title":"Response"},{"location":"Guide/rest_definition_editor/#operation-explorer","text":"This section lets you add, open, delete and clone REST requests in the definition file. Add request - Adds a new REST operation to the current .rest definition file. Clone request - Makes a copy of the currently selected REST operation and allows you to give the copy a new name. Delete request - Deletes the currently selected REST operation from the current REST definition file.","title":"Operation Explorer"},{"location":"Guide/rest_definition_editor/#script-steps","text":"The REST Script Steps tab in the bottom view lets you see the list of recorded REST operations and use them to create your test script in the main test file. Create Script - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script. Remote Step - This removes the recorded step from the script box Clean - This removes all of the recorded steps from the script box. Each of the steps displayed in the script box will contain the name of the REST operation along with its HTTP method (GET, POST, PUT, DELETE, etc.). Steps displayed in bold* with an asterisk also have a verification point recorded . That means when the script is generated, it will include a Tester.Assert function to verify the results.","title":"Script Steps"},{"location":"Guide/rest_definition_editor/#see-also","text":"For more info on REST Web Services, see REST Web Services . For a tutorial on creating a REST web service test, see the Web Services REST Tutorial .","title":"See Also"},{"location":"Guide/rest_web_service/","text":"Testing REST Web Services \u00b6 What is REST and what is a RESTful web service? \u00b6 RE**presentational **S**tate **T**ransfer (**REST ) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC. A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol. How does Rapise test REST web services? \u00b6 Creating a REST web service test in Rapise consists of the following steps: 1. Using the REST definition builder to create the various REST web service requests and verify that they return the expected data in the expected format. Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects. Rapise REST Definition Builder \u00b6 When you add a web service to your Rapise test project, you get a new REST definition file ( .rest ) that will store all of your prototyped requests against a specific REST web service. The various REST requests are then created in the REST definition builder: Each REST request can then include the following items: Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.) URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above) Credentials - Any HTTP Basic Authentication Headers Headers - Any other HTTP headers (both standard and custom) Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script. Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON. When you execute the request, it will return back the HTTP response headers and if it recognizes the MIME content-type as either XML or JSON, it will format it to make it more readable by the tester: Once you have finished with your prototyping of the web service test operations, you can then save the request definitions and use the Update Object Tree option to populate the main Rapise Object Tree . Web Service Object Recognition \u00b6 Each of the REST web service requests that has been prototyped in the REST definition editor is converted by Rapise into a scriptable object: Each of the REST service objects in the tree has operations designed to let you call the method and access the returned body either in its raw text format, or if it's a web service that returns data in JSON format, it will be able to send/receive data as native JavaScript objects. Rapise provides you with access to the following attributes of the HTTP request before/after the request has been executed: Request: Method Url Headers (inc. authentication) Body Response: Headers Body Generating Rapise REST Test Scripts \u00b6 Once all the REST operations have been defined and saved as Rapise learned objects, you can call the REST operations from within your Rapise test scripts. The easiest way to do this is to click on the Record button in the REST definition editor (next to the Send button) which will add the request to list of recorded steps: Usually you need to verify the data returned as well as call the REST method. To do this, go to the Verify text box underneath the Body section: If you select the overall array response[14] and click the main Verify button next to the Record button, the system will automatically add a verification step that verifies all of the values. To try this, click the Verify button. This will add a bold verification step to the recorded script: You will see a script step recorded with a verification test added (it's shown in bold with an asterisk*). However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name. To do this, right-click on the response[14] entry to display the verification content menu: Choose the option Verify Response length=14 . This adds the following step to the recorded script: Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned: Choose the option to Verify Response[0].Name = Hound of the Baskervilles . This will add a verification step for this specific property: Once you are ready, click the Create Script and the test script will be created for you: As well as simply calling the DoExecute() method of each REST web service object to call the previously defined operation, you can use the various properties on the REST service object to send through specific parameter values, add/remove headers, change the authenticated user, change the request body as well as inspect all of the attributes in the request and response. This allows you unparalleled control over the web service request, with the ability to debug and diagnose web service issues in addition to being able to quickly call the learned operations. Since the REST objects are just like any other Rapise object, you can have hybrid test scripts that call web service methods and also test GUI objects. This is very useful when you want to test how the user interface changes in response to specific web service API interactions, or when you have a user interface that connects to the sever using a web service (for example with a JSON-based AJAX web user interface). Once you have created your REST web service test, you can use the standard Playback functionality in Rapise to execute your test and display the report: Handling Request Timeout \u00b6 Special request or Session parameter named RequestTimeoutMs allows changing the timeout for the request. Otherwise default timeout (100000 = 100 seconds) is used. Handling Binary Downloads \u00b6 Special parameter value WriteResponseTo allows defining a path to the file where full binary version of the server response is saved. It should be a full path. It may contain environment variable reference ( %WORKDIR% , %ROOT% etc). Handling File Uploads and Multipart Requests \u00b6 Each Request with Content-Type set to multipart/form-data is assumed to be a special request and handled in a special way. The Body part should be a valid JSON with the following structure: { \"multipart\" : [ { \"Name\" : \"name_of_text_field\" , \"ContentType\" : \"text/plain\" , \"Value\" : \"value\" }, { \"Name\" : \"uploadfile\" , \"ContentType\" : \"image/png\" , \"FileName\" : \"image.png\" , \"FilePath\" : \"path_to_file_for_upload\" } ] } For the text fields ContentType is optional. By default it is set to text/plain . For file upload fields ContentType and FileName are optional. By default content-type and FileName are auto-detected from the FilePath . So here is an example of the minimal multipart request with one text field and one file upload: { \"multipart\" : [ { \"Name\" : \"name_of_text_field\" , \"Value\" : \"value\" }, { \"Name\" : \"uploadfile\" , \"FullPath\" : \"c:\\\\some\\\\path\\\\to\\\\image.png\" } ] } JSON as Field Value \u00b6 Here is how you can pass JSON value of the field: { { \"Name\" : \"jsonText\" , \"ContentType\" : \"text/json\" , \"Value\" : { \"One\" : \"Value1\" , \"Two\" : 123 } }, ... ] } Params in Multipart Request \u00b6 It is typical that you want to parameterize text value or file path. It is important to make sure that you properly quote custom value. I.e. If we have a parameterized JSON Body: { \"multipart\" : [ { \"Name\" : \"jsonText\" , \"ContentType\" : \"text/json\" , \"Value\" : { StringParam } }, { \"Name\" : \"uploadfile\" , \"FilePath\" : { FilePathParam } } ] } Once parameters are defined for the multipart request, you should make sure that they are properly escaped. Consider using JSON.stringify appropriately, i.e.: RestMultipart_UploadFileParams . SetParameter ( 'StringParam' , JSON . stringify ( \"Some Value\" )); RestMultipart_UploadFileParams . SetParameter ( 'FilePathParam' , JSON . stringify ( Global . GetFullPath ( 'NewAvatarImage.png' ) )); Passing Data Between API Calls \u00b6 There are certain scenarios when it is convenient to pass dynamic data into a REST call or between consequent REST calls, i.e.: We want to use credential from external configuration file to avoid hard-coding them as REST headers or REST parameters. One call returns values that are needed by subsequent calls. Good example is a bearer token returned by authorization calls that should then be used as a header in all subsequent calls. The token has short life range and should be requested again and again between testing sessions. We want to test service in exploratory mode. I.e. do some sequence of calls manually. Maybe then checking something via the UI or getting some value that is easier to get via the API and then needed elsewhere. So we enabled pre- and post- request callbacks that work both in REST editor and in runtime when tests executes API calls. We call them **Before**Request and **After**Response. Before-Request and After-Response REST Callbacks. \u00b6 Callbacks are defined in the REST editor. Request-specific callback may be defined in the properties editor when action is selected: When callback is required, it may be either selected from the dropdown or generated using <Add New...> option: Callback function always created in the User.js of the current test. BeforeRequest REST Callback \u00b6 BeforeRequest callback has a signature: function Before_ < Rest_FileName > _ < Entry_Name > ( /**RESTRequest*/ request ) i.e.: function Before_LibraryInformationSystem_Get_Session ( /**RESTRequest*/ request ) { request . SetHeader ( 'Accept' , 'application/json' ); request . SetHeader ( 'Content-Type' , 'application/json' ); request . SetCredential ( 'librarian' , 'librarian' ); } It is executed right before the action. It may access pre-defined Headers, Properties and URL of given request and alter them. All this may be done by accessing Session global object and request object passed as a parameter. Parameter type is RESTRequest . AfterResponse REST Callback \u00b6 AfterResponse callback has a signature: function After_ < Rest_FileName > _ < Entry_Name > ( /**RESTResponse*/ response ) i.e. function After_LibraryInformationSystem_Get_Session ( /**RESTResponse*/ response ) { var sessionid = response . GetResponseBodyObject (); Session . SetParameter ( 'session_id' , sessionid ); } It is executed right after the action. It may access response object passed as a parameter. Parameter type is RESTResponse . Common REST Callbacks \u00b6 Sometimes it is more convenient to define one common callback that will be executed for all request inside a given endpoint. Common callbacks are defined in the property window for the whole endpoint. When both common callback and entry callback are defined, both are executed in the following order: Common Before_ Rest_FileName Before_ Rest_FileName _ Entry_Name Send request and get response After_ Rest_FileName _ Entry_Name Common After_ Rest_FileName REST Callback Limitations \u00b6 If given request has no explicit callback defined and no common callback defined then in REST Editor mode values of Session will be ignored. If you have important parameters or headers stored in the session, then it is recommended to define one common 'Before' callback. REST Callback Session \u00b6 Once request has a callback and it is executed from the Editor, debugger session starts and keeps running. You may see it by presence of debugger panel: All variables and session parameters assigned in the callbacks stay active while debugger panel is running. If you want to modify something in the callback code, then you need to use Stop Debugger or Reset button first to be able to save the modifications. In this case variables, session parameters and collected cookies get lost. REST Callback Breakpoints \u00b6 You may set a breakpoint in any REST callback function, and Rapise will stop when doing a call. If you function is long and debugging implies many steps, the request may proceed while you are debugging. To avoid this you may change the value of global option API Callback Timeout Recording \u00b6 The way Rapise records captured REST actions may differs depending on the API recording options . Record REST Objects is true , each step creates an object in the object tree: and it is used by the produced script: var LibraryInformationSystem_Get_Session = SeS ( 'LibraryInformationSystem_Get_Session' ); LibraryInformationSystem_Get_Session . DoExecute (); ``` When **Record REST Objects** is ` false ` then nothing is added to the object tree and generated script uses REST definition file directly by means of [Session.GetRESTRequest](../Libraries/Session.md#getrestrequest): ``` javascript var LibraryInformationSystem_Get_Session = /**RESTService*/ Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); LibraryInformationSystem_Get_Session . DoExecute (); When Generate Full Name is false then shorter object name is used, both when Record REST Objects is true : var Get_Session = SeS ( 'Get_Session' ); Get_Session . DoExecute (); and when Record REST Objects is false : var Get_Session = /**RESTService*/ Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); Get_Session . DoExecute (); The way how Session.GetRESTRequest is recorded depends on Generate Short REST Path . In short mode the 1 st parameter is just <filename>.rest , i.e.: Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); While in long mode it is: Session . GetRESTRequest ( \"%WORKDIR%\\\\LibraryInformationSystem.rest\" , \"Get_Session\" ); Negative REST Tests \u00b6 Some actions are expected to return failure and we need to work with them to produce negative tests. There are two ways of doing it. First is global, so failures of all actions ignored. It is active when you choose Session.SetIgnoreStatus . I.e.: Session . SetIgnoreStatus ( true ); FailingEndpoint1 . DoExecute (); PassingEndpoint . DoExecute (); FailingEndpoint2 . DoExecute (); Session . SetIgnoreStatus ( false ); If automatic status verification is disabled you expected to explicitly check the response returned from DoExecute . Record Failed REST Actions controls what to record when action returns status other than 200 . If it is true then recorded step has additional parameter ignoreStatus=true . This flag is only added then action has also failed during recording. FailingEndpoint1 . DoExecute ({}, true ); PassingEndpoint . DoExecute (); FailingEndpoint2 . DoExecute ({}, true );","title":"Testing REST Web Services"},{"location":"Guide/rest_web_service/#testing-rest-web-services","text":"","title":"Testing REST Web Services"},{"location":"Guide/rest_web_service/#what-is-rest-and-what-is-a-restful-web-service","text":"RE**presentational **S**tate **T**ransfer (**REST ) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC. A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol.","title":"What is REST and what is a RESTful web service?"},{"location":"Guide/rest_web_service/#how-does-rapise-test-rest-web-services","text":"Creating a REST web service test in Rapise consists of the following steps: 1. Using the REST definition builder to create the various REST web service requests and verify that they return the expected data in the expected format. Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects.","title":"How does Rapise test REST web services?"},{"location":"Guide/rest_web_service/#rapise-rest-definition-builder","text":"When you add a web service to your Rapise test project, you get a new REST definition file ( .rest ) that will store all of your prototyped requests against a specific REST web service. The various REST requests are then created in the REST definition builder: Each REST request can then include the following items: Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.) URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above) Credentials - Any HTTP Basic Authentication Headers Headers - Any other HTTP headers (both standard and custom) Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script. Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON. When you execute the request, it will return back the HTTP response headers and if it recognizes the MIME content-type as either XML or JSON, it will format it to make it more readable by the tester: Once you have finished with your prototyping of the web service test operations, you can then save the request definitions and use the Update Object Tree option to populate the main Rapise Object Tree .","title":"Rapise REST Definition Builder"},{"location":"Guide/rest_web_service/#web-service-object-recognition","text":"Each of the REST web service requests that has been prototyped in the REST definition editor is converted by Rapise into a scriptable object: Each of the REST service objects in the tree has operations designed to let you call the method and access the returned body either in its raw text format, or if it's a web service that returns data in JSON format, it will be able to send/receive data as native JavaScript objects. Rapise provides you with access to the following attributes of the HTTP request before/after the request has been executed: Request: Method Url Headers (inc. authentication) Body Response: Headers Body","title":"Web Service Object Recognition"},{"location":"Guide/rest_web_service/#generating-rapise-rest-test-scripts","text":"Once all the REST operations have been defined and saved as Rapise learned objects, you can call the REST operations from within your Rapise test scripts. The easiest way to do this is to click on the Record button in the REST definition editor (next to the Send button) which will add the request to list of recorded steps: Usually you need to verify the data returned as well as call the REST method. To do this, go to the Verify text box underneath the Body section: If you select the overall array response[14] and click the main Verify button next to the Record button, the system will automatically add a verification step that verifies all of the values. To try this, click the Verify button. This will add a bold verification step to the recorded script: You will see a script step recorded with a verification test added (it's shown in bold with an asterisk*). However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name. To do this, right-click on the response[14] entry to display the verification content menu: Choose the option Verify Response length=14 . This adds the following step to the recorded script: Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned: Choose the option to Verify Response[0].Name = Hound of the Baskervilles . This will add a verification step for this specific property: Once you are ready, click the Create Script and the test script will be created for you: As well as simply calling the DoExecute() method of each REST web service object to call the previously defined operation, you can use the various properties on the REST service object to send through specific parameter values, add/remove headers, change the authenticated user, change the request body as well as inspect all of the attributes in the request and response. This allows you unparalleled control over the web service request, with the ability to debug and diagnose web service issues in addition to being able to quickly call the learned operations. Since the REST objects are just like any other Rapise object, you can have hybrid test scripts that call web service methods and also test GUI objects. This is very useful when you want to test how the user interface changes in response to specific web service API interactions, or when you have a user interface that connects to the sever using a web service (for example with a JSON-based AJAX web user interface). Once you have created your REST web service test, you can use the standard Playback functionality in Rapise to execute your test and display the report:","title":"Generating Rapise REST Test Scripts"},{"location":"Guide/rest_web_service/#handling-request-timeout","text":"Special request or Session parameter named RequestTimeoutMs allows changing the timeout for the request. Otherwise default timeout (100000 = 100 seconds) is used.","title":"Handling Request Timeout"},{"location":"Guide/rest_web_service/#handling-binary-downloads","text":"Special parameter value WriteResponseTo allows defining a path to the file where full binary version of the server response is saved. It should be a full path. It may contain environment variable reference ( %WORKDIR% , %ROOT% etc).","title":"Handling Binary Downloads"},{"location":"Guide/rest_web_service/#handling-file-uploads-and-multipart-requests","text":"Each Request with Content-Type set to multipart/form-data is assumed to be a special request and handled in a special way. The Body part should be a valid JSON with the following structure: { \"multipart\" : [ { \"Name\" : \"name_of_text_field\" , \"ContentType\" : \"text/plain\" , \"Value\" : \"value\" }, { \"Name\" : \"uploadfile\" , \"ContentType\" : \"image/png\" , \"FileName\" : \"image.png\" , \"FilePath\" : \"path_to_file_for_upload\" } ] } For the text fields ContentType is optional. By default it is set to text/plain . For file upload fields ContentType and FileName are optional. By default content-type and FileName are auto-detected from the FilePath . So here is an example of the minimal multipart request with one text field and one file upload: { \"multipart\" : [ { \"Name\" : \"name_of_text_field\" , \"Value\" : \"value\" }, { \"Name\" : \"uploadfile\" , \"FullPath\" : \"c:\\\\some\\\\path\\\\to\\\\image.png\" } ] }","title":"Handling File Uploads and Multipart Requests"},{"location":"Guide/rest_web_service/#json-as-field-value","text":"Here is how you can pass JSON value of the field: { { \"Name\" : \"jsonText\" , \"ContentType\" : \"text/json\" , \"Value\" : { \"One\" : \"Value1\" , \"Two\" : 123 } }, ... ] }","title":"JSON as Field Value"},{"location":"Guide/rest_web_service/#params-in-multipart-request","text":"It is typical that you want to parameterize text value or file path. It is important to make sure that you properly quote custom value. I.e. If we have a parameterized JSON Body: { \"multipart\" : [ { \"Name\" : \"jsonText\" , \"ContentType\" : \"text/json\" , \"Value\" : { StringParam } }, { \"Name\" : \"uploadfile\" , \"FilePath\" : { FilePathParam } } ] } Once parameters are defined for the multipart request, you should make sure that they are properly escaped. Consider using JSON.stringify appropriately, i.e.: RestMultipart_UploadFileParams . SetParameter ( 'StringParam' , JSON . stringify ( \"Some Value\" )); RestMultipart_UploadFileParams . SetParameter ( 'FilePathParam' , JSON . stringify ( Global . GetFullPath ( 'NewAvatarImage.png' ) ));","title":"Params in Multipart Request"},{"location":"Guide/rest_web_service/#passing-data-between-api-calls","text":"There are certain scenarios when it is convenient to pass dynamic data into a REST call or between consequent REST calls, i.e.: We want to use credential from external configuration file to avoid hard-coding them as REST headers or REST parameters. One call returns values that are needed by subsequent calls. Good example is a bearer token returned by authorization calls that should then be used as a header in all subsequent calls. The token has short life range and should be requested again and again between testing sessions. We want to test service in exploratory mode. I.e. do some sequence of calls manually. Maybe then checking something via the UI or getting some value that is easier to get via the API and then needed elsewhere. So we enabled pre- and post- request callbacks that work both in REST editor and in runtime when tests executes API calls. We call them **Before**Request and **After**Response.","title":"Passing Data Between API Calls"},{"location":"Guide/rest_web_service/#before-request-and-after-response-rest-callbacks","text":"Callbacks are defined in the REST editor. Request-specific callback may be defined in the properties editor when action is selected: When callback is required, it may be either selected from the dropdown or generated using <Add New...> option: Callback function always created in the User.js of the current test.","title":"Before-Request and After-Response REST Callbacks."},{"location":"Guide/rest_web_service/#beforerequest-rest-callback","text":"BeforeRequest callback has a signature: function Before_ < Rest_FileName > _ < Entry_Name > ( /**RESTRequest*/ request ) i.e.: function Before_LibraryInformationSystem_Get_Session ( /**RESTRequest*/ request ) { request . SetHeader ( 'Accept' , 'application/json' ); request . SetHeader ( 'Content-Type' , 'application/json' ); request . SetCredential ( 'librarian' , 'librarian' ); } It is executed right before the action. It may access pre-defined Headers, Properties and URL of given request and alter them. All this may be done by accessing Session global object and request object passed as a parameter. Parameter type is RESTRequest .","title":"BeforeRequest REST Callback"},{"location":"Guide/rest_web_service/#afterresponse-rest-callback","text":"AfterResponse callback has a signature: function After_ < Rest_FileName > _ < Entry_Name > ( /**RESTResponse*/ response ) i.e. function After_LibraryInformationSystem_Get_Session ( /**RESTResponse*/ response ) { var sessionid = response . GetResponseBodyObject (); Session . SetParameter ( 'session_id' , sessionid ); } It is executed right after the action. It may access response object passed as a parameter. Parameter type is RESTResponse .","title":"AfterResponse REST Callback"},{"location":"Guide/rest_web_service/#common-rest-callbacks","text":"Sometimes it is more convenient to define one common callback that will be executed for all request inside a given endpoint. Common callbacks are defined in the property window for the whole endpoint. When both common callback and entry callback are defined, both are executed in the following order: Common Before_ Rest_FileName Before_ Rest_FileName _ Entry_Name Send request and get response After_ Rest_FileName _ Entry_Name Common After_ Rest_FileName","title":"Common REST Callbacks"},{"location":"Guide/rest_web_service/#rest-callback-limitations","text":"If given request has no explicit callback defined and no common callback defined then in REST Editor mode values of Session will be ignored. If you have important parameters or headers stored in the session, then it is recommended to define one common 'Before' callback.","title":"REST Callback Limitations"},{"location":"Guide/rest_web_service/#rest-callback-session","text":"Once request has a callback and it is executed from the Editor, debugger session starts and keeps running. You may see it by presence of debugger panel: All variables and session parameters assigned in the callbacks stay active while debugger panel is running. If you want to modify something in the callback code, then you need to use Stop Debugger or Reset button first to be able to save the modifications. In this case variables, session parameters and collected cookies get lost.","title":"REST Callback Session"},{"location":"Guide/rest_web_service/#rest-callback-breakpoints","text":"You may set a breakpoint in any REST callback function, and Rapise will stop when doing a call. If you function is long and debugging implies many steps, the request may proceed while you are debugging. To avoid this you may change the value of global option API Callback Timeout","title":"REST Callback Breakpoints"},{"location":"Guide/rest_web_service/#recording","text":"The way Rapise records captured REST actions may differs depending on the API recording options . Record REST Objects is true , each step creates an object in the object tree: and it is used by the produced script: var LibraryInformationSystem_Get_Session = SeS ( 'LibraryInformationSystem_Get_Session' ); LibraryInformationSystem_Get_Session . DoExecute (); ``` When **Record REST Objects** is ` false ` then nothing is added to the object tree and generated script uses REST definition file directly by means of [Session.GetRESTRequest](../Libraries/Session.md#getrestrequest): ``` javascript var LibraryInformationSystem_Get_Session = /**RESTService*/ Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); LibraryInformationSystem_Get_Session . DoExecute (); When Generate Full Name is false then shorter object name is used, both when Record REST Objects is true : var Get_Session = SeS ( 'Get_Session' ); Get_Session . DoExecute (); and when Record REST Objects is false : var Get_Session = /**RESTService*/ Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); Get_Session . DoExecute (); The way how Session.GetRESTRequest is recorded depends on Generate Short REST Path . In short mode the 1 st parameter is just <filename>.rest , i.e.: Session . GetRESTRequest ( \"LibraryInformationSystem.rest\" , \"Get_Session\" ); While in long mode it is: Session . GetRESTRequest ( \"%WORKDIR%\\\\LibraryInformationSystem.rest\" , \"Get_Session\" );","title":"Recording"},{"location":"Guide/rest_web_service/#negative-rest-tests","text":"Some actions are expected to return failure and we need to work with them to produce negative tests. There are two ways of doing it. First is global, so failures of all actions ignored. It is active when you choose Session.SetIgnoreStatus . I.e.: Session . SetIgnoreStatus ( true ); FailingEndpoint1 . DoExecute (); PassingEndpoint . DoExecute (); FailingEndpoint2 . DoExecute (); Session . SetIgnoreStatus ( false ); If automatic status verification is disabled you expected to explicitly check the response returned from DoExecute . Record Failed REST Actions controls what to record when action returns status other than 200 . If it is true then recorded step has additional parameter ignoreStatus=true . This flag is only added then action has also failed during recording. FailingEndpoint1 . DoExecute ({}, true ); PassingEndpoint . DoExecute (); FailingEndpoint2 . DoExecute ({}, true );","title":"Negative REST Tests"},{"location":"Guide/restoring_the_default_layout/","text":"Restoring the Default Layout \u00b6 There are two ways to restore the default layout of Rapise panes: (1) On Startup, and (2) In the Global Settings. On Startup \u00b6 Press the Shift key while you open Rapise. Keep the Shift key down until Rapise is done initializing. Global Settings Dialog \u00b6 Click menu Settings > Global . The Rapise Settings dialog will appear. Navigate to the Utilities tab of the dialog. Click on the Reset Layout button. Rapise will restart and the layout will be returned to the default. See Also \u00b6 How-Tos","title":"Restoring the Default Layout"},{"location":"Guide/restoring_the_default_layout/#restoring-the-default-layout","text":"There are two ways to restore the default layout of Rapise panes: (1) On Startup, and (2) In the Global Settings.","title":"Restoring the Default Layout"},{"location":"Guide/restoring_the_default_layout/#on-startup","text":"Press the Shift key while you open Rapise. Keep the Shift key down until Rapise is done initializing.","title":"On Startup"},{"location":"Guide/restoring_the_default_layout/#global-settings-dialog","text":"Click menu Settings > Global . The Rapise Settings dialog will appear. Navigate to the Utilities tab of the dialog. Click on the Reset Layout button. Rapise will restart and the layout will be returned to the default.","title":"Global Settings Dialog"},{"location":"Guide/restoring_the_default_layout/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/rvl_editor/","text":"RVL Editor \u00b6 Purpose \u00b6 Rapise Visual Language Editor How to Open \u00b6 Use the RVL button on the main toolbar to open an RVL ( .rvl.xlsx ) file. The file will be opened by the RVL Editor in the Content View . Features \u00b6 Editor has support for all RVL statements including Variables , Actions , Assertions , Maps , If-Else , Loops statements. RVL is a recordable language. Rapise recorder is translates captured actions to objects stored in the object repository and a set of actions. Each recorded chunk may be inserted into desired place in the selected sheet: Usually recording is with together with scripting and, maybe, some JavaScript for advanced tasks. RVL Scripting \u00b6 In addition to recording one may use RVL editor for authoring scripts. You may drag&drop actions from the Object Tree into the RVL. Also RVL editor is both keyboard and mouse friendly. You may either type whole or parts of commands and rely on auto-completion OR simply select a dropdown in each cell of the row. When writing or modifying a script it is recommended to go left-to-right for script creation. Auto Completion \u00b6 RVL Editor supports Auto completions. For example, if you type I in the flow column: And hit Tab key the whole If statement is created: Note : Tab is a trigger for auto-completion. If you use cursor keys or mouse to leave the cell then auto completion will not be executed. If you go to last line and change End with ElseIf then alternative branch is appended: Similar logic works for Params, Conditions, Maps, Loops, Assertions and so on. Disabling Cell Auto Correction \u00b6 Sometimes autocompletion prevents one from entering a desired value. For example, you have a global object navigator and typing it into the Object columns automatically changes it to Navigator . The solution is to enter the cell for editing text and pressing F2 . It will disable all autocompletion for this cell and then you may type any value. Action Params \u00b6 When you select an action from the list RVL Editor automatically fills default action params. For example, if we choose: And press Tab after DoLaunch RVL Editor fills default param: DoLaunch has one required parameter cmdLine . Also it has a number of optional parameters. They are not added by default to make script more concise. However, you may need all or some of them. So you may add them by pressing Params button on RVL Toolbar : It is also possible to add params one-by-one using the dropdown in the ParamName column: Password Param Value \u00b6 Once column ParamType set to password , ParamValue should be an encrypted string. Setting encrypted value is simple: Change ParamType to string . Type plain value to be encrypted into ParamValue . Switch ParamType to password - plain value becomes encrypted. Param Dropdowns \u00b6 It is possible to define own list of dropdown values for any parameter. In most cases it is defined for custom functions. For example, we may have function SetState(stateCode) where we expect pre-defined limited set of state code values. function SetState ( /**string*/ stateName ) We may define dropdown for stateName parameter, so that RVL editor suggest the following list: The values for this dropdown are defined in the spreadsheet: Moreover, we define a code for each state name, so it may be re-mapped in the implementation of the SetState function using Dropdown values are defined in file Dropdowns.xlsx , that may be added to the test using the Create/Spreadsheet... menu item. The full key to find matching dropdown is objectid . method . paramName . If not found, it will check method.paramNam and paramName columns: Key Example objectid.method.paramName Global.DoLaunch.cmdLine Functions.SetState.stateName MyButton.DoClick.clickType object_type.method.paramName VSFlexGrid.DoClickCell.row method . paramName SetState.stateName paramName stateName The dropdown may be defined in the current (next to Main.rvl.xlsx ), in parent test and so on up to the framework root (the folder pointed by the %WORKDIR% ). RVL Editor always tries to find best match for dropdown column starting from nearest Dropdowns.xlsx and climbing up to the framework root. Dropdowns may also be mapped to other values. I.e. human-readable menu area names to learned object IDs, state names to state codes, element names to XPath statements and so on. This mapping is done by adjacent columns in Dropdowns.xlsx . The mapping may be one to many, so we may define both state code, state order number, state capital for the same state name by adding corresponding columns. Full Line Comments \u00b6 Anything typed into the Type cell of the commented line is expanded to as many cells as needed to show the text. This is similar to the way Excel extends cell text across sibling empty cells: Context Menu \u00b6 Find ' <object> ' in Object Tree - this menu item is only available when you click on the cell from the Object column. Flash ' <object> ' - flash the object. Show XPath/Location for ' <object> ' - show the location string for the object. Rename ' <object> '... - rename object in the object repository and fix all references in the current sheet. Play This Sheet - execute actions from the active sheet. Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately. Play From Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped. Ins Row - insert new row before the active one. Del Row - delete all selected rows. Cut , Copy , Paste - standard clipboard operations. Clear in Selection - clears cell values in selected region. Select All Rows - select full sheet. Insert Selected Rows Here - clone rows at the current location. Move Selected Rows Here - move rows to the current location. Copy Selection as JavaScript - translate selected range to the equivalent JavaScript and put its text to the clipboard. Copy Selection as Text - put selected range as tab-separated text to the clipboard. Wrap Selection Info If - enclose selected range into branch . Wrap Selection Into Loop - enclose selected range into loop . Extract Selection as new Sheet - make new sheet and move selected range into it. Sheet Tab Context Menu \u00b6 Play this Sheet - execute given sheet. Rename... - change sheet tab name. Remove Sheet ' <sheet name> ' - delete sheet form the workbook. Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL sheet in the same workbook. Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL workbook. Copy RVL.DoPlayScript(...) - copy JavaScript code to execute this sheet (call sheet from JavaScript). Functions Object \u00b6 Suppose we have some functions defined in the User.js file: Calling JavaScript from RVL is done via the Functions Object. It is not available in the object repository and is only shown in RVL Objects dropdown: Once selected it shows all user defined functions from the User.js file: File Extensions \u00b6 RVL has following file extensions: rvl.xlsx rvl.xls RVL is designed to be a simple grid language and it may be edited in any spreadsheet editor supporting .xls or .xlsx files (i.e. Microsoft Excel) RVL Editor Shortcuts \u00b6 Shift + Enter - inserts an empty line after the selected cell. Ctrl + D - deletes the line of the selected cell. Ctrl + P - reveals optional parameters for an action in the current line, acts as click on Params button on the RVL toolbar. RVL Toolbox \u00b6 Since Rapise 6.7 you may use RVL Toolbox to quickly find RVL snippets, KB articles and documentation links. The toolbox is located on the right side of the RVL editor. The toolbox consists of three parts. Search field. Enter text here to filter the list of items. List of items. Select an item to preview. Some of the items can be dragged right into RVL area. Preview pane. It has description of selected item. Click links to get more information. If you select an item in the toolbox and see a yellow box with text Drag selected item to insert into RVL you may drag the item to RVL area. There is also and advanced way of using the toolbox: Start typing what you want to do in Actions column (the line must be empty), then hit Enter and choose an item from the list using arrow keys, then hit Enter again to insert the snippet into RVL. If you want to keep the toolbox hidden then unpin it. Move mouse over the Toolbox label to reveal the list of items. See Also \u00b6 About RVL Why RVL? KB 357 Data-driven testing with spreadsheets and RVL KB 340 How to Do a Nested Loop with Rapise Visual Language (RVL) KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library","title":"RVL Editor"},{"location":"Guide/rvl_editor/#rvl-editor","text":"","title":"RVL Editor"},{"location":"Guide/rvl_editor/#purpose","text":"Rapise Visual Language Editor","title":"Purpose"},{"location":"Guide/rvl_editor/#how-to-open","text":"Use the RVL button on the main toolbar to open an RVL ( .rvl.xlsx ) file. The file will be opened by the RVL Editor in the Content View .","title":"How to Open"},{"location":"Guide/rvl_editor/#features","text":"Editor has support for all RVL statements including Variables , Actions , Assertions , Maps , If-Else , Loops statements. RVL is a recordable language. Rapise recorder is translates captured actions to objects stored in the object repository and a set of actions. Each recorded chunk may be inserted into desired place in the selected sheet: Usually recording is with together with scripting and, maybe, some JavaScript for advanced tasks.","title":"Features"},{"location":"Guide/rvl_editor/#rvl-scripting","text":"In addition to recording one may use RVL editor for authoring scripts. You may drag&drop actions from the Object Tree into the RVL. Also RVL editor is both keyboard and mouse friendly. You may either type whole or parts of commands and rely on auto-completion OR simply select a dropdown in each cell of the row. When writing or modifying a script it is recommended to go left-to-right for script creation.","title":"RVL Scripting"},{"location":"Guide/rvl_editor/#auto-completion","text":"RVL Editor supports Auto completions. For example, if you type I in the flow column: And hit Tab key the whole If statement is created: Note : Tab is a trigger for auto-completion. If you use cursor keys or mouse to leave the cell then auto completion will not be executed. If you go to last line and change End with ElseIf then alternative branch is appended: Similar logic works for Params, Conditions, Maps, Loops, Assertions and so on.","title":"Auto Completion"},{"location":"Guide/rvl_editor/#disabling-cell-auto-correction","text":"Sometimes autocompletion prevents one from entering a desired value. For example, you have a global object navigator and typing it into the Object columns automatically changes it to Navigator . The solution is to enter the cell for editing text and pressing F2 . It will disable all autocompletion for this cell and then you may type any value.","title":"Disabling Cell Auto Correction"},{"location":"Guide/rvl_editor/#action-params","text":"When you select an action from the list RVL Editor automatically fills default action params. For example, if we choose: And press Tab after DoLaunch RVL Editor fills default param: DoLaunch has one required parameter cmdLine . Also it has a number of optional parameters. They are not added by default to make script more concise. However, you may need all or some of them. So you may add them by pressing Params button on RVL Toolbar : It is also possible to add params one-by-one using the dropdown in the ParamName column:","title":"Action Params"},{"location":"Guide/rvl_editor/#password-param-value","text":"Once column ParamType set to password , ParamValue should be an encrypted string. Setting encrypted value is simple: Change ParamType to string . Type plain value to be encrypted into ParamValue . Switch ParamType to password - plain value becomes encrypted.","title":"Password Param Value"},{"location":"Guide/rvl_editor/#param-dropdowns","text":"It is possible to define own list of dropdown values for any parameter. In most cases it is defined for custom functions. For example, we may have function SetState(stateCode) where we expect pre-defined limited set of state code values. function SetState ( /**string*/ stateName ) We may define dropdown for stateName parameter, so that RVL editor suggest the following list: The values for this dropdown are defined in the spreadsheet: Moreover, we define a code for each state name, so it may be re-mapped in the implementation of the SetState function using Dropdown values are defined in file Dropdowns.xlsx , that may be added to the test using the Create/Spreadsheet... menu item. The full key to find matching dropdown is objectid . method . paramName . If not found, it will check method.paramNam and paramName columns: Key Example objectid.method.paramName Global.DoLaunch.cmdLine Functions.SetState.stateName MyButton.DoClick.clickType object_type.method.paramName VSFlexGrid.DoClickCell.row method . paramName SetState.stateName paramName stateName The dropdown may be defined in the current (next to Main.rvl.xlsx ), in parent test and so on up to the framework root (the folder pointed by the %WORKDIR% ). RVL Editor always tries to find best match for dropdown column starting from nearest Dropdowns.xlsx and climbing up to the framework root. Dropdowns may also be mapped to other values. I.e. human-readable menu area names to learned object IDs, state names to state codes, element names to XPath statements and so on. This mapping is done by adjacent columns in Dropdowns.xlsx . The mapping may be one to many, so we may define both state code, state order number, state capital for the same state name by adding corresponding columns.","title":"Param Dropdowns"},{"location":"Guide/rvl_editor/#full-line-comments","text":"Anything typed into the Type cell of the commented line is expanded to as many cells as needed to show the text. This is similar to the way Excel extends cell text across sibling empty cells:","title":"Full Line Comments"},{"location":"Guide/rvl_editor/#context-menu","text":"Find ' <object> ' in Object Tree - this menu item is only available when you click on the cell from the Object column. Flash ' <object> ' - flash the object. Show XPath/Location for ' <object> ' - show the location string for the object. Rename ' <object> '... - rename object in the object repository and fix all references in the current sheet. Play This Sheet - execute actions from the active sheet. Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately. Play From Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped. Ins Row - insert new row before the active one. Del Row - delete all selected rows. Cut , Copy , Paste - standard clipboard operations. Clear in Selection - clears cell values in selected region. Select All Rows - select full sheet. Insert Selected Rows Here - clone rows at the current location. Move Selected Rows Here - move rows to the current location. Copy Selection as JavaScript - translate selected range to the equivalent JavaScript and put its text to the clipboard. Copy Selection as Text - put selected range as tab-separated text to the clipboard. Wrap Selection Info If - enclose selected range into branch . Wrap Selection Into Loop - enclose selected range into loop . Extract Selection as new Sheet - make new sheet and move selected range into it.","title":"Context Menu"},{"location":"Guide/rvl_editor/#sheet-tab-context-menu","text":"Play this Sheet - execute given sheet. Rename... - change sheet tab name. Remove Sheet ' <sheet name> ' - delete sheet form the workbook. Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL sheet in the same workbook. Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL workbook. Copy RVL.DoPlayScript(...) - copy JavaScript code to execute this sheet (call sheet from JavaScript).","title":"Sheet Tab Context Menu"},{"location":"Guide/rvl_editor/#functions-object","text":"Suppose we have some functions defined in the User.js file: Calling JavaScript from RVL is done via the Functions Object. It is not available in the object repository and is only shown in RVL Objects dropdown: Once selected it shows all user defined functions from the User.js file:","title":"Functions Object"},{"location":"Guide/rvl_editor/#file-extensions","text":"RVL has following file extensions: rvl.xlsx rvl.xls RVL is designed to be a simple grid language and it may be edited in any spreadsheet editor supporting .xls or .xlsx files (i.e. Microsoft Excel)","title":"File Extensions"},{"location":"Guide/rvl_editor/#rvl-editor-shortcuts","text":"Shift + Enter - inserts an empty line after the selected cell. Ctrl + D - deletes the line of the selected cell. Ctrl + P - reveals optional parameters for an action in the current line, acts as click on Params button on the RVL toolbar.","title":"RVL Editor Shortcuts"},{"location":"Guide/rvl_editor/#rvl-toolbox","text":"Since Rapise 6.7 you may use RVL Toolbox to quickly find RVL snippets, KB articles and documentation links. The toolbox is located on the right side of the RVL editor. The toolbox consists of three parts. Search field. Enter text here to filter the list of items. List of items. Select an item to preview. Some of the items can be dragged right into RVL area. Preview pane. It has description of selected item. Click links to get more information. If you select an item in the toolbox and see a yellow box with text Drag selected item to insert into RVL you may drag the item to RVL area. There is also and advanced way of using the toolbox: Start typing what you want to do in Actions column (the line must be empty), then hit Enter and choose an item from the list using arrow keys, then hit Enter again to insert the snippet into RVL. If you want to keep the toolbox hidden then unpin it. Move mouse over the Toolbox label to reveal the list of items.","title":"RVL Toolbox"},{"location":"Guide/rvl_editor/#see-also","text":"About RVL Why RVL? KB 357 Data-driven testing with spreadsheets and RVL KB 340 How to Do a Nested Loop with Rapise Visual Language (RVL) KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library","title":"See Also"},{"location":"Guide/salesforce_com/","text":"Salesforce.com \u00b6 Overview \u00b6 Salesforce.com is a cloud-based Customer Relationship Management (CRM) and Sales Force Automation (SFA) platform that is delivered as a Software as a Service (CRM) solution. It provides companies with an interface for case management and task management, and a system for automatically routing and escalating important events. Rapise provides out of the box support for testing Salesforce.com and provides additional libraries for making the testing even easier and more productive. Recording a Salesforce.com Test \u00b6 Salesforce.com is completely web-based and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests: Most of the Salesforce.com user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside Salesforce.com that Rapise has specialized support for. For that reason you'll also see the DomSalesforce library added to your test as well as the browser one. This DomSalesforce library adds additional rules that identify certain Salesforce.com objects (e.g. the main Grid) to make testing easier. When you record your first test, you'll see the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g\\_browserLibrary:Internet Explorer HTML%\" , \"DomSalesforce\" ]; If you don\u2019t see the DomSalesforce library listed in your test, then you will need to manually change it using the [ ] Libraries button on the tool menu. Tips for Interacting with Objects \u00b6 Many of the screens in Salesforce.com use simple HTML form fields such as text boxes, dropdown lists, etc.: Rapise will recognize these objects using the standard web browser HTML libraries. Salesforce.com Grid One of the the most important UI elements inside Salesforce.com is the sortable, filterable grid: The Salesforce.com Grid is used in lots of different screens inside Salesforce.com (e.g. leads, quotes, etc.) and it is very common to need to interact with it in test scripts. When you record operations on such a grid or simply learn the entire grid using Ctrl + 2 you will learn the SalesforceGrid object In additional to the standard HTML object methods and properties, you have the following special functions that you can perform on the grid : DoClickCell() - Clicks the specified cell when you specify the x-index, y-index, the type of click (left-click, right-click, etc.). DoClickText() - Clicks on a specific text inside the grid. GetCell - Gets the text of the specified cell. GetColumnCount - Gets the number of columns in grid. GetColumnName - Gets the caption of a column. GetRowCount - Gets the number of rows in grid. See Also \u00b6 Get the framework for testing Salesforce (github) KB: Testing Visualforce components in Salesforce Webinar: Testing Salesforce.com with Rapise Webinar: Testing Salesforce Lightning with Rapise","title":"Salesforce.com"},{"location":"Guide/salesforce_com/#salesforcecom","text":"","title":"Salesforce.com"},{"location":"Guide/salesforce_com/#overview","text":"Salesforce.com is a cloud-based Customer Relationship Management (CRM) and Sales Force Automation (SFA) platform that is delivered as a Software as a Service (CRM) solution. It provides companies with an interface for case management and task management, and a system for automatically routing and escalating important events. Rapise provides out of the box support for testing Salesforce.com and provides additional libraries for making the testing even easier and more productive.","title":"Overview"},{"location":"Guide/salesforce_com/#recording-a-salesforcecom-test","text":"Salesforce.com is completely web-based and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests: Most of the Salesforce.com user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML). In addition, there are special controls inside Salesforce.com that Rapise has specialized support for. For that reason you'll also see the DomSalesforce library added to your test as well as the browser one. This DomSalesforce library adds additional rules that identify certain Salesforce.com objects (e.g. the main Grid) to make testing easier. When you record your first test, you'll see the following library selection code generated automatically by Rapise: g_load_libraries = [ \"%g\\_browserLibrary:Internet Explorer HTML%\" , \"DomSalesforce\" ]; If you don\u2019t see the DomSalesforce library listed in your test, then you will need to manually change it using the [ ] Libraries button on the tool menu.","title":"Recording a Salesforce.com Test"},{"location":"Guide/salesforce_com/#tips-for-interacting-with-objects","text":"Many of the screens in Salesforce.com use simple HTML form fields such as text boxes, dropdown lists, etc.: Rapise will recognize these objects using the standard web browser HTML libraries. Salesforce.com Grid One of the the most important UI elements inside Salesforce.com is the sortable, filterable grid: The Salesforce.com Grid is used in lots of different screens inside Salesforce.com (e.g. leads, quotes, etc.) and it is very common to need to interact with it in test scripts. When you record operations on such a grid or simply learn the entire grid using Ctrl + 2 you will learn the SalesforceGrid object In additional to the standard HTML object methods and properties, you have the following special functions that you can perform on the grid : DoClickCell() - Clicks the specified cell when you specify the x-index, y-index, the type of click (left-click, right-click, etc.). DoClickText() - Clicks on a specific text inside the grid. GetCell - Gets the text of the specified cell. GetColumnCount - Gets the number of columns in grid. GetColumnName - Gets the caption of a column. GetRowCount - Gets the number of rows in grid.","title":"Tips for Interacting with Objects"},{"location":"Guide/salesforce_com/#see-also","text":"Get the framework for testing Salesforce (github) KB: Testing Visualforce components in Salesforce Webinar: Testing Salesforce.com with Rapise Webinar: Testing Salesforce Lightning with Rapise","title":"See Also"},{"location":"Guide/sample_tests/","text":"Samples Index \u00b6 Rapise includes several sample tests that you are free to read, modify, copy and use. You can open the tests from the Start Page . Sample tests are located in: RapiseDataDirectory\\Samples Unless otherwise specified, the RapiseDataDirectory will be: C:\\Users\\Public\\Documents\\Rapise The sample tests are described below. ActiveX \u00b6 These samples demonstrate the testing of Microsoft ActiveX / COM controls used in Visual Basic applications including the MSComCtl library. The samples include the Microsoft FlexGrid Control , MS Common Toolbar Control , Microsoft Tabbed Dialog Control , TabStrip , and Microsoft Windows Common Controls 6.0 [MSCOMCTL.OCX]. AnalogRecorder \u00b6 This sample demonstrates Analog Recording . CrossBrowser \u00b6 Simple web test you can run on any browser . Dynamics AX \u00b6 This sample demonstrates using Rapise to test an installation of Microsoft Dynamics AX 2012 to perform some basic ERP functions. Dynamics CRM \u00b6 This sample demonstrates using Rapise to test an installation of Microsoft Dynamics CRM to perform some basic contact management functions. FarPoint \u00b6 This sample script demonstrates using the FarPoint library to test the FarPoint SpreadSheet Control. Java \u00b6 This sample tests a Java AWT/SWING application. This sample demonstrates the capabilities of the Java library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc. Java SWT \u00b6 This sample tests a Java SWT/RCP application. This sample demonstrates the capabilities of the SWT and UIAutomation libraries. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc. jQuery-UI \u00b6 This sample illustrates using the jQuery HTML DOM extension library that allows you to record/playback test scripts against web applications using widgets from the jQuery Javascript library framework. Library Information System \u00b6 CreateNewBook, EditExistingBook, CreateNewAuthor, EditExistingAuthor \u00b6 These tests can be used to test the sample library information system web application hosted at http://www.libraryinformationsystem.org . This is the same sample application used by SpiraTest and illustrates how you can use SpiraTest to manage and execute automated Rapise tests. A copy of these tests is also available in new installations of SpiraTest v3.2+. To see these tests on the Start Page press the Fetch button at the top of the samples list. Managed \u00b6 This sample tests a .NET 2.0 application. This sample demonstrates the capabilities of the Managed library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, grid, listbox, listview, menu, etc. QtFramework \u00b6 TThis sample tests a sample QT Framework cross-platform application. This sample demonstrates the capabilities of the QtFramework library . The application under test contains various standard Qt widgets, such as: button, edit, tree, combo box, etc. Silverlight \u00b6 This sample tests a Silverlight web application. This sample demonstrates the capabilities of the UIAutomation library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc. SimulatedObject \u00b6 This sample opens MS Paint and draws on its canvas. It uses Simulated Objects and several related methods: DoMouseMove (X,Y), DoLButtonDown (), DoLButtonUp (), and DoSendKeys (text). SampleATM \u00b6 This sample tests an MFC application. You will also learn how to organize your test script in modular form, how to launch the AUT from your test script and how to execute various actions on GUI controls. UsingDatabase \u00b6 This example shows how you can use a relational (SQL) database to create Data-Driven tests. This script reads test case data from a spreadsheet ADO datasource to test Calculator . UsingDLLHandlerManaged \u00b6 This sample shows how to unit test managed DLLs . You'll see how to use methods CreateClassInstance () and InvokeMember (). UsingDLLHandlerUnManaged \u00b6 This sample shows how to unit test unmanaged DLL code . You'll learn how to register ( UserWrap.Register ) and execute ( UserWrap.ShellExecute ) a function. UsingImageCheckPoint \u00b6 This example shows how to create image checkpoints . UsingInclude \u00b6 This sample demonstrates two ways to include external files/functions: eval(File.Include(...)) : include a file with utility functions. SeSRunJSScript(...) : include and execute external function with its own object map. UsingMSAccess, UsingMSExcel, UsingMSWord \u00b6 These samples demonstrate how you can work with Microsoft Word , Excel , and Access from scripts. You'll learn how to test applications that expose a COM interface . UsingMobile \u00b6 These samples demonstrate how to do the testing of mobile devices running either Apple iOS or Android . UsingRegistry \u00b6 This sample demonstrates usage of the Windows registry. The registry is queried to determine the OS (XP/2003/Vista, etc) and owner. UsingReporting \u00b6 This sample illustrates various reporting features: Regular reporting ( Tester.Assert , Tester.Message ) Custom attributes ( Tester.SetReportAttribute , Tester.ResetReportAttribute ) Stacked attributes ( Tester.PushReportAttribute , Tester.PopReportAttribute ) Nested Tests ( Tester.BeginTest , Tester.EndTest ) Inserting Links, Text and Images into the report (tags parameter, SeSReportText , SeSReportLink , SeSReportImage ) UsingSelenium \u00b6 This sample how you can use Rapise to write Selenium WebDriver based web application tests using the raw Selenium WebDriver API. UsingSpreadSheet \u00b6 This example shows how you can use Excel spreadsheets to create Data-Driven tests. This script reads test case data from an XLS spreadsheet to test Calculator . UsingXML \u00b6 This sample demonstrates how to read, modify and write XML files. WebServicesREST \u00b6 This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an HTTP RESTful web service . WebServicesSOAP \u00b6 This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an SOAP web service .","title":"Samples Index"},{"location":"Guide/sample_tests/#samples-index","text":"Rapise includes several sample tests that you are free to read, modify, copy and use. You can open the tests from the Start Page . Sample tests are located in: RapiseDataDirectory\\Samples Unless otherwise specified, the RapiseDataDirectory will be: C:\\Users\\Public\\Documents\\Rapise The sample tests are described below.","title":"Samples Index"},{"location":"Guide/sample_tests/#activex","text":"These samples demonstrate the testing of Microsoft ActiveX / COM controls used in Visual Basic applications including the MSComCtl library. The samples include the Microsoft FlexGrid Control , MS Common Toolbar Control , Microsoft Tabbed Dialog Control , TabStrip , and Microsoft Windows Common Controls 6.0 [MSCOMCTL.OCX].","title":"ActiveX"},{"location":"Guide/sample_tests/#analogrecorder","text":"This sample demonstrates Analog Recording .","title":"AnalogRecorder"},{"location":"Guide/sample_tests/#crossbrowser","text":"Simple web test you can run on any browser .","title":"CrossBrowser"},{"location":"Guide/sample_tests/#dynamics-ax","text":"This sample demonstrates using Rapise to test an installation of Microsoft Dynamics AX 2012 to perform some basic ERP functions.","title":"Dynamics AX"},{"location":"Guide/sample_tests/#dynamics-crm","text":"This sample demonstrates using Rapise to test an installation of Microsoft Dynamics CRM to perform some basic contact management functions.","title":"Dynamics CRM"},{"location":"Guide/sample_tests/#farpoint","text":"This sample script demonstrates using the FarPoint library to test the FarPoint SpreadSheet Control.","title":"FarPoint"},{"location":"Guide/sample_tests/#java","text":"This sample tests a Java AWT/SWING application. This sample demonstrates the capabilities of the Java library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.","title":"Java"},{"location":"Guide/sample_tests/#java-swt","text":"This sample tests a Java SWT/RCP application. This sample demonstrates the capabilities of the SWT and UIAutomation libraries. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.","title":"Java SWT"},{"location":"Guide/sample_tests/#jquery-ui","text":"This sample illustrates using the jQuery HTML DOM extension library that allows you to record/playback test scripts against web applications using widgets from the jQuery Javascript library framework.","title":"jQuery-UI"},{"location":"Guide/sample_tests/#library-information-system","text":"","title":"Library Information System"},{"location":"Guide/sample_tests/#createnewbook-editexistingbook-createnewauthor-editexistingauthor","text":"These tests can be used to test the sample library information system web application hosted at http://www.libraryinformationsystem.org . This is the same sample application used by SpiraTest and illustrates how you can use SpiraTest to manage and execute automated Rapise tests. A copy of these tests is also available in new installations of SpiraTest v3.2+. To see these tests on the Start Page press the Fetch button at the top of the samples list.","title":"CreateNewBook, EditExistingBook, CreateNewAuthor, EditExistingAuthor"},{"location":"Guide/sample_tests/#managed","text":"This sample tests a .NET 2.0 application. This sample demonstrates the capabilities of the Managed library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, grid, listbox, listview, menu, etc.","title":"Managed"},{"location":"Guide/sample_tests/#qtframework","text":"TThis sample tests a sample QT Framework cross-platform application. This sample demonstrates the capabilities of the QtFramework library . The application under test contains various standard Qt widgets, such as: button, edit, tree, combo box, etc.","title":"QtFramework"},{"location":"Guide/sample_tests/#silverlight","text":"This sample tests a Silverlight web application. This sample demonstrates the capabilities of the UIAutomation library . The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.","title":"Silverlight"},{"location":"Guide/sample_tests/#simulatedobject","text":"This sample opens MS Paint and draws on its canvas. It uses Simulated Objects and several related methods: DoMouseMove (X,Y), DoLButtonDown (), DoLButtonUp (), and DoSendKeys (text).","title":"SimulatedObject"},{"location":"Guide/sample_tests/#sampleatm","text":"This sample tests an MFC application. You will also learn how to organize your test script in modular form, how to launch the AUT from your test script and how to execute various actions on GUI controls.","title":"SampleATM"},{"location":"Guide/sample_tests/#usingdatabase","text":"This example shows how you can use a relational (SQL) database to create Data-Driven tests. This script reads test case data from a spreadsheet ADO datasource to test Calculator .","title":"UsingDatabase"},{"location":"Guide/sample_tests/#usingdllhandlermanaged","text":"This sample shows how to unit test managed DLLs . You'll see how to use methods CreateClassInstance () and InvokeMember ().","title":"UsingDLLHandlerManaged"},{"location":"Guide/sample_tests/#usingdllhandlerunmanaged","text":"This sample shows how to unit test unmanaged DLL code . You'll learn how to register ( UserWrap.Register ) and execute ( UserWrap.ShellExecute ) a function.","title":"UsingDLLHandlerUnManaged"},{"location":"Guide/sample_tests/#usingimagecheckpoint","text":"This example shows how to create image checkpoints .","title":"UsingImageCheckPoint"},{"location":"Guide/sample_tests/#usinginclude","text":"This sample demonstrates two ways to include external files/functions: eval(File.Include(...)) : include a file with utility functions. SeSRunJSScript(...) : include and execute external function with its own object map.","title":"UsingInclude"},{"location":"Guide/sample_tests/#usingmsaccess-usingmsexcel-usingmsword","text":"These samples demonstrate how you can work with Microsoft Word , Excel , and Access from scripts. You'll learn how to test applications that expose a COM interface .","title":"UsingMSAccess, UsingMSExcel, UsingMSWord"},{"location":"Guide/sample_tests/#usingmobile","text":"These samples demonstrate how to do the testing of mobile devices running either Apple iOS or Android .","title":"UsingMobile"},{"location":"Guide/sample_tests/#usingregistry","text":"This sample demonstrates usage of the Windows registry. The registry is queried to determine the OS (XP/2003/Vista, etc) and owner.","title":"UsingRegistry"},{"location":"Guide/sample_tests/#usingreporting","text":"This sample illustrates various reporting features: Regular reporting ( Tester.Assert , Tester.Message ) Custom attributes ( Tester.SetReportAttribute , Tester.ResetReportAttribute ) Stacked attributes ( Tester.PushReportAttribute , Tester.PopReportAttribute ) Nested Tests ( Tester.BeginTest , Tester.EndTest ) Inserting Links, Text and Images into the report (tags parameter, SeSReportText , SeSReportLink , SeSReportImage )","title":"UsingReporting"},{"location":"Guide/sample_tests/#usingselenium","text":"This sample how you can use Rapise to write Selenium WebDriver based web application tests using the raw Selenium WebDriver API.","title":"UsingSelenium"},{"location":"Guide/sample_tests/#usingspreadsheet","text":"This example shows how you can use Excel spreadsheets to create Data-Driven tests. This script reads test case data from an XLS spreadsheet to test Calculator .","title":"UsingSpreadSheet"},{"location":"Guide/sample_tests/#usingxml","text":"This sample demonstrates how to read, modify and write XML files.","title":"UsingXML"},{"location":"Guide/sample_tests/#webservicesrest","text":"This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an HTTP RESTful web service .","title":"WebServicesREST"},{"location":"Guide/sample_tests/#webservicessoap","text":"This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an SOAP web service .","title":"WebServicesSOAP"},{"location":"Guide/scenarios/","text":"Scenarios \u00b6 Purpose \u00b6 Scenarios are a way to create reusable building blocks that can be incorporated into your test scripts. These scenarios can be either included as part of a purely automated test script, or they can be included into a predominantly manual test script . Creating Scenarios \u00b6 Let's say for example that you have the following Rapise test that was recorded from our sample library information web application: function Test () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( g_book_name ); //Select Author: SeS ( 'Author_' ). DoSelect ( g_book_author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( g_book_genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } If we want to break up this monolithic test into individual functions (called scenarios), simply highlight the test you want to extract (for example the Login steps): Then right-click on the section and choose the option to Extract User Scenario : Now in the dialog box that appears, give the scenario a name (e.g. Login): This will extract the highlighted section into its own scenario. In Main.js we get function Test () { //Call scenario Login Login (); //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( g_book_name ); //Select Author: SeS ( 'Author_' ). DoSelect ( g_book_author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( g_book_genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } In User.js we get /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); } Usage in Automated Tests \u00b6 When you create a new test in Rapise it will contain a Main.js file that contains the main test code and a User .js file that contains any user-defined functions (called Scenarios). For example in the following test: function Test () { Login (); CreateBook ( g_book_name , g_book_author , g_book_genre ); Logout (); } The test function calls three scenarios that comprise the main test. The scenarios themselves are JavaScript functions: /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); } /** @scenario Logout */ function Logout () { //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } /** @scenario CreateBook */ function CreateBook ( name , author , genre ) { //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( name ); //Select Author: SeS ( 'Author_' ). DoSelect ( author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Verify that the Book is added to the grid //We need to xpath query the grid to see if any //added rows match the item added var tr = FindRowByName ( name ); Tester . Assert ( 'Book was added successfully [TS:5]' , tr . length != 0 ); } If you go to the Object Tree you will see these user functions/scenarios displayed: You can then drag and drop those into the test script editor to include in the main test script. Usage in Manual Tests \u00b6 When you create a new test in Rapise it will contain a Main.js file that contains the main test code and a User.js file that contains any user-defined functions (called Scenarios). For example you may have the following scenario defined in the User.js file: /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); } You can now include that in a manual test step , by simply making the test step description start with an \"@\" symbol to denote that it is a scenario: @ Login (); Then when the manual test is executed, that one step will be passed to the scripting engine for automated execution. Example \u00b6 If you open the CreateNewBook sample (located in C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\CreateNewBook ) you will see a test that has multiple scenarios. See Also \u00b6 Semi-Manual Testing Object Tree","title":"Scenarios"},{"location":"Guide/scenarios/#scenarios","text":"","title":"Scenarios"},{"location":"Guide/scenarios/#purpose","text":"Scenarios are a way to create reusable building blocks that can be incorporated into your test scripts. These scenarios can be either included as part of a purely automated test script, or they can be included into a predominantly manual test script .","title":"Purpose"},{"location":"Guide/scenarios/#creating-scenarios","text":"Let's say for example that you have the following Rapise test that was recorded from our sample library information web application: function Test () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( g_book_name ); //Select Author: SeS ( 'Author_' ). DoSelect ( g_book_author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( g_book_genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } If we want to break up this monolithic test into individual functions (called scenarios), simply highlight the test you want to extract (for example the Login steps): Then right-click on the section and choose the option to Extract User Scenario : Now in the dialog box that appears, give the scenario a name (e.g. Login): This will extract the highlighted section into its own scenario. In Main.js we get function Test () { //Call scenario Login Login (); //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( g_book_name ); //Select Author: SeS ( 'Author_' ). DoSelect ( g_book_author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( g_book_genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } In User.js we get /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); }","title":"Creating Scenarios"},{"location":"Guide/scenarios/#usage-in-automated-tests","text":"When you create a new test in Rapise it will contain a Main.js file that contains the main test code and a User .js file that contains any user-defined functions (called Scenarios). For example in the following test: function Test () { Login (); CreateBook ( g_book_name , g_book_author , g_book_genre ); Logout (); } The test function calls three scenarios that comprise the main test. The scenarios themselves are JavaScript functions: /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); } /** @scenario Logout */ function Logout () { //Click on Log Out SeS ( 'Log_Out' ). DoClick (); } /** @scenario CreateBook */ function CreateBook ( name , author , genre ) { //Click on Book Management SeS ( 'Book_Management' ). DoClick (); //Click on (Create new book) SeS ( '_Create_new_book__' ). DoClick (); //Set Name: SeS ( 'Name_' ). DoSetText ( name ); //Select Author: SeS ( 'Author_' ). DoSelect ( author ); //Select Genre: SeS ( 'Genre_' ). DoSelect ( genre ); //Click on ctl00$MainContent$btnSubmit SeS ( 'ctl00$MainContent$btnSubmit' ). DoClick (); //Verify that the Book is added to the grid //We need to xpath query the grid to see if any //added rows match the item added var tr = FindRowByName ( name ); Tester . Assert ( 'Book was added successfully [TS:5]' , tr . length != 0 ); } If you go to the Object Tree you will see these user functions/scenarios displayed: You can then drag and drop those into the test script editor to include in the main test script.","title":"Usage in Automated Tests"},{"location":"Guide/scenarios/#usage-in-manual-tests","text":"When you create a new test in Rapise it will contain a Main.js file that contains the main test code and a User.js file that contains any user-defined functions (called Scenarios). For example you may have the following scenario defined in the User.js file: /** @scenario Login */ function Login () { //Click on Log In SeS ( 'Log_In' ). DoClick (); //Set Text librarian in Username: SeS ( 'Username_' ). DoSetText ( \"librarian\" ); //Set Text librarian in Password: SeS ( 'Password_' ). DoSetText ( \"librarian\" ); //Click on ctl00$MainContent$LoginUser$LoginButton SeS ( 'ctl00$MainContent$LoginUser$Logi' ). DoClick (); } You can now include that in a manual test step , by simply making the test step description start with an \"@\" symbol to denote that it is a scenario: @ Login (); Then when the manual test is executed, that one step will be passed to the scripting engine for automated execution.","title":"Usage in Manual Tests"},{"location":"Guide/scenarios/#example","text":"If you open the CreateNewBook sample (located in C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\CreateNewBook ) you will see a test that has multiple scenarios.","title":"Example"},{"location":"Guide/scenarios/#see-also","text":"Semi-Manual Testing Object Tree","title":"See Also"},{"location":"Guide/screenshots/","text":"Taking Screenshots \u00b6 Taking screenshots during test playback may serve various purposes: Provide clues for test failure analysis Document test execution. It may be required by a company policy. Screenshots can be used to generate test documentation and even user's guides. Rapise can make screenshots automatically after every action or on-demand at specific points of test execution. Automatic Screenshots \u00b6 To enable automatic screenshots after every action use Screen Capture test settings. Note: Automatic screenshots are supported for Desktop and Web applications and not supported for Mobile. Recording \u00b6 If before recording session you will set in Screen Capture Capture Cursor = True Capture Recording = True Widget Only = True then after recording Rapise will generate the screen flow HTML document with content like Note: We recorded Login/Logout scenario on Library Information System sample application, see web testing tutorial for more details. Playback \u00b6 If before execution you will set in Screen Capture Capture Cursor = True Capture Execution = True Widget Only = True then after playback Rapise will generate the screen flow document Link to the document is also available in the report Content of the document looks like Note: If an object is not available on screen after action on it then Rapise takes screenshot of the whole desktop window. You can see it in step #5 above, login button disappeared after clicking it. Note : Also Rapise always takes additional screenshot of the whole desktop window at the end of test execution. Even if the test was terminated because of a failed assertion. See step #7 below. Embed Screenshots Into Report \u00b6 Execution screenshots described above are stored in the local file system and if a test report is uploaded to SpiraTest then these screenshots are not uploaded. To embed screenshots into execution reports and make them available in SpiraTest , set Include in Report = True in Screen Capture settings. In Rapise screenshots are embedded before each action Screenshots in SpiraTest Suppressing Screenshots \u00b6 Sometimes it makes sense to temporarily disable screenshot capturing. Learn how to do this in KB291 How to Enable/Disable screenshots during script execution On-Demand Screenshots \u00b6 It is also possible to take screenshots at specific points of test execution. The way of doing it depends on the test target. Desktop \u00b6 This method works both for desktop applications and web applications running on the same machine as Rapise. Use global Tester object and it's action to take screenshot of an object, specific window or whole desktop. Tester.CaptureObjectImage Tester.CaptureWindowImage Tester.CaptureDesktopImage Web \u00b6 This method works well if you plan to run a web test on remote machines via Selenium WebDriver . Use global Navigator object and it's Navigator.DoScreenshot action. Mobile \u00b6 To make a screenshot on mobile target use Android.DoScreenshot iOS.DoScreenshot See Also \u00b6 KB291 How to Enable/Disable screenshots during script execution","title":"Taking Screenshots"},{"location":"Guide/screenshots/#taking-screenshots","text":"Taking screenshots during test playback may serve various purposes: Provide clues for test failure analysis Document test execution. It may be required by a company policy. Screenshots can be used to generate test documentation and even user's guides. Rapise can make screenshots automatically after every action or on-demand at specific points of test execution.","title":"Taking Screenshots"},{"location":"Guide/screenshots/#automatic-screenshots","text":"To enable automatic screenshots after every action use Screen Capture test settings. Note: Automatic screenshots are supported for Desktop and Web applications and not supported for Mobile.","title":"Automatic Screenshots"},{"location":"Guide/screenshots/#recording","text":"If before recording session you will set in Screen Capture Capture Cursor = True Capture Recording = True Widget Only = True then after recording Rapise will generate the screen flow HTML document with content like Note: We recorded Login/Logout scenario on Library Information System sample application, see web testing tutorial for more details.","title":"Recording"},{"location":"Guide/screenshots/#playback","text":"If before execution you will set in Screen Capture Capture Cursor = True Capture Execution = True Widget Only = True then after playback Rapise will generate the screen flow document Link to the document is also available in the report Content of the document looks like Note: If an object is not available on screen after action on it then Rapise takes screenshot of the whole desktop window. You can see it in step #5 above, login button disappeared after clicking it. Note : Also Rapise always takes additional screenshot of the whole desktop window at the end of test execution. Even if the test was terminated because of a failed assertion. See step #7 below.","title":"Playback"},{"location":"Guide/screenshots/#embed-screenshots-into-report","text":"Execution screenshots described above are stored in the local file system and if a test report is uploaded to SpiraTest then these screenshots are not uploaded. To embed screenshots into execution reports and make them available in SpiraTest , set Include in Report = True in Screen Capture settings. In Rapise screenshots are embedded before each action Screenshots in SpiraTest","title":"Embed Screenshots Into Report"},{"location":"Guide/screenshots/#suppressing-screenshots","text":"Sometimes it makes sense to temporarily disable screenshot capturing. Learn how to do this in KB291 How to Enable/Disable screenshots during script execution","title":"Suppressing Screenshots"},{"location":"Guide/screenshots/#on-demand-screenshots","text":"It is also possible to take screenshots at specific points of test execution. The way of doing it depends on the test target.","title":"On-Demand Screenshots"},{"location":"Guide/screenshots/#desktop","text":"This method works both for desktop applications and web applications running on the same machine as Rapise. Use global Tester object and it's action to take screenshot of an object, specific window or whole desktop. Tester.CaptureObjectImage Tester.CaptureWindowImage Tester.CaptureDesktopImage","title":"Desktop"},{"location":"Guide/screenshots/#web","text":"This method works well if you plan to run a web test on remote machines via Selenium WebDriver . Use global Navigator object and it's Navigator.DoScreenshot action.","title":"Web"},{"location":"Guide/screenshots/#mobile","text":"To make a screenshot on mobile target use Android.DoScreenshot iOS.DoScreenshot","title":"Mobile"},{"location":"Guide/screenshots/#see-also","text":"KB291 How to Enable/Disable screenshots during script execution","title":"See Also"},{"location":"Guide/scripting/","text":"Scripting \u00b6 Purpose \u00b6 There are three reasons to script with Rapise: To modify a recorded test to increase coverage, add assert statements , or make the test data-driven . To extend recording functionality by defining your own objects, actions, and libraries. To customize the Rapise Engine . Usage \u00b6 Rapise scripts are written in JavaScript (Microsoft JScript). You can run and debug your script using the full featured Internal Debugger . Rapise includes a testing API, with methods for manipulating images, spreadsheets, common GUI widgets, and more. Rapise also uses NodeJS to aid in providing hyperlinks to errors in your test. See Also \u00b6 JScript Language Reference","title":"Scripting"},{"location":"Guide/scripting/#scripting","text":"","title":"Scripting"},{"location":"Guide/scripting/#purpose","text":"There are three reasons to script with Rapise: To modify a recorded test to increase coverage, add assert statements , or make the test data-driven . To extend recording functionality by defining your own objects, actions, and libraries. To customize the Rapise Engine .","title":"Purpose"},{"location":"Guide/scripting/#usage","text":"Rapise scripts are written in JavaScript (Microsoft JScript). You can run and debug your script using the full featured Internal Debugger . Rapise includes a testing API, with methods for manipulating images, spreadsheets, common GUI widgets, and more. Rapise also uses NodeJS to aid in providing hyperlinks to errors in your test.","title":"Usage"},{"location":"Guide/scripting/#see-also","text":"JScript Language Reference","title":"See Also"},{"location":"Guide/scripting_choice_dialog/","text":"Scripting Choice Dialog \u00b6 Purpose \u00b6 You use the Choose Scripting Language dialog to choose between writing your tests in the Rapise Visual Language (RVL) scriptless table language, or in the JavaScript script editor . How to Open \u00b6 This dialog is automatically opened after you click Create in the Create New Test dialog. Misc \u00b6 If you click the \"Don't Ask\" checkbox, Rapise will default to your last selection automatically when you create a test. You can change this options in the main Global Settings dialog .","title":"Scripting Choice Dialog"},{"location":"Guide/scripting_choice_dialog/#scripting-choice-dialog","text":"","title":"Scripting Choice Dialog"},{"location":"Guide/scripting_choice_dialog/#purpose","text":"You use the Choose Scripting Language dialog to choose between writing your tests in the Rapise Visual Language (RVL) scriptless table language, or in the JavaScript script editor .","title":"Purpose"},{"location":"Guide/scripting_choice_dialog/#how-to-open","text":"This dialog is automatically opened after you click Create in the Create New Test dialog.","title":"How to Open"},{"location":"Guide/scripting_choice_dialog/#misc","text":"If you click the \"Don't Ask\" checkbox, Rapise will default to your last selection automatically when you create a test. You can change this options in the main Global Settings dialog .","title":"Misc"},{"location":"Guide/select_an_application_to_record_dialog/","text":"Select an Application to Record... Dialog \u00b6 Purpose \u00b6 The Select an Application to Record ... dialog appears before Recording when testing desktop applications . It queries the user for which program to record, as well as what Recording Library to use. If you are recording the same application for the second time then the dialog is not shown. The recording proceeds to last used application if it is still available on the screen. How To Open \u00b6 To open the dialog, press the Record button on the toolbar. Available Applications \u00b6 The Available Applications table lists all of the processes running at the time you open the the dialog . If the process you would like to record is already open, you can select if from the table. If you do not see the application to record in the list you may Click Refresh button at the bottom of the dialog. It should help if you launched the application after opening the dialog. Use Finder Tool to manually point to the application window. It should help if the window is not shown in the Windows taskbar. Libraries \u00b6 The Library table lists the available Recording Libraries. Select the one appropriate to the process/program you will record. If you select Auto , Rapise will attempt to choose the correct recording library for you. See the Recording Library section for more information. Dialog Buttons \u00b6 The Cancel button closes the dialog. Refresh button: Press to refresh the Available Applications table. After refreshing, you will see processes that began after the dialog was opened. Select button: To record a process from the Available Applications table, select the process and then press the Select button. Run Application Tab \u00b6 Full path to application : If the program you would like to record is not already open, you can specify its path here. If the program is already running, you can select it from the Available Applications table. Browse button: Browse for an application to open and record. Use working directory : To set a specific working directory when launching the application, check the box and enter in a value for the working directory . Run button: To record a program that is not currently open, fill in the Path text-box and press the Run button. The Cancel button closes the dialog.","title":"Select an Application to Record... Dialog"},{"location":"Guide/select_an_application_to_record_dialog/#select-an-application-to-record-dialog","text":"","title":"Select an Application to Record... Dialog"},{"location":"Guide/select_an_application_to_record_dialog/#purpose","text":"The Select an Application to Record ... dialog appears before Recording when testing desktop applications . It queries the user for which program to record, as well as what Recording Library to use. If you are recording the same application for the second time then the dialog is not shown. The recording proceeds to last used application if it is still available on the screen.","title":"Purpose"},{"location":"Guide/select_an_application_to_record_dialog/#how-to-open","text":"To open the dialog, press the Record button on the toolbar.","title":"How To Open"},{"location":"Guide/select_an_application_to_record_dialog/#available-applications","text":"The Available Applications table lists all of the processes running at the time you open the the dialog . If the process you would like to record is already open, you can select if from the table. If you do not see the application to record in the list you may Click Refresh button at the bottom of the dialog. It should help if you launched the application after opening the dialog. Use Finder Tool to manually point to the application window. It should help if the window is not shown in the Windows taskbar.","title":"Available Applications"},{"location":"Guide/select_an_application_to_record_dialog/#libraries","text":"The Library table lists the available Recording Libraries. Select the one appropriate to the process/program you will record. If you select Auto , Rapise will attempt to choose the correct recording library for you. See the Recording Library section for more information.","title":"Libraries"},{"location":"Guide/select_an_application_to_record_dialog/#dialog-buttons","text":"The Cancel button closes the dialog. Refresh button: Press to refresh the Available Applications table. After refreshing, you will see processes that began after the dialog was opened. Select button: To record a process from the Available Applications table, select the process and then press the Select button.","title":"Dialog Buttons"},{"location":"Guide/select_an_application_to_record_dialog/#run-application-tab","text":"Full path to application : If the program you would like to record is not already open, you can specify its path here. If the program is already running, you can select it from the Available Applications table. Browse button: Browse for an application to open and record. Use working directory : To set a specific working directory when launching the application, check the box and enter in a value for the working directory . Run button: To record a program that is not currently open, fill in the Path text-box and press the Run button. The Cancel button closes the dialog.","title":"Run Application Tab"},{"location":"Guide/selenium_reconnect/","text":"Reconnect WebDriver Session \u00b6 Since version 6.2 Rapise is able to reconnect WebDriver sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the browser and perform manual steps to reach desired application state. This feature is especially handy when you use it with mobile browsers . For desktop browsers it is easier and more effective to use native Rapise connectors . Maintenance Scenario \u00b6 You run a test and it fails at some point because some object is not found on screen. You use the Web Spy to reconnect to the application and analyze the cause of the failure. You use the Web Spy to re-learn the object. You run the test exactly from the step where it stopped working to make sure the test is fixed. Reusing Session to Run Multiple Tests \u00b6 Since application launch is time consuming operation in mobile testing you may run multiple tests on the same browser instance. You run a test and it leaves the browser running. You run next test and so on. This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially. How it Works \u00b6 To leave application running and save session information use WebDriver.SaveSession call in TestFinish block of your test. function TestFinish () { WebDriver . SaveSession (); } To reconnect to the running application use WebDriver.ReconnectSession call in TestPrepare block of your test. function TestPrepare () { WebDriver . ReconnectSession (); } If you want Rapise to launch a new browser session if there is no saved one pass true to WebDriver.ReconnectSession call. function TestPrepare () { WebDriver . ReconnectSession ( true ); } Note: TestPrepare block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL ( Play Selection, Play From Here, etc. ). See Also \u00b6 Selenium WebDriver , for an overview of Selenium based testing in Rapise. Web Spy , for information on how to inspect state of an application loaded into a browser.","title":"Reconnect WebDriver Session"},{"location":"Guide/selenium_reconnect/#reconnect-webdriver-session","text":"Since version 6.2 Rapise is able to reconnect WebDriver sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the browser and perform manual steps to reach desired application state. This feature is especially handy when you use it with mobile browsers . For desktop browsers it is easier and more effective to use native Rapise connectors .","title":"Reconnect WebDriver Session"},{"location":"Guide/selenium_reconnect/#maintenance-scenario","text":"You run a test and it fails at some point because some object is not found on screen. You use the Web Spy to reconnect to the application and analyze the cause of the failure. You use the Web Spy to re-learn the object. You run the test exactly from the step where it stopped working to make sure the test is fixed.","title":"Maintenance Scenario"},{"location":"Guide/selenium_reconnect/#reusing-session-to-run-multiple-tests","text":"Since application launch is time consuming operation in mobile testing you may run multiple tests on the same browser instance. You run a test and it leaves the browser running. You run next test and so on. This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially.","title":"Reusing Session to Run Multiple Tests"},{"location":"Guide/selenium_reconnect/#how-it-works","text":"To leave application running and save session information use WebDriver.SaveSession call in TestFinish block of your test. function TestFinish () { WebDriver . SaveSession (); } To reconnect to the running application use WebDriver.ReconnectSession call in TestPrepare block of your test. function TestPrepare () { WebDriver . ReconnectSession (); } If you want Rapise to launch a new browser session if there is no saved one pass true to WebDriver.ReconnectSession call. function TestPrepare () { WebDriver . ReconnectSession ( true ); } Note: TestPrepare block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL ( Play Selection, Play From Here, etc. ).","title":"How it Works"},{"location":"Guide/selenium_reconnect/#see-also","text":"Selenium WebDriver , for an overview of Selenium based testing in Rapise. Web Spy , for information on how to inspect state of an application loaded into a browser.","title":"See Also"},{"location":"Guide/selenium_settings_dialog/","text":"Selenium Settings Dialog \u00b6 Selenium Profiles \u00b6 Rapise can playback web tests on Selenium nodes. Configure each Selenium node you need for testing in a separate profile using Selenium Settings Dialog. This dialog box displays the list of Selenium Profiles and lets you create a new profile, modify a profile or make a new profile based on an existing one. How to Open \u00b6 You can open this dialog box from the Rapise Settings > Selenium menu. Menu Options \u00b6 This dialog box has the following menu options: Select Profile - This dropdown list lets you select a different Selenium profile to be displayed in the dialog. Save - This button will save the changes to the current Selenium profile. Test - This button will test the Connection (URL) from Rapise to Selenium WebDriver (which is used to connect to the web browsers) and the connection from Selenium to the web browser. Duplicate - This button will create a new Selenium profile based on the currently viewed one. Create - This button will create a new empty Selenium profile that you can edit. Rename - This button will change the name of the current Selenium profile being edited. Delete - This button will delete the currently displayed Selenium profile. There is no undo, so be careful! Connection \u00b6 This section lets you enter the URI used to connect to the Selenium WebDriver server which hosts the web browsers being tested. It is typically of the form: http://server:4444/wd/hub Where the port number used by Selenium is 4444 (default) and the /wd/hub suffix is added. If you are using web browsers on the local machine (that is running Rapise) you don't need to enter in a URI and can leave the entire field blank. Details \u00b6 This section has various settings, some of which are used by all web browsers, some are browser specific: Primary Capabilities \u00b6 For the list of standard capabilities please refer to Selenium repository . BrowserStack Settings \u00b6 In addition, there are some settings, unique to running Selenium WebDriver tests through the BrowserStack cloud platform: BrowserStack browserstack.key - This needs to be populated with your Browserstack cloud access key. browserstack.user - This needs to be populated with your Browserstack username. device - Specifies a particular mobile device for the test environment (mobile web only). os_version - Use this capability to specify the OS version of the device. realMobile - Use this flag to test mobile websites on a physical mobile device.","title":"Selenium Settings Dialog"},{"location":"Guide/selenium_settings_dialog/#selenium-settings-dialog","text":"","title":"Selenium Settings Dialog"},{"location":"Guide/selenium_settings_dialog/#selenium-profiles","text":"Rapise can playback web tests on Selenium nodes. Configure each Selenium node you need for testing in a separate profile using Selenium Settings Dialog. This dialog box displays the list of Selenium Profiles and lets you create a new profile, modify a profile or make a new profile based on an existing one.","title":"Selenium Profiles"},{"location":"Guide/selenium_settings_dialog/#how-to-open","text":"You can open this dialog box from the Rapise Settings > Selenium menu.","title":"How to Open"},{"location":"Guide/selenium_settings_dialog/#menu-options","text":"This dialog box has the following menu options: Select Profile - This dropdown list lets you select a different Selenium profile to be displayed in the dialog. Save - This button will save the changes to the current Selenium profile. Test - This button will test the Connection (URL) from Rapise to Selenium WebDriver (which is used to connect to the web browsers) and the connection from Selenium to the web browser. Duplicate - This button will create a new Selenium profile based on the currently viewed one. Create - This button will create a new empty Selenium profile that you can edit. Rename - This button will change the name of the current Selenium profile being edited. Delete - This button will delete the currently displayed Selenium profile. There is no undo, so be careful!","title":"Menu Options"},{"location":"Guide/selenium_settings_dialog/#connection","text":"This section lets you enter the URI used to connect to the Selenium WebDriver server which hosts the web browsers being tested. It is typically of the form: http://server:4444/wd/hub Where the port number used by Selenium is 4444 (default) and the /wd/hub suffix is added. If you are using web browsers on the local machine (that is running Rapise) you don't need to enter in a URI and can leave the entire field blank.","title":"Connection"},{"location":"Guide/selenium_settings_dialog/#details","text":"This section has various settings, some of which are used by all web browsers, some are browser specific:","title":"Details"},{"location":"Guide/selenium_settings_dialog/#primary-capabilities","text":"For the list of standard capabilities please refer to Selenium repository .","title":"Primary Capabilities"},{"location":"Guide/selenium_settings_dialog/#browserstack-settings","text":"In addition, there are some settings, unique to running Selenium WebDriver tests through the BrowserStack cloud platform: BrowserStack browserstack.key - This needs to be populated with your Browserstack cloud access key. browserstack.user - This needs to be populated with your Browserstack username. device - Specifies a particular mobile device for the test environment (mobile web only). os_version - Use this capability to specify the OS version of the device. realMobile - Use this flag to test mobile websites on a physical mobile device.","title":"BrowserStack Settings"},{"location":"Guide/selenium_webdriver/","text":"Selenium WebDriver \u00b6 When developing and testing a web application you naturally need to test it with different web browsers and multiple version of each web browser. With Rapise natively you can record a test script using one browser and then play it back using Mozilla Firefox, Google Chrome or Microsoft Internet Explorer . In addition, you can use Rapise with the open-source Selenium WebDriver framework to play back the same tests against other browsers such as Apple Safari and Opera (as well as IE, Firefox and Chrome). You can also use Rapise to write native Selenium code for cases where you want to use existing Selenium WebDriver logic. Playing & Recording Tests \u00b6 Once you have installed and configured the integration between Rapise and Selenium , we shall discuss how to use Selenium with Rapise to record and play tests. Now one of the important points is that there are some limitations as to the operations that can be performed using Selenium-based web browsers as opposed to the native browsers supported by Rapise: Feature Rapise Native Browser Selenium Browser Learn HTML Objects Yes (Only in Web Spy) Record HTML Events Yes No Playback HTML Events Yes Yes Web Spy Yes Yes Learn Java Applets Yes No Manual Testing Yes No So if you are planning on using Rapise to record a test script by clicking HTML objects and having Rapise create the script using the learned objects and adding the events (DoClick, SetText, etc.) then you will need to use one of the native browsers (Chrome, IE, Firefox) to create the test script. You can then playback the same test in either the native or Selenium browsers. If you are planning on using Rapise to learn objects using the Web Spy, and then create the test script from those objects by either dragging the object methods and properties from the Object Tree into the test script or just using Intellisense to type the methods (DoClick, SetText, etc.) then you can use either a native or Selenium web browser just as easily. For most users, the primary reason for using the Selenium web browsers will be to playback their tests on a greater number of browsers or to leverage existing Selenium WebDriver scripts created outside of Rapise . Managing the Selenium Profiles \u00b6 Rapise allows you to maintain different profiles for your different installed Selenium web browsers (both on the same machine as Rapise and also those running on a remote Selenium WebDriver server), To see the different Selenium profiles , in the main menu select Settings > Selenium . It will bring up the Selenium profile manager : By default there is one profile for each of the Selenium WebDriver supported web browsers (Chrome, Firefox, Internet Explorer, Opera, Safari). However you can clone and change the profiles if you want to have different versions of the browsers (e.g. a local instance of Firefox and one running on a remote Selenium server). Most users will only need to change the Uri field of the Safari web browser since the defaults are typically sufficient for most testing needs. Recording using Selenium \u00b6 To start recording a web testing using a Selenium WebDriver based browser, make sure you change the test\u2019s web browser parameter to one of the Selenium profiles: When you click the Record button on the main toolbar you will see the following Recording Activity Dialog : You will notice that the Verify and Learn options are not available. If you want to use these tools you will need to use a native browser (non-Selenium) instead. When using a Selenium profile for recording, you will need to use the Spy (Ctrl+5) tool to do the learning of objects on the web page. This brings up the Web Spy : When using the Web Spy with a Selenium profile you will notice that the web browser icon / name shows \u201cSelenium\u201d rather than the browser name and the option to Track an item Ctrl + T is not present. That means you need to select the HTML DOM object in the DOM Tree and learn it from there (rather than clicking on the web page itself which is possible when using a native browser profile). When you choose to Learn an object in the DOM tree it will be displayed in the Recording Activity Dialog as a new Learned Object: Objects Learned using a Selenium profile will be added to the Rapise Object Tree in the usual way and as is typical with Learning , you have the option to specify an Action in the Recording Activity Grid (e.g. change Learn to Click) in which case test script code is also generated. Tip: Due to the inherent limitations in recording using a Selenium browser profile (vs. a native browser profile) most users will record their scripts using a native browser and then use Selenium primarily for debugging using the Web Spy and playback. Playback using Selenium \u00b6 To playback a web test using a Selenium web browser profile, simply choose the appropriate profile in the dropdown located in the top right corner of the main Rapise window: Then click the Play button on the main toolbar. The test will now start execution . Unlike recording there is nothing different in the way Rapise handles the playback of a Selenium test. The only difference will be that if the test uses non-HTML technologies such as Java, etc. those parts of the test will fail. See Also \u00b6 Setting Up Selenium Using Native Selenium Code Reconnect WebDriver Session","title":"Selenium WebDriver"},{"location":"Guide/selenium_webdriver/#selenium-webdriver","text":"When developing and testing a web application you naturally need to test it with different web browsers and multiple version of each web browser. With Rapise natively you can record a test script using one browser and then play it back using Mozilla Firefox, Google Chrome or Microsoft Internet Explorer . In addition, you can use Rapise with the open-source Selenium WebDriver framework to play back the same tests against other browsers such as Apple Safari and Opera (as well as IE, Firefox and Chrome). You can also use Rapise to write native Selenium code for cases where you want to use existing Selenium WebDriver logic.","title":"Selenium WebDriver"},{"location":"Guide/selenium_webdriver/#playing-recording-tests","text":"Once you have installed and configured the integration between Rapise and Selenium , we shall discuss how to use Selenium with Rapise to record and play tests. Now one of the important points is that there are some limitations as to the operations that can be performed using Selenium-based web browsers as opposed to the native browsers supported by Rapise: Feature Rapise Native Browser Selenium Browser Learn HTML Objects Yes (Only in Web Spy) Record HTML Events Yes No Playback HTML Events Yes Yes Web Spy Yes Yes Learn Java Applets Yes No Manual Testing Yes No So if you are planning on using Rapise to record a test script by clicking HTML objects and having Rapise create the script using the learned objects and adding the events (DoClick, SetText, etc.) then you will need to use one of the native browsers (Chrome, IE, Firefox) to create the test script. You can then playback the same test in either the native or Selenium browsers. If you are planning on using Rapise to learn objects using the Web Spy, and then create the test script from those objects by either dragging the object methods and properties from the Object Tree into the test script or just using Intellisense to type the methods (DoClick, SetText, etc.) then you can use either a native or Selenium web browser just as easily. For most users, the primary reason for using the Selenium web browsers will be to playback their tests on a greater number of browsers or to leverage existing Selenium WebDriver scripts created outside of Rapise .","title":"Playing &amp; Recording Tests"},{"location":"Guide/selenium_webdriver/#managing-the-selenium-profiles","text":"Rapise allows you to maintain different profiles for your different installed Selenium web browsers (both on the same machine as Rapise and also those running on a remote Selenium WebDriver server), To see the different Selenium profiles , in the main menu select Settings > Selenium . It will bring up the Selenium profile manager : By default there is one profile for each of the Selenium WebDriver supported web browsers (Chrome, Firefox, Internet Explorer, Opera, Safari). However you can clone and change the profiles if you want to have different versions of the browsers (e.g. a local instance of Firefox and one running on a remote Selenium server). Most users will only need to change the Uri field of the Safari web browser since the defaults are typically sufficient for most testing needs.","title":"Managing the Selenium Profiles"},{"location":"Guide/selenium_webdriver/#recording-using-selenium","text":"To start recording a web testing using a Selenium WebDriver based browser, make sure you change the test\u2019s web browser parameter to one of the Selenium profiles: When you click the Record button on the main toolbar you will see the following Recording Activity Dialog : You will notice that the Verify and Learn options are not available. If you want to use these tools you will need to use a native browser (non-Selenium) instead. When using a Selenium profile for recording, you will need to use the Spy (Ctrl+5) tool to do the learning of objects on the web page. This brings up the Web Spy : When using the Web Spy with a Selenium profile you will notice that the web browser icon / name shows \u201cSelenium\u201d rather than the browser name and the option to Track an item Ctrl + T is not present. That means you need to select the HTML DOM object in the DOM Tree and learn it from there (rather than clicking on the web page itself which is possible when using a native browser profile). When you choose to Learn an object in the DOM tree it will be displayed in the Recording Activity Dialog as a new Learned Object: Objects Learned using a Selenium profile will be added to the Rapise Object Tree in the usual way and as is typical with Learning , you have the option to specify an Action in the Recording Activity Grid (e.g. change Learn to Click) in which case test script code is also generated. Tip: Due to the inherent limitations in recording using a Selenium browser profile (vs. a native browser profile) most users will record their scripts using a native browser and then use Selenium primarily for debugging using the Web Spy and playback.","title":"Recording using Selenium"},{"location":"Guide/selenium_webdriver/#playback-using-selenium","text":"To playback a web test using a Selenium web browser profile, simply choose the appropriate profile in the dropdown located in the top right corner of the main Rapise window: Then click the Play button on the main toolbar. The test will now start execution . Unlike recording there is nothing different in the way Rapise handles the playback of a Selenium test. The only difference will be that if the test uses non-HTML technologies such as Java, etc. those parts of the test will fail.","title":"Playback using Selenium"},{"location":"Guide/selenium_webdriver/#see-also","text":"Setting Up Selenium Using Native Selenium Code Reconnect WebDriver Session","title":"See Also"},{"location":"Guide/semi_manual_testing/","text":"Semi-Manual Testing \u00b6 Purpose \u00b6 This is a useful technique when you want to have a predominantly manual test (executed by a tester) that has some steps that are automated by Rapise. These could be some of the initial setup tasks (e.g. logging in, starting the application) or just tasks that are well suited to automation. Usage \u00b6 Create your manual test either using the recorder or the manual test editor . You can also just open up a test already created in Spira . Next, inside Rapise, create a test scenario (function) that contains the necessary login. In this example we shall simply automate the launching of MS-Paint. Create a function in the User.js file with the following code: function LaunchMsPaint () { Global . DoLaunch ( 'C:\\Windows\\system32\\mspaint.exe' ); } Now go to the Manual Steps section of Rapise by clicking on the Tools > Manual Steps menu. Inside the first test step (for example), change the Description to the following: @ LaunchMsPaint (); //User starts up the MS-Paint Application This will be contained within the actual test step itself: Now, when you execute the test (using the normal Execute button on the main Test toolbar ( not the Execute Manual icon on the Manual Toolbar ) what happens is that Rapise will execute the main Test() function that contains: //########## Script Steps ############## function Test () { Global . DoPlayManual (); } g_load_libraries = [ \"Generic\" ]; this instructs Rapise to use the manual playback system. However when it gets to the first step, it will see the ampersand symbol (@) that denotes that this is actually an automated scenario and then call the following code: //User starts up the MS-Paint Application LaunchMsPaint (); Once the scenario has completed, Rapise will then return back to the manual test playback. See Also \u00b6 Manual Playback Test Scenarios Inflectra Webinar: From Manual to Automated UI Testing With Rapise","title":"Semi-Manual Testing"},{"location":"Guide/semi_manual_testing/#semi-manual-testing","text":"","title":"Semi-Manual Testing"},{"location":"Guide/semi_manual_testing/#purpose","text":"This is a useful technique when you want to have a predominantly manual test (executed by a tester) that has some steps that are automated by Rapise. These could be some of the initial setup tasks (e.g. logging in, starting the application) or just tasks that are well suited to automation.","title":"Purpose"},{"location":"Guide/semi_manual_testing/#usage","text":"Create your manual test either using the recorder or the manual test editor . You can also just open up a test already created in Spira . Next, inside Rapise, create a test scenario (function) that contains the necessary login. In this example we shall simply automate the launching of MS-Paint. Create a function in the User.js file with the following code: function LaunchMsPaint () { Global . DoLaunch ( 'C:\\Windows\\system32\\mspaint.exe' ); } Now go to the Manual Steps section of Rapise by clicking on the Tools > Manual Steps menu. Inside the first test step (for example), change the Description to the following: @ LaunchMsPaint (); //User starts up the MS-Paint Application This will be contained within the actual test step itself: Now, when you execute the test (using the normal Execute button on the main Test toolbar ( not the Execute Manual icon on the Manual Toolbar ) what happens is that Rapise will execute the main Test() function that contains: //########## Script Steps ############## function Test () { Global . DoPlayManual (); } g_load_libraries = [ \"Generic\" ]; this instructs Rapise to use the manual playback system. However when it gets to the first step, it will see the ampersand symbol (@) that denotes that this is actually an automated scenario and then call the following code: //User starts up the MS-Paint Application LaunchMsPaint (); Once the scenario has completed, Rapise will then return back to the manual test playback.","title":"Usage"},{"location":"Guide/semi_manual_testing/#see-also","text":"Manual Playback Test Scenarios Inflectra Webinar: From Manual to Automated UI Testing With Rapise","title":"See Also"},{"location":"Guide/sending_special_keys_to_the_c/","text":"Sending Special Keys to the Current Application \u00b6 Overview \u00b6 You can use the Global.DoSendKeys action to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. Page Down , or CTRL + Key ). This article explains the way to do this. Special Characters \u00b6 To send special characters, you just use the list available in the Windows API SendKeys.Send function: http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.send(v=vs.110).aspx To specify characters that aren't displayed when you press a key, such as ENTER or TAB , and keys that represent actions rather than characters, use the codes in the following table: Key Code BACKSPACE {BACKSPACE}, {BS}, or BREAK {BREAK} CAPS LOCK {CAPSLOCK} DEL or DELETE {DELETE} or DOWN ARROW {DOWN} END {END} ENTER {ENTER} or ~ ESC {ESC} HELP {HELP} HOME {HOME} INS or INSERT {INSERT} or LEFT ARROW {LEFT} NUM LOCK {NUMLOCK} PAGE DOWN {PGDN} PAGE UP {PGUP} PRINT SCREEN {PRTSC} (reserved for future use) RIGHT ARROW {RIGHT} SCROLL LOCK {SCROLLLOCK} TAB {TAB} UP ARROW {UP} F1 {F1} F2 {F2} F3 {F3} F4 {F4} F5 {F5} F6 {F6} F7 {F7} F8 {F8} F9 {F9} F10 {F10} F11 {F11} F12 {F12} F13 {F13} F14 {F14} F15 {F15} F16 {F16} Keypad add {ADD} Keypad subtract {SUBTRACT} Keypad multiply {MULTIPLY} Keypad divide {DIVIDE} The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". SHIFT, CTRL and ALT \u00b6 To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes: Key Code SHIFT + CTRL ^ ALT % Example \u00b6 In this example Rapise sends various key combinations to Windows Notepad. Note: Global.DoSleep is used to slow down test execution and make test steps visible. RVL version JavaScript version // Launch notepad Global . DoLaunch ( \"notepad.exe\" ); // Set focus to notepad ActivateNotepad (); Global . DoSleep ( 1000 ); // Send text to the application Global . DoSendKeys ( \"Hello World!\" ); Global . DoSleep ( 1000 ); // Select all text by passing CTRL+a key combination Global . DoSendKeys ( \"^a\" ); Global . DoSleep ( 1000 ); // Send DELETE key Global . DoSendKeys ( \"{DEL}\" ); Global . DoSleep ( 1000 ); // Send two lines of text Global . DoSendKeys ( \"First line{ENTER}Second line{ENTER}\" ); Global . DoSleep ( 1000 ); // Send a series of characters with SHIFT key pressed Global . DoSendKeys ( \"+(abcdefg)\" ); Global . DoSleep ( 1000 ); // Close notepad Global . DoKillByPid (); To run RVL or JavaScript version of this example place the following function to User.js. function ActivateNotepad () { var wnd = g_util . FindWindow ( \"regex:.*\" , \"Untitled - Notepad\" ); if ( wnd ) { wnd . SetFocus (); } } See Also \u00b6 How-Tos","title":"Sending Special Keys to the Current Application"},{"location":"Guide/sending_special_keys_to_the_c/#sending-special-keys-to-the-current-application","text":"","title":"Sending Special Keys to the Current Application"},{"location":"Guide/sending_special_keys_to_the_c/#overview","text":"You can use the Global.DoSendKeys action to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. Page Down , or CTRL + Key ). This article explains the way to do this.","title":"Overview"},{"location":"Guide/sending_special_keys_to_the_c/#special-characters","text":"To send special characters, you just use the list available in the Windows API SendKeys.Send function: http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.send(v=vs.110).aspx To specify characters that aren't displayed when you press a key, such as ENTER or TAB , and keys that represent actions rather than characters, use the codes in the following table: Key Code BACKSPACE {BACKSPACE}, {BS}, or BREAK {BREAK} CAPS LOCK {CAPSLOCK} DEL or DELETE {DELETE} or DOWN ARROW {DOWN} END {END} ENTER {ENTER} or ~ ESC {ESC} HELP {HELP} HOME {HOME} INS or INSERT {INSERT} or LEFT ARROW {LEFT} NUM LOCK {NUMLOCK} PAGE DOWN {PGDN} PAGE UP {PGUP} PRINT SCREEN {PRTSC} (reserved for future use) RIGHT ARROW {RIGHT} SCROLL LOCK {SCROLLLOCK} TAB {TAB} UP ARROW {UP} F1 {F1} F2 {F2} F3 {F3} F4 {F4} F5 {F5} F6 {F6} F7 {F7} F8 {F8} F9 {F9} F10 {F10} F11 {F11} F12 {F12} F13 {F13} F14 {F14} F15 {F15} F16 {F16} Keypad add {ADD} Keypad subtract {SUBTRACT} Keypad multiply {MULTIPLY} Keypad divide {DIVIDE} The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\".","title":"Special Characters"},{"location":"Guide/sending_special_keys_to_the_c/#shift-ctrl-and-alt","text":"To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes: Key Code SHIFT + CTRL ^ ALT %","title":"SHIFT, CTRL and ALT"},{"location":"Guide/sending_special_keys_to_the_c/#example","text":"In this example Rapise sends various key combinations to Windows Notepad. Note: Global.DoSleep is used to slow down test execution and make test steps visible. RVL version JavaScript version // Launch notepad Global . DoLaunch ( \"notepad.exe\" ); // Set focus to notepad ActivateNotepad (); Global . DoSleep ( 1000 ); // Send text to the application Global . DoSendKeys ( \"Hello World!\" ); Global . DoSleep ( 1000 ); // Select all text by passing CTRL+a key combination Global . DoSendKeys ( \"^a\" ); Global . DoSleep ( 1000 ); // Send DELETE key Global . DoSendKeys ( \"{DEL}\" ); Global . DoSleep ( 1000 ); // Send two lines of text Global . DoSendKeys ( \"First line{ENTER}Second line{ENTER}\" ); Global . DoSleep ( 1000 ); // Send a series of characters with SHIFT key pressed Global . DoSendKeys ( \"+(abcdefg)\" ); Global . DoSleep ( 1000 ); // Close notepad Global . DoKillByPid (); To run RVL or JavaScript version of this example place the following function to User.js. function ActivateNotepad () { var wnd = g_util . FindWindow ( \"regex:.*\" , \"Untitled - Notepad\" ); if ( wnd ) { wnd . SetFocus (); } }","title":"Example"},{"location":"Guide/sending_special_keys_to_the_c/#see-also","text":"How-Tos","title":"See Also"},{"location":"Guide/ses_spy_dialog/","text":"Object Spy Dialog \u00b6 Purpose \u00b6 The Spy dialog is used to investigate hierarchy of UI elements in the application under test. How to Open \u00b6 There are three ways to open the Spy dialog: Click the Spy button on the toolbar Select Tools > Spy from the main menu Click the Spy button on the Recording Activity Dialog Note: If you use this method, the dialog has an extra Learn Object button. Choosing the type of Spy \u00b6 You can change the type of Spy that will be launched by clicking on the down arrow to the right of the Spy icon in the main application toolbar: There are six types of Spy available . See Also \u00b6 Object Spy","title":"Spy Dialog"},{"location":"Guide/ses_spy_dialog/#object-spy-dialog","text":"","title":"Object Spy Dialog"},{"location":"Guide/ses_spy_dialog/#purpose","text":"The Spy dialog is used to investigate hierarchy of UI elements in the application under test.","title":"Purpose"},{"location":"Guide/ses_spy_dialog/#how-to-open","text":"There are three ways to open the Spy dialog: Click the Spy button on the toolbar Select Tools > Spy from the main menu Click the Spy button on the Recording Activity Dialog Note: If you use this method, the dialog has an extra Learn Object button.","title":"How to Open"},{"location":"Guide/ses_spy_dialog/#choosing-the-type-of-spy","text":"You can change the type of Spy that will be launched by clicking on the down arrow to the right of the Spy icon in the main application toolbar: There are six types of Spy available .","title":"Choosing the type of Spy"},{"location":"Guide/ses_spy_dialog/#see-also","text":"Object Spy","title":"See Also"},{"location":"Guide/setting_up_selenium/","text":"Setting Up Selenium \u00b6 This section describes the process for setting up Rapise to work with Selenium . Since Rapise is a Windows\u00ae application, you can use a single computer running Rapise to use the following web browsers: Internet Explorer Google Chrome Mozilla Firefox Microsoft Edge However because Safari only runs on Apple Mac computers, you will need to use two computers (a Mac running Safari) and a PC running Rapise to test using the Apple Safari web browser: Configuring Selenium on a PC \u00b6 Once you have installed Rapise on your local computer, you need to perform the following steps to configure each of the web browsers to use Selenium and Rapise: Rapise 7.2+ \u00b6 This method is applicable to all browsers except Safari. Open Selenium Settings Dialog Select the profile you need Configure profile settings Press Test button on the toolbar If Selenium driver for selected browser is not installed yet or it is not compatible with the current version of the browser then Rapise will ask you a question. If your answer is Yes then Rapise will download the driver executable and place it into c:\\ProgramData\\Inflectra\\Rapise\\SeleniumDrivers This is the default folder where Rapise searches for Selenium drivers. To run tests that use Selenium profiles on machines that do not have Selenium drivers downloaded you may add the following into TestInit function: WebDriver . DownloadDriver (); See Also \u00b6 WebDriver.DownloadDriver Legacy \u00b6 Chrome \u00b6 To use Selenium with Google Chrome, you will need to download the latest version of the Chrome Driver: http://chromedriver.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the chromedriver_win32.zip to your local PC. The file inside the zip archive is called chromedriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise). Firefox \u00b6 To use Selenium with Mozilla Firefox, you will need to download the latest version of the Gecko Driver: https://github.com/mozilla/geckodriver/releases Download geckodriver-vx.xx.x-win32.zip to your local PC. The file inside the zip archive is called geckodriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise). Microsoft Edge \u00b6 To use Selenium with Microsoft Edge, you will need to download the latest version of the Edge Driver from the Microsoft website: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads Create a new folder on your local PC called: C:\\Program Files (x86)\\Microsoft Web Driver Download the MicrosoftWebDriver.exe to this local folder you just created: Internet Explorer \u00b6 To use Selenium with Internet Explorer, you will need to download the latest version of the Internet Explorer IE Driver: http://selenium-release.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the IEDriverServer_XXXX_X.X.X.zip to your local PC: IEDriverServer_Win32_X.X.X.zip (for 32-bit Internet Explorer) IEDriverServer_x64_X.X.X.zip (for 64-bit Internet Explorer) The file inside the zip archive is called IEDriverServer.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise). Updating WebDriver DLLs in Rapise \u00b6 If the version of WebDriver DLLs shipped with Rapise is not compatible with your browser you may update the corresponding DLLs. Just go to the main Selenium website: http://www.seleniumhq.org/download/ and then download the C# WebDriver Bindings : Download the Selenium-dotnet-x.x.x.zip file from the website. Proceed to unzip the archive and then look in the net40 subfolder and extract the following two files and copy into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise): WebDriver.dll WebDriver.Support.dll Note: You will need to close Rapise before copying these files into the Bin folder. Installing Selenium on a Mac \u00b6 The reason for using Selenium running on a Mac is to be able to execute tests against the Safari web browser. So although you can also use the Mac to test with Firefox, Opera and Chrome, we do not recommend this as it adds needless complexity. Safari \u00b6 The first thing you need to do is download the latest version of the Selenium server for Apple Mac computers: http://selenium-release.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the selenium-server-standalone-X.XX.X.jar to the Mac. Run this Java application by double clicking the downloaded .JAR file in Finder. This will startup the Selenium server. Note: You will need to have the Java (ideally the latest version) installed on the Mac first. You are now ready to test web applications running on Safari. The final step is to tell Rapise where it can find that instance of Selenium. To do that, open up Rapise (on your PC) and click on Settings > Selenium and then choose Safari profile: Now you need to change the Uri field to point to your Mac. The format of the URI will be: http://<IP or DNS name of MAC computer>:4444/wd/hub (for example it could be http://test-mac01.local:4444/wd/hub or http://192.168.0.52:4444/wd/hub ) See Also \u00b6 Testing with WebDriver in Safari","title":"Setting Up Selenium"},{"location":"Guide/setting_up_selenium/#setting-up-selenium","text":"This section describes the process for setting up Rapise to work with Selenium . Since Rapise is a Windows\u00ae application, you can use a single computer running Rapise to use the following web browsers: Internet Explorer Google Chrome Mozilla Firefox Microsoft Edge However because Safari only runs on Apple Mac computers, you will need to use two computers (a Mac running Safari) and a PC running Rapise to test using the Apple Safari web browser:","title":"Setting Up Selenium"},{"location":"Guide/setting_up_selenium/#configuring-selenium-on-a-pc","text":"Once you have installed Rapise on your local computer, you need to perform the following steps to configure each of the web browsers to use Selenium and Rapise:","title":"Configuring Selenium on a PC"},{"location":"Guide/setting_up_selenium/#rapise-72","text":"This method is applicable to all browsers except Safari. Open Selenium Settings Dialog Select the profile you need Configure profile settings Press Test button on the toolbar If Selenium driver for selected browser is not installed yet or it is not compatible with the current version of the browser then Rapise will ask you a question. If your answer is Yes then Rapise will download the driver executable and place it into c:\\ProgramData\\Inflectra\\Rapise\\SeleniumDrivers This is the default folder where Rapise searches for Selenium drivers. To run tests that use Selenium profiles on machines that do not have Selenium drivers downloaded you may add the following into TestInit function: WebDriver . DownloadDriver ();","title":"Rapise 7.2+"},{"location":"Guide/setting_up_selenium/#see-also","text":"WebDriver.DownloadDriver","title":"See Also"},{"location":"Guide/setting_up_selenium/#legacy","text":"","title":"Legacy"},{"location":"Guide/setting_up_selenium/#chrome","text":"To use Selenium with Google Chrome, you will need to download the latest version of the Chrome Driver: http://chromedriver.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the chromedriver_win32.zip to your local PC. The file inside the zip archive is called chromedriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).","title":"Chrome"},{"location":"Guide/setting_up_selenium/#firefox","text":"To use Selenium with Mozilla Firefox, you will need to download the latest version of the Gecko Driver: https://github.com/mozilla/geckodriver/releases Download geckodriver-vx.xx.x-win32.zip to your local PC. The file inside the zip archive is called geckodriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).","title":"Firefox"},{"location":"Guide/setting_up_selenium/#microsoft-edge","text":"To use Selenium with Microsoft Edge, you will need to download the latest version of the Edge Driver from the Microsoft website: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads Create a new folder on your local PC called: C:\\Program Files (x86)\\Microsoft Web Driver Download the MicrosoftWebDriver.exe to this local folder you just created:","title":"Microsoft Edge"},{"location":"Guide/setting_up_selenium/#internet-explorer","text":"To use Selenium with Internet Explorer, you will need to download the latest version of the Internet Explorer IE Driver: http://selenium-release.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the IEDriverServer_XXXX_X.X.X.zip to your local PC: IEDriverServer_Win32_X.X.X.zip (for 32-bit Internet Explorer) IEDriverServer_x64_X.X.X.zip (for 64-bit Internet Explorer) The file inside the zip archive is called IEDriverServer.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).","title":"Internet Explorer"},{"location":"Guide/setting_up_selenium/#updating-webdriver-dlls-in-rapise","text":"If the version of WebDriver DLLs shipped with Rapise is not compatible with your browser you may update the corresponding DLLs. Just go to the main Selenium website: http://www.seleniumhq.org/download/ and then download the C# WebDriver Bindings : Download the Selenium-dotnet-x.x.x.zip file from the website. Proceed to unzip the archive and then look in the net40 subfolder and extract the following two files and copy into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise): WebDriver.dll WebDriver.Support.dll Note: You will need to close Rapise before copying these files into the Bin folder.","title":"Updating WebDriver DLLs in Rapise"},{"location":"Guide/setting_up_selenium/#installing-selenium-on-a-mac","text":"The reason for using Selenium running on a Mac is to be able to execute tests against the Safari web browser. So although you can also use the Mac to test with Firefox, Opera and Chrome, we do not recommend this as it adds needless complexity.","title":"Installing Selenium on a Mac"},{"location":"Guide/setting_up_selenium/#safari","text":"The first thing you need to do is download the latest version of the Selenium server for Apple Mac computers: http://selenium-release.storage.googleapis.com/index.html The list of versions at time of writing was: When you click on the folder for the latest version you will see the various files that can be downloaded: Download the selenium-server-standalone-X.XX.X.jar to the Mac. Run this Java application by double clicking the downloaded .JAR file in Finder. This will startup the Selenium server. Note: You will need to have the Java (ideally the latest version) installed on the Mac first. You are now ready to test web applications running on Safari. The final step is to tell Rapise where it can find that instance of Selenium. To do that, open up Rapise (on your PC) and click on Settings > Selenium and then choose Safari profile: Now you need to change the Uri field to point to your Mac. The format of the URI will be: http://<IP or DNS name of MAC computer>:4444/wd/hub (for example it could be http://test-mac01.local:4444/wd/hub or http://192.168.0.52:4444/wd/hub )","title":"Safari"},{"location":"Guide/setting_up_selenium/#see-also_1","text":"Testing with WebDriver in Safari","title":"See Also"},{"location":"Guide/setting_up_web_browsers/","text":"Setting Up Web Browsers \u00b6 Before you can use Rapise with certain web browsers to do web testing, you will need to install plugins so that Rapise can communicate with them. Internet Explorer \u00b6 Unlike the other web browsers, there are actually no steps needed to configure IE. Once Rapise is installed, it is ready to connect to IE for recording, playback and learning without any configuration steps. Firefox \u00b6 In order to test web applications using the Firefox web browser, you will need to install an extension for Firefox that allows Rapise to interact with it: Click the following URL to open the extension page in a new tab: https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/ Click on the Add to Firefox button to install the Add-On into your instance of Firefox. When installation is complete restart Firefox. Firefox is ready to be used with Rapise for automated testing. Note: Rapise requires localhost port 4247 to be accessible for correct operation. Please, make sure that this port is unblocked in your Firewall. Firefox For Rapise 6.5 \u00b6 Rapise 6.5 and higher requires you to update RapiseFirefox extension. Simply click the link below and update extension to the latest version. https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/ Chrome \u00b6 In order to test web applications using the Google Chrome browser, you will need to install an extension for Chrome that allows Rapise to interact with it: Click the following URL to open the extension page in a new tab: https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc Click on the \u2018Add to Chrome\u2019 button to install the Add-On into your instance of Chrome. It is recommended to set the Allow access to file URLs and Allow in incognito checkboxes so that web pages opened from the local folder (using the file:// protocol) and in incognito Chrome windows can be also accessed by Rapise when running automated browser tests. To do this right click this link chrome://extensions/?id=ibngcigigdlhaekbaknfbpcbgilmhahc and choose Copy link address , then paste the value to a new tab in Chrome: When installation is complete restart Chrome. Chrome For Rapise 6.5 \u00b6 Rapise 6.5 and higher requires you to update RapiseChrome extension. Simply click the link below and update extension to the latest version. https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc Chromium Applications \u00b6 The Rapise extension installation procedure differs in the case of testing Chromium applications. Below are the recommended steps to enable automation for such applications: Refer this http://www.chromium.org/administrators/pre-installed-extensions to install an extension for a Chromium application. Getting the ID of current version of the Chrome Extension is easy. Install it into a regular Chrome browser following the instructions above, and then check the information in Chrome by following this URL: chrome://settings/extensionSettings Choose the Chrome HTML library in the Select an Application for Record dialog in Rapise when recording tests rather than Auto . The Rapise library auto-detection logic may fail because the executable name is not chrome.exe . After following the steps below to modify the Windows registry, Rapise should be able to record and learn the application correctly. HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\path\\ TYPE: REG_SZ VALUE: \"C:\\path\\to\\your\\RapiseChrome.crx\" HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\version\\ TYPE: REG_SZ VALUE: \"1.6.0\" For the playback to execute correctly you need to set the following line in the beginning of your User.js file: g_browserExecutablePath = 'C:\\\\the\\\\path\\\\to\\\\chromium-based\\\\app.exe' ; With that change in place, the recorded test should be able to play. Chrome Frame Applications \u00b6 The following configuration enables testing of Chrome Frame applications by Rapise: A \u2018packed\u2019 copy of the RapiseChrome.crx extension is provided with the Rapise installation. It can be located in the C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\Chrome folder of your installation. Enter the following data to the Windows registry: [HKEY_CURRENT_USER\\Software\\Google\\ChromeFrame] \"EnableGCFProtocol\"=dword:00000001 \"IsDefaultRenderer\"=dword:00000001 \"AllowUnsafeURLs\"=dword:00000001 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb] \"path\"=\"c:\\\\path\\\\to\\\\RapiseChrome.crx\" \"version\"=\"1.6.0\" In the Rapise Select Application to Record dialog box, explicitly choose the Chrome HTML library rather than using Auto . Record the test script as you would normally. Note that there should be no Chrome browser or any Chrome applications running when IE with Chrome Frame is started and recording is being performed. You will need to make some changes to the recorded test to ensure that it plays correctly. Insert this line in the beginning of the User.js file: g_browserExecutablePath = \"iexplore.exe\" ; Check to make sure you have Internet Explorer browser executable available at the specified path on your PC and correct it if necessary. Edge \u00b6 In order to test web applications using the Microsoft Edge browser, you will need to install an extension for Edge that allows Rapise to interact with it: Right click the following URL and choose Open link in new tab to open the extension page: https://microsoftedge.microsoft.com/addons/detail/rapisemsedgeextension/ohghmiancfhdndeciiojhgalcfhllblh Click on the \u2018Get\u2019 button to install the Add-On into your instance of Edge. It is recommended to set the Allow in InPrivate and Allow access to file URLs checkboxes so that web pages opened from the local folder (using the file:// protocol) and in InPrivate Edge windows can be also accessed by Rapise when running automated browser tests. To do this right click this link edge://extensions/?id=ohghmiancfhdndeciiojhgalcfhllblh and choose Copy link , then paste the value to a new tab in Edge. When installation is complete restart Edge. Using Other Browsers with Rapise \u00b6 If you would like to test your applications using other web browsers (Safari or Opera) you can use the Selenium WebDriver libraries that are provided with Rapise. To setup the Selenium web browser libraries , please refer to this topic .","title":"Setting Up Web Browsers"},{"location":"Guide/setting_up_web_browsers/#setting-up-web-browsers","text":"Before you can use Rapise with certain web browsers to do web testing, you will need to install plugins so that Rapise can communicate with them.","title":"Setting Up Web Browsers"},{"location":"Guide/setting_up_web_browsers/#internet-explorer","text":"Unlike the other web browsers, there are actually no steps needed to configure IE. Once Rapise is installed, it is ready to connect to IE for recording, playback and learning without any configuration steps.","title":"Internet Explorer"},{"location":"Guide/setting_up_web_browsers/#firefox","text":"In order to test web applications using the Firefox web browser, you will need to install an extension for Firefox that allows Rapise to interact with it: Click the following URL to open the extension page in a new tab: https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/ Click on the Add to Firefox button to install the Add-On into your instance of Firefox. When installation is complete restart Firefox. Firefox is ready to be used with Rapise for automated testing. Note: Rapise requires localhost port 4247 to be accessible for correct operation. Please, make sure that this port is unblocked in your Firewall.","title":"Firefox"},{"location":"Guide/setting_up_web_browsers/#firefox-for-rapise-65","text":"Rapise 6.5 and higher requires you to update RapiseFirefox extension. Simply click the link below and update extension to the latest version. https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/","title":"Firefox For Rapise 6.5"},{"location":"Guide/setting_up_web_browsers/#chrome","text":"In order to test web applications using the Google Chrome browser, you will need to install an extension for Chrome that allows Rapise to interact with it: Click the following URL to open the extension page in a new tab: https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc Click on the \u2018Add to Chrome\u2019 button to install the Add-On into your instance of Chrome. It is recommended to set the Allow access to file URLs and Allow in incognito checkboxes so that web pages opened from the local folder (using the file:// protocol) and in incognito Chrome windows can be also accessed by Rapise when running automated browser tests. To do this right click this link chrome://extensions/?id=ibngcigigdlhaekbaknfbpcbgilmhahc and choose Copy link address , then paste the value to a new tab in Chrome: When installation is complete restart Chrome.","title":"Chrome"},{"location":"Guide/setting_up_web_browsers/#chrome-for-rapise-65","text":"Rapise 6.5 and higher requires you to update RapiseChrome extension. Simply click the link below and update extension to the latest version. https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc","title":"Chrome For Rapise 6.5"},{"location":"Guide/setting_up_web_browsers/#chromium-applications","text":"The Rapise extension installation procedure differs in the case of testing Chromium applications. Below are the recommended steps to enable automation for such applications: Refer this http://www.chromium.org/administrators/pre-installed-extensions to install an extension for a Chromium application. Getting the ID of current version of the Chrome Extension is easy. Install it into a regular Chrome browser following the instructions above, and then check the information in Chrome by following this URL: chrome://settings/extensionSettings Choose the Chrome HTML library in the Select an Application for Record dialog in Rapise when recording tests rather than Auto . The Rapise library auto-detection logic may fail because the executable name is not chrome.exe . After following the steps below to modify the Windows registry, Rapise should be able to record and learn the application correctly. HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\path\\ TYPE: REG_SZ VALUE: \"C:\\path\\to\\your\\RapiseChrome.crx\" HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\version\\ TYPE: REG_SZ VALUE: \"1.6.0\" For the playback to execute correctly you need to set the following line in the beginning of your User.js file: g_browserExecutablePath = 'C:\\\\the\\\\path\\\\to\\\\chromium-based\\\\app.exe' ; With that change in place, the recorded test should be able to play.","title":"Chromium Applications"},{"location":"Guide/setting_up_web_browsers/#chrome-frame-applications","text":"The following configuration enables testing of Chrome Frame applications by Rapise: A \u2018packed\u2019 copy of the RapiseChrome.crx extension is provided with the Rapise installation. It can be located in the C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\Chrome folder of your installation. Enter the following data to the Windows registry: [HKEY_CURRENT_USER\\Software\\Google\\ChromeFrame] \"EnableGCFProtocol\"=dword:00000001 \"IsDefaultRenderer\"=dword:00000001 \"AllowUnsafeURLs\"=dword:00000001 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb] \"path\"=\"c:\\\\path\\\\to\\\\RapiseChrome.crx\" \"version\"=\"1.6.0\" In the Rapise Select Application to Record dialog box, explicitly choose the Chrome HTML library rather than using Auto . Record the test script as you would normally. Note that there should be no Chrome browser or any Chrome applications running when IE with Chrome Frame is started and recording is being performed. You will need to make some changes to the recorded test to ensure that it plays correctly. Insert this line in the beginning of the User.js file: g_browserExecutablePath = \"iexplore.exe\" ; Check to make sure you have Internet Explorer browser executable available at the specified path on your PC and correct it if necessary.","title":"Chrome Frame Applications"},{"location":"Guide/setting_up_web_browsers/#edge","text":"In order to test web applications using the Microsoft Edge browser, you will need to install an extension for Edge that allows Rapise to interact with it: Right click the following URL and choose Open link in new tab to open the extension page: https://microsoftedge.microsoft.com/addons/detail/rapisemsedgeextension/ohghmiancfhdndeciiojhgalcfhllblh Click on the \u2018Get\u2019 button to install the Add-On into your instance of Edge. It is recommended to set the Allow in InPrivate and Allow access to file URLs checkboxes so that web pages opened from the local folder (using the file:// protocol) and in InPrivate Edge windows can be also accessed by Rapise when running automated browser tests. To do this right click this link edge://extensions/?id=ohghmiancfhdndeciiojhgalcfhllblh and choose Copy link , then paste the value to a new tab in Edge. When installation is complete restart Edge.","title":"Edge"},{"location":"Guide/setting_up_web_browsers/#using-other-browsers-with-rapise","text":"If you would like to test your applications using other web browsers (Safari or Opera) you can use the Selenium WebDriver libraries that are provided with Rapise. To setup the Selenium web browser libraries , please refer to this topic .","title":"Using Other Browsers with Rapise"},{"location":"Guide/settings_dialog/","text":"Test Settings View \u00b6 Purpose \u00b6 Use the Settings Dialog to change Test-specific settings. How to Open \u00b6 Use Test > Test Settings menu item to open settings in the expandable dialog window. Another way is to choose root node in the file view to see test settings in the property view. Advanced \u00b6 CommandLine is a freeform text box. Use it to specify values for global variables (beginning in g_ ) to pass the recorder and player . You can view which global variables are available in the source files (such as Player.js, SeSCommon.js , etc). EntryPoint JavaScript function name ( g_entryPointName variable) used as a test entry point. Normally Test , however it may be changed to execute a single scenario, i.e.: MyScenario . WorkDir Defines test root directory ( %WORKDIR% environment variable) relative to this test's folder. Usually it is equal to . (root test). In the sub-test it is ../. , in sub-sub-test it is ../../. . This way if you have common scenario used across tests and it refers to a data file using %WORKDIR%\\Data.xlsx then all sub-tests will be able to find it. This feature together with a concept of sub-tests help to build test frameworks . CommandLine is a freeform text box. Use it to specify values for global variables (beginning in g_ ) to pass the recorder and player . You can view which global variables are available in the source files (such as Player.js, SeSCommon.js , etc). TestParams \u00b6 The TestParams section includes various custom test parameters: Click to open the TestParams Collection Editor Dialog . There is a build-in set of test parameters for cross-browser testing . When you open up a test that uses one of the HTML libraries it will display the following built-in test parameter that you can use to change the playback browser : Execution \u00b6 CacheObjects : Remember object locations and try to reuse them for speed. This is helpful with dialog based applications. CommandInterval : Time interval (in milliseconds) between script commands during script execution. IterationsCount : Your test script will be executed this many times consecutively during Playback . JS Engine : one of Default , Node , WScript . Where Default means use JSEngineType defined in the Global Options . Otherwise use nodejs or JScript/WScript engine correspondingly. ObjectLookupAttemptInterval : This is the time Rapise will wait between attempts to locate an object. ObjectLookupAttempts : This is the number of times Rapise will attempt to locate an object. Show Report : Display report after execution. Default is True . StopOnError : Terminate script execution after the first error. So failing test cases fail quicker. Default is True . Recording \u00b6 BeautifySavedObjects affects how the Script Recorder writes object information to your test script. If False , the object definition will be written as a single line, if True , the object definition will be written in a manner that takes more space, but is easier to read and change. Objects that were learned in previous recordings are affected by the value of BeautifySavedObjects . Screen Capture \u00b6 Capture Cursor : Set this to True if you want to include cursor position marker on the captured screenshot. Capture Execution : Set this to True if you want to save screen images after each Do<Action> during playback. Capture Recording : Set this to True if you want to save screen images after each recorded action during recording. Include in Report : Set this to True to include the saved images in the execution report during playback. Screenshot on Failure : Capture desktop image if a test has just failed. Widget Only : Set this to True to only save the widget area in the screenshot, as opposed to the whole window. Settings \u00b6 UserFunctionsPath : Path (relative to the test directory) to the file with user-defined functions utilized in this test. Normally this file has name in form User.js . ObjectsPath : Path (relative to the test directory) to file containing object tree information. This file contains saved_script_objects structure with all object locators gathered during recording and learning. Normally this file has name in form Objects.js . ReportPath : Path (relative to the test directory) to the test's report file. Normally this file has extension form .trp which stands for **T**est **R**eport. ScriptPath : Path (relative to the test directory) to the test script. TestPath : Path to the test definition file ( *.sstest ).","title":"Test Settings Dialog"},{"location":"Guide/settings_dialog/#test-settings-view","text":"","title":"Test Settings View"},{"location":"Guide/settings_dialog/#purpose","text":"Use the Settings Dialog to change Test-specific settings.","title":"Purpose"},{"location":"Guide/settings_dialog/#how-to-open","text":"Use Test > Test Settings menu item to open settings in the expandable dialog window. Another way is to choose root node in the file view to see test settings in the property view.","title":"How to Open"},{"location":"Guide/settings_dialog/#advanced","text":"CommandLine is a freeform text box. Use it to specify values for global variables (beginning in g_ ) to pass the recorder and player . You can view which global variables are available in the source files (such as Player.js, SeSCommon.js , etc). EntryPoint JavaScript function name ( g_entryPointName variable) used as a test entry point. Normally Test , however it may be changed to execute a single scenario, i.e.: MyScenario . WorkDir Defines test root directory ( %WORKDIR% environment variable) relative to this test's folder. Usually it is equal to . (root test). In the sub-test it is ../. , in sub-sub-test it is ../../. . This way if you have common scenario used across tests and it refers to a data file using %WORKDIR%\\Data.xlsx then all sub-tests will be able to find it. This feature together with a concept of sub-tests help to build test frameworks . CommandLine is a freeform text box. Use it to specify values for global variables (beginning in g_ ) to pass the recorder and player . You can view which global variables are available in the source files (such as Player.js, SeSCommon.js , etc).","title":"Advanced"},{"location":"Guide/settings_dialog/#testparams","text":"The TestParams section includes various custom test parameters: Click to open the TestParams Collection Editor Dialog . There is a build-in set of test parameters for cross-browser testing . When you open up a test that uses one of the HTML libraries it will display the following built-in test parameter that you can use to change the playback browser :","title":"TestParams"},{"location":"Guide/settings_dialog/#execution","text":"CacheObjects : Remember object locations and try to reuse them for speed. This is helpful with dialog based applications. CommandInterval : Time interval (in milliseconds) between script commands during script execution. IterationsCount : Your test script will be executed this many times consecutively during Playback . JS Engine : one of Default , Node , WScript . Where Default means use JSEngineType defined in the Global Options . Otherwise use nodejs or JScript/WScript engine correspondingly. ObjectLookupAttemptInterval : This is the time Rapise will wait between attempts to locate an object. ObjectLookupAttempts : This is the number of times Rapise will attempt to locate an object. Show Report : Display report after execution. Default is True . StopOnError : Terminate script execution after the first error. So failing test cases fail quicker. Default is True .","title":"Execution"},{"location":"Guide/settings_dialog/#recording","text":"BeautifySavedObjects affects how the Script Recorder writes object information to your test script. If False , the object definition will be written as a single line, if True , the object definition will be written in a manner that takes more space, but is easier to read and change. Objects that were learned in previous recordings are affected by the value of BeautifySavedObjects .","title":"Recording"},{"location":"Guide/settings_dialog/#screen-capture","text":"Capture Cursor : Set this to True if you want to include cursor position marker on the captured screenshot. Capture Execution : Set this to True if you want to save screen images after each Do<Action> during playback. Capture Recording : Set this to True if you want to save screen images after each recorded action during recording. Include in Report : Set this to True to include the saved images in the execution report during playback. Screenshot on Failure : Capture desktop image if a test has just failed. Widget Only : Set this to True to only save the widget area in the screenshot, as opposed to the whole window.","title":"Screen Capture"},{"location":"Guide/settings_dialog/#settings","text":"UserFunctionsPath : Path (relative to the test directory) to the file with user-defined functions utilized in this test. Normally this file has name in form User.js . ObjectsPath : Path (relative to the test directory) to file containing object tree information. This file contains saved_script_objects structure with all object locators gathered during recording and learning. Normally this file has name in form Objects.js . ReportPath : Path (relative to the test directory) to the test's report file. Normally this file has extension form .trp which stands for **T**est **R**eport. ScriptPath : Path (relative to the test directory) to the test script. TestPath : Path to the test definition file ( *.sstest ).","title":"Settings"},{"location":"Guide/simulated_objects/","text":"Simulated Objects \u00b6 Purpose \u00b6 During normal recording, Rapise Learns about the Objects you interact with. If, for some reason, Rapise cannot learn an object, you can create a Simulated Object . Rapise identifies a simulated object by its location in the Window or Dialog and can perform certain generic actions on it, such as Click and SendKeys . This works in the reverse sense also. That is, if Rapise cannot identify an object, or, for example, you click outside any defined object in the AUT's UI, Rapise will create a simulated object to represent the action. Value \u00b6 Not all objects on a screen are standard or can be recognized by the libraries loaded. Some are compound objects, consisting of two or more individual objects that work together to deliver a UI effect or behaviour. Simulated objects fill in the blanks to allow Rapise to cause an event outside the normal set of objects. See Also \u00b6 Recording Activity Dialog Sample Tests : The SimulatedObject sample. Deal with a Simulated Object","title":"Simulated Objects"},{"location":"Guide/simulated_objects/#simulated-objects","text":"","title":"Simulated Objects"},{"location":"Guide/simulated_objects/#purpose","text":"During normal recording, Rapise Learns about the Objects you interact with. If, for some reason, Rapise cannot learn an object, you can create a Simulated Object . Rapise identifies a simulated object by its location in the Window or Dialog and can perform certain generic actions on it, such as Click and SendKeys . This works in the reverse sense also. That is, if Rapise cannot identify an object, or, for example, you click outside any defined object in the AUT's UI, Rapise will create a simulated object to represent the action.","title":"Purpose"},{"location":"Guide/simulated_objects/#value","text":"Not all objects on a screen are standard or can be recognized by the libraries loaded. Some are compound objects, consisting of two or more individual objects that work together to deliver a UI effect or behaviour. Simulated objects fill in the blanks to allow Rapise to cause an event outside the normal set of objects.","title":"Value"},{"location":"Guide/simulated_objects/#see-also","text":"Recording Activity Dialog Sample Tests : The SimulatedObject sample. Deal with a Simulated Object","title":"See Also"},{"location":"Guide/soap_definition_editor/","text":"SOAP Definition Editor \u00b6 Purpose \u00b6 The SOAP Definition Editor allows you to edit SOAP web service definition files ( .soap ) that contain data downloaded from SOAP Web Service Definition Language (WSDL) URLs. How to Open \u00b6 Use the Add Web Service Dialog to create a new SOAP definition ( .soap ) file. The definition file will be opened in a SOAP Editor in the Content View . Or, you can double-click on an existing .soap file in the Test Files View explorer window. The definition file will be opened in a SOAP Editor in the Content View . The SOAP Toolbar will also open. Invoke \u00b6 The invoke tab lets you visually choose a specific SOAP operation and execute it. It has the following sections: Input - You can expand the various SOAP operations and see the input headers and body parameters that need to be sent to the function. You can click on each parameter and supply a value on the right-hand pane. Output - You can expand the various SOAP operations and see the output headers and result that should be returned from the operation (if successful). You can click on each header or the body and see the type of data returned. Invoke - Once you have supplied the appropriate values, click the Invoke button send the SOAP request and get the data back from the request. Record - Clicking this button after a successful invoke of the operation will add it to the list of recorded test scripts shown in the SOAP Script Steps output tab. Verify - Clicking this button after the Record will add a Tester.Assert(...) verification checkpoint to the recorded test script. This will make Rapise automatically verify all of the returned values. Request / Response \u00b6 This tab displays the raw SOAP XML request and response. When a SOAP operation fails, this is useful when debugging since it lets you see the raw data being sent to the web service: Typically you will want to view this information in either Raw or XML modes since SOAP doesn't support JSON as a serialization format. Response \u00b6 The HTTP Response in SOAP XML format is formatted and displayed in the bottom section: This displays the output from the last web service request. It has several tabs: Response Header Response Body SOAP Script Steps Response Header \u00b6 Displays a list of the HTTP response headers (name and value). If the request received a 200 OK code back, it's displayed in green, if it receives an error code back, it's displayed in red. Response Body \u00b6 Raw - Displays the raw text of the HTTP response body received from the server. XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body. SOAP Script Steps \u00b6 The Script Steps tab lets you see the list of recorded SOAP operations and use them to create your test script in the main test file. Create Script - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script. Remove Step - This removes the recorded step from the script box Clean - This removes all of the recorded steps from the script box. Each of the steps displayed in the script box will contain the name of the SOAP operation along with the specified parameters in JSON format. Steps displayed in bold with an asterisk also have a verification point recorded . That means when the script is generated, it will include Tester.Assert functions to verify the results. Operation Explorer \u00b6 This section lets you see all of the SOAP web service endpoints in the current WSDL file and view the individual operations. See Also \u00b6 For more info on SOAP Web Services, see SOAP Web Services . For a tutorial on creating a SOAP web service test, see the Web Services SOAP Tutorial .","title":"SOAP Definition Editor"},{"location":"Guide/soap_definition_editor/#soap-definition-editor","text":"","title":"SOAP Definition Editor"},{"location":"Guide/soap_definition_editor/#purpose","text":"The SOAP Definition Editor allows you to edit SOAP web service definition files ( .soap ) that contain data downloaded from SOAP Web Service Definition Language (WSDL) URLs.","title":"Purpose"},{"location":"Guide/soap_definition_editor/#how-to-open","text":"Use the Add Web Service Dialog to create a new SOAP definition ( .soap ) file. The definition file will be opened in a SOAP Editor in the Content View . Or, you can double-click on an existing .soap file in the Test Files View explorer window. The definition file will be opened in a SOAP Editor in the Content View . The SOAP Toolbar will also open.","title":"How to Open"},{"location":"Guide/soap_definition_editor/#invoke","text":"The invoke tab lets you visually choose a specific SOAP operation and execute it. It has the following sections: Input - You can expand the various SOAP operations and see the input headers and body parameters that need to be sent to the function. You can click on each parameter and supply a value on the right-hand pane. Output - You can expand the various SOAP operations and see the output headers and result that should be returned from the operation (if successful). You can click on each header or the body and see the type of data returned. Invoke - Once you have supplied the appropriate values, click the Invoke button send the SOAP request and get the data back from the request. Record - Clicking this button after a successful invoke of the operation will add it to the list of recorded test scripts shown in the SOAP Script Steps output tab. Verify - Clicking this button after the Record will add a Tester.Assert(...) verification checkpoint to the recorded test script. This will make Rapise automatically verify all of the returned values.","title":"Invoke"},{"location":"Guide/soap_definition_editor/#request-response","text":"This tab displays the raw SOAP XML request and response. When a SOAP operation fails, this is useful when debugging since it lets you see the raw data being sent to the web service: Typically you will want to view this information in either Raw or XML modes since SOAP doesn't support JSON as a serialization format.","title":"Request / Response"},{"location":"Guide/soap_definition_editor/#response","text":"The HTTP Response in SOAP XML format is formatted and displayed in the bottom section: This displays the output from the last web service request. It has several tabs: Response Header Response Body SOAP Script Steps","title":"Response"},{"location":"Guide/soap_definition_editor/#response-header","text":"Displays a list of the HTTP response headers (name and value). If the request received a 200 OK code back, it's displayed in green, if it receives an error code back, it's displayed in red.","title":"Response Header"},{"location":"Guide/soap_definition_editor/#response-body","text":"Raw - Displays the raw text of the HTTP response body received from the server. XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body.","title":"Response Body"},{"location":"Guide/soap_definition_editor/#soap-script-steps","text":"The Script Steps tab lets you see the list of recorded SOAP operations and use them to create your test script in the main test file. Create Script - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script. Remove Step - This removes the recorded step from the script box Clean - This removes all of the recorded steps from the script box. Each of the steps displayed in the script box will contain the name of the SOAP operation along with the specified parameters in JSON format. Steps displayed in bold with an asterisk also have a verification point recorded . That means when the script is generated, it will include Tester.Assert functions to verify the results.","title":"SOAP Script Steps"},{"location":"Guide/soap_definition_editor/#operation-explorer","text":"This section lets you see all of the SOAP web service endpoints in the current WSDL file and view the individual operations.","title":"Operation Explorer"},{"location":"Guide/soap_definition_editor/#see-also","text":"For more info on SOAP Web Services, see SOAP Web Services . For a tutorial on creating a SOAP web service test, see the Web Services SOAP Tutorial .","title":"See Also"},{"location":"Guide/soap_web_services/","text":"Testing SOAP Web Services \u00b6 What is SOAP and what is a SOAP web service? \u00b6 SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent. How does Rapise test SOAP web services? \u00b6 Creating a SOAP web service test in Rapise consists of the following steps: Using the SOAP test studio to create the various SOAP web service test actions and verify that they return the expected data in the expected format. Saving each of these SOAP API functions as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects. Rapise SOAP Testing Studio \u00b6 When you add a SOAP web service to your Rapise test project, you get a new SOAP definition file ( .soap ) that will store all of the test invocations against a specific SOAP web service: The SOAP test studio (illustrated above) works by connecting to the WSDL location that you specify in the Endpoint part of the Toolbar : When you enter in the URL to your SOAP Web Service WSDL file and click Get WSDL , Rapise will download the WSDL file and display the list of available methods in the SOAP explorer: Clicking on one of the available methods (e.g. \"Connection_Authenticate\" ) will display that method in the main SOAP editor. Normally you will start using the Invoke tab of the SOAP editor: This is where you can tell Rapise to invoke the method, pass any expected parameters and view the response from the service. If the SOAP method expects input parameters, they will be displayed in the \"Body\" section of the Input in a treeview. You can expand the tree and fill in the various values. In the example above, we have passed the login and password as parameters. When you click the Invoke button, Rapise will send the SOAP request to the API and display the returned output in the Output section. In this case we get the value \"True\" back, indicating that our authentication request was successful. You can also click on the Request/Response tab to view the raw SOAP XML that was sent to and from the server. This is very useful when debugging a service that does not work as expected. Web Service Object Recognition \u00b6 Unlike the REST web service testing editor, each SOAP endpoint will generate a single Rapise SOAP object in the object tree: The object WebServicesSOAP maps to a corresponding .soap file in the Rapise project. Such an object can be used for all of the web service requests in that file: var WebServicesSOAP = SeS ( 'WebServicesSOAP' ); WebServicesSOAP . DoExecute ( 'Connection_Authenticate' , { \"userName\" : \"librarian\" , \"password\" : \"librarian\" }, {} ); WebServicesSOAP . DoExecute ( 'Book_Retrieve' ); WebServicesSOAP . DoVerify ( '\"Body.result.length\" Response' , \"Body.result.length\" , 14 ); WebServicesSOAP . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"AuthorId\" : 2 , \"AuthorIdSpecified\" : true , \"DateAddedIso\" : \"2016-10-02T20:00:00\" , \"Genre\" : { \"Name\" : \"\" }, \"GenreId\" : 3 , \"GenreIdSpecified\" : true , \"Id\" : 0 , \"IdSpecified\" : false , \"IsOutOfPrint\" : false , \"IsOutOfPrintSpecified\" : false , \"Name\" : \"A Christmas Carol\" }} ); Log ( \"Resp: \" + WebServicesSOAP . RequestProperties . requestPayLoad ); In the example above, the same object \"WebServicesSOAP\" is being used with DoExecute with different SOAP methods passed as the first parameter ( \"Connection_Authenticate\" , \"Book_Retrieve\" , \"Book_Insert\" ). Generating Rapise SOAP Test Scripts \u00b6 To save time, Rapise can generate the test scripts code automatically for you (instead of having to write it by hand). To do that, after you have verified that a particular method works as expected, when you click the Invoke command, then click the Record button to record the step, and if you want to verify the data returned, also click on the Verify button. That will generate the following: The steps recorded will be in bold type if they include a verification step, and will be in normal type if they are simply invoked with no verification. When you click the Create Script button, the following will be generated: WebServicesSOAP . DoExecute ( 'Connection_Authenticate' , { \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , WebServicesSOAP . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); WebServicesSOAP . DoExecute ( 'Book\\_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , WebServicesSOAP . GetResponseObject (), { ... }); WebServicesSOAP . DoExecute ( 'Connection_Disconnect' , {}); Playback of SOAP Tests \u00b6 Once you have created your SOAP web service tests, you can use the standard Playback functionality in Rapise to execute your test and display the report:","title":"Testing SOAP Web Services"},{"location":"Guide/soap_web_services/#testing-soap-web-services","text":"","title":"Testing SOAP Web Services"},{"location":"Guide/soap_web_services/#what-is-soap-and-what-is-a-soap-web-service","text":"SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent.","title":"What is SOAP and what is a SOAP web service?"},{"location":"Guide/soap_web_services/#how-does-rapise-test-soap-web-services","text":"Creating a SOAP web service test in Rapise consists of the following steps: Using the SOAP test studio to create the various SOAP web service test actions and verify that they return the expected data in the expected format. Saving each of these SOAP API functions as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects.","title":"How does Rapise test SOAP web services?"},{"location":"Guide/soap_web_services/#rapise-soap-testing-studio","text":"When you add a SOAP web service to your Rapise test project, you get a new SOAP definition file ( .soap ) that will store all of the test invocations against a specific SOAP web service: The SOAP test studio (illustrated above) works by connecting to the WSDL location that you specify in the Endpoint part of the Toolbar : When you enter in the URL to your SOAP Web Service WSDL file and click Get WSDL , Rapise will download the WSDL file and display the list of available methods in the SOAP explorer: Clicking on one of the available methods (e.g. \"Connection_Authenticate\" ) will display that method in the main SOAP editor. Normally you will start using the Invoke tab of the SOAP editor: This is where you can tell Rapise to invoke the method, pass any expected parameters and view the response from the service. If the SOAP method expects input parameters, they will be displayed in the \"Body\" section of the Input in a treeview. You can expand the tree and fill in the various values. In the example above, we have passed the login and password as parameters. When you click the Invoke button, Rapise will send the SOAP request to the API and display the returned output in the Output section. In this case we get the value \"True\" back, indicating that our authentication request was successful. You can also click on the Request/Response tab to view the raw SOAP XML that was sent to and from the server. This is very useful when debugging a service that does not work as expected.","title":"Rapise SOAP Testing Studio"},{"location":"Guide/soap_web_services/#web-service-object-recognition","text":"Unlike the REST web service testing editor, each SOAP endpoint will generate a single Rapise SOAP object in the object tree: The object WebServicesSOAP maps to a corresponding .soap file in the Rapise project. Such an object can be used for all of the web service requests in that file: var WebServicesSOAP = SeS ( 'WebServicesSOAP' ); WebServicesSOAP . DoExecute ( 'Connection_Authenticate' , { \"userName\" : \"librarian\" , \"password\" : \"librarian\" }, {} ); WebServicesSOAP . DoExecute ( 'Book_Retrieve' ); WebServicesSOAP . DoVerify ( '\"Body.result.length\" Response' , \"Body.result.length\" , 14 ); WebServicesSOAP . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"AuthorId\" : 2 , \"AuthorIdSpecified\" : true , \"DateAddedIso\" : \"2016-10-02T20:00:00\" , \"Genre\" : { \"Name\" : \"\" }, \"GenreId\" : 3 , \"GenreIdSpecified\" : true , \"Id\" : 0 , \"IdSpecified\" : false , \"IsOutOfPrint\" : false , \"IsOutOfPrintSpecified\" : false , \"Name\" : \"A Christmas Carol\" }} ); Log ( \"Resp: \" + WebServicesSOAP . RequestProperties . requestPayLoad ); In the example above, the same object \"WebServicesSOAP\" is being used with DoExecute with different SOAP methods passed as the first parameter ( \"Connection_Authenticate\" , \"Book_Retrieve\" , \"Book_Insert\" ).","title":"Web Service Object Recognition"},{"location":"Guide/soap_web_services/#generating-rapise-soap-test-scripts","text":"To save time, Rapise can generate the test scripts code automatically for you (instead of having to write it by hand). To do that, after you have verified that a particular method works as expected, when you click the Invoke command, then click the Record button to record the step, and if you want to verify the data returned, also click on the Verify button. That will generate the following: The steps recorded will be in bold type if they include a verification step, and will be in normal type if they are simply invoked with no verification. When you click the Create Script button, the following will be generated: WebServicesSOAP . DoExecute ( 'Connection_Authenticate' , { \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , WebServicesSOAP . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); WebServicesSOAP . DoExecute ( 'Book\\_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , WebServicesSOAP . GetResponseObject (), { ... }); WebServicesSOAP . DoExecute ( 'Connection_Disconnect' , {});","title":"Generating Rapise SOAP Test Scripts"},{"location":"Guide/soap_web_services/#playback-of-soap-tests","text":"Once you have created your SOAP web service tests, you can use the standard Playback functionality in Rapise to execute your test and display the report:","title":"Playback of SOAP Tests"},{"location":"Guide/source_editor/","text":"Source Editor \u00b6 Purpose \u00b6 To display and edit javascript files. The editor supports Syntax Highlighting , Syntax Checking , Code Folding and Code Completion . How to Open \u00b6 Use the Test Files View to open a javascript file. The javascript file will be opened in a Source Editor , in the Content View . The Edit Popup of the Main Menu will also be populated with text editor-specific options. OnTextSaved.cmd \u00b6 This feature enables post-processing of the saved text files. This may be achieved by defining a file OnTextSaved.cmd . This file may be stored either common folder: c:\\Users\\Public\\Documents\\Rapise\\OnTextSaved.cmd Or in the root of current test framework . The cmd file receives the following inputs * %1 - file path (c:\\Path\\To\\Test\\File.js) * %2 - test working directory (c:\\Path\\To\\Test) Also Rapise sets two environment variables: * %SHIFT_PRESSED% is yes when user presses Shift key * %CONTROL_PRESSED% is yes when user presses Ctrl key You may find an example of configured OnTextSaved.cmd used to beautify a JavaScript file. If .cmd modifies the file, Rapise editor would immediately reload it. If .cmd produces any output, it would be reflected in the Rapise output view . If .cmd file produces any errors, these are reflected in the warnings view . You may find real live example of OnTextSaved.cmd at https://github.com/Inflectra/rapise-powerpack/tree/master/JSBeautify . if \"%SHIFT_PRESSED%\"==\"yes\" ( if \"%~x1\"==\".js\" ( @call \"%~dp0node_modules\\.bin\\js-beautify.cmd\" -r --config \"%~dp0jsbeautify.config.json\" %1 >OnTextSaved.log 2>&1 )","title":"Source Editor"},{"location":"Guide/source_editor/#source-editor","text":"","title":"Source Editor"},{"location":"Guide/source_editor/#purpose","text":"To display and edit javascript files. The editor supports Syntax Highlighting , Syntax Checking , Code Folding and Code Completion .","title":"Purpose"},{"location":"Guide/source_editor/#how-to-open","text":"Use the Test Files View to open a javascript file. The javascript file will be opened in a Source Editor , in the Content View . The Edit Popup of the Main Menu will also be populated with text editor-specific options.","title":"How to Open"},{"location":"Guide/source_editor/#ontextsavedcmd","text":"This feature enables post-processing of the saved text files. This may be achieved by defining a file OnTextSaved.cmd . This file may be stored either common folder: c:\\Users\\Public\\Documents\\Rapise\\OnTextSaved.cmd Or in the root of current test framework . The cmd file receives the following inputs * %1 - file path (c:\\Path\\To\\Test\\File.js) * %2 - test working directory (c:\\Path\\To\\Test) Also Rapise sets two environment variables: * %SHIFT_PRESSED% is yes when user presses Shift key * %CONTROL_PRESSED% is yes when user presses Ctrl key You may find an example of configured OnTextSaved.cmd used to beautify a JavaScript file. If .cmd modifies the file, Rapise editor would immediately reload it. If .cmd produces any output, it would be reflected in the Rapise output view . If .cmd file produces any errors, these are reflected in the warnings view . You may find real live example of OnTextSaved.cmd at https://github.com/Inflectra/rapise-powerpack/tree/master/JSBeautify . if \"%SHIFT_PRESSED%\"==\"yes\" ( if \"%~x1\"==\".js\" ( @call \"%~dp0node_modules\\.bin\\js-beautify.cmd\" -r --config \"%~dp0jsbeautify.config.json\" %1 >OnTextSaved.log 2>&1 )","title":"OnTextSaved.cmd"},{"location":"Guide/spira_dashboard/","text":"Spira Dashboard \u00b6 Important In Rapise 7 we've updated the dashboard. It now has all new look and features. Learn more . Purpose \u00b6 This page displays information from the SpiraTest or SpiraTeam server that this instance of Rapise is connected to. More details on using Rapise with either SpiraTest or SpiraTeam can be found in the separate Using Rapise with SpiraTest Guide . A copy of this guide should be in the Start > Programs menu created by the Rapise installer. The dashboard displays information about the current Spira project, including the associated test cases, test sets and automation hosts: A typical Spira dashboard will look like the following: Each of the sections is explained separately below: Spira Login/Sign-Up \u00b6 This section will display the name of the currently configured Spira user (if there is one) together with the option to either login to an existing Spira instance or to sign-up for a new one: Login : this will log you into the instance of Spira listed in the Connection Info section Sign Up : this link will take you to the Inflectra website where you can sign up for a Spira account. Auto Login : if you select this option, Rapise will automatically login to Spira when it first starts up. Once you login to the instance of Spira, the widget will change to the following: Logout : this will log you out of the instance of Spira listed in the Connection Info section Connection Info \u00b6 This section will display the URL, login and corresponding local repository folder for the current Spira instance (if one has been set). To change the current connection (or to set one up if this is a new installation of Rapise), click on the [Edit Connection Settings] button. That will display the Connection Settings dialog box: You can then change the current Spira connection using this dialog box. See the topic on Spira Integration for more details. Automation Hosts \u00b6 This section will display a list of the automation hosts available in the currently selected Spira project: An automation host is a notional computer that Spira uses to assign specific test sets to specific computers running Rapise. This allows you to schedule tests to run on different computers remotely. When you first connect to Spira, it will not know which automation host the current machine matches. Using the dropdown list you can select one of the displayed automation hosts: That will tell Rapise that this local computer is in fact this Spira automation host. Any test sets scheduled in Spira for this automation host will now be executed on this computer running Rapise. If you don't see the current automation host listed, you can click on the Create Host for this Machine button to create a new automation host entry for the current computer: This screen lets you enter a display name (Name), system name (Token) and long description for a new automation host that Rapise will create in the current Spira project. Click [OK] to confirm the new automation host. Test Cases \u00b6 This section displays a list of test cases that are either created by the current Spira user or are assigned to the current Spira user: Each test cases will be displayed with the ID, name and long description of the test case together with an icon that indicates the type of test case: - Manual test case that has no automation script attached. - Test case that has an existing Rapise test attached. - Test case that has a non-Rapise automation script attached. Clicking on the hyperlink ID will open up the test case inside Spira in your web browser. For test cases that have a linked Rapise test, there will be an Open button available. Clicking on this button will open the test in Rapise. For test cases that do not have a linked Rapise test, there is the Save As... option that lets you save the current Rapise script against the test case. In addition there are two other options available: Create Test Set: Clicking on this button will allow you to create a new test set inside Spira. It will display the following dialog box when you select at least one test case and click the button: Enter in the name of the test set you want to create and click [OK]. Add to Test Set: When you select at least one test case and one test set , then click this button it will add the selected test cases to a specific test set. Test Sets \u00b6 This section displays a list of test set that are either created by the current Spira user, are assigned to the current Spira user, or are assigned to the automation host that this instance of Rapise is installed on: Each test set will be displayed with the ID, name and long description of the test set. Clicking on the hyperlink ID will open up the test set inside Spira in your web browser. For test sets that are marked as automated , there will be an Execute button available. Clicking on this button will execute the test in RapiseLauncher . This is described in more detail in the SpiraTest Integration topic.","title":"Spira Dashboard"},{"location":"Guide/spira_dashboard/#spira-dashboard","text":"Important In Rapise 7 we've updated the dashboard. It now has all new look and features. Learn more .","title":"Spira Dashboard"},{"location":"Guide/spira_dashboard/#purpose","text":"This page displays information from the SpiraTest or SpiraTeam server that this instance of Rapise is connected to. More details on using Rapise with either SpiraTest or SpiraTeam can be found in the separate Using Rapise with SpiraTest Guide . A copy of this guide should be in the Start > Programs menu created by the Rapise installer. The dashboard displays information about the current Spira project, including the associated test cases, test sets and automation hosts: A typical Spira dashboard will look like the following: Each of the sections is explained separately below:","title":"Purpose"},{"location":"Guide/spira_dashboard/#spira-loginsign-up","text":"This section will display the name of the currently configured Spira user (if there is one) together with the option to either login to an existing Spira instance or to sign-up for a new one: Login : this will log you into the instance of Spira listed in the Connection Info section Sign Up : this link will take you to the Inflectra website where you can sign up for a Spira account. Auto Login : if you select this option, Rapise will automatically login to Spira when it first starts up. Once you login to the instance of Spira, the widget will change to the following: Logout : this will log you out of the instance of Spira listed in the Connection Info section","title":"Spira Login/Sign-Up"},{"location":"Guide/spira_dashboard/#connection-info","text":"This section will display the URL, login and corresponding local repository folder for the current Spira instance (if one has been set). To change the current connection (or to set one up if this is a new installation of Rapise), click on the [Edit Connection Settings] button. That will display the Connection Settings dialog box: You can then change the current Spira connection using this dialog box. See the topic on Spira Integration for more details.","title":"Connection Info"},{"location":"Guide/spira_dashboard/#automation-hosts","text":"This section will display a list of the automation hosts available in the currently selected Spira project: An automation host is a notional computer that Spira uses to assign specific test sets to specific computers running Rapise. This allows you to schedule tests to run on different computers remotely. When you first connect to Spira, it will not know which automation host the current machine matches. Using the dropdown list you can select one of the displayed automation hosts: That will tell Rapise that this local computer is in fact this Spira automation host. Any test sets scheduled in Spira for this automation host will now be executed on this computer running Rapise. If you don't see the current automation host listed, you can click on the Create Host for this Machine button to create a new automation host entry for the current computer: This screen lets you enter a display name (Name), system name (Token) and long description for a new automation host that Rapise will create in the current Spira project. Click [OK] to confirm the new automation host.","title":"Automation Hosts"},{"location":"Guide/spira_dashboard/#test-cases","text":"This section displays a list of test cases that are either created by the current Spira user or are assigned to the current Spira user: Each test cases will be displayed with the ID, name and long description of the test case together with an icon that indicates the type of test case: - Manual test case that has no automation script attached. - Test case that has an existing Rapise test attached. - Test case that has a non-Rapise automation script attached. Clicking on the hyperlink ID will open up the test case inside Spira in your web browser. For test cases that have a linked Rapise test, there will be an Open button available. Clicking on this button will open the test in Rapise. For test cases that do not have a linked Rapise test, there is the Save As... option that lets you save the current Rapise script against the test case. In addition there are two other options available: Create Test Set: Clicking on this button will allow you to create a new test set inside Spira. It will display the following dialog box when you select at least one test case and click the button: Enter in the name of the test set you want to create and click [OK]. Add to Test Set: When you select at least one test case and one test set , then click this button it will add the selected test cases to a specific test set.","title":"Test Cases"},{"location":"Guide/spira_dashboard/#test-sets","text":"This section displays a list of test set that are either created by the current Spira user, are assigned to the current Spira user, or are assigned to the automation host that this instance of Rapise is installed on: Each test set will be displayed with the ID, name and long description of the test set. Clicking on the hyperlink ID will open up the test set inside Spira in your web browser. For test sets that are marked as automated , there will be an Execute button available. Clicking on this button will execute the test in RapiseLauncher . This is described in more detail in the SpiraTest Integration topic.","title":"Test Sets"},{"location":"Guide/spira_dashboard_2/","text":"Spira Dashboard \u00b6 In Rapise 7 we completely reworked the Spira Dashboard. It has all new look and features. New dashboard reduces the need to open Spira in a browser window and also adds support for Flaky test handling, Rerun features and ability to run a test case/whole test set/or just failed test cases on a selected automation host. New Features \u00b6 If you are not familiar with the dashboard and it's basic features it is recommended to review Navigation and Tasks sections first. Flaky Tests \u00b6 Important To enable this feature setup custom properties as described below . If you see that some test may pass or fail randomly there is a way to mark it as Flaky. Simply find it in Test Cases View and use Actions menu to set the flag. Flaky test case is decorated with an icon (red flag): When a test case marked as Flaky is executed - it's test run is marked as Flaky too. Note Flaky flag makes it easier to distinguish random and important test run failures. Automatic Rerun \u00b6 Important To enable this feature setup custom properties as described below . To instruct RapiseLauncher to rerun a failed test case use Max rerun attempts test set custom property. If a test case keeps failing it will be additionally executed specified number of times (by default it is zero). To stop rerunning tests if many of them finally failed use Do not rerun if N tests failed property. By default this property is zero and it means rerun all the tests in a test set if Max rerun attempts is set. Test runs that correspond to reruns are decorated with icons. Number in a circle designates rerun attempt. Parallel Execution \u00b6 Important To enable this feature setup custom properties as described below . Since Rapise 7.1 - RapiseLauncher is able to perform parallel run for these types of tests: Web tests configured to run with Selenium WebDriver, Mobile tests, REST/SOAP API tests. In order to mark a test case ready for parallel run set the custom property Ready for parallel run in test case details. If all test cases included into a test set have this property, the test set is configured for parallel run - RapiseLauncher will execute the test cases in parallel. To configure the test set use the custom properties Run tests in parallel and Max parallel tests (0 - no limit). Since Rapise 7.2 - RapiseLauncher can run configurations (see Input Data Table section below) in parallel. This feature is controlled via Unroll input data for parallel execution custom property of a test set. See the Parallel Execution Webinar for more details. Input Data Table \u00b6 Important To enable this feature setup custom properties as described below . Since Rapise 7.1 you may define a table with parameter values to automatically run same test set with different input data. It is an alternative to test configurations . Create a CSV or TXT file with parameter names and values. You may do it right from the dashboard (navigate to test set details and use Create New popup menu in the Attachments section). Example of the data file: UserName,Password librarian,librarian borrower,borrower Choose this attachment in the Input data custom property. RapiseLauncher will run the test set same number of times as data rows in the input file. Every column name will become a global parameter passed to a test case. Note Besides attachments there is an option to use a file stored in the same Git repository as the testing framework. You may type a path to it in the Input data custom property. The path should contain %GITROOT% placeholder, e.g.: %GITROOT%\\Data\\Logins.xlsx Test Matrix \u00b6 If a Test Set is configured to run same Test Cases several times (each time with different input parameters) then one may view the Test Matrix based on produced Test Runs. Let's look at the example. Assume that we have a test set of 5 test cases that we want to run on 2 different browsers. Browser type is specified via an input parameter (see Input Data Table section above for more details). Execution of the test set produces 4 x 2 = 10 test runs. After execution we find one of these test runs on the Test Runs page, right click it and choose Test Matrix menu item. Then we see the matrix: If there are more than one input parameter - it is possible to select the one you need from the dropdown. Clicking on a test case reveals the history of test runs for it (clickable). How to Open \u00b6 To open the dashboard use main menu View > Spira Dashboard. If you wish Rapise to open the dashboard automatically on startup - open the Rapise Settings dialog and set ShowDashboardOnStartup flag to true . Navigation \u00b6 The dashboard contains top level menu to switch between views and a dropdown to switch between products/projects. There is also a button to refresh data and search field to filter data in the current view. Filtering is applied to a column with orange caption (usually Name ). Data Tables \u00b6 In many cases first column of a data table contains ID of an item in Spira. You may click an ID to open the corresponding item in a browser window. Each data table has a menu opener (hamburger) located in the top right corner. The menu contains some predefined filters and also allows to reveal filter row and choose what columns to show (since Rapise 7.2 the list of columns to show is stored in the dashboard settings). Clicking a column caption turns on sorting. Hierarchical Tables \u00b6 Plus icon in a table row means that it can be expanded. Click the icon to reveal row details. It may contain more data tables. Note Since Rapise 7.1 you may use double click to expand/collapse row details. Double click anywhere on the row you want to expand/collapse. Tree View \u00b6 Test cases and test sets may be placed into folders in Spira. The dashboard loads folder hierarchy. To navigate it click on folder icons. Note Since Rapise 7.1 you may use double click to expand/collapse folders. Double click anywhere on the row with folder you want to expand/collapse. Actions \u00b6 Some tables include Action column. It allows the user to perform certain actions on an item displayed in the row where Action menu is expanded. Tasks \u00b6 Here is the list of tasks you may accomplish with the dashboard. Connect To Spira \u00b6 If you did not connect Rapise to Spira yet, you will be prompted to enter the connection info. To get your API Key follow these steps . Assign Automation Host Token \u00b6 If you did not assign an automation host token to the machine where Rapise is running you may do it in Automation Hosts view. You may even create a new host there. Dashboard View \u00b6 Browse Framework Tests \u00b6 The dashboard view shows tests included in the currently opened test framework (parent test and it's sub-tests). Note Since Rapise 7.1 you may double click a test in this table to open it in Rapise. Note Since Rapise 7.2 you may select tests using checkboxes in the first column and perform additional actions: create a test set from selected test cases, append selected test cases to existing test set execute selected test cases on the local host execute selected test cases on another automation host A test has a checkbox near it if it is linked to a test cases belonging to selected project. View Test Set Status Graph \u00b6 Requires Rapise 7.2. The Test Set Status graph shows the aggregated count of test cases in each execution status for each test set in the product. If you have the same test cases in multiple test sets they are all counted separately to make sure you can tell that tests have passed successfully across test sets. This is helpful when testing across different environments. Setup Custom Properties \u00b6 Some features of the dashboard require additional custom properties to exist in Test Cases, Test Sets and Test Runs. Click Create Custom Properties for Rapise button to add the following custom properties in the selected project: Test Cases Flaky (boolean, default is false) Ready for parallel run (boolean, default is false, requires Rapise 7.1+) Test Runs Flaky (boolean, default is false) Run attempt (integer, default is 1) Tag (string, empty by default, requires Rapise 7.1+) Test Sets Max rerun attempts (integer, default is 0) Do not rerun if N tests failed (integer, default is 0) Rerun test set if failed (boolean, default is false, requires Rapise 7.1+) Run tests in parallel (boolean, default is false, requires Rapise 7.1+) Max parallel tests (integer, default is 0 (no limit), requires Rapise 7.1+) Unroll input data for parallel execution (boolean, default is false, requires Rapise 7.2+) Input data (string, empty by default, requires Rapise 7.1+) Record videos (boolean, default is false) Verbose level (integer, default is 1) GitUrl, GitUser, GitPassword, GitBranch, GitRoot (string, empty by default) Clicking the button more than once is safe. If a custom property exists - Rapise won't create a duplicate. To create the custom properties you will need to enter administrator credentials (user name and API Key). Perform Test Actions \u00b6 Action menu for a test allows to Open the test in Rapise Link the test to a test case in Spira Execute the test (if linked to a test case) via RapiseLauncher on the local machine or a selected automation host. Requires Rapise 7.1+. Test Cases View \u00b6 Browse Test Cases \u00b6 In the test cases view one may see the tree of test cases for a project, discover when a test case was last executed and status of execution. Since Rapise 7.2 one may change global Test Case filter from All to My Assigned . View Test Case Details \u00b6 Expanding a test case reveals last 10 runs of it. The details pane also shows test case parameters (editable, requires Rapise 7.1+) and custom properties (editable). Perform Test Case Actions \u00b6 Action menu for a test case allows to Immediately Execute the test case on the local host. Execute the test case on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready. Mark the test case as Flaky or remove the flag. Add default parameters to the test case. The list of default parameters includes: g_verboseLevel = 1 g_enableVideoRecording = false Open This Test in Rapise. It is a shortcut for Open a test from SpiraTest . Note For execution of a test case on a selected automation host (#2) - Rapise will use a special test set with the name of the automation host. Create New Test Case \u00b6 If you want to create a test case in a specific folder - select corresponding row in the table, otherwise the test case will be created in the root folder. Click the New Test Case button at the bottom of the view and provide necessary details in the opened modal dialog. Test Sets View \u00b6 Browse Test Sets \u00b6 In the test sets view one may see the tree of test sets for a project, discover when a test set was last executed and status of execution. Since Rapise 7.2 one may change global Test Set filter from All to My Assigned . View Test Set Details \u00b6 Expanding a test set reveals the list of included test cases. The details pane also shows test set parameters (editable, requires Rapise 7.1+) and custom properties (editable). Add Test Cases \u00b6 Press Add Test Cases to open the test cases tree, select test cases and append them to the test set. Reorder Test Cases \u00b6 Using hamburger icon next to a test case ID one may reorder test cases in a test set. Test Case Actions \u00b6 Use Action menu to Remove a test case from the test Open a dialog to edit Test Set Test Case parameters (requires Rapise 7.1+) Perform Test Set Actions \u00b6 Action menu for a test set allows to Immediately Execute the test set on the local host. Execute the test set on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready. Rerun just failed test cases on a selected Automation Host. Note For execution of a test set on a selected automation host (#2,#3) Rapise will use a special test set with the name of the automation host. Create New Test Set \u00b6 If you want to create a test set in a specific folder - select corresponding row in the table, otherwise the test set will be created in the root folder. Click the New Test Set button at the bottom of the view and provide necessary details in the opened modal dialog. Test Runs View \u00b6 Browse Test Runs \u00b6 This view shows most recent test run reports. One may see test run status and execution time and duration. If a test run is failed - Details column displays the first error message. Since Rapise 7.1 to view just test runs of a specific test set run use Tag column popup menu Filter by Tag . If you run the test set with different configurations then configuration number is reflected in the tag name, e.g. QZH_ Config3 . If a test run corresponds to automatic rerun of a failed test set it has suffix Rerun , e.g. DCB_ Rerun . First three letters of the tag name is a random string. generated for test set run by RapiseLauncher. Important To enable Filter by Tag feature setup custom properties as described below . View Test Run Details \u00b6 Expanding a test run reveals the report with execution status for every test step. The details pane also contains links to download test run attachments and execution log. Test Matrix View \u00b6 Direct navigation to this page produces empty result. To see the Test Matrix navigate to the Test Runs view, right click Test Run tag and choose Test Matrix from popup menu. Automation Hosts View \u00b6 This view displays automation hosts configured in selected project. You may create a new one using the form on this page. Incidents View \u00b6 This view displays last 500 incidents and allows to create new ones.","title":"Spira Dashboard"},{"location":"Guide/spira_dashboard_2/#spira-dashboard","text":"In Rapise 7 we completely reworked the Spira Dashboard. It has all new look and features. New dashboard reduces the need to open Spira in a browser window and also adds support for Flaky test handling, Rerun features and ability to run a test case/whole test set/or just failed test cases on a selected automation host.","title":"Spira Dashboard"},{"location":"Guide/spira_dashboard_2/#new-features","text":"If you are not familiar with the dashboard and it's basic features it is recommended to review Navigation and Tasks sections first.","title":"New Features"},{"location":"Guide/spira_dashboard_2/#flaky-tests","text":"Important To enable this feature setup custom properties as described below . If you see that some test may pass or fail randomly there is a way to mark it as Flaky. Simply find it in Test Cases View and use Actions menu to set the flag. Flaky test case is decorated with an icon (red flag): When a test case marked as Flaky is executed - it's test run is marked as Flaky too. Note Flaky flag makes it easier to distinguish random and important test run failures.","title":"Flaky Tests"},{"location":"Guide/spira_dashboard_2/#automatic-rerun","text":"Important To enable this feature setup custom properties as described below . To instruct RapiseLauncher to rerun a failed test case use Max rerun attempts test set custom property. If a test case keeps failing it will be additionally executed specified number of times (by default it is zero). To stop rerunning tests if many of them finally failed use Do not rerun if N tests failed property. By default this property is zero and it means rerun all the tests in a test set if Max rerun attempts is set. Test runs that correspond to reruns are decorated with icons. Number in a circle designates rerun attempt.","title":"Automatic Rerun"},{"location":"Guide/spira_dashboard_2/#parallel-execution","text":"Important To enable this feature setup custom properties as described below . Since Rapise 7.1 - RapiseLauncher is able to perform parallel run for these types of tests: Web tests configured to run with Selenium WebDriver, Mobile tests, REST/SOAP API tests. In order to mark a test case ready for parallel run set the custom property Ready for parallel run in test case details. If all test cases included into a test set have this property, the test set is configured for parallel run - RapiseLauncher will execute the test cases in parallel. To configure the test set use the custom properties Run tests in parallel and Max parallel tests (0 - no limit). Since Rapise 7.2 - RapiseLauncher can run configurations (see Input Data Table section below) in parallel. This feature is controlled via Unroll input data for parallel execution custom property of a test set. See the Parallel Execution Webinar for more details.","title":"Parallel Execution"},{"location":"Guide/spira_dashboard_2/#input-data-table","text":"Important To enable this feature setup custom properties as described below . Since Rapise 7.1 you may define a table with parameter values to automatically run same test set with different input data. It is an alternative to test configurations . Create a CSV or TXT file with parameter names and values. You may do it right from the dashboard (navigate to test set details and use Create New popup menu in the Attachments section). Example of the data file: UserName,Password librarian,librarian borrower,borrower Choose this attachment in the Input data custom property. RapiseLauncher will run the test set same number of times as data rows in the input file. Every column name will become a global parameter passed to a test case. Note Besides attachments there is an option to use a file stored in the same Git repository as the testing framework. You may type a path to it in the Input data custom property. The path should contain %GITROOT% placeholder, e.g.: %GITROOT%\\Data\\Logins.xlsx","title":"Input Data Table"},{"location":"Guide/spira_dashboard_2/#test-matrix","text":"If a Test Set is configured to run same Test Cases several times (each time with different input parameters) then one may view the Test Matrix based on produced Test Runs. Let's look at the example. Assume that we have a test set of 5 test cases that we want to run on 2 different browsers. Browser type is specified via an input parameter (see Input Data Table section above for more details). Execution of the test set produces 4 x 2 = 10 test runs. After execution we find one of these test runs on the Test Runs page, right click it and choose Test Matrix menu item. Then we see the matrix: If there are more than one input parameter - it is possible to select the one you need from the dropdown. Clicking on a test case reveals the history of test runs for it (clickable).","title":"Test Matrix"},{"location":"Guide/spira_dashboard_2/#how-to-open","text":"To open the dashboard use main menu View > Spira Dashboard. If you wish Rapise to open the dashboard automatically on startup - open the Rapise Settings dialog and set ShowDashboardOnStartup flag to true .","title":"How to Open"},{"location":"Guide/spira_dashboard_2/#navigation","text":"The dashboard contains top level menu to switch between views and a dropdown to switch between products/projects. There is also a button to refresh data and search field to filter data in the current view. Filtering is applied to a column with orange caption (usually Name ).","title":"Navigation"},{"location":"Guide/spira_dashboard_2/#data-tables","text":"In many cases first column of a data table contains ID of an item in Spira. You may click an ID to open the corresponding item in a browser window. Each data table has a menu opener (hamburger) located in the top right corner. The menu contains some predefined filters and also allows to reveal filter row and choose what columns to show (since Rapise 7.2 the list of columns to show is stored in the dashboard settings). Clicking a column caption turns on sorting.","title":"Data Tables"},{"location":"Guide/spira_dashboard_2/#hierarchical-tables","text":"Plus icon in a table row means that it can be expanded. Click the icon to reveal row details. It may contain more data tables. Note Since Rapise 7.1 you may use double click to expand/collapse row details. Double click anywhere on the row you want to expand/collapse.","title":"Hierarchical Tables"},{"location":"Guide/spira_dashboard_2/#tree-view","text":"Test cases and test sets may be placed into folders in Spira. The dashboard loads folder hierarchy. To navigate it click on folder icons. Note Since Rapise 7.1 you may use double click to expand/collapse folders. Double click anywhere on the row with folder you want to expand/collapse.","title":"Tree View"},{"location":"Guide/spira_dashboard_2/#actions","text":"Some tables include Action column. It allows the user to perform certain actions on an item displayed in the row where Action menu is expanded.","title":"Actions"},{"location":"Guide/spira_dashboard_2/#tasks","text":"Here is the list of tasks you may accomplish with the dashboard.","title":"Tasks"},{"location":"Guide/spira_dashboard_2/#connect-to-spira","text":"If you did not connect Rapise to Spira yet, you will be prompted to enter the connection info. To get your API Key follow these steps .","title":"Connect To Spira"},{"location":"Guide/spira_dashboard_2/#assign-automation-host-token","text":"If you did not assign an automation host token to the machine where Rapise is running you may do it in Automation Hosts view. You may even create a new host there.","title":"Assign Automation Host Token"},{"location":"Guide/spira_dashboard_2/#dashboard-view","text":"","title":"Dashboard View"},{"location":"Guide/spira_dashboard_2/#browse-framework-tests","text":"The dashboard view shows tests included in the currently opened test framework (parent test and it's sub-tests). Note Since Rapise 7.1 you may double click a test in this table to open it in Rapise. Note Since Rapise 7.2 you may select tests using checkboxes in the first column and perform additional actions: create a test set from selected test cases, append selected test cases to existing test set execute selected test cases on the local host execute selected test cases on another automation host A test has a checkbox near it if it is linked to a test cases belonging to selected project.","title":"Browse Framework Tests"},{"location":"Guide/spira_dashboard_2/#view-test-set-status-graph","text":"Requires Rapise 7.2. The Test Set Status graph shows the aggregated count of test cases in each execution status for each test set in the product. If you have the same test cases in multiple test sets they are all counted separately to make sure you can tell that tests have passed successfully across test sets. This is helpful when testing across different environments.","title":"View Test Set Status Graph"},{"location":"Guide/spira_dashboard_2/#setup-custom-properties","text":"Some features of the dashboard require additional custom properties to exist in Test Cases, Test Sets and Test Runs. Click Create Custom Properties for Rapise button to add the following custom properties in the selected project: Test Cases Flaky (boolean, default is false) Ready for parallel run (boolean, default is false, requires Rapise 7.1+) Test Runs Flaky (boolean, default is false) Run attempt (integer, default is 1) Tag (string, empty by default, requires Rapise 7.1+) Test Sets Max rerun attempts (integer, default is 0) Do not rerun if N tests failed (integer, default is 0) Rerun test set if failed (boolean, default is false, requires Rapise 7.1+) Run tests in parallel (boolean, default is false, requires Rapise 7.1+) Max parallel tests (integer, default is 0 (no limit), requires Rapise 7.1+) Unroll input data for parallel execution (boolean, default is false, requires Rapise 7.2+) Input data (string, empty by default, requires Rapise 7.1+) Record videos (boolean, default is false) Verbose level (integer, default is 1) GitUrl, GitUser, GitPassword, GitBranch, GitRoot (string, empty by default) Clicking the button more than once is safe. If a custom property exists - Rapise won't create a duplicate. To create the custom properties you will need to enter administrator credentials (user name and API Key).","title":"Setup Custom Properties"},{"location":"Guide/spira_dashboard_2/#perform-test-actions","text":"Action menu for a test allows to Open the test in Rapise Link the test to a test case in Spira Execute the test (if linked to a test case) via RapiseLauncher on the local machine or a selected automation host. Requires Rapise 7.1+.","title":"Perform Test Actions"},{"location":"Guide/spira_dashboard_2/#test-cases-view","text":"","title":"Test Cases View"},{"location":"Guide/spira_dashboard_2/#browse-test-cases","text":"In the test cases view one may see the tree of test cases for a project, discover when a test case was last executed and status of execution. Since Rapise 7.2 one may change global Test Case filter from All to My Assigned .","title":"Browse Test Cases"},{"location":"Guide/spira_dashboard_2/#view-test-case-details","text":"Expanding a test case reveals last 10 runs of it. The details pane also shows test case parameters (editable, requires Rapise 7.1+) and custom properties (editable).","title":"View Test Case Details"},{"location":"Guide/spira_dashboard_2/#perform-test-case-actions","text":"Action menu for a test case allows to Immediately Execute the test case on the local host. Execute the test case on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready. Mark the test case as Flaky or remove the flag. Add default parameters to the test case. The list of default parameters includes: g_verboseLevel = 1 g_enableVideoRecording = false Open This Test in Rapise. It is a shortcut for Open a test from SpiraTest . Note For execution of a test case on a selected automation host (#2) - Rapise will use a special test set with the name of the automation host.","title":"Perform Test Case Actions"},{"location":"Guide/spira_dashboard_2/#create-new-test-case","text":"If you want to create a test case in a specific folder - select corresponding row in the table, otherwise the test case will be created in the root folder. Click the New Test Case button at the bottom of the view and provide necessary details in the opened modal dialog.","title":"Create New Test Case"},{"location":"Guide/spira_dashboard_2/#test-sets-view","text":"","title":"Test Sets View"},{"location":"Guide/spira_dashboard_2/#browse-test-sets","text":"In the test sets view one may see the tree of test sets for a project, discover when a test set was last executed and status of execution. Since Rapise 7.2 one may change global Test Set filter from All to My Assigned .","title":"Browse Test Sets"},{"location":"Guide/spira_dashboard_2/#view-test-set-details","text":"Expanding a test set reveals the list of included test cases. The details pane also shows test set parameters (editable, requires Rapise 7.1+) and custom properties (editable).","title":"View Test Set Details"},{"location":"Guide/spira_dashboard_2/#add-test-cases","text":"Press Add Test Cases to open the test cases tree, select test cases and append them to the test set.","title":"Add Test Cases"},{"location":"Guide/spira_dashboard_2/#reorder-test-cases","text":"Using hamburger icon next to a test case ID one may reorder test cases in a test set.","title":"Reorder Test Cases"},{"location":"Guide/spira_dashboard_2/#test-case-actions","text":"Use Action menu to Remove a test case from the test Open a dialog to edit Test Set Test Case parameters (requires Rapise 7.1+)","title":"Test Case Actions"},{"location":"Guide/spira_dashboard_2/#perform-test-set-actions","text":"Action menu for a test set allows to Immediately Execute the test set on the local host. Execute the test set on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready. Rerun just failed test cases on a selected Automation Host. Note For execution of a test set on a selected automation host (#2,#3) Rapise will use a special test set with the name of the automation host.","title":"Perform Test Set Actions"},{"location":"Guide/spira_dashboard_2/#create-new-test-set","text":"If you want to create a test set in a specific folder - select corresponding row in the table, otherwise the test set will be created in the root folder. Click the New Test Set button at the bottom of the view and provide necessary details in the opened modal dialog.","title":"Create New Test Set"},{"location":"Guide/spira_dashboard_2/#test-runs-view","text":"","title":"Test Runs View"},{"location":"Guide/spira_dashboard_2/#browse-test-runs","text":"This view shows most recent test run reports. One may see test run status and execution time and duration. If a test run is failed - Details column displays the first error message. Since Rapise 7.1 to view just test runs of a specific test set run use Tag column popup menu Filter by Tag . If you run the test set with different configurations then configuration number is reflected in the tag name, e.g. QZH_ Config3 . If a test run corresponds to automatic rerun of a failed test set it has suffix Rerun , e.g. DCB_ Rerun . First three letters of the tag name is a random string. generated for test set run by RapiseLauncher. Important To enable Filter by Tag feature setup custom properties as described below .","title":"Browse Test Runs"},{"location":"Guide/spira_dashboard_2/#view-test-run-details","text":"Expanding a test run reveals the report with execution status for every test step. The details pane also contains links to download test run attachments and execution log.","title":"View Test Run Details"},{"location":"Guide/spira_dashboard_2/#test-matrix-view","text":"Direct navigation to this page produces empty result. To see the Test Matrix navigate to the Test Runs view, right click Test Run tag and choose Test Matrix from popup menu.","title":"Test Matrix View"},{"location":"Guide/spira_dashboard_2/#automation-hosts-view","text":"This view displays automation hosts configured in selected project. You may create a new one using the form on this page.","title":"Automation Hosts View"},{"location":"Guide/spira_dashboard_2/#incidents-view","text":"This view displays last 500 incidents and allows to create new ones.","title":"Incidents View"},{"location":"Guide/spira_properties_dialog/","text":"Spira Properties Dialog \u00b6 Purpose \u00b6 The purpose of this dialog is to allow you to show you the SpiraTest / SpiraTeam test case that the current Rapise test script is associated with. How to Open \u00b6 Use the menu 'Test > Spira Properties'. The dialog box will list the following: Spira Project - this displays the name of the project in SpiraTest that the test script is saved in Test Folder - this displays the name of the folder that the linked SpiraTest test case is contained in Test Case - this displays the name of the test case in SpiraTest that the test script is linked to If you want to unlink the current test script from SpiraTest (for example to save to a different SpiraTest project), click on the Unlink from Test Case button. If you have a test framework with sub-tests and you want to unlink all from SpiraTest, click on the Unlink Test and Sub-Tests from Test Cases button.","title":"Spira Properties Dialog"},{"location":"Guide/spira_properties_dialog/#spira-properties-dialog","text":"","title":"Spira Properties Dialog"},{"location":"Guide/spira_properties_dialog/#purpose","text":"The purpose of this dialog is to allow you to show you the SpiraTest / SpiraTeam test case that the current Rapise test script is associated with.","title":"Purpose"},{"location":"Guide/spira_properties_dialog/#how-to-open","text":"Use the menu 'Test > Spira Properties'. The dialog box will list the following: Spira Project - this displays the name of the project in SpiraTest that the test script is saved in Test Folder - this displays the name of the folder that the linked SpiraTest test case is contained in Test Case - this displays the name of the test case in SpiraTest that the test script is linked to If you want to unlink the current test script from SpiraTest (for example to save to a different SpiraTest project), click on the Unlink from Test Case button. If you have a test framework with sub-tests and you want to unlink all from SpiraTest, click on the Unlink Test and Sub-Tests from Test Cases button.","title":"How to Open"},{"location":"Guide/spiratest_integration/","text":"SpiraTest Integration \u00b6 Overview \u00b6 SpiraTest is a web-based quality assurance and test management system with integrated release scheduling and defect tracking. SpiraTest includes the ability to execute manual tests, record the results and log any associated defects. When you use SpiraTest with Rapise you get the ability to store your Rapise automated tests inside the central SpiraTest repository with full version control and test scheduling capabilities: You can record and create your test cases using Rapise, upload them to SpiraTest and then schedule the tests to be executed on multiple remote computers to execute the tests immediately or according to a predefined schedule. The results are then reported back to SpiraTest where they are archived as part of the project. Also the test results can be used to update requirements' test coverage and other key metrics in real-time. In addition, you can also create exploratory manual tests, save them to SpiraTest and then execute them from within Rapise. This gives you access to more powerful screen capture and annotation functionality than is possible solely using SpiraTest. Note: **SpiraTeam* is an integrated ALM Suite that includes SpiraTest as part of its functionality, so wherever you see references to SpiraTest in this section, it applies equally to SpiraTeam.* Configuring SpiraTest \u00b6 Before you can use SpiraTest to manage your Rapise automated tests you need to perform some initial configuration. This section assumes that you already have a working installation of SpiraTest or SpiraTeam v4.2 or later. If not, please refer to the SpiraTest Installation and Administration Guide for details on how to install SpiraTest. Configuring the Rapise Automation Engine \u00b6 Log in to SpiraTest as a system administrator and go into SpiraTest main Administration page and click on the Test Automation link under Integration . Note: Depending on when you first installed SpiraTest, you may already have an entry for Rapise, since versions 3.2 and later of SpiraTest automatically ship with a default entry for Rapise. Click the Add button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell SpiraTest which engine to actually use for a given test case. For Rapise this should always be set to Rapise . Once you have finished, click the Insert & Close button and you will be taken back to the Automation Engine list page, with Rapise listed as an available automation engine: Connecting to SpiraTest \u00b6 Important SpiraTest connection settings are shared between Rapise and RapiseLauncher . The first thing you need to do is to configure the connection to SpiraTest. Click Settings > SpiraTest menu: This brings up the dialog box that lets you configure the connection to SpiraTest: Enter the URL, login and password that you use to connect to SpiraTest and then click the Test button to verify that the connection information is correct. Important Since Rapise 7.0 you need to use Spira API Key instead of the password. Here is how to get the API Key . The \" Default Repository Path \" is a folder that used to store local copies of the non-absolute repositories. The Token is the identifier of the current machine that Rapise is installed on. It needs to match the 'Token' name of the corresponding 'Automation Host' in SpiraTest. You need to be running SpiraTest / SpiraTeam v4.0 or later to use the integration with Rapise. Creating a Rapise Test From a SpiraTest Test Case \u00b6 To create a new Rapise test based on the manual test steps already defined in a SpiraTest test case, go to File > New Test . This will bring up the following dialog box: Select the project that has our new test case. The list of test case folders will be displayed. You can create a new folder by clicking the New Folder button Expand the folders until you can see the desired test case: Now either create a new test case by using the New Test Case button or simply click on a test case that you previously created in Spira. In either case you will see its test steps displayed underneath (if there are any): Once you are satisfied that this is the correct test case, choose the desired methodology (Basic, Manual-only, Mobile or Web), choose browser profile if it is a Web test and choose scripting mode (RVL or JavaScript). Rapise will now create a local test folder and files based on this Spira test case. If you used an existing SpiraTest manual test case then most likely it already has test steps defined. Otherwise, if you created a new test case, there will be no manual test steps and no automated script. In which case we need to first add the manual test steps to the test case. Saving a Test to SpiraTest \u00b6 If a Rapise test is not linked to SpiraTest test case yet you can do it during Save to Spira process. To save a Rapise test into SpiraTest you need to make sure that the following has been setup first: You have a project created in SpiraTest to store the Rapise tests in. The Rapise tests will be stored in a repository located inside the Planning > Documents section of the project. The user you will be connecting to SpiraTest with has the permissions to create new document folders . You have created the Test Case in SpiraTest that the Rapise test will be associated with. This is important because without being associated to a SpiraTest Test Case, you will not be able to schedule and execute the tests using SpiraTest and RapiseLauncher. You have created an AutomationEngine in SpiraTest that has the token name \"Rapise\". This will be used to identify Rapise automation scripts inside SpiraTest. Once you have setup SpiraTest accordingly, click File > Save to Spira . That will bring up the Save to SpiraTest dialog box: The first thing you will need to do is choose the SpiraTest project from the dropdown list. This will then update the list of test case folders displayed in the top pane of the dialog box. Once you have chosen the desired project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to attach the Rapise test to: You can also create a new folder by clicking the New Folder button. When you expand the folders to display the list of contained test cases, it will display the name and ID of the test case together with an icon that indicates the type of test case: - Manual test case that has no automation script attached. (Repository Path will also be blank) - Test case that has an existing Rapise test attached. - Test case that has a non-Rapise automation script attached. You can create a new test case by using the New Test Case button or simply click on a test case that you previously created in Spira. If you are adding a new Rapise test, choose a test case that has icon (1) and doesn't have an associated Repository path. If you are updating an existing test, choose a test case that has icon (2) and the matching Repository path. Note: test cases with icon type (3) cannot be used with Rapise for adding or updating scripts. Once you have chosen the appropriate test case, click the Save/Synchronize button. That will bring up the Create New Repository in Spira dialog box: This dialog box will let you know where the Rapise script will be stored in SpiraTest and also the location of the repository local directory used to store the 'working copy' of the Rapise test. Click Create to confirm. A dialog box will be displayed that lists all the files in the local working directory and shows which ones will be checked-in to SpiraTest. The system will filter out result and report files that shouldn't be uploaded. You can change which files are filtered out and also selectively include/exclude files. Once you are happy with the list of files being checked-in, click the [OK] button: The system will display the message that it's saving the files to the server: If an error occurs during the save, a message box will be displayed, otherwise the dialog box will simply close. Opening a Test from SpiraTest \u00b6 To open a Rapise test from SpiraTest you need to make sure that the following has been setup first: You have already configured the connection to the SpiraTest service (see the instructions at the top of this page). The user you will be connecting to SpiraTest with has the permission to view the project that the tests are being stored in. Once you have setup SpiraTest accordingly, click on the File > Open Test from Spira menu. That will bring up the Open Test from SpiraTest dialog box: The first thing you will need to do is choose the SpiraTest project from the dropdown list. Once you have done that, the system will display the list of test case folders in this project. Once you have chosen the project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to open: When you expand the folders to display the list of contained test cases, it will display the name of the associated Rapise test script associated with it (to the right). Choose a test case that has the matching Rapise test case listed to the right of it (in the Repository Path column). Note: Only test cases that have an attached Rapise test script will be displayed in this view. Once you have chosen the appropriate test case, click the [Load/Synchronize] button to load the test case: A dialog box will be displayed that lists all the files on the server which will be downloaded from SpiraTest. You can change which files are to be downloaded. Once you are happy with the list of files being checked-out, click the [OK] button: The system will display the message that it's downloading the files from the server. If an error occurs during the download, a message box will be displayed, otherwise the dialog box will simply close. Synchronizing \u00b6 Note: When you have a Rapise test previously loaded from SpiraTest or saved to SpiraTest then the standard Open and Save buttons should not be used. Suppose for example, you have some files modified locally and want to update them in the SpiraTest repository. When you click on the Save/Synchronize button, Rapise will show you which files have been modified locally and which have been modified in the central repository. The synchronization dialog either allows you to upload/download the revisions or keep intact the locally modified files depending on your choice. Viewing the SpiraTest Properties of a Test \u00b6 To see which SpiraTest project and test case the current Rapise test is associated with, chose Test > Spira Properties menu item. This will bring up the Spira Properties dialog box: This will display the name of the current Rapise test together with the name of the SpiraTest project, test folder and test case that this test is associated with. If you would to save the current Rapise test into a new SpiraTest project or if you want to save it against a new test case in the same project, you must first unlink the test. To do this click on the Unlink from Test Case button. This will tell Rapise to remove the stored SpiraTest information from the .sstest file so that it can be associated with a new project and/or test case in SpiraTest. Warning: This operation cannot be undone so please make sure you really want to unlink the current test. Using the Spira Dashboard \u00b6 In addition to using the menu options described in this page, you can interact with SpiraTest using the Spira Dashboard that is available from the View > Spira Dashboard menu. This provides a convenient way of interacting with SpiraTest, allowing you to quickly create, save and open test cases from SpiraTest. Viewing the SpiraTest Repository \u00b6 If you open up the project in SpiraTest and click on the Planning > Documents link, you will be taken to the central document repository that now includes your new Rapise test folders: To see the different revisions of a file, simply click on the hyperlink for a repository item and a preview of the file is displayed: If you click on the Versions tab, the list of previous revisions will be displayed: If you click on the Testing > Test Cases tab and then click on the test case that was previously created, you will see that it has its Automation information populated: This shows you that the Create New Book -- Automated test case is linked to the corresponding Rapise test stored in the SpiraTest document repository (in the \"Create New Book Automated\" folder). You can click on the Create New Book - Automated.sstest hyperlink and it will automatically take you to the corresponding .sstest file in the SpiraTest document repository: Using Parameterized Test Cases \u00b6 Often you will have an automated test script that you want to run several times using: Different browsers (e.g. Firefox, Chrome and Internet Explorer) Different test data You can define the various test parameters for both these cases and have SpiraTest pass the values through to the Rapise automated test. For example, in the Automation (or Test Steps) section of the new test case, click the Edit Parameters link and enter the following information: We have defined four input parameters for this test case: g_book_author -- This contains the name of the author for the new book being created g_book_genre -- This contains the name of the genre for the new book being created g_book_name -- This contains the title/name of the new book being created g_browser_library -- This contains the name of the browser we should use to run the test Now for these parameters to actually affect the Rapise test, you need to make sure that the Rapise test is expecting these variables and knows how to handle them. Conventionally in Rapise, all global variables are prefixed with g_ which is why we have similarly named the SpiraTest parameter names. In the sample Library Information System tests that come with SpiraTest, we have the following code: function TestInit () { //Input variables - allows SpiraTest to configure as parameters //Provide backup values if not defined if ( 'undefined' == typeof ( g_book_name )) { g_book_name = 'The Restaurant at the end of the Universe' ; } if ( 'undefined' == typeof ( g_book_author )) { g_book_author = 'Agatha Christie' ; } if ( 'undefined' == typeof ( g_book_genre )) { g_book_genre = 'Science Fiction' ; } if ( 'undefined' == typeof ( g_browser_library )) { g_browserLibrary = \"Internet Explorer HTML\" ; } else { g_browserLibrary = g_browser_library ; } Tester . SetReportAttribute ( \"Browser\" , g_browserLibrary ); KillBrowser (); } This code will check to see if the variables are provided by SpiraTest and if not, it will use some defaults. This is useful when you want to be able to run the test directly from Rapise and from SpiraTest without having to make changes to the test script. Note, that if your test is implemented in RVL, you may define these variables right in RVL sheet using Global Variables . So same definition would look like: These global variables ( g_book_name , g_book_author , g_book_genre ) can now be used in the Rapise test script at the appropriate points in the playback. The g_browser_library variable is used to specify which browser should run the test. This is done with the following command, located in the CreateNewBook.js file: g_load_libraries = [ \"%g_browser_library:Internet Explorer HTML%\" ]; This tells Rapise to use either the g_browser_library variable (if defined) or fallback to using Internet Explorer if not. Note: Parameters in Rapise and SpiraTest are case-sensitive, so make sure that your parameter names in SpiraTest match those in Rapise exactly, including the specific case. Scheduling the Tests \u00b6 Now that we have our Rapise automated test uploaded to SpiraTest and associated with a test case, we can now schedule the test to be executed. The first thing we need to do is setup the list of automation hosts. Configuring the Automation Hosts \u00b6 When you execute Rapise automated tests from SpiraTest, you have the ability to specify which computer(s) it will be executed on. We call those different computers, the automated hosts . Each automation host needs to have a copy of Rapise installed on it. Go to Testing > Automation Hosts in SpiraTest to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything you like, but the Token field must be set to a unique name for each computer . Once you have at least one Automation Host configured, we need to next create the test sets that will be scheduled to execute on these hosts. Creating and Scheduling the Test Sets \u00b6 Inside SpiraTest, click on Testing > Test Sets to display the list of existing test sets: Now click on New Test Set to create a new test set that will contain our automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Now click on the hyperlink of our new test set to display the test set details page: Scroll down to the Test Cases section: First, click on the Add Tests hyperlink in the Test Cases tab to bring up the dialog box that lets us add new test cases to the set: Choose our Rapise automated test case and click the Add button. The test case will now be added to the set. Perform the same action again so that we have the separate instances of our Rapise test case: Since in this example we have parameterized test cases inside the automated test set, we need to set their values by right-clicking on each test case in turn and choose Edit Parameters : Enter the parameter values and click Save to commit the change. This allows you to have the same test case in the test set multiple times with different data for each instance of the test case. Now that we have the test case added to the set, we need schedule the test set for execution by filling in the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order. Status -- This needs to be set to Not Started for RapiseLauncher to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to Not Started . Type -- This needs to be set to Automated for automated testing. Executing the Test Sets \u00b6 Once you have set the various test set fields (as described above), the RapiseLauncher instance running on the assigned automation host will periodically poll SpiraTest for new test sets. Once it retrieves the new test set, it will add it to its list of test sets to be execute. Once execution begins it will change the status of the test set to In Progress , and once test execution is done, the status of the test set will change to either Completed (the automation engine has been launched and the test has completed) -- or Blocked (RapiseLauncher was not able to execute the automated test). If you want to immediately execute the test case on your local computer, instead of setting the Automation Host , Status and Planned Date fields, you can instead click the Execute icon on the test set itself. This will cause RapiseLauncher on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to Completed and the individual test cases in the set will display a status based on the results of the Rapise test: Passed -- The Rapise automated test ran successfully and all the test conditions in the test script passed. Failed -- The Rapise automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Rapise automated test did not run successfully. If you receive the Blocked status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RapiseLauncher and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as Rapise executes the appropriate tests. Once the tests have completed, you can log back into SpiraTest and see the execution status of your test sets: If you click on a Test Run in that test set, you will see the following information: If you have configured SpiraTest to capture screenshots during execution, there may also be visible in the Attachments tab of the test run: So, you now have a complete record of the automated test execution in SpiraTest, with the execution status of the appropriate test case and test steps updated, and a complete log of the testing activities. Since Rapise 6.6+ the Attachments tab also has the original report and log files attached: Block Execution \u00b6 Note This feature requires Rapise 6.6+. If you have a test set that contains several test cases and failure of some test case makes further execution of the test set unwanted you may do this by returning exit code -99 from the failed test. It can be done via WScript.Quit(-99) statement. Using RapiseLauncher \u00b6 RapiseLauncher is a separate application that installs with Rapise. It allows you to remotely schedule the automated tests in SpiraTest and have RapiseLauncher automatically invoke the tests according to the schedule. Configuring RapiseLauncher \u00b6 RapiseLauncher installs along with the main Rapise application. It can be found in the Start > Programs > Inflectra program folder: Basic Unattended Operation \u00b6 When run, the program will start minimized to the system tray and will start its polling of the server. Polling will occur every 'x' minutes (5 by default) for any automated test sets that are scheduled to be run. When time comes for a test to be launched, it will start Rapise to execute the test. Rapise will then perform the test activities and report the results back to SpiraTest. At the end of the test, the program will go back and resume scanning for tests that need to be executed. Typically (unless there is a bug in the test or application being tested) no user input is ever needed from the application itself. Client Configuration \u00b6 Important SpiraTest connection settings are shared between Rapise and RapiseLauncher. By right clicking on the system tray icon and selecting Configuration , the application's window will open to the configuration panel. The panel has the following options: SpiraTest Server Connection URL : This is the URL of the SpiraTest installation. Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. User Name : This is the SpiraTest login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. API Key : The API Key for the to the User Name above. Test : Clicking this will test the login to make sure the application can connect to the server properly. Repository -- this is the Windows folder that used to store local copies of the non-absolute repositories (downloaded from SpiraTest). Use Temp Folder for Test Execution -- this should be enabled if you are also writing tests on this computer using Rapise and you don't want RapiseLauncher to download and overwrite any changes you have made locally (that have not been saved). Server Polling Automation Host Token : This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTest will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. Automatically Run Overdue Tests : When this is checked, any tests that are pulled from the SpiraTest server that has a scheduled date in the past will be marked as Overdue. Normally, overdue tests will not be executed. With this check, they will be executed as soon as the poll is finished. Polling Frequency : How often in minutes the application will poll the SpiraTest server for updates to the automation host's schedule. The default is 60 (1 hour), and should be fine for most installations. Note that tests will still be executed on their scheduled time, this is simply how often the program will talk to the SpiraTest server to detect schedule changes. Updating the polling frequency will reset the currently running timers. Polling Read Ahead : How far ahead in minutes the program should read the schedule for the Automation host. Tests that are scheduled farther in advance will not show up as a pending test on the status screen. Options Capture screenshots during playback -- selecting this option will instruct RapiseLauncher to capture screenshots of the objects being recognized during testing and upload them to SpiraTest at the end of the execution. The screenshots will then be linked to the test run inside SpiraTest. Start at logon -- set this checkbox to let Windows automatically launch Rapise Launcher at user logon. Useful when your server is rebooted regularly. This option requires Rapise 6.3+ RDP screen width & height -- when RDP session is disconnected via RapiseLauncher tray icon menu set screen resolution to specified width and height. Since Rapise 7.2 one may use Show Log button to quickly open the RapiseLauncher log in the default text viewer. Status Screen \u00b6 The status screen is usually hidden, but can be brought up for display by double-clicking on the system tray icon: The top of the screen shows the current status, whether it's running a test or waiting to poll the server for an update. It will also show any errors present on the application, like a registration error or configuration issue. Under the status bar is a list of any pending or executing tests that are scheduled for this testing machine. The list will get cleared at every poll, so tests that have executed since the previous poll will still be on the list, and will show their execution status: Green Arrow : A green arrow indicates that the test is still running, or RapiseLauncher is waiting for a reply from Rapise. Blue Checkbox : A blue checkbox indicates that the test is completed, regardless of status of the individual test steps in the scheduled test set. Red Error : A red error indicator indicates that Rapise ran into an issue (outside of test results). In this case, any further tests will be marked as blocked, as the issue needs to be corrected within Rapise or the Rapise test script. No Indication : No indication means that the test is currently awaiting for its scheduled date to start. Note that only one test will be launched at a time, so that if two tests are scheduled at the same time, the one with the lower TestSet ID will be executed first, then as soon as it's finished, the second scheduled test will be run. By highlighting a test that has not been executed yet, you can click the Force Execute button. This will cause the selected test to have its scheduled date to the current time, causing it to be immediately executed (or, if another test is already running, next in line for execution). At any time the Force Poll button can be clicked, causing RapiseLauncher to initiate an immediate poll of the SpiraTest server to check for pending runs. The timers for the next server poll will be reset when the button is clicked. Tray Icon Menu \u00b6 Instead of operating from the application window, all functions exist on the tray icon menu as well, as well as some additional commands: Pause / Resume : The Pause/Resume option pauses or resumes the timers for polling and executing tests. If a test or server poll is already in progress, it will not cancel these. However, after the are finished, no further polls or tests will be run. Poll Now : This will force a server poll for upcoming tests, and reset the poll timer. Disconnect RDP Session : This will disconnect current RDP session and will leave the system in a state ready for execution of UI tests. After disconnect RapiseLauncher will set screen resolution according to configuration (width/height options). This feature is a convenient way to perform steps described in KB325 . Configuration : Opens the main window to the Configuration page. Help > About : Opens the About window, which displays information about Rapise Launcher. Help > View Help : Opens this help page. Exit : Will completely exit the program. Doing this will cancel any tests currently running and shut down the program. Any tests that were waiting to be executed will not execute until the program is restarted and the polling is resumed. You can double-click the tray icon to bring up the main window on the Status page. Running RapiseLauncher from a Build Script \u00b6 Normally you schedule tests in SpiraTest using the Planned Date field of the test sets and let the various instances of RapiseLauncher poll SpiraTest for upcoming tests. In addition (as described in the SpiraTest User Manual ) you can execute a test set on the local machine immediately by clicking the Execute button within SpiraTeam. However there are situations where you want to be able to launch an automated Rapise test script from an external batch file or build script (e.g. as part of a continuous integration environment) and have those tests report their results back into SpiraTest. You can achieve this by using the special command-line argument --testset which is passed to RapiseLauncher. For more details on this parameter see the next section. Command line arguments \u00b6 For debugging and additional options when running the program, the following command-line arguments are available: -config:[Path to RepositoryConnection.xml] allows defining path to custom RapiseLauncher configuration. It may be used when RapiseLauncher is executed in remote pipeline. You may create RepositoryConnection.xml on you dev host (by setting the configuration using standard settings dialog), and then copy the configured file from C:\\ProgramData\\Inflectra\\Rapise\\RepositoryConnection.xml to your source tree and pass it using this parameter. -minimized starts the application in minimized mode. Normal action is to show the list of pending runs. -paused starts the application with timers Paused instead of active. -param:[name]=[value] sets a global variable for every executed test. For example: -param:g_enableVideoRecording=true Param argument can be used multiple times: -param:g_verboseLevel=3 -param:g_enableVideoRecording=true -poll forces the program to do an initial poll upon startup. Normal action is to wait the pending time before doing the initial poll. -project:[Project ID] allows you to tell RapiseLauncher which project the test set specified with the -testset argument lives in. This speeds up the time it takes Rapise to locate and retrieve the test set (optional). -testset:[Test Set ID] allows you to tell RapiseLauncher to execute a specific test set on the remote computer (e.g. -testset:45 runs test set TX00045 ). Since Rapise 6.7 one may pass a comma separated list of test set Ids (e.g. -testset:45,46,47 ). Listed test sets are executed sequentially. -trace enables tracelogging to the EventLog for debugging and watching tests execute. -width:[width] -height:[height] sets the screen resolution. Width must be in the range [1024, 7680] , height - [768, 4320] . Allowed width/height combinations are determined by the operating system where you run RapiseLauncher. Most typical resolutions are [1024, 768], [1280, 720], [1920, 1080] filename must be the last item on the command line. This is a TST file downloaded from SpiraTest to start immediate execution on. Optional. Record Playback Videos \u00b6 Note This feature requires Rapise 6.6+. RapiseLauncher can record video of test playback. To enable video capture pass g_enableVideoRecording=true via a Test Case parameter . For video recording RapiseLauncher uses Microsoft.TestPlatform NuGet package.When this feature is used for the first time RapiseLauncher downloads Microsoft.TestPlatform using nuget.exe and puts it into <Public Documents>\\Rapise\\VideoRecorder folder. By default the video recorder is executed with these parameters: -noaudio -bitRate 512 -frameRate 2 You may change them by defining a Test Case parameter with name g_videoRecorderArguments . Recorded video is attached to the test run as ScreenCapture.wmv. Using Test Set Attachments \u00b6 You may attach some data to Test Set and use it during test execution. It is a convenient way to pass configuration and data files for the test set. It may be used as an alternative to defining Spira Configurations. You may open test attachment using the %ARTIFACTS% environment variable. If this is a standalone test then ARTIFACTS resolves to WORKDIR (framework root). When executed from Spira it will be a separate temp folder where RapiseLauncher downloaded everything attached to the Test Set. Example Usage: Global . GetProperty ( \"Url\" , \"http://default/url\" , \"%ARTIFACTS%/Config.xlsx\" ); So by default it would load Config.xlsx from the test framework root, but in the RapiseLauncher mode it will open the config file from the temp location where everything is downloaded. And if Test Set has file Config.xlsx attached then will be used to read the Url property. Parameters Passed from RapiseLauncher to Rapise \u00b6 When RapiseLauncher runs a test it passes a bunch of global variables to it. Those variables describe project, test set, test case and release scope of the test. See this KB article for details. See Also \u00b6 Using Rapise with SpiraTest (video) Data Driven Testing with Test Configurations RapiseLauncher extension for Azure DevOps.","title":"SpiraTest Integration"},{"location":"Guide/spiratest_integration/#spiratest-integration","text":"","title":"SpiraTest Integration"},{"location":"Guide/spiratest_integration/#overview","text":"SpiraTest is a web-based quality assurance and test management system with integrated release scheduling and defect tracking. SpiraTest includes the ability to execute manual tests, record the results and log any associated defects. When you use SpiraTest with Rapise you get the ability to store your Rapise automated tests inside the central SpiraTest repository with full version control and test scheduling capabilities: You can record and create your test cases using Rapise, upload them to SpiraTest and then schedule the tests to be executed on multiple remote computers to execute the tests immediately or according to a predefined schedule. The results are then reported back to SpiraTest where they are archived as part of the project. Also the test results can be used to update requirements' test coverage and other key metrics in real-time. In addition, you can also create exploratory manual tests, save them to SpiraTest and then execute them from within Rapise. This gives you access to more powerful screen capture and annotation functionality than is possible solely using SpiraTest. Note: **SpiraTeam* is an integrated ALM Suite that includes SpiraTest as part of its functionality, so wherever you see references to SpiraTest in this section, it applies equally to SpiraTeam.*","title":"Overview"},{"location":"Guide/spiratest_integration/#configuring-spiratest","text":"Before you can use SpiraTest to manage your Rapise automated tests you need to perform some initial configuration. This section assumes that you already have a working installation of SpiraTest or SpiraTeam v4.2 or later. If not, please refer to the SpiraTest Installation and Administration Guide for details on how to install SpiraTest.","title":"Configuring SpiraTest"},{"location":"Guide/spiratest_integration/#configuring-the-rapise-automation-engine","text":"Log in to SpiraTest as a system administrator and go into SpiraTest main Administration page and click on the Test Automation link under Integration . Note: Depending on when you first installed SpiraTest, you may already have an entry for Rapise, since versions 3.2 and later of SpiraTest automatically ship with a default entry for Rapise. Click the Add button to enter the new test automation engine details page. The fields required are as follows: Name : This is the short display name of the automation engine. It can be anything that is meaningful to your users. Description : This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional) Active : If checked, the engine is active and able to be used for any project. Token : This needs to be the assigned unique token for the automation engine and is used to tell SpiraTest which engine to actually use for a given test case. For Rapise this should always be set to Rapise . Once you have finished, click the Insert & Close button and you will be taken back to the Automation Engine list page, with Rapise listed as an available automation engine:","title":"Configuring the Rapise Automation Engine"},{"location":"Guide/spiratest_integration/#connecting-to-spiratest","text":"Important SpiraTest connection settings are shared between Rapise and RapiseLauncher . The first thing you need to do is to configure the connection to SpiraTest. Click Settings > SpiraTest menu: This brings up the dialog box that lets you configure the connection to SpiraTest: Enter the URL, login and password that you use to connect to SpiraTest and then click the Test button to verify that the connection information is correct. Important Since Rapise 7.0 you need to use Spira API Key instead of the password. Here is how to get the API Key . The \" Default Repository Path \" is a folder that used to store local copies of the non-absolute repositories. The Token is the identifier of the current machine that Rapise is installed on. It needs to match the 'Token' name of the corresponding 'Automation Host' in SpiraTest. You need to be running SpiraTest / SpiraTeam v4.0 or later to use the integration with Rapise.","title":"Connecting to SpiraTest"},{"location":"Guide/spiratest_integration/#creating-a-rapise-test-from-a-spiratest-test-case","text":"To create a new Rapise test based on the manual test steps already defined in a SpiraTest test case, go to File > New Test . This will bring up the following dialog box: Select the project that has our new test case. The list of test case folders will be displayed. You can create a new folder by clicking the New Folder button Expand the folders until you can see the desired test case: Now either create a new test case by using the New Test Case button or simply click on a test case that you previously created in Spira. In either case you will see its test steps displayed underneath (if there are any): Once you are satisfied that this is the correct test case, choose the desired methodology (Basic, Manual-only, Mobile or Web), choose browser profile if it is a Web test and choose scripting mode (RVL or JavaScript). Rapise will now create a local test folder and files based on this Spira test case. If you used an existing SpiraTest manual test case then most likely it already has test steps defined. Otherwise, if you created a new test case, there will be no manual test steps and no automated script. In which case we need to first add the manual test steps to the test case.","title":"Creating a Rapise Test From a SpiraTest Test Case"},{"location":"Guide/spiratest_integration/#saving-a-test-to-spiratest","text":"If a Rapise test is not linked to SpiraTest test case yet you can do it during Save to Spira process. To save a Rapise test into SpiraTest you need to make sure that the following has been setup first: You have a project created in SpiraTest to store the Rapise tests in. The Rapise tests will be stored in a repository located inside the Planning > Documents section of the project. The user you will be connecting to SpiraTest with has the permissions to create new document folders . You have created the Test Case in SpiraTest that the Rapise test will be associated with. This is important because without being associated to a SpiraTest Test Case, you will not be able to schedule and execute the tests using SpiraTest and RapiseLauncher. You have created an AutomationEngine in SpiraTest that has the token name \"Rapise\". This will be used to identify Rapise automation scripts inside SpiraTest. Once you have setup SpiraTest accordingly, click File > Save to Spira . That will bring up the Save to SpiraTest dialog box: The first thing you will need to do is choose the SpiraTest project from the dropdown list. This will then update the list of test case folders displayed in the top pane of the dialog box. Once you have chosen the desired project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to attach the Rapise test to: You can also create a new folder by clicking the New Folder button. When you expand the folders to display the list of contained test cases, it will display the name and ID of the test case together with an icon that indicates the type of test case: - Manual test case that has no automation script attached. (Repository Path will also be blank) - Test case that has an existing Rapise test attached. - Test case that has a non-Rapise automation script attached. You can create a new test case by using the New Test Case button or simply click on a test case that you previously created in Spira. If you are adding a new Rapise test, choose a test case that has icon (1) and doesn't have an associated Repository path. If you are updating an existing test, choose a test case that has icon (2) and the matching Repository path. Note: test cases with icon type (3) cannot be used with Rapise for adding or updating scripts. Once you have chosen the appropriate test case, click the Save/Synchronize button. That will bring up the Create New Repository in Spira dialog box: This dialog box will let you know where the Rapise script will be stored in SpiraTest and also the location of the repository local directory used to store the 'working copy' of the Rapise test. Click Create to confirm. A dialog box will be displayed that lists all the files in the local working directory and shows which ones will be checked-in to SpiraTest. The system will filter out result and report files that shouldn't be uploaded. You can change which files are filtered out and also selectively include/exclude files. Once you are happy with the list of files being checked-in, click the [OK] button: The system will display the message that it's saving the files to the server: If an error occurs during the save, a message box will be displayed, otherwise the dialog box will simply close.","title":"Saving a Test to SpiraTest"},{"location":"Guide/spiratest_integration/#opening-a-test-from-spiratest","text":"To open a Rapise test from SpiraTest you need to make sure that the following has been setup first: You have already configured the connection to the SpiraTest service (see the instructions at the top of this page). The user you will be connecting to SpiraTest with has the permission to view the project that the tests are being stored in. Once you have setup SpiraTest accordingly, click on the File > Open Test from Spira menu. That will bring up the Open Test from SpiraTest dialog box: The first thing you will need to do is choose the SpiraTest project from the dropdown list. Once you have done that, the system will display the list of test case folders in this project. Once you have chosen the project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to open: When you expand the folders to display the list of contained test cases, it will display the name of the associated Rapise test script associated with it (to the right). Choose a test case that has the matching Rapise test case listed to the right of it (in the Repository Path column). Note: Only test cases that have an attached Rapise test script will be displayed in this view. Once you have chosen the appropriate test case, click the [Load/Synchronize] button to load the test case: A dialog box will be displayed that lists all the files on the server which will be downloaded from SpiraTest. You can change which files are to be downloaded. Once you are happy with the list of files being checked-out, click the [OK] button: The system will display the message that it's downloading the files from the server. If an error occurs during the download, a message box will be displayed, otherwise the dialog box will simply close.","title":"Opening a Test from SpiraTest"},{"location":"Guide/spiratest_integration/#synchronizing","text":"Note: When you have a Rapise test previously loaded from SpiraTest or saved to SpiraTest then the standard Open and Save buttons should not be used. Suppose for example, you have some files modified locally and want to update them in the SpiraTest repository. When you click on the Save/Synchronize button, Rapise will show you which files have been modified locally and which have been modified in the central repository. The synchronization dialog either allows you to upload/download the revisions or keep intact the locally modified files depending on your choice.","title":"Synchronizing"},{"location":"Guide/spiratest_integration/#viewing-the-spiratest-properties-of-a-test","text":"To see which SpiraTest project and test case the current Rapise test is associated with, chose Test > Spira Properties menu item. This will bring up the Spira Properties dialog box: This will display the name of the current Rapise test together with the name of the SpiraTest project, test folder and test case that this test is associated with. If you would to save the current Rapise test into a new SpiraTest project or if you want to save it against a new test case in the same project, you must first unlink the test. To do this click on the Unlink from Test Case button. This will tell Rapise to remove the stored SpiraTest information from the .sstest file so that it can be associated with a new project and/or test case in SpiraTest. Warning: This operation cannot be undone so please make sure you really want to unlink the current test.","title":"Viewing the SpiraTest Properties of a Test"},{"location":"Guide/spiratest_integration/#using-the-spira-dashboard","text":"In addition to using the menu options described in this page, you can interact with SpiraTest using the Spira Dashboard that is available from the View > Spira Dashboard menu. This provides a convenient way of interacting with SpiraTest, allowing you to quickly create, save and open test cases from SpiraTest.","title":"Using the Spira Dashboard"},{"location":"Guide/spiratest_integration/#viewing-the-spiratest-repository","text":"If you open up the project in SpiraTest and click on the Planning > Documents link, you will be taken to the central document repository that now includes your new Rapise test folders: To see the different revisions of a file, simply click on the hyperlink for a repository item and a preview of the file is displayed: If you click on the Versions tab, the list of previous revisions will be displayed: If you click on the Testing > Test Cases tab and then click on the test case that was previously created, you will see that it has its Automation information populated: This shows you that the Create New Book -- Automated test case is linked to the corresponding Rapise test stored in the SpiraTest document repository (in the \"Create New Book Automated\" folder). You can click on the Create New Book - Automated.sstest hyperlink and it will automatically take you to the corresponding .sstest file in the SpiraTest document repository:","title":"Viewing the SpiraTest Repository"},{"location":"Guide/spiratest_integration/#using-parameterized-test-cases","text":"Often you will have an automated test script that you want to run several times using: Different browsers (e.g. Firefox, Chrome and Internet Explorer) Different test data You can define the various test parameters for both these cases and have SpiraTest pass the values through to the Rapise automated test. For example, in the Automation (or Test Steps) section of the new test case, click the Edit Parameters link and enter the following information: We have defined four input parameters for this test case: g_book_author -- This contains the name of the author for the new book being created g_book_genre -- This contains the name of the genre for the new book being created g_book_name -- This contains the title/name of the new book being created g_browser_library -- This contains the name of the browser we should use to run the test Now for these parameters to actually affect the Rapise test, you need to make sure that the Rapise test is expecting these variables and knows how to handle them. Conventionally in Rapise, all global variables are prefixed with g_ which is why we have similarly named the SpiraTest parameter names. In the sample Library Information System tests that come with SpiraTest, we have the following code: function TestInit () { //Input variables - allows SpiraTest to configure as parameters //Provide backup values if not defined if ( 'undefined' == typeof ( g_book_name )) { g_book_name = 'The Restaurant at the end of the Universe' ; } if ( 'undefined' == typeof ( g_book_author )) { g_book_author = 'Agatha Christie' ; } if ( 'undefined' == typeof ( g_book_genre )) { g_book_genre = 'Science Fiction' ; } if ( 'undefined' == typeof ( g_browser_library )) { g_browserLibrary = \"Internet Explorer HTML\" ; } else { g_browserLibrary = g_browser_library ; } Tester . SetReportAttribute ( \"Browser\" , g_browserLibrary ); KillBrowser (); } This code will check to see if the variables are provided by SpiraTest and if not, it will use some defaults. This is useful when you want to be able to run the test directly from Rapise and from SpiraTest without having to make changes to the test script. Note, that if your test is implemented in RVL, you may define these variables right in RVL sheet using Global Variables . So same definition would look like: These global variables ( g_book_name , g_book_author , g_book_genre ) can now be used in the Rapise test script at the appropriate points in the playback. The g_browser_library variable is used to specify which browser should run the test. This is done with the following command, located in the CreateNewBook.js file: g_load_libraries = [ \"%g_browser_library:Internet Explorer HTML%\" ]; This tells Rapise to use either the g_browser_library variable (if defined) or fallback to using Internet Explorer if not. Note: Parameters in Rapise and SpiraTest are case-sensitive, so make sure that your parameter names in SpiraTest match those in Rapise exactly, including the specific case.","title":"Using Parameterized Test Cases"},{"location":"Guide/spiratest_integration/#scheduling-the-tests","text":"Now that we have our Rapise automated test uploaded to SpiraTest and associated with a test case, we can now schedule the test to be executed. The first thing we need to do is setup the list of automation hosts.","title":"Scheduling the Tests"},{"location":"Guide/spiratest_integration/#configuring-the-automation-hosts","text":"When you execute Rapise automated tests from SpiraTest, you have the ability to specify which computer(s) it will be executed on. We call those different computers, the automated hosts . Each automation host needs to have a copy of Rapise installed on it. Go to Testing > Automation Hosts in SpiraTest to display the list of automation hosts: Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything you like, but the Token field must be set to a unique name for each computer . Once you have at least one Automation Host configured, we need to next create the test sets that will be scheduled to execute on these hosts.","title":"Configuring the Automation Hosts"},{"location":"Guide/spiratest_integration/#creating-and-scheduling-the-test-sets","text":"Inside SpiraTest, click on Testing > Test Sets to display the list of existing test sets: Now click on New Test Set to create a new test set that will contain our automated test case: Note: Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case. Now click on the hyperlink of our new test set to display the test set details page: Scroll down to the Test Cases section: First, click on the Add Tests hyperlink in the Test Cases tab to bring up the dialog box that lets us add new test cases to the set: Choose our Rapise automated test case and click the Add button. The test case will now be added to the set. Perform the same action again so that we have the separate instances of our Rapise test case: Since in this example we have parameterized test cases inside the automated test set, we need to set their values by right-clicking on each test case in turn and choose Edit Parameters : Enter the parameter values and click Save to commit the change. This allows you to have the same test case in the test set multiple times with different data for each instance of the test case. Now that we have the test case added to the set, we need schedule the test set for execution by filling in the following fields: Automation Host -- This needs to be set to the name of the automation host that will be running the automated test set. Planned Date -- The date and time that you want the scenario to begin. Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order. Status -- This needs to be set to Not Started for RapiseLauncher to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to Not Started . Type -- This needs to be set to Automated for automated testing.","title":"Creating and Scheduling the Test Sets"},{"location":"Guide/spiratest_integration/#executing-the-test-sets","text":"Once you have set the various test set fields (as described above), the RapiseLauncher instance running on the assigned automation host will periodically poll SpiraTest for new test sets. Once it retrieves the new test set, it will add it to its list of test sets to be execute. Once execution begins it will change the status of the test set to In Progress , and once test execution is done, the status of the test set will change to either Completed (the automation engine has been launched and the test has completed) -- or Blocked (RapiseLauncher was not able to execute the automated test). If you want to immediately execute the test case on your local computer, instead of setting the Automation Host , Status and Planned Date fields, you can instead click the Execute icon on the test set itself. This will cause RapiseLauncher on the local computer to immediately start executing the current test set. In either case, once all the test cases in the test set have been completed, the status of the test set will switch to Completed and the individual test cases in the set will display a status based on the results of the Rapise test: Passed -- The Rapise automated test ran successfully and all the test conditions in the test script passed. Failed -- The Rapise automated test ran successfully, but at least one test condition in the test script failed. Blocked -- The Rapise automated test did not run successfully. If you receive the Blocked status for either the test set or the test cases you should open up the Windows Application Event Log on the computer running RapiseLauncher and look in the event log for error messages. Note: While the tests are executing you may see browser or application windows launch as Rapise executes the appropriate tests. Once the tests have completed, you can log back into SpiraTest and see the execution status of your test sets: If you click on a Test Run in that test set, you will see the following information: If you have configured SpiraTest to capture screenshots during execution, there may also be visible in the Attachments tab of the test run: So, you now have a complete record of the automated test execution in SpiraTest, with the execution status of the appropriate test case and test steps updated, and a complete log of the testing activities. Since Rapise 6.6+ the Attachments tab also has the original report and log files attached:","title":"Executing the Test Sets"},{"location":"Guide/spiratest_integration/#block-execution","text":"Note This feature requires Rapise 6.6+. If you have a test set that contains several test cases and failure of some test case makes further execution of the test set unwanted you may do this by returning exit code -99 from the failed test. It can be done via WScript.Quit(-99) statement.","title":"Block Execution"},{"location":"Guide/spiratest_integration/#using-rapiselauncher","text":"RapiseLauncher is a separate application that installs with Rapise. It allows you to remotely schedule the automated tests in SpiraTest and have RapiseLauncher automatically invoke the tests according to the schedule.","title":"Using RapiseLauncher"},{"location":"Guide/spiratest_integration/#configuring-rapiselauncher","text":"RapiseLauncher installs along with the main Rapise application. It can be found in the Start > Programs > Inflectra program folder:","title":"Configuring RapiseLauncher"},{"location":"Guide/spiratest_integration/#basic-unattended-operation","text":"When run, the program will start minimized to the system tray and will start its polling of the server. Polling will occur every 'x' minutes (5 by default) for any automated test sets that are scheduled to be run. When time comes for a test to be launched, it will start Rapise to execute the test. Rapise will then perform the test activities and report the results back to SpiraTest. At the end of the test, the program will go back and resume scanning for tests that need to be executed. Typically (unless there is a bug in the test or application being tested) no user input is ever needed from the application itself.","title":"Basic Unattended Operation"},{"location":"Guide/spiratest_integration/#client-configuration","text":"Important SpiraTest connection settings are shared between Rapise and RapiseLauncher. By right clicking on the system tray icon and selecting Configuration , the application's window will open to the configuration panel. The panel has the following options: SpiraTest Server Connection URL : This is the URL of the SpiraTest installation. Be sure to not put /Login.aspx or any other page in the string, this should be just the root URL of the application's install. User Name : This is the SpiraTest login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out. API Key : The API Key for the to the User Name above. Test : Clicking this will test the login to make sure the application can connect to the server properly. Repository -- this is the Windows folder that used to store local copies of the non-absolute repositories (downloaded from SpiraTest). Use Temp Folder for Test Execution -- this should be enabled if you are also writing tests on this computer using Rapise and you don't want RapiseLauncher to download and overwrite any changes you have made locally (that have not been saved). Server Polling Automation Host Token : This field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTest will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines. Important : This field must match the string that is entered into the Automation Host Details screen in the Token : field, or scheduled tests will not be recognized. Automatically Run Overdue Tests : When this is checked, any tests that are pulled from the SpiraTest server that has a scheduled date in the past will be marked as Overdue. Normally, overdue tests will not be executed. With this check, they will be executed as soon as the poll is finished. Polling Frequency : How often in minutes the application will poll the SpiraTest server for updates to the automation host's schedule. The default is 60 (1 hour), and should be fine for most installations. Note that tests will still be executed on their scheduled time, this is simply how often the program will talk to the SpiraTest server to detect schedule changes. Updating the polling frequency will reset the currently running timers. Polling Read Ahead : How far ahead in minutes the program should read the schedule for the Automation host. Tests that are scheduled farther in advance will not show up as a pending test on the status screen. Options Capture screenshots during playback -- selecting this option will instruct RapiseLauncher to capture screenshots of the objects being recognized during testing and upload them to SpiraTest at the end of the execution. The screenshots will then be linked to the test run inside SpiraTest. Start at logon -- set this checkbox to let Windows automatically launch Rapise Launcher at user logon. Useful when your server is rebooted regularly. This option requires Rapise 6.3+ RDP screen width & height -- when RDP session is disconnected via RapiseLauncher tray icon menu set screen resolution to specified width and height. Since Rapise 7.2 one may use Show Log button to quickly open the RapiseLauncher log in the default text viewer.","title":"Client Configuration"},{"location":"Guide/spiratest_integration/#status-screen","text":"The status screen is usually hidden, but can be brought up for display by double-clicking on the system tray icon: The top of the screen shows the current status, whether it's running a test or waiting to poll the server for an update. It will also show any errors present on the application, like a registration error or configuration issue. Under the status bar is a list of any pending or executing tests that are scheduled for this testing machine. The list will get cleared at every poll, so tests that have executed since the previous poll will still be on the list, and will show their execution status: Green Arrow : A green arrow indicates that the test is still running, or RapiseLauncher is waiting for a reply from Rapise. Blue Checkbox : A blue checkbox indicates that the test is completed, regardless of status of the individual test steps in the scheduled test set. Red Error : A red error indicator indicates that Rapise ran into an issue (outside of test results). In this case, any further tests will be marked as blocked, as the issue needs to be corrected within Rapise or the Rapise test script. No Indication : No indication means that the test is currently awaiting for its scheduled date to start. Note that only one test will be launched at a time, so that if two tests are scheduled at the same time, the one with the lower TestSet ID will be executed first, then as soon as it's finished, the second scheduled test will be run. By highlighting a test that has not been executed yet, you can click the Force Execute button. This will cause the selected test to have its scheduled date to the current time, causing it to be immediately executed (or, if another test is already running, next in line for execution). At any time the Force Poll button can be clicked, causing RapiseLauncher to initiate an immediate poll of the SpiraTest server to check for pending runs. The timers for the next server poll will be reset when the button is clicked.","title":"Status Screen"},{"location":"Guide/spiratest_integration/#tray-icon-menu","text":"Instead of operating from the application window, all functions exist on the tray icon menu as well, as well as some additional commands: Pause / Resume : The Pause/Resume option pauses or resumes the timers for polling and executing tests. If a test or server poll is already in progress, it will not cancel these. However, after the are finished, no further polls or tests will be run. Poll Now : This will force a server poll for upcoming tests, and reset the poll timer. Disconnect RDP Session : This will disconnect current RDP session and will leave the system in a state ready for execution of UI tests. After disconnect RapiseLauncher will set screen resolution according to configuration (width/height options). This feature is a convenient way to perform steps described in KB325 . Configuration : Opens the main window to the Configuration page. Help > About : Opens the About window, which displays information about Rapise Launcher. Help > View Help : Opens this help page. Exit : Will completely exit the program. Doing this will cancel any tests currently running and shut down the program. Any tests that were waiting to be executed will not execute until the program is restarted and the polling is resumed. You can double-click the tray icon to bring up the main window on the Status page.","title":"Tray Icon Menu"},{"location":"Guide/spiratest_integration/#running-rapiselauncher-from-a-build-script","text":"Normally you schedule tests in SpiraTest using the Planned Date field of the test sets and let the various instances of RapiseLauncher poll SpiraTest for upcoming tests. In addition (as described in the SpiraTest User Manual ) you can execute a test set on the local machine immediately by clicking the Execute button within SpiraTeam. However there are situations where you want to be able to launch an automated Rapise test script from an external batch file or build script (e.g. as part of a continuous integration environment) and have those tests report their results back into SpiraTest. You can achieve this by using the special command-line argument --testset which is passed to RapiseLauncher. For more details on this parameter see the next section.","title":"Running RapiseLauncher from a Build Script"},{"location":"Guide/spiratest_integration/#command-line-arguments","text":"For debugging and additional options when running the program, the following command-line arguments are available: -config:[Path to RepositoryConnection.xml] allows defining path to custom RapiseLauncher configuration. It may be used when RapiseLauncher is executed in remote pipeline. You may create RepositoryConnection.xml on you dev host (by setting the configuration using standard settings dialog), and then copy the configured file from C:\\ProgramData\\Inflectra\\Rapise\\RepositoryConnection.xml to your source tree and pass it using this parameter. -minimized starts the application in minimized mode. Normal action is to show the list of pending runs. -paused starts the application with timers Paused instead of active. -param:[name]=[value] sets a global variable for every executed test. For example: -param:g_enableVideoRecording=true Param argument can be used multiple times: -param:g_verboseLevel=3 -param:g_enableVideoRecording=true -poll forces the program to do an initial poll upon startup. Normal action is to wait the pending time before doing the initial poll. -project:[Project ID] allows you to tell RapiseLauncher which project the test set specified with the -testset argument lives in. This speeds up the time it takes Rapise to locate and retrieve the test set (optional). -testset:[Test Set ID] allows you to tell RapiseLauncher to execute a specific test set on the remote computer (e.g. -testset:45 runs test set TX00045 ). Since Rapise 6.7 one may pass a comma separated list of test set Ids (e.g. -testset:45,46,47 ). Listed test sets are executed sequentially. -trace enables tracelogging to the EventLog for debugging and watching tests execute. -width:[width] -height:[height] sets the screen resolution. Width must be in the range [1024, 7680] , height - [768, 4320] . Allowed width/height combinations are determined by the operating system where you run RapiseLauncher. Most typical resolutions are [1024, 768], [1280, 720], [1920, 1080] filename must be the last item on the command line. This is a TST file downloaded from SpiraTest to start immediate execution on. Optional.","title":"Command line arguments"},{"location":"Guide/spiratest_integration/#record-playback-videos","text":"Note This feature requires Rapise 6.6+. RapiseLauncher can record video of test playback. To enable video capture pass g_enableVideoRecording=true via a Test Case parameter . For video recording RapiseLauncher uses Microsoft.TestPlatform NuGet package.When this feature is used for the first time RapiseLauncher downloads Microsoft.TestPlatform using nuget.exe and puts it into <Public Documents>\\Rapise\\VideoRecorder folder. By default the video recorder is executed with these parameters: -noaudio -bitRate 512 -frameRate 2 You may change them by defining a Test Case parameter with name g_videoRecorderArguments . Recorded video is attached to the test run as ScreenCapture.wmv.","title":"Record Playback Videos"},{"location":"Guide/spiratest_integration/#using-test-set-attachments","text":"You may attach some data to Test Set and use it during test execution. It is a convenient way to pass configuration and data files for the test set. It may be used as an alternative to defining Spira Configurations. You may open test attachment using the %ARTIFACTS% environment variable. If this is a standalone test then ARTIFACTS resolves to WORKDIR (framework root). When executed from Spira it will be a separate temp folder where RapiseLauncher downloaded everything attached to the Test Set. Example Usage: Global . GetProperty ( \"Url\" , \"http://default/url\" , \"%ARTIFACTS%/Config.xlsx\" ); So by default it would load Config.xlsx from the test framework root, but in the RapiseLauncher mode it will open the config file from the temp location where everything is downloaded. And if Test Set has file Config.xlsx attached then will be used to read the Url property.","title":"Using Test Set Attachments"},{"location":"Guide/spiratest_integration/#parameters-passed-from-rapiselauncher-to-rapise","text":"When RapiseLauncher runs a test it passes a bunch of global variables to it. Those variables describe project, test set, test case and release scope of the test. See this KB article for details.","title":"Parameters Passed from RapiseLauncher to Rapise"},{"location":"Guide/spiratest_integration/#see-also","text":"Using Rapise with SpiraTest (video) Data Driven Testing with Test Configurations RapiseLauncher extension for Azure DevOps.","title":"See Also"},{"location":"Guide/spreadsheet_editor/","text":"Spreadsheet Editor \u00b6 Purpose \u00b6 The Spreadsheet editor lets you view and edit Microsoft Excel spreadsheet files (.xls or .xlsx). This very convenient when you are doing data-driven testing and need to create or edit the test data directly inside Rapise. How to Open \u00b6 Use the Test Files View to open an Excel file. The Excel file will be opened in a Spreadsheet Viewer, in the Content View . The Spreadsheet tab of the Ribbon will also open. Formula Bar \u00b6 The formula bar lets you see/edit the contents of the currently selected cell as well as enter more complex Excel calculations/formulas: Spreadsheet Grid \u00b6 The main spreadsheet grid lets you see the cells in the spreadsheet, select a range and use the Spreadsheet ribbon to change the format: Cell Formatting \u00b6 By default all cells have General format. It means that format of a cell value is determined automatically during read operation. It may lead to undesired effects. For example, if a cell contains date 5/1/2020 , the value read will be 43952 . If you want to get cell value in text format you may change the format to Text using Format Cells dialog. Then you need to re-enter the date. After that Rapise will read the date exactly as 5/1/2020 .","title":"Spreadsheet Viewer"},{"location":"Guide/spreadsheet_editor/#spreadsheet-editor","text":"","title":"Spreadsheet Editor"},{"location":"Guide/spreadsheet_editor/#purpose","text":"The Spreadsheet editor lets you view and edit Microsoft Excel spreadsheet files (.xls or .xlsx). This very convenient when you are doing data-driven testing and need to create or edit the test data directly inside Rapise.","title":"Purpose"},{"location":"Guide/spreadsheet_editor/#how-to-open","text":"Use the Test Files View to open an Excel file. The Excel file will be opened in a Spreadsheet Viewer, in the Content View . The Spreadsheet tab of the Ribbon will also open.","title":"How to Open"},{"location":"Guide/spreadsheet_editor/#formula-bar","text":"The formula bar lets you see/edit the contents of the currently selected cell as well as enter more complex Excel calculations/formulas:","title":"Formula Bar"},{"location":"Guide/spreadsheet_editor/#spreadsheet-grid","text":"The main spreadsheet grid lets you see the cells in the spreadsheet, select a range and use the Spreadsheet ribbon to change the format:","title":"Spreadsheet Grid"},{"location":"Guide/spreadsheet_editor/#cell-formatting","text":"By default all cells have General format. It means that format of a cell value is determined automatically during read operation. It may lead to undesired effects. For example, if a cell contains date 5/1/2020 , the value read will be 43952 . If you want to get cell value in text format you may change the format to Text using Format Cells dialog. Then you need to re-enter the date. After that Rapise will read the date exactly as 5/1/2020 .","title":"Cell Formatting"},{"location":"Guide/start_page/","text":"Start Page \u00b6 Purpose \u00b6 The Start Page is intended to be a convenient entry point for Rapise beginners. The Start Page provides: Links to tutorials and webinars. Links to sample tests. This displays a list of available Rapise samples. Some samples are shipped with Rapise while others are provided from the online public repository. The Fetch Samples button is used to download/update additional samples from online public repository. How to Open \u00b6 The Start Page opens automatically with Rapise. This behavior can be modified in the Options dialog using the ShowStartPageOnStartup setting.","title":"Start Page"},{"location":"Guide/start_page/#start-page","text":"","title":"Start Page"},{"location":"Guide/start_page/#purpose","text":"The Start Page is intended to be a convenient entry point for Rapise beginners. The Start Page provides: Links to tutorials and webinars. Links to sample tests. This displays a list of available Rapise samples. Some samples are shipped with Rapise while others are provided from the online public repository. The Fetch Samples button is used to download/update additional samples from online public repository.","title":"Purpose"},{"location":"Guide/start_page/#how-to-open","text":"The Start Page opens automatically with Rapise. This behavior can be modified in the Options dialog using the ShowStartPageOnStartup setting.","title":"How to Open"},{"location":"Guide/syntax_checking/","text":"Syntax Checking \u00b6 Purpose \u00b6 An editor performs Syntax Checking and notifies the user of syntax errors in their program/script. Usage \u00b6 Rapise performs Syntax Checking as you type into the Source Editor . Messages regarding syntax errors can be found in the Warning View . For example, you begin writing a function: We have a typo here. We used } instead of ) . Once the error is corrected, the warning view clears automatically: See Also \u00b6 Source Editor","title":"Syntax Checking"},{"location":"Guide/syntax_checking/#syntax-checking","text":"","title":"Syntax Checking"},{"location":"Guide/syntax_checking/#purpose","text":"An editor performs Syntax Checking and notifies the user of syntax errors in their program/script.","title":"Purpose"},{"location":"Guide/syntax_checking/#usage","text":"Rapise performs Syntax Checking as you type into the Source Editor . Messages regarding syntax errors can be found in the Warning View . For example, you begin writing a function: We have a typo here. We used } instead of ) . Once the error is corrected, the warning view clears automatically:","title":"Usage"},{"location":"Guide/syntax_checking/#see-also","text":"Source Editor","title":"See Also"},{"location":"Guide/syntax_highlighting/","text":"Syntax Highlighting \u00b6 Purpose \u00b6 With Syntax Highlighting , words in a program are displayed so as to immediately indicate their function. Reserved words, variables, literals, and comments may be differentiated by color, boldness, underline etc. Syntax Highlighting makes programs easier to read and modify. Usage \u00b6 Every javascript file opened in Rapise will display with Syntax Highlighting : See Also \u00b6 Source Editor","title":"Syntax Highlighting"},{"location":"Guide/syntax_highlighting/#syntax-highlighting","text":"","title":"Syntax Highlighting"},{"location":"Guide/syntax_highlighting/#purpose","text":"With Syntax Highlighting , words in a program are displayed so as to immediately indicate their function. Reserved words, variables, literals, and comments may be differentiated by color, boldness, underline etc. Syntax Highlighting makes programs easier to read and modify.","title":"Purpose"},{"location":"Guide/syntax_highlighting/#usage","text":"Every javascript file opened in Rapise will display with Syntax Highlighting :","title":"Usage"},{"location":"Guide/syntax_highlighting/#see-also","text":"Source Editor","title":"See Also"},{"location":"Guide/tap/","text":"TAP Results \u00b6 Purpose \u00b6 Rapise supports the Test Anything Protocol (TAP). TAP specifies communication between unit tests and testing frameworks, such as Visual Studio MS-Test or NUnit . Usage \u00b6 The results of a Rapise test are saved to a TAP file in the same directory as the test. Tap files have a .tap extension. TAP\u2019s general format is: 1 2 3 4 5 6 7 1..N ok 1 Description # Directive # Diagnostic .... ok 47 Description ok 48 Description more tests.... For example, a test file\u2019s output might look like: 1 2 3 4 5 1..4 ok 1 - Input file opened not ok 2 - First line of the input valid ok 3 - Read the rest of the file not ok 4 - Summarized correctly # TODO Not written yet Example \u00b6 An example Rapise .TAP file looks like the following: 1 2 3 4 5 6 # Simple IE Popup Example # Starting scenario: Test ok 1 - Open popup.DoClick([]) ok 2 - Click me.DoClick([]) ok 3 - Close me.DoClick([]) ok 4 - Simple IE Popup Example See Also \u00b6 More information about tap is available at the TAP wiki: www.testanything.org Visual Studio Unit Testing (MS-Test) NUnit","title":"TAP Results"},{"location":"Guide/tap/#tap-results","text":"","title":"TAP Results"},{"location":"Guide/tap/#purpose","text":"Rapise supports the Test Anything Protocol (TAP). TAP specifies communication between unit tests and testing frameworks, such as Visual Studio MS-Test or NUnit .","title":"Purpose"},{"location":"Guide/tap/#usage","text":"The results of a Rapise test are saved to a TAP file in the same directory as the test. Tap files have a .tap extension. TAP\u2019s general format is: 1 2 3 4 5 6 7 1..N ok 1 Description # Directive # Diagnostic .... ok 47 Description ok 48 Description more tests.... For example, a test file\u2019s output might look like: 1 2 3 4 5 1..4 ok 1 - Input file opened not ok 2 - First line of the input valid ok 3 - Read the rest of the file not ok 4 - Summarized correctly # TODO Not written yet","title":"Usage"},{"location":"Guide/tap/#example","text":"An example Rapise .TAP file looks like the following: 1 2 3 4 5 6 # Simple IE Popup Example # Starting scenario: Test ok 1 - Open popup.DoClick([]) ok 2 - Click me.DoClick([]) ok 3 - Close me.DoClick([]) ok 4 - Simple IE Popup Example","title":"Example"},{"location":"Guide/tap/#see-also","text":"More information about tap is available at the TAP wiki: www.testanything.org Visual Studio Unit Testing (MS-Test) NUnit","title":"See Also"},{"location":"Guide/technologies/","text":"Technologies \u00b6 This section focuses on specific technologies supported by Rapise. Web Testing Desktop Testing Mobile Testing Web Service Testing Microsoft Dynamics Testing Salesforce Testing Manual Testing Unit Testing Load Testing","title":"Technologies"},{"location":"Guide/technologies/#technologies","text":"This section focuses on specific technologies supported by Rapise. Web Testing Desktop Testing Mobile Testing Web Service Testing Microsoft Dynamics Testing Salesforce Testing Manual Testing Unit Testing Load Testing","title":"Technologies"},{"location":"Guide/test_files_dialog/","text":"Test Files View \u00b6 Purpose \u00b6 The Test Files dialog allows you to navigate and alter the Test hierarchy, including the following: The main JavaScript script files ( *.js ) RVL Files ( *.rvl.xlsx ) The report files ( *.trp ) Images captured during execution using Checkpoints REST web services ( *.rest ) SOAP web services ( *.soap ) Analog recording files ( *.arf ) Excel spreadsheets ( *.xls and *.xlsx ) Applications to launch ( *.exe or *.bat ) Other data files ( *.txt ) How to Open \u00b6 The Test Files dialog is part of the Default Layout . Context Menu (Folder) \u00b6 Right click on a folder to see: Create Text File : Create .txt file and add it to the test. JavaScript File : Create .js file and add it to the test. JSON File : Create .json file and add it to the test. Spreadsheet : Create new .xlsx or .xls file and add it to the test. File : Aks for name and extension and create an empty file. WebAppProfile.json : Add new WebAppProfile.json to this test project. User Lib : Create shared user library for this test and sub-tests. Add File(s) : Add an existing file to the test. New Group : Create a logical grouping of files in the test. This will not add a folder to the file system. Reload : Refresh group contents. Use it for filter groups ('IsFilterGroup' is set to 'True' in group properties), e.g. for Report group. Create Sub-Test : Launch Create Sub-Test dialog. Remove from Test : Remove the selected grouping from the test. This does not delete included files from your hard disk. Remove All from Disk : Remove all files included into the selected grouping from your hard disk. Context Menu (File) \u00b6 Right click on a file to see: Open : Open the file in Rapise. Open Externally : Open the file using associated program. E.g. if a Notepad is registered in Windows to open TXT files, then TXT file will be opened by Notepad. Open as Spreadsheet : Open this file using built in Spreadsheet editor . May be used to open .rvl.xlsx in spreadsheet editor if you, for example, need to add columns. Reveal in Explorer : Open Windows File Explorer and show this file in it. Remove from Test : Remove the file from your test. This does not delete the file from your hard disk. Remove from Disk : Remove the file from your test and hard drive. Create Data Object : Only available for .xls and .xlsx files. Create Spreadsheet Data Object in the object tree. Context Menu (Sub-Test) \u00b6 Right click on a sub-test to see: See menu item descriptions Filter Groups \u00b6 Filter groups read its contents from disk according to specified path and wildcard. You may setup a filter group by editing group properties: FilterPath : Root path to find files via wildcard (valid only if 'IsFilterGroup' is 'True'). FilterWildcard : Filter wildcard (valid only if 'IsFilterGroup' is 'True'). IsFilterGroup : 'True' if directory should show the list of all files matching 'FilterWildcard' belonging to 'FilterPath'. Name : Group name. Adding Files from Test Folder \u00b6 Show files in folder triggers combined view where one can see files and folders on inside test folder both added and not yet added into the test project. If folder is not yet added to the project then + icon is displayed. Pressing it adds filter group for this folder. If file is not yet added to the project then + icon is displayed. Pressing it adds file into the test project. See Also \u00b6 Data Driven Testing KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library. KB 363 How to define a profile for Web Application in Rapise.","title":"Test Files View"},{"location":"Guide/test_files_dialog/#test-files-view","text":"","title":"Test Files View"},{"location":"Guide/test_files_dialog/#purpose","text":"The Test Files dialog allows you to navigate and alter the Test hierarchy, including the following: The main JavaScript script files ( *.js ) RVL Files ( *.rvl.xlsx ) The report files ( *.trp ) Images captured during execution using Checkpoints REST web services ( *.rest ) SOAP web services ( *.soap ) Analog recording files ( *.arf ) Excel spreadsheets ( *.xls and *.xlsx ) Applications to launch ( *.exe or *.bat ) Other data files ( *.txt )","title":"Purpose"},{"location":"Guide/test_files_dialog/#how-to-open","text":"The Test Files dialog is part of the Default Layout .","title":"How to Open"},{"location":"Guide/test_files_dialog/#context-menu-folder","text":"Right click on a folder to see: Create Text File : Create .txt file and add it to the test. JavaScript File : Create .js file and add it to the test. JSON File : Create .json file and add it to the test. Spreadsheet : Create new .xlsx or .xls file and add it to the test. File : Aks for name and extension and create an empty file. WebAppProfile.json : Add new WebAppProfile.json to this test project. User Lib : Create shared user library for this test and sub-tests. Add File(s) : Add an existing file to the test. New Group : Create a logical grouping of files in the test. This will not add a folder to the file system. Reload : Refresh group contents. Use it for filter groups ('IsFilterGroup' is set to 'True' in group properties), e.g. for Report group. Create Sub-Test : Launch Create Sub-Test dialog. Remove from Test : Remove the selected grouping from the test. This does not delete included files from your hard disk. Remove All from Disk : Remove all files included into the selected grouping from your hard disk.","title":"Context Menu (Folder)"},{"location":"Guide/test_files_dialog/#context-menu-file","text":"Right click on a file to see: Open : Open the file in Rapise. Open Externally : Open the file using associated program. E.g. if a Notepad is registered in Windows to open TXT files, then TXT file will be opened by Notepad. Open as Spreadsheet : Open this file using built in Spreadsheet editor . May be used to open .rvl.xlsx in spreadsheet editor if you, for example, need to add columns. Reveal in Explorer : Open Windows File Explorer and show this file in it. Remove from Test : Remove the file from your test. This does not delete the file from your hard disk. Remove from Disk : Remove the file from your test and hard drive. Create Data Object : Only available for .xls and .xlsx files. Create Spreadsheet Data Object in the object tree.","title":"Context Menu (File)"},{"location":"Guide/test_files_dialog/#context-menu-sub-test","text":"Right click on a sub-test to see: See menu item descriptions","title":"Context Menu (Sub-Test)"},{"location":"Guide/test_files_dialog/#filter-groups","text":"Filter groups read its contents from disk according to specified path and wildcard. You may setup a filter group by editing group properties: FilterPath : Root path to find files via wildcard (valid only if 'IsFilterGroup' is 'True'). FilterWildcard : Filter wildcard (valid only if 'IsFilterGroup' is 'True'). IsFilterGroup : 'True' if directory should show the list of all files matching 'FilterWildcard' belonging to 'FilterPath'. Name : Group name.","title":"Filter Groups"},{"location":"Guide/test_files_dialog/#adding-files-from-test-folder","text":"Show files in folder triggers combined view where one can see files and folders on inside test folder both added and not yet added into the test project. If folder is not yet added to the project then + icon is displayed. Pressing it adds filter group for this folder. If file is not yet added to the project then + icon is displayed. Pressing it adds file into the test project.","title":"Adding Files from Test Folder"},{"location":"Guide/test_files_dialog/#see-also","text":"Data Driven Testing KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library. KB 363 How to define a profile for Web Application in Rapise.","title":"See Also"},{"location":"Guide/tests_and_sub_tests/","text":"Tests and Sub-Tests \u00b6 The concept of Sub-Test is an organic way to organize the whole work with Tests in organic way. By having sub-tests one may meet one of the following goals: Create multiple test scenarios working with same set of Objects and Functions. Organize different test scenarios into a single workspace. Use Sub-test to make cross-browser tests. We will consider each of described goals separately. The test containing the sub-test(s) we will call base or parent test. Shared Object Repository and Shared Functions \u00b6 In this case parent test contains all learned objects and user-defined functions. For example, the parent test may have objects User Name , Password , Sign On . And function function Login ( username , password ) { ... } SubTest1 may be used to check login with valid credentials, Main.js from SubTest1 looks like: function Test ( params ) { Login ( \"validuser\" , \"validpassword\" ); // Now check that login is successful Tester . Assert ( \"Login leads to welcome message: \" , Global . DoWaitFor ( 'Welcome_User' )); } SubTest2 may be used to check login with invalid Credentials (i.e. it is a fail-test). Main.js from SubTest2 looks like: function Test ( params ) { Login ( \"invaliduser\" , \"invvalidpassword\" ); // Now check that login is successful Tester . Assert ( \"Login leads to invalid user object: \" , Global . DoWaitFor ( 'Invalid_User' )); } Function Login and objects Welcome_User and Invalid_User are defined in the parent test. The sub-tests are just implementing various scenarios for the same set of objects. Local Object Repository and Local Functions \u00b6 Each test has its own objects, functions and scenarios. The usage of such an approach is well demonstrated by example. We created a test called SampleMaster and put all Rapise samples into it by using Add File context menu in the the Test Tree dialog. Finally the Files tree looks like: All tests in this tree are independent. We use the Sample Master to manage all the tests from a single environment. Nested Sub-Tests \u00b6 Sub-test may have its own nested sub-tests. In this example the parent test contains reference to CreateNewBook sub-test having Login and Logout sub-tests inside: Sub-Test Properties \u00b6 Sub-test properties are available from the Tag property in the Properties pane: Sub-Test Context Menu \u00b6 The following options are available in the context menu for each of the sub-tests: Play : Execute selected sub-test Record : Start recording into selected sub-test Save : Save options of a sub-test Show Objects : Show objects form a sub-test in the Object Tree Rename : Rename this sub-test Clone : Make a copy of the sub-test Delete : Remove reference to a sub-test from its parent test Create Sub-Test... : Create nested sub-test. It is typical for larger frameworks to have several nested levels of tests for convenience. Open in New Rapise Window... : By default double-click on the sub-test opens it in the current Rapise window. In the case that you need to have both current test and sub-test open simultaneously you may use this option. %WORKDIR% and Frameworks \u00b6 Test and sub-tests is a recommended way to set up test frameworks with Rapise. %WORKDIR% is set to the root test path and it is recommended to use it to refer to other tests or data files. See sample framework https://github.com/Inflectra/rapise-framework-examples/tree/master/SpiraFriendlyWithRvlAndUserLib","title":"Tests and Sub-Tests"},{"location":"Guide/tests_and_sub_tests/#tests-and-sub-tests","text":"The concept of Sub-Test is an organic way to organize the whole work with Tests in organic way. By having sub-tests one may meet one of the following goals: Create multiple test scenarios working with same set of Objects and Functions. Organize different test scenarios into a single workspace. Use Sub-test to make cross-browser tests. We will consider each of described goals separately. The test containing the sub-test(s) we will call base or parent test.","title":"Tests and Sub-Tests"},{"location":"Guide/tests_and_sub_tests/#shared-object-repository-and-shared-functions","text":"In this case parent test contains all learned objects and user-defined functions. For example, the parent test may have objects User Name , Password , Sign On . And function function Login ( username , password ) { ... } SubTest1 may be used to check login with valid credentials, Main.js from SubTest1 looks like: function Test ( params ) { Login ( \"validuser\" , \"validpassword\" ); // Now check that login is successful Tester . Assert ( \"Login leads to welcome message: \" , Global . DoWaitFor ( 'Welcome_User' )); } SubTest2 may be used to check login with invalid Credentials (i.e. it is a fail-test). Main.js from SubTest2 looks like: function Test ( params ) { Login ( \"invaliduser\" , \"invvalidpassword\" ); // Now check that login is successful Tester . Assert ( \"Login leads to invalid user object: \" , Global . DoWaitFor ( 'Invalid_User' )); } Function Login and objects Welcome_User and Invalid_User are defined in the parent test. The sub-tests are just implementing various scenarios for the same set of objects.","title":"Shared Object Repository and Shared Functions"},{"location":"Guide/tests_and_sub_tests/#local-object-repository-and-local-functions","text":"Each test has its own objects, functions and scenarios. The usage of such an approach is well demonstrated by example. We created a test called SampleMaster and put all Rapise samples into it by using Add File context menu in the the Test Tree dialog. Finally the Files tree looks like: All tests in this tree are independent. We use the Sample Master to manage all the tests from a single environment.","title":"Local Object Repository and Local Functions"},{"location":"Guide/tests_and_sub_tests/#nested-sub-tests","text":"Sub-test may have its own nested sub-tests. In this example the parent test contains reference to CreateNewBook sub-test having Login and Logout sub-tests inside:","title":"Nested Sub-Tests"},{"location":"Guide/tests_and_sub_tests/#sub-test-properties","text":"Sub-test properties are available from the Tag property in the Properties pane:","title":"Sub-Test Properties"},{"location":"Guide/tests_and_sub_tests/#sub-test-context-menu","text":"The following options are available in the context menu for each of the sub-tests: Play : Execute selected sub-test Record : Start recording into selected sub-test Save : Save options of a sub-test Show Objects : Show objects form a sub-test in the Object Tree Rename : Rename this sub-test Clone : Make a copy of the sub-test Delete : Remove reference to a sub-test from its parent test Create Sub-Test... : Create nested sub-test. It is typical for larger frameworks to have several nested levels of tests for convenience. Open in New Rapise Window... : By default double-click on the sub-test opens it in the current Rapise window. In the case that you need to have both current test and sub-test open simultaneously you may use this option.","title":"Sub-Test Context Menu"},{"location":"Guide/tests_and_sub_tests/#workdir-and-frameworks","text":"Test and sub-tests is a recommended way to set up test frameworks with Rapise. %WORKDIR% is set to the root test path and it is recommended to use it to refer to other tests or data files. See sample framework https://github.com/Inflectra/rapise-framework-examples/tree/master/SpiraFriendlyWithRvlAndUserLib","title":"%WORKDIR% and Frameworks"},{"location":"Guide/toolbar_rest/","text":"Toolbar: REST \u00b6 Purpose \u00b6 The REST toolbar is for use with editing REST web service definition files. How to Open \u00b6 The REST toolbar is available anytime you have a REST definition file ( .rest ) file visible in the Content View . Toolbar Buttons \u00b6 Save Requests - Saves the current REST request definitions to the .rest file. Update Object Tree - Updates the main Rapise Object Tree with the current REST definitions. This turns each of your REST requests into Rapise learned objects that can be scripted against. Add Header - Allows you to add a standard or custom HTTP header to the current REST request: Add Parameter - Allows you to add a parameter name/value to the current REST request. This is useful when you want your test script to be able to pass through different values (e.g. get book #1 vs. book #2): Add Credentials - Allows you to add an HTTP basic authentication credential (username and password) to the request. Saves you having to add the header manually (which would require base64 encoding the username and password):","title":"Toolbar: REST"},{"location":"Guide/toolbar_rest/#toolbar-rest","text":"","title":"Toolbar: REST"},{"location":"Guide/toolbar_rest/#purpose","text":"The REST toolbar is for use with editing REST web service definition files.","title":"Purpose"},{"location":"Guide/toolbar_rest/#how-to-open","text":"The REST toolbar is available anytime you have a REST definition file ( .rest ) file visible in the Content View .","title":"How to Open"},{"location":"Guide/toolbar_rest/#toolbar-buttons","text":"Save Requests - Saves the current REST request definitions to the .rest file. Update Object Tree - Updates the main Rapise Object Tree with the current REST definitions. This turns each of your REST requests into Rapise learned objects that can be scripted against. Add Header - Allows you to add a standard or custom HTTP header to the current REST request: Add Parameter - Allows you to add a parameter name/value to the current REST request. This is useful when you want your test script to be able to pass through different values (e.g. get book #1 vs. book #2): Add Credentials - Allows you to add an HTTP basic authentication credential (username and password) to the request. Saves you having to add the header manually (which would require base64 encoding the username and password):","title":"Toolbar Buttons"},{"location":"Guide/toolbar_soap/","text":"Toolbar: SOAP \u00b6 Purpose \u00b6 The SOAP tab is for use with editing SOAP web service definition files (also known as **W**eb **S**ervice **D**efinition **L**anguage (WSDL) files). How to Open \u00b6 The SOAP tab is available anytime you have a SOAP definition file ( .soap ) file visible in the Content View . You may also open it from the View > SOAP menu items. This will open 1 st .soap file in the project (if any). Otherwise it does nothing. If there is no .soap file yet in the project, you should use the Add Web Service Dialog . Toolbar Controls \u00b6 Save - Saves the current set of SOAP operations to the .soap file being edited. Endpoint The Endpoint section lets you enter in the URL to the SOAP Web Service Definition Language (WSDL) file that contains a definition of all the SOAP operations exposed by the web service. You enter in the URL in the top box and then click the Get WSDL button. Get WSDL - Update service definition based on the current Endpoint value. Custom Endpoint - you can click on this button to toggle the display of the custom endpoint text box. This lets you override the default URL returned by the WSDL file and can be useful if you want to use the WSDL from one instance and invoke the operations against a different instance. Add Credentials - Allows you to add an HTTP basic authentication credential (username and password) to the SOAP operation. This is useful for SOAP operations that use HTTP basic authentication.","title":"Toolbar: SOAP"},{"location":"Guide/toolbar_soap/#toolbar-soap","text":"","title":"Toolbar: SOAP"},{"location":"Guide/toolbar_soap/#purpose","text":"The SOAP tab is for use with editing SOAP web service definition files (also known as **W**eb **S**ervice **D**efinition **L**anguage (WSDL) files).","title":"Purpose"},{"location":"Guide/toolbar_soap/#how-to-open","text":"The SOAP tab is available anytime you have a SOAP definition file ( .soap ) file visible in the Content View . You may also open it from the View > SOAP menu items. This will open 1 st .soap file in the project (if any). Otherwise it does nothing. If there is no .soap file yet in the project, you should use the Add Web Service Dialog .","title":"How to Open"},{"location":"Guide/toolbar_soap/#toolbar-controls","text":"Save - Saves the current set of SOAP operations to the .soap file being edited. Endpoint The Endpoint section lets you enter in the URL to the SOAP Web Service Definition Language (WSDL) file that contains a definition of all the SOAP operations exposed by the web service. You enter in the URL in the top box and then click the Get WSDL button. Get WSDL - Update service definition based on the current Endpoint value. Custom Endpoint - you can click on this button to toggle the display of the custom endpoint text box. This lets you override the default URL returned by the WSDL file and can be useful if you want to use the WSDL from one instance and invoke the operations against a different instance. Add Credentials - Allows you to add an HTTP basic authentication credential (username and password) to the SOAP operation. This is useful for SOAP operations that use HTTP basic authentication.","title":"Toolbar Controls"},{"location":"Guide/toolbar_spreadsheet/","text":"Toolbar: SpreadSheet Editor \u00b6 Ribbon Tab: Spreadsheet \u00b6 Purpose \u00b6 The Spreadsheet tab lets you edit Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing . How to Open \u00b6 The Spreadsheet tab is available anytime you have an excel (xls or xlsx) file visible in the Content View . Clipboard \u00b6 The Clipboard section provides the following options: Paste - this will paste the spreadsheet cells from the clipboard to the current selection Cut - this will cut the current selection and put into the clipboard for pasting Copy - this will copy the current selection and put into the clipboard for pasting Font \u00b6 The Font section provides the following options: Font Name - this lets you change the font typeface used in the selected cells Font Size - this lets you specify the exact font size to use Increase Font Size - this lets you increase the current font size by 1pt Decrease Font Size - this lets you decrease the current font size by 1pt Bold - this lets you make the selected text bold Italic - this lets you make the selected text italics Strikethrough - this lets you mark the text as deleted (strikethrough) Borders - this lets you change the borders for the selected cells Fill Color - this lets you change the background color of the selected cells Text Color - this lets you change the foreground color of the selected cells Alignment \u00b6 The Alignment section provides the following options: Top Align - This aligns the cell text vertically to the top Middle Align - This aligns the cell text vertically to the middle Bottom Align - This aligns the cell text vertically to the bottom Left Align - This aligns the cell text horizontally to the left Center Align -This aligns the cell text horizontally to the center Right Align -This aligns the cell text horizontally to the right Outdent - This reduces the indentation of the text by one position Indent - This increases the indentation of the text by one position Wrap Text - This turns on/off the wrapping of text inside the selected cells Merge & Center - This gives you options to merge and center multiple cells: Style \u00b6 The Style section provides the following options: Format as Table - this lets you automatically format a range of cells as a predefined table style: Prebuilt Styles - this option displays a list of predefined styles that you can apply to the selected cells: Cells \u00b6 The Cells section provides the following options: Insert - this menu option lets you insert new cells, rows, columns, or even a whole sheet. Delete -this menu option lets you delete specific cells, rows, columns, or even a whole sheet. Format : Cell Size - this option lets you specify the row height and/or column width Visibility - this option lets you show/hide specific rows or columns (they are not removed, unlike delete, just hidden) Organize Sheets - this option lets you rename the name of the sheet. Ribbon Tab: View \u00b6 Purpose \u00b6 The View tab lets you change the display of Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing . How to Open \u00b6 The View tab is available anytime you have an excel (xls or xlsx) file visible in the Content View . Show \u00b6 This section lets you choose whether to display the grid lines, formula bar and/or the headings in the spreadsheet editor . Zoom \u00b6 This section contains the following options: * Zoom - This lets you change the display zoom level: 100% - This quickly resets the zoom back to 100% Zoom to Selection - This auto-zooms to display the current selection Window \u00b6 This section contains the following options: * Freeze Panes - this lets you freeze specific rows/columns so that they don't scroll: Split - this lets you split the display into multiple windows","title":"Toolbar: Spreadsheet"},{"location":"Guide/toolbar_spreadsheet/#toolbar-spreadsheet-editor","text":"","title":"Toolbar: SpreadSheet Editor"},{"location":"Guide/toolbar_spreadsheet/#ribbon-tab-spreadsheet","text":"","title":"Ribbon Tab: Spreadsheet"},{"location":"Guide/toolbar_spreadsheet/#purpose","text":"The Spreadsheet tab lets you edit Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing .","title":"Purpose"},{"location":"Guide/toolbar_spreadsheet/#how-to-open","text":"The Spreadsheet tab is available anytime you have an excel (xls or xlsx) file visible in the Content View .","title":"How to Open"},{"location":"Guide/toolbar_spreadsheet/#clipboard","text":"The Clipboard section provides the following options: Paste - this will paste the spreadsheet cells from the clipboard to the current selection Cut - this will cut the current selection and put into the clipboard for pasting Copy - this will copy the current selection and put into the clipboard for pasting","title":"Clipboard"},{"location":"Guide/toolbar_spreadsheet/#font","text":"The Font section provides the following options: Font Name - this lets you change the font typeface used in the selected cells Font Size - this lets you specify the exact font size to use Increase Font Size - this lets you increase the current font size by 1pt Decrease Font Size - this lets you decrease the current font size by 1pt Bold - this lets you make the selected text bold Italic - this lets you make the selected text italics Strikethrough - this lets you mark the text as deleted (strikethrough) Borders - this lets you change the borders for the selected cells Fill Color - this lets you change the background color of the selected cells Text Color - this lets you change the foreground color of the selected cells","title":"Font"},{"location":"Guide/toolbar_spreadsheet/#alignment","text":"The Alignment section provides the following options: Top Align - This aligns the cell text vertically to the top Middle Align - This aligns the cell text vertically to the middle Bottom Align - This aligns the cell text vertically to the bottom Left Align - This aligns the cell text horizontally to the left Center Align -This aligns the cell text horizontally to the center Right Align -This aligns the cell text horizontally to the right Outdent - This reduces the indentation of the text by one position Indent - This increases the indentation of the text by one position Wrap Text - This turns on/off the wrapping of text inside the selected cells Merge & Center - This gives you options to merge and center multiple cells:","title":"Alignment"},{"location":"Guide/toolbar_spreadsheet/#style","text":"The Style section provides the following options: Format as Table - this lets you automatically format a range of cells as a predefined table style: Prebuilt Styles - this option displays a list of predefined styles that you can apply to the selected cells:","title":"Style"},{"location":"Guide/toolbar_spreadsheet/#cells","text":"The Cells section provides the following options: Insert - this menu option lets you insert new cells, rows, columns, or even a whole sheet. Delete -this menu option lets you delete specific cells, rows, columns, or even a whole sheet. Format : Cell Size - this option lets you specify the row height and/or column width Visibility - this option lets you show/hide specific rows or columns (they are not removed, unlike delete, just hidden) Organize Sheets - this option lets you rename the name of the sheet.","title":"Cells"},{"location":"Guide/toolbar_spreadsheet/#ribbon-tab-view","text":"","title":"Ribbon Tab: View"},{"location":"Guide/toolbar_spreadsheet/#purpose_1","text":"The View tab lets you change the display of Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing .","title":"Purpose"},{"location":"Guide/toolbar_spreadsheet/#how-to-open_1","text":"The View tab is available anytime you have an excel (xls or xlsx) file visible in the Content View .","title":"How to Open"},{"location":"Guide/toolbar_spreadsheet/#show","text":"This section lets you choose whether to display the grid lines, formula bar and/or the headings in the spreadsheet editor .","title":"Show"},{"location":"Guide/toolbar_spreadsheet/#zoom","text":"This section contains the following options: * Zoom - This lets you change the display zoom level: 100% - This quickly resets the zoom back to 100% Zoom to Selection - This auto-zooms to display the current selection","title":"Zoom"},{"location":"Guide/toolbar_spreadsheet/#window","text":"This section contains the following options: * Freeze Panes - this lets you freeze specific rows/columns so that they don't scroll: Split - this lets you split the display into multiple windows","title":"Window"},{"location":"Guide/tooltips/","text":"Tooltips \u00b6 Purpose \u00b6 Tooltips let you view a variable's value during debugging. Usage \u00b6 Put a breakpoint in the script at or near where you wish to investigate Mouse over variables as you advance through the script. A small box will popup, displaying the variables' values: See Also \u00b6 Internal Debugger Breakpoints","title":"Tooltips"},{"location":"Guide/tooltips/#tooltips","text":"","title":"Tooltips"},{"location":"Guide/tooltips/#purpose","text":"Tooltips let you view a variable's value during debugging.","title":"Purpose"},{"location":"Guide/tooltips/#usage","text":"Put a breakpoint in the script at or near where you wish to investigate Mouse over variables as you advance through the script. A small box will popup, displaying the variables' values:","title":"Usage"},{"location":"Guide/tooltips/#see-also","text":"Internal Debugger Breakpoints","title":"See Also"},{"location":"Guide/tutorial_custom_library/","text":"Tutorial: Custom Library \u00b6 In this section, you will learn how to create a Custom Library and add support for a third-party GUI control to Rapise. We will be using a demo application called CustomControlApp . Our Custom Library will be simple. It will allow to Record and Learn objects of CustomListboxControl type and also playback actions for this type of objects. This tutorial is complemented by a ready test CustomControlTest which you'll be able to examine and run. Tutorial Data \u00b6 CustomControlApp Folder C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlApp You may build this application yourself in Microsoft Visual Studio (C++) or use ready executable: <CustomControlApp folder>\\Release\\CustomControlApp.exe CustomControlTest Folder C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest Custom Library File C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest\\Lib\\LibUser\\LibUser.js If you prefer active experimentation learning style you may first skip to subsection 8 and after playing with the ready test and library start reading from the beginning. 1. Application Under Test \u00b6 CustomControlApp contains an object of type CustomListboxControl . The control is similar to a single-select listbox, but each line item has a corresponding progress bar indicator indicating a current value. Using the left/right cursor keys you can change the value of the currently focused item. If you will try to record a test for CustomControlApp using just Generic library you'll see that CustomListboxControl is treated as Simulated Object and all interactions with it are recorded as mouse clicks and key presses. For some tests such functionality is sufficient, but if you want to be able to recognize CustomListboxControl as a list, get its items, select an item by name, set value for a particular item you need to create a Custom Library . 2. LibUser \u00b6 In Files view right click the test node and choose Create > User Lib... Specify name of your library ( User ) and click OK button. LibUser library consists of two files: LibUser.jslib which is a library declaration file. LibUser.js which is a library definition file. Double-click LibUser.js file to open it in the editor. 3. Analyze CustomListboxControl in Spy \u00b6 Launch CustomControlApp and open Spy . Using the Accessible option in the Spy tool, spy on the CustomListboxControl . It is easy to see that CustomListboxControl has the following accessibility tree: ROLE_SYSTEM_WINDOW top node contains ROLE_SYSTEM_LIST child that in its turn may contain zero to many ROLE_SYSTEM_SLIDER nodes. 4. Create Matcher Rule for CustomListboxControl \u00b6 With knowledge of CustomListboxControl accessibility tree we can create a matcher rule that will make CustomListboxControl recognizable by Rapise. Write the following code into LibUser.js : /** ROLE_SYSTEM_WINDOW ROLE_SYSTEM_LIST (CustomListboxControl) ROLE_SYSTEM_SLIDER* */ new SeSMatcherRule ( { object_type : \"CustomListboxControl\" , object_flavor : \"List\" , behavior : [ Win32ItemSelectable , Win32CustomListboxControl ], role : \"ROLE_SYSTEM_WINDOW\" , or_rules : [ { role : \"regex:ROLE_SYSTEM_LIST\" , save_to : \"list\" , or_rules : [ { role : \"ROLE_SYSTEM_SLIDER\" , zero_to_many : true , save_to : \"items\" } ] } ] }); Each matcher rule (instance of SeSMatcherRule ) is a tree like structure that describes a particular GUI control type. Each node in this tree is a rule object that is defined by the following simplified grammar: or_rules: (rule)+ and_rules: (rule)+ rule: role [save_to] [zero_to_many] [or_rules] [and_rules] object_type - the string that uniquely identifies this matcher rule and designates type of the control. object_flavor - visual type of the control, it is used to show an appropriate icon in the Object Tree and to filter actions and properties in composite behavior patterns. behavior - array of behavior patterns that define object actions, properties and events. role - accessibility role of the corresponding node in the accessibility tree of the control. The role equals to a Role of the accessible element as displayed in the Spy. or_rules - array of rules (defining child nodes) joined with logical OR. Any OR rule can be satisfied to consider child nodes matched. and_rules - array of rules (defining child nodes) joined with logical AND. All AND rules must be satisfied to consider child nodes matched. save_to - SeSObject created for accessibility tree node corresponding to this rule is assigned to the field with save_to name of the top level SeSObject . I.e. if rule has save_to: items element then you can access learned element using SeS('ObjID').items . In many cases such named fields are used in behavior patterns. zero_to_many - if this property is present in the rule and set to 'true' then it means that parent rule may contain from zero to many of child nodes that match this rule. 5. CustomListboxControl Behavior \u00b6 After defining the matcher rule we can proceed to behavior patterns . Behavior patterns operate with SeSObject contents, so they should not be aware about accessibility tree of the underlying GUI control and thus the same behavior pattern can be assigned to different matcher rules. There are a plenty of behavior patterns defined in C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSBehavior.js After looking at those patterns it is possible to notice that Win32ItemSelectable pattern is the one that perfectly suites for capturing selection accessibility events and for selecting list items. This pattern contains OnSelect event that is called during recording when an item is selected in list and DoSelectItem action used to select desired item during playback. But using just Win32ItemSelectable behavior pattern is not sufficient. It does not support recording of progress bar value change events and it does not support setting progress bar value during playback. That is why we need to define new behavior pattern: Win32CustomListboxControl . Look at its code: var Win32CustomListboxControl = { actions : [ { actionName : \"SetItemValue\" , DoAction : function ( /**string*/ itemName , /**number*/ value ) { var item = this . findItemByName ( itemName ); if ( null != item ) { item . getTopObject (). instance . HWND . SetForegroundWindow (); item . instance . Value = value ; return true ; } return false ; } }, { actionName : \"GetItemValue\" , DoAction : function ( /**string*/ itemName ) { var item = this . findItemByName ( itemName ); if ( null != item ) { return parseInt ( item . instance . Value ); } return null ; } } ], events : { OnValueChange : function ( /**SeSObject*/ param ) { var itemName = param . name ; if ( l2 ) Log2 ( \"OnValueChange:\" + itemName ); var item = this . findItemByName ( itemName ); if ( null != item ) { var value = item . instance . Value ; RegisterAction ( this , param . name , \"SetItemValue\" , parseInt ( value ), \"Set item:'\" + param . name + \"' to \" + value + \" in '\" + this . name + \"'\" ); } return ; } } }; During recording process OnValueChange function captures progress bar change events and calls RegisterAction function that adds SetItemValue action to the test. Put this code into LibUser.js before the rule created in the previous step. 6. CustomListboxControl Specific Accessibility Events \u00b6 What accessibility events are fired when a user changes the progress bar value? You can use Accessible Event Watcher to find out. Launch CustomControlApp and start Accessible Event Watcher . Make sure that mode is set to WinEvents (In Context) Select an item in CustomControlApp and advance its progress bar using right key. Accessible Event Watcher will show you captured events: You can see that changing progress bar leads to generation of OBJ_VALUECHANGE events. To get event name to use with Rapise open Event Constants page and search for relevant value. Not all accessibility events are processed and propagated by Rapise engine. EVENT_OBJECT_VALUECHANGE is one of such events. To consume this event and make an appropriate call to OnValueChange of Win32CustomListboxControl you need to add and register custom accessibility event handler : /** * Custom handler for EVENT_OBJECT_VALUECHANGE event */ function CustomRegisterAccessibleEvent ( evt , etxt ) { if ( etxt . indexOf ( \"EVENT_OBJECT_VALUECHANGE\" ) >= 0 ) { var ao ; try { ao = evt . AccessibleObject ; if ( ! _SeSIsValidObject ( ao )) return false ; } catch ( e ) { Log ( \"Error getting event object:\" + e . Description + \"/\" + etxt ); return false ; } var ro = SeSCacheAccessibleObject ( ao ); if ( l3 && ro ) Log3 ( \"CustomListboxControl: \" + ro . toString ()); if ( ro != null && ( \"OnValueChange\" in ro )) { ro . OnValueChange (); } return true ; } return false ; } g_customEventHandlers . push ( CustomRegisterAccessibleEvent ); 7. Record and Playback \u00b6 Update LibUser.jslib library definition for automatic loading. Now you are ready to record and playback a test. Just remember that in Select an Application to Record dialog you need to uncheck Auto library and select Generic library. Notice Action names in Recording Activity dialog, they correspond to Win32ItemSelectable and Win32CustomListboxControl behaviors. 8. CustomControlTest \u00b6 This tutorial is complemented by a ready test CustomControlTest which you can examine and run. Open CustomControlTest in Rapise from C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest Tip : It is possible to launch CustomControlApp right from Rapise, just double click on CustomControlApp.exe in the file tree. 9. Wrap-up: Implementation Sequence \u00b6 Full support for a custom object requires support for Recording, Learn and Playback. Let's go over created library and specify the purpose of each component in it. Matcher Rule - it is used to recognize the object inside an application, required for Recording, Learn and Playback. Events in Behavior Patterns - handling events is required for Recording. Actions in Behavior Patterns - actions are used to examine or change state of the control, required for Playback. Custom Accessibility Event Handler - required for Recording if some important events are not processed by Rapise engine by default.","title":"Tutorial: Custom Library"},{"location":"Guide/tutorial_custom_library/#tutorial-custom-library","text":"In this section, you will learn how to create a Custom Library and add support for a third-party GUI control to Rapise. We will be using a demo application called CustomControlApp . Our Custom Library will be simple. It will allow to Record and Learn objects of CustomListboxControl type and also playback actions for this type of objects. This tutorial is complemented by a ready test CustomControlTest which you'll be able to examine and run.","title":"Tutorial: Custom Library"},{"location":"Guide/tutorial_custom_library/#tutorial-data","text":"CustomControlApp Folder C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlApp You may build this application yourself in Microsoft Visual Studio (C++) or use ready executable: <CustomControlApp folder>\\Release\\CustomControlApp.exe CustomControlTest Folder C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest Custom Library File C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest\\Lib\\LibUser\\LibUser.js If you prefer active experimentation learning style you may first skip to subsection 8 and after playing with the ready test and library start reading from the beginning.","title":"Tutorial Data"},{"location":"Guide/tutorial_custom_library/#1-application-under-test","text":"CustomControlApp contains an object of type CustomListboxControl . The control is similar to a single-select listbox, but each line item has a corresponding progress bar indicator indicating a current value. Using the left/right cursor keys you can change the value of the currently focused item. If you will try to record a test for CustomControlApp using just Generic library you'll see that CustomListboxControl is treated as Simulated Object and all interactions with it are recorded as mouse clicks and key presses. For some tests such functionality is sufficient, but if you want to be able to recognize CustomListboxControl as a list, get its items, select an item by name, set value for a particular item you need to create a Custom Library .","title":"1. Application Under Test"},{"location":"Guide/tutorial_custom_library/#2-libuser","text":"In Files view right click the test node and choose Create > User Lib... Specify name of your library ( User ) and click OK button. LibUser library consists of two files: LibUser.jslib which is a library declaration file. LibUser.js which is a library definition file. Double-click LibUser.js file to open it in the editor.","title":"2. LibUser"},{"location":"Guide/tutorial_custom_library/#3-analyze-customlistboxcontrol-in-spy","text":"Launch CustomControlApp and open Spy . Using the Accessible option in the Spy tool, spy on the CustomListboxControl . It is easy to see that CustomListboxControl has the following accessibility tree: ROLE_SYSTEM_WINDOW top node contains ROLE_SYSTEM_LIST child that in its turn may contain zero to many ROLE_SYSTEM_SLIDER nodes.","title":"3. Analyze CustomListboxControl in Spy"},{"location":"Guide/tutorial_custom_library/#4-create-matcher-rule-for-customlistboxcontrol","text":"With knowledge of CustomListboxControl accessibility tree we can create a matcher rule that will make CustomListboxControl recognizable by Rapise. Write the following code into LibUser.js : /** ROLE_SYSTEM_WINDOW ROLE_SYSTEM_LIST (CustomListboxControl) ROLE_SYSTEM_SLIDER* */ new SeSMatcherRule ( { object_type : \"CustomListboxControl\" , object_flavor : \"List\" , behavior : [ Win32ItemSelectable , Win32CustomListboxControl ], role : \"ROLE_SYSTEM_WINDOW\" , or_rules : [ { role : \"regex:ROLE_SYSTEM_LIST\" , save_to : \"list\" , or_rules : [ { role : \"ROLE_SYSTEM_SLIDER\" , zero_to_many : true , save_to : \"items\" } ] } ] }); Each matcher rule (instance of SeSMatcherRule ) is a tree like structure that describes a particular GUI control type. Each node in this tree is a rule object that is defined by the following simplified grammar: or_rules: (rule)+ and_rules: (rule)+ rule: role [save_to] [zero_to_many] [or_rules] [and_rules] object_type - the string that uniquely identifies this matcher rule and designates type of the control. object_flavor - visual type of the control, it is used to show an appropriate icon in the Object Tree and to filter actions and properties in composite behavior patterns. behavior - array of behavior patterns that define object actions, properties and events. role - accessibility role of the corresponding node in the accessibility tree of the control. The role equals to a Role of the accessible element as displayed in the Spy. or_rules - array of rules (defining child nodes) joined with logical OR. Any OR rule can be satisfied to consider child nodes matched. and_rules - array of rules (defining child nodes) joined with logical AND. All AND rules must be satisfied to consider child nodes matched. save_to - SeSObject created for accessibility tree node corresponding to this rule is assigned to the field with save_to name of the top level SeSObject . I.e. if rule has save_to: items element then you can access learned element using SeS('ObjID').items . In many cases such named fields are used in behavior patterns. zero_to_many - if this property is present in the rule and set to 'true' then it means that parent rule may contain from zero to many of child nodes that match this rule.","title":"4. Create Matcher Rule for CustomListboxControl"},{"location":"Guide/tutorial_custom_library/#5-customlistboxcontrol-behavior","text":"After defining the matcher rule we can proceed to behavior patterns . Behavior patterns operate with SeSObject contents, so they should not be aware about accessibility tree of the underlying GUI control and thus the same behavior pattern can be assigned to different matcher rules. There are a plenty of behavior patterns defined in C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSBehavior.js After looking at those patterns it is possible to notice that Win32ItemSelectable pattern is the one that perfectly suites for capturing selection accessibility events and for selecting list items. This pattern contains OnSelect event that is called during recording when an item is selected in list and DoSelectItem action used to select desired item during playback. But using just Win32ItemSelectable behavior pattern is not sufficient. It does not support recording of progress bar value change events and it does not support setting progress bar value during playback. That is why we need to define new behavior pattern: Win32CustomListboxControl . Look at its code: var Win32CustomListboxControl = { actions : [ { actionName : \"SetItemValue\" , DoAction : function ( /**string*/ itemName , /**number*/ value ) { var item = this . findItemByName ( itemName ); if ( null != item ) { item . getTopObject (). instance . HWND . SetForegroundWindow (); item . instance . Value = value ; return true ; } return false ; } }, { actionName : \"GetItemValue\" , DoAction : function ( /**string*/ itemName ) { var item = this . findItemByName ( itemName ); if ( null != item ) { return parseInt ( item . instance . Value ); } return null ; } } ], events : { OnValueChange : function ( /**SeSObject*/ param ) { var itemName = param . name ; if ( l2 ) Log2 ( \"OnValueChange:\" + itemName ); var item = this . findItemByName ( itemName ); if ( null != item ) { var value = item . instance . Value ; RegisterAction ( this , param . name , \"SetItemValue\" , parseInt ( value ), \"Set item:'\" + param . name + \"' to \" + value + \" in '\" + this . name + \"'\" ); } return ; } } }; During recording process OnValueChange function captures progress bar change events and calls RegisterAction function that adds SetItemValue action to the test. Put this code into LibUser.js before the rule created in the previous step.","title":"5. CustomListboxControl Behavior"},{"location":"Guide/tutorial_custom_library/#6-customlistboxcontrol-specific-accessibility-events","text":"What accessibility events are fired when a user changes the progress bar value? You can use Accessible Event Watcher to find out. Launch CustomControlApp and start Accessible Event Watcher . Make sure that mode is set to WinEvents (In Context) Select an item in CustomControlApp and advance its progress bar using right key. Accessible Event Watcher will show you captured events: You can see that changing progress bar leads to generation of OBJ_VALUECHANGE events. To get event name to use with Rapise open Event Constants page and search for relevant value. Not all accessibility events are processed and propagated by Rapise engine. EVENT_OBJECT_VALUECHANGE is one of such events. To consume this event and make an appropriate call to OnValueChange of Win32CustomListboxControl you need to add and register custom accessibility event handler : /** * Custom handler for EVENT_OBJECT_VALUECHANGE event */ function CustomRegisterAccessibleEvent ( evt , etxt ) { if ( etxt . indexOf ( \"EVENT_OBJECT_VALUECHANGE\" ) >= 0 ) { var ao ; try { ao = evt . AccessibleObject ; if ( ! _SeSIsValidObject ( ao )) return false ; } catch ( e ) { Log ( \"Error getting event object:\" + e . Description + \"/\" + etxt ); return false ; } var ro = SeSCacheAccessibleObject ( ao ); if ( l3 && ro ) Log3 ( \"CustomListboxControl: \" + ro . toString ()); if ( ro != null && ( \"OnValueChange\" in ro )) { ro . OnValueChange (); } return true ; } return false ; } g_customEventHandlers . push ( CustomRegisterAccessibleEvent );","title":"6. CustomListboxControl Specific Accessibility Events"},{"location":"Guide/tutorial_custom_library/#7-record-and-playback","text":"Update LibUser.jslib library definition for automatic loading. Now you are ready to record and playback a test. Just remember that in Select an Application to Record dialog you need to uncheck Auto library and select Generic library. Notice Action names in Recording Activity dialog, they correspond to Win32ItemSelectable and Win32CustomListboxControl behaviors.","title":"7. Record and Playback"},{"location":"Guide/tutorial_custom_library/#8-customcontroltest","text":"This tutorial is complemented by a ready test CustomControlTest which you can examine and run. Open CustomControlTest in Rapise from C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest Tip : It is possible to launch CustomControlApp right from Rapise, just double click on CustomControlApp.exe in the file tree.","title":"8. CustomControlTest"},{"location":"Guide/tutorial_custom_library/#9-wrap-up-implementation-sequence","text":"Full support for a custom object requires support for Recording, Learn and Playback. Let's go over created library and specify the purpose of each component in it. Matcher Rule - it is used to recognize the object inside an application, required for Recording, Learn and Playback. Events in Behavior Patterns - handling events is required for Recording. Actions in Behavior Patterns - actions are used to examine or change state of the control, required for Playback. Custom Accessibility Event Handler - required for Recording if some important events are not processed by Rapise engine by default.","title":"9. Wrap-up: Implementation Sequence"},{"location":"Guide/tutorial_exploratory_testing/","text":"Tutorial: Manual Testing \u00b6 Purpose \u00b6 Exploratory manual testing is used for situations where you have a new or changing application and the user interface is still evolving. Traditional manual testing, where you create a test case ahead of time, define the prescriptive test steps and then assign it to the tester does not make sense in such cases. The solution is to perform exploratory testing , where you explore using the application at the same time as creating the test script. The created test script can then be published to your test management system (i.e. SpiraTest ) for future regression testing. Rapise can help accelerate and optimize exploratory manual testing. Rapise lets you walk through the application, capturing your interactions as you use it, recording screenshots of the objects and screens you interact with. From this, Rapise will create a fully formed test script ready to use. Step 1 - Creating a New Test \u00b6 To start manual testing, simply create your test as normal using the New Test dialog box and choose 'Manual: Manual-only testing' methodology: Then once the test has been created, click on the Tools > Manual Steps menu item and then you will be taken to the Manual Editor with the Manual Toolbar Visible. The test step list will initially be empty: Step 2 - Recording Some Steps \u00b6 Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test. To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options: Now click the Record Manual button (or menu Test > Record Manual ) and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording. As you click through the application, the recording will display the list of steps and actions being captured: In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold: When you click Finish to complete the recording, Rapise will now display the list of populated manual test steps with the embedded screen captures: You will notice that the description of each test step will use the form \"User [action] at [coordinates] in '[object name]'\" and the expected result will include the screenshot of what the user was doing. In addition, the sample data will contains the equivalent Rapise automation code for reference. This can be useful later if you decide to automate this test. Step 3 - Editing the Steps \u00b6 Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows: Click Save to make sure the updates are all saved locally. Now before you can execute these tests , you will need to Save them to Spira (our web-based test management system). Step 4 - Saving to Spira \u00b6 Click on the option to Save to Spira , you will be asked to confirm the creation of the document folder in Spira that will hold the test files: Click on ' Create' and then the manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in Tester.Assert commands to relate specific verification points with test steps during automated testing. Now that the test has been saved in Spira, you can click on the 'View in Browser' option to see how the test steps look inside Spira. Now that we have finished the recording, we can now play back this manual test. Step 5 - Executing the Manual Test \u00b6 Choose the Release from the list of those available in the project: Then click on the ' Execute' icon to start manual test execution. That will bring up the manual playback screen: On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the Pass button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the >| button. Once you get to Step 7, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect: Next we shall attach a screenshot of what actually happened and log a test failure and associated incident / defect. Step 6 - Capturing and Annotating a Screenshot \u00b6 Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture: If the MS Paint application is not in the foreground, just click ESC on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor: You can now use the annotation tools to add labels, text and other items to explain the issue that you found: In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result: Now we can log an incident that is associated with this test failure. Step 7 - Logging the Incident / Defect \u00b6 Click on the ' Log Incident ' button to display the new incident entry screen: Choose the type of incident, enter the name , description , priority, detected release and any other required fields as defined by the workflow in the project that you are connected to. Once you have entered in the various fields, click the 'Save' icon in the top left. This will return you to the manual execution screen with the Incident ID [IN:xxx] and name displayed at the bottom. Now click on the ' Fail ' button and the test case will be marked as failed: Finally, click on the Finish button and the results will be posted to Spira . Step 8 - Viewing the Results \u00b6 Now to view the results in Spira, click on the Spira Dashboard item in the main Rapise menu View > Spira Dashboard . Then under the 'My Created' test cases, click on the link for the test case you execute. That will bring up the test case in Spira. Now click on the 'Failed' hyperlink in Spira and the new test run will be displayed: If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot): If you click on the Incidents tab, you can also see the new incident that was logged, linked to this test run: Congratulations! You have now successfully executed a manual test using Rapise. See Also \u00b6 Manual Testing Manual Recording Manual Playback","title":"Tutorial: Manual Testing"},{"location":"Guide/tutorial_exploratory_testing/#tutorial-manual-testing","text":"","title":"Tutorial: Manual Testing"},{"location":"Guide/tutorial_exploratory_testing/#purpose","text":"Exploratory manual testing is used for situations where you have a new or changing application and the user interface is still evolving. Traditional manual testing, where you create a test case ahead of time, define the prescriptive test steps and then assign it to the tester does not make sense in such cases. The solution is to perform exploratory testing , where you explore using the application at the same time as creating the test script. The created test script can then be published to your test management system (i.e. SpiraTest ) for future regression testing. Rapise can help accelerate and optimize exploratory manual testing. Rapise lets you walk through the application, capturing your interactions as you use it, recording screenshots of the objects and screens you interact with. From this, Rapise will create a fully formed test script ready to use.","title":"Purpose"},{"location":"Guide/tutorial_exploratory_testing/#step-1-creating-a-new-test","text":"To start manual testing, simply create your test as normal using the New Test dialog box and choose 'Manual: Manual-only testing' methodology: Then once the test has been created, click on the Tools > Manual Steps menu item and then you will be taken to the Manual Editor with the Manual Toolbar Visible. The test step list will initially be empty:","title":"Step 1 - Creating a New Test"},{"location":"Guide/tutorial_exploratory_testing/#step-2-recording-some-steps","text":"Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test. To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options: Now click the Record Manual button (or menu Test > Record Manual ) and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording. As you click through the application, the recording will display the list of steps and actions being captured: In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold: When you click Finish to complete the recording, Rapise will now display the list of populated manual test steps with the embedded screen captures: You will notice that the description of each test step will use the form \"User [action] at [coordinates] in '[object name]'\" and the expected result will include the screenshot of what the user was doing. In addition, the sample data will contains the equivalent Rapise automation code for reference. This can be useful later if you decide to automate this test.","title":"Step 2 - Recording Some Steps"},{"location":"Guide/tutorial_exploratory_testing/#step-3-editing-the-steps","text":"Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows: Click Save to make sure the updates are all saved locally. Now before you can execute these tests , you will need to Save them to Spira (our web-based test management system).","title":"Step 3 - Editing the Steps"},{"location":"Guide/tutorial_exploratory_testing/#step-4-saving-to-spira","text":"Click on the option to Save to Spira , you will be asked to confirm the creation of the document folder in Spira that will hold the test files: Click on ' Create' and then the manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in Tester.Assert commands to relate specific verification points with test steps during automated testing. Now that the test has been saved in Spira, you can click on the 'View in Browser' option to see how the test steps look inside Spira. Now that we have finished the recording, we can now play back this manual test.","title":"Step 4 - Saving to Spira"},{"location":"Guide/tutorial_exploratory_testing/#step-5-executing-the-manual-test","text":"Choose the Release from the list of those available in the project: Then click on the ' Execute' icon to start manual test execution. That will bring up the manual playback screen: On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the Pass button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the >| button. Once you get to Step 7, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect: Next we shall attach a screenshot of what actually happened and log a test failure and associated incident / defect.","title":"Step 5 - Executing the Manual Test"},{"location":"Guide/tutorial_exploratory_testing/#step-6-capturing-and-annotating-a-screenshot","text":"Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture: If the MS Paint application is not in the foreground, just click ESC on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor: You can now use the annotation tools to add labels, text and other items to explain the issue that you found: In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result: Now we can log an incident that is associated with this test failure.","title":"Step 6 - Capturing and Annotating a Screenshot"},{"location":"Guide/tutorial_exploratory_testing/#step-7-logging-the-incident-defect","text":"Click on the ' Log Incident ' button to display the new incident entry screen: Choose the type of incident, enter the name , description , priority, detected release and any other required fields as defined by the workflow in the project that you are connected to. Once you have entered in the various fields, click the 'Save' icon in the top left. This will return you to the manual execution screen with the Incident ID [IN:xxx] and name displayed at the bottom. Now click on the ' Fail ' button and the test case will be marked as failed: Finally, click on the Finish button and the results will be posted to Spira .","title":"Step 7 - Logging the Incident / Defect"},{"location":"Guide/tutorial_exploratory_testing/#step-8-viewing-the-results","text":"Now to view the results in Spira, click on the Spira Dashboard item in the main Rapise menu View > Spira Dashboard . Then under the 'My Created' test cases, click on the link for the test case you execute. That will bring up the test case in Spira. Now click on the 'Failed' hyperlink in Spira and the new test run will be displayed: If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot): If you click on the Incidents tab, you can also see the new incident that was logged, linked to this test run: Congratulations! You have now successfully executed a manual test using Rapise.","title":"Step 8 - Viewing the Results"},{"location":"Guide/tutorial_exploratory_testing/#see-also","text":"Manual Testing Manual Recording Manual Playback","title":"See Also"},{"location":"Guide/tutorial_java_testing/","text":"Tutorial: Java Testing (RVL) \u00b6 In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application: Java AWT Apps Java Swing Apps Java SWT Apps This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial. Example 1 - Launching the Sample AWT/Swing Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA and right-click on the x86run.cmd file and choose Run as Administrator . If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing . Once the application is started, open up Rapise and click File > New Test : Enter the name Java Test 1 as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select . Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example: Type = Action Object = button1 Action = DoAction This process is illustrated below: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy : You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. Example 2 - Launching the Sample SWT Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT and double-click on the JavaSWTAUT.bat file to start the sample application. If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing . Once the application is started, open up Rapise and click the menu FIle > New Test : Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the Select an Application to Record dialog: Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select . Now in the sample application click on some of the SWT controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example: Type = Action Object = Image_Button Action = DoAction This process is illustrated below: You can drag and drop any of the learned objects from the left-hand pane into the main test script. When you click Play , Rapise will play back your test script against the application. Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. See Also \u00b6 Java AWT/Swing Testing Java SWT Testing Testing Oracle Forms","title":"Using Rapise Visual Language"},{"location":"Guide/tutorial_java_testing/#tutorial-java-testing-rvl","text":"In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application: Java AWT Apps Java Swing Apps Java SWT Apps This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial.","title":"Tutorial: Java Testing (RVL)"},{"location":"Guide/tutorial_java_testing/#example-1-launching-the-sample-awtswing-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA and right-click on the x86run.cmd file and choose Run as Administrator . If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing . Once the application is started, open up Rapise and click File > New Test : Enter the name Java Test 1 as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select . Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example: Type = Action Object = button1 Action = DoAction This process is illustrated below: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy : You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Example 1 - Launching the Sample AWT/Swing Application"},{"location":"Guide/tutorial_java_testing/#example-2-launching-the-sample-swt-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT and double-click on the JavaSWTAUT.bat file to start the sample application. If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing . Once the application is started, open up Rapise and click the menu FIle > New Test : Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the Select an Application to Record dialog: Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select . Now in the sample application click on some of the SWT controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example: Type = Action Object = Image_Button Action = DoAction This process is illustrated below: You can drag and drop any of the learned objects from the left-hand pane into the main test script. When you click Play , Rapise will play back your test script against the application. Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Example 2 - Launching the Sample SWT Application"},{"location":"Guide/tutorial_java_testing/#see-also","text":"Java AWT/Swing Testing Java SWT Testing Testing Oracle Forms","title":"See Also"},{"location":"Guide/tutorial_java_using_javascript/","text":"Tutorial: Java Testing (JavaScript) \u00b6 In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application: Java AWT Apps Java Swing Apps Java SWT Apps This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead. Example 1 - Launching the Sample AWT/Swing Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA and right-click on the x86run.cmd file and choose Run as Administrator . If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing . Once the application is started, open up Rapise and click File > New Test : Enter the name Java Test 1 as the name and choose Basic: Windows Desktop Application as the methodology. Choose the JavaScript option during test creation instead of RVL. Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select . Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"button1\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy : You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. Example 2 - Launching the Sample SWT Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT and double-click on the JavaSWTAUT.bat file to start the sample application. If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing . Once the application is started, open up Rapise and click the menu FIle > New Test : Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology. Choose the JavaScript option during test creation instead of RVL. Once the test is created, you will see: Click on the Record button to display the Select an Application to Record dialog: Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select . Now in the sample application click on some of the SWT controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. See Also \u00b6 Java AWT/Swing Testing Java SWT Testing","title":"Using JavaScript"},{"location":"Guide/tutorial_java_using_javascript/#tutorial-java-testing-javascript","text":"In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application: Java AWT Apps Java Swing Apps Java SWT Apps This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead.","title":"Tutorial: Java Testing (JavaScript)"},{"location":"Guide/tutorial_java_using_javascript/#example-1-launching-the-sample-awtswing-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA and right-click on the x86run.cmd file and choose Run as Administrator . If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing . Once the application is started, open up Rapise and click File > New Test : Enter the name Java Test 1 as the name and choose Basic: Windows Desktop Application as the methodology. Choose the JavaScript option during test creation instead of RVL. Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select . Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"button1\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy : You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Example 1 - Launching the Sample AWT/Swing Application"},{"location":"Guide/tutorial_java_using_javascript/#example-2-launching-the-sample-swt-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT and double-click on the JavaSWTAUT.bat file to start the sample application. If you have Java configured correctly, you will see: If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing . Once the application is started, open up Rapise and click the menu FIle > New Test : Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology. Choose the JavaScript option during test creation instead of RVL. Once the test is created, you will see: Click on the Record button to display the Select an Application to Record dialog: Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select . Now in the sample application click on some of the SWT controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Example 2 - Launching the Sample SWT Application"},{"location":"Guide/tutorial_java_using_javascript/#see-also","text":"Java AWT/Swing Testing Java SWT Testing","title":"See Also"},{"location":"Guide/tutorial_qt_framework/","text":"Tutorial: Qt Framework (RVL) \u00b6 Rapise includes support for testing applications written using the Qt Framework and QWidget controls. To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled . This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added. This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial. Testing the Sample Qt Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework and double-click on the QtWidgetApp.exe file to start the sample application. If you have everything configured correctly, you will see: Once the application is started, open up Rapise and click menu File > New Test : Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click Select . Now in the sample application click on some of the Qt controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy : You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. See Also \u00b6 Testing Qt Framework Applications","title":"Using Rapise Visual Language"},{"location":"Guide/tutorial_qt_framework/#tutorial-qt-framework-rvl","text":"Rapise includes support for testing applications written using the Qt Framework and QWidget controls. To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled . This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added. This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial.","title":"Tutorial: Qt Framework (RVL)"},{"location":"Guide/tutorial_qt_framework/#testing-the-sample-qt-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework and double-click on the QtWidgetApp.exe file to start the sample application. If you have everything configured correctly, you will see: Once the application is started, open up Rapise and click menu File > New Test : Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click Select . Now in the sample application click on some of the Qt controls. Rapise will record the actions: When you click Finish , Rapise will prompt you to confirm where you want the recorded test steps to be placed: Select the first row in the test grid and click Insert Here . You will see the recorded test script and learned objects in Rapise: When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy : You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Testing the Sample Qt Application"},{"location":"Guide/tutorial_qt_framework/#see-also","text":"Testing Qt Framework Applications","title":"See Also"},{"location":"Guide/tutorial_qt_using_javascript/","text":"Using JavaScript \u00b6 Rapise includes support for testing applications written using the Qt Framework and QWidget controls. To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled . This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added. This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead. Testing the Sample Qt Application \u00b6 On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework and double-click on the QtWidgetApp.exe file to start the sample application. If you have everything configured correctly, you will see: Once the application is started, open up Rapise and click menu FIle > New Test : Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. Then choose JavaScript as the scripting choice: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click Select . Now in the sample application click on some of the Qt controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK_\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy : You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against. See Also \u00b6 Testing Qt Framework Applications","title":"Using JavaScript"},{"location":"Guide/tutorial_qt_using_javascript/#using-javascript","text":"Rapise includes support for testing applications written using the Qt Framework and QWidget controls. To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled . This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below). This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added. This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead.","title":"Using JavaScript"},{"location":"Guide/tutorial_qt_using_javascript/#testing-the-sample-qt-application","text":"On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available. Then go to 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework and double-click on the QtWidgetApp.exe file to start the sample application. If you have everything configured correctly, you will see: Once the application is started, open up Rapise and click menu FIle > New Test : Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. Then choose JavaScript as the scripting choice: Once the test is created, you will see: Click on the Record button to display the \"Select an Application to Record\" dialog: Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click Select . Now in the sample application click on some of the Qt controls. Rapise will record the actions: When you click Finish , you will see the recorded test script and learned objects: You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK_\") (for example) and Rapise will display the list of available functions. When you click Play , Rapise will play back your test script against the application: Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy : You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent . Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.","title":"Testing the Sample Qt Application"},{"location":"Guide/tutorial_qt_using_javascript/#see-also","text":"Testing Qt Framework Applications","title":"See Also"},{"location":"Guide/tutorial_record_and_playback/","text":"Tutorial: Web Testing (RVL) \u00b6 In this section, you will learn how to record and execute a Rapise script against a web application. We will be using a demo application called Library Information System . Our test will be simple. It will log on to the library catalog, navigate to the main menu, and click on all of the menu options to make sure the links are working. You are viewing the codeless version of the tutorial. It demonstrates usage of Rapise Visual Language . To view JavaScript-based tutorial click here . Open Rapise and Create New Test \u00b6 Go to Start > All Programs > Inflectra > Rapise . The following window should appear. Select File > New Test in the main menu. If this is your first time using Rapise on this computer, you may see the following dialog box: If you see this, it means that Rapise is trying to connect to a SpiraTest server . SpiraTest is our web based test management system . It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the [Cancel] button and you will see the new test dialog : Now enter the name of your new test \u2018Web Testing 1\u2019 , and click Web: Cross-Browser Testing Support . Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later): Choose \u2018Internet Explorer HTML\u2019 from the list of options. Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the RVL scriptless approach. If you\u2019re interested in creating the test using JavaScript instead, please refer to the section - Tutorial: Web Testing (JavaScript) . Rapise will create the new test and you will see the empty recording grid: You are now ready to record your first test. Open the Application Under Test \u00b6 Open up Internet Explorer. You will find it in Start > All Programs > Internet Explorer . In Internet Explorer, navigate to: http://www.libraryinformationsystem.org : Record Test Steps \u00b6 In the Rapise window, press the Record button on the toolbar. The Recording Activity Dialog (RA dialog) will appear: The RA dialog has a grid. As you interact with the sample Library Information System program, the grid will automatically populate with your actions. Let's begin creating the test. On the library information system login page, click on the Log In link in the top-right of the screen. In the Username text box, type librarian Click on the Password text box next. You'll notice that the RA dialog has changed. Your actions, clicking Log-In and entering a username, are listed in the grid: The password for user librarian is also librarian . Type the password in and then press the Log-In button. Two more rows should appear in the RA dialog : one to represent the password entry, and one to represent the button click: You should now be on the main menu of the Library Information System with the user's name listed in the top-right: Hover the mouse over the \u201cWelcome librarian \u201d username label on the top-right and press Ctrl + 1 to bring up the Verify dialog box: This box lets you add a checkpoint to verify the properties of an object on the screen. Select the Inner Text option and click OK button to close the dialog. That will add the verification check to your list of recorded actions: Click the Book Management button. It is highlighted in the next screenshot: You should now be on the Book Management page (see the below image). Click the Create new book link: You should now be on the Create New Book page (see image below). Click the HOME button to go back to the main menu. Now, click the Author Management button: You should now be on the Author Management page (see image below): Click the Create New Author link: You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu. At this point, there should be 11 rows in the RA dialog grid. You are now back on the Main Menu. Click Log Out (top-right). To end the recording session either press CTRL+3 or click Finish button on the RA dialog . Rapise will ask you whether you want to use this recording or discard it: Click on the Append to End button and Rapise will insert the recorded steps into the test grid: Let's save our test. Press the Save button at the top left of the Rapise window. Playback \u00b6 Let's execute the test we just created. First, close Internet explorer. Rapise will open a new instance of Internet Explorer to the correct url ( www.libraryinformationsystem.org ) when the test begins. To execute the script, press the Play button on the toolbar. After execution, a screen like the one below will appear. Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed. For more information on the report, see Automated Reporting . Playback in Other Browsers \u00b6 Now that we have recorded our test in Internet Explorer, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Firefox, Chrome, Selenium - *, etc.) and click the Play button. Before the playback in other browsers will work correctly, you will need to make sure you have configured the web browsers appropriately. In the case of the Selenium options, you will need to make sure you have installed the Selenium WebDriver binaries correctly. Track and Learn Object Using the Web Spy \u00b6 This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing. This is useful in cases where you have more complex applications to test and you need to pick specific objects. For example you may want to select one of the books in the grid based on its name rather than its row number (which may change if you add books). On the toolbar expand the dropdown list for the Spy tool and make sure that Web is selected: Now, click on the main Spy tool icon and Rapise will start the Web Spy : Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the Book Management menu item so that the list of books is displayed: Now back in the Web Spy , click on the Get Snapshot button to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page: Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books. In addition, you can use the Track (Ctrl+T) tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title \u201cAmsterdam\u201d, simply press Ctrl + T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl + T again. Rapise will now highlight that item in the DOM Tree automatically: You can see all of the properties of this HTML element displayed on the right, specifically: tagName of the element (td), text of the element (Amsterdam), HTML attributes in the Properties section, CSS and XPath expressions for locating this element in Selectors section. If you want to use this object in a Rapise test script, you can simply click the Learn button and the HTML element will be added to the Recording Activity Dialog: Click Finish and the object will have been added to your test\u2019s Object Tree: To use this new object in our test script, we can simply use the test editor to add the appropriate command. For example, if you wanted to get the textual value of the cell in your test, you should click on the row in the grid after the Book Management \u2013 DoClick : Now click on the Insert Row Before button in the main Test ribbon to add a new row: This will insert a new row into the test. In this new row, left-click on each of the cells (as illustrated below) and pick the following values from the dropdown lists: Then choose the following: Type = Action Object = Amsterdam Action = GetInnerText You should now have the following: Test XPATH and Learn Object Using the Web Spy \u00b6 In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test. For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink. Open up the Web Spy as before: One the toolbar enter in the following to locate the table: 1 //table[@id='MainContent_grdBooks'] Now click on the Test button to display the matching results: Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing 'Amsterdam' and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH: 1 //table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a This XPath consists of the following elements: Find the table with the specified ID. Find any row inside that table that contains a cell with the text 'Amsterdam'. For any matching cell, get its parent row and inside the fifth cell, get any hyperlink. In this case that will correctly locate the Edit link for the book 'Amsterdam'. Now that we have the correct item identified, click on the Learn button to the right of the Test button. That will now learn a new object that corresponds to the Edit Amsterdam object: Click Finish and the object will have been added to the Object Tree of the current test: Modify the Test \u00b6 To click on this object, simply click on the row in the grid where you want this action to occur and choose \u201c Insert Row Before \u201d from the toolbar: In this new row, right-click on each of the cells, and pick the following values from the dropdown lists: Type = Action Object = Edit Action = DoClick So your test will now look like: Since clicking on the Edit link will take you to a different page than where the \u2018Create New Book\u2019 link is available, we need to add another row and add: Type = Action Object = Book_Management Action = DoClick so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed. This means the test will now look like: Now the line: by itself does not do anything, it just gets the text. So, to make the test more useful, we can use the Assert command to turn this into a test for the correct value. To make the change, simply delete this entire row using the Delete Current Row option on the toolbar and add a new blank row in its place. Now choose the Type as Assert and press TAB on the keyboard. You will now have the following: This is a generic placeholder for any type of assertion. We need to first change the value of the message \u201cTBD\u201d to something meaningful (e.g. \u201cCheck that the name matches\u201d): This is the message that will be displayed in the report. Now we need to replace the first parameter with the output from the result of the 'Amsterdam' checking. To do this, change the Condition on the second row from: param1 == param2 to output1 == param2 and press TAB to move away from the condition cell: Notice how Rapise automatically changed the second row from Param to Action . Now in the TBD cell next to the Action type, choose the Amsterdam object name and the GetInnerText action from the dropdown lists. Finally change the param2 string from TBD to the expected value \u201cAmsterdam\u201d. You will now have: Now click Play to playback the new test: The test should now pass successfully. See Also \u00b6 Tutorial: Web Testing (JavaScript) Browser Profiles Setting Up Web Browsers","title":"Using Rapise Visual Language"},{"location":"Guide/tutorial_record_and_playback/#tutorial-web-testing-rvl","text":"In this section, you will learn how to record and execute a Rapise script against a web application. We will be using a demo application called Library Information System . Our test will be simple. It will log on to the library catalog, navigate to the main menu, and click on all of the menu options to make sure the links are working. You are viewing the codeless version of the tutorial. It demonstrates usage of Rapise Visual Language . To view JavaScript-based tutorial click here .","title":"Tutorial: Web Testing (RVL)"},{"location":"Guide/tutorial_record_and_playback/#open-rapise-and-create-new-test","text":"Go to Start > All Programs > Inflectra > Rapise . The following window should appear. Select File > New Test in the main menu. If this is your first time using Rapise on this computer, you may see the following dialog box: If you see this, it means that Rapise is trying to connect to a SpiraTest server . SpiraTest is our web based test management system . It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the [Cancel] button and you will see the new test dialog : Now enter the name of your new test \u2018Web Testing 1\u2019 , and click Web: Cross-Browser Testing Support . Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later): Choose \u2018Internet Explorer HTML\u2019 from the list of options. Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the RVL scriptless approach. If you\u2019re interested in creating the test using JavaScript instead, please refer to the section - Tutorial: Web Testing (JavaScript) . Rapise will create the new test and you will see the empty recording grid: You are now ready to record your first test.","title":"Open Rapise and Create New Test"},{"location":"Guide/tutorial_record_and_playback/#open-the-application-under-test","text":"Open up Internet Explorer. You will find it in Start > All Programs > Internet Explorer . In Internet Explorer, navigate to: http://www.libraryinformationsystem.org :","title":"Open the Application Under Test"},{"location":"Guide/tutorial_record_and_playback/#record-test-steps","text":"In the Rapise window, press the Record button on the toolbar. The Recording Activity Dialog (RA dialog) will appear: The RA dialog has a grid. As you interact with the sample Library Information System program, the grid will automatically populate with your actions. Let's begin creating the test. On the library information system login page, click on the Log In link in the top-right of the screen. In the Username text box, type librarian Click on the Password text box next. You'll notice that the RA dialog has changed. Your actions, clicking Log-In and entering a username, are listed in the grid: The password for user librarian is also librarian . Type the password in and then press the Log-In button. Two more rows should appear in the RA dialog : one to represent the password entry, and one to represent the button click: You should now be on the main menu of the Library Information System with the user's name listed in the top-right: Hover the mouse over the \u201cWelcome librarian \u201d username label on the top-right and press Ctrl + 1 to bring up the Verify dialog box: This box lets you add a checkpoint to verify the properties of an object on the screen. Select the Inner Text option and click OK button to close the dialog. That will add the verification check to your list of recorded actions: Click the Book Management button. It is highlighted in the next screenshot: You should now be on the Book Management page (see the below image). Click the Create new book link: You should now be on the Create New Book page (see image below). Click the HOME button to go back to the main menu. Now, click the Author Management button: You should now be on the Author Management page (see image below): Click the Create New Author link: You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu. At this point, there should be 11 rows in the RA dialog grid. You are now back on the Main Menu. Click Log Out (top-right). To end the recording session either press CTRL+3 or click Finish button on the RA dialog . Rapise will ask you whether you want to use this recording or discard it: Click on the Append to End button and Rapise will insert the recorded steps into the test grid: Let's save our test. Press the Save button at the top left of the Rapise window.","title":"Record Test Steps"},{"location":"Guide/tutorial_record_and_playback/#playback","text":"Let's execute the test we just created. First, close Internet explorer. Rapise will open a new instance of Internet Explorer to the correct url ( www.libraryinformationsystem.org ) when the test begins. To execute the script, press the Play button on the toolbar. After execution, a screen like the one below will appear. Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed. For more information on the report, see Automated Reporting .","title":"Playback"},{"location":"Guide/tutorial_record_and_playback/#playback-in-other-browsers","text":"Now that we have recorded our test in Internet Explorer, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Firefox, Chrome, Selenium - *, etc.) and click the Play button. Before the playback in other browsers will work correctly, you will need to make sure you have configured the web browsers appropriately. In the case of the Selenium options, you will need to make sure you have installed the Selenium WebDriver binaries correctly.","title":"Playback in Other Browsers"},{"location":"Guide/tutorial_record_and_playback/#track-and-learn-object-using-the-web-spy","text":"This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing. This is useful in cases where you have more complex applications to test and you need to pick specific objects. For example you may want to select one of the books in the grid based on its name rather than its row number (which may change if you add books). On the toolbar expand the dropdown list for the Spy tool and make sure that Web is selected: Now, click on the main Spy tool icon and Rapise will start the Web Spy : Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the Book Management menu item so that the list of books is displayed: Now back in the Web Spy , click on the Get Snapshot button to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page: Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books. In addition, you can use the Track (Ctrl+T) tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title \u201cAmsterdam\u201d, simply press Ctrl + T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl + T again. Rapise will now highlight that item in the DOM Tree automatically: You can see all of the properties of this HTML element displayed on the right, specifically: tagName of the element (td), text of the element (Amsterdam), HTML attributes in the Properties section, CSS and XPath expressions for locating this element in Selectors section. If you want to use this object in a Rapise test script, you can simply click the Learn button and the HTML element will be added to the Recording Activity Dialog: Click Finish and the object will have been added to your test\u2019s Object Tree: To use this new object in our test script, we can simply use the test editor to add the appropriate command. For example, if you wanted to get the textual value of the cell in your test, you should click on the row in the grid after the Book Management \u2013 DoClick : Now click on the Insert Row Before button in the main Test ribbon to add a new row: This will insert a new row into the test. In this new row, left-click on each of the cells (as illustrated below) and pick the following values from the dropdown lists: Then choose the following: Type = Action Object = Amsterdam Action = GetInnerText You should now have the following:","title":"Track and Learn Object Using the Web Spy"},{"location":"Guide/tutorial_record_and_playback/#test-xpath-and-learn-object-using-the-web-spy","text":"In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test. For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink. Open up the Web Spy as before: One the toolbar enter in the following to locate the table: 1 //table[@id='MainContent_grdBooks'] Now click on the Test button to display the matching results: Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing 'Amsterdam' and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH: 1 //table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a This XPath consists of the following elements: Find the table with the specified ID. Find any row inside that table that contains a cell with the text 'Amsterdam'. For any matching cell, get its parent row and inside the fifth cell, get any hyperlink. In this case that will correctly locate the Edit link for the book 'Amsterdam'. Now that we have the correct item identified, click on the Learn button to the right of the Test button. That will now learn a new object that corresponds to the Edit Amsterdam object: Click Finish and the object will have been added to the Object Tree of the current test:","title":"Test XPATH and Learn Object Using the Web Spy"},{"location":"Guide/tutorial_record_and_playback/#modify-the-test","text":"To click on this object, simply click on the row in the grid where you want this action to occur and choose \u201c Insert Row Before \u201d from the toolbar: In this new row, right-click on each of the cells, and pick the following values from the dropdown lists: Type = Action Object = Edit Action = DoClick So your test will now look like: Since clicking on the Edit link will take you to a different page than where the \u2018Create New Book\u2019 link is available, we need to add another row and add: Type = Action Object = Book_Management Action = DoClick so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed. This means the test will now look like: Now the line: by itself does not do anything, it just gets the text. So, to make the test more useful, we can use the Assert command to turn this into a test for the correct value. To make the change, simply delete this entire row using the Delete Current Row option on the toolbar and add a new blank row in its place. Now choose the Type as Assert and press TAB on the keyboard. You will now have the following: This is a generic placeholder for any type of assertion. We need to first change the value of the message \u201cTBD\u201d to something meaningful (e.g. \u201cCheck that the name matches\u201d): This is the message that will be displayed in the report. Now we need to replace the first parameter with the output from the result of the 'Amsterdam' checking. To do this, change the Condition on the second row from: param1 == param2 to output1 == param2 and press TAB to move away from the condition cell: Notice how Rapise automatically changed the second row from Param to Action . Now in the TBD cell next to the Action type, choose the Amsterdam object name and the GetInnerText action from the dropdown lists. Finally change the param2 string from TBD to the expected value \u201cAmsterdam\u201d. You will now have: Now click Play to playback the new test: The test should now pass successfully.","title":"Modify the Test"},{"location":"Guide/tutorial_record_and_playback/#see-also","text":"Tutorial: Web Testing (JavaScript) Browser Profiles Setting Up Web Browsers","title":"See Also"},{"location":"Guide/tutorial_soap_web_services/","text":"Tutorial: SOAP Web Services \u00b6 In this section you shall learn how to test a SOAP web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy SOAP web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org , and its SOAP web service API can be found at: http://www.libraryinformationsystem.org/Services/SoapService.aspx What is SOAP and what is a SOAP web service? \u00b6 SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web servicesmake use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descripting, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent. Overview \u00b6 Creating a SOAP web service test in Rapise consists of the following steps: Using the SOAP web services studio to inspect the SOAP WSDL Invoke the various SOAP operations and verify that they return the expected data in the expected format. Generating the test script in JavaScript that uses the learned Rapise web service objects based on the WSDL. We shall discuss each of these steps in turn. 1. Inspecting the SOAP WSDL Endpoint \u00b6 Create a new test in Rapise called MySoapTest1.sstest . For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project. Language selection prompt is shown. For Web Services it is recommended to use JavaScript . Once you have created it, choose Tools > Web Services menu to add a new web service definition to your test project: This will display the Add New Web Service dialog box: Choose SOAP as the type of web service you want to create. Then, enter the name of the web service that you're going to add, in this case enter \"LibraryInformationSystem.soap\" and click Create . This will add the SOAP web services definition file to your test project: In the Endpoint section of the SOAP toolbar , enter the following URL to the sample application's WSDL file: 1 http://www.libraryinformationsystem.org/Services/SoapService.svc?wsdl then click the Get WSDL to load the list of SOAP operations: Now click on the Connection_Authenticate operation in the SOAP explorer: This is the first operation we will need to invoke since it is used to authenticate with the online library system before calling the other functions. You can click on each of the different SOAP operations (e.g. for inserting, retrieving, deleting or updating a book) and the SOAP studio will display the expected input and output parameters as well as any headers. In the next section we shall be performing the following actions: Authenticating as a specific user Viewing the list of books Inserting a new book Viewing the updated list of books Disconnecting Each one will involve calling a specific SOAP operation with some input parameters, viewing the data returned and adding a verification step if appropriate. 2. Invoking the SOAP Actions \u00b6 Starting with the Connection_Authenticate operation that we had selected, click on the two Input parameters in turn and enter values: userName = librarian password = librarian Then click the Invoke button underneath: You can see that the response to our Invoked operation as a simple boolean value of True returned. That indicated that we authenticated correctly. If you try putting in an incorrect login/password, you'll get back False instead. If you have a SOAP web service that doesn't behave as expected, you may want to view the raw SOAP XML that is being sent to/from the web service. To view this, click on the Request/Response tab of the SOAP studio editor and the following will be displayed: This view lets you see the Request and Response HTTP headers body, with the body displayed in a friendly, easy to read color-coded XML format. That way you can easily invoke the SOAP operations using the Rapise SOAP studio GUI and view the raw SOAP XML being sent to/from the server. This is invaluable when debugging a failing SOAP web service. In the case of our test of Connection_Authenticate , we can now click the Record button (next to Send ) to add this operation to our list of recorded test steps: Once you have added the operation to the list of recorded steps, you can go one step further and ask Rapise to verify the data returned. To do that, click on the Verify button that is displayed next to the Record button. The step will now switch to bold to indicate that a verification step is also included. Now we need to repeat this process for the following additional operations: Book_Retrieve No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Click Verify to add a verification step Book_Insert Populate the Book input object with these values: AuthorId = 2 AuthorIdSpecified = True GenreId = 3 GenreIdSpecified = True Name = A Christmas Carol DateAdded = (pick a date using the date picker) DateAddedSpecified = True DateAddedIso = 2017-01-04T07:46:36 Press Invoke to test the insert Press Record to record the test script Book_Retrieve No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Click Verify to add a verification step Connection_Disconnect No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Once you have completed all these steps, you will see the following recorded in the SOAP Script Steps box: Now that we have recorded the operations and verifications, we can proceed to generate the test script in Rapise that will regression test the web service. 3. Generating the Rapise Test Script \u00b6 In the SOAP Script Steps toolbar, click on the Create Script button to generate the initial test script: Click on the Test shortcut in the main toolbar, and Rapise will display the Main.js file. In the main Rapise test script file, you will see the following generated: function Test () { var LibraryInformationSystem = SeS ( 'LibraryInformationSystem' ); LibraryInformationSystem . DoExecute ( 'Connection_Authenticate' ,{ \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , LibraryInformationSystem . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...} \\ ]}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"DateAdded\" : \"2017-01-04T07:46:36\" , \"DateAddedSpecified\" : true , \"DateAddedIso\" : \"2017-01-04T07:46:36\" , \"Genre\" : { \"Name\" : \"\" }, \"Name\" : \"A Christmas Carol\" }}); LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Connection_Disconnect' , {}); } You will see each of the SOAP functions called in turn, with verification code automatically added. We can add some comments to make it easier to read: //Authenticate var LibraryInformationSystem = SeS ( 'LibraryInformationSystem' ); LibraryInformationSystem . DoExecute ( 'Connection_Authenticate' ,{ \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , LibraryInformationSystem . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); //Verify the initial list of books LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...} \\ ]}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"DateAdded\" : \"2017-01-04T07:46:36\" , \"DateAddedSpecified\" : true , \"DateAddedIso\" : \"2017-01-04T07:46:36\" , \"Genre\" : { \"Name\" : \"\" }, \"Name\" : \"A Christmas Carol\" }}); //Verify the updated list of books and disconnect LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Connection_Disconnect' , {}); When you click the Play button in the main toolbar, you will see the following result: Congratulations! You have recorded and executed a SOAP web service test .","title":"SOAP Web Services"},{"location":"Guide/tutorial_soap_web_services/#tutorial-soap-web-services","text":"In this section you shall learn how to test a SOAP web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy SOAP web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org , and its SOAP web service API can be found at: http://www.libraryinformationsystem.org/Services/SoapService.aspx","title":"Tutorial: SOAP Web Services"},{"location":"Guide/tutorial_soap_web_services/#what-is-soap-and-what-is-a-soap-web-service","text":"SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web servicesmake use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descripting, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent.","title":"What is SOAP and what is a SOAP web service?"},{"location":"Guide/tutorial_soap_web_services/#overview","text":"Creating a SOAP web service test in Rapise consists of the following steps: Using the SOAP web services studio to inspect the SOAP WSDL Invoke the various SOAP operations and verify that they return the expected data in the expected format. Generating the test script in JavaScript that uses the learned Rapise web service objects based on the WSDL. We shall discuss each of these steps in turn.","title":"Overview"},{"location":"Guide/tutorial_soap_web_services/#1-inspecting-the-soap-wsdl-endpoint","text":"Create a new test in Rapise called MySoapTest1.sstest . For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project. Language selection prompt is shown. For Web Services it is recommended to use JavaScript . Once you have created it, choose Tools > Web Services menu to add a new web service definition to your test project: This will display the Add New Web Service dialog box: Choose SOAP as the type of web service you want to create. Then, enter the name of the web service that you're going to add, in this case enter \"LibraryInformationSystem.soap\" and click Create . This will add the SOAP web services definition file to your test project: In the Endpoint section of the SOAP toolbar , enter the following URL to the sample application's WSDL file: 1 http://www.libraryinformationsystem.org/Services/SoapService.svc?wsdl then click the Get WSDL to load the list of SOAP operations: Now click on the Connection_Authenticate operation in the SOAP explorer: This is the first operation we will need to invoke since it is used to authenticate with the online library system before calling the other functions. You can click on each of the different SOAP operations (e.g. for inserting, retrieving, deleting or updating a book) and the SOAP studio will display the expected input and output parameters as well as any headers. In the next section we shall be performing the following actions: Authenticating as a specific user Viewing the list of books Inserting a new book Viewing the updated list of books Disconnecting Each one will involve calling a specific SOAP operation with some input parameters, viewing the data returned and adding a verification step if appropriate.","title":"1. Inspecting the SOAP WSDL Endpoint"},{"location":"Guide/tutorial_soap_web_services/#2-invoking-the-soap-actions","text":"Starting with the Connection_Authenticate operation that we had selected, click on the two Input parameters in turn and enter values: userName = librarian password = librarian Then click the Invoke button underneath: You can see that the response to our Invoked operation as a simple boolean value of True returned. That indicated that we authenticated correctly. If you try putting in an incorrect login/password, you'll get back False instead. If you have a SOAP web service that doesn't behave as expected, you may want to view the raw SOAP XML that is being sent to/from the web service. To view this, click on the Request/Response tab of the SOAP studio editor and the following will be displayed: This view lets you see the Request and Response HTTP headers body, with the body displayed in a friendly, easy to read color-coded XML format. That way you can easily invoke the SOAP operations using the Rapise SOAP studio GUI and view the raw SOAP XML being sent to/from the server. This is invaluable when debugging a failing SOAP web service. In the case of our test of Connection_Authenticate , we can now click the Record button (next to Send ) to add this operation to our list of recorded test steps: Once you have added the operation to the list of recorded steps, you can go one step further and ask Rapise to verify the data returned. To do that, click on the Verify button that is displayed next to the Record button. The step will now switch to bold to indicate that a verification step is also included. Now we need to repeat this process for the following additional operations: Book_Retrieve No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Click Verify to add a verification step Book_Insert Populate the Book input object with these values: AuthorId = 2 AuthorIdSpecified = True GenreId = 3 GenreIdSpecified = True Name = A Christmas Carol DateAdded = (pick a date using the date picker) DateAddedSpecified = True DateAddedIso = 2017-01-04T07:46:36 Press Invoke to test the insert Press Record to record the test script Book_Retrieve No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Click Verify to add a verification step Connection_Disconnect No Input Parameters Press Invoke to test the retrieve Press Record to record the test script Once you have completed all these steps, you will see the following recorded in the SOAP Script Steps box: Now that we have recorded the operations and verifications, we can proceed to generate the test script in Rapise that will regression test the web service.","title":"2. Invoking the SOAP Actions"},{"location":"Guide/tutorial_soap_web_services/#3-generating-the-rapise-test-script","text":"In the SOAP Script Steps toolbar, click on the Create Script button to generate the initial test script: Click on the Test shortcut in the main toolbar, and Rapise will display the Main.js file. In the main Rapise test script file, you will see the following generated: function Test () { var LibraryInformationSystem = SeS ( 'LibraryInformationSystem' ); LibraryInformationSystem . DoExecute ( 'Connection_Authenticate' ,{ \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , LibraryInformationSystem . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...} \\ ]}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"DateAdded\" : \"2017-01-04T07:46:36\" , \"DateAddedSpecified\" : true , \"DateAddedIso\" : \"2017-01-04T07:46:36\" , \"Genre\" : { \"Name\" : \"\" }, \"Name\" : \"A Christmas Carol\" }}); LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Connection_Disconnect' , {}); } You will see each of the SOAP functions called in turn, with verification code automatically added. We can add some comments to make it easier to read: //Authenticate var LibraryInformationSystem = SeS ( 'LibraryInformationSystem' ); LibraryInformationSystem . DoExecute ( 'Connection_Authenticate' ,{ \"userName\" : \"librarian\" , \"password\" : \"librarian\" }); Tester . Assert ( 'Connection_Authenticate Response' , LibraryInformationSystem . GetResponseObject (), { \"Body\" : { \"Connection_AuthenticateResult\" : true , \"Connection_AuthenticateResultSpecified\" : true }, \"Headers\" : {}}); //Verify the initial list of books LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...} \\ ]}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Book_Insert' , { \"book\" : { \"Author\" : { \"Name\" : \"\" }, \"DateAdded\" : \"2017-01-04T07:46:36\" , \"DateAddedSpecified\" : true , \"DateAddedIso\" : \"2017-01-04T07:46:36\" , \"Genre\" : { \"Name\" : \"\" }, \"Name\" : \"A Christmas Carol\" }}); //Verify the updated list of books and disconnect LibraryInformationSystem . DoExecute ( 'Book_Retrieve' , {}); Tester . Assert ( 'Book_Retrieve Response' , LibraryInformationSystem . GetResponseObject (), {...}, \"Headers\" : {}}); LibraryInformationSystem . DoExecute ( 'Connection_Disconnect' , {}); When you click the Play button in the main toolbar, you will see the following result: Congratulations! You have recorded and executed a SOAP web service test .","title":"3. Generating the Rapise Test Script"},{"location":"Guide/tutorial_web_services_rest/","text":"Tutorial: REST Web Services \u00b6 In this section you shall learn how to test a RESTful web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy RESTful web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org , and its RESTful web service API can be found at: www.libraryinformationsystem.org/Services/RestService.aspx . What is REST and what is a RESTful web service? \u00b6 RE**presentational **S**tate **T**ransfer (**REST ) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC. A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol. Overview \u00b6 Creating a REST web service test in Rapise consists of the following steps: Using the REST query builder to create the various REST web service requests and verify that they return the expected data in the expected format. Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects. We shall discuss each of these steps in turn. 1. Using the REST Query Builder \u00b6 Create a new test in Rapise called MyRestTest1.sstest . For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project. Language selection prompt is shown. For Web Services it is recommended to use JavaScript . Once you have created it, choose Tools > Web Services menu to add a new web service definition to your test project: This will display the Add New Web Service dialog box: Choose REST as the type of web service you want to create. Then, enter the name of the web service that you're going to add, in this case enter LibraryInformationSystem.rest and click Create . This will add the REST web services definition file to your test project: You will see on the right hand side, there is a new document editor for the .rest file. This is the REST web services query form. It lets you send test HTTP requests to the web service under test and inspect the output being returned. If you open up API documentation for our sample application ( www.libraryinformationsystem.org/Services/RestService.aspx ) you will see that it exposes several operations for retrieving, adding, updating and deleting books and authors in the system. For this tutorial we shall perform the following operations: Get the special SessionID to identify our test session Get a list of books in the system Add a new book to the system and verify that it was added According to the documentation that means we will need to send the following requests: (i) Get a Unique Session \u00b6 URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session Method: GET Returns: Unique session ID that is passed to other requests to keep data separate for different demo users (ii) Get this list of books \u00b6 URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id } Method: GET Returns: Array of book objects (iii) Add a new book to the list \u00b6 URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id } Method: POST Body: Pass a populated book object: { \"Name\" : \"Book Name\" , \"AuthorId\" : 1 , \"GenreId\" : 1 } Returns: Single book object that has its BookId populated The first request will be to get the unique session ID that we will need to pass to the other requests. This is needed by our sample application to prevent testing by different users interfering with each other. To create this request, simply enter the following information on the REST Request form: Name: Get_Session Method: GET URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session You should now have it populated as illustrated below: This web service request requires that we pass credentials by means of HTTP Basic authentication. So click on the Add Credentials button in the toolbar. This will display the Add Credentials dialog box: Enter librarian as both the username and password and click Add . Now click the Send button and the request will get sent to the web service: The Response Header tab will display the headers coming back from the web service. The Status Code 200 OK means that the request succeeded and that data was returned. If you click on the \" Response Body - XML \" tab, you will see the XML serialized data returned from the web service: Since Rapise uses JavaScript as its scripting language, it is usually easier to work with JSON (**J**ava**S**cript **O**bject **N**otation) serialized data rather than XML. In the case of the sample Library Information System web service, you can change the format that it accepts and retrieves by sending two special HTTP headers: Content-Type : application/json Accept : application/json To add these headers to the request, simply click on the Add Header button in toolbar: This will display the following dialog box: Choose the HTTP Header \"Accept\" from the list and enter application/json as the value. Repeat for the \"Content-Type\" header. You should now have the following populated request: Now click the Send button and the request will get sent to the web service: The Response Header tab will display the headers coming back from the web service. Note that the returned Content-Type is listed as application/json as requested. If you click on Response Body - JSON tab, you will see the JSON serialized data returned from the web service: We have now completed the creation of our first test operation. Click on the \"Save Requests\" button in the Rapise REST Ribbon to make sure our changes have been saved. Now click on the Clone request icon in the REST request explorer in the left-hand side of the screen: This will display the Clone Request dialog box. This lets us create a new REST request that contains the headers and authentication already defined on our existing request. This will save time over creating a new REST request from scratch: Enter the name \"Get_Books\" in the dialog box and click the Clone button. This will create a new REST request with this name: For this request we need to pass through the SessionID in the query string. Rather than hardcoding it in the URL, we can make use of the parameterization feature of Rapise. Click on the Add Parameter button in the toolbar. This will display the Add Request Parameter dialog box: Enter in the following: Name: session_id Value: 7404f584-7200-4c37-b813-d5994eb45d12 (you can also copy and paste the value returned by the Get_Session command) Click the Add button and the parameter will be added to the request. Now change the URL to: URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id= Then position the caret at the end of this URL and click the Insert in URL button. This will insert the parameter token in the URL at the specified point: Now click the Send button and the request will get sent to the web service. This will return the list of books serialized as a JSON array of objects: We have now completed the creation of our second test operation. Click on the Save Requests toolbar button to make sure our changes have been saved: Now click on the Clone request icon in the REST request explorer in the right-hand side of the screen. Enter the name \"Add_Book\" in the dialog box and click the Clone button. This will create a new REST request with this name: This operation will add a new book to the system, so it's a POST request. Change the Method type in the dropdown list from \"GET\" to \"POST\" . Expand the \"Body\" field on the form. This is where you can enter in an XML or JSON serialized Book record that will get added to the system. For now we'll leave this blank and let Rapise serialize the body for us later on when we actually write our test script. So we should now have: We have now completed the creation of our third test operation. Click on the Save Requests toolbar button. 2. Saving the REST Requests as Objects \u00b6 Now that we have created our three REST requests, the next step is to actually create the Rapise objects that we can use in our JavaScript test scripts. Click on the Update Object Tree button in the toolbar to update the Object Tree with our new requests: Rapise will now take you REST requests and use that to update the main Object tree . Click on the Object tab of the main Rapise explorer, click the Refresh icon and you will see the \"LibraryInformationSystem\" heading displayed, with the three saved REST request listed underneath: If you expand one of the REST requests (e.g. Add_Book ), you'll see that it has a single operation \"DoExecute\" that executes the web services and a series of properties available for inspecting or updating any part of the REST request prior to it being sent to the server. In the next section we shall illustrate how you can write a test script using these learned objects. a. You can either have Rapise generate test scripts and verification points automatically (described in section 3a), or b. You can manually write the test scripts using the objects and the Rapise code editor (described in section 3b) 3a. Generating REST Test Scripts \u00b6 Inside the REST request explorer, double-click on the Get_Session function to open up the request: Click on the Send button to send the sample request. Once that has succeeded, you will see the Record button appear to the right: Click that button and the request will get added to the list of recorded steps: Now open up the Get_Book request and follow the same procedure: Click on the Send button to execute the request Click on the Record button to record the action as a script step This time we also want to verify the result. You will see a list of books returned in the Verify box underneath the Body section: If you select the overall array response[14] and click the main Verify button next to the Record button, the system will automatically add a verification step that verifies all of the values. To try this, click the Verify button. This will add a bold verification step to the recorded script: You will see a script step recorded with a verification test added (it's shown in bold with an asterisk * ): However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name. To do this, right-click on the response[14] entry to display the verification content menu: Choose the option \u2018 Verify Response length=14\u2019 . This adds the following step to the recorded script: Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned: Choose the option to Verify Response[0].Name = Hound of the Baskervilles . This will add a verification step for this specific property: Now we add the last two requests - adding a book and verifying that it was added. To do that open up the two requests and click Send then Record : Add_Book (POST) Get_Book (GET) The Add_Book won't actually work at this point because we've not populated the body, but it will be good enough to create the test script. For the second instance of Get_Book don't use the Verify option since we will want to code that by hand to match the book we actually added. Once you are done, you should have: Now click on the Create Script button and Rapise will generate the following code for you: function Test () { var LibraryInformationSystem_Get_Session = SeS ( 'LibraryInformationSystem_Get_Session' ); LibraryInformationSystem_Get_Session . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Session . DoExecute (); var LibraryInformationSystem_Get_Book = SeS ( 'LibraryInformationSystem_Get_Book' ); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute (); Tester . AssertEqual ( 'http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id} Response Body Text Comparison Result' , LibraryInformationSystem_Get_Book . GetResponseBodyText (), \"...long response body...\" ); LibraryInformationSystem_Get_Book . DoVerify ( 'LibraryInformationSystem_Get_Book Response' , \"length\" , 14 ); LibraryInformationSystem_Get_Book . DoVerify ( 'LibraryInformationSystem_Get_Book Response' , \"[0].Name\" , \"Hound of the Baskervilles\" ); var LibraryInformationSystem_Add_Book = SeS ( 'LibraryInformationSystem_Add_Book' ); LibraryInformationSystem_Add_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Add_Book . DoExecute (); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute (); } If you click Play on this script as written, you will see that the tests to retrieve the books work correctly, but the test of adding a new book fails: This is as we'd expect since we've not populated the new book yet! To make the template test script more useful, we should make the following changes: Add comments to each of the sections to describe the purpose Add code to get the session ID from the first call and pass to the subsequent calls Create a JavaScript object to contain the new book information, and pass that to the Add Book function Get the new book ID from the result of the Add Book function and use it later on. Change the Tester.Assert code to check just specific properties rather than the entire object list. The complete updated test script looks like the following. We have highlighted the new/changed lines in yellow: ```javascript m=1 function Test(params) { //First get the session var LibraryInformationSystem_Get_Session=SeS('LibraryInformationSystem_Get_Session'); LibraryInformationSystem_Get_Session.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]); LibraryInformationSystem_Get_Session.DoExecute(); // CODE: READ SESSIONID var sessionId = LibraryInformationSystem_Get_Session.GetResponseBodyObject(); Tester.Message('Session ID: ' + sessionId); // /CODE 1 2 3 var LibraryInformationSystem_Get_Book = SeS ( 'LibraryInformationSystem_Get_Book' ); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute ({ \"session_id\" : sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ 1 2 LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"length\", 14); LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"[0].Name\", \"Hound of the Baskervilles\"); // CODE: Define new book //Add a book var newBook = { Name: \"A Christmas Carol\", AuthorId: 2, GenreId: 3 }; // /CODE 1 2 var LibraryInformationSystem_Add_Book = SeS ( 'LibraryInformationSystem_Add_Book' ); LibraryInformationSystem_Add_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); // CODE: Supply newBook as a POST method body LibraryInformationSystem_Add_Book.SetRequestBodyObject(newBook) // /CODE LibraryInformationSystem_Add_Book.DoExecute({ \"session_id\": sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ // CODE: Read added book //Get the ID of the new book newBook = LibraryInformationSystem_Add_Book.GetResponseBodyObject(); Tester.Message(\"New Book ID: \" + newBook.Id); // /CODE 1 2 LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]); LibraryInformationSystem_Get_Book.DoExecute({ \"session_id\": sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ // CODE: Check book count increased Tester.AssertEqual(\"Book Count\", 15, LibraryInformationSystem_Get_Book.GetResponseBodyObject().length); // /CODE } ``` 3b. Writing REST Test Scripts \u00b6 Open up the main Main.js file in the Rapise editor. It will initially consist of a single empty function Test() : The first task is to get a new SessionId from the server using the Get_Session operation. To do this, drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Session\" object into the script editor, in between the opening and closing braces of the Test() function: This will execute the web serviced and return the SessionId. To actually access the retrieved value, you need to drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then add the JavaScript code javascript var sessionId = to actually store the value. We will also add a Tester . Message ( sessionId ); line afterwards to write out the value of the sessionId to the test report. This will help us make sure we are getting back a valid response from the web service. You should now have the following code: Save this test and click Play to execute the test. You should now see a report similar to the following: Now we need to add the code to get the list of books. To do that, simply drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Book\" object into the script editor. Then change the ( null ) argument to instead provide the session id as a JavaScript dictionary: SeS ( 'LibraryInformationSystem_Get_Book' ). DoExecute ({ \"session_id\" : sessionId }); To get the list of books as a JavaScript array, drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then assign the value of this property to a variable such as \"books\": var books = SeS ( 'LibraryInformationSystem_Get_Book' ). GetResponseBodyObject (); Now we can add code to test that the number of books returned matches the expected value. Type in the following code: Tester . AssertEqual ( 'Book count matches' , 14 , books . length ); You should now have the following code: Finally we need to add the code to add a new book to the system. To do that, simply drag the \"DoExecute\" operation from under the \"Add_Book\" object into the script editor. Then change the ( null ) argument to instead provide the session id as a Javascript dictionary: SeS ( 'LibraryInformationSystem_Add_Book' ). DoExecute ({ \"session_id\" : sessionId }); To provide the data for a new book, we will need to drag the \"SetRequestBodyObject\" property of the \"Add_Book\" object to the line above the DoExecute and pass in a populated JavaScript object: var newBook = {}; newBook . Name = 'A Christmas Carol' ; newBook . AuthorId = 2 ; newBook . GenreId = 3 ; SeS ( 'LibraryInformationSystem_Add_Book' ). SetRequestBodyObject ( newBook ); Finally Add code to test that our new book was added correctly and the count has increased by one: SeS ( 'LibraryInformationSystem_Get_Books' ). DoExecute ({ \"session_id\" : sessionId }); books = SeS ( 'LibraryInformationSystem_Get_Books' ). GetResponseBodyObject (); Tester . AssertEqual ( 'Book count matches' , 15 , books . length ); You should now have the following code: Save this test and click \"Play\" to execute the test. You should now see a report similar to the following: Congratulations! You have just created your first test script that tests a RESTful web service.","title":"REST Web Services"},{"location":"Guide/tutorial_web_services_rest/#tutorial-rest-web-services","text":"In this section you shall learn how to test a RESTful web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy RESTful web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org , and its RESTful web service API can be found at: www.libraryinformationsystem.org/Services/RestService.aspx .","title":"Tutorial: REST Web Services"},{"location":"Guide/tutorial_web_services_rest/#what-is-rest-and-what-is-a-restful-web-service","text":"RE**presentational **S**tate **T**ransfer (**REST ) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC. A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol.","title":"What is REST and what is a RESTful web service?"},{"location":"Guide/tutorial_web_services_rest/#overview","text":"Creating a REST web service test in Rapise consists of the following steps: Using the REST query builder to create the various REST web service requests and verify that they return the expected data in the expected format. Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects. Generating the test script in Javascript that uses the learned Rapise web service objects. We shall discuss each of these steps in turn.","title":"Overview"},{"location":"Guide/tutorial_web_services_rest/#1-using-the-rest-query-builder","text":"Create a new test in Rapise called MyRestTest1.sstest . For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project. Language selection prompt is shown. For Web Services it is recommended to use JavaScript . Once you have created it, choose Tools > Web Services menu to add a new web service definition to your test project: This will display the Add New Web Service dialog box: Choose REST as the type of web service you want to create. Then, enter the name of the web service that you're going to add, in this case enter LibraryInformationSystem.rest and click Create . This will add the REST web services definition file to your test project: You will see on the right hand side, there is a new document editor for the .rest file. This is the REST web services query form. It lets you send test HTTP requests to the web service under test and inspect the output being returned. If you open up API documentation for our sample application ( www.libraryinformationsystem.org/Services/RestService.aspx ) you will see that it exposes several operations for retrieving, adding, updating and deleting books and authors in the system. For this tutorial we shall perform the following operations: Get the special SessionID to identify our test session Get a list of books in the system Add a new book to the system and verify that it was added According to the documentation that means we will need to send the following requests:","title":"1. Using the REST Query Builder"},{"location":"Guide/tutorial_web_services_rest/#i-get-a-unique-session","text":"URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session Method: GET Returns: Unique session ID that is passed to other requests to keep data separate for different demo users","title":"(i) Get a Unique Session"},{"location":"Guide/tutorial_web_services_rest/#ii-get-this-list-of-books","text":"URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id } Method: GET Returns: Array of book objects","title":"(ii) Get this list of books"},{"location":"Guide/tutorial_web_services_rest/#iii-add-a-new-book-to-the-list","text":"URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id } Method: POST Body: Pass a populated book object: { \"Name\" : \"Book Name\" , \"AuthorId\" : 1 , \"GenreId\" : 1 } Returns: Single book object that has its BookId populated The first request will be to get the unique session ID that we will need to pass to the other requests. This is needed by our sample application to prevent testing by different users interfering with each other. To create this request, simply enter the following information on the REST Request form: Name: Get_Session Method: GET URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session You should now have it populated as illustrated below: This web service request requires that we pass credentials by means of HTTP Basic authentication. So click on the Add Credentials button in the toolbar. This will display the Add Credentials dialog box: Enter librarian as both the username and password and click Add . Now click the Send button and the request will get sent to the web service: The Response Header tab will display the headers coming back from the web service. The Status Code 200 OK means that the request succeeded and that data was returned. If you click on the \" Response Body - XML \" tab, you will see the XML serialized data returned from the web service: Since Rapise uses JavaScript as its scripting language, it is usually easier to work with JSON (**J**ava**S**cript **O**bject **N**otation) serialized data rather than XML. In the case of the sample Library Information System web service, you can change the format that it accepts and retrieves by sending two special HTTP headers: Content-Type : application/json Accept : application/json To add these headers to the request, simply click on the Add Header button in toolbar: This will display the following dialog box: Choose the HTTP Header \"Accept\" from the list and enter application/json as the value. Repeat for the \"Content-Type\" header. You should now have the following populated request: Now click the Send button and the request will get sent to the web service: The Response Header tab will display the headers coming back from the web service. Note that the returned Content-Type is listed as application/json as requested. If you click on Response Body - JSON tab, you will see the JSON serialized data returned from the web service: We have now completed the creation of our first test operation. Click on the \"Save Requests\" button in the Rapise REST Ribbon to make sure our changes have been saved. Now click on the Clone request icon in the REST request explorer in the left-hand side of the screen: This will display the Clone Request dialog box. This lets us create a new REST request that contains the headers and authentication already defined on our existing request. This will save time over creating a new REST request from scratch: Enter the name \"Get_Books\" in the dialog box and click the Clone button. This will create a new REST request with this name: For this request we need to pass through the SessionID in the query string. Rather than hardcoding it in the URL, we can make use of the parameterization feature of Rapise. Click on the Add Parameter button in the toolbar. This will display the Add Request Parameter dialog box: Enter in the following: Name: session_id Value: 7404f584-7200-4c37-b813-d5994eb45d12 (you can also copy and paste the value returned by the Get_Session command) Click the Add button and the parameter will be added to the request. Now change the URL to: URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id= Then position the caret at the end of this URL and click the Insert in URL button. This will insert the parameter token in the URL at the specified point: Now click the Send button and the request will get sent to the web service. This will return the list of books serialized as a JSON array of objects: We have now completed the creation of our second test operation. Click on the Save Requests toolbar button to make sure our changes have been saved: Now click on the Clone request icon in the REST request explorer in the right-hand side of the screen. Enter the name \"Add_Book\" in the dialog box and click the Clone button. This will create a new REST request with this name: This operation will add a new book to the system, so it's a POST request. Change the Method type in the dropdown list from \"GET\" to \"POST\" . Expand the \"Body\" field on the form. This is where you can enter in an XML or JSON serialized Book record that will get added to the system. For now we'll leave this blank and let Rapise serialize the body for us later on when we actually write our test script. So we should now have: We have now completed the creation of our third test operation. Click on the Save Requests toolbar button.","title":"(iii) Add a new book to the list"},{"location":"Guide/tutorial_web_services_rest/#2-saving-the-rest-requests-as-objects","text":"Now that we have created our three REST requests, the next step is to actually create the Rapise objects that we can use in our JavaScript test scripts. Click on the Update Object Tree button in the toolbar to update the Object Tree with our new requests: Rapise will now take you REST requests and use that to update the main Object tree . Click on the Object tab of the main Rapise explorer, click the Refresh icon and you will see the \"LibraryInformationSystem\" heading displayed, with the three saved REST request listed underneath: If you expand one of the REST requests (e.g. Add_Book ), you'll see that it has a single operation \"DoExecute\" that executes the web services and a series of properties available for inspecting or updating any part of the REST request prior to it being sent to the server. In the next section we shall illustrate how you can write a test script using these learned objects. a. You can either have Rapise generate test scripts and verification points automatically (described in section 3a), or b. You can manually write the test scripts using the objects and the Rapise code editor (described in section 3b)","title":"2. Saving the REST Requests as Objects"},{"location":"Guide/tutorial_web_services_rest/#3a-generating-rest-test-scripts","text":"Inside the REST request explorer, double-click on the Get_Session function to open up the request: Click on the Send button to send the sample request. Once that has succeeded, you will see the Record button appear to the right: Click that button and the request will get added to the list of recorded steps: Now open up the Get_Book request and follow the same procedure: Click on the Send button to execute the request Click on the Record button to record the action as a script step This time we also want to verify the result. You will see a list of books returned in the Verify box underneath the Body section: If you select the overall array response[14] and click the main Verify button next to the Record button, the system will automatically add a verification step that verifies all of the values. To try this, click the Verify button. This will add a bold verification step to the recorded script: You will see a script step recorded with a verification test added (it's shown in bold with an asterisk * ): However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name. To do this, right-click on the response[14] entry to display the verification content menu: Choose the option \u2018 Verify Response length=14\u2019 . This adds the following step to the recorded script: Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned: Choose the option to Verify Response[0].Name = Hound of the Baskervilles . This will add a verification step for this specific property: Now we add the last two requests - adding a book and verifying that it was added. To do that open up the two requests and click Send then Record : Add_Book (POST) Get_Book (GET) The Add_Book won't actually work at this point because we've not populated the body, but it will be good enough to create the test script. For the second instance of Get_Book don't use the Verify option since we will want to code that by hand to match the book we actually added. Once you are done, you should have: Now click on the Create Script button and Rapise will generate the following code for you: function Test () { var LibraryInformationSystem_Get_Session = SeS ( 'LibraryInformationSystem_Get_Session' ); LibraryInformationSystem_Get_Session . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Session . DoExecute (); var LibraryInformationSystem_Get_Book = SeS ( 'LibraryInformationSystem_Get_Book' ); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute (); Tester . AssertEqual ( 'http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id} Response Body Text Comparison Result' , LibraryInformationSystem_Get_Book . GetResponseBodyText (), \"...long response body...\" ); LibraryInformationSystem_Get_Book . DoVerify ( 'LibraryInformationSystem_Get_Book Response' , \"length\" , 14 ); LibraryInformationSystem_Get_Book . DoVerify ( 'LibraryInformationSystem_Get_Book Response' , \"[0].Name\" , \"Hound of the Baskervilles\" ); var LibraryInformationSystem_Add_Book = SeS ( 'LibraryInformationSystem_Add_Book' ); LibraryInformationSystem_Add_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Add_Book . DoExecute (); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute (); } If you click Play on this script as written, you will see that the tests to retrieve the books work correctly, but the test of adding a new book fails: This is as we'd expect since we've not populated the new book yet! To make the template test script more useful, we should make the following changes: Add comments to each of the sections to describe the purpose Add code to get the session ID from the first call and pass to the subsequent calls Create a JavaScript object to contain the new book information, and pass that to the Add Book function Get the new book ID from the result of the Add Book function and use it later on. Change the Tester.Assert code to check just specific properties rather than the entire object list. The complete updated test script looks like the following. We have highlighted the new/changed lines in yellow: ```javascript m=1 function Test(params) { //First get the session var LibraryInformationSystem_Get_Session=SeS('LibraryInformationSystem_Get_Session'); LibraryInformationSystem_Get_Session.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]); LibraryInformationSystem_Get_Session.DoExecute(); // CODE: READ SESSIONID var sessionId = LibraryInformationSystem_Get_Session.GetResponseBodyObject(); Tester.Message('Session ID: ' + sessionId); // /CODE 1 2 3 var LibraryInformationSystem_Get_Book = SeS ( 'LibraryInformationSystem_Get_Book' ); LibraryInformationSystem_Get_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); LibraryInformationSystem_Get_Book . DoExecute ({ \"session_id\" : sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ 1 2 LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"length\", 14); LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"[0].Name\", \"Hound of the Baskervilles\"); // CODE: Define new book //Add a book var newBook = { Name: \"A Christmas Carol\", AuthorId: 2, GenreId: 3 }; // /CODE 1 2 var LibraryInformationSystem_Add_Book = SeS ( 'LibraryInformationSystem_Add_Book' ); LibraryInformationSystem_Add_Book . SetRequestHeaders ([{ \"Name\" : \"Accept\" , \"Value\" : \"application/json\" },{ \"Name\" : \"Content-Type\" , \"Value\" : \"application/json\" }]); // CODE: Supply newBook as a POST method body LibraryInformationSystem_Add_Book.SetRequestBodyObject(newBook) // /CODE LibraryInformationSystem_Add_Book.DoExecute({ \"session_id\": sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ // CODE: Read added book //Get the ID of the new book newBook = LibraryInformationSystem_Add_Book.GetResponseBodyObject(); Tester.Message(\"New Book ID: \" + newBook.Id); // /CODE 1 2 LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]); LibraryInformationSystem_Get_Book.DoExecute({ \"session_id\": sessionId }); // CODE/ ^ ^ ^ ^ ^ ^ ^ ^^ // CODE: Check book count increased Tester.AssertEqual(\"Book Count\", 15, LibraryInformationSystem_Get_Book.GetResponseBodyObject().length); // /CODE } ```","title":"3a. Generating REST Test Scripts"},{"location":"Guide/tutorial_web_services_rest/#3b-writing-rest-test-scripts","text":"Open up the main Main.js file in the Rapise editor. It will initially consist of a single empty function Test() : The first task is to get a new SessionId from the server using the Get_Session operation. To do this, drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Session\" object into the script editor, in between the opening and closing braces of the Test() function: This will execute the web serviced and return the SessionId. To actually access the retrieved value, you need to drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then add the JavaScript code javascript var sessionId = to actually store the value. We will also add a Tester . Message ( sessionId ); line afterwards to write out the value of the sessionId to the test report. This will help us make sure we are getting back a valid response from the web service. You should now have the following code: Save this test and click Play to execute the test. You should now see a report similar to the following: Now we need to add the code to get the list of books. To do that, simply drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Book\" object into the script editor. Then change the ( null ) argument to instead provide the session id as a JavaScript dictionary: SeS ( 'LibraryInformationSystem_Get_Book' ). DoExecute ({ \"session_id\" : sessionId }); To get the list of books as a JavaScript array, drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then assign the value of this property to a variable such as \"books\": var books = SeS ( 'LibraryInformationSystem_Get_Book' ). GetResponseBodyObject (); Now we can add code to test that the number of books returned matches the expected value. Type in the following code: Tester . AssertEqual ( 'Book count matches' , 14 , books . length ); You should now have the following code: Finally we need to add the code to add a new book to the system. To do that, simply drag the \"DoExecute\" operation from under the \"Add_Book\" object into the script editor. Then change the ( null ) argument to instead provide the session id as a Javascript dictionary: SeS ( 'LibraryInformationSystem_Add_Book' ). DoExecute ({ \"session_id\" : sessionId }); To provide the data for a new book, we will need to drag the \"SetRequestBodyObject\" property of the \"Add_Book\" object to the line above the DoExecute and pass in a populated JavaScript object: var newBook = {}; newBook . Name = 'A Christmas Carol' ; newBook . AuthorId = 2 ; newBook . GenreId = 3 ; SeS ( 'LibraryInformationSystem_Add_Book' ). SetRequestBodyObject ( newBook ); Finally Add code to test that our new book was added correctly and the count has increased by one: SeS ( 'LibraryInformationSystem_Get_Books' ). DoExecute ({ \"session_id\" : sessionId }); books = SeS ( 'LibraryInformationSystem_Get_Books' ). GetResponseBodyObject (); Tester . AssertEqual ( 'Book count matches' , 15 , books . length ); You should now have the following code: Save this test and click \"Play\" to execute the test. You should now see a report similar to the following: Congratulations! You have just created your first test script that tests a RESTful web service.","title":"3b. Writing REST Test Scripts"},{"location":"Guide/tutorial_web_using_javascript/","text":"Tutorial: Web Testing (JavaScript) \u00b6 This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing using the JavaScript test script language instead of the Rapise Visual Language (RVL) that was illustrated in the main Tutorial: Web Testing (RVL) . This is useful in cases where you have more complex applications to test and you want to be able to use the power of a full programming language such as JavaScript to process data, perform calculations and implement complex flow of control. Open Rapise and Create New Test \u00b6 Go to Start > All Programs > Inflectra > Rapise . The following window should appear. Select File > New Test in the main menu. If this is your first time using Rapise on this computer, you may see the following dialog box: If you see this, it means that Rapise is trying to connect to a SpiraTest server . SpiraTest is our web based test management system . It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the Cancel button and you will see the new test dialog : Now enter the name of your new test \u2018Web Testing 1\u2019 , and click Web: Cross-Browser Testing Support . Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later): Choose \u2018Internet Explorer HTML\u2019 from the list of options. Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the JavaScript approach. If you\u2019re interested in creating the test using RVL instead, please refer to the section - Tutorial: Web Testing (RVL) . Rapise will create the new test and you will see the main function of the test: You are now ready to record your first test. Open the Application Under Test \u00b6 Open up Internet Explorer. You will find it in Start > All Programs > Internet Explorer . In Internet Explorer, navigate to: http://www.libraryinformationsystem.org : Record Test Steps \u00b6 In the Rapise window, press the Record button on the toolbar. The Recording Activity Dialog (RA dialog) will appear: The RA dialog has a grid. As you interact with the sample Library Information System program, the grid will automatically populate with your actions. Let's begin creating the test. On the library information system login page, click on the Log In link in the top-right of the screen. In the Username text box, type librarian Click on the Password text box next. You'll notice that the RA dialog has changed. Your actions, clicking Log-In and entering a username, are listed in the grid: The password for user librarian is also librarian . Type the password in and then press the Log-In button. Two more rows should appear in the RA dialog : one to represent the password entry, and one to represent the button click: You should now be on the main menu of the Library Information System with the user's name listed in the top-right: Hover the mouse over the \u201cWelcome librarian \u201d username label on the top-right and press Ctrl + 1 to bring up the Verify dialog box: This box lets you add a checkpoint to verify the properties of an object on the screen. Select the Inner Text option and click OK button to close the dialog. That will add the verification check to your list of recorded actions: Click the Book Management button. It is highlighted in the next screenshot: You should now be on the Book Management page (see the below image). Click the Create new book link: You should now be on the Create New Book page (see image below). Click the HOME button to go back to the main menu. Now, click the Author Management button: You should now be on the Author Management page (see image below): Click the Create New Author link: You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu. At this point, there should be 11 rows in the RA dialog grid. You are now back on the Main Menu. Click Log Out (top-right). To end the recording session either press Ctrl + 3 or click Finish button on the RA dialog . Rapise will generate the code. Let's save our test. Press the Save button at the top left of the Rapise window. Playback \u00b6 Let's execute the test we just created. First, close Internet explorer. Rapise will open a new instance of Internet Explorer to the correct url ( www.libraryinformationsystem.org ) when the test begins. To execute the script, press the Play button on the toolbar. After execution, a screen like the one below will appear. Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed. For more information on the report, see Automated Reporting . Playback in Other Browsers \u00b6 Now that we have recorded our test in Internet Explorer, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Firefox, Chrome, Selenium - *, etc.) and click the Play button. Before the playback in other browsers will work correctly, you will need to make sure you have configured the web browsers appropriately. In the case of the Selenium options, you will need to make sure you have installed the Selenium WebDriver binaries correctly. Track and Learn Object Using the Web Spy \u00b6 In the main toolbar of Rapise, expand the dropdown list for the Spy tool and make sure that Web is selected: Now, click on the main Spy tool icon and Rapise will start the Web Spy : Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the Book Management menu item so that the list of books is displayed: Now back in the Web Spy , click on the Get Snapshot option to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page: Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books. In addition, you can use the Track (Ctrl+T) tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title \u201cAmsterdam\u201d, simply press Ctrl + T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl + T again. Rapise will now highlight that item in the DOM Tree automatically: You can see all of the properties of this HTML element displayed on the right, specifically: tagName of the element (td), text of the element (Amsterdam), HTML attributes in the Properties section, CSS and XPath expressions for locating this element in Selectors section. If you want to use this object in a Rapise test script, you can simply click the Learn button and the HTML element will be added to the Recording Activity Dialog: Click Finish and the object will have been added to your test\u2019s Object Tree: You can now expand this object and drag a test function to your test script. For example if you wanted to get the textual value of the cell in your test, drag the GetInnerText function into your test script: Test XPATH and Learn Object Using the Web Spy \u00b6 In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test. For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink. Open up the Web Spy as before: One the toolbar enter in the following to locate the table: 1 //table[@id='MainContent_grdBooks'] Now click on the Test button to display the matching results: Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing 'Amsterdam' and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH: 1 //table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a This XPath consists of the following elements: Find the table with the specified ID. Find any row inside that table that contains a cell with the text 'Amsterdam'. For any matching cell, get its parent row and inside the fifth cell, get any hyperlink. In this case that will correctly locate the Edit link for the book 'Amsterdam'. Now that we have the correct item identified, click on the Learn button to the right of the Test button. That will now learn a new object that corresponds to the Edit Amsterdam object: Click Finish and the object will have been added to the Object Tree of the current test: Modify the Test \u00b6 To click on this object, simply drag the \u2018DoClick\u2019 function for the new object from the Object Tree into the test script. This will cause the book details page for Amsterdam to be displayed during test playback: Since clicking on the Edit link will take you to a different page than where the Create New Book link is available, in the example we have added a second instance of the: SeS ( 'Book_Management' ). DoClick (); command, so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed. Now the line: SeS ( 'Amsterdam' ). GetInnerText (); by itself does not do anything, it just gets the text. So to make the test more useful, we can use the global Tester object to add a step to verify this value. Drag the AssertEqual function from the Tester object to your test script just above the SeS(\u201cAmsterdam\u201d) line: Now we need to just consolidate these two lines into the actual test. Using the script editor, change the two lines from: Tester . AssertEqual ( '' , null , null ); SeS ( 'Amsterdam' ). GetInnerText (); to Tester . AssertEqual ( 'The values match' , 'Amsterdam' , SeS ( 'Amsterdam' ). GetInnerText ()); Now click Play to playback the new test: The test should now pass successfully. See Also \u00b6 Tutorial: Web Testing (RVL) Browser Profiles","title":"Using JavaScript"},{"location":"Guide/tutorial_web_using_javascript/#tutorial-web-testing-javascript","text":"This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing using the JavaScript test script language instead of the Rapise Visual Language (RVL) that was illustrated in the main Tutorial: Web Testing (RVL) . This is useful in cases where you have more complex applications to test and you want to be able to use the power of a full programming language such as JavaScript to process data, perform calculations and implement complex flow of control.","title":"Tutorial: Web Testing (JavaScript)"},{"location":"Guide/tutorial_web_using_javascript/#open-rapise-and-create-new-test","text":"Go to Start > All Programs > Inflectra > Rapise . The following window should appear. Select File > New Test in the main menu. If this is your first time using Rapise on this computer, you may see the following dialog box: If you see this, it means that Rapise is trying to connect to a SpiraTest server . SpiraTest is our web based test management system . It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the Cancel button and you will see the new test dialog : Now enter the name of your new test \u2018Web Testing 1\u2019 , and click Web: Cross-Browser Testing Support . Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later): Choose \u2018Internet Explorer HTML\u2019 from the list of options. Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the JavaScript approach. If you\u2019re interested in creating the test using RVL instead, please refer to the section - Tutorial: Web Testing (RVL) . Rapise will create the new test and you will see the main function of the test: You are now ready to record your first test.","title":"Open Rapise and Create New Test"},{"location":"Guide/tutorial_web_using_javascript/#open-the-application-under-test","text":"Open up Internet Explorer. You will find it in Start > All Programs > Internet Explorer . In Internet Explorer, navigate to: http://www.libraryinformationsystem.org :","title":"Open the Application Under Test"},{"location":"Guide/tutorial_web_using_javascript/#record-test-steps","text":"In the Rapise window, press the Record button on the toolbar. The Recording Activity Dialog (RA dialog) will appear: The RA dialog has a grid. As you interact with the sample Library Information System program, the grid will automatically populate with your actions. Let's begin creating the test. On the library information system login page, click on the Log In link in the top-right of the screen. In the Username text box, type librarian Click on the Password text box next. You'll notice that the RA dialog has changed. Your actions, clicking Log-In and entering a username, are listed in the grid: The password for user librarian is also librarian . Type the password in and then press the Log-In button. Two more rows should appear in the RA dialog : one to represent the password entry, and one to represent the button click: You should now be on the main menu of the Library Information System with the user's name listed in the top-right: Hover the mouse over the \u201cWelcome librarian \u201d username label on the top-right and press Ctrl + 1 to bring up the Verify dialog box: This box lets you add a checkpoint to verify the properties of an object on the screen. Select the Inner Text option and click OK button to close the dialog. That will add the verification check to your list of recorded actions: Click the Book Management button. It is highlighted in the next screenshot: You should now be on the Book Management page (see the below image). Click the Create new book link: You should now be on the Create New Book page (see image below). Click the HOME button to go back to the main menu. Now, click the Author Management button: You should now be on the Author Management page (see image below): Click the Create New Author link: You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu. At this point, there should be 11 rows in the RA dialog grid. You are now back on the Main Menu. Click Log Out (top-right). To end the recording session either press Ctrl + 3 or click Finish button on the RA dialog . Rapise will generate the code. Let's save our test. Press the Save button at the top left of the Rapise window.","title":"Record Test Steps"},{"location":"Guide/tutorial_web_using_javascript/#playback","text":"Let's execute the test we just created. First, close Internet explorer. Rapise will open a new instance of Internet Explorer to the correct url ( www.libraryinformationsystem.org ) when the test begins. To execute the script, press the Play button on the toolbar. After execution, a screen like the one below will appear. Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed. For more information on the report, see Automated Reporting .","title":"Playback"},{"location":"Guide/tutorial_web_using_javascript/#playback-in-other-browsers","text":"Now that we have recorded our test in Internet Explorer, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Firefox, Chrome, Selenium - *, etc.) and click the Play button. Before the playback in other browsers will work correctly, you will need to make sure you have configured the web browsers appropriately. In the case of the Selenium options, you will need to make sure you have installed the Selenium WebDriver binaries correctly.","title":"Playback in Other Browsers"},{"location":"Guide/tutorial_web_using_javascript/#track-and-learn-object-using-the-web-spy","text":"In the main toolbar of Rapise, expand the dropdown list for the Spy tool and make sure that Web is selected: Now, click on the main Spy tool icon and Rapise will start the Web Spy : Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the Book Management menu item so that the list of books is displayed: Now back in the Web Spy , click on the Get Snapshot option to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page: Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books. In addition, you can use the Track (Ctrl+T) tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title \u201cAmsterdam\u201d, simply press Ctrl + T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl + T again. Rapise will now highlight that item in the DOM Tree automatically: You can see all of the properties of this HTML element displayed on the right, specifically: tagName of the element (td), text of the element (Amsterdam), HTML attributes in the Properties section, CSS and XPath expressions for locating this element in Selectors section. If you want to use this object in a Rapise test script, you can simply click the Learn button and the HTML element will be added to the Recording Activity Dialog: Click Finish and the object will have been added to your test\u2019s Object Tree: You can now expand this object and drag a test function to your test script. For example if you wanted to get the textual value of the cell in your test, drag the GetInnerText function into your test script:","title":"Track and Learn Object Using the  Web Spy"},{"location":"Guide/tutorial_web_using_javascript/#test-xpath-and-learn-object-using-the-web-spy","text":"In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test. For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink. Open up the Web Spy as before: One the toolbar enter in the following to locate the table: 1 //table[@id='MainContent_grdBooks'] Now click on the Test button to display the matching results: Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing 'Amsterdam' and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH: 1 //table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a This XPath consists of the following elements: Find the table with the specified ID. Find any row inside that table that contains a cell with the text 'Amsterdam'. For any matching cell, get its parent row and inside the fifth cell, get any hyperlink. In this case that will correctly locate the Edit link for the book 'Amsterdam'. Now that we have the correct item identified, click on the Learn button to the right of the Test button. That will now learn a new object that corresponds to the Edit Amsterdam object: Click Finish and the object will have been added to the Object Tree of the current test:","title":"Test XPATH and Learn Object Using the Web Spy"},{"location":"Guide/tutorial_web_using_javascript/#modify-the-test","text":"To click on this object, simply drag the \u2018DoClick\u2019 function for the new object from the Object Tree into the test script. This will cause the book details page for Amsterdam to be displayed during test playback: Since clicking on the Edit link will take you to a different page than where the Create New Book link is available, in the example we have added a second instance of the: SeS ( 'Book_Management' ). DoClick (); command, so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed. Now the line: SeS ( 'Amsterdam' ). GetInnerText (); by itself does not do anything, it just gets the text. So to make the test more useful, we can use the global Tester object to add a step to verify this value. Drag the AssertEqual function from the Tester object to your test script just above the SeS(\u201cAmsterdam\u201d) line: Now we need to just consolidate these two lines into the actual test. Using the script editor, change the two lines from: Tester . AssertEqual ( '' , null , null ); SeS ( 'Amsterdam' ). GetInnerText (); to Tester . AssertEqual ( 'The values match' , 'Amsterdam' , SeS ( 'Amsterdam' ). GetInnerText ()); Now click Play to playback the new test: The test should now pass successfully.","title":"Modify the Test"},{"location":"Guide/tutorial_web_using_javascript/#see-also","text":"Tutorial: Web Testing (RVL) Browser Profiles","title":"See Also"},{"location":"Guide/tutorial_windows_using_javascript/","text":"Tutorial: Windows Testing (Using JavaScript) \u00b6 This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT) . This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead. Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe . You will see the following: Please run the application a few times and observe its behaviour. If you press the OK button with the first edit box empty, the application will complain and return you to the dialog box. If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box. If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box. An adequate testing strategy for this over-simple application might be to: Put data in the first text box but not the second, and verify that the summary information is correct. Press the OK button with no data in either text box, and verify that a message box is displayed. Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information). If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding. Now, let's use Rapise to implement the first of these tests. Step 1. Run the Application \u00b6 Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen: Step 2. Start Rapise \u00b6 Start Rapise and make the window a conveniently large size. Click on the File menu (top left). Choose the first option there, \"New Test.\" Step 3. Create New Test \u00b6 Navigate to the desired path using the ... button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications: The following dialog will be displayed: Click on the JavaScript (Advanced Users) button. You will now see the following: Step 4. Start Recording \u00b6 Press the \" Record \" button on the toolbar. It has an icon like this: You will see an application selection dialog like the following. Select the \"Inflectra Rapise Two Dialogs Sample\" entry. Leave the library selection as \"Auto.\" Press the \"Select\" button at the bottom right. Step 5. Recording Guidelines \u00b6 Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog: The AUT will be brought to the foreground and Rapise will be minimized. You will achieve best results in recording if you observe the following guidelines: Work slowly while recording. Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item. Use the mouse to select controls and operate them. Avoid using keyboard shortcuts and keyboard commands. Step 6. Record the Activity in the Application \u00b6 Click in the first edit box in the TwoDialogs application. Type a name in this first edit box. Place mouse over the Summary field with 'Thank you' text and press Ctrl + 1 Rapise will open Verify Object Properties dialog. Set checkbox on Value property and click OK button. Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it. As you take these actions, you will see the Recording Activity grid update accordingly: For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog . When you have finished recording the activity for the AUT, press the Finish button or Ctrl + 3 . Note : Do not terminate the TwoDialogs application. When you do this, the Recording Activity dialog will be closed and the AUT will lose focus. Rapise will change the view to display the newly recorded script. It will look something like the following: Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid. Step 7: Execute The Test \u00b6 Press the \"Play\" button on the ribbon or the toolbar. As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window. At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test: Step 8: A Refinement on the Launching of TwoDialogs.exe. \u00b6 To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. If this situation remained, the test script would require that the AUT be running before the script started. That would require that the person running the test remembered where it resided. To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test. Rapise has an underlying scripting language based on JavaScript (see Scripting ). This help system covers available scripting objects in detail from a practical perspective. For the moment, we want to simply take the shortest path to starting the application before attempting to run the test. There are at least 3 ways of adding application launch code to your test. Way 1 : Drag The File from the Test Files view First, switch to Test Files view. Right-click on Test folder and choose \"Add File(s)...\" menu item: And select the location of the TwoDialogs.exe. Normally, it is C:\\Program Files\\Inflectra\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Now you have the executable as a part of your test files set: If you wish to launch TwoDialogs.exe once then just double-click on it in the tree. If you wish it to be launched every time the test starts then simply drag it from the tree into the source code: The proper launch statement will be inserted: Way 2 : Type the Code The Global object contains methods that are available to all scripts. Select the Main.js file in the Test Files view of the Rapise main page. Double-click the file name to open it in the main (editing) window of Rapise. You will see the generated script from the recording session from earlier steps in this sample. Place the cursor in the main editing window and click on the first line after function Test () { Now type Global . As soon as you type the . , Rapise will give you a drop down list of all the available methods available in the Global object: Select the DoLaunch(cmdLine, wrkD) member and hit the Enter key. Now your script contains the line: Global . DoLaunch ( '' ) You need to correct the references to the command line: Global . DoLaunch ( '\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"' ); Way 3 : Drag the Action from the Objects Tree You may drag the method template from the Object Tree view. Expand the Global node and select the DoLaunch action in it. Drag the node into the proper position inside the script source: Template call is inserted: Now you need to correct the references to the command line: Global . DoLaunch ( '\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"' ); Advanced Testing using the Object Spy \u00b6 Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : Press Ctrl + G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl + G again to stop tracking: This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent . That will display its parent objects: For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.","title":"Using JavaScript"},{"location":"Guide/tutorial_windows_using_javascript/#tutorial-windows-testing-using-javascript","text":"This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT) . This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL) , please go to the main Tutorial instead. Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe . You will see the following: Please run the application a few times and observe its behaviour. If you press the OK button with the first edit box empty, the application will complain and return you to the dialog box. If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box. If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box. An adequate testing strategy for this over-simple application might be to: Put data in the first text box but not the second, and verify that the summary information is correct. Press the OK button with no data in either text box, and verify that a message box is displayed. Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information). If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding. Now, let's use Rapise to implement the first of these tests.","title":"Tutorial: Windows Testing (Using JavaScript)"},{"location":"Guide/tutorial_windows_using_javascript/#step-1-run-the-application","text":"Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen:","title":"Step 1. Run the Application"},{"location":"Guide/tutorial_windows_using_javascript/#step-2-start-rapise","text":"Start Rapise and make the window a conveniently large size. Click on the File menu (top left). Choose the first option there, \"New Test.\"","title":"Step 2. Start Rapise"},{"location":"Guide/tutorial_windows_using_javascript/#step-3-create-new-test","text":"Navigate to the desired path using the ... button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications: The following dialog will be displayed: Click on the JavaScript (Advanced Users) button. You will now see the following:","title":"Step 3. Create New Test"},{"location":"Guide/tutorial_windows_using_javascript/#step-4-start-recording","text":"Press the \" Record \" button on the toolbar. It has an icon like this: You will see an application selection dialog like the following. Select the \"Inflectra Rapise Two Dialogs Sample\" entry. Leave the library selection as \"Auto.\" Press the \"Select\" button at the bottom right.","title":"Step 4. Start Recording"},{"location":"Guide/tutorial_windows_using_javascript/#step-5-recording-guidelines","text":"Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog: The AUT will be brought to the foreground and Rapise will be minimized. You will achieve best results in recording if you observe the following guidelines: Work slowly while recording. Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item. Use the mouse to select controls and operate them. Avoid using keyboard shortcuts and keyboard commands.","title":"Step 5. Recording Guidelines"},{"location":"Guide/tutorial_windows_using_javascript/#step-6-record-the-activity-in-the-application","text":"Click in the first edit box in the TwoDialogs application. Type a name in this first edit box. Place mouse over the Summary field with 'Thank you' text and press Ctrl + 1 Rapise will open Verify Object Properties dialog. Set checkbox on Value property and click OK button. Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it. As you take these actions, you will see the Recording Activity grid update accordingly: For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog . When you have finished recording the activity for the AUT, press the Finish button or Ctrl + 3 . Note : Do not terminate the TwoDialogs application. When you do this, the Recording Activity dialog will be closed and the AUT will lose focus. Rapise will change the view to display the newly recorded script. It will look something like the following: Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid.","title":"Step 6. Record the Activity in the Application"},{"location":"Guide/tutorial_windows_using_javascript/#step-7-execute-the-test","text":"Press the \"Play\" button on the ribbon or the toolbar. As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window. At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test:","title":"Step 7: Execute The Test"},{"location":"Guide/tutorial_windows_using_javascript/#step-8-a-refinement-on-the-launching-of-twodialogsexe","text":"To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. If this situation remained, the test script would require that the AUT be running before the script started. That would require that the person running the test remembered where it resided. To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test. Rapise has an underlying scripting language based on JavaScript (see Scripting ). This help system covers available scripting objects in detail from a practical perspective. For the moment, we want to simply take the shortest path to starting the application before attempting to run the test. There are at least 3 ways of adding application launch code to your test. Way 1 : Drag The File from the Test Files view First, switch to Test Files view. Right-click on Test folder and choose \"Add File(s)...\" menu item: And select the location of the TwoDialogs.exe. Normally, it is C:\\Program Files\\Inflectra\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Now you have the executable as a part of your test files set: If you wish to launch TwoDialogs.exe once then just double-click on it in the tree. If you wish it to be launched every time the test starts then simply drag it from the tree into the source code: The proper launch statement will be inserted: Way 2 : Type the Code The Global object contains methods that are available to all scripts. Select the Main.js file in the Test Files view of the Rapise main page. Double-click the file name to open it in the main (editing) window of Rapise. You will see the generated script from the recording session from earlier steps in this sample. Place the cursor in the main editing window and click on the first line after function Test () { Now type Global . As soon as you type the . , Rapise will give you a drop down list of all the available methods available in the Global object: Select the DoLaunch(cmdLine, wrkD) member and hit the Enter key. Now your script contains the line: Global . DoLaunch ( '' ) You need to correct the references to the command line: Global . DoLaunch ( '\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"' ); Way 3 : Drag the Action from the Objects Tree You may drag the method template from the Object Tree view. Expand the Global node and select the DoLaunch action in it. Drag the node into the proper position inside the script source: Template call is inserted: Now you need to correct the references to the command line: Global . DoLaunch ( '\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"' );","title":"Step 8: A Refinement on the Launching of TwoDialogs.exe."},{"location":"Guide/tutorial_windows_using_javascript/#advanced-testing-using-the-object-spy","text":"Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : Press Ctrl + G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl + G again to stop tracking: This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent . That will display its parent objects: For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.","title":"Advanced Testing using the Object Spy"},{"location":"Guide/twodialogs_sample/","text":"Tutorial: Windows Testing (RVL) \u00b6 This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT) . This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial. Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe You will see the following: Please run the application a few times and observe its behaviour. If you press the OK button with the first edit box empty, the application will complain and return you to the dialog box. If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box. If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box. An adequate testing strategy for this over-simple application might be to: Put data in the first text box but not the second, and verify that the summary information is correct. Press the OK button with no data in either text box, and verify that a message box is displayed. Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information). If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding. Now, let's use Rapise to implement the first of these tests. Step 1. Run the Application \u00b6 Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen: Step 2. Start Rapise \u00b6 Start Rapise and make the window a conveniently large size. Click on the File menu (top left). Choose the first option there, \"New Test.\" Step 3. Create New Test \u00b6 Navigate to the desired path using the ... button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications: The following dialog will be displayed: Click on the RVL (Rapise Visual Language) button. You will now see the following: Step 4. Start Recording \u00b6 Press the \" Record \" button on the toolbar. It has an icon like this: You will see an application selection dialog like the following. Select the \"Inflectra Rapise Two Dialogs Sample\" entry. Leave the library selection as \"Auto.\" Press the \"Select\" button at the bottom right. Step 5. Recording Guidelines \u00b6 Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog: The AUT will be brought to the foreground and Rapise will be minimized. You will achieve best results in recording if you observe the following guidelines: Work slowly while recording. Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item. Use the mouse to select controls and operate them. Avoid using keyboard shortcuts and keyboard commands. Step 6. Record the Activity in the Application \u00b6 Click in the first edit box in the TwoDialogs application. Type a name in this first edit box. Place mouse over the Summary field with 'Thank you' text and press Ctrl + 1 Rapise will open Verify Object Properties dialog. Set checkbox on Value property and click OK button. Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it. As you take these actions, you will see the Recording Activity grid update accordingly: For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog . When you have finished recording the activity for the AUT, press the Finish button or Ctrl + 3 . Note : Do not terminate the TwoDialogs application. When you do this, the Recording Activity dialog will be closed and the AUT will lose focus. Rapise will now ask you to confirm that you want to add the recorded steps to the current location in the test grid: Click Append to End , then Rapise will change the view to display the newly recorded test steps. It will look something like the following: Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid. Step 7: Execute The Test \u00b6 Press the \"Play\" button on the ribbon or the toolbar. As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window. At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test: Step 8: A Refinement on the Launching of TwoDialogs.exe. \u00b6 To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. If this situation remained, the test script would require that the AUT be running before the script started. That would require that the person running the test remembered where it resided. To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test. Rapise comes with a series of useful Global utility objects that can do things such as start applications, kill processes, access the file system, etc. To launch the TwoDialogs application at the start of the test, go to the first row in the test grid and click Insert Row Before icon on the toolbar: Now in the new row that was created, choose Action as the Type column: Then in the next cell, choose Global as the object: Then in the next cell, choose DoLaunch and press ENTER on the keyboard: Now you just need to enter in the location of the TwoDialogs application in the final cell (ParamValue): C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Now if you click Play , Rapise will launch the application and then complete the recorded test steps. Advanced Testing using the Object Spy \u00b6 Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : Press Ctrl + G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl + G again to stop tracking: This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent . That will display its parent objects: For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.","title":"Using Rapise Visual Language"},{"location":"Guide/twodialogs_sample/#tutorial-windows-testing-rvl","text":"This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT) . This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version , we have a separate tutorial. Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be 1 C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe You will see the following: Please run the application a few times and observe its behaviour. If you press the OK button with the first edit box empty, the application will complain and return you to the dialog box. If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box. If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box. An adequate testing strategy for this over-simple application might be to: Put data in the first text box but not the second, and verify that the summary information is correct. Press the OK button with no data in either text box, and verify that a message box is displayed. Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information). If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding. Now, let's use Rapise to implement the first of these tests.","title":"Tutorial: Windows Testing (RVL)"},{"location":"Guide/twodialogs_sample/#step-1-run-the-application","text":"Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen:","title":"Step 1. Run the Application"},{"location":"Guide/twodialogs_sample/#step-2-start-rapise","text":"Start Rapise and make the window a conveniently large size. Click on the File menu (top left). Choose the first option there, \"New Test.\"","title":"Step 2. Start Rapise"},{"location":"Guide/twodialogs_sample/#step-3-create-new-test","text":"Navigate to the desired path using the ... button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications: The following dialog will be displayed: Click on the RVL (Rapise Visual Language) button. You will now see the following:","title":"Step 3. Create New Test"},{"location":"Guide/twodialogs_sample/#step-4-start-recording","text":"Press the \" Record \" button on the toolbar. It has an icon like this: You will see an application selection dialog like the following. Select the \"Inflectra Rapise Two Dialogs Sample\" entry. Leave the library selection as \"Auto.\" Press the \"Select\" button at the bottom right.","title":"Step 4. Start Recording"},{"location":"Guide/twodialogs_sample/#step-5-recording-guidelines","text":"Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog: The AUT will be brought to the foreground and Rapise will be minimized. You will achieve best results in recording if you observe the following guidelines: Work slowly while recording. Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item. Use the mouse to select controls and operate them. Avoid using keyboard shortcuts and keyboard commands.","title":"Step 5. Recording Guidelines"},{"location":"Guide/twodialogs_sample/#step-6-record-the-activity-in-the-application","text":"Click in the first edit box in the TwoDialogs application. Type a name in this first edit box. Place mouse over the Summary field with 'Thank you' text and press Ctrl + 1 Rapise will open Verify Object Properties dialog. Set checkbox on Value property and click OK button. Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it. As you take these actions, you will see the Recording Activity grid update accordingly: For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog . When you have finished recording the activity for the AUT, press the Finish button or Ctrl + 3 . Note : Do not terminate the TwoDialogs application. When you do this, the Recording Activity dialog will be closed and the AUT will lose focus. Rapise will now ask you to confirm that you want to add the recorded steps to the current location in the test grid: Click Append to End , then Rapise will change the view to display the newly recorded test steps. It will look something like the following: Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid.","title":"Step 6. Record the Activity in the Application"},{"location":"Guide/twodialogs_sample/#step-7-execute-the-test","text":"Press the \"Play\" button on the ribbon or the toolbar. As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window. At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test:","title":"Step 7: Execute The Test"},{"location":"Guide/twodialogs_sample/#step-8-a-refinement-on-the-launching-of-twodialogsexe","text":"To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. If this situation remained, the test script would require that the AUT be running before the script started. That would require that the person running the test remembered where it resided. To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test. Rapise comes with a series of useful Global utility objects that can do things such as start applications, kill processes, access the file system, etc. To launch the TwoDialogs application at the start of the test, go to the first row in the test grid and click Insert Row Before icon on the toolbar: Now in the new row that was created, choose Action as the Type column: Then in the next cell, choose Global as the object: Then in the next cell, choose DoLaunch and press ENTER on the keyboard: Now you just need to enter in the location of the TwoDialogs application in the final cell (ParamValue): C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe Now if you click Play , Rapise will launch the application and then complete the recorded test steps.","title":"Step 8: A Refinement on the Launching of TwoDialogs.exe."},{"location":"Guide/twodialogs_sample/#advanced-testing-using-the-object-spy","text":"Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy : Press Ctrl + G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl + G again to stop tracking: This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent . That will display its parent objects: For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.","title":"Advanced Testing using the Object Spy"},{"location":"Guide/understanding_the_script/","text":"Understanding the Script \u00b6 Purpose \u00b6 When you create a new test in Rapise, four files are created: <TestName>.sstest - the test project file (e.g. MyTest.sstest) Main.js - the main test script file that contains the entry point of the test - Test function. Objects.js - the file that contains recorded objects. User.js - the file that contains user defined functions. where <TestName> is the name of your Test. You can have as many JavaScript files in your test directory as you like, but Main.js is the main test script (unless you specify otherwise in the Settings Dialog) . When you record, your interactions are written to Main.js and objects are written to Objects.js when you Playback the test, Main.js is the script that will run. All Rapise test scripts must have the same basic structure. Usage \u00b6 If you are going to modify the script, or create a test script from scratch, you will need to know the test script structure. Basic Script \u00b6 Main.js // Default entry point of the test function Test () { //script logic } // List of loaded libraries. It is automatically populated by the recorder. g_load_libraries = [ \"Generic\" ]; // This script will load the Generic library User.js //Put your custom functions and variables in this file Object.js var saved_script_objects = { //array of objects used in this script. }; Full script \u00b6 The following functions are also recognized by Rapise and may be present in the test script. Put these functions either in Main.js or User.js . TestInit() - This function is called once before script playback. It should be used to initialize script-wide data (counters, open datasets, etc). TestFinish() - This function is called once after test execution. It should be used to release resources (data sets, spreadsheets). TestFinish() is a good place to post-process Reports. It may also be used as an integration point with external test management or bug tracking systems. TestPrepare() - For advanced users; TestPrepare() is called before recording and before playback. It may be used to properly initialize libraries. See Also \u00b6 To specify a different test script, see the Settings Dialog . The test script is specified by Settings > ScriptPath .","title":"Understanding the Script"},{"location":"Guide/understanding_the_script/#understanding-the-script","text":"","title":"Understanding the Script"},{"location":"Guide/understanding_the_script/#purpose","text":"When you create a new test in Rapise, four files are created: <TestName>.sstest - the test project file (e.g. MyTest.sstest) Main.js - the main test script file that contains the entry point of the test - Test function. Objects.js - the file that contains recorded objects. User.js - the file that contains user defined functions. where <TestName> is the name of your Test. You can have as many JavaScript files in your test directory as you like, but Main.js is the main test script (unless you specify otherwise in the Settings Dialog) . When you record, your interactions are written to Main.js and objects are written to Objects.js when you Playback the test, Main.js is the script that will run. All Rapise test scripts must have the same basic structure.","title":"Purpose"},{"location":"Guide/understanding_the_script/#usage","text":"If you are going to modify the script, or create a test script from scratch, you will need to know the test script structure.","title":"Usage"},{"location":"Guide/understanding_the_script/#basic-script","text":"Main.js // Default entry point of the test function Test () { //script logic } // List of loaded libraries. It is automatically populated by the recorder. g_load_libraries = [ \"Generic\" ]; // This script will load the Generic library User.js //Put your custom functions and variables in this file Object.js var saved_script_objects = { //array of objects used in this script. };","title":"Basic Script"},{"location":"Guide/understanding_the_script/#full-script","text":"The following functions are also recognized by Rapise and may be present in the test script. Put these functions either in Main.js or User.js . TestInit() - This function is called once before script playback. It should be used to initialize script-wide data (counters, open datasets, etc). TestFinish() - This function is called once after test execution. It should be used to release resources (data sets, spreadsheets). TestFinish() is a good place to post-process Reports. It may also be used as an integration point with external test management or bug tracking systems. TestPrepare() - For advanced users; TestPrepare() is called before recording and before playback. It may be used to properly initialize libraries.","title":"Full script"},{"location":"Guide/understanding_the_script/#see-also","text":"To specify a different test script, see the Settings Dialog . The test script is specified by Settings > ScriptPath .","title":"See Also"},{"location":"Guide/unified_service_desk/","text":"Microsoft Dynamics 365 Unified Service Desk \u00b6 Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD. Hybrid Application \u00b6 Most of the panels in USD are web views (highlighted in red) and some parts are pure desktop areas (highlighted in orange). Rapise is able to deal with web content in USD same way it deals with pure web applications loaded into browsers. Desktop parts of USD are controlled through UIAutomation library. Browser Profile \u00b6 In order to deal with web content in USD a browser profile should be configured. This profile will be used by Rapise to connect to embedded browser components. In the main menu select Settings > Browser . Select Internet Explorer HTML profile and click Duplicate. Specify name for the new profile: UnifiedServiceDesk. Set Browser Path to C:\\Program Files (x86)\\Microsoft Dynamics CRM USD\\USD\\UnifiedServiceDesk.exe Set Default Click Mode to click . Save the profile. Test Framework \u00b6 Root Test \u00b6 Suggested approach to building a test framework for USD is to create a root empty test which will serve as a container for test scenarios and building blocks. Let's create USDFramework test. Choose Web methodology, UnifiedServiceDesk browser profile and RVL options along the way. In the main file of the test ( Main.js ) specify the list of libraries to load: g_load_libraries = [ \"UIAutomation\" , \"%g_browserLibrary:UnifiedServiceDesk%\" , \"DomDynamicsCrm\" ]; Browser Automation Sub-Test \u00b6 For recording web content related actions create a sub-test inside USDFramework. Let's name it USDDashboard. Choose Web methodology and UnifiedServiceDesk browser profile along the way. Double click USDDashboard test to open it in another instance of Rapise. Append DomDynamicsCrm to the list of loaded libraries. Also in User.js of USDDashboard insert a line: g_webPluginsAutoDetect = false ; We can now record web steps into USDDashboard. Desktop Automation Sub-Test \u00b6 For recording desktop content related actions create a sub-test inside USDFramework. Let's name it USDCallScript. Choose Desktop methodology along the way. Double click USDCallScript test to open it in another instance of Rapise. Insert the following snippet into Main.js : function TestPrepare () { if ( g_recording ) { g_UIAutomationWrapper . DeepPointTracking ( true ); } } DeepPointTracking flag fixes the bug in UI Automation tree of USD that prevents automation tools to track elements located under cursor. Let's record steps into USDCallScript. After pressing Record choose Unified Service desk in the list of applications. Note: recording part is missing on the video above because screen capturing software interferes with Rapise doing desktop recording. Here is the test playback. Assembling Blocks \u00b6 Now we can execute USDDashboard and USDCallScript from USDFramework. Open USDFramework test and drag-and-drop sub-tests to RVL sheet. The test framework created in this session is available on GitHub . See Also \u00b6 Microsoft Dynamics Get the framework for testing Unified Service Desk (github) Advanced example of testing USD on GitHub Testing Dynamics 365 for Sales","title":"Unified Service Desk"},{"location":"Guide/unified_service_desk/#microsoft-dynamics-365-unified-service-desk","text":"Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD.","title":"Microsoft Dynamics 365 Unified Service Desk"},{"location":"Guide/unified_service_desk/#hybrid-application","text":"Most of the panels in USD are web views (highlighted in red) and some parts are pure desktop areas (highlighted in orange). Rapise is able to deal with web content in USD same way it deals with pure web applications loaded into browsers. Desktop parts of USD are controlled through UIAutomation library.","title":"Hybrid Application"},{"location":"Guide/unified_service_desk/#browser-profile","text":"In order to deal with web content in USD a browser profile should be configured. This profile will be used by Rapise to connect to embedded browser components. In the main menu select Settings > Browser . Select Internet Explorer HTML profile and click Duplicate. Specify name for the new profile: UnifiedServiceDesk. Set Browser Path to C:\\Program Files (x86)\\Microsoft Dynamics CRM USD\\USD\\UnifiedServiceDesk.exe Set Default Click Mode to click . Save the profile.","title":"Browser Profile"},{"location":"Guide/unified_service_desk/#test-framework","text":"","title":"Test Framework"},{"location":"Guide/unified_service_desk/#root-test","text":"Suggested approach to building a test framework for USD is to create a root empty test which will serve as a container for test scenarios and building blocks. Let's create USDFramework test. Choose Web methodology, UnifiedServiceDesk browser profile and RVL options along the way. In the main file of the test ( Main.js ) specify the list of libraries to load: g_load_libraries = [ \"UIAutomation\" , \"%g_browserLibrary:UnifiedServiceDesk%\" , \"DomDynamicsCrm\" ];","title":"Root Test"},{"location":"Guide/unified_service_desk/#browser-automation-sub-test","text":"For recording web content related actions create a sub-test inside USDFramework. Let's name it USDDashboard. Choose Web methodology and UnifiedServiceDesk browser profile along the way. Double click USDDashboard test to open it in another instance of Rapise. Append DomDynamicsCrm to the list of loaded libraries. Also in User.js of USDDashboard insert a line: g_webPluginsAutoDetect = false ; We can now record web steps into USDDashboard.","title":"Browser Automation Sub-Test"},{"location":"Guide/unified_service_desk/#desktop-automation-sub-test","text":"For recording desktop content related actions create a sub-test inside USDFramework. Let's name it USDCallScript. Choose Desktop methodology along the way. Double click USDCallScript test to open it in another instance of Rapise. Insert the following snippet into Main.js : function TestPrepare () { if ( g_recording ) { g_UIAutomationWrapper . DeepPointTracking ( true ); } } DeepPointTracking flag fixes the bug in UI Automation tree of USD that prevents automation tools to track elements located under cursor. Let's record steps into USDCallScript. After pressing Record choose Unified Service desk in the list of applications. Note: recording part is missing on the video above because screen capturing software interferes with Rapise doing desktop recording. Here is the test playback.","title":"Desktop Automation Sub-Test"},{"location":"Guide/unified_service_desk/#assembling-blocks","text":"Now we can execute USDDashboard and USDCallScript from USDFramework. Open USDFramework test and drag-and-drop sub-tests to RVL sheet. The test framework created in this session is available on GitHub .","title":"Assembling Blocks"},{"location":"Guide/unified_service_desk/#see-also","text":"Microsoft Dynamics Get the framework for testing Unified Service Desk (github) Advanced example of testing USD on GitHub Testing Dynamics 365 for Sales","title":"See Also"},{"location":"Guide/unit_testing/","text":"Unit Testing \u00b6 Purpose \u00b6 Unit Testing involves testing individual units of a piece of software to make sure they act as intended. The units tested are usually functions or class methods. Usage \u00b6 There are five ways that Rapise can help you Unit Test: Rapise methods support testing objects and methods in DLLs . Rapise can test ActiveX objects and their methods through their COM Interface . If you choose to write your Unit tests in a third-party tool, Rapise has a Command Line interface where you can access its functionality. Test results are written to a TAP file, which allows integration with Unit Testing frameworks. Rapise tests can be invoked from Visual Studio MS-Test, VSTS and NUnit tests.","title":"Unit Testing"},{"location":"Guide/unit_testing/#unit-testing","text":"","title":"Unit Testing"},{"location":"Guide/unit_testing/#purpose","text":"Unit Testing involves testing individual units of a piece of software to make sure they act as intended. The units tested are usually functions or class methods.","title":"Purpose"},{"location":"Guide/unit_testing/#usage","text":"There are five ways that Rapise can help you Unit Test: Rapise methods support testing objects and methods in DLLs . Rapise can test ActiveX objects and their methods through their COM Interface . If you choose to write your Unit tests in a third-party tool, Rapise has a Command Line interface where you can access its functionality. Test results are written to a TAP file, which allows integration with Unit Testing frameworks. Rapise tests can be invoked from Visual Studio MS-Test, VSTS and NUnit tests.","title":"Usage"},{"location":"Guide/using_native_selenium_code/","text":"Using Native Selenium Code \u00b6 When using the standard Rapise Record, Learn , and Web Spy tools you can create your web tests using the Rapise built-in Object Tree . This lets you design your tests using a higher level of abstraction than working directly with Selenium WebDriver . For example you can learn an object SeS(\"EditButton\") that points to a dynamic XPATH or CSS query that the automation engineer knows will be accurate even if the data on the page changes (for example). The QA analyst can then simply drag and drop these Rapise objects from the Object Tree into the test script (e.g. SeS(\"EditButton\").DoClick() ) to perform the desired action. Sometimes however you will want to be able to run standard Selenium raw WebDriver code inside Rapise using the standard Selenium WebDriver API functions . Rapise allows you to do this using the special WebDriver global object: The WebDriver object implements the various standard Selenium WebDriver API calls for automating the web browser. There is a sample available for Rapise called UsingSelenium (you can open it from the View > Start Page ) that illustrates using the WebDriver code directly, but for completeness, here is a sample that uses the www.libraryinformationsystem.org web site and performs some simple actions: // Open and connect the browser WebDriver . CreateDriver (); //Open the URL for the www.libraryinformationsystem.org website: WebDriver . SetUrl ( 'http://www.libraryinformationsystem.org' ); //Find the body element and verify the text in it var el = WebDriver . FindElementByXPath ( \"//body\" ); Tester . Assert ( \"Text found in BODY\" , el . GetText (). indexOf ( \"Library Information System\" ) != - 1 ); //Click on the login link var logInLink = WebDriver . FindElementById ( 'HeadLoginView\\_HeadLoginStatus' ); logInLink . Click (); //Make sure the input textbox is as expected var userName = WebDriver . FindElementByCssSelector ( \"html > body > form > div:nth-of-type(3) > div:nth-of-type(2) > div:nth-of-type(2) > fieldset > p:first-of-type > input\" ); Tester . AssertEqual ( \"class is 'textbox'\" , \"textbox\" , userName . GetAttribute ( \"class\" )); //Go to a different URL (http://libraryinformationsystem.org/HtmlTest.htm) WebDriver . SetUrl ( 'http://www.libraryinformationsystem.org/HtmlTest.htm' ); //Click on the Alert box var alertBtn = WebDriver . FindElementById ( \"btnAlert\" ); alertBtn . Click (); //Switch to this alert box and close var alertElement = WebDriver . SwitchToAlert (); alertElement . Accept (); //Shut down Selenium WebDriver . Quit () More sophisticated sample is available in rapise-samples repository . When you click Play to playback your Selenium script, make sure you have selected one of the Selenium web browser profiles. If you have selected a native browser profile (e.g. \u201cFirefox HTML\u201d instead of \u201cSelenium \u2013 Firefox\u201d) you will get the error message \u201cWebDriver\u201d is not defined. Code Completion for the Selenium WebElement Objects \u00b6 When you are using functions such as FindElementsById() in your code, the returned object will be a Selenium Web Element . If you want to have intellisense and code-completion for the returned WebElement objects, you need to do two things: Click on Ctrl + Shift + E to include the Rapise engine in your project. Prefix the variable with /**WebElementWrapper*/, so instead of just: var el = WebDriver . FindElementById ( \u2026 ) // you use: var /**WebElementWrapper*/ el = WebDriver . FindElementById ( \u2026 ) For example: Interoperability with Rapise Objects \u00b6 In addition to being able to use raw Selenium code on its own, you can also use a mixture of Rapise object-based code and raw Selenium WebDriver code. For example, you are using the standard Rapise approach (using learned SeS('object') objects) for testing but at some point want to switch to Selenium API to call a couple of WebElement functions on a learned object, you can use the special \u2018element\u2019 property: var webElement = SeS ( 'MyObject' ). element ; If you want to the reverse and be able to create a Rapise SeS('object') on the fly from a physical object on the web page, you can do the MakeObjectForXPath(xpath) function that returns a Rapise SeSObject , in the same way that SeS('id') does normally: var sesObj = MakeObjectForXPath ( \"//body//div[@id='logArea']\" );","title":"Using Native Selenium Code"},{"location":"Guide/using_native_selenium_code/#using-native-selenium-code","text":"When using the standard Rapise Record, Learn , and Web Spy tools you can create your web tests using the Rapise built-in Object Tree . This lets you design your tests using a higher level of abstraction than working directly with Selenium WebDriver . For example you can learn an object SeS(\"EditButton\") that points to a dynamic XPATH or CSS query that the automation engineer knows will be accurate even if the data on the page changes (for example). The QA analyst can then simply drag and drop these Rapise objects from the Object Tree into the test script (e.g. SeS(\"EditButton\").DoClick() ) to perform the desired action. Sometimes however you will want to be able to run standard Selenium raw WebDriver code inside Rapise using the standard Selenium WebDriver API functions . Rapise allows you to do this using the special WebDriver global object: The WebDriver object implements the various standard Selenium WebDriver API calls for automating the web browser. There is a sample available for Rapise called UsingSelenium (you can open it from the View > Start Page ) that illustrates using the WebDriver code directly, but for completeness, here is a sample that uses the www.libraryinformationsystem.org web site and performs some simple actions: // Open and connect the browser WebDriver . CreateDriver (); //Open the URL for the www.libraryinformationsystem.org website: WebDriver . SetUrl ( 'http://www.libraryinformationsystem.org' ); //Find the body element and verify the text in it var el = WebDriver . FindElementByXPath ( \"//body\" ); Tester . Assert ( \"Text found in BODY\" , el . GetText (). indexOf ( \"Library Information System\" ) != - 1 ); //Click on the login link var logInLink = WebDriver . FindElementById ( 'HeadLoginView\\_HeadLoginStatus' ); logInLink . Click (); //Make sure the input textbox is as expected var userName = WebDriver . FindElementByCssSelector ( \"html > body > form > div:nth-of-type(3) > div:nth-of-type(2) > div:nth-of-type(2) > fieldset > p:first-of-type > input\" ); Tester . AssertEqual ( \"class is 'textbox'\" , \"textbox\" , userName . GetAttribute ( \"class\" )); //Go to a different URL (http://libraryinformationsystem.org/HtmlTest.htm) WebDriver . SetUrl ( 'http://www.libraryinformationsystem.org/HtmlTest.htm' ); //Click on the Alert box var alertBtn = WebDriver . FindElementById ( \"btnAlert\" ); alertBtn . Click (); //Switch to this alert box and close var alertElement = WebDriver . SwitchToAlert (); alertElement . Accept (); //Shut down Selenium WebDriver . Quit () More sophisticated sample is available in rapise-samples repository . When you click Play to playback your Selenium script, make sure you have selected one of the Selenium web browser profiles. If you have selected a native browser profile (e.g. \u201cFirefox HTML\u201d instead of \u201cSelenium \u2013 Firefox\u201d) you will get the error message \u201cWebDriver\u201d is not defined.","title":"Using Native Selenium Code"},{"location":"Guide/using_native_selenium_code/#code-completion-for-the-selenium-webelement-objects","text":"When you are using functions such as FindElementsById() in your code, the returned object will be a Selenium Web Element . If you want to have intellisense and code-completion for the returned WebElement objects, you need to do two things: Click on Ctrl + Shift + E to include the Rapise engine in your project. Prefix the variable with /**WebElementWrapper*/, so instead of just: var el = WebDriver . FindElementById ( \u2026 ) // you use: var /**WebElementWrapper*/ el = WebDriver . FindElementById ( \u2026 ) For example:","title":"Code Completion for the Selenium WebElement Objects"},{"location":"Guide/using_native_selenium_code/#interoperability-with-rapise-objects","text":"In addition to being able to use raw Selenium code on its own, you can also use a mixture of Rapise object-based code and raw Selenium WebDriver code. For example, you are using the standard Rapise approach (using learned SeS('object') objects) for testing but at some point want to switch to Selenium API to call a couple of WebElement functions on a learned object, you can use the special \u2018element\u2019 property: var webElement = SeS ( 'MyObject' ). element ; If you want to the reverse and be able to create a Rapise SeS('object') on the fly from a physical object on the web page, you can do the MakeObjectForXPath(xpath) function that returns a Rapise SeSObject , in the same way that SeS('id') does normally: var sesObj = MakeObjectForXPath ( \"//body//div[@id='logArea']\" );","title":"Interoperability with Rapise Objects"},{"location":"Guide/variable_call_stack_view/","text":"Variable/Call Stack View \u00b6 Purpose \u00b6 Lists the functions in the current call stack. Beneath each function, variables/objects local to that function are listed with their value and type. How to Open \u00b6 Begin debugging a script. The Variable/Call Stack View will open automatically. Go to a Function Definition \u00b6 Double click on a function to go to its definition. See Also \u00b6 Internal Debugger","title":"Variable/Call Stack View"},{"location":"Guide/variable_call_stack_view/#variablecall-stack-view","text":"","title":"Variable/Call Stack View"},{"location":"Guide/variable_call_stack_view/#purpose","text":"Lists the functions in the current call stack. Beneath each function, variables/objects local to that function are listed with their value and type.","title":"Purpose"},{"location":"Guide/variable_call_stack_view/#how-to-open","text":"Begin debugging a script. The Variable/Call Stack View will open automatically.","title":"How to Open"},{"location":"Guide/variable_call_stack_view/#go-to-a-function-definition","text":"Double click on a function to go to its definition.","title":"Go to a Function Definition"},{"location":"Guide/variable_call_stack_view/#see-also","text":"Internal Debugger","title":"See Also"},{"location":"Guide/verbosity_levels/","text":"Verbose Levels \u00b6 Purpose \u00b6 The Verbose Level affects the amount of information written to the Output View . Usage \u00b6 The Verbose Level is set via menu Tools > Verbose Level > ... : See Also \u00b6 Internal Debugger Debugger Toolbar","title":"Verbosity Levels"},{"location":"Guide/verbosity_levels/#verbose-levels","text":"","title":"Verbose Levels"},{"location":"Guide/verbosity_levels/#purpose","text":"The Verbose Level affects the amount of information written to the Output View .","title":"Purpose"},{"location":"Guide/verbosity_levels/#usage","text":"The Verbose Level is set via menu Tools > Verbose Level > ... :","title":"Usage"},{"location":"Guide/verbosity_levels/#see-also","text":"Internal Debugger Debugger Toolbar","title":"See Also"},{"location":"Guide/verify_object_properties/","text":"Verify Object Properties Dialog \u00b6 Purpose \u00b6 Use the Verify Object Properties dialog during recording to add checkpoints . How to Open \u00b6 First, open the Recording Activity Dialog . Position the mouse over an object and press Ctrl+1 , or Press the Verify button and then click the target object with the mouse cursor. Create a Checkpoint \u00b6 Your checkpoint will be associated with a particular object. That object's properties will be listed in the Verify Object Properties dialog. Check those properties that you wish to verify during playback . Enter expected values for the selected properties in the Value column. Note: The Bitmap and BWBitmap properties are images of the object. Press the OK button. The Verify Object Properties dialog will close, and the Recording Activity dialog will contain a new Verify action: The generated script will have a corresponding assert statement : Or, in JavaScript mode: Tester . Assert ( \"Verify that: InnerText=Log In\" , SeS ( 'Log_In1' ). GetInnerText () == \"Log In\" ); Check Object Exists \u00b6 Since Rapise 6.6 the Verify Object Properties dialog shows Exists property. It adds Global.DoWaitFor action to the recording. Check Object Visible \u00b6 Since Rapise 6.6 the Verify Object Properties dialog shows Visible property. It checks that the object is visible on screen. See Also \u00b6 Recording Assert Statements","title":"Verify Object Properties Dialog"},{"location":"Guide/verify_object_properties/#verify-object-properties-dialog","text":"","title":"Verify Object Properties Dialog"},{"location":"Guide/verify_object_properties/#purpose","text":"Use the Verify Object Properties dialog during recording to add checkpoints .","title":"Purpose"},{"location":"Guide/verify_object_properties/#how-to-open","text":"First, open the Recording Activity Dialog . Position the mouse over an object and press Ctrl+1 , or Press the Verify button and then click the target object with the mouse cursor.","title":"How to Open"},{"location":"Guide/verify_object_properties/#create-a-checkpoint","text":"Your checkpoint will be associated with a particular object. That object's properties will be listed in the Verify Object Properties dialog. Check those properties that you wish to verify during playback . Enter expected values for the selected properties in the Value column. Note: The Bitmap and BWBitmap properties are images of the object. Press the OK button. The Verify Object Properties dialog will close, and the Recording Activity dialog will contain a new Verify action: The generated script will have a corresponding assert statement : Or, in JavaScript mode: Tester . Assert ( \"Verify that: InnerText=Log In\" , SeS ( 'Log_In1' ). GetInnerText () == \"Log In\" );","title":"Create a Checkpoint"},{"location":"Guide/verify_object_properties/#check-object-exists","text":"Since Rapise 6.6 the Verify Object Properties dialog shows Exists property. It adds Global.DoWaitFor action to the recording.","title":"Check Object Exists"},{"location":"Guide/verify_object_properties/#check-object-visible","text":"Since Rapise 6.6 the Verify Object Properties dialog shows Visible property. It checks that the object is visible on screen.","title":"Check Object Visible"},{"location":"Guide/verify_object_properties/#see-also","text":"Recording Assert Statements","title":"See Also"},{"location":"Guide/visual_language/","text":"Rapise Visual Language (RVL) \u00b6 Rapise includes a scriptless approach to writing automated tests as well as the option to use the built-in JavaScript IDE . This section gives an overview of the Rapise Visual Language (RVL) option and why you would use it. Info For more information on RVL's syntax and constructs, please refer to the separate RVL section of this user manual. What is Scriptless Testing \u00b6 Let's imagine we're recording a simple automated web test against the sample http://www.libraryinformationsystem.org website that comes with Rapise: Now in this script, we'll perform the following actions to verify that you can login correctly (the happy path): Click on the login button Enter your username and password Click on the submit button Once the home page loads, verify the name of the logged in user at the top-right If you use the JavaScript scripting option , what will be recorded is a JavaScript test script that looks something like the following: You can drag and drop objects and actions from the object tree on the left-hand side into the test script, but for automation engineers that are not programmers, we found that in many cases the resulting scripts are not easy to understand and the syntax can be fiddly to get right. All Java, JavaScript, C#, C++, C programmers out there know that you need curly braces, semi-colons at the end of each line, etc. but for others, it's not so obvious. So to make automated testing and the power of Rapise's object based testing easier and more accessible , you can use the alternative RVL methodology. RVL \u00b6 Let's imagine that we perform the exact same set of steps, recording the test script using the Rapise Visual Language approach. As a result we get: What you'll notice is that each of the recorded actions has now become a series of rows in the grid. The Type column sets the type of a row (perform an action, comment, make an assertion that a value matches what was expected, set a variable, be a parameter or output to the current test report): The Object column is used to select the object from the object tree: Note This dropdown shows all the objects from the object tree, global utility objects as well as Functions object which you can use to call custom functions (written in JavaScript). The Action column defines what to do with the selected object. Finally, the remaining columns ( ParamName , ParamType , ParamValue ) contain any parameter values, with subsequent rows being used if necessary: This means that once you have learned the objects during testing, anyone can compose the test just by adding rows to the grid and then just picking the appropriate objects and actions. Power of Dropdowns \u00b6 RVL dropdowns help you spend less time on editing test steps. When you expand the Object dropdown you see available objects. When an object is selected the Action dropdown shows applicable actions. If a selected action accepts parameters then parameter names and types are generated automatically.","title":"About"},{"location":"Guide/visual_language/#rapise-visual-language-rvl","text":"Rapise includes a scriptless approach to writing automated tests as well as the option to use the built-in JavaScript IDE . This section gives an overview of the Rapise Visual Language (RVL) option and why you would use it. Info For more information on RVL's syntax and constructs, please refer to the separate RVL section of this user manual.","title":"Rapise Visual Language (RVL)"},{"location":"Guide/visual_language/#what-is-scriptless-testing","text":"Let's imagine we're recording a simple automated web test against the sample http://www.libraryinformationsystem.org website that comes with Rapise: Now in this script, we'll perform the following actions to verify that you can login correctly (the happy path): Click on the login button Enter your username and password Click on the submit button Once the home page loads, verify the name of the logged in user at the top-right If you use the JavaScript scripting option , what will be recorded is a JavaScript test script that looks something like the following: You can drag and drop objects and actions from the object tree on the left-hand side into the test script, but for automation engineers that are not programmers, we found that in many cases the resulting scripts are not easy to understand and the syntax can be fiddly to get right. All Java, JavaScript, C#, C++, C programmers out there know that you need curly braces, semi-colons at the end of each line, etc. but for others, it's not so obvious. So to make automated testing and the power of Rapise's object based testing easier and more accessible , you can use the alternative RVL methodology.","title":"What is Scriptless Testing"},{"location":"Guide/visual_language/#rvl","text":"Let's imagine that we perform the exact same set of steps, recording the test script using the Rapise Visual Language approach. As a result we get: What you'll notice is that each of the recorded actions has now become a series of rows in the grid. The Type column sets the type of a row (perform an action, comment, make an assertion that a value matches what was expected, set a variable, be a parameter or output to the current test report): The Object column is used to select the object from the object tree: Note This dropdown shows all the objects from the object tree, global utility objects as well as Functions object which you can use to call custom functions (written in JavaScript). The Action column defines what to do with the selected object. Finally, the remaining columns ( ParamName , ParamType , ParamValue ) contain any parameter values, with subsequent rows being used if necessary: This means that once you have learned the objects during testing, anyone can compose the test just by adding rows to the grid and then just picking the appropriate objects and actions.","title":"RVL"},{"location":"Guide/visual_language/#power-of-dropdowns","text":"RVL dropdowns help you spend less time on editing test steps. When you expand the Object dropdown you see available objects. When an object is selected the Action dropdown shows applicable actions. If a selected action accepts parameters then parameter names and types are generated automatically.","title":"Power of Dropdowns"},{"location":"Guide/visual_studio/","text":"Visual Studio and Azure DevOps Integration v1 \u00b6 Tip This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3 . This section describes how to execute Rapise tests using the Microsoft Test Framework . You can execute tests with Visual Studio Test Explorer Visual Studio Team Services / Team Foundation Server Azure DevOps Unit Test Mapping \u00b6 Rapise integrates with Visual Studio at Unit Test level. Create a Unit Test project in Visual Studio, add a unit test and a test method. In the References section add the DLL: 1 c:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\VSUnit\\SeSVSUnit\\Bin\\Release\\SeSVSUnit.dll In a test method specify absolute path to a Rapise test and pass TextContext parameter to Rapise.TestExecute function: namespace UnitTestProject1 { [TestClass] public class UnitTest1 { public TestContext TestContext { get ; set ; } [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } } } Parameters \u00b6 To pass parameters to Rapise test create .runsettings file. Each parameter with name starting with g_ will be passed to Rapise via command line. Here is an example of selecting a browser to use for execution of cross-browser tests: <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Parameters used by tests at runtime --> <TestRunParameters> <Parameter name= \"g_browserLibrary\" value= \"Chrome HTML\" /> </TestRunParameters> </RunSettings> Visual Studio Test Explorer \u00b6 Once Rapise tests are mapped to unit tests one can use Visual Studio Test Explorer to run tests and analyze results. Press Output link (highlighted) to view test run results. last.tap - is a test report in Test Anything Protocol format (human readable). Click to open in any Text Viewer/Editor. last.trp - is a test report in Rapise format. Click to open in Rapise. One can apply .runsettings file to use for execution: VSTS / TFS \u00b6 In Visual Studio Team Services one can run unit tests after making a build . Build definition contains predefined steps: Here is an example configuration of the Test Assemblies step: Test Assembly field contains a wildcard mask that selects unit tests from matching DLLs only In Test Filter criteria one can select tests by TestCategory which is an attribute of a Test Method: [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } Run Settings File is a link to .runsettings file. In Override TestRun Parameters one can override values of the parameters in .runsettings file. Windows Agent for Test Execution \u00b6 VSTS can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Windows Agent . One can configure several agent pools to run tests in different environments: Azure DevOps \u00b6 On September 10, 2018, Microsoft renamed Visual Studio Team Services (VSTS) to Azure DevOps Services. Execution of Rapise tests in Azure DevOps looks a bit different from former versions of VSTS, though most of the concepts are still the same. Trigger execution using a Visual Studio Test task . You can add it to a build or release pipeline. Here is an example configuration of a build pipeline. # .NET Desktop # Build and run tests for .NET Desktop or Windows classic desktop solutions. # Add steps that publish symbols, save build artifacts, and more: # https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net # Running on a self-hosted agent trigger : - master pool : name : 'default' variables : solution : '**/*.sln' buildPlatform : 'Any CPU' buildConfiguration : 'Release' steps : - task : NuGetToolInstaller@0 - task : NuGetCommand@2 inputs : restoreSolution : '$(solution)' - task : VSBuild@1 inputs : solution : '$(solution)' platform : '$(buildPlatform)' configuration : '$(buildConfiguration)' - task : VSTest@2 inputs : testSelector : 'testAssemblies' testAssemblyVer2 : | **\\$(BuildConfiguration)\\*test*.dll !**\\*Microsoft.VisualStudio.TestPlatform* !**\\obj\\** searchFolder : '$(System.DefaultWorkingDirectory)' testFiltercriteria : 'TestCategory=browser' runSettingsFile : 'UnitTestProject1\\UnitTestProject1\\RS.runsettings' While configuring the pipeline you can add a Visual Studio Test task via the left panel. Here is an example configuration of the Test Studio Test task: Test files field contains a wildcard mask that selects unit tests from matching DLLs only In Test filter criteria one can select tests by TestCategory which is an attribute of a Test Method: [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } Settings File is a link to .runsettings file. Self-hosted Windows Agents \u00b6 Azure DevOps can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Self-hosted Windows Agent . Reference the agent pool with self-hosted agents in your azure-pipelines.yml via pool tag . Logs and Reports \u00b6 After every execution of the Visual Studio Test task you will get logs and reports. You can also see an individual report of a failed test. See Also \u00b6 Visual Studio Test Explorer Visual Studio Team System / Team Foundation Server Azure DevOps TUTORIAL: Integrating Rapise and Azure DevOps (video)","title":"Visual Studio"},{"location":"Guide/visual_studio/#visual-studio-and-azure-devops-integration-v1","text":"Tip This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3 . This section describes how to execute Rapise tests using the Microsoft Test Framework . You can execute tests with Visual Studio Test Explorer Visual Studio Team Services / Team Foundation Server Azure DevOps","title":"Visual Studio and Azure DevOps Integration v1"},{"location":"Guide/visual_studio/#unit-test-mapping","text":"Rapise integrates with Visual Studio at Unit Test level. Create a Unit Test project in Visual Studio, add a unit test and a test method. In the References section add the DLL: 1 c:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\VSUnit\\SeSVSUnit\\Bin\\Release\\SeSVSUnit.dll In a test method specify absolute path to a Rapise test and pass TextContext parameter to Rapise.TestExecute function: namespace UnitTestProject1 { [TestClass] public class UnitTest1 { public TestContext TestContext { get ; set ; } [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } } }","title":"Unit Test Mapping"},{"location":"Guide/visual_studio/#parameters","text":"To pass parameters to Rapise test create .runsettings file. Each parameter with name starting with g_ will be passed to Rapise via command line. Here is an example of selecting a browser to use for execution of cross-browser tests: <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Parameters used by tests at runtime --> <TestRunParameters> <Parameter name= \"g_browserLibrary\" value= \"Chrome HTML\" /> </TestRunParameters> </RunSettings>","title":"Parameters"},{"location":"Guide/visual_studio/#visual-studio-test-explorer","text":"Once Rapise tests are mapped to unit tests one can use Visual Studio Test Explorer to run tests and analyze results. Press Output link (highlighted) to view test run results. last.tap - is a test report in Test Anything Protocol format (human readable). Click to open in any Text Viewer/Editor. last.trp - is a test report in Rapise format. Click to open in Rapise. One can apply .runsettings file to use for execution:","title":"Visual Studio Test Explorer"},{"location":"Guide/visual_studio/#vsts-tfs","text":"In Visual Studio Team Services one can run unit tests after making a build . Build definition contains predefined steps: Here is an example configuration of the Test Assemblies step: Test Assembly field contains a wildcard mask that selects unit tests from matching DLLs only In Test Filter criteria one can select tests by TestCategory which is an attribute of a Test Method: [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } Run Settings File is a link to .runsettings file. In Override TestRun Parameters one can override values of the parameters in .runsettings file.","title":"VSTS / TFS"},{"location":"Guide/visual_studio/#windows-agent-for-test-execution","text":"VSTS can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Windows Agent . One can configure several agent pools to run tests in different environments:","title":"Windows Agent for Test Execution"},{"location":"Guide/visual_studio/#azure-devops","text":"On September 10, 2018, Microsoft renamed Visual Studio Team Services (VSTS) to Azure DevOps Services. Execution of Rapise tests in Azure DevOps looks a bit different from former versions of VSTS, though most of the concepts are still the same. Trigger execution using a Visual Studio Test task . You can add it to a build or release pipeline. Here is an example configuration of a build pipeline. # .NET Desktop # Build and run tests for .NET Desktop or Windows classic desktop solutions. # Add steps that publish symbols, save build artifacts, and more: # https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net # Running on a self-hosted agent trigger : - master pool : name : 'default' variables : solution : '**/*.sln' buildPlatform : 'Any CPU' buildConfiguration : 'Release' steps : - task : NuGetToolInstaller@0 - task : NuGetCommand@2 inputs : restoreSolution : '$(solution)' - task : VSBuild@1 inputs : solution : '$(solution)' platform : '$(buildPlatform)' configuration : '$(buildConfiguration)' - task : VSTest@2 inputs : testSelector : 'testAssemblies' testAssemblyVer2 : | **\\$(BuildConfiguration)\\*test*.dll !**\\*Microsoft.VisualStudio.TestPlatform* !**\\obj\\** searchFolder : '$(System.DefaultWorkingDirectory)' testFiltercriteria : 'TestCategory=browser' runSettingsFile : 'UnitTestProject1\\UnitTestProject1\\RS.runsettings' While configuring the pipeline you can add a Visual Studio Test task via the left panel. Here is an example configuration of the Test Studio Test task: Test files field contains a wildcard mask that selects unit tests from matching DLLs only In Test filter criteria one can select tests by TestCategory which is an attribute of a Test Method: [TestMethod, TestCategory(\"browser\")] public void CreateNewBook () { Rapise . TestExecute ( @\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\" , TestContext ); } Settings File is a link to .runsettings file.","title":"Azure DevOps"},{"location":"Guide/visual_studio/#self-hosted-windows-agents","text":"Azure DevOps can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Self-hosted Windows Agent . Reference the agent pool with self-hosted agents in your azure-pipelines.yml via pool tag .","title":"Self-hosted Windows Agents"},{"location":"Guide/visual_studio/#logs-and-reports","text":"After every execution of the Visual Studio Test task you will get logs and reports. You can also see an individual report of a failed test.","title":"Logs and Reports"},{"location":"Guide/visual_studio/#see-also","text":"Visual Studio Test Explorer Visual Studio Team System / Team Foundation Server Azure DevOps TUTORIAL: Integrating Rapise and Azure DevOps (video)","title":"See Also"},{"location":"Guide/vstest/","text":"Azure DevOps Integration v3 \u00b6 This section describes how to execute Rapise tests in Azure DevOps pipelines or locally with Microsoft.TestPlatform . If you are using SpiraTeam , you should check the section about using RapiseLauncher extension for Azure DevOps. Azure DevOps \u00b6 We assume that Rapise tests are stored in a Git repository and Azure DevOps pipeline is connected to it. You may run Rapise tests both on self-hosted Windows Agents and Microsoft-hosted Windows Agents . Rapise Test Adapter Task \u00b6 To run Rapise tests with a Visual Studio Test task you need to install Rapise and Rapise Test Adapter for VSTest. The best way to do it is to use Rapise Test Adapter Extension from Azure Marketplace. After this extension is installed add the Rapise Test Adapter task yo your pipeline. In the task settings you may choose what versions of Rapise and Rapise Test Adapter to install. Proceed to the next step . Rapise Installation Task \u00b6 Important Skip this section if you are using Rapise Test Adapter Task In order to run Rapise tests on a Microsoft-hosted Windows Agent you need to configure Rapise Installation task. If you are running on a self-hosted Windows Agent you may install Rapise manually once and use it in every pipeline run. Download and place this PowerShell script to your Git repository: RapiseInstall.ps1 This script downloads and installs Rapise. It also installs Rapise extension into Chrome browser. In your pipeline add a PowerShell task to execute this script. Pass Rapise version to install as a parameter. Classic UI YAML steps : - task : PowerShell@2 displayName : 'Install Rapise' inputs : targetType : filePath filePath : ./RapiseInstall.ps1 arguments : '-RapiseVersion \"6.5.20.21\"' Rapise.TestAdapter \u00b6 Important Skip this section if you are using Rapise Test Adapter Task To run Rapise tests with a Visual Studio Test task install Rapise.TestAdapter NuGet package . NuGet Tool Installer \u00b6 First you need to install NuGet itself. Add NuGet tool installer task. Classic UI YAML steps : - task : NuGetToolInstaller@0 displayName : 'Use NuGet' inputs : versionSpec : 4.4.1 Rapise.TestAdapter NuGet Package \u00b6 Then add NuGet task. Set command to custom and specify the command line: install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion) Classic UI YAML steps : - task : NuGetCommand@2 displayName : 'NuGet Install Rapise.TestAdapter' inputs : command : custom arguments : 'install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion)' In the pipeline settings set RapiseTestAdapterVersion variable to the Rapise.TestAdapter version you want to install (e.g. 1.0.11). The task will install Rapise.TestAdapter into $(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472 Visual Studio Test Platform Installer Task \u00b6 If you plan to run tests on a Self-hosted Windows Agent that does not have Visual Studio installed you need to add Visual Studio Test Platform Installer task. Classic UI YAML steps : - task : VisualStudioTestPlatformInstaller@1 displayName : 'Visual Studio Test Platform Installer' inputs : versionSelector : latestStable Visual Studio Test Task \u00b6 To run tests you need Visual Studio Test task. Classic UI YAML steps : - task : VSTest@2 displayName : 'VsTest - Run Rapise Tests' inputs : testAssemblyVer2 : | $(Build.Repository.LocalPath)\\Tests\\*.sstest $(Build.Repository.LocalPath)\\Tests\\*\\*.sstest runSettingsFile : '$(System.DefaultWorkingDirectory)\\Pipeline\\azure.runsettings' overrideTestrunParameters : '-g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile)' pathtoCustomTestAdapters : '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472' platform : '$(BuildPlatform)' configuration : '$(BuildConfiguration)' Make sure that path to custom test set adapters is set to $(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472 Specify patterns to search for *.sstest files in the test files section ( testAssemblyVer2 in YAML). If you added Visual Studio Test Platform Installer task on the previous step do not forget to set Test platform version to Installed by Tools Installer ( vsTestVersion: toolsInstaller in YAML). Tip Rapise.TestAdapter also supports filtering, parameters and .runsettings files (specified via Visual Studio Test task options). Test Filter Criteria \u00b6 Rapise.TestAdapter supports filter criteria based on FullyQualifiedName test property (equals to *.sstest file name). To specify a filter set testFiltercriteria in YAML or Test filter criteria in the Classic UI task editor. Example: FullyQualifiedName~LIS Parameters \u00b6 Parameters can be set via .runsettings file, overrideTestrunParameters YAML option or Override test run parameters field in the Classic UI task editor. Note Parameter names must be prefixed with g_ . Example: -g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile) Note $(name) - references a pipeline variable .runsettings \u00b6 .runsettings file is used to pass parameters and to enable video recorder . Example: <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Parameters used by tests at runtime --> <TestRunParameters> <Parameter name= \"g_browserLibrary\" value= \"Chrome\" /> </TestRunParameters> <DataCollectionRunSettings> <DataCollectors> <DataCollector uri= \"datacollector://microsoft/VideoRecorder/1.0\" assemblyQualifiedName= \"Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder.VideoRecorderDataCollector, Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" friendlyName= \"video\" enabled= \"True\" > <Configuration> <MediaRecorder sendRecordedMediaForPassedTestCase= \"true\" xmlns= \"\" > <ScreenCaptureVideo bitRate= \"512\" frameRate= \"2\" quality= \"20\" /> </MediaRecorder> </Configuration> </DataCollector> </DataCollectors> </DataCollectionRunSettings> </RunSettings> Publish Test Results \u00b6 To publish test results (for later review and downloading) use Publish Build Artifacts task. Execution results are copied to $(Agent.TempDirectory)\\TestResults . Classic UI YAML steps : - task : PublishBuildArtifacts@1 displayName : 'Publish Artifact: TestResults' inputs : PathtoPublish : '$(Agent.TempDirectory)\\TestResults' ArtifactName : TestResults Pipeline Example \u00b6 As a result of pipeline configuration you may end up with something like this: Classic UI Self-hosted Windows Agents \u00b6 Azure DevOps can run tests in a hosted environment as well. If you plan to run tests inside your computer network download and connect Self-hosted Windows Agent . Logs and Reports \u00b6 After every execution of the Visual Studio Test task you will get logs and reports. Log Summary You can also see an individual report of a test (with attachments). Attachments Attachments include reports in Test Anything Protocol (TAP) and Rapise (TRP) formats, output and error logs and video recording (if enabled in .runsettings). Run Tests with VSTest.Console.exe \u00b6 It is also possible to run Rapise tests on a VM that has VSTest.Console.exe installed. Setup Microsoft.TestPlatform on a VM \u00b6 Let's assume that the working folder is C:\\Tools . Download and install NuGet . Install Microsoft.TestPlatform with a command nuget install Microsoft.TestPlatform Find VSTest.Console.exe in C:\\Tools\\Microsoft.TestPlatform.16.7.1\\tools\\net451\\Common7\\IDE\\Extensions\\TestPlatform . Add this folder to the PATH environment variable. Install Rapise.TestAdapter nuget install Rapise.TestAdapter You may now create a .cmd file and put it near Rapise tests. E.g. vstest.console.exe /TestAdapterPath:C:\\Tools\\Rapise.TestAdapter.1.0.11\\lib\\net472 /Settings:local.runsettings /TestCaseFilter:FullyQualifiedName~LIS *\\*.sstest Parallel Execution \u00b6 Note If you are using SpiraTest you may be interested in another way of parallel execution. Two levels of parallelism are possible. They may be used independently and combined together as well. Run Tests in Parallel \u00b6 Visual Studio Test Platform can run tests in parallel. Users of vstest.console.exe will recognize this as the /Parallel switch . It does so by launching a test host process on each available core, and handing it tests to execute. Here is how to set this switch in an Azure Pipeline (Visual Studio Test task). Classic UI YAML steps : - task : VSTest@2 displayName : 'VsTest - testAssemblies' inputs : testAssemblyVer2 : '*\\*.sstest' overrideTestrunParameters : '-g_browserLibrary \"$(RapiseBrowserProfile)\"' pathtoCustomTestAdapters : '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472' runInParallel : true platform : '$(BuildPlatform)' configuration : '$(BuildConfiguration)' This way of parallel execution is good for running API tests and Web tests (provided that Selenium profiles are used) Multi-Configuration Testing \u00b6 The Visual Studio Test task supports running tests in parallel across multiple agents (or machines). To run multiple jobs using multi-configuration option, you identify variables named multipliers, and specify a list of values for each multiplier. A separate job is run for each value combination. Define one or more variables on the Variables tab of the pipeline or in a variable group. Each variable, known in this context as a multiplier variable, must be defined as a comma-delimited list of the values you want to pass individually to the agents. Let's assume we want to run same set of tests on different versions of browsers. Here is the example. Multiplier Configuration Run Tests on Azure and Report to Spira \u00b6 If you plan to use Azure VMs to run tests and want to see the results in Spira check out RapiseLauncher extension for Azure DevOps. See Also \u00b6 Demo of Azure DevOps Integration (video) Azure DevOps Rapise.TestAdapter on GitHub Rapise.TestAdapter NuGet package Run tests in parallel using the Visual Studio Test task Multi-configuration testing RapiseLauncher extension for Azure DevOps.","title":"Azure DevOps Integration"},{"location":"Guide/vstest/#azure-devops-integration-v3","text":"This section describes how to execute Rapise tests in Azure DevOps pipelines or locally with Microsoft.TestPlatform . If you are using SpiraTeam , you should check the section about using RapiseLauncher extension for Azure DevOps.","title":"Azure DevOps Integration v3"},{"location":"Guide/vstest/#azure-devops","text":"We assume that Rapise tests are stored in a Git repository and Azure DevOps pipeline is connected to it. You may run Rapise tests both on self-hosted Windows Agents and Microsoft-hosted Windows Agents .","title":"Azure DevOps"},{"location":"Guide/vstest/#rapise-test-adapter-task","text":"To run Rapise tests with a Visual Studio Test task you need to install Rapise and Rapise Test Adapter for VSTest. The best way to do it is to use Rapise Test Adapter Extension from Azure Marketplace. After this extension is installed add the Rapise Test Adapter task yo your pipeline. In the task settings you may choose what versions of Rapise and Rapise Test Adapter to install. Proceed to the next step .","title":"Rapise Test Adapter Task"},{"location":"Guide/vstest/#rapise-installation-task","text":"Important Skip this section if you are using Rapise Test Adapter Task In order to run Rapise tests on a Microsoft-hosted Windows Agent you need to configure Rapise Installation task. If you are running on a self-hosted Windows Agent you may install Rapise manually once and use it in every pipeline run. Download and place this PowerShell script to your Git repository: RapiseInstall.ps1 This script downloads and installs Rapise. It also installs Rapise extension into Chrome browser. In your pipeline add a PowerShell task to execute this script. Pass Rapise version to install as a parameter. Classic UI YAML steps : - task : PowerShell@2 displayName : 'Install Rapise' inputs : targetType : filePath filePath : ./RapiseInstall.ps1 arguments : '-RapiseVersion \"6.5.20.21\"'","title":"Rapise Installation Task"},{"location":"Guide/vstest/#rapisetestadapter","text":"Important Skip this section if you are using Rapise Test Adapter Task To run Rapise tests with a Visual Studio Test task install Rapise.TestAdapter NuGet package .","title":"Rapise.TestAdapter"},{"location":"Guide/vstest/#nuget-tool-installer","text":"First you need to install NuGet itself. Add NuGet tool installer task. Classic UI YAML steps : - task : NuGetToolInstaller@0 displayName : 'Use NuGet' inputs : versionSpec : 4.4.1","title":"NuGet Tool Installer"},{"location":"Guide/vstest/#rapisetestadapter-nuget-package","text":"Then add NuGet task. Set command to custom and specify the command line: install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion) Classic UI YAML steps : - task : NuGetCommand@2 displayName : 'NuGet Install Rapise.TestAdapter' inputs : command : custom arguments : 'install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion)' In the pipeline settings set RapiseTestAdapterVersion variable to the Rapise.TestAdapter version you want to install (e.g. 1.0.11). The task will install Rapise.TestAdapter into $(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472","title":"Rapise.TestAdapter NuGet Package"},{"location":"Guide/vstest/#visual-studio-test-platform-installer-task","text":"If you plan to run tests on a Self-hosted Windows Agent that does not have Visual Studio installed you need to add Visual Studio Test Platform Installer task. Classic UI YAML steps : - task : VisualStudioTestPlatformInstaller@1 displayName : 'Visual Studio Test Platform Installer' inputs : versionSelector : latestStable","title":"Visual Studio Test Platform Installer Task"},{"location":"Guide/vstest/#visual-studio-test-task","text":"To run tests you need Visual Studio Test task. Classic UI YAML steps : - task : VSTest@2 displayName : 'VsTest - Run Rapise Tests' inputs : testAssemblyVer2 : | $(Build.Repository.LocalPath)\\Tests\\*.sstest $(Build.Repository.LocalPath)\\Tests\\*\\*.sstest runSettingsFile : '$(System.DefaultWorkingDirectory)\\Pipeline\\azure.runsettings' overrideTestrunParameters : '-g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile)' pathtoCustomTestAdapters : '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472' platform : '$(BuildPlatform)' configuration : '$(BuildConfiguration)' Make sure that path to custom test set adapters is set to $(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472 Specify patterns to search for *.sstest files in the test files section ( testAssemblyVer2 in YAML). If you added Visual Studio Test Platform Installer task on the previous step do not forget to set Test platform version to Installed by Tools Installer ( vsTestVersion: toolsInstaller in YAML). Tip Rapise.TestAdapter also supports filtering, parameters and .runsettings files (specified via Visual Studio Test task options).","title":"Visual Studio Test Task"},{"location":"Guide/vstest/#test-filter-criteria","text":"Rapise.TestAdapter supports filter criteria based on FullyQualifiedName test property (equals to *.sstest file name). To specify a filter set testFiltercriteria in YAML or Test filter criteria in the Classic UI task editor. Example: FullyQualifiedName~LIS","title":"Test Filter Criteria"},{"location":"Guide/vstest/#parameters","text":"Parameters can be set via .runsettings file, overrideTestrunParameters YAML option or Override test run parameters field in the Classic UI task editor. Note Parameter names must be prefixed with g_ . Example: -g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile) Note $(name) - references a pipeline variable","title":"Parameters"},{"location":"Guide/vstest/#runsettings","text":".runsettings file is used to pass parameters and to enable video recorder . Example: <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Parameters used by tests at runtime --> <TestRunParameters> <Parameter name= \"g_browserLibrary\" value= \"Chrome\" /> </TestRunParameters> <DataCollectionRunSettings> <DataCollectors> <DataCollector uri= \"datacollector://microsoft/VideoRecorder/1.0\" assemblyQualifiedName= \"Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder.VideoRecorderDataCollector, Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" friendlyName= \"video\" enabled= \"True\" > <Configuration> <MediaRecorder sendRecordedMediaForPassedTestCase= \"true\" xmlns= \"\" > <ScreenCaptureVideo bitRate= \"512\" frameRate= \"2\" quality= \"20\" /> </MediaRecorder> </Configuration> </DataCollector> </DataCollectors> </DataCollectionRunSettings> </RunSettings>","title":".runsettings"},{"location":"Guide/vstest/#publish-test-results","text":"To publish test results (for later review and downloading) use Publish Build Artifacts task. Execution results are copied to $(Agent.TempDirectory)\\TestResults . Classic UI YAML steps : - task : PublishBuildArtifacts@1 displayName : 'Publish Artifact: TestResults' inputs : PathtoPublish : '$(Agent.TempDirectory)\\TestResults' ArtifactName : TestResults","title":"Publish Test Results"},{"location":"Guide/vstest/#pipeline-example","text":"As a result of pipeline configuration you may end up with something like this: Classic UI","title":"Pipeline Example"},{"location":"Guide/vstest/#self-hosted-windows-agents","text":"Azure DevOps can run tests in a hosted environment as well. If you plan to run tests inside your computer network download and connect Self-hosted Windows Agent .","title":"Self-hosted Windows Agents"},{"location":"Guide/vstest/#logs-and-reports","text":"After every execution of the Visual Studio Test task you will get logs and reports. Log Summary You can also see an individual report of a test (with attachments). Attachments Attachments include reports in Test Anything Protocol (TAP) and Rapise (TRP) formats, output and error logs and video recording (if enabled in .runsettings).","title":"Logs and Reports"},{"location":"Guide/vstest/#run-tests-with-vstestconsoleexe","text":"It is also possible to run Rapise tests on a VM that has VSTest.Console.exe installed.","title":"Run Tests with VSTest.Console.exe"},{"location":"Guide/vstest/#setup-microsofttestplatform-on-a-vm","text":"Let's assume that the working folder is C:\\Tools . Download and install NuGet . Install Microsoft.TestPlatform with a command nuget install Microsoft.TestPlatform Find VSTest.Console.exe in C:\\Tools\\Microsoft.TestPlatform.16.7.1\\tools\\net451\\Common7\\IDE\\Extensions\\TestPlatform . Add this folder to the PATH environment variable. Install Rapise.TestAdapter nuget install Rapise.TestAdapter You may now create a .cmd file and put it near Rapise tests. E.g. vstest.console.exe /TestAdapterPath:C:\\Tools\\Rapise.TestAdapter.1.0.11\\lib\\net472 /Settings:local.runsettings /TestCaseFilter:FullyQualifiedName~LIS *\\*.sstest","title":"Setup Microsoft.TestPlatform on a VM"},{"location":"Guide/vstest/#parallel-execution","text":"Note If you are using SpiraTest you may be interested in another way of parallel execution. Two levels of parallelism are possible. They may be used independently and combined together as well.","title":"Parallel Execution"},{"location":"Guide/vstest/#run-tests-in-parallel","text":"Visual Studio Test Platform can run tests in parallel. Users of vstest.console.exe will recognize this as the /Parallel switch . It does so by launching a test host process on each available core, and handing it tests to execute. Here is how to set this switch in an Azure Pipeline (Visual Studio Test task). Classic UI YAML steps : - task : VSTest@2 displayName : 'VsTest - testAssemblies' inputs : testAssemblyVer2 : '*\\*.sstest' overrideTestrunParameters : '-g_browserLibrary \"$(RapiseBrowserProfile)\"' pathtoCustomTestAdapters : '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472' runInParallel : true platform : '$(BuildPlatform)' configuration : '$(BuildConfiguration)' This way of parallel execution is good for running API tests and Web tests (provided that Selenium profiles are used)","title":"Run Tests in Parallel"},{"location":"Guide/vstest/#multi-configuration-testing","text":"The Visual Studio Test task supports running tests in parallel across multiple agents (or machines). To run multiple jobs using multi-configuration option, you identify variables named multipliers, and specify a list of values for each multiplier. A separate job is run for each value combination. Define one or more variables on the Variables tab of the pipeline or in a variable group. Each variable, known in this context as a multiplier variable, must be defined as a comma-delimited list of the values you want to pass individually to the agents. Let's assume we want to run same set of tests on different versions of browsers. Here is the example. Multiplier Configuration","title":"Multi-Configuration Testing"},{"location":"Guide/vstest/#run-tests-on-azure-and-report-to-spira","text":"If you plan to use Azure VMs to run tests and want to see the results in Spira check out RapiseLauncher extension for Azure DevOps.","title":"Run Tests on Azure and Report to Spira"},{"location":"Guide/vstest/#see-also","text":"Demo of Azure DevOps Integration (video) Azure DevOps Rapise.TestAdapter on GitHub Rapise.TestAdapter NuGet package Run tests in parallel using the Visual Studio Test task Multi-configuration testing RapiseLauncher extension for Azure DevOps.","title":"See Also"},{"location":"Guide/vstest_rl/","text":"RapiseLauncher Extension for Azure DevOps \u00b6 This section explains how to execute Rapise Spira Test Sets in Azure DevOps pipelines using the RapiseLauncher . Azure DevOps \u00b6 We assume that Rapise tests are stored in a SpiraTeams . Here we plan to configure a build pipeline for executing a SpiraTeam Test Set on a Microsoft-hosted agent. The benefit of the Microsoft-hosted agent is its configuration - it has latest version of web browsers, with relevant version of webdriver connectors. Everything is configured for the test run (updates and popups disabled, etc). RapiseLauncher may be used to execute Desktop UI tests, API tests, mobile tests and web tests. For web tests it is possible to use Rapise own Chrome extension, IE 11 or any selenium webdriver -based target. The same extension may be used for launching tests in self-hosted Windows agents. Although in minimal configuration just RapiseLauncher step is enough, the pipeline definition may also include build, deploy or download of the AUT before the test execution. The results of test execution are then stored into the SpiraTeam. Once configured and executed the extension does the following: 1. Automatically download and install the RapiseLauncher . 2. Downloads test files from the SpiraTeam. 3. Execute the test set. 4. Publish execution results, videos and logs back to SpiraTeam, so they are attached to the test run. The whole configuration process contains the following steps: 1. Add Rapise extension to the organization using Visual Studio Marketplace. 2. Configure SpiraTeam connection Point for the project. 3. Define a pipeline. 4. Add RapiseLauncher task to the pipeline. 5. Configure a pipeline definition for executing tests via RapiseLauncher . Step 1: Install Marketplace Extension for the Organization \u00b6 In Azure DevOps go to Organization settings : Choose Extensions and then Browse Marketplace : Type `Rapise', choose 'RapiseLauncher' extension: Get it: And install it: Finally it shows up in the list of installed extensions: Step 2: Connect Project to SpiraTeam \u00b6 Now define a service connection. It is a connection details for SpiraTeam used later to gather test set information. So we need ot open Project settings : Go to Service Connections : And Create service connection : Choose Spira service connection connection type (this type is added by the installed marketplace extension) and press Next : Now define connection details: SpiraTeam Server Url , Username and API Key : Then Verify it and give a Service connection name : Finally, the connection shows up in the list: Step 3: Define a Pipeline \u00b6 Defining a pipeline means telling the DevOps where to store the pipeline definition, where get the tests, what VM to use for execution and what parameters to pass. Define a Repository \u00b6 In the case that you don't have a repository, just define one for the given project: If you have a repo, then you may skip this step and use your repository connection on the next step. Create a Pipeline Definition \u00b6 Go to your project, expand Pipelines and choose Create Pipeline : Select GIT repository type And repository itself: Here we are creating new pipeline. But you may use existing one and just add test execution task to it. RapiseLauncher requires Windows host. You may use Microsoft Hosted agent , or set an agent on your own VM or physical Windows machine. Step 4: Add RapiseLauncher Task \u00b6 Then you may use Assistant to configure the task. And filter by word 'Rapise'. We need a task Run Rapise Test Set : Now we need to fill task execution parameters as follows: SpiraTeam contains information for finding a test set Spira service/server end point - choose spira connection defined earlier from the dropdown. Spira Product Spira Test Set Automation Host Execution Options Rapise Needs to Be Installed - if your VM is spawned for each test execution (i.e. you use Microsoft-hosted Agent ), then the task may install it. You don't need to install Rapise if you use own agent and install in advance. Also you may have more than one Run Rapise Test Set tasks in your pipeline. In this case only the first one may need to install Rapise. Rapise Version - we recommend to specify the same version that you used to create tests. I.e. Advanced Execution Options Set Screen Resolution specify one of standard screen resolutions for test execution. It should be one of standard values (i.e. 1024x768, 1920x1080, etc., supported by the current execution host). Bigger resolution - more details on screenshots and video and more space is consumed by the recordings. Width Height Record Video of Execution a ScreenCapture.wmv will be generated and saved as a Test Run attachment . Video Recording Options set of options for Microsoft.TestPlatform video recorder. Publish RapiseLauncher Log when enabled, RapiseLauncher log is attached to pipeline build log. GITROOT is only needed when your tests are stored in GIT and you check them out earlier in the pipeline or even before launching the pipeline. Finally press Add . The task should show up in the steps: section of the yaml description: You may then tweak its configuration directly using the text editor. trigger : - main pool : vmImage : windows-latest steps : - task : RapiseLauncherTask@1 inputs : spiraConnection : 'SpiraConnection' spiraProjectId : '93' spiraTestSetId : '145' spiraAutomationHost : 'AZURE' installRapise : true rapiseVersion : '6.7.22.25' setScreenSize : true screenWidth : 1920 screenHeight : 1080 recordVideo : true And then execute. Step 5: Pipeline Execution Results \u00b6 You may see history of pipeline job runs and test execution logs. From the pipeline runs history you may pick up any run: And select the Job: The job run contains information of each pipeline step. RapiseLauncher is a step doing Rapise installation and test set launch. Also you may find testing reports and videos in the SpiraTeam : Log files and videos are in the Test Run Attachments tab: See Also \u00b6 Azure DevOps RapiseLauncher Extension in VisualStudio Marketplace Rapise and Spira Integration Rapise and Git Integration Rapise Test Adapter Task for Azure DevOps.","title":"RapiseLauncher Extension for Azure DevOps"},{"location":"Guide/vstest_rl/#rapiselauncher-extension-for-azure-devops","text":"This section explains how to execute Rapise Spira Test Sets in Azure DevOps pipelines using the RapiseLauncher .","title":"RapiseLauncher Extension for Azure DevOps"},{"location":"Guide/vstest_rl/#azure-devops","text":"We assume that Rapise tests are stored in a SpiraTeams . Here we plan to configure a build pipeline for executing a SpiraTeam Test Set on a Microsoft-hosted agent. The benefit of the Microsoft-hosted agent is its configuration - it has latest version of web browsers, with relevant version of webdriver connectors. Everything is configured for the test run (updates and popups disabled, etc). RapiseLauncher may be used to execute Desktop UI tests, API tests, mobile tests and web tests. For web tests it is possible to use Rapise own Chrome extension, IE 11 or any selenium webdriver -based target. The same extension may be used for launching tests in self-hosted Windows agents. Although in minimal configuration just RapiseLauncher step is enough, the pipeline definition may also include build, deploy or download of the AUT before the test execution. The results of test execution are then stored into the SpiraTeam. Once configured and executed the extension does the following: 1. Automatically download and install the RapiseLauncher . 2. Downloads test files from the SpiraTeam. 3. Execute the test set. 4. Publish execution results, videos and logs back to SpiraTeam, so they are attached to the test run. The whole configuration process contains the following steps: 1. Add Rapise extension to the organization using Visual Studio Marketplace. 2. Configure SpiraTeam connection Point for the project. 3. Define a pipeline. 4. Add RapiseLauncher task to the pipeline. 5. Configure a pipeline definition for executing tests via RapiseLauncher .","title":"Azure DevOps"},{"location":"Guide/vstest_rl/#step-1-install-marketplace-extension-for-the-organization","text":"In Azure DevOps go to Organization settings : Choose Extensions and then Browse Marketplace : Type `Rapise', choose 'RapiseLauncher' extension: Get it: And install it: Finally it shows up in the list of installed extensions:","title":"Step 1: Install Marketplace Extension for the Organization"},{"location":"Guide/vstest_rl/#step-2-connect-project-to-spirateam","text":"Now define a service connection. It is a connection details for SpiraTeam used later to gather test set information. So we need ot open Project settings : Go to Service Connections : And Create service connection : Choose Spira service connection connection type (this type is added by the installed marketplace extension) and press Next : Now define connection details: SpiraTeam Server Url , Username and API Key : Then Verify it and give a Service connection name : Finally, the connection shows up in the list:","title":"Step 2: Connect Project to SpiraTeam"},{"location":"Guide/vstest_rl/#step-3-define-a-pipeline","text":"Defining a pipeline means telling the DevOps where to store the pipeline definition, where get the tests, what VM to use for execution and what parameters to pass.","title":"Step 3: Define a Pipeline"},{"location":"Guide/vstest_rl/#define-a-repository","text":"In the case that you don't have a repository, just define one for the given project: If you have a repo, then you may skip this step and use your repository connection on the next step.","title":"Define a Repository"},{"location":"Guide/vstest_rl/#create-a-pipeline-definition","text":"Go to your project, expand Pipelines and choose Create Pipeline : Select GIT repository type And repository itself: Here we are creating new pipeline. But you may use existing one and just add test execution task to it. RapiseLauncher requires Windows host. You may use Microsoft Hosted agent , or set an agent on your own VM or physical Windows machine.","title":"Create a Pipeline Definition"},{"location":"Guide/vstest_rl/#step-4-add-rapiselauncher-task","text":"Then you may use Assistant to configure the task. And filter by word 'Rapise'. We need a task Run Rapise Test Set : Now we need to fill task execution parameters as follows: SpiraTeam contains information for finding a test set Spira service/server end point - choose spira connection defined earlier from the dropdown. Spira Product Spira Test Set Automation Host Execution Options Rapise Needs to Be Installed - if your VM is spawned for each test execution (i.e. you use Microsoft-hosted Agent ), then the task may install it. You don't need to install Rapise if you use own agent and install in advance. Also you may have more than one Run Rapise Test Set tasks in your pipeline. In this case only the first one may need to install Rapise. Rapise Version - we recommend to specify the same version that you used to create tests. I.e. Advanced Execution Options Set Screen Resolution specify one of standard screen resolutions for test execution. It should be one of standard values (i.e. 1024x768, 1920x1080, etc., supported by the current execution host). Bigger resolution - more details on screenshots and video and more space is consumed by the recordings. Width Height Record Video of Execution a ScreenCapture.wmv will be generated and saved as a Test Run attachment . Video Recording Options set of options for Microsoft.TestPlatform video recorder. Publish RapiseLauncher Log when enabled, RapiseLauncher log is attached to pipeline build log. GITROOT is only needed when your tests are stored in GIT and you check them out earlier in the pipeline or even before launching the pipeline. Finally press Add . The task should show up in the steps: section of the yaml description: You may then tweak its configuration directly using the text editor. trigger : - main pool : vmImage : windows-latest steps : - task : RapiseLauncherTask@1 inputs : spiraConnection : 'SpiraConnection' spiraProjectId : '93' spiraTestSetId : '145' spiraAutomationHost : 'AZURE' installRapise : true rapiseVersion : '6.7.22.25' setScreenSize : true screenWidth : 1920 screenHeight : 1080 recordVideo : true And then execute.","title":"Step 4: Add RapiseLauncher Task"},{"location":"Guide/vstest_rl/#step-5-pipeline-execution-results","text":"You may see history of pipeline job runs and test execution logs. From the pipeline runs history you may pick up any run: And select the Job: The job run contains information of each pipeline step. RapiseLauncher is a step doing Rapise installation and test set launch. Also you may find testing reports and videos in the SpiraTeam : Log files and videos are in the Test Run Attachments tab:","title":"Step 5: Pipeline Execution Results"},{"location":"Guide/vstest_rl/#see-also","text":"Azure DevOps RapiseLauncher Extension in VisualStudio Marketplace Rapise and Spira Integration Rapise and Git Integration Rapise Test Adapter Task for Azure DevOps.","title":"See Also"},{"location":"Guide/warning_view/","text":"Warning View \u00b6 Purpose \u00b6 To display syntax error messages as you edit javascript files. How to Open \u00b6 The Warning View is hidden in the Default Layout . You may then show it using View > Show > Output . The Warning View opens automatically when you work with source editor and there is a syntax error. It also shows up in RVL if you have some incomplete or invalid statement. Warning Message \u00b6 Double click on an error message to go to the corresponding source line or RVL row. Widgets \u00b6 The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output . See Also \u00b6 Syntax Checking","title":"Warning View"},{"location":"Guide/warning_view/#warning-view","text":"","title":"Warning View"},{"location":"Guide/warning_view/#purpose","text":"To display syntax error messages as you edit javascript files.","title":"Purpose"},{"location":"Guide/warning_view/#how-to-open","text":"The Warning View is hidden in the Default Layout . You may then show it using View > Show > Output . The Warning View opens automatically when you work with source editor and there is a syntax error. It also shows up in RVL if you have some incomplete or invalid statement.","title":"How to Open"},{"location":"Guide/warning_view/#warning-message","text":"Double click on an error message to go to the corresponding source line or RVL row.","title":"Warning Message"},{"location":"Guide/warning_view/#widgets","text":"The text box is a search box. The icons from left to right are Find Next Entry , Copy Selected , Clear All Text . Right tool Hide used to collapse whole bottom panel. You may then show it using View > Show > Output .","title":"Widgets"},{"location":"Guide/warning_view/#see-also","text":"Syntax Checking","title":"See Also"},{"location":"Guide/watch_view/","text":"Watch View \u00b6 Purpose \u00b6 To input expressions and view their values as the script executes. How to Open \u00b6 Begin debugging a script. The Watch View will open automatically. Inputting an Expression \u00b6 Click the blank line: Input the expression you wish to investigate. Press Enter. See Also \u00b6 Internal Debugger","title":"Watch View"},{"location":"Guide/watch_view/#watch-view","text":"","title":"Watch View"},{"location":"Guide/watch_view/#purpose","text":"To input expressions and view their values as the script executes.","title":"Purpose"},{"location":"Guide/watch_view/#how-to-open","text":"Begin debugging a script. The Watch View will open automatically.","title":"How to Open"},{"location":"Guide/watch_view/#inputting-an-expression","text":"Click the blank line: Input the expression you wish to investigate. Press Enter.","title":"Inputting an Expression"},{"location":"Guide/watch_view/#see-also","text":"Internal Debugger","title":"See Also"},{"location":"Guide/web_app_profile/","text":"Web Application Profile \u00b6 Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for element styling. There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this topic you will learn how to define a profile for your web application. Note In some cases we refer to Web Application Profile as Web Recorder Configuration. These terms are synonyms. Purpose of WebAppProfile \u00b6 WebAppProfile serves as an instruction to Rapise on how to record XPath locators for elements in a given application. WebAppProfile addresses one of the challenges in web UI test automation: generation of resilient XPath locators during test recording. Adding WebAppProfile to a Test \u00b6 To create WebAppProfile.json file in your test navigate to Files tab, right click Scripts folder and choose Create... > WebAppProfile.json . The default profile looks like this: { record : { attributes : [ { name : \"id\" , notEmpty : true , exclude : \"\\\\d\" }, { name : \"title\" }, { name : \"name\" }, { name : \"style\" }, { name : \"type\" }, { name : \"value\" }, { name : \"placeholder\" }, { name : \"autocomplete\" }, { name : \"href\" }, { name : \"role\" } ], classes : [ /* { name: \"content\" } */ ], anchors : [ /* { xpath: \"//div[@class='content-wrapper']\" } */ ], clickable : { classes : [ /* \"sapMInputBaseIcon\" */ ] }, handlers : { elementName : function ( el ) { /* var label = __getAttribute(el, \"aria-label\"); if (label) { if (label.indexOf(\",\") > 0) { return label.split(\",\")[0]; } return label; } */ return null ; }, skipAttribute : function ( node , attr , value ) { /* var tag = node.tagName.toLowerCase(); if (attr == \"title\") { if (tag == \"textarea\" || tag == \"select\" || tag == \"input\") { return true; } } else if (attr == \"text\") { if (__hasAttribute(node, \"data-id\") || __hasAttribute(node, \"id\")) { return true; } } */ return false ; }, clickable : function ( el ) { /* var tag = el.tagName.toLowerCase(); if (tag == \"p\" || __hasAttribute(el, \"title\")) { return true; } */ return false ; } } } } WebAppProfile Format \u00b6 record.attributes array contains definition of attributes to record. name is the only required property for an attribute. It is case insensitive. notEmpty is false by default. If set to true then the attribute will be recorded only if it has non empty value. exclude is a regular expression. If attribute value matches the regexp then the attribute is not recorded. Note: Rapise 6.4+ supports text attribute that is mapped to inner text of leaf elements. record.classes array lists class names that are meaningful for element identification and should be recorded. name is the only required property for a class. It is case sensitive. record.anchors array lists anchors. xpath is the only required property for an anchor. record.clickable.classes is an array of classes that indicate clickable elements. By default Rapise does not record clicks on DIVs, SPANs and some other elements. By listing classes of elements that can be clicked you may change the default behavior. Requires Rapise 6.4+ record.handlers is an objects that defines functions injected into the recorder. Requires Rapise 6.4+ elementName(el) builds a name for a given element. This name is used as object ID in the object repository. If this function returns null then default algorithm is used to build the name. skipAttribute(node, attr, value) allows to skip recording of some attributes in specific cases. The function must return true if an attribute should not be recorded. clickable(el) fine grained control over which element is considered clickable. When the function returns true the element is considered clickable, if false - then default algorithm (element is clickable or not) is used. Requires Rapise 6.5+. Anchors \u00b6 When XPath of an element is being recorded and the element belongs to the sub-tree of an anchor element (including the anchor element itself) then XPath of the element will start/or be replaced with XPath of the anchor element. Example 1 \u00b6 Let's look at the example. Here we have a table built with DIVs and ARIA roles. < div id = \"Customers\" role = \"grid\" > < div role = \"row\" > < span role = \"cell\" title = \"Contoso\" ></ span > ... </ div > ... </ div > If we record just using title attribute and it's value is unique for the page we'll end up with a locator //span[@title='Contoso'] However if we define an anchor //div[@id='Customers'] we'll get the locator as //div[@id='Customers']//span[@title='Contoso'] The locator is now bound to the table. If another element with Contoso title appears somewhere on the page (outside the table) we'll find the correct element. Example 2 \u00b6 Here is more complex and real-life example. In Microsoft Dynamics 365 Business Central application when you navigate through the forms they are loaded into the DOM tree inside DIV elements with spa-view class. When you move from one form to another - old forms are not unloaded and continue to stay in the DOM tree. They just have lower z-index then currently active form. It means that when Rapise searches for an element during test playback it should work with the topmost spa-view . To achieve this goal we define an anchor in WebAppProfile for the application //div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()] Here is an example of automatically recorded XPath //div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()]//span[@aria-label='Customers'] The anchor prevents us from finding elements that are not visible to user and ensure that if we find an element it belongs to an active form. Example 3 \u00b6 Requires Rapise 6.4+. An anchor may be used to rewrite XPath for an element completely. It means if an anchor points to an element then it will be used instead of XPath expression generated using attributes. Let's assume we have a page < table > < tr > < td > < span > UserName </ span > </ td > < td > < input type = \"text\" id = \"obj-1267\" title = \"Enter email or user ID:\" /> </ td > </ tr > </ table > If we have an anchor defined like { xpath : \"//input[../../td/span[text()='UserName']]\" } and we click on the field then instead of something like //input[@title='Enter email or user ID:'] the recorder will use the anchor. XPath Minimization \u00b6 Rapise always tries to build the minimal XPath locator possible with a given set of attributes, classes and anchors. Full XPath is not an option . Let's assume we have a page < div > < div > < span title = \"Account\" ></ span > ... </ div > ... </ div > and XPath //span[@title='Account'] finds a single node, then it is a good minimal locator for the element. Compare with full XPath /div[1]/div[1]/span[@title='Account'] that may easily become broken with page layout changes. See Also \u00b6 Web Recorder Configuration Intro (video) Web Recorder Configuration in Rapise (video) Web Testing Self-healing Web Locators","title":"Web Application Profile"},{"location":"Guide/web_app_profile/#web-application-profile","text":"Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for element styling. There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this topic you will learn how to define a profile for your web application. Note In some cases we refer to Web Application Profile as Web Recorder Configuration. These terms are synonyms.","title":"Web Application Profile"},{"location":"Guide/web_app_profile/#purpose-of-webappprofile","text":"WebAppProfile serves as an instruction to Rapise on how to record XPath locators for elements in a given application. WebAppProfile addresses one of the challenges in web UI test automation: generation of resilient XPath locators during test recording.","title":"Purpose of WebAppProfile"},{"location":"Guide/web_app_profile/#adding-webappprofile-to-a-test","text":"To create WebAppProfile.json file in your test navigate to Files tab, right click Scripts folder and choose Create... > WebAppProfile.json . The default profile looks like this: { record : { attributes : [ { name : \"id\" , notEmpty : true , exclude : \"\\\\d\" }, { name : \"title\" }, { name : \"name\" }, { name : \"style\" }, { name : \"type\" }, { name : \"value\" }, { name : \"placeholder\" }, { name : \"autocomplete\" }, { name : \"href\" }, { name : \"role\" } ], classes : [ /* { name: \"content\" } */ ], anchors : [ /* { xpath: \"//div[@class='content-wrapper']\" } */ ], clickable : { classes : [ /* \"sapMInputBaseIcon\" */ ] }, handlers : { elementName : function ( el ) { /* var label = __getAttribute(el, \"aria-label\"); if (label) { if (label.indexOf(\",\") > 0) { return label.split(\",\")[0]; } return label; } */ return null ; }, skipAttribute : function ( node , attr , value ) { /* var tag = node.tagName.toLowerCase(); if (attr == \"title\") { if (tag == \"textarea\" || tag == \"select\" || tag == \"input\") { return true; } } else if (attr == \"text\") { if (__hasAttribute(node, \"data-id\") || __hasAttribute(node, \"id\")) { return true; } } */ return false ; }, clickable : function ( el ) { /* var tag = el.tagName.toLowerCase(); if (tag == \"p\" || __hasAttribute(el, \"title\")) { return true; } */ return false ; } } } }","title":"Adding WebAppProfile to a Test"},{"location":"Guide/web_app_profile/#webappprofile-format","text":"record.attributes array contains definition of attributes to record. name is the only required property for an attribute. It is case insensitive. notEmpty is false by default. If set to true then the attribute will be recorded only if it has non empty value. exclude is a regular expression. If attribute value matches the regexp then the attribute is not recorded. Note: Rapise 6.4+ supports text attribute that is mapped to inner text of leaf elements. record.classes array lists class names that are meaningful for element identification and should be recorded. name is the only required property for a class. It is case sensitive. record.anchors array lists anchors. xpath is the only required property for an anchor. record.clickable.classes is an array of classes that indicate clickable elements. By default Rapise does not record clicks on DIVs, SPANs and some other elements. By listing classes of elements that can be clicked you may change the default behavior. Requires Rapise 6.4+ record.handlers is an objects that defines functions injected into the recorder. Requires Rapise 6.4+ elementName(el) builds a name for a given element. This name is used as object ID in the object repository. If this function returns null then default algorithm is used to build the name. skipAttribute(node, attr, value) allows to skip recording of some attributes in specific cases. The function must return true if an attribute should not be recorded. clickable(el) fine grained control over which element is considered clickable. When the function returns true the element is considered clickable, if false - then default algorithm (element is clickable or not) is used. Requires Rapise 6.5+.","title":"WebAppProfile Format"},{"location":"Guide/web_app_profile/#anchors","text":"When XPath of an element is being recorded and the element belongs to the sub-tree of an anchor element (including the anchor element itself) then XPath of the element will start/or be replaced with XPath of the anchor element.","title":"Anchors"},{"location":"Guide/web_app_profile/#example-1","text":"Let's look at the example. Here we have a table built with DIVs and ARIA roles. < div id = \"Customers\" role = \"grid\" > < div role = \"row\" > < span role = \"cell\" title = \"Contoso\" ></ span > ... </ div > ... </ div > If we record just using title attribute and it's value is unique for the page we'll end up with a locator //span[@title='Contoso'] However if we define an anchor //div[@id='Customers'] we'll get the locator as //div[@id='Customers']//span[@title='Contoso'] The locator is now bound to the table. If another element with Contoso title appears somewhere on the page (outside the table) we'll find the correct element.","title":"Example 1"},{"location":"Guide/web_app_profile/#example-2","text":"Here is more complex and real-life example. In Microsoft Dynamics 365 Business Central application when you navigate through the forms they are loaded into the DOM tree inside DIV elements with spa-view class. When you move from one form to another - old forms are not unloaded and continue to stay in the DOM tree. They just have lower z-index then currently active form. It means that when Rapise searches for an element during test playback it should work with the topmost spa-view . To achieve this goal we define an anchor in WebAppProfile for the application //div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()] Here is an example of automatically recorded XPath //div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()]//span[@aria-label='Customers'] The anchor prevents us from finding elements that are not visible to user and ensure that if we find an element it belongs to an active form.","title":"Example 2"},{"location":"Guide/web_app_profile/#example-3","text":"Requires Rapise 6.4+. An anchor may be used to rewrite XPath for an element completely. It means if an anchor points to an element then it will be used instead of XPath expression generated using attributes. Let's assume we have a page < table > < tr > < td > < span > UserName </ span > </ td > < td > < input type = \"text\" id = \"obj-1267\" title = \"Enter email or user ID:\" /> </ td > </ tr > </ table > If we have an anchor defined like { xpath : \"//input[../../td/span[text()='UserName']]\" } and we click on the field then instead of something like //input[@title='Enter email or user ID:'] the recorder will use the anchor.","title":"Example 3"},{"location":"Guide/web_app_profile/#xpath-minimization","text":"Rapise always tries to build the minimal XPath locator possible with a given set of attributes, classes and anchors. Full XPath is not an option . Let's assume we have a page < div > < div > < span title = \"Account\" ></ span > ... </ div > ... </ div > and XPath //span[@title='Account'] finds a single node, then it is a good minimal locator for the element. Compare with full XPath /div[1]/div[1]/span[@title='Account'] that may easily become broken with page layout changes.","title":"XPath Minimization"},{"location":"Guide/web_app_profile/#see-also","text":"Web Recorder Configuration Intro (video) Web Recorder Configuration in Rapise (video) Web Testing Self-healing Web Locators","title":"See Also"},{"location":"Guide/web_self_healing/","text":"Self-healing Web Locators \u00b6 Since version 6.2 Rapise gets self-healing Web element locators. It means significant improvement in two areas of automated testing of Web applications: Better recording experience. Modern applications more and more use dynamically generated IDs and Class Names that change on every page reload. It leads to necessity to fix locators after recording. With self-healing locators Rapise is able to guess and find required elements without the need for manual locator tweaking. More efficient maintenance of tests. Developers modify applications and break Web element locators from time to time. Nobody can predict how a locator may change. If locator is broken Rapise tries to find most matching element and generate new locator for it. How to Enable \u00b6 To enable self-healing features set g_aiEnable flag in TestPrepare block of your test. function TestPrepare () { g_aiEnable = true ; } When this flag is set Rapise generates full-path locator for each recorded element. The full-path locator includes information about all attributes of an element and attributes of its ancestors in the DOM tree. How it Works \u00b6 When you run a test and an element is found with traditional XPath locator then full-path locator is not used. There is nothing to repair. But if XPath generated for an element during recording or manually created by a tester is not valid then full-path locator is used to find the most suitable element on the page. When full-path locator is used you get the following healing notification in the report: The healing notification indicates that an element was found with some confidence, it is a number from zero to 100%. In the notification details you can find the difference between recorded and matched elements. You can also see the images of the recorded and found elements. This information is a clue to either accept found element or manually fix the test. The format of the element locator difference report is: Level: N, attribute: A, expected: V1, actual: V2 If N equals 0 it means the element node in the DOM tree. 1 means immediate ancestor of the element. Level increases until DOM tree root is reached. A is attribute name. V1 - expected/recorded attribute value. V2 - actual value of this attribute captured during playback of the test. First image in the details of the difference report is expected/recorded snapshot of the element. Second image is what was shot during playback. Usage Scenarios \u00b6 Take no Action \u00b6 This is the simplest yet powerful approach. If a test passes and all elements are found with pretty good confidence then there may be no reason to fix the test. Use Match Details to Build WebAppProfile \u00b6 When you analyze differences between expected and found elements you may get ideas to start using or improve your WebAppProfile . Use Object Manager \u00b6 During playback Rapise takes snapshots of elements found by full-path locator. So after playback you can use Object Manager to replace old locators with new ones. If there are healing notifications after test playback Rapise automatically shows the prompt to open Object Manager. You can turn this prompt off, see the next section. Configuration \u00b6 Threshold \u00b6 By default match of an element is accepted when confidence is not less than 96%. You can change the threshold in TestPrepare block by setting g_aiFplConfidence : function TestPrepare () { g_aiEnable = true ; g_aiFplConfidence = 0.98 ; } Object Manager Prompt \u00b6 To suppress prompt to use Object Manager when test playback contains healing notifications set g_aiMergePromptEnable to false : function TestPrepare () { g_aiEnable = true ; g_aiMergePromptEnable = false ; } Screenshots \u00b6 To disable automatic capturing of recording screenshots g_aiCaptureRecordingScreenshots to false . g_aiCaptureRecordingScreenshots = false ; Playback \u00b6 During playback when an element can not be found using XPath locator - Rapise starts applying the self-healing locator. The number of initial attempts before switching on self-healing is configurable (since Rapise 6.5). Usage of self-healing at the very first attempts to find an element is not recommended since a page may not be fully loaded and wrong element may be chosen by the algorithm. First self-healing attempt is set by the variable. 21 is the default value. You may change it to any number that is lower than g_objectLookupAttempts . g_aiFirstAttemptNumber = 21 ; See Also \u00b6 How to Benefit From Self-Healing Locators (video) Web Testing Web Application Profile (aka Web Recorder Configuration)","title":"Self-healing Locators"},{"location":"Guide/web_self_healing/#self-healing-web-locators","text":"Since version 6.2 Rapise gets self-healing Web element locators. It means significant improvement in two areas of automated testing of Web applications: Better recording experience. Modern applications more and more use dynamically generated IDs and Class Names that change on every page reload. It leads to necessity to fix locators after recording. With self-healing locators Rapise is able to guess and find required elements without the need for manual locator tweaking. More efficient maintenance of tests. Developers modify applications and break Web element locators from time to time. Nobody can predict how a locator may change. If locator is broken Rapise tries to find most matching element and generate new locator for it.","title":"Self-healing Web Locators"},{"location":"Guide/web_self_healing/#how-to-enable","text":"To enable self-healing features set g_aiEnable flag in TestPrepare block of your test. function TestPrepare () { g_aiEnable = true ; } When this flag is set Rapise generates full-path locator for each recorded element. The full-path locator includes information about all attributes of an element and attributes of its ancestors in the DOM tree.","title":"How to Enable"},{"location":"Guide/web_self_healing/#how-it-works","text":"When you run a test and an element is found with traditional XPath locator then full-path locator is not used. There is nothing to repair. But if XPath generated for an element during recording or manually created by a tester is not valid then full-path locator is used to find the most suitable element on the page. When full-path locator is used you get the following healing notification in the report: The healing notification indicates that an element was found with some confidence, it is a number from zero to 100%. In the notification details you can find the difference between recorded and matched elements. You can also see the images of the recorded and found elements. This information is a clue to either accept found element or manually fix the test. The format of the element locator difference report is: Level: N, attribute: A, expected: V1, actual: V2 If N equals 0 it means the element node in the DOM tree. 1 means immediate ancestor of the element. Level increases until DOM tree root is reached. A is attribute name. V1 - expected/recorded attribute value. V2 - actual value of this attribute captured during playback of the test. First image in the details of the difference report is expected/recorded snapshot of the element. Second image is what was shot during playback.","title":"How it Works"},{"location":"Guide/web_self_healing/#usage-scenarios","text":"","title":"Usage Scenarios"},{"location":"Guide/web_self_healing/#take-no-action","text":"This is the simplest yet powerful approach. If a test passes and all elements are found with pretty good confidence then there may be no reason to fix the test.","title":"Take no Action"},{"location":"Guide/web_self_healing/#use-match-details-to-build-webappprofile","text":"When you analyze differences between expected and found elements you may get ideas to start using or improve your WebAppProfile .","title":"Use Match Details to Build WebAppProfile"},{"location":"Guide/web_self_healing/#use-object-manager","text":"During playback Rapise takes snapshots of elements found by full-path locator. So after playback you can use Object Manager to replace old locators with new ones. If there are healing notifications after test playback Rapise automatically shows the prompt to open Object Manager. You can turn this prompt off, see the next section.","title":"Use Object Manager"},{"location":"Guide/web_self_healing/#configuration","text":"","title":"Configuration"},{"location":"Guide/web_self_healing/#threshold","text":"By default match of an element is accepted when confidence is not less than 96%. You can change the threshold in TestPrepare block by setting g_aiFplConfidence : function TestPrepare () { g_aiEnable = true ; g_aiFplConfidence = 0.98 ; }","title":"Threshold"},{"location":"Guide/web_self_healing/#object-manager-prompt","text":"To suppress prompt to use Object Manager when test playback contains healing notifications set g_aiMergePromptEnable to false : function TestPrepare () { g_aiEnable = true ; g_aiMergePromptEnable = false ; }","title":"Object Manager Prompt"},{"location":"Guide/web_self_healing/#screenshots","text":"To disable automatic capturing of recording screenshots g_aiCaptureRecordingScreenshots to false . g_aiCaptureRecordingScreenshots = false ;","title":"Screenshots"},{"location":"Guide/web_self_healing/#playback","text":"During playback when an element can not be found using XPath locator - Rapise starts applying the self-healing locator. The number of initial attempts before switching on self-healing is configurable (since Rapise 6.5). Usage of self-healing at the very first attempts to find an element is not recommended since a page may not be fully loaded and wrong element may be chosen by the algorithm. First self-healing attempt is set by the variable. 21 is the default value. You may change it to any number that is lower than g_objectLookupAttempts . g_aiFirstAttemptNumber = 21 ;","title":"Playback"},{"location":"Guide/web_self_healing/#see-also","text":"How to Benefit From Self-Healing Locators (video) Web Testing Web Application Profile (aka Web Recorder Configuration)","title":"See Also"},{"location":"Guide/web_service_testing/","text":"Web Service Testing \u00b6 What is a Web Service? \u00b6 A Web service is a unit of managed code that can be remotely invoked using HTTP, that is, it can be activated using HTTP requests. So, Web Services allows you to expose the functionality of your existing code over the network. Once it is exposed on the network, other application can use the functionality of your program. Web Services allows different applications to talk to each other and share data and services among themselves. Other applications can also use the services of the web services. For example VB or .NET application can talk to java web services and vice versa. So, Web services is used to make the application platform and technology independent. What types of Web Service are There? \u00b6 There are two broad classes of web service: SOAP - These web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. REST - A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol. Typically REST web services expose their operations as a series of unique \"resources\" which correspond to a specific URL. Each of the standard HTTP methods (POST, GET, PUT and DELETE) then maps into the four basic CRUD (Create, Read, Update and Delete) operations on each resource. REST web services can use different data serialization methods (XML, JSON, RSS, etc.). Why do we Test Web Services? \u00b6 The purpose of Web Service Testing is to verify that all of the Application Programming Interfaces (APIs) exposed by your application operate as expected. In some ways they are similar to unit tests in that they test specific pieces of code rather than user interface objects. Unlike simple unit tests however, web services tests will normally need to be developed for each of the supported versions of the API so that when a new version of a product comes out, you can regression test the latest version of the API and all previous versions. This ensures that legacy clients using the older version of the API don't need to make any changes. Also, unlike unit tests, web services are being called across a network using the HTTP/HTTPS protocol rather than simply calling code that is resident on the same system as the test script. In that sense, they are similar to testing web sites. Finally, in situations where you have an AJAX web application, as well as testing the front-end user interface using the appropriate UI library, you may need to test the web service that is providing the data to the user interface at the same time. In these situations you have a hybrid, web user interface and web service test. Testing Web Services with Rapise \u00b6 Rapise contains a built-in web service module that can currently test the following types of web service: REST Web Services - Rapise contains a built-in REST definition builder and object library that allows you to prototype out your REST web service requests, inspect the returned HTTP headers and HTTP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor . It also includes built-in support for verifying the data returned as Rapise checkpoints. SOAP Web Services - Rapise contains a built-in SOAP request tester and object library that allows you to prototype out your SOAP web service requests, inspect the returned HTTP headers and SOAP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor . It also includes built-in support for verifying the data returned as Rapise checkpoints.","title":"Web Service Testing"},{"location":"Guide/web_service_testing/#web-service-testing","text":"","title":"Web Service Testing"},{"location":"Guide/web_service_testing/#what-is-a-web-service","text":"A Web service is a unit of managed code that can be remotely invoked using HTTP, that is, it can be activated using HTTP requests. So, Web Services allows you to expose the functionality of your existing code over the network. Once it is exposed on the network, other application can use the functionality of your program. Web Services allows different applications to talk to each other and share data and services among themselves. Other applications can also use the services of the web services. For example VB or .NET application can talk to java web services and vice versa. So, Web services is used to make the application platform and technology independent.","title":"What is a Web Service?"},{"location":"Guide/web_service_testing/#what-types-of-web-service-are-there","text":"There are two broad classes of web service: SOAP - These web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. REST - A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol. Typically REST web services expose their operations as a series of unique \"resources\" which correspond to a specific URL. Each of the standard HTTP methods (POST, GET, PUT and DELETE) then maps into the four basic CRUD (Create, Read, Update and Delete) operations on each resource. REST web services can use different data serialization methods (XML, JSON, RSS, etc.).","title":"What types of Web Service are There?"},{"location":"Guide/web_service_testing/#why-do-we-test-web-services","text":"The purpose of Web Service Testing is to verify that all of the Application Programming Interfaces (APIs) exposed by your application operate as expected. In some ways they are similar to unit tests in that they test specific pieces of code rather than user interface objects. Unlike simple unit tests however, web services tests will normally need to be developed for each of the supported versions of the API so that when a new version of a product comes out, you can regression test the latest version of the API and all previous versions. This ensures that legacy clients using the older version of the API don't need to make any changes. Also, unlike unit tests, web services are being called across a network using the HTTP/HTTPS protocol rather than simply calling code that is resident on the same system as the test script. In that sense, they are similar to testing web sites. Finally, in situations where you have an AJAX web application, as well as testing the front-end user interface using the appropriate UI library, you may need to test the web service that is providing the data to the user interface at the same time. In these situations you have a hybrid, web user interface and web service test.","title":"Why do we Test Web Services?"},{"location":"Guide/web_service_testing/#testing-web-services-with-rapise","text":"Rapise contains a built-in web service module that can currently test the following types of web service: REST Web Services - Rapise contains a built-in REST definition builder and object library that allows you to prototype out your REST web service requests, inspect the returned HTTP headers and HTTP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor . It also includes built-in support for verifying the data returned as Rapise checkpoints. SOAP Web Services - Rapise contains a built-in SOAP request tester and object library that allows you to prototype out your SOAP web service requests, inspect the returned HTTP headers and SOAP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor . It also includes built-in support for verifying the data returned as Rapise checkpoints.","title":"Testing Web Services with Rapise"},{"location":"Guide/web_settings/","text":"Web Spy Settings Dialog \u00b6 Purpose \u00b6 This dialog box displays the list of Web Spy settings and lets you change the behavior of the Web Spy tool. How to Open \u00b6 You can open this dialog box from two places: From the main Rapise menu Settings > Web Spy . From the Web Spy tool when you click on the Spy > Web Spy Settings menu entry. General Settings \u00b6 This dialog box has the following settings: DOM Attributes Exclude Filter - List the DOM element attributes to hide in the DOM Tree of the Web Spy (comma separated). DOM Attributes Include Filter - List the DOM element attributes to show in the DOM Tree of the Web Spy (comma separated). If both Include and Exclude filters are set then Include filter prevails. DOM Tree Loading Timeout - this lets you extend or reduce the amount of time (in seconds) that Rapise allows for loading the DOM Tree. This can be useful for slower web browsers and/or complex web sites with lots of nested frames. The default value is 10 seconds DOM Tree Max Attribute Length - this lets you specify the maximum length of the DOM attributes. The smaller the value, the fast the DOM tree will load. The default is 1024 characters. Enable Universal XPath Generator - If set to 'True' it creates the XPath and CSS selectors inside the Web Spy itself rather than relying on the web browser to do the generation. This is usually much faster (especially when using Internet Explorer). Fast DOM Tree Build - If set to 'True' then Rapise uses embedded code to get the DOM Tree when using either the Internet Explorer HTML library or any of the Selenium libraries . Show Internal ID - If 'True' then DOM Element pane shows internal ID of an element. This ID is purely internal to Rapise and is not part of the HTML web page or web application XPath Type to Learn - This is described in the section below: Different Types of XPath \u00b6 The WebSpy has variety of options for XPath generation. Having a number of different approaches for generating XPath has its benefits. It gives Rapise incredible flexibility in getting the best results for different situations: Sometimes we can recognize an element by its text. In such cases the simplest and most efficient XPath will use the node text. Sometimes we have a regular structure (tables and grids) and it is better to have row and column indices inside the XPath. Sometimes we deal with an application framework that uses custom attributes (e.g. aria, angular, bootstrap). So if we use them in our XPath then it will be cleaner and more robust. The Web Spy currently supports the following different types of XPath: xpath_full - generates a fully featured XPath path using elements without attributes. This XPath starts with /html and goes through body and other elements towards the required node. xpath_min - generated with the attributes defined in the DOM Attributes Include Filter . If the include filter is empty, then it is produced with all attributes except those defined in the DOM Attributes Exclude Filter . For example, if the include filter contains the widgetid custom attribute then the generated XPath would be: 1 //div[@widgetid=\"dojox_grid__View_1\"] xpath_indexed - considers the node as nth of the same kind. For example, the page may contain 250 <a href=\u2026> links across the page, and we want to learn the link somewhere in the middle. In this case indexed XPath will be of the form (//a)[123] xpath_std - generated and minimized with use of pre-selected set of attributes: align class style size tabindex value width height colspan rowspan cellspacing cellpadding border on* (i.e. onclick, onblur and so on) Usually it contains most common attributes: id, name, for, role. xpath_aria - generated with the use of just the core id/name attributes plus the special aria attributes: id name for role aria-* xpath_text - if possible, generated to match an HTML node simply by its text. For example, <button>Refresh</button> is found by: //button[normalize-space(text())=\"Refresh\"] . In many cases this value is empty. This means that there are more than one node with such text.","title":"Web Spy Settings"},{"location":"Guide/web_settings/#web-spy-settings-dialog","text":"","title":"Web Spy Settings Dialog"},{"location":"Guide/web_settings/#purpose","text":"This dialog box displays the list of Web Spy settings and lets you change the behavior of the Web Spy tool.","title":"Purpose"},{"location":"Guide/web_settings/#how-to-open","text":"You can open this dialog box from two places: From the main Rapise menu Settings > Web Spy . From the Web Spy tool when you click on the Spy > Web Spy Settings menu entry.","title":"How to Open"},{"location":"Guide/web_settings/#general-settings","text":"This dialog box has the following settings: DOM Attributes Exclude Filter - List the DOM element attributes to hide in the DOM Tree of the Web Spy (comma separated). DOM Attributes Include Filter - List the DOM element attributes to show in the DOM Tree of the Web Spy (comma separated). If both Include and Exclude filters are set then Include filter prevails. DOM Tree Loading Timeout - this lets you extend or reduce the amount of time (in seconds) that Rapise allows for loading the DOM Tree. This can be useful for slower web browsers and/or complex web sites with lots of nested frames. The default value is 10 seconds DOM Tree Max Attribute Length - this lets you specify the maximum length of the DOM attributes. The smaller the value, the fast the DOM tree will load. The default is 1024 characters. Enable Universal XPath Generator - If set to 'True' it creates the XPath and CSS selectors inside the Web Spy itself rather than relying on the web browser to do the generation. This is usually much faster (especially when using Internet Explorer). Fast DOM Tree Build - If set to 'True' then Rapise uses embedded code to get the DOM Tree when using either the Internet Explorer HTML library or any of the Selenium libraries . Show Internal ID - If 'True' then DOM Element pane shows internal ID of an element. This ID is purely internal to Rapise and is not part of the HTML web page or web application XPath Type to Learn - This is described in the section below:","title":"General Settings"},{"location":"Guide/web_settings/#different-types-of-xpath","text":"The WebSpy has variety of options for XPath generation. Having a number of different approaches for generating XPath has its benefits. It gives Rapise incredible flexibility in getting the best results for different situations: Sometimes we can recognize an element by its text. In such cases the simplest and most efficient XPath will use the node text. Sometimes we have a regular structure (tables and grids) and it is better to have row and column indices inside the XPath. Sometimes we deal with an application framework that uses custom attributes (e.g. aria, angular, bootstrap). So if we use them in our XPath then it will be cleaner and more robust. The Web Spy currently supports the following different types of XPath: xpath_full - generates a fully featured XPath path using elements without attributes. This XPath starts with /html and goes through body and other elements towards the required node. xpath_min - generated with the attributes defined in the DOM Attributes Include Filter . If the include filter is empty, then it is produced with all attributes except those defined in the DOM Attributes Exclude Filter . For example, if the include filter contains the widgetid custom attribute then the generated XPath would be: 1 //div[@widgetid=\"dojox_grid__View_1\"] xpath_indexed - considers the node as nth of the same kind. For example, the page may contain 250 <a href=\u2026> links across the page, and we want to learn the link somewhere in the middle. In this case indexed XPath will be of the form (//a)[123] xpath_std - generated and minimized with use of pre-selected set of attributes: align class style size tabindex value width height colspan rowspan cellspacing cellpadding border on* (i.e. onclick, onblur and so on) Usually it contains most common attributes: id, name, for, role. xpath_aria - generated with the use of just the core id/name attributes plus the special aria attributes: id name for role aria-* xpath_text - if possible, generated to match an HTML node simply by its text. For example, <button>Refresh</button> is found by: //button[normalize-space(text())=\"Refresh\"] . In many cases this value is empty. This means that there are more than one node with such text.","title":"Different Types of XPath"},{"location":"Guide/web_spy/","text":"Web Spy \u00b6 Purpose \u00b6 The Web Spy is used to inspect web applications running on any of the supported web browsers (currently Internet Explorer, Firefox and Chrome). It allows you to view the hierarchy of elements in the web browser Document Object Model (DOM) . In addition it makes the testing of dynamic data-driven web applications easier because it lets you test out dynamic XPath or CSS queries against the web page and verify that the elements return match your expectations. The Web Spy dialog shows a hierarchical representation of the HTML DOM elements that make up the web application being tested as well as the properties of the currently selected object. You can select the object by clicking on the object hierarchy displayed to the left. The properties displayed are categorized into different types that are described below. The Web Spy also lets you visually highlight an item in the web browser from the object hierarchy and also the reverse - selecting an object in the hierarchy by clicking on its representation in the web browser. Spy Toolbar \u00b6 The Web Spy toolbar provides the following tools: Get Snapshot (Ctrl+G): Clicking on this command will refresh the contents of the DOM Tree. This should be done whenever a change is made to the state of the web page in the web browser and you want to view how the DOM objects have been changed after the change. Track (Ctrl+T): This tool lets you select items in the web application as rendered by the web browser and have the corresponding object be selected in the DOM tree window. This is useful if you are not sure where an item is located in the DOM tree but you can see it in the browser. Learn: Clicking on this tool lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test script. When you click on the Learn button, you have the choice (in the dropdown list) of learning the object in terms of either its XPath or CSS properties. XPath: This field is described separately below in the Test Results section. These tool allow you to try out different XPATH queries to see which objects match. You can then Learn the results of these queries as new Rapise objects. Spy Menu \u00b6 More tools available in the menu. Go To Url: Allows entering a URL and perform navigation in a remote browser. Handy when you connect to desktop browsers via Selenium or mobile browsers via Appium. Disconnect: Close connection to the browser and clear the DOM tree. Save: Use ot to save the DOM tree to an XML file. Load: Use it to load the DOM tree from an XML file. Hide Invisible: Selecting this item hides all elements with zero dimensions or display: none style from the DOM tree. Highlighting Mode: When this is selected, whenever you select an object in DOM Tree, it will highlight the item in the rendered web page with a red square. This allows you to visually see an item in the DOM tree and how it appears to the user. Virtual Mode: When virtual mode is on you can test XPath queries with the DOM tree loaded into Spy (browser is not used). You can load the tree from an XML file for example. CSS Enabled: Select to make CSS test field visible on the toolbar. Web Spy Settings: Clicking on this brings up the Web Settings dialog box. Spy Shortcuts \u00b6 Ctrl + G - reload the DOM tree from the active page in the browser. Ctrl + T - start/stop tracking mode to locate the element in the DOM tree. Ctrl + Shift + T - save snapshot of the DOM tree. When the shortcut is pressed Rapise prompts for a name and saves the DOM tree in XML format and the screenshot of the browser window in PNG format. DOM Tree \u00b6 The DOM tree lets you view all of the HTML elements (also known as DOM elements) that make up the web application / web page being tested. The elements are showing in a hierarchical tree representation that mirrors how they are nested on the page. Each element is displayed along with the various attributes (class, id, style, etc.) that are associated with the element: The DOM elements are color coded. Tags and text are gray Attribute names are red Attribute values are blue Elements that are not displayed on screen because of zero size or display: none style emphasized with lighter colors. Sometimes you have more attributes displayed than can be easily red. To make viewing the DOM tree easier, you can use the Web Settings dialog to set a list of attributes that should be excluded from the DOM tree pane. When you right-click on an element it opens a popup menu with the following options: Copy - copies node text to clipboard (no attribute truncation). Highlight - highlights the element in the browser. Learn - expands the list of various XPath locators generated for the element. Click an item in this list and Rapise will learn the object with selected XPath. Double clicking on an element copies it's XPath to the toolbar. DOM Element \u00b6 When you click on an element in the DOM tree its properties are displayed in the DOM Element pane and it is highlighted in the web browser. The properties that are displayed are grouped into the following categories: Primary tagName - this contains the name of the HTML element text - this contains a textual representation of all the HTML text nodes inside this element (if any) Attributes - all DOM attributes appear here. You see these attributes in red color in the DOM tree. Examples: id - this contains the ID of the DOM element, if specified in the page style - this contains the inline styles defined for the element class - this contains the list of CSS classes applied to the element (separated by spaces if more than one) Properties - this contains the computed positional information about the element height width x y zIndex Selectors - this section contains XPath and CSS selectors computed using different algorithms. If you will double click a name of the selector it will be copied to the edit field on the toolbar. Test Results \u00b6 In addition to navigating the DOM tree and Learning specific elements, the other main capability of the DOM Spy is the ability to create queries using either XPath or CSS to see which objects match the query and then learn the specific result. For example we want to find all the table cells that have at least some style information specified. Using XPath \u00b6 If you enter in the XPath query to locate the table cells in the XPath box at the top. When you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the items you want to test. Note If you need to enter a non-breaking space in your search query (nbsp) you can do this by pressing Shift + Space key combination. Using CSS \u00b6 If you enter in the CSS selector to locate the table cells in the CSS box at the top (if the box is not visible use menu Spy > CSS Enabled ). When you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the items you want to test. In either case, if you can adjust the query to only match a single element, you can then click the appropriate Learn button next to the XPath or CSS edit fields. That will learn the specified query as a new object that can be scripted against in Rapise. This is very useful if you want to dynamically select an object based on its content rather than a hard-coded ID or position. Also you can add an assertion to the test by clicking Verify . It will display properties of the object . You may set checkboxes against properties you want to check during playback. In addition, in the test results view, when you click on a result: The right-click popup menu is the same as for DOM Tree if type of the result is a DOM Element If the result is simple text then only Copy is available, which copies the text Clicking on a DOM element in the results list opens it in DOM Element pane and also selects it in the DOM Tree pane Maintenance Mode \u00b6 Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy from the toolbar (it will be launched in Maintenance Mode) it will show the object tree in the right side panel. To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon. If an object is found it will be highlighted in the browser and selected in the tree of application objects (left pane). To fix a locator for object that is not found do the following: Select the object in the object tree (right pane) Select the element by testing XPath locator from the toolbar or directly in the DOM tree (left pane) or by using object tracking. Press relearn button on the toolbar. See Also \u00b6 Object Spy Save DOM tree to share with Rapise experts","title":"Web Spy"},{"location":"Guide/web_spy/#web-spy","text":"","title":"Web Spy"},{"location":"Guide/web_spy/#purpose","text":"The Web Spy is used to inspect web applications running on any of the supported web browsers (currently Internet Explorer, Firefox and Chrome). It allows you to view the hierarchy of elements in the web browser Document Object Model (DOM) . In addition it makes the testing of dynamic data-driven web applications easier because it lets you test out dynamic XPath or CSS queries against the web page and verify that the elements return match your expectations. The Web Spy dialog shows a hierarchical representation of the HTML DOM elements that make up the web application being tested as well as the properties of the currently selected object. You can select the object by clicking on the object hierarchy displayed to the left. The properties displayed are categorized into different types that are described below. The Web Spy also lets you visually highlight an item in the web browser from the object hierarchy and also the reverse - selecting an object in the hierarchy by clicking on its representation in the web browser.","title":"Purpose"},{"location":"Guide/web_spy/#spy-toolbar","text":"The Web Spy toolbar provides the following tools: Get Snapshot (Ctrl+G): Clicking on this command will refresh the contents of the DOM Tree. This should be done whenever a change is made to the state of the web page in the web browser and you want to view how the DOM objects have been changed after the change. Track (Ctrl+T): This tool lets you select items in the web application as rendered by the web browser and have the corresponding object be selected in the DOM tree window. This is useful if you are not sure where an item is located in the DOM tree but you can see it in the browser. Learn: Clicking on this tool lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test script. When you click on the Learn button, you have the choice (in the dropdown list) of learning the object in terms of either its XPath or CSS properties. XPath: This field is described separately below in the Test Results section. These tool allow you to try out different XPATH queries to see which objects match. You can then Learn the results of these queries as new Rapise objects.","title":"Spy Toolbar"},{"location":"Guide/web_spy/#spy-menu","text":"More tools available in the menu. Go To Url: Allows entering a URL and perform navigation in a remote browser. Handy when you connect to desktop browsers via Selenium or mobile browsers via Appium. Disconnect: Close connection to the browser and clear the DOM tree. Save: Use ot to save the DOM tree to an XML file. Load: Use it to load the DOM tree from an XML file. Hide Invisible: Selecting this item hides all elements with zero dimensions or display: none style from the DOM tree. Highlighting Mode: When this is selected, whenever you select an object in DOM Tree, it will highlight the item in the rendered web page with a red square. This allows you to visually see an item in the DOM tree and how it appears to the user. Virtual Mode: When virtual mode is on you can test XPath queries with the DOM tree loaded into Spy (browser is not used). You can load the tree from an XML file for example. CSS Enabled: Select to make CSS test field visible on the toolbar. Web Spy Settings: Clicking on this brings up the Web Settings dialog box.","title":"Spy Menu"},{"location":"Guide/web_spy/#spy-shortcuts","text":"Ctrl + G - reload the DOM tree from the active page in the browser. Ctrl + T - start/stop tracking mode to locate the element in the DOM tree. Ctrl + Shift + T - save snapshot of the DOM tree. When the shortcut is pressed Rapise prompts for a name and saves the DOM tree in XML format and the screenshot of the browser window in PNG format.","title":"Spy Shortcuts"},{"location":"Guide/web_spy/#dom-tree","text":"The DOM tree lets you view all of the HTML elements (also known as DOM elements) that make up the web application / web page being tested. The elements are showing in a hierarchical tree representation that mirrors how they are nested on the page. Each element is displayed along with the various attributes (class, id, style, etc.) that are associated with the element: The DOM elements are color coded. Tags and text are gray Attribute names are red Attribute values are blue Elements that are not displayed on screen because of zero size or display: none style emphasized with lighter colors. Sometimes you have more attributes displayed than can be easily red. To make viewing the DOM tree easier, you can use the Web Settings dialog to set a list of attributes that should be excluded from the DOM tree pane. When you right-click on an element it opens a popup menu with the following options: Copy - copies node text to clipboard (no attribute truncation). Highlight - highlights the element in the browser. Learn - expands the list of various XPath locators generated for the element. Click an item in this list and Rapise will learn the object with selected XPath. Double clicking on an element copies it's XPath to the toolbar.","title":"DOM Tree"},{"location":"Guide/web_spy/#dom-element","text":"When you click on an element in the DOM tree its properties are displayed in the DOM Element pane and it is highlighted in the web browser. The properties that are displayed are grouped into the following categories: Primary tagName - this contains the name of the HTML element text - this contains a textual representation of all the HTML text nodes inside this element (if any) Attributes - all DOM attributes appear here. You see these attributes in red color in the DOM tree. Examples: id - this contains the ID of the DOM element, if specified in the page style - this contains the inline styles defined for the element class - this contains the list of CSS classes applied to the element (separated by spaces if more than one) Properties - this contains the computed positional information about the element height width x y zIndex Selectors - this section contains XPath and CSS selectors computed using different algorithms. If you will double click a name of the selector it will be copied to the edit field on the toolbar.","title":"DOM Element"},{"location":"Guide/web_spy/#test-results","text":"In addition to navigating the DOM tree and Learning specific elements, the other main capability of the DOM Spy is the ability to create queries using either XPath or CSS to see which objects match the query and then learn the specific result. For example we want to find all the table cells that have at least some style information specified.","title":"Test Results"},{"location":"Guide/web_spy/#using-xpath","text":"If you enter in the XPath query to locate the table cells in the XPath box at the top. When you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the items you want to test. Note If you need to enter a non-breaking space in your search query (nbsp) you can do this by pressing Shift + Space key combination.","title":"Using XPath"},{"location":"Guide/web_spy/#using-css","text":"If you enter in the CSS selector to locate the table cells in the CSS box at the top (if the box is not visible use menu Spy > CSS Enabled ). When you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the items you want to test. In either case, if you can adjust the query to only match a single element, you can then click the appropriate Learn button next to the XPath or CSS edit fields. That will learn the specified query as a new object that can be scripted against in Rapise. This is very useful if you want to dynamically select an object based on its content rather than a hard-coded ID or position. Also you can add an assertion to the test by clicking Verify . It will display properties of the object . You may set checkboxes against properties you want to check during playback. In addition, in the test results view, when you click on a result: The right-click popup menu is the same as for DOM Tree if type of the result is a DOM Element If the result is simple text then only Copy is available, which copies the text Clicking on a DOM element in the results list opens it in DOM Element pane and also selects it in the DOM Tree pane","title":"Using CSS"},{"location":"Guide/web_spy/#maintenance-mode","text":"Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy from the toolbar (it will be launched in Maintenance Mode) it will show the object tree in the right side panel. To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon. If an object is found it will be highlighted in the browser and selected in the tree of application objects (left pane). To fix a locator for object that is not found do the following: Select the object in the object tree (right pane) Select the element by testing XPath locator from the toolbar or directly in the DOM tree (left pane) or by using object tracking. Press relearn button on the toolbar.","title":"Maintenance Mode"},{"location":"Guide/web_spy/#see-also","text":"Object Spy Save DOM tree to share with Rapise experts","title":"See Also"},{"location":"Guide/web_testing/","text":"Web Testing \u00b6 Purpose \u00b6 Rapise lets you record and play automated tests against web applications on a variety of web browsers including Firefox , Internet Explorer and Google Chrome . Rapise lets you record or create your tests against one browser and then play the same test back against all of the other browsers. It is called Cross Browser Testing . Some of the web browsers will require the installation of a special Rapise plugin to allow automated testing. Rapise provides comprehensive support for testing Web applications. It uses the web browser Document Object Model (DOM) to interact with the current web page. The various web browsers on the market have various differences in DOM implementation. In many cases these differences are not significant. But sometimes they require special handling. Rapise tries to overcome the differences and make the recorded scripts as universal as possible. In addition, it is possible to have more control over the cross browser execution using the available APIs and configuration variables. You can also run the recording in multiple browsers in succession using either a Rapise sub-test or simply executing the test from our SpiraTest test management system and passing through different parameter values. DOM API \u00b6 In addition to the usual recording , learning and playback that is similar to testing other technologies (desktop, mobile, etc.) there are some unique functions that are available on all recorded web objects. Upon learning a web element in Rapise, you get an object of type HTMLObject . Each HTMLObject provides set of functions to facilitate the cross-browser access to web element parents and children. DoDOMChildAt - Returns n-th child (zero-based). DoDOMChildrenCount - Returns number of children elements for this one. DoDOMFindParentWithAttribute - Returns parent element with given attribute matching given string or regex. DoDOMGetAttribute - Returns specified attribute. DoDOMNextSibling - Returns next sibling element for this one. DoDOMParent - Returns parent element having this element. DoDOMPrevSibling - Return previous sibling element for this one. DoDOMRoot - Returns Root element having this element. See Also \u00b6 Web Browser Profiles - How to configure browsers to record and playback tests via Rapise native connectors. Selenium Profiles - How to configure Rapise to playback tests on Selenium nodes. Web Spy - How to use the Web Spy to inspect web pages and dynamically query for HTML elements. Web Application Profile - How to improve automatic generation of Web element locators. Self-healing Web Locators - How to enable and use advanced maintenance features for Web testing. XPath - An explanation of the XPath language, how it can be used to dynamically query objects in web application and some examples. CSS - An explanation of how to use CSS selectors (common in frameworks such as jQuery) to dynamically query objects in web applications. Web Testing Tutorial - a basic example of how to record, learn and playback tests using a our sample web application. Setting up Web Browsers - describes the steps needed to configure each of the web browsers to work with Rapise.","title":"Web Testing"},{"location":"Guide/web_testing/#web-testing","text":"","title":"Web Testing"},{"location":"Guide/web_testing/#purpose","text":"Rapise lets you record and play automated tests against web applications on a variety of web browsers including Firefox , Internet Explorer and Google Chrome . Rapise lets you record or create your tests against one browser and then play the same test back against all of the other browsers. It is called Cross Browser Testing . Some of the web browsers will require the installation of a special Rapise plugin to allow automated testing. Rapise provides comprehensive support for testing Web applications. It uses the web browser Document Object Model (DOM) to interact with the current web page. The various web browsers on the market have various differences in DOM implementation. In many cases these differences are not significant. But sometimes they require special handling. Rapise tries to overcome the differences and make the recorded scripts as universal as possible. In addition, it is possible to have more control over the cross browser execution using the available APIs and configuration variables. You can also run the recording in multiple browsers in succession using either a Rapise sub-test or simply executing the test from our SpiraTest test management system and passing through different parameter values.","title":"Purpose"},{"location":"Guide/web_testing/#dom-api","text":"In addition to the usual recording , learning and playback that is similar to testing other technologies (desktop, mobile, etc.) there are some unique functions that are available on all recorded web objects. Upon learning a web element in Rapise, you get an object of type HTMLObject . Each HTMLObject provides set of functions to facilitate the cross-browser access to web element parents and children. DoDOMChildAt - Returns n-th child (zero-based). DoDOMChildrenCount - Returns number of children elements for this one. DoDOMFindParentWithAttribute - Returns parent element with given attribute matching given string or regex. DoDOMGetAttribute - Returns specified attribute. DoDOMNextSibling - Returns next sibling element for this one. DoDOMParent - Returns parent element having this element. DoDOMPrevSibling - Return previous sibling element for this one. DoDOMRoot - Returns Root element having this element.","title":"DOM API"},{"location":"Guide/web_testing/#see-also","text":"Web Browser Profiles - How to configure browsers to record and playback tests via Rapise native connectors. Selenium Profiles - How to configure Rapise to playback tests on Selenium nodes. Web Spy - How to use the Web Spy to inspect web pages and dynamically query for HTML elements. Web Application Profile - How to improve automatic generation of Web element locators. Self-healing Web Locators - How to enable and use advanced maintenance features for Web testing. XPath - An explanation of the XPath language, how it can be used to dynamically query objects in web application and some examples. CSS - An explanation of how to use CSS selectors (common in frameworks such as jQuery) to dynamically query objects in web applications. Web Testing Tutorial - a basic example of how to record, learn and playback tests using a our sample web application. Setting up Web Browsers - describes the steps needed to configure each of the web browsers to work with Rapise.","title":"See Also"},{"location":"Guide/windows_applications/","text":"Windows Applications \u00b6 Overview \u00b6 Rapise provides comprehensive support for testing Microsoft Windows GUI applications, including applications written using Win32, MFC, ATL , Windows Forms, Visual Basic 6, Microsoft .NET , ActiveX , and Windows Presentation Framework ( WPF ). Specifically, Rapise has support for the following technologies used tobuild Windows applications: Win32 Applications Microsoft Foundation Classes (MFC) ActiveX Template Library (ATL) Visual Basic 6 ActiveX / COM Microsoft .NET Applications WinForms .NET 1.1, .NET 2.0 .NET 4.x Windows Presentation Framework (WPF) Silverlight XAML Modern / Metro Apps Third Party Component Libraries Infragistics WinForm Controls Telerik RadControls DevExpress Controls ComponentOne ActiveX Controls SyncFusion Windows Form Controls FarPoint Spreadsheet Control Choosing the Right Windows Library \u00b6 Since applications are often built using a mixture of different Windows technologies and component frameworks, we recommend that you use the following approach when testing Windows desktop applications with Rapise: First try recording using the \"Auto\" option , this will let Rapise inspect the application and use the most appropriate libraries. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails. If auto-detection is not reliable for your application, move on to step 2. Select the \" UIAutomation Object\" Spy and try to inspect the application. If the Spy shows the real content of the application (i.e. you see object names and IDs) then it is worth trying to record a test with the corresponding library called \" UIAutomation \" - using the record application dialog box . This library is best for modern Windows applications. If the recording is not picked up or does not play back correctly then the next step is to try recording with the \" Generic \" library. This is designed for older Windows Win32 applications. There is also a Spy tool for this library called the \"Accessible Object\" Spy. If you have third-party components from Infragistics, Telerik, DevExpress, ComponentOne, SyncFusion or FarPoint, you may also need to select those libraries in addition to Generic . If the recording is not sufficient then the last step is to try and record with the \" Advanced Accessibility \" library. This library contains definitions of accessible controls at a very basic level. It is not very sophisticated, but it is often sufficient for many cases and works across a wide range of applications. If neither of options below satisfy then it may be worth to try low level recording ( https://www.inflectra.com/Support/KnowledgeBase/KB114.aspx ). Sample Applications \u00b6 In the Samples index of this manual we provide a full list of all the samples included with Rapise, however for Windows applications there are a couple of key ones that are worth exploring: a) Two Dialogs This is a simple Win32 MFC application that uses the Generic library and lets you try some basic testing scenarios. b) Sample ATM This is a more robust Win32 MFC application that is based on a banking ATM. You should use the Generic library with this application: c) WPF Sample Application This application is a good test of the UIAutomation library and is a simple test application with all of the different types of control available for testing:","title":"Desktop Testing"},{"location":"Guide/windows_applications/#windows-applications","text":"","title":"Windows Applications"},{"location":"Guide/windows_applications/#overview","text":"Rapise provides comprehensive support for testing Microsoft Windows GUI applications, including applications written using Win32, MFC, ATL , Windows Forms, Visual Basic 6, Microsoft .NET , ActiveX , and Windows Presentation Framework ( WPF ). Specifically, Rapise has support for the following technologies used tobuild Windows applications: Win32 Applications Microsoft Foundation Classes (MFC) ActiveX Template Library (ATL) Visual Basic 6 ActiveX / COM Microsoft .NET Applications WinForms .NET 1.1, .NET 2.0 .NET 4.x Windows Presentation Framework (WPF) Silverlight XAML Modern / Metro Apps Third Party Component Libraries Infragistics WinForm Controls Telerik RadControls DevExpress Controls ComponentOne ActiveX Controls SyncFusion Windows Form Controls FarPoint Spreadsheet Control","title":"Overview"},{"location":"Guide/windows_applications/#choosing-the-right-windows-library","text":"Since applications are often built using a mixture of different Windows technologies and component frameworks, we recommend that you use the following approach when testing Windows desktop applications with Rapise: First try recording using the \"Auto\" option , this will let Rapise inspect the application and use the most appropriate libraries. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails. If auto-detection is not reliable for your application, move on to step 2. Select the \" UIAutomation Object\" Spy and try to inspect the application. If the Spy shows the real content of the application (i.e. you see object names and IDs) then it is worth trying to record a test with the corresponding library called \" UIAutomation \" - using the record application dialog box . This library is best for modern Windows applications. If the recording is not picked up or does not play back correctly then the next step is to try recording with the \" Generic \" library. This is designed for older Windows Win32 applications. There is also a Spy tool for this library called the \"Accessible Object\" Spy. If you have third-party components from Infragistics, Telerik, DevExpress, ComponentOne, SyncFusion or FarPoint, you may also need to select those libraries in addition to Generic . If the recording is not sufficient then the last step is to try and record with the \" Advanced Accessibility \" library. This library contains definitions of accessible controls at a very basic level. It is not very sophisticated, but it is often sufficient for many cases and works across a wide range of applications. If neither of options below satisfy then it may be worth to try low level recording ( https://www.inflectra.com/Support/KnowledgeBase/KB114.aspx ).","title":"Choosing the Right Windows Library"},{"location":"Guide/windows_applications/#sample-applications","text":"In the Samples index of this manual we provide a full list of all the samples included with Rapise, however for Windows applications there are a couple of key ones that are worth exploring: a) Two Dialogs This is a simple Win32 MFC application that uses the Generic library and lets you try some basic testing scenarios. b) Sample ATM This is a more robust Win32 MFC application that is based on a banking ATM. You should use the Generic library with this application: c) WPF Sample Application This application is a good test of the UIAutomation library and is a simple test application with all of the different types of control available for testing:","title":"Sample Applications"},{"location":"Guide/writing_to_the_report/","text":"Writing to the Report \u00b6 Purpose \u00b6 You can write to individual columns, create columns, and add data to the report . Usage \u00b6 Writing to and Creating a Column \u00b6 Use Tester.PushReportAttribute or Tester.SetReportAttribute to set values in specific rows. Tester.PopReportAttribute reverses the effect of Tester.PushReportAttribute: PushReportAttribute Tester . PushReportAttribute ( \"columnName\" , \"value\" ); // ...some test steps... //the rows corresponding to these steps will have //value in their columnName column Tester . PushReportAttribute ( \"columnName\" , \"value2\" ); // ...some test steps... //the rows corresponding to these steps will have //value2 in their columnName column Tester . PopReportAttribute ( \"columnName\" ); //test steps proceeding this will be back to value If columnName does not exist, it will be added to the report. SetReportAttribute Tester . SetReportAttribute ( \"columnName\" , \"value\" ); If columnName does not exist, it will be added to the report. Column columnName will be populated with value for rows created after this function call (unless specified otherwise). Adding Data \u00b6 Data must be associated with an Assert row or a Message row. Tester . Assert ( \"description\" , \"expression\" , \"data\" , \"columnValuePairs\" ); Tester . Message ( \"description\" , \"data\" , \"columnValuePairs\" ); description is a string. expression is the boolean expression that the assertion tests. data is an array of data objects. Each data element is written to its own row below the assert/message row with which it is associated. Data can be text, a link, or an image. The following is an array with text, link, and image data. columnValuePairs is an object with key/value pairs. Column names are the keys. If the specified column does not exist, it will be created. Example: {requirement: \"Req1.2.3\", paragraph: \"12.5\"} Example of data array: [ new SeSReportText ( \"text\" ), new SeSReportLink ( \"urlString\" , \"linkText\" ), new SeSReportImage ( \"ImageWrapperObject\" , \"imageDescription\" ) ] See Also \u00b6 Automated Reporting The test samples include a sample about reporting (Reporting.sstest)","title":"Writing to the Report"},{"location":"Guide/writing_to_the_report/#writing-to-the-report","text":"","title":"Writing to the Report"},{"location":"Guide/writing_to_the_report/#purpose","text":"You can write to individual columns, create columns, and add data to the report .","title":"Purpose"},{"location":"Guide/writing_to_the_report/#usage","text":"","title":"Usage"},{"location":"Guide/writing_to_the_report/#writing-to-and-creating-a-column","text":"Use Tester.PushReportAttribute or Tester.SetReportAttribute to set values in specific rows. Tester.PopReportAttribute reverses the effect of Tester.PushReportAttribute: PushReportAttribute Tester . PushReportAttribute ( \"columnName\" , \"value\" ); // ...some test steps... //the rows corresponding to these steps will have //value in their columnName column Tester . PushReportAttribute ( \"columnName\" , \"value2\" ); // ...some test steps... //the rows corresponding to these steps will have //value2 in their columnName column Tester . PopReportAttribute ( \"columnName\" ); //test steps proceeding this will be back to value If columnName does not exist, it will be added to the report. SetReportAttribute Tester . SetReportAttribute ( \"columnName\" , \"value\" ); If columnName does not exist, it will be added to the report. Column columnName will be populated with value for rows created after this function call (unless specified otherwise).","title":"Writing to and Creating a Column"},{"location":"Guide/writing_to_the_report/#adding-data","text":"Data must be associated with an Assert row or a Message row. Tester . Assert ( \"description\" , \"expression\" , \"data\" , \"columnValuePairs\" ); Tester . Message ( \"description\" , \"data\" , \"columnValuePairs\" ); description is a string. expression is the boolean expression that the assertion tests. data is an array of data objects. Each data element is written to its own row below the assert/message row with which it is associated. Data can be text, a link, or an image. The following is an array with text, link, and image data. columnValuePairs is an object with key/value pairs. Column names are the keys. If the specified column does not exist, it will be created. Example: {requirement: \"Req1.2.3\", paragraph: \"12.5\"} Example of data array: [ new SeSReportText ( \"text\" ), new SeSReportLink ( \"urlString\" , \"linkText\" ), new SeSReportImage ( \"ImageWrapperObject\" , \"imageDescription\" ) ]","title":"Adding Data"},{"location":"Guide/writing_to_the_report/#see-also","text":"Automated Reporting The test samples include a sample about reporting (Reporting.sstest)","title":"See Also"},{"location":"Guide/xpath/","text":"Web Testing - Using XPath Queries \u00b6 Purpose \u00b6 When testing web applications you will explicitly or implicitly use XPath expressions to query the browser DOM for elements based on the scenario under test. This section explains how XPath queries are used in Rapise and how to make your browser testing more flexible and adaptive to changes in the application you test. XPath Fundamentals \u00b6 XPath uses path expressions to select nodes in an XML document such as HTML . The node is selected by following a path or steps. Refer to XPATH Tutorial for more details. Rapise XPath Extensions \u00b6 Web pages sometimes use HTML frames. The XPath works inside the frame contents. Rapise has a special syntax (that is not part of standard XPath) to combine multiple XPath statements into a single line: //frame[@name='main']@@@//a[3] The special statement @@@ is used as a separator for XPath statements pointing to constituent frames. The top-level frame is found by name main //frame[@name='main'] Then the frame's contents are searched for the third <a> element (i.e. 3 rd link on a page). Automatic XPath Generation on Record and Learn \u00b6 When you do a recording session, interact with web elements or learn them - Rapise generates XPath locators for the elements. You can view XPath of an object in the property grid: Using Web Spy \u00b6 In some advanced cases you may need to construct XPath query manually. For this purpose we recommend using the Web Spy tool: If you enter in the XPath query at the top, when you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the item you want to test. Learning Objects in Web Spy \u00b6 When you have created the query in the Web Spy that returns the HTML element that you were expecting, you can click on the Learn button in the Web Spy toolbar to learn that element. What this will do is create a new Rapise object in the Object Tree that maps to this specific XPath. For example, if you want to find a specific book in a grid of books you can search by its name using text() XPath function: //td[text()='Oliver Twist'] Then learn this object as Oliver_Twist so that you can access it in your code as SeS(\"Oliver_Twist\") . Every time you call a function on Oliver_Twist , Rapise will use the learned XPath expression and use that to evaluate which HTML element in the web page to access. Dynamic Queries \u00b6 In addition to learning objects based on specific XPath, there is HTMLObject.DoDOMQueryXPath action that can be used to query for elements in the web page: var res = SeS ( 'MainContent_grdBooks' ). DoDOMQueryXPath ( './/td[text()=\"Oliver Twist\"]' ); Tester . Message ( res . length ); This will dynamically query for any HTML element that is a child of the learned MainContent_grdBooks object that matches the XPath. In this example it will look for any table cell that has the content of the book name. You can also find an object dynamically without having any object in the object tree. To do this use Navigator.Find action. See Also \u00b6 KB282 Elastic XPATH Expressions KB363 How to define a profile for Web Application in Rapise","title":"XPath"},{"location":"Guide/xpath/#web-testing-using-xpath-queries","text":"","title":"Web Testing - Using XPath Queries"},{"location":"Guide/xpath/#purpose","text":"When testing web applications you will explicitly or implicitly use XPath expressions to query the browser DOM for elements based on the scenario under test. This section explains how XPath queries are used in Rapise and how to make your browser testing more flexible and adaptive to changes in the application you test.","title":"Purpose"},{"location":"Guide/xpath/#xpath-fundamentals","text":"XPath uses path expressions to select nodes in an XML document such as HTML . The node is selected by following a path or steps. Refer to XPATH Tutorial for more details.","title":"XPath Fundamentals"},{"location":"Guide/xpath/#rapise-xpath-extensions","text":"Web pages sometimes use HTML frames. The XPath works inside the frame contents. Rapise has a special syntax (that is not part of standard XPath) to combine multiple XPath statements into a single line: //frame[@name='main']@@@//a[3] The special statement @@@ is used as a separator for XPath statements pointing to constituent frames. The top-level frame is found by name main //frame[@name='main'] Then the frame's contents are searched for the third <a> element (i.e. 3 rd link on a page).","title":"Rapise XPath Extensions"},{"location":"Guide/xpath/#automatic-xpath-generation-on-record-and-learn","text":"When you do a recording session, interact with web elements or learn them - Rapise generates XPath locators for the elements. You can view XPath of an object in the property grid:","title":"Automatic XPath Generation on Record and Learn"},{"location":"Guide/xpath/#using-web-spy","text":"In some advanced cases you may need to construct XPath query manually. For this purpose we recommend using the Web Spy tool: If you enter in the XPath query at the top, when you click Test it will display all of the DOM elements that match the query: You can now refine the query to only find the item you want to test.","title":"Using Web Spy"},{"location":"Guide/xpath/#learning-objects-in-web-spy","text":"When you have created the query in the Web Spy that returns the HTML element that you were expecting, you can click on the Learn button in the Web Spy toolbar to learn that element. What this will do is create a new Rapise object in the Object Tree that maps to this specific XPath. For example, if you want to find a specific book in a grid of books you can search by its name using text() XPath function: //td[text()='Oliver Twist'] Then learn this object as Oliver_Twist so that you can access it in your code as SeS(\"Oliver_Twist\") . Every time you call a function on Oliver_Twist , Rapise will use the learned XPath expression and use that to evaluate which HTML element in the web page to access.","title":"Learning Objects in Web Spy"},{"location":"Guide/xpath/#dynamic-queries","text":"In addition to learning objects based on specific XPath, there is HTMLObject.DoDOMQueryXPath action that can be used to query for elements in the web page: var res = SeS ( 'MainContent_grdBooks' ). DoDOMQueryXPath ( './/td[text()=\"Oliver Twist\"]' ); Tester . Message ( res . length ); This will dynamically query for any HTML element that is a child of the learned MainContent_grdBooks object that matches the XPath. In this example it will look for any table cell that has the content of the book name. You can also find an object dynamically without having any object in the object tree. To do this use Navigator.Find action.","title":"Dynamic Queries"},{"location":"Guide/xpath/#see-also","text":"KB282 Elastic XPATH Expressions KB363 How to define a profile for Web Application in Rapise","title":"See Also"},{"location":"Intro/automation/","text":"How to Solve Typical Automation Issues \u00b6 Object is Not Found \u00b6 Q: I recorded a test, started playback and got Object Not Found message. What should I do? A: Don't panic! There are several common reasons why an object is not found during playback. Reason #1 (most common) \u00b6 You are testing a web application and elements in this application use dynamics IDs that change on every page load. How to Fix Object Not Found - How to Fix (schema) Check that Rapise can find an object on screen Configure Web Recording with Web Application Profile Use WebSpy to build a better element Locator manually Turn On Self-Healing Locators Reason #2 \u00b6 You are testing a very slow application and the object is not yet available when it is needed. How to Fix Ways to slow down test execution Execute Tests Fast And Reliable \u00b6 Let's talk about how to adjust an automated test to make it run fast and reliable. Web Recorder Configuration \u00b6 Rapise has a Web Recorder. When you start recording Rapise intercepts your keyboard and mouse and adds the UI elements you are interacting with to the Object Tree. For each such element Rapise generates an XPATH locator. Though it usually makes a great job generating XPATH locators for elements, default Web Recorder settings do not fit all Web Applications. For complex modern applications you may need to configure the Web Recorder to get the most out of it.","title":"Automation Tips"},{"location":"Intro/automation/#how-to-solve-typical-automation-issues","text":"","title":"How to Solve Typical Automation Issues"},{"location":"Intro/automation/#object-is-not-found","text":"Q: I recorded a test, started playback and got Object Not Found message. What should I do? A: Don't panic! There are several common reasons why an object is not found during playback.","title":"Object is Not Found"},{"location":"Intro/automation/#reason-1-most-common","text":"You are testing a web application and elements in this application use dynamics IDs that change on every page load. How to Fix Object Not Found - How to Fix (schema) Check that Rapise can find an object on screen Configure Web Recording with Web Application Profile Use WebSpy to build a better element Locator manually Turn On Self-Healing Locators","title":"Reason #1 (most common)"},{"location":"Intro/automation/#reason-2","text":"You are testing a very slow application and the object is not yet available when it is needed. How to Fix Ways to slow down test execution","title":"Reason #2"},{"location":"Intro/automation/#execute-tests-fast-and-reliable","text":"Let's talk about how to adjust an automated test to make it run fast and reliable.","title":"Execute Tests Fast And Reliable"},{"location":"Intro/automation/#web-recorder-configuration","text":"Rapise has a Web Recorder. When you start recording Rapise intercepts your keyboard and mouse and adds the UI elements you are interacting with to the Object Tree. For each such element Rapise generates an XPATH locator. Though it usually makes a great job generating XPATH locators for elements, default Web Recorder settings do not fit all Web Applications. For complex modern applications you may need to configure the Web Recorder to get the most out of it.","title":"Web Recorder Configuration"},{"location":"Intro/ddt/","text":"Data-Driven Testing \u00b6 Real power of automation comes from data-driven testing. Separation of data and test logic and ability to run same test with different input data let automated tests scale. Tutorial Data-Driven Testing (webinar) DDT Example (GitHub)","title":"Data-Driven Testing"},{"location":"Intro/ddt/#data-driven-testing","text":"Real power of automation comes from data-driven testing. Separation of data and test logic and ability to run same test with different input data let automated tests scale. Tutorial Data-Driven Testing (webinar) DDT Example (GitHub)","title":"Data-Driven Testing"},{"location":"Intro/devops/","text":"How to Integrate Rapise into DevOps Pipeline \u00b6 SpiraTest (recommended) \u00b6 For test management and execution we recommend to use SpiraTest . Check out the integration guide and demonstration video . Microsoft Tools \u00b6 If you use Azure DevOps or TFS we also have a solution: Azure DevOps integration v3 manual and video RapiseLauncher Extension for Azure DevOps Legacy Integrations: Azure DevOps integration v2 manual and video Visual Studio and Azure DevOps Integration v1 manual and video Jenkins (and all others) \u00b6 Rapise has commend line interface and produces test reports in XML and Text formats. This is the key for integration with other tools. Use Jenkins integration as an example.","title":"DevOps"},{"location":"Intro/devops/#how-to-integrate-rapise-into-devops-pipeline","text":"","title":"How to Integrate Rapise into DevOps Pipeline"},{"location":"Intro/devops/#spiratest-recommended","text":"For test management and execution we recommend to use SpiraTest . Check out the integration guide and demonstration video .","title":"SpiraTest (recommended)"},{"location":"Intro/devops/#microsoft-tools","text":"If you use Azure DevOps or TFS we also have a solution: Azure DevOps integration v3 manual and video RapiseLauncher Extension for Azure DevOps Legacy Integrations: Azure DevOps integration v2 manual and video Visual Studio and Azure DevOps Integration v1 manual and video","title":"Microsoft Tools"},{"location":"Intro/devops/#jenkins-and-all-others","text":"Rapise has commend line interface and produces test reports in XML and Text formats. This is the key for integration with other tools. Use Jenkins integration as an example.","title":"Jenkins (and all others)"},{"location":"Intro/framework/","text":"How to Build a Test Framework with Rapise \u00b6 Need to call one test from another? Need to run many tests? Have a test plan? It is time to build a testing framework. Learn how to do it with Rapise. How Framework Tests Are Structured \u00b6 The Framework in Rapise is a regular test ( Framework Root ) containing a number of Sub-Tests ( Test Cases and Common Features ) Where Test Cases are final test scenarios and Common Features are parts that are re-used and shared between the test cases. When working with framework, the variable %WORKDIR% always points to the root test case. This helps to find all common assets and files. For example, we always know that we may call Common Feature1.sstest using path %WORKDIR%\\Common Feature1\\Common Feature1.sstest . So we may call it from any other test case, from other common feature, from library and so on. Also the same is true for accessing common config and data files. I.e. Tester . SetConfigPath ( '%WORKDIR%\\\\Config.xlsx' ) Saving a Framework into Spira \u00b6 The value of framework is in its consistency. There is one important rule that must be followed when saving framework to Spira: Framework root must be saved first. You need to save it at least once before saving any sub-tests. This will make sure that correct directory structure is defined in Spira. Once you saved a root test to the Spira, all sub-tests always saved together with it, whenever you do it form the root or from any of sub-tests. Right after saving a root test case you have a framework and may start expanding it. Saving a Framework into Git \u00b6 If you plan to maintain your framework using Git for source control , please make sure to init git repository at framework root level or higher. Thus Rapise will be able to detect it. Framework Navigation: Root Test, Parent Test, Sub-Tests \u00b6 There is a number of features intended to help one switching between test and sub-tests. The Files view shows all nested sub-tests. You may open any of them by double-clicking on the .sstest node: The test opens in the current Rapise instance. You may also open it in a new window using the Open in New Rapise Window... command from the Context Menu . You may then switch back to parent test or framework root by using Test/Open Root ...... and Test/Open Parent ..... menu items . Template Test Case and Clone \u00b6 Usual practice in Framework is to use the Clone feature to produce new sub-tests. So the template test is created and pre-configured (to contain right lib, functions and file references) and then replicated for each next cloned test case. Calling Other Tests \u00b6 There is a number of ways to call one sub test from another. Usually the test representing a scenario calls another test representing common routine or shared step. It is possible to pass some parameters to the called sub-test. In most cases you may use Drag&Drop from the Files view into text or RVL editor to generate a call statement. Executing Full Test \u00b6 From RVL: RVL.DoPlayTest From JS: Global.DoInvokeTest Execute One RVL Sheet from Current or Another Test in the Framework \u00b6 From either RVL or JS: RVL.DoPlayScript RVL.DoPlaySheet Parallel Test Execution \u00b6 From RVL: RVL.DoPlayTestParallel From JS: Global.DoInvokeTestParallel Dropdowns.xlsx \u00b6 Shared Libraries and Shared Functions more powerful with pre-defined dropdowns . For example, you may have a function NavigateToModule used across your framework and switching to an application module. Since we have fixed number of modules in the app (it may be a big number, but still fixed) we may define a dropdown list to make it easier for test creator to navigate without risk of doing a typo and without loss of time to find correct naming. Config.xlsx \u00b6 There is a Config file, that may be used for further Global.GetProperty and Global.SetProperty . This is an easy way to read and store various input configuration data: logins, URLs as well as output data (i.e. Internal Invoice ID used in the subsequent test cases). It is also explained in this video. Data.xlsx \u00b6 It is typical implement some test cases as data driven . And framework is a great place for storing the shared data files - usually .xlsx spreadsheets. Rapise has built in capabilities for creating and editing such spreadsheets. Global Objects \u00b6 It is useful to have one or more application specific global objects , sharing functionality needed by majority of test cases in your framework. It may do anything, starting from login and navigation and up to string formatting or text validation. Libraries \u00b6 One may define a custom library containing common functions, global objects or even rules for test playback , object learning and test recording . Sharing JS Files \u00b6 Simple way to have common shared logic is to have a common User.js file defining some functions. For more complex cases, you may have additional .js files and include them in tests. Profiles \u00b6 Local Web or Mobile Profiles makes it easier to configure the browsers for the whole framework. WebAppProfile.json \u00b6 For web tests the WebAppProfile may greatly improve the speed and quality of recording. The profile may be defined on the framework root and thus be effective when working on all the contained sub-tests. See Also \u00b6 Framework for Testing Web Applications with Rapise (video) Tests and Sub-Tests Passing Sub-Test Parameters (KB) Framework Example (GitHub) More Framework Examples (GitHub) Defining Global Objects RVL Parameter Dropdowns","title":"Frameworks"},{"location":"Intro/framework/#how-to-build-a-test-framework-with-rapise","text":"Need to call one test from another? Need to run many tests? Have a test plan? It is time to build a testing framework. Learn how to do it with Rapise.","title":"How to Build a Test Framework with Rapise"},{"location":"Intro/framework/#how-framework-tests-are-structured","text":"The Framework in Rapise is a regular test ( Framework Root ) containing a number of Sub-Tests ( Test Cases and Common Features ) Where Test Cases are final test scenarios and Common Features are parts that are re-used and shared between the test cases. When working with framework, the variable %WORKDIR% always points to the root test case. This helps to find all common assets and files. For example, we always know that we may call Common Feature1.sstest using path %WORKDIR%\\Common Feature1\\Common Feature1.sstest . So we may call it from any other test case, from other common feature, from library and so on. Also the same is true for accessing common config and data files. I.e. Tester . SetConfigPath ( '%WORKDIR%\\\\Config.xlsx' )","title":"How Framework Tests Are Structured"},{"location":"Intro/framework/#saving-a-framework-into-spira","text":"The value of framework is in its consistency. There is one important rule that must be followed when saving framework to Spira: Framework root must be saved first. You need to save it at least once before saving any sub-tests. This will make sure that correct directory structure is defined in Spira. Once you saved a root test to the Spira, all sub-tests always saved together with it, whenever you do it form the root or from any of sub-tests. Right after saving a root test case you have a framework and may start expanding it.","title":"Saving a Framework into Spira"},{"location":"Intro/framework/#saving-a-framework-into-git","text":"If you plan to maintain your framework using Git for source control , please make sure to init git repository at framework root level or higher. Thus Rapise will be able to detect it.","title":"Saving a Framework into Git"},{"location":"Intro/framework/#framework-navigation-root-test-parent-test-sub-tests","text":"There is a number of features intended to help one switching between test and sub-tests. The Files view shows all nested sub-tests. You may open any of them by double-clicking on the .sstest node: The test opens in the current Rapise instance. You may also open it in a new window using the Open in New Rapise Window... command from the Context Menu . You may then switch back to parent test or framework root by using Test/Open Root ...... and Test/Open Parent ..... menu items .","title":"Framework Navigation: Root Test, Parent Test, Sub-Tests"},{"location":"Intro/framework/#template-test-case-and-clone","text":"Usual practice in Framework is to use the Clone feature to produce new sub-tests. So the template test is created and pre-configured (to contain right lib, functions and file references) and then replicated for each next cloned test case.","title":"Template Test Case and Clone"},{"location":"Intro/framework/#calling-other-tests","text":"There is a number of ways to call one sub test from another. Usually the test representing a scenario calls another test representing common routine or shared step. It is possible to pass some parameters to the called sub-test. In most cases you may use Drag&Drop from the Files view into text or RVL editor to generate a call statement.","title":"Calling Other Tests"},{"location":"Intro/framework/#executing-full-test","text":"From RVL: RVL.DoPlayTest From JS: Global.DoInvokeTest","title":"Executing Full Test"},{"location":"Intro/framework/#execute-one-rvl-sheet-from-current-or-another-test-in-the-framework","text":"From either RVL or JS: RVL.DoPlayScript RVL.DoPlaySheet","title":"Execute One RVL Sheet from Current or Another Test in the Framework"},{"location":"Intro/framework/#parallel-test-execution","text":"From RVL: RVL.DoPlayTestParallel From JS: Global.DoInvokeTestParallel","title":"Parallel Test Execution"},{"location":"Intro/framework/#dropdownsxlsx","text":"Shared Libraries and Shared Functions more powerful with pre-defined dropdowns . For example, you may have a function NavigateToModule used across your framework and switching to an application module. Since we have fixed number of modules in the app (it may be a big number, but still fixed) we may define a dropdown list to make it easier for test creator to navigate without risk of doing a typo and without loss of time to find correct naming.","title":"Dropdowns.xlsx"},{"location":"Intro/framework/#configxlsx","text":"There is a Config file, that may be used for further Global.GetProperty and Global.SetProperty . This is an easy way to read and store various input configuration data: logins, URLs as well as output data (i.e. Internal Invoice ID used in the subsequent test cases). It is also explained in this video.","title":"Config.xlsx"},{"location":"Intro/framework/#dataxlsx","text":"It is typical implement some test cases as data driven . And framework is a great place for storing the shared data files - usually .xlsx spreadsheets. Rapise has built in capabilities for creating and editing such spreadsheets.","title":"Data.xlsx"},{"location":"Intro/framework/#global-objects","text":"It is useful to have one or more application specific global objects , sharing functionality needed by majority of test cases in your framework. It may do anything, starting from login and navigation and up to string formatting or text validation.","title":"Global Objects"},{"location":"Intro/framework/#libraries","text":"One may define a custom library containing common functions, global objects or even rules for test playback , object learning and test recording .","title":"Libraries"},{"location":"Intro/framework/#sharing-js-files","text":"Simple way to have common shared logic is to have a common User.js file defining some functions. For more complex cases, you may have additional .js files and include them in tests.","title":"Sharing JS Files"},{"location":"Intro/framework/#profiles","text":"Local Web or Mobile Profiles makes it easier to configure the browsers for the whole framework.","title":"Profiles"},{"location":"Intro/framework/#webappprofilejson","text":"For web tests the WebAppProfile may greatly improve the speed and quality of recording. The profile may be defined on the framework root and thus be effective when working on all the contained sub-tests.","title":"WebAppProfile.json"},{"location":"Intro/framework/#see-also","text":"Framework for Testing Web Applications with Rapise (video) Tests and Sub-Tests Passing Sub-Test Parameters (KB) Framework Example (GitHub) More Framework Examples (GitHub) Defining Global Objects RVL Parameter Dropdowns","title":"See Also"},{"location":"Intro/orientation/","text":"Know Your Way Around \u00b6 Basic Navigation \u00b6 1 - Main Menu Use main menu to create new tests, change test settings and global options . 2 - Main Toolbar Use the main toolbar to start recording and playback and to quickly switch between test components. Test opens Main.js - entry point of a test. User opens User.js - place for custom JavaScript functions. RVL opens RVL spreadsheet. 3 - RVL Columns Most used RVL columns are Object , Action and ParamValue . Use them to modify and create new test steps. 4 - Object in the Object Tree The Object Tree contains objects captured during recording of a test. 5 - Object Tree and Files View The Object Tree displays the repository of objects. Switch to Files View to navigate through the files of the test. 6 - Object Properties This pane displays the properties of a selected object. 7 - Output View Output view is a collection of tabs to display test execution log, JavaScript warnings and errors and search results. 8 - Profile Dropdown The dropdown allows to switch Browser , Selenium or Mobile profile. RVL Popup Menu \u00b6 The popup menu is most frequently used to Work with an object Find an object in the Object Tree Flash the object - find and highlight it in the application. Show locator property of the object. E.g. XPath for Web tests. Rename the object and automatically update all references in RVL. Play specific steps of a test Play This Sheet - execute actions from the active sheet. Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately. Play from Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped. Edit Rows Insert/delete a row. Copy/paste rows See full list of menu items here . Object Popup Menu \u00b6 The popup menu us most frequently used to Flash and Re-Learn an object. See full list of menu items here . See Also \u00b6 Main Menu and Toolbars","title":"Know Your Way Around"},{"location":"Intro/orientation/#know-your-way-around","text":"","title":"Know Your Way Around"},{"location":"Intro/orientation/#basic-navigation","text":"1 - Main Menu Use main menu to create new tests, change test settings and global options . 2 - Main Toolbar Use the main toolbar to start recording and playback and to quickly switch between test components. Test opens Main.js - entry point of a test. User opens User.js - place for custom JavaScript functions. RVL opens RVL spreadsheet. 3 - RVL Columns Most used RVL columns are Object , Action and ParamValue . Use them to modify and create new test steps. 4 - Object in the Object Tree The Object Tree contains objects captured during recording of a test. 5 - Object Tree and Files View The Object Tree displays the repository of objects. Switch to Files View to navigate through the files of the test. 6 - Object Properties This pane displays the properties of a selected object. 7 - Output View Output view is a collection of tabs to display test execution log, JavaScript warnings and errors and search results. 8 - Profile Dropdown The dropdown allows to switch Browser , Selenium or Mobile profile.","title":"Basic Navigation"},{"location":"Intro/orientation/#rvl-popup-menu","text":"The popup menu is most frequently used to Work with an object Find an object in the Object Tree Flash the object - find and highlight it in the application. Show locator property of the object. E.g. XPath for Web tests. Rename the object and automatically update all references in RVL. Play specific steps of a test Play This Sheet - execute actions from the active sheet. Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately. Play from Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped. Edit Rows Insert/delete a row. Copy/paste rows See full list of menu items here .","title":"RVL Popup Menu"},{"location":"Intro/orientation/#object-popup-menu","text":"The popup menu us most frequently used to Flash and Re-Learn an object. See full list of menu items here .","title":"Object Popup Menu"},{"location":"Intro/orientation/#see-also","text":"Main Menu and Toolbars","title":"See Also"},{"location":"Intro/training/","text":"Training \u00b6 We can train your QA team to effectively use Rapise for UI test automation. If you are switching from manual testing it is a highly recommended option for you. Please contact sales@inflectra.com to arrange. Training may be a part of Rapise Quick-Start implementation package . Overview \u00b6 The proposed training is an interactive process. Our instructors both provide online sessions and give lab tasks to check the level of understanding of participants. The implementation of lab tasks by the participants requires them to have the necessary prerequisites (have a computer available, Rapise is installed and licensed on the computer, have access to training SpiraTest instance and have certain amount of time to attend sessions and complete lab tasks). We provide sessions via GoToMeeting. The length of each session is about 1 hour. Each session starts from review of lab tasks assigned in the previous session and comments about any common issues. Also it contains a Q&A section for questions asked in the previous session. Then at the end of the session there is another Q&A section where instructors collect new questions: some questions are answered immediately and others are answered in the next session. We expect that participants deliver lab results at the end of the day following the day of a session and then the next day our instructors check the completed lab tasks. This process allows to have two sessions per week. Prerequisites \u00b6 Each person attending training should have: Individual PC with Rapise installed Access to training SpiraTest instance Access to demo applications Sample Training Plan \u00b6 We adjust training plans according to customer needs. Here is an example of such a plan. Session 1: Rapise Basics \u00b6 Topics Rapise IDE Basics Getting Help Report View Test Automation Tips & Tricks Recording Execution Spira Integration Basics Lab Tasks Record and playback a simple test. Upload result to SpiraTest. Session 2: Rapise Visual Language \u00b6 Topics RVL Data-driven Testing Lab Tasks Implement a test scenario in RVL. Session 3: JavaScript Basics \u00b6 Topics JavaScript Basics Lab Tasks Write a function in JavaScript according to a specification. Session 4: Cross-browser Testing \u00b6 Topics Cross-browser Testing Web Testing Web Spy XPATH Lab Tasks Using WebSpy build and test XPATH expressions for specific elements on a given Web page. Session 5: SpiraTest Integration \u00b6 Topics SpiraTest Integration Test Management in Spira RapiseLauncher Lab Tasks Save a test to SpiraTest and execute it via RapiseLauncher with passing configuration parameters from SpiraTest. Session 6: Frameworks \u00b6 Topics Sub-tests Invoke One Test from Another Custom Library Lab Tasks Implement a demo test case using features of the presented framework. Session 7: Dynamics 365 for Sales \u00b6 Topics Recording Tips Launching Dynamics UI Controls Supported by Rapise Lab Tasks Implement a test case for demo Dynamics CRM instance. Session 8: JavaScript in Rapise \u00b6 Topics How to write Custom Functions using Rapise API Lab Tasks Write a custom function interacting with Web elements on the page and using Rapise API.","title":"Training"},{"location":"Intro/training/#training","text":"We can train your QA team to effectively use Rapise for UI test automation. If you are switching from manual testing it is a highly recommended option for you. Please contact sales@inflectra.com to arrange. Training may be a part of Rapise Quick-Start implementation package .","title":"Training"},{"location":"Intro/training/#overview","text":"The proposed training is an interactive process. Our instructors both provide online sessions and give lab tasks to check the level of understanding of participants. The implementation of lab tasks by the participants requires them to have the necessary prerequisites (have a computer available, Rapise is installed and licensed on the computer, have access to training SpiraTest instance and have certain amount of time to attend sessions and complete lab tasks). We provide sessions via GoToMeeting. The length of each session is about 1 hour. Each session starts from review of lab tasks assigned in the previous session and comments about any common issues. Also it contains a Q&A section for questions asked in the previous session. Then at the end of the session there is another Q&A section where instructors collect new questions: some questions are answered immediately and others are answered in the next session. We expect that participants deliver lab results at the end of the day following the day of a session and then the next day our instructors check the completed lab tasks. This process allows to have two sessions per week.","title":"Overview"},{"location":"Intro/training/#prerequisites","text":"Each person attending training should have: Individual PC with Rapise installed Access to training SpiraTest instance Access to demo applications","title":"Prerequisites"},{"location":"Intro/training/#sample-training-plan","text":"We adjust training plans according to customer needs. Here is an example of such a plan.","title":"Sample Training Plan"},{"location":"Intro/training/#session-1-rapise-basics","text":"Topics Rapise IDE Basics Getting Help Report View Test Automation Tips & Tricks Recording Execution Spira Integration Basics Lab Tasks Record and playback a simple test. Upload result to SpiraTest.","title":"Session 1: Rapise Basics"},{"location":"Intro/training/#session-2-rapise-visual-language","text":"Topics RVL Data-driven Testing Lab Tasks Implement a test scenario in RVL.","title":"Session 2: Rapise Visual Language"},{"location":"Intro/training/#session-3-javascript-basics","text":"Topics JavaScript Basics Lab Tasks Write a function in JavaScript according to a specification.","title":"Session 3: JavaScript Basics"},{"location":"Intro/training/#session-4-cross-browser-testing","text":"Topics Cross-browser Testing Web Testing Web Spy XPATH Lab Tasks Using WebSpy build and test XPATH expressions for specific elements on a given Web page.","title":"Session 4: Cross-browser Testing"},{"location":"Intro/training/#session-5-spiratest-integration","text":"Topics SpiraTest Integration Test Management in Spira RapiseLauncher Lab Tasks Save a test to SpiraTest and execute it via RapiseLauncher with passing configuration parameters from SpiraTest.","title":"Session 5: SpiraTest Integration"},{"location":"Intro/training/#session-6-frameworks","text":"Topics Sub-tests Invoke One Test from Another Custom Library Lab Tasks Implement a demo test case using features of the presented framework.","title":"Session 6: Frameworks"},{"location":"Intro/training/#session-7-dynamics-365-for-sales","text":"Topics Recording Tips Launching Dynamics UI Controls Supported by Rapise Lab Tasks Implement a test case for demo Dynamics CRM instance.","title":"Session 7: Dynamics 365 for Sales"},{"location":"Intro/training/#session-8-javascript-in-rapise","text":"Topics How to write Custom Functions using Rapise API Lab Tasks Write a custom function interacting with Web elements on the page and using Rapise API.","title":"Session 8: JavaScript in Rapise"},{"location":"Intro/uitap/","text":"Web UI Test Automation Playground \u00b6 If you are new to UI test automation then you may be interested in developing your skills using a a collection of tasks that we created. It is a playground where everyone can try to solve typical technical problems of automation. Check it out","title":"Playground"},{"location":"Intro/uitap/#web-ui-test-automation-playground","text":"If you are new to UI test automation then you may be interested in developing your skills using a a collection of tasks that we created. It is a playground where everyone can try to solve typical technical problems of automation. Check it out","title":"Web UI Test Automation Playground"},{"location":"Intro/webinars/","text":"Webinars \u00b6 For upcoming webinars please check the Events page on our company website. Series \u00b6 Season 2021 \u00b6 Parallel Execution of Tests with Rapise & SpiraTest Playing UFT-QTP Scripts with Rapise Testing OracleForms Applications with Rapise Mobile Testing in a Device Cloud with Rapise Behavior Driven Testing with Rapise and Cucumber JS InflectraCon 2020 \u00b6 Workshops \u00b6 Playlist From Manual to Automated Testing Starting Your Automation Journey Framework for Testing Web Applications with Rapise Automating Web UI Testing Automating Desktop UI Testing (Part 1) Automating Desktop UI Testing (Part 2) Automating Desktop UI Testing (Part 3) Automating Mobile UI Testing Advanced Topics \u00b6 Playlist New Features in Rapise v6.6 25 Tips and Tricks of Using Rapise Scriptless, Codeless, Visual How to Benefit From Self-Healing Locators Web Recorder Configuration in Rapise Test Automation Demystified \u00b6 Playlist Part 1: From Manual to Automated Testing Part 2: Is Application Ready for Test Automation? Part 3: Choosing A Test Automation Tool: 8 Features That Matter Part 4: Friends & Foes of Software Test Automation Part 5: Codeless Test Automation Part 6: Scenarios, or Why Some Automation Projects Fail Part 7: AI In Test Automation Planet Test Automation \u00b6 Playlist Part 1: Automating Web UI Testing Part 2: Automating Desktop UI Testing Part 3: Automating Mobile UI Testing Part 4: Automating REST/SOAP API Testing Part 5: Data-Driven Testing UI Automation 101 \u00b6 Playlist Working With Navigation & Menus Tables, Grids And Trees Dropdown Controls, Date Pickers & Sliders Little Known Ways To Leverage RVL 5 Ways To Use Rapise Frameworks Testing Microsoft Dynamics \u00b6 Playlist How To Test MS Dynamics NAV Through The UI Like A Pro How To Test MS Dynamics AX Through The UI Like A Pro How To Test MS Dynamics 365 for Sales Through The UI Like A Pro How To Test MS Dynamics 365 for Finance & Operations Through The UI How To Test MS Dynamics Unified Service Desk Through The UI Singles \u00b6 Highlights \u00b6 Rapise 7.2 Rapise 7.1 Rapise 7.0 Rapise 6.7 Rapise 6.6 Rapise 6.4 Rapise 6.3 Rapise 6.2 Rapise 6.1 Introductions \u00b6 Getting Started Playlist Using Rapise with SpiraTest Introduction To Powerful New Rapise 6 Discover Test Automation With Rapise 6 Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools","title":"Recorded Webinars"},{"location":"Intro/webinars/#webinars","text":"For upcoming webinars please check the Events page on our company website.","title":"Webinars"},{"location":"Intro/webinars/#series","text":"","title":"Series"},{"location":"Intro/webinars/#season-2021","text":"Parallel Execution of Tests with Rapise & SpiraTest Playing UFT-QTP Scripts with Rapise Testing OracleForms Applications with Rapise Mobile Testing in a Device Cloud with Rapise Behavior Driven Testing with Rapise and Cucumber JS","title":"Season 2021"},{"location":"Intro/webinars/#inflectracon-2020","text":"","title":"InflectraCon 2020"},{"location":"Intro/webinars/#workshops","text":"Playlist From Manual to Automated Testing Starting Your Automation Journey Framework for Testing Web Applications with Rapise Automating Web UI Testing Automating Desktop UI Testing (Part 1) Automating Desktop UI Testing (Part 2) Automating Desktop UI Testing (Part 3) Automating Mobile UI Testing","title":"Workshops"},{"location":"Intro/webinars/#advanced-topics","text":"Playlist New Features in Rapise v6.6 25 Tips and Tricks of Using Rapise Scriptless, Codeless, Visual How to Benefit From Self-Healing Locators Web Recorder Configuration in Rapise","title":"Advanced Topics"},{"location":"Intro/webinars/#test-automation-demystified","text":"Playlist Part 1: From Manual to Automated Testing Part 2: Is Application Ready for Test Automation? Part 3: Choosing A Test Automation Tool: 8 Features That Matter Part 4: Friends & Foes of Software Test Automation Part 5: Codeless Test Automation Part 6: Scenarios, or Why Some Automation Projects Fail Part 7: AI In Test Automation","title":"Test Automation Demystified"},{"location":"Intro/webinars/#planet-test-automation","text":"Playlist Part 1: Automating Web UI Testing Part 2: Automating Desktop UI Testing Part 3: Automating Mobile UI Testing Part 4: Automating REST/SOAP API Testing Part 5: Data-Driven Testing","title":"Planet Test Automation"},{"location":"Intro/webinars/#ui-automation-101","text":"Playlist Working With Navigation & Menus Tables, Grids And Trees Dropdown Controls, Date Pickers & Sliders Little Known Ways To Leverage RVL 5 Ways To Use Rapise Frameworks","title":"UI Automation 101"},{"location":"Intro/webinars/#testing-microsoft-dynamics","text":"Playlist How To Test MS Dynamics NAV Through The UI Like A Pro How To Test MS Dynamics AX Through The UI Like A Pro How To Test MS Dynamics 365 for Sales Through The UI Like A Pro How To Test MS Dynamics 365 for Finance & Operations Through The UI How To Test MS Dynamics Unified Service Desk Through The UI","title":"Testing Microsoft Dynamics"},{"location":"Intro/webinars/#singles","text":"","title":"Singles"},{"location":"Intro/webinars/#highlights","text":"Rapise 7.2 Rapise 7.1 Rapise 7.0 Rapise 6.7 Rapise 6.6 Rapise 6.4 Rapise 6.3 Rapise 6.2 Rapise 6.1","title":"Highlights"},{"location":"Intro/webinars/#introductions","text":"Getting Started Playlist Using Rapise with SpiraTest Introduction To Powerful New Rapise 6 Discover Test Automation With Rapise 6 Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools","title":"Introductions"},{"location":"Libraries/Actions/","text":"Actions \u00b6 This is a JavaScript wrapper for Actions of Selenium .NET library. Action Summary \u00b6 Action Description Build Builds the sequence of actions. Click Clicks the mouse on the specified element. ClickAndHold Clicks and holds the mouse button down on the specified element. ContextClick Right-clicks the mouse on the specified element. DoubleClick Double-clicks the mouse on the specified element. DragAndDrop Performs a drag-and-drop operation from one element to another. DragAndDropToOffset Performs a drag-and-drop operation on one element to a specified offset. KeyDown Sends a modifier key down message to the specified element in the browser. KeyUp Sends a modifier key up message to the specified element in the browser. MoveByOffset Moves the mouse to the specified offset of the last known mouse coordinates. MoveToElement Moves the mouse to the specified offset of the top-left corner of the specified element. Perform Performs the currently built action. Release Releases the mouse button on the specified element. SendKeys Sends a sequence of keystrokes to the specified element in the browser. Action Detail \u00b6 Build \u00b6 Builds the sequence of actions. Build () Returns: A self-reference. Click \u00b6 Clicks the mouse on the specified element. If no element is specified clicks the mouse at the last known mouse coordinates. Click ( el ) Parameters: Name Type Description el WebElement The element on which to click. Optional. Returns: A self-reference. ClickAndHold \u00b6 Clicks and holds the mouse button down on the specified element. If no element is specified clicks and holds the mouse button at the last known mouse coordinates. ClickAndHold ( el ) Parameters: Name Type Description el WebElement The element on which to click and hold. Optional. Returns: A self-reference. ContextClick \u00b6 Right-clicks the mouse on the specified element. If no element is specified right-clicks the mouse at the last known mouse coordinates. ContextClick ( el ) Parameters: Name Type Description el WebElement The element on which to right-click. Optional. Returns: A self-reference. DoubleClick \u00b6 Double-clicks the mouse on the specified element. If no element is specified double-clicks the mouse at the last known mouse coordinates. DoubleClick ( el ) Parameters: Name Type Description el WebElement The element on which to double-click. Optional. Returns: A self-reference. DragAndDrop \u00b6 Performs a drag-and-drop operation from one element to another. DragAndDrop ( source , target ) Parameters: Name Type Description source WebElement The element on which the drag operation is started. target WebElement The element on which the drop is performed. Returns: A self-reference. DragAndDropToOffset \u00b6 Performs a drag-and-drop operation on one element to a specified offset. DragAndDropToOffset ( source , offsetX , offsetY ) Parameters: Name Type Description source WebElement The element on which the drag operation is started. offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. Returns: A self-reference. KeyDown \u00b6 Sends a modifier key down message to the specified element in the browser. If no element is specified sends a modifier key down message to the browser. KeyDown ( theKey , el ) Parameters: Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElement The element to which to send the key command. Optional. Returns: A self-reference. KeyUp \u00b6 Sends a modifier key up message to the specified element in the browser. If no element is specified sends a modifier key up message to the browser. KeyUp ( theKey , el ) Parameters: Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElement The element to which to send the key command. Optional. Returns: A self-reference. MoveByOffset \u00b6 Moves the mouse to the specified offset of the last known mouse coordinates. MoveByOffset ( offsetX , offsetY ) Parameters: Name Type Description offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. Returns: A self-reference. MoveToElement \u00b6 Moves the mouse to the specified offset of the top-left corner of the specified element. If offset is not specified moves the mouse to the specified element. MoveToElement ( el , offsetX , offsetY ) Parameters: Name Type Description el WebElement The element to which to move the mouse. offsetX number The horizontal offset to which to move the mouse. Optional. offsetY number The vertical offset to which to move the mouse. Optional. Returns: A self-reference. Perform \u00b6 Performs the currently built action. Perform () Release \u00b6 Releases the mouse button on the specified element. If no element is specified releases the mouse button at the last known mouse coordinates. Release ( el ) Parameters: Name Type Description el WebElement The element on which to release the button. Optional. Returns: A self-reference. SendKeys \u00b6 Sends a sequence of keystrokes to the specified element in the browser. If no element is specified sends a sequence of keystrokes to the browser. SendKeys ( keysToSend , el ) Parameters: Name Type Description keysToSend string The keystrokes to send to the browser. el WebElement The element to which to send the keystrokes. Optional. Returns: A self-reference.","title":"Actions"},{"location":"Libraries/Actions/#actions","text":"This is a JavaScript wrapper for Actions of Selenium .NET library.","title":"Actions"},{"location":"Libraries/Actions/#action-summary","text":"Action Description Build Builds the sequence of actions. Click Clicks the mouse on the specified element. ClickAndHold Clicks and holds the mouse button down on the specified element. ContextClick Right-clicks the mouse on the specified element. DoubleClick Double-clicks the mouse on the specified element. DragAndDrop Performs a drag-and-drop operation from one element to another. DragAndDropToOffset Performs a drag-and-drop operation on one element to a specified offset. KeyDown Sends a modifier key down message to the specified element in the browser. KeyUp Sends a modifier key up message to the specified element in the browser. MoveByOffset Moves the mouse to the specified offset of the last known mouse coordinates. MoveToElement Moves the mouse to the specified offset of the top-left corner of the specified element. Perform Performs the currently built action. Release Releases the mouse button on the specified element. SendKeys Sends a sequence of keystrokes to the specified element in the browser.","title":"Action Summary"},{"location":"Libraries/Actions/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Actions/#build","text":"Builds the sequence of actions. Build () Returns: A self-reference.","title":"Build"},{"location":"Libraries/Actions/#click","text":"Clicks the mouse on the specified element. If no element is specified clicks the mouse at the last known mouse coordinates. Click ( el ) Parameters: Name Type Description el WebElement The element on which to click. Optional. Returns: A self-reference.","title":"Click"},{"location":"Libraries/Actions/#clickandhold","text":"Clicks and holds the mouse button down on the specified element. If no element is specified clicks and holds the mouse button at the last known mouse coordinates. ClickAndHold ( el ) Parameters: Name Type Description el WebElement The element on which to click and hold. Optional. Returns: A self-reference.","title":"ClickAndHold"},{"location":"Libraries/Actions/#contextclick","text":"Right-clicks the mouse on the specified element. If no element is specified right-clicks the mouse at the last known mouse coordinates. ContextClick ( el ) Parameters: Name Type Description el WebElement The element on which to right-click. Optional. Returns: A self-reference.","title":"ContextClick"},{"location":"Libraries/Actions/#doubleclick","text":"Double-clicks the mouse on the specified element. If no element is specified double-clicks the mouse at the last known mouse coordinates. DoubleClick ( el ) Parameters: Name Type Description el WebElement The element on which to double-click. Optional. Returns: A self-reference.","title":"DoubleClick"},{"location":"Libraries/Actions/#draganddrop","text":"Performs a drag-and-drop operation from one element to another. DragAndDrop ( source , target ) Parameters: Name Type Description source WebElement The element on which the drag operation is started. target WebElement The element on which the drop is performed. Returns: A self-reference.","title":"DragAndDrop"},{"location":"Libraries/Actions/#draganddroptooffset","text":"Performs a drag-and-drop operation on one element to a specified offset. DragAndDropToOffset ( source , offsetX , offsetY ) Parameters: Name Type Description source WebElement The element on which the drag operation is started. offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. Returns: A self-reference.","title":"DragAndDropToOffset"},{"location":"Libraries/Actions/#keydown","text":"Sends a modifier key down message to the specified element in the browser. If no element is specified sends a modifier key down message to the browser. KeyDown ( theKey , el ) Parameters: Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElement The element to which to send the key command. Optional. Returns: A self-reference.","title":"KeyDown"},{"location":"Libraries/Actions/#keyup","text":"Sends a modifier key up message to the specified element in the browser. If no element is specified sends a modifier key up message to the browser. KeyUp ( theKey , el ) Parameters: Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElement The element to which to send the key command. Optional. Returns: A self-reference.","title":"KeyUp"},{"location":"Libraries/Actions/#movebyoffset","text":"Moves the mouse to the specified offset of the last known mouse coordinates. MoveByOffset ( offsetX , offsetY ) Parameters: Name Type Description offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. Returns: A self-reference.","title":"MoveByOffset"},{"location":"Libraries/Actions/#movetoelement","text":"Moves the mouse to the specified offset of the top-left corner of the specified element. If offset is not specified moves the mouse to the specified element. MoveToElement ( el , offsetX , offsetY ) Parameters: Name Type Description el WebElement The element to which to move the mouse. offsetX number The horizontal offset to which to move the mouse. Optional. offsetY number The vertical offset to which to move the mouse. Optional. Returns: A self-reference.","title":"MoveToElement"},{"location":"Libraries/Actions/#perform","text":"Performs the currently built action. Perform ()","title":"Perform"},{"location":"Libraries/Actions/#release","text":"Releases the mouse button on the specified element. If no element is specified releases the mouse button at the last known mouse coordinates. Release ( el ) Parameters: Name Type Description el WebElement The element on which to release the button. Optional. Returns: A self-reference.","title":"Release"},{"location":"Libraries/Actions/#sendkeys","text":"Sends a sequence of keystrokes to the specified element in the browser. If no element is specified sends a sequence of keystrokes to the browser. SendKeys ( keysToSend , el ) Parameters: Name Type Description keysToSend string The keystrokes to send to the browser. el WebElement The element to which to send the keystrokes. Optional. Returns: A self-reference.","title":"SendKeys"},{"location":"Libraries/ActiveXObject/","text":"ActiveXObject \u00b6 ActiveX Object. Extends SeSSimulatedObject","title":"ActiveXObject"},{"location":"Libraries/ActiveXObject/#activexobject","text":"ActiveX Object. Extends SeSSimulatedObject","title":"ActiveXObject"},{"location":"Libraries/ActiveXSftTreeRule/","text":"ActiveXSftTreeRule \u00b6","title":"ActiveXSftTreeRule"},{"location":"Libraries/ActiveXSftTreeRule/#activexsfttreerule","text":"","title":"ActiveXSftTreeRule"},{"location":"Libraries/Android/","text":"Android \u00b6 Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test. Action Summary \u00b6 Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoPressBack Presses Back button. DoPressHome Presses Home button. DoPressKeyCode Presses key with code. DoPressMenu Presses Menu button. DoScreenshot Makes screenshot of a device. DoStartActivity Starts activity. DoStartVideoRecording Starts video recording on a device. DoStopVideoRecording Stops video recording on a device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. SetContext Sets context. Action Detail \u00b6 DoFlick \u00b6 Flick action. DoFlick ( endX , endY , startX , startY , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise. DoGoToUrl \u00b6 Opens URL in active browser. DoGoToUrl ( url ) Parameters: Name Type Description url string Returns: 'true' if successful, 'false' otherwise. DoPressBack \u00b6 Presses Back button. DoPressBack () Returns: 'true' if successful, 'false' otherwise. DoPressHome \u00b6 Presses Home button. DoPressHome () Returns: 'true' if successful, 'false' otherwise. DoPressKeyCode \u00b6 Presses key with code. DoPressKeyCode ( keyCode ) Parameters: Name Type Description keyCode number Key code: http://developer.android.com/reference/android/view/KeyEvent.html Returns: 'true' if successful, 'false' otherwise. DoPressMenu \u00b6 Presses Menu button. DoPressMenu () Returns: 'true' if successful, 'false' otherwise. DoScreenshot \u00b6 Makes screenshot of a device. DoScreenshot () Returns: 'true' if successful, 'false' otherwise. DoStartActivity \u00b6 Starts activity. DoStartActivity ( appPackage , appActivity ) Parameters: Name Type Description appPackage string Package name. appActivity string Activity name. Returns: 'true' if successful, 'false' otherwise. DoStartVideoRecording \u00b6 Starts video recording on a device. DoStartVideoRecording () Returns: 'true' if successful, 'false' otherwise. DoStopVideoRecording \u00b6 Stops video recording on a device. DoStopVideoRecording () Returns: 'true' if successful, 'false' otherwise. DoSwipe \u00b6 Swipe action. DoSwipe ( endX , endY , startX , startY , duration , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. duration number time (in seconds) to spend performing the swipe/drag Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise. DoTap \u00b6 Tap screen. DoTap ( x , y , duration , tapCount , touchCount ) Parameters: Name Type Description x number x coordinate to tap (in pixels or relative units) Optional. y number y coordinate to tap (in pixels or relative units) Optional. duration number how long (in seconds) to tap Optional. tapCount number how many times to tap Optional. touchCount number how many fingers to tap with Optional. Returns: 'true' if successful, 'false' otherwise. GetCapability \u00b6 Gets capability with specified name. GetCapability ( name ) Parameters: Name Type Description name string Name of a capability. Returns: Capability string. GetContext \u00b6 Gets current context. GetContext () Returns: Either NATIVE_APP or WEBVIEW_1. SetContext \u00b6 Sets context. SetContext ( name ) Parameters: Name Type Description name string Either NATIVE_APP or WEBVIEW_1.","title":"Android"},{"location":"Libraries/Android/#android","text":"Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.","title":"Android"},{"location":"Libraries/Android/#action-summary","text":"Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoPressBack Presses Back button. DoPressHome Presses Home button. DoPressKeyCode Presses key with code. DoPressMenu Presses Menu button. DoScreenshot Makes screenshot of a device. DoStartActivity Starts activity. DoStartVideoRecording Starts video recording on a device. DoStopVideoRecording Stops video recording on a device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. SetContext Sets context.","title":"Action Summary"},{"location":"Libraries/Android/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Android/#doflick","text":"Flick action. DoFlick ( endX , endY , startX , startY , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoFlick"},{"location":"Libraries/Android/#dogotourl","text":"Opens URL in active browser. DoGoToUrl ( url ) Parameters: Name Type Description url string Returns: 'true' if successful, 'false' otherwise.","title":"DoGoToUrl"},{"location":"Libraries/Android/#dopressback","text":"Presses Back button. DoPressBack () Returns: 'true' if successful, 'false' otherwise.","title":"DoPressBack"},{"location":"Libraries/Android/#dopresshome","text":"Presses Home button. DoPressHome () Returns: 'true' if successful, 'false' otherwise.","title":"DoPressHome"},{"location":"Libraries/Android/#dopresskeycode","text":"Presses key with code. DoPressKeyCode ( keyCode ) Parameters: Name Type Description keyCode number Key code: http://developer.android.com/reference/android/view/KeyEvent.html Returns: 'true' if successful, 'false' otherwise.","title":"DoPressKeyCode"},{"location":"Libraries/Android/#dopressmenu","text":"Presses Menu button. DoPressMenu () Returns: 'true' if successful, 'false' otherwise.","title":"DoPressMenu"},{"location":"Libraries/Android/#doscreenshot","text":"Makes screenshot of a device. DoScreenshot () Returns: 'true' if successful, 'false' otherwise.","title":"DoScreenshot"},{"location":"Libraries/Android/#dostartactivity","text":"Starts activity. DoStartActivity ( appPackage , appActivity ) Parameters: Name Type Description appPackage string Package name. appActivity string Activity name. Returns: 'true' if successful, 'false' otherwise.","title":"DoStartActivity"},{"location":"Libraries/Android/#dostartvideorecording","text":"Starts video recording on a device. DoStartVideoRecording () Returns: 'true' if successful, 'false' otherwise.","title":"DoStartVideoRecording"},{"location":"Libraries/Android/#dostopvideorecording","text":"Stops video recording on a device. DoStopVideoRecording () Returns: 'true' if successful, 'false' otherwise.","title":"DoStopVideoRecording"},{"location":"Libraries/Android/#doswipe","text":"Swipe action. DoSwipe ( endX , endY , startX , startY , duration , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. duration number time (in seconds) to spend performing the swipe/drag Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoSwipe"},{"location":"Libraries/Android/#dotap","text":"Tap screen. DoTap ( x , y , duration , tapCount , touchCount ) Parameters: Name Type Description x number x coordinate to tap (in pixels or relative units) Optional. y number y coordinate to tap (in pixels or relative units) Optional. duration number how long (in seconds) to tap Optional. tapCount number how many times to tap Optional. touchCount number how many fingers to tap with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoTap"},{"location":"Libraries/Android/#getcapability","text":"Gets capability with specified name. GetCapability ( name ) Parameters: Name Type Description name string Name of a capability. Returns: Capability string.","title":"GetCapability"},{"location":"Libraries/Android/#getcontext","text":"Gets current context. GetContext () Returns: Either NATIVE_APP or WEBVIEW_1.","title":"GetContext"},{"location":"Libraries/Android/#setcontext","text":"Sets context. SetContext ( name ) Parameters: Name Type Description name string Either NATIVE_APP or WEBVIEW_1.","title":"SetContext"},{"location":"Libraries/AndroidButton/","text":"AndroidButton \u00b6 Android Button. Extends AndroidObject Behavior Pattern: AndroidObjectButtonBehavior","title":"AndroidButton"},{"location":"Libraries/AndroidButton/#androidbutton","text":"Android Button. Extends AndroidObject Behavior Pattern: AndroidObjectButtonBehavior","title":"AndroidButton"},{"location":"Libraries/AndroidCheckBox/","text":"AndroidCheckBox \u00b6 Android CheckBox. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidCheckBox"},{"location":"Libraries/AndroidCheckBox/#androidcheckbox","text":"Android CheckBox. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior","title":"AndroidCheckBox"},{"location":"Libraries/AndroidCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/AndroidCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/AndroidCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/AndroidCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/AndroidEditBox/","text":"AndroidEditBox \u00b6 Android EditBox. Extends AndroidObject Behavior Pattern: AndroidObjectEditTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidEditBox"},{"location":"Libraries/AndroidEditBox/#androideditbox","text":"Android EditBox. Extends AndroidObject Behavior Pattern: AndroidObjectEditTextBehavior","title":"AndroidEditBox"},{"location":"Libraries/AndroidEditBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/AndroidEditBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/AndroidEditBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidEditBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/AndroidEditBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidEditBox/#dosettext","text":"Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/AndroidImageButton/","text":"AndroidImageButton \u00b6 Android ImageButton. Extends AndroidObject Behavior Pattern: AndroidObjectButtonBehavior","title":"AndroidImageButton"},{"location":"Libraries/AndroidImageButton/#androidimagebutton","text":"Android ImageButton. Extends AndroidObject Behavior Pattern: AndroidObjectButtonBehavior","title":"AndroidImageButton"},{"location":"Libraries/AndroidImageView/","text":"AndroidImageView \u00b6 Android ImageView. Extends AndroidObject Behavior Pattern: AndroidObjectImageViewBehavior","title":"AndroidImageView"},{"location":"Libraries/AndroidImageView/#androidimageview","text":"Android ImageView. Extends AndroidObject Behavior Pattern: AndroidObjectImageViewBehavior","title":"AndroidImageView"},{"location":"Libraries/AndroidLabel/","text":"AndroidLabel \u00b6 Android Label. Extends AndroidObject Behavior Pattern: AndroidObjectLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"AndroidLabel"},{"location":"Libraries/AndroidLabel/#androidlabel","text":"Android Label. Extends AndroidObject Behavior Pattern: AndroidObjectLabelBehavior","title":"AndroidLabel"},{"location":"Libraries/AndroidLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/AndroidLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/AndroidListView/","text":"AndroidListView \u00b6 Android ListView. Extends AndroidObject Behavior Pattern: AndroidObjectListViewSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName Action Summary \u00b6 Action Description DoSelectItem Selects an item with the specified index. Property Detail \u00b6 ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName Action Detail \u00b6 DoSelectItem \u00b6 Selects an item with the specified index. DoSelectItem ( index ) Parameters: Name Type Description index number Item index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidListView"},{"location":"Libraries/AndroidListView/#androidlistview","text":"Android ListView. Extends AndroidObject Behavior Pattern: AndroidObjectListViewSelectableBehavior","title":"AndroidListView"},{"location":"Libraries/AndroidListView/#property-summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName","title":"Property Summary"},{"location":"Libraries/AndroidListView/#action-summary","text":"Action Description DoSelectItem Selects an item with the specified index.","title":"Action Summary"},{"location":"Libraries/AndroidListView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidListView/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/AndroidListView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidListView/#doselectitem","text":"Selects an item with the specified index. DoSelectItem ( index ) Parameters: Name Type Description index number Item index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/AndroidObject/","text":"AndroidObject \u00b6 Android Object. Behavior Pattern: AndroidObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName NextSibling AndroidObject for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent AndroidObject for the parent element. GetParent PrevSibling AndroidObject for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoSendKeys Send a text to the object in character-by-character mode. Property Detail \u00b6 ChildAt \u00b6 Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt ChildCount \u00b6 Number of child items. Type: number Accessors: GetChildCount Class \u00b6 Class name of the object. Type: string Accessors: GetClass Height \u00b6 Height of the object. Type: number Accessors: GetHeight Name \u00b6 Name of the object. Type: string Accessors: GetName NextSibling \u00b6 AndroidObject for the next sibling element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetNextSibling ObjectType \u00b6 Type of the object. Type: string Accessors: GetObjectType Parent \u00b6 AndroidObject for the parent element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetParent PrevSibling \u00b6 AndroidObject for the previous sibling element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetPrevSibling Property \u00b6 Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise. DoClear \u00b6 Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise. DoClick \u00b6 Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise. DoEnsureVisible \u00b6 Ensure that a child item with the specified text is visible on screen. DoEnsureVisible ( text ) Parameters: Name Type Description text string Text to search for. Returns: boolean: 'true' if success, 'false' otherwise. DoFindByXPath \u00b6 Finds an element by relative XPath expression. Requires Rapise 6.6+ DoFindByXPath ( xpath ) Parameters: Name Type Description xpath string Relative XPath expression. Returns: AndroidObject : AndroidObject if success, null otherwise. DoSendKeys \u00b6 Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidObject"},{"location":"Libraries/AndroidObject/#androidobject","text":"Android Object. Behavior Pattern: AndroidObjectGenericBehavior","title":"AndroidObject"},{"location":"Libraries/AndroidObject/#property-summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName NextSibling AndroidObject for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent AndroidObject for the parent element. GetParent PrevSibling AndroidObject for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/AndroidObject/#action-summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoSendKeys Send a text to the object in character-by-character mode.","title":"Action Summary"},{"location":"Libraries/AndroidObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidObject/#childat","text":"Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt","title":"ChildAt"},{"location":"Libraries/AndroidObject/#childcount","text":"Number of child items. Type: number Accessors: GetChildCount","title":"ChildCount"},{"location":"Libraries/AndroidObject/#class","text":"Class name of the object. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/AndroidObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/AndroidObject/#name","text":"Name of the object. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/AndroidObject/#nextsibling","text":"AndroidObject for the next sibling element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetNextSibling","title":"NextSibling"},{"location":"Libraries/AndroidObject/#objecttype","text":"Type of the object. Type: string Accessors: GetObjectType","title":"ObjectType"},{"location":"Libraries/AndroidObject/#parent","text":"AndroidObject for the parent element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetParent","title":"Parent"},{"location":"Libraries/AndroidObject/#prevsibling","text":"AndroidObject for the previous sibling element. Requires Rapise 6.6+ Type: AndroidObject Accessors: GetPrevSibling","title":"PrevSibling"},{"location":"Libraries/AndroidObject/#property","text":"Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty","title":"Property"},{"location":"Libraries/AndroidObject/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/AndroidObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/AndroidObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/AndroidObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/AndroidObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidObject/#doaction","text":"Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAction"},{"location":"Libraries/AndroidObject/#doclear","text":"Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClear"},{"location":"Libraries/AndroidObject/#doclick","text":"Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClick"},{"location":"Libraries/AndroidObject/#doensurevisible","text":"Ensure that a child item with the specified text is visible on screen. DoEnsureVisible ( text ) Parameters: Name Type Description text string Text to search for. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoEnsureVisible"},{"location":"Libraries/AndroidObject/#dofindbyxpath","text":"Finds an element by relative XPath expression. Requires Rapise 6.6+ DoFindByXPath ( xpath ) Parameters: Name Type Description xpath string Relative XPath expression. Returns: AndroidObject : AndroidObject if success, null otherwise.","title":"DoFindByXPath"},{"location":"Libraries/AndroidObject/#dosendkeys","text":"Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSendKeys"},{"location":"Libraries/AndroidProgressBar/","text":"AndroidProgressBar \u00b6 Android ProgressBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior Property Summary \u00b6 Property Description Getter Setter Value Value of the object. GetValue SetValue Property Detail \u00b6 Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"AndroidProgressBar"},{"location":"Libraries/AndroidProgressBar/#androidprogressbar","text":"Android ProgressBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior","title":"AndroidProgressBar"},{"location":"Libraries/AndroidProgressBar/#property-summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/AndroidProgressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidProgressBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/AndroidRadioButton/","text":"AndroidRadioButton \u00b6 Android RadioButton. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidRadioButton"},{"location":"Libraries/AndroidRadioButton/#androidradiobutton","text":"Android RadioButton. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior","title":"AndroidRadioButton"},{"location":"Libraries/AndroidRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/AndroidRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/AndroidRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/AndroidRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/AndroidRatingBar/","text":"AndroidRatingBar \u00b6 Android RatingBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior Property Summary \u00b6 Property Description Getter Setter Value Value of the object. GetValue SetValue Property Detail \u00b6 Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"AndroidRatingBar"},{"location":"Libraries/AndroidRatingBar/#androidratingbar","text":"Android RatingBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior","title":"AndroidRatingBar"},{"location":"Libraries/AndroidRatingBar/#property-summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/AndroidRatingBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidRatingBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/AndroidSeekBar/","text":"AndroidSeekBar \u00b6 Android SeekBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior Property Summary \u00b6 Property Description Getter Setter Value Value of the object. GetValue SetValue Property Detail \u00b6 Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"AndroidSeekBar"},{"location":"Libraries/AndroidSeekBar/#androidseekbar","text":"Android SeekBar. Extends AndroidObject Behavior Pattern: AndroidObjectProgressBehavior","title":"AndroidSeekBar"},{"location":"Libraries/AndroidSeekBar/#property-summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/AndroidSeekBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidSeekBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/AndroidSpinner/","text":"AndroidSpinner \u00b6 Android Spinner. Extends AndroidObject Behavior Pattern: AndroidObjectSpinnerBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item with the specified name. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item with the specified name. DoSelectItem ( name ) Parameters: Name Type Description name number Item name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidSpinner"},{"location":"Libraries/AndroidSpinner/#androidspinner","text":"Android Spinner. Extends AndroidObject Behavior Pattern: AndroidObjectSpinnerBehavior","title":"AndroidSpinner"},{"location":"Libraries/AndroidSpinner/#action-summary","text":"Action Description DoSelectItem Selects an item with the specified name.","title":"Action Summary"},{"location":"Libraries/AndroidSpinner/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidSpinner/#doselectitem","text":"Selects an item with the specified name. DoSelectItem ( name ) Parameters: Name Type Description name number Item name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/AndroidSwitch/","text":"AndroidSwitch \u00b6 Android Switch. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidSwitch"},{"location":"Libraries/AndroidSwitch/#androidswitch","text":"Android Switch. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior","title":"AndroidSwitch"},{"location":"Libraries/AndroidSwitch/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/AndroidSwitch/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/AndroidSwitch/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidSwitch/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/AndroidSwitch/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidSwitch/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/AndroidToggleButton/","text":"AndroidToggleButton \u00b6 Android ToggleButton. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"AndroidToggleButton"},{"location":"Libraries/AndroidToggleButton/#androidtogglebutton","text":"Android ToggleButton. Extends AndroidObject Behavior Pattern: AndroidObjectCheckableBehavior","title":"AndroidToggleButton"},{"location":"Libraries/AndroidToggleButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/AndroidToggleButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/AndroidToggleButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AndroidToggleButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/AndroidToggleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AndroidToggleButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/AnimationControl/","text":"AnimationControl \u00b6 Infragistics AnimationControl. UI element class: Infragistics.Win.Misc.CommonControls.AnimationControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraAnimationControlBehavior Property Summary \u00b6 Property Description Getter Setter IsPlaying true if animation is playing, 'false' otherwise GetIsPlaying Action Summary \u00b6 Action Description DoPlay Plays the animation of this object. DoStop Stops the animation of this object. Property Detail \u00b6 IsPlaying \u00b6 true if animation is playing, 'false' otherwise Type: boolean Accessors: GetIsPlaying Action Detail \u00b6 DoPlay \u00b6 Plays the animation of this object. DoPlay () Returns: boolean: 'true' if success, 'false' otherwise. DoStop \u00b6 Stops the animation of this object. DoStop () Returns: boolean: 'true' if success, 'false' otherwise.","title":"AnimationControl"},{"location":"Libraries/AnimationControl/#animationcontrol","text":"Infragistics AnimationControl. UI element class: Infragistics.Win.Misc.CommonControls.AnimationControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraAnimationControlBehavior","title":"AnimationControl"},{"location":"Libraries/AnimationControl/#property-summary","text":"Property Description Getter Setter IsPlaying true if animation is playing, 'false' otherwise GetIsPlaying","title":"Property Summary"},{"location":"Libraries/AnimationControl/#action-summary","text":"Action Description DoPlay Plays the animation of this object. DoStop Stops the animation of this object.","title":"Action Summary"},{"location":"Libraries/AnimationControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/AnimationControl/#isplaying","text":"true if animation is playing, 'false' otherwise Type: boolean Accessors: GetIsPlaying","title":"IsPlaying"},{"location":"Libraries/AnimationControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AnimationControl/#doplay","text":"Plays the animation of this object. DoPlay () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoPlay"},{"location":"Libraries/AnimationControl/#dostop","text":"Stops the animation of this object. DoStop () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoStop"},{"location":"Libraries/AppiumCapabilities/","text":"AppiumCapabilities \u00b6 This is a JavaScript wrapper for DesiredCapabilities of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver Action Summary \u00b6 Action Description GetCapability HasCapability SetCapability Action Detail \u00b6 GetCapability \u00b6 GetCapability ( capability ) Parameters: Name Type Description capability HasCapability \u00b6 HasCapability ( capability ) Parameters: Name Type Description capability SetCapability \u00b6 SetCapability ( capability , capabilityValue ) Parameters: Name Type Description capability capabilityValue","title":"AppiumCapabilities"},{"location":"Libraries/AppiumCapabilities/#appiumcapabilities","text":"This is a JavaScript wrapper for DesiredCapabilities of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver","title":"AppiumCapabilities"},{"location":"Libraries/AppiumCapabilities/#action-summary","text":"Action Description GetCapability HasCapability SetCapability","title":"Action Summary"},{"location":"Libraries/AppiumCapabilities/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AppiumCapabilities/#getcapability","text":"GetCapability ( capability ) Parameters: Name Type Description capability","title":"GetCapability"},{"location":"Libraries/AppiumCapabilities/#hascapability","text":"HasCapability ( capability ) Parameters: Name Type Description capability","title":"HasCapability"},{"location":"Libraries/AppiumCapabilities/#setcapability","text":"SetCapability ( capability , capabilityValue ) Parameters: Name Type Description capability capabilityValue","title":"SetCapability"},{"location":"Libraries/AppiumDriver/","text":"AppiumDriver \u00b6 This is a JavaScript wrapper for AppiumDriver of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver Action Summary \u00b6 Action Description Actions Gets Actions object. ActivateIMEEngine Activate the given IME on the device. BackgroundApp Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. ClearSessions Deletes active sessions on Appium server. Close Close the Browser and Dispose of WebDriver. CloseApp Close the application. CreateAppiumDriver CreateDesiredCapabilities CreateDriverForSession Connects to active Appium session with given URL and Id. DeactiveIMEEngine Deactivate the currently Active IME Engine on the device. Dispose Dispose of WebDriver. DumpSessions Prints information about active Appium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElementByAccessibilityId Search for an element using Accessibility ID. FindElementByAndroidUIAutomator Search for an element using UIAutomator selector. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByIosUIAutomation Search for an element using UIAutomation selector. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByAccessibilityId Search for all elements matching Accessibility ID. FindElementsByAndroidUIAutomator Search for all elements using UIAutomator selector. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByIosUIAutomation Search for all elements using UIAutomation selector. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetContext GetContexts GetCurrentActivity GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetIMEActiveEngine GetIMEAvailableEngines GetOrientation GetPageSource Gets the source of the page last loaded by the browser. GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. HideKeyboard IgnoreUnimportantViews InstallApp IsAppInstalled IsIMEActive IsLocked LaunchApp OpenNotifications PressKeyCode PullFile PushFile Place a file onto the device in a particular place. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. RemoveApp ResetApp SaveSession Saves session information for use by ReconnectSession. SetContext Sets current context. SetOrientation Sets device orienataion. SetUrl Sets the URL the browser is currently displaying. ShakeDevice StartActivity ToggleAirplaneMode ToggleLocationServices ToggleWifi Action Detail \u00b6 Actions \u00b6 Gets Actions object. Actions () ActivateIMEEngine \u00b6 Activate the given IME on the device. ActivateIMEEngine ( imeEngine ) Parameters: Name Type Description imeEngine string IME to activate BackgroundApp \u00b6 Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. BackgroundApp ( seconds ) Parameters: Name Type Description seconds number Timeout value ClearSessions \u00b6 Deletes active sessions on Appium server. ClearSessions () Close \u00b6 Close the Browser and Dispose of WebDriver. Close () CloseApp \u00b6 Close the application. CloseApp () CreateAppiumDriver \u00b6 CreateAppiumDriver ( uri , caps ) Parameters: Name Type Description uri string caps AppiumCapabilities CreateDesiredCapabilities \u00b6 CreateDesiredCapabilities () Returns: AppiumCapabilities object. CreateDriverForSession \u00b6 Connects to active Appium session with given URL and Id. CreateDriverForSession ( addressOfRemoteServer , sessionId , suppressErrors ) Parameters: Name Type Description addressOfRemoteServer string Appium server URL. sessionId string Id of the session to connect. suppressErrors boolean 'true' to suppress failures in the report, default 'false'. Optional, Default: \"false\". Returns: true if successful, false otherwise. DeactiveIMEEngine \u00b6 Deactivate the currently Active IME Engine on the device. DeactiveIMEEngine () Dispose \u00b6 Dispose of WebDriver. Dispose () DumpSessions \u00b6 Prints information about active Appium sessions to output. DumpSessions () ExecuteScript \u00b6 Executes JavaScript in the context of the currently selected frame or window. ExecuteScript ( script , args ) Parameters: Name Type Description script string The JavaScript code to execute. args array The arguments to the script. FindElementByAccessibilityId \u00b6 Search for an element using Accessibility ID. FindElementByAccessibilityId ( selector ) Parameters: Name Type Description selector string FindElementByAndroidUIAutomator \u00b6 Search for an element using UIAutomator selector. FindElementByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector string FindElementByClassName \u00b6 Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element. FindElementByCssSelector \u00b6 Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. FindElementById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element. FindElementByIosUIAutomation \u00b6 Search for an element using UIAutomation selector. FindElementByIosUIAutomation ( selector ) Parameters: Name Type Description selector string FindElementByLinkText \u00b6 Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. FindElementByName \u00b6 Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page. FindElementByPartialLinkText \u00b6 Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. FindElementByTagName \u00b6 Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. FindElementByXPath \u00b6 Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. FindElementsByAccessibilityId \u00b6 Search for all elements matching Accessibility ID. FindElementsByAccessibilityId ( selector ) Parameters: Name Type Description selector string FindElementsByAndroidUIAutomator \u00b6 Search for all elements using UIAutomator selector. FindElementsByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector string FindElementsByClassName \u00b6 Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string class name of the element. FindElementsByCssSelector \u00b6 Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. FindElementsById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element. FindElementsByIosUIAutomation \u00b6 Search for all elements using UIAutomation selector. FindElementsByIosUIAutomation ( selector ) Parameters: Name Type Description selector string FindElementsByLinkText \u00b6 Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. FindElementsByName \u00b6 Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page. FindElementsByPartialLinkText \u00b6 Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. FindElementsByTagName \u00b6 Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. FindElementsByXPath \u00b6 Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. GetAddressOfRemoteServer \u00b6 GetAddressOfRemoteServer () Returns: URL of the remote Appium server. GetContext \u00b6 GetContext () Returns: Current context (NATIVE_APP or WEBVIEW_*). GetContexts \u00b6 GetContexts () Returns: Array of available contexts for a hybrid application. GetCurrentActivity \u00b6 GetCurrentActivity () GetCurrentWindowHandle \u00b6 Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetCurrentWindowHandle () GetIMEActiveEngine \u00b6 GetIMEActiveEngine () Returns: Currently active IME Engine on the device. GetIMEAvailableEngines \u00b6 GetIMEAvailableEngines () Returns: A list of IME engines available on the device. GetOrientation \u00b6 GetOrientation () Returns: Orientation of the device (0 - portrait, 1 - landscape). GetPageSource \u00b6 Gets the source of the page last loaded by the browser. GetPageSource () GetSessionId \u00b6 GetSessionId () Returns: Id of the current session. GetTitle \u00b6 Gets the title of the current browser window. GetTitle () GetUrl \u00b6 Gets the URL the browser is currently displaying. GetUrl () GetWindowHandles \u00b6 Gets the window handles of open browser windows. GetWindowHandles () HideKeyboard \u00b6 HideKeyboard ( key , key ) Parameters: Name Type Description key key IgnoreUnimportantViews \u00b6 IgnoreUnimportantViews ( value ) Parameters: Name Type Description value InstallApp \u00b6 InstallApp ( appPath ) Parameters: Name Type Description appPath IsAppInstalled \u00b6 IsAppInstalled ( bundleId ) Parameters: Name Type Description bundleId IsIMEActive \u00b6 IsIMEActive () IsLocked \u00b6 IsLocked () LaunchApp \u00b6 LaunchApp () OpenNotifications \u00b6 OpenNotifications () PressKeyCode \u00b6 PressKeyCode ( keyCode ) Parameters: Name Type Description keyCode PullFile \u00b6 PullFile ( pathOnDevice ) Parameters: Name Type Description pathOnDevice PushFile \u00b6 Place a file onto the device in a particular place. PushFile ( pathOnDevice , base64Data ) Parameters: Name Type Description pathOnDevice string Path to install the data to. base64Data string Contents of file in base64. Quit \u00b6 Disconnects from the Browser. Quit () ReconnectSession \u00b6 Reads session information produced by SaveSession and connects to the mobile target. ReconnectSession ( autoCreate ) Parameters: Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore. Optional, Default: \"false\". RemoveApp \u00b6 RemoveApp ( appId ) Parameters: Name Type Description appId ResetApp \u00b6 ResetApp () SaveSession \u00b6 Saves session information for use by ReconnectSession. SaveSession () SetContext \u00b6 Sets current context. SetContext ( name ) Parameters: Name Type Description name string SetOrientation \u00b6 Sets device orienataion. SetOrientation ( orientation ) Parameters: Name Type Description orientation number 0 - portrait, 1 - landscape SetUrl \u00b6 Sets the URL the browser is currently displaying. SetUrl ( value ) Parameters: Name Type Description value string The URL to display ShakeDevice \u00b6 ShakeDevice () StartActivity \u00b6 StartActivity ( appActivity , appWaitPackage , appWaitActivity , appWaitActivity ) Parameters: Name Type Description appActivity appWaitPackage appWaitActivity appWaitActivity ToggleAirplaneMode \u00b6 ToggleAirplaneMode () ToggleLocationServices \u00b6 ToggleLocationServices () ToggleWifi \u00b6 ToggleWifi ()","title":"AppiumDriver"},{"location":"Libraries/AppiumDriver/#appiumdriver","text":"This is a JavaScript wrapper for AppiumDriver of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver","title":"AppiumDriver"},{"location":"Libraries/AppiumDriver/#action-summary","text":"Action Description Actions Gets Actions object. ActivateIMEEngine Activate the given IME on the device. BackgroundApp Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. ClearSessions Deletes active sessions on Appium server. Close Close the Browser and Dispose of WebDriver. CloseApp Close the application. CreateAppiumDriver CreateDesiredCapabilities CreateDriverForSession Connects to active Appium session with given URL and Id. DeactiveIMEEngine Deactivate the currently Active IME Engine on the device. Dispose Dispose of WebDriver. DumpSessions Prints information about active Appium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElementByAccessibilityId Search for an element using Accessibility ID. FindElementByAndroidUIAutomator Search for an element using UIAutomator selector. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByIosUIAutomation Search for an element using UIAutomation selector. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByAccessibilityId Search for all elements matching Accessibility ID. FindElementsByAndroidUIAutomator Search for all elements using UIAutomator selector. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByIosUIAutomation Search for all elements using UIAutomation selector. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetContext GetContexts GetCurrentActivity GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetIMEActiveEngine GetIMEAvailableEngines GetOrientation GetPageSource Gets the source of the page last loaded by the browser. GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. HideKeyboard IgnoreUnimportantViews InstallApp IsAppInstalled IsIMEActive IsLocked LaunchApp OpenNotifications PressKeyCode PullFile PushFile Place a file onto the device in a particular place. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. RemoveApp ResetApp SaveSession Saves session information for use by ReconnectSession. SetContext Sets current context. SetOrientation Sets device orienataion. SetUrl Sets the URL the browser is currently displaying. ShakeDevice StartActivity ToggleAirplaneMode ToggleLocationServices ToggleWifi","title":"Action Summary"},{"location":"Libraries/AppiumDriver/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AppiumDriver/#actions","text":"Gets Actions object. Actions ()","title":"Actions"},{"location":"Libraries/AppiumDriver/#activateimeengine","text":"Activate the given IME on the device. ActivateIMEEngine ( imeEngine ) Parameters: Name Type Description imeEngine string IME to activate","title":"ActivateIMEEngine"},{"location":"Libraries/AppiumDriver/#backgroundapp","text":"Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. BackgroundApp ( seconds ) Parameters: Name Type Description seconds number Timeout value","title":"BackgroundApp"},{"location":"Libraries/AppiumDriver/#clearsessions","text":"Deletes active sessions on Appium server. ClearSessions ()","title":"ClearSessions"},{"location":"Libraries/AppiumDriver/#close","text":"Close the Browser and Dispose of WebDriver. Close ()","title":"Close"},{"location":"Libraries/AppiumDriver/#closeapp","text":"Close the application. CloseApp ()","title":"CloseApp"},{"location":"Libraries/AppiumDriver/#createappiumdriver","text":"CreateAppiumDriver ( uri , caps ) Parameters: Name Type Description uri string caps AppiumCapabilities","title":"CreateAppiumDriver"},{"location":"Libraries/AppiumDriver/#createdesiredcapabilities","text":"CreateDesiredCapabilities () Returns: AppiumCapabilities object.","title":"CreateDesiredCapabilities"},{"location":"Libraries/AppiumDriver/#createdriverforsession","text":"Connects to active Appium session with given URL and Id. CreateDriverForSession ( addressOfRemoteServer , sessionId , suppressErrors ) Parameters: Name Type Description addressOfRemoteServer string Appium server URL. sessionId string Id of the session to connect. suppressErrors boolean 'true' to suppress failures in the report, default 'false'. Optional, Default: \"false\". Returns: true if successful, false otherwise.","title":"CreateDriverForSession"},{"location":"Libraries/AppiumDriver/#deactiveimeengine","text":"Deactivate the currently Active IME Engine on the device. DeactiveIMEEngine ()","title":"DeactiveIMEEngine"},{"location":"Libraries/AppiumDriver/#dispose","text":"Dispose of WebDriver. Dispose ()","title":"Dispose"},{"location":"Libraries/AppiumDriver/#dumpsessions","text":"Prints information about active Appium sessions to output. DumpSessions ()","title":"DumpSessions"},{"location":"Libraries/AppiumDriver/#executescript","text":"Executes JavaScript in the context of the currently selected frame or window. ExecuteScript ( script , args ) Parameters: Name Type Description script string The JavaScript code to execute. args array The arguments to the script.","title":"ExecuteScript"},{"location":"Libraries/AppiumDriver/#findelementbyaccessibilityid","text":"Search for an element using Accessibility ID. FindElementByAccessibilityId ( selector ) Parameters: Name Type Description selector string","title":"FindElementByAccessibilityId"},{"location":"Libraries/AppiumDriver/#findelementbyandroiduiautomator","text":"Search for an element using UIAutomator selector. FindElementByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector string","title":"FindElementByAndroidUIAutomator"},{"location":"Libraries/AppiumDriver/#findelementbyclassname","text":"Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element.","title":"FindElementByClassName"},{"location":"Libraries/AppiumDriver/#findelementbycssselector","text":"Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match.","title":"FindElementByCssSelector"},{"location":"Libraries/AppiumDriver/#findelementbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element.","title":"FindElementById"},{"location":"Libraries/AppiumDriver/#findelementbyiosuiautomation","text":"Search for an element using UIAutomation selector. FindElementByIosUIAutomation ( selector ) Parameters: Name Type Description selector string","title":"FindElementByIosUIAutomation"},{"location":"Libraries/AppiumDriver/#findelementbylinktext","text":"Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element.","title":"FindElementByLinkText"},{"location":"Libraries/AppiumDriver/#findelementbyname","text":"Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page.","title":"FindElementByName"},{"location":"Libraries/AppiumDriver/#findelementbypartiallinktext","text":"Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text.","title":"FindElementByPartialLinkText"},{"location":"Libraries/AppiumDriver/#findelementbytagname","text":"Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched.","title":"FindElementByTagName"},{"location":"Libraries/AppiumDriver/#findelementbyxpath","text":"Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element.","title":"FindElementByXPath"},{"location":"Libraries/AppiumDriver/#findelementsbyaccessibilityid","text":"Search for all elements matching Accessibility ID. FindElementsByAccessibilityId ( selector ) Parameters: Name Type Description selector string","title":"FindElementsByAccessibilityId"},{"location":"Libraries/AppiumDriver/#findelementsbyandroiduiautomator","text":"Search for all elements using UIAutomator selector. FindElementsByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector string","title":"FindElementsByAndroidUIAutomator"},{"location":"Libraries/AppiumDriver/#findelementsbyclassname","text":"Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string class name of the element.","title":"FindElementsByClassName"},{"location":"Libraries/AppiumDriver/#findelementsbycssselector","text":"Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match.","title":"FindElementsByCssSelector"},{"location":"Libraries/AppiumDriver/#findelementsbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element.","title":"FindElementsById"},{"location":"Libraries/AppiumDriver/#findelementsbyiosuiautomation","text":"Search for all elements using UIAutomation selector. FindElementsByIosUIAutomation ( selector ) Parameters: Name Type Description selector string","title":"FindElementsByIosUIAutomation"},{"location":"Libraries/AppiumDriver/#findelementsbylinktext","text":"Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element.","title":"FindElementsByLinkText"},{"location":"Libraries/AppiumDriver/#findelementsbyname","text":"Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page.","title":"FindElementsByName"},{"location":"Libraries/AppiumDriver/#findelementsbypartiallinktext","text":"Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text.","title":"FindElementsByPartialLinkText"},{"location":"Libraries/AppiumDriver/#findelementsbytagname","text":"Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched.","title":"FindElementsByTagName"},{"location":"Libraries/AppiumDriver/#findelementsbyxpath","text":"Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element.","title":"FindElementsByXPath"},{"location":"Libraries/AppiumDriver/#getaddressofremoteserver","text":"GetAddressOfRemoteServer () Returns: URL of the remote Appium server.","title":"GetAddressOfRemoteServer"},{"location":"Libraries/AppiumDriver/#getcontext","text":"GetContext () Returns: Current context (NATIVE_APP or WEBVIEW_*).","title":"GetContext"},{"location":"Libraries/AppiumDriver/#getcontexts","text":"GetContexts () Returns: Array of available contexts for a hybrid application.","title":"GetContexts"},{"location":"Libraries/AppiumDriver/#getcurrentactivity","text":"GetCurrentActivity ()","title":"GetCurrentActivity"},{"location":"Libraries/AppiumDriver/#getcurrentwindowhandle","text":"Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetCurrentWindowHandle ()","title":"GetCurrentWindowHandle"},{"location":"Libraries/AppiumDriver/#getimeactiveengine","text":"GetIMEActiveEngine () Returns: Currently active IME Engine on the device.","title":"GetIMEActiveEngine"},{"location":"Libraries/AppiumDriver/#getimeavailableengines","text":"GetIMEAvailableEngines () Returns: A list of IME engines available on the device.","title":"GetIMEAvailableEngines"},{"location":"Libraries/AppiumDriver/#getorientation","text":"GetOrientation () Returns: Orientation of the device (0 - portrait, 1 - landscape).","title":"GetOrientation"},{"location":"Libraries/AppiumDriver/#getpagesource","text":"Gets the source of the page last loaded by the browser. GetPageSource ()","title":"GetPageSource"},{"location":"Libraries/AppiumDriver/#getsessionid","text":"GetSessionId () Returns: Id of the current session.","title":"GetSessionId"},{"location":"Libraries/AppiumDriver/#gettitle","text":"Gets the title of the current browser window. GetTitle ()","title":"GetTitle"},{"location":"Libraries/AppiumDriver/#geturl","text":"Gets the URL the browser is currently displaying. GetUrl ()","title":"GetUrl"},{"location":"Libraries/AppiumDriver/#getwindowhandles","text":"Gets the window handles of open browser windows. GetWindowHandles ()","title":"GetWindowHandles"},{"location":"Libraries/AppiumDriver/#hidekeyboard","text":"HideKeyboard ( key , key ) Parameters: Name Type Description key key","title":"HideKeyboard"},{"location":"Libraries/AppiumDriver/#ignoreunimportantviews","text":"IgnoreUnimportantViews ( value ) Parameters: Name Type Description value","title":"IgnoreUnimportantViews"},{"location":"Libraries/AppiumDriver/#installapp","text":"InstallApp ( appPath ) Parameters: Name Type Description appPath","title":"InstallApp"},{"location":"Libraries/AppiumDriver/#isappinstalled","text":"IsAppInstalled ( bundleId ) Parameters: Name Type Description bundleId","title":"IsAppInstalled"},{"location":"Libraries/AppiumDriver/#isimeactive","text":"IsIMEActive ()","title":"IsIMEActive"},{"location":"Libraries/AppiumDriver/#islocked","text":"IsLocked ()","title":"IsLocked"},{"location":"Libraries/AppiumDriver/#launchapp","text":"LaunchApp ()","title":"LaunchApp"},{"location":"Libraries/AppiumDriver/#opennotifications","text":"OpenNotifications ()","title":"OpenNotifications"},{"location":"Libraries/AppiumDriver/#presskeycode","text":"PressKeyCode ( keyCode ) Parameters: Name Type Description keyCode","title":"PressKeyCode"},{"location":"Libraries/AppiumDriver/#pullfile","text":"PullFile ( pathOnDevice ) Parameters: Name Type Description pathOnDevice","title":"PullFile"},{"location":"Libraries/AppiumDriver/#pushfile","text":"Place a file onto the device in a particular place. PushFile ( pathOnDevice , base64Data ) Parameters: Name Type Description pathOnDevice string Path to install the data to. base64Data string Contents of file in base64.","title":"PushFile"},{"location":"Libraries/AppiumDriver/#quit","text":"Disconnects from the Browser. Quit ()","title":"Quit"},{"location":"Libraries/AppiumDriver/#reconnectsession","text":"Reads session information produced by SaveSession and connects to the mobile target. ReconnectSession ( autoCreate ) Parameters: Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore. Optional, Default: \"false\".","title":"ReconnectSession"},{"location":"Libraries/AppiumDriver/#removeapp","text":"RemoveApp ( appId ) Parameters: Name Type Description appId","title":"RemoveApp"},{"location":"Libraries/AppiumDriver/#resetapp","text":"ResetApp ()","title":"ResetApp"},{"location":"Libraries/AppiumDriver/#savesession","text":"Saves session information for use by ReconnectSession. SaveSession ()","title":"SaveSession"},{"location":"Libraries/AppiumDriver/#setcontext","text":"Sets current context. SetContext ( name ) Parameters: Name Type Description name string","title":"SetContext"},{"location":"Libraries/AppiumDriver/#setorientation","text":"Sets device orienataion. SetOrientation ( orientation ) Parameters: Name Type Description orientation number 0 - portrait, 1 - landscape","title":"SetOrientation"},{"location":"Libraries/AppiumDriver/#seturl","text":"Sets the URL the browser is currently displaying. SetUrl ( value ) Parameters: Name Type Description value string The URL to display","title":"SetUrl"},{"location":"Libraries/AppiumDriver/#shakedevice","text":"ShakeDevice ()","title":"ShakeDevice"},{"location":"Libraries/AppiumDriver/#startactivity","text":"StartActivity ( appActivity , appWaitPackage , appWaitActivity , appWaitActivity ) Parameters: Name Type Description appActivity appWaitPackage appWaitActivity appWaitActivity","title":"StartActivity"},{"location":"Libraries/AppiumDriver/#toggleairplanemode","text":"ToggleAirplaneMode ()","title":"ToggleAirplaneMode"},{"location":"Libraries/AppiumDriver/#togglelocationservices","text":"ToggleLocationServices ()","title":"ToggleLocationServices"},{"location":"Libraries/AppiumDriver/#togglewifi","text":"ToggleWifi ()","title":"ToggleWifi"},{"location":"Libraries/AppiumWebElement/","text":"AppiumWebElement \u00b6 This is a JavaScript wrapper for AppiumWebElement of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver Action Summary \u00b6 Action Description Clear Click FindElementByAccessibilityId FindElementByAndroidUIAutomator FindElementByClassName FindElementByCssSelector FindElementById FindElementByIosUIAutomation FindElementByLinkText FindElementByName FindElementByPartialLinkText FindElementByTagName FindElementByXPath FindElementsByAccessibilityId FindElementsByAndroidUIAutomator FindElementsByClassName FindElementsByCssSelector FindElementsById FindElementsByIosUIAutomation FindElementsByLinkText FindElementsByName FindElementsByPartialLinkText FindElementsByTagName FindElementsByXPath GetAttribute GetCoordinates GetCssValue GetDisplayed GetEnabled GetHashCode GetLocation GetLocationOnScreenOnceScrolledIntoView GetSelected GetSize GetTagName GetText SendKeys SetImmediateValue Submit Action Detail \u00b6 Clear \u00b6 Clear () Click \u00b6 Click () FindElementByAccessibilityId \u00b6 FindElementByAccessibilityId ( selector ) Parameters: Name Type Description selector FindElementByAndroidUIAutomator \u00b6 FindElementByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector FindElementByClassName \u00b6 FindElementByClassName ( className ) Parameters: Name Type Description className FindElementByCssSelector \u00b6 FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector FindElementById \u00b6 FindElementById ( id ) Parameters: Name Type Description id FindElementByIosUIAutomation \u00b6 FindElementByIosUIAutomation ( selector ) Parameters: Name Type Description selector FindElementByLinkText \u00b6 FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText FindElementByName \u00b6 FindElementByName ( name ) Parameters: Name Type Description name FindElementByPartialLinkText \u00b6 FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText FindElementByTagName \u00b6 FindElementByTagName ( tagName ) Parameters: Name Type Description tagName FindElementByXPath \u00b6 FindElementByXPath ( xpath ) Parameters: Name Type Description xpath FindElementsByAccessibilityId \u00b6 FindElementsByAccessibilityId ( selector ) Parameters: Name Type Description selector FindElementsByAndroidUIAutomator \u00b6 FindElementsByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector FindElementsByClassName \u00b6 FindElementsByClassName ( className ) Parameters: Name Type Description className FindElementsByCssSelector \u00b6 FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector FindElementsById \u00b6 FindElementsById ( id ) Parameters: Name Type Description id FindElementsByIosUIAutomation \u00b6 FindElementsByIosUIAutomation ( selector ) Parameters: Name Type Description selector FindElementsByLinkText \u00b6 FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText FindElementsByName \u00b6 FindElementsByName ( name ) Parameters: Name Type Description name FindElementsByPartialLinkText \u00b6 FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText FindElementsByTagName \u00b6 FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName FindElementsByXPath \u00b6 FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath GetAttribute \u00b6 GetAttribute ( attributeName ) Parameters: Name Type Description attributeName GetCoordinates \u00b6 GetCoordinates () GetCssValue \u00b6 GetCssValue ( propertyName ) Parameters: Name Type Description propertyName GetDisplayed \u00b6 GetDisplayed () GetEnabled \u00b6 GetEnabled () GetHashCode \u00b6 GetHashCode () GetLocation \u00b6 GetLocation () GetLocationOnScreenOnceScrolledIntoView \u00b6 GetLocationOnScreenOnceScrolledIntoView () GetSelected \u00b6 GetSelected () GetSize \u00b6 GetSize () GetTagName \u00b6 GetTagName () GetText \u00b6 GetText () SendKeys \u00b6 SendKeys ( text ) Parameters: Name Type Description text SetImmediateValue \u00b6 SetImmediateValue ( value ) Parameters: Name Type Description value Submit \u00b6 Submit ()","title":"AppiumWebElement"},{"location":"Libraries/AppiumWebElement/#appiumwebelement","text":"This is a JavaScript wrapper for AppiumWebElement of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver","title":"AppiumWebElement"},{"location":"Libraries/AppiumWebElement/#action-summary","text":"Action Description Clear Click FindElementByAccessibilityId FindElementByAndroidUIAutomator FindElementByClassName FindElementByCssSelector FindElementById FindElementByIosUIAutomation FindElementByLinkText FindElementByName FindElementByPartialLinkText FindElementByTagName FindElementByXPath FindElementsByAccessibilityId FindElementsByAndroidUIAutomator FindElementsByClassName FindElementsByCssSelector FindElementsById FindElementsByIosUIAutomation FindElementsByLinkText FindElementsByName FindElementsByPartialLinkText FindElementsByTagName FindElementsByXPath GetAttribute GetCoordinates GetCssValue GetDisplayed GetEnabled GetHashCode GetLocation GetLocationOnScreenOnceScrolledIntoView GetSelected GetSize GetTagName GetText SendKeys SetImmediateValue Submit","title":"Action Summary"},{"location":"Libraries/AppiumWebElement/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/AppiumWebElement/#clear","text":"Clear ()","title":"Clear"},{"location":"Libraries/AppiumWebElement/#click","text":"Click ()","title":"Click"},{"location":"Libraries/AppiumWebElement/#findelementbyaccessibilityid","text":"FindElementByAccessibilityId ( selector ) Parameters: Name Type Description selector","title":"FindElementByAccessibilityId"},{"location":"Libraries/AppiumWebElement/#findelementbyandroiduiautomator","text":"FindElementByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector","title":"FindElementByAndroidUIAutomator"},{"location":"Libraries/AppiumWebElement/#findelementbyclassname","text":"FindElementByClassName ( className ) Parameters: Name Type Description className","title":"FindElementByClassName"},{"location":"Libraries/AppiumWebElement/#findelementbycssselector","text":"FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector","title":"FindElementByCssSelector"},{"location":"Libraries/AppiumWebElement/#findelementbyid","text":"FindElementById ( id ) Parameters: Name Type Description id","title":"FindElementById"},{"location":"Libraries/AppiumWebElement/#findelementbyiosuiautomation","text":"FindElementByIosUIAutomation ( selector ) Parameters: Name Type Description selector","title":"FindElementByIosUIAutomation"},{"location":"Libraries/AppiumWebElement/#findelementbylinktext","text":"FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText","title":"FindElementByLinkText"},{"location":"Libraries/AppiumWebElement/#findelementbyname","text":"FindElementByName ( name ) Parameters: Name Type Description name","title":"FindElementByName"},{"location":"Libraries/AppiumWebElement/#findelementbypartiallinktext","text":"FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText","title":"FindElementByPartialLinkText"},{"location":"Libraries/AppiumWebElement/#findelementbytagname","text":"FindElementByTagName ( tagName ) Parameters: Name Type Description tagName","title":"FindElementByTagName"},{"location":"Libraries/AppiumWebElement/#findelementbyxpath","text":"FindElementByXPath ( xpath ) Parameters: Name Type Description xpath","title":"FindElementByXPath"},{"location":"Libraries/AppiumWebElement/#findelementsbyaccessibilityid","text":"FindElementsByAccessibilityId ( selector ) Parameters: Name Type Description selector","title":"FindElementsByAccessibilityId"},{"location":"Libraries/AppiumWebElement/#findelementsbyandroiduiautomator","text":"FindElementsByAndroidUIAutomator ( selector ) Parameters: Name Type Description selector","title":"FindElementsByAndroidUIAutomator"},{"location":"Libraries/AppiumWebElement/#findelementsbyclassname","text":"FindElementsByClassName ( className ) Parameters: Name Type Description className","title":"FindElementsByClassName"},{"location":"Libraries/AppiumWebElement/#findelementsbycssselector","text":"FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector","title":"FindElementsByCssSelector"},{"location":"Libraries/AppiumWebElement/#findelementsbyid","text":"FindElementsById ( id ) Parameters: Name Type Description id","title":"FindElementsById"},{"location":"Libraries/AppiumWebElement/#findelementsbyiosuiautomation","text":"FindElementsByIosUIAutomation ( selector ) Parameters: Name Type Description selector","title":"FindElementsByIosUIAutomation"},{"location":"Libraries/AppiumWebElement/#findelementsbylinktext","text":"FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText","title":"FindElementsByLinkText"},{"location":"Libraries/AppiumWebElement/#findelementsbyname","text":"FindElementsByName ( name ) Parameters: Name Type Description name","title":"FindElementsByName"},{"location":"Libraries/AppiumWebElement/#findelementsbypartiallinktext","text":"FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText","title":"FindElementsByPartialLinkText"},{"location":"Libraries/AppiumWebElement/#findelementsbytagname","text":"FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName","title":"FindElementsByTagName"},{"location":"Libraries/AppiumWebElement/#findelementsbyxpath","text":"FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath","title":"FindElementsByXPath"},{"location":"Libraries/AppiumWebElement/#getattribute","text":"GetAttribute ( attributeName ) Parameters: Name Type Description attributeName","title":"GetAttribute"},{"location":"Libraries/AppiumWebElement/#getcoordinates","text":"GetCoordinates ()","title":"GetCoordinates"},{"location":"Libraries/AppiumWebElement/#getcssvalue","text":"GetCssValue ( propertyName ) Parameters: Name Type Description propertyName","title":"GetCssValue"},{"location":"Libraries/AppiumWebElement/#getdisplayed","text":"GetDisplayed ()","title":"GetDisplayed"},{"location":"Libraries/AppiumWebElement/#getenabled","text":"GetEnabled ()","title":"GetEnabled"},{"location":"Libraries/AppiumWebElement/#gethashcode","text":"GetHashCode ()","title":"GetHashCode"},{"location":"Libraries/AppiumWebElement/#getlocation","text":"GetLocation ()","title":"GetLocation"},{"location":"Libraries/AppiumWebElement/#getlocationonscreenoncescrolledintoview","text":"GetLocationOnScreenOnceScrolledIntoView ()","title":"GetLocationOnScreenOnceScrolledIntoView"},{"location":"Libraries/AppiumWebElement/#getselected","text":"GetSelected ()","title":"GetSelected"},{"location":"Libraries/AppiumWebElement/#getsize","text":"GetSize ()","title":"GetSize"},{"location":"Libraries/AppiumWebElement/#gettagname","text":"GetTagName ()","title":"GetTagName"},{"location":"Libraries/AppiumWebElement/#gettext","text":"GetText ()","title":"GetText"},{"location":"Libraries/AppiumWebElement/#sendkeys","text":"SendKeys ( text ) Parameters: Name Type Description text","title":"SendKeys"},{"location":"Libraries/AppiumWebElement/#setimmediatevalue","text":"SetImmediateValue ( value ) Parameters: Name Type Description value","title":"SetImmediateValue"},{"location":"Libraries/AppiumWebElement/#submit","text":"Submit ()","title":"Submit"},{"location":"Libraries/Array/","text":"Standard JavaScript Array See Also \u00b6 JS Array","title":"Array"},{"location":"Libraries/Array/#see-also","text":"JS Array","title":"See Also"},{"location":"Libraries/C1TrueDBGrid/","text":"C1TrueDBGrid \u00b6 Component One True DB Grid Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!). Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise DoFullText \u00b6 Full text of the table (may be very long!). DoFullText () Returns: string: Table's full text","title":"C1TrueDBGrid"},{"location":"Libraries/C1TrueDBGrid/#c1truedbgrid","text":"Component One True DB Grid Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBGridBehavior","title":"C1TrueDBGrid"},{"location":"Libraries/C1TrueDBGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/C1TrueDBGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!).","title":"Action Summary"},{"location":"Libraries/C1TrueDBGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/C1TrueDBGrid/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/C1TrueDBGrid/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/C1TrueDBGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/C1TrueDBGrid/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/C1TrueDBGrid/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/C1TrueDBGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/C1TrueDBGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/C1TrueDBGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/C1TrueDBGrid/#doclickcell","text":"Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/C1TrueDBGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/C1TrueDBGrid/#dofulltext","text":"Full text of the table (may be very long!). DoFullText () Returns: string: Table's full text","title":"DoFullText"},{"location":"Libraries/C1TrueDBList/","text":"C1TrueDBList \u00b6 Component One True DB List Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBListBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item column number Zero-based index of a column Type: string|boolean Accessors: GetItemNameByIndex RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumnCount \u00b6 Number of selected columns. Type: number Accessors: GetSelectedColumnCount SelectedColumns \u00b6 Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks the specified cell DoClickItem ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"C1TrueDBList"},{"location":"Libraries/C1TrueDBList/#c1truedblist","text":"Component One True DB List Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBListBehavior","title":"C1TrueDBList"},{"location":"Libraries/C1TrueDBList/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/C1TrueDBList/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/C1TrueDBList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/C1TrueDBList/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/C1TrueDBList/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/C1TrueDBList/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/C1TrueDBList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/C1TrueDBList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/C1TrueDBList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item column number Zero-based index of a column Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/C1TrueDBList/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/C1TrueDBList/#selectedcolumncount","text":"Number of selected columns. Type: number Accessors: GetSelectedColumnCount","title":"SelectedColumnCount"},{"location":"Libraries/C1TrueDBList/#selectedcolumns","text":"Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns","title":"SelectedColumns"},{"location":"Libraries/C1TrueDBList/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/C1TrueDBList/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/C1TrueDBList/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/C1TrueDBList/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/C1TrueDBList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/C1TrueDBList/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/C1TrueDBList/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/C1TrueDBList/#doclickitem","text":"Clicks the specified cell DoClickItem ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/C1TrueDBList/#dofulltext","text":"Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise","title":"DoFullText"},{"location":"Libraries/C1TrueDBList/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/C1TrueDBList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/C1TrueDBListCombo/","text":"C1TrueDBListCombo \u00b6 Component One True DB Combo Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBListBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item column number Zero-based index of a column Type: string|boolean Accessors: GetItemNameByIndex RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumnCount \u00b6 Number of selected columns. Type: number Accessors: GetSelectedColumnCount SelectedColumns \u00b6 Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks the specified cell DoClickItem ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: C1TrueDBGridComboBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Returns the selected item GetSelectedItem Text Returns the text of the selected item GetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: string Accessors: GetSelectedIndex, SetSelectedIndex SelectedItem \u00b6 Returns the selected item Type: string Accessors: GetSelectedItem Text \u00b6 Returns the text of the selected item Type: string Accessors: GetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"C1TrueDBListCombo"},{"location":"Libraries/C1TrueDBListCombo/#c1truedblistcombo","text":"Component One True DB Combo Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: C1TrueDBListBehavior","title":"C1TrueDBListCombo"},{"location":"Libraries/C1TrueDBListCombo/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/C1TrueDBListCombo/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/C1TrueDBListCombo/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/C1TrueDBListCombo/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/C1TrueDBListCombo/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/C1TrueDBListCombo/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/C1TrueDBListCombo/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/C1TrueDBListCombo/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/C1TrueDBListCombo/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item column number Zero-based index of a column Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/C1TrueDBListCombo/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/C1TrueDBListCombo/#selectedcolumncount","text":"Number of selected columns. Type: number Accessors: GetSelectedColumnCount","title":"SelectedColumnCount"},{"location":"Libraries/C1TrueDBListCombo/#selectedcolumns","text":"Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns","title":"SelectedColumns"},{"location":"Libraries/C1TrueDBListCombo/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/C1TrueDBListCombo/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/C1TrueDBListCombo/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/C1TrueDBListCombo/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/C1TrueDBListCombo/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/C1TrueDBListCombo/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/C1TrueDBListCombo/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/C1TrueDBListCombo/#doclickitem","text":"Clicks the specified cell DoClickItem ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/C1TrueDBListCombo/#dofulltext","text":"Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise","title":"DoFullText"},{"location":"Libraries/C1TrueDBListCombo/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/C1TrueDBListCombo/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: C1TrueDBGridComboBehavior","title":"DoSelectItem"},{"location":"Libraries/C1TrueDBListCombo/#property-summary_1","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Returns the selected item GetSelectedItem Text Returns the text of the selected item GetText","title":"Property Summary"},{"location":"Libraries/C1TrueDBListCombo/#action-summary_1","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/C1TrueDBListCombo/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/C1TrueDBListCombo/#selectedindex","text":"Index of the selected element of the object. Type: string Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/C1TrueDBListCombo/#selecteditem","text":"Returns the selected item Type: string Accessors: GetSelectedItem","title":"SelectedItem"},{"location":"Libraries/C1TrueDBListCombo/#text_1","text":"Returns the text of the selected item Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/C1TrueDBListCombo/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/C1TrueDBListCombo/#doselectitem_1","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/Capabilities/","text":"Capabilities \u00b6 This is a JavaScript wrapper for DesiredCapabilities of Selenium .NET library. For code complete feature use class name CapabilitiesWrapper, e.g. var /**CapabilitiesWrapper*/caps = WebDriver.CreateDesiredCapabilities(); Action Summary \u00b6 Action Description GetCapability Gets a capability of the browser. HasCapability Gets a value indicating whether the browser has a given capability. SetCapability Sets a capability of the browser. Action Detail \u00b6 GetCapability \u00b6 Gets a capability of the browser. GetCapability ( capability ) Parameters: Name Type Description capability string The capability to get. Returns: capability value. HasCapability \u00b6 Gets a value indicating whether the browser has a given capability. HasCapability ( capability ) Parameters: Name Type Description capability string The capability to get. Returns: 'true' if the capability is set, 'false' - otherwise. SetCapability \u00b6 Sets a capability of the browser. SetCapability ( capability , capabilityValue ) Parameters: Name Type Description capability string The capability to get. capabilityValue string The value for the capability.","title":"Capabilities"},{"location":"Libraries/Capabilities/#capabilities","text":"This is a JavaScript wrapper for DesiredCapabilities of Selenium .NET library. For code complete feature use class name CapabilitiesWrapper, e.g. var /**CapabilitiesWrapper*/caps = WebDriver.CreateDesiredCapabilities();","title":"Capabilities"},{"location":"Libraries/Capabilities/#action-summary","text":"Action Description GetCapability Gets a capability of the browser. HasCapability Gets a value indicating whether the browser has a given capability. SetCapability Sets a capability of the browser.","title":"Action Summary"},{"location":"Libraries/Capabilities/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Capabilities/#getcapability","text":"Gets a capability of the browser. GetCapability ( capability ) Parameters: Name Type Description capability string The capability to get. Returns: capability value.","title":"GetCapability"},{"location":"Libraries/Capabilities/#hascapability","text":"Gets a value indicating whether the browser has a given capability. HasCapability ( capability ) Parameters: Name Type Description capability string The capability to get. Returns: 'true' if the capability is set, 'false' - otherwise.","title":"HasCapability"},{"location":"Libraries/Capabilities/#setcapability","text":"Sets a capability of the browser. SetCapability ( capability , capabilityValue ) Parameters: Name Type Description capability string The capability to get. capabilityValue string The value for the capability.","title":"SetCapability"},{"location":"Libraries/Cookies/","text":"Cookies \u00b6 This is a JavaScript wrapper for Cookies of Selenium .NET library. Action Summary \u00b6 Action Description AddCookie Adds a cookie to the current page. AllCookies Gets all cookies defined for the current page. DeleteAllCookies Deletes the cookie with the specified name from the page. DeleteCookie Deletes the specified cookie from the page. DeleteCookieNamed Deletes the cookie with the specified name from the page. GetCookieNamed Gets a cookie with the specified name. Action Detail \u00b6 AddCookie \u00b6 Adds a cookie to the current page. AddCookie ( cookie ) Parameters: Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}. AllCookies \u00b6 Gets all cookies defined for the current page. AllCookies () DeleteAllCookies \u00b6 Deletes the cookie with the specified name from the page. DeleteAllCookies () DeleteCookie \u00b6 Deletes the specified cookie from the page. DeleteCookie ( cookie ) Parameters: Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}. DeleteCookieNamed \u00b6 Deletes the cookie with the specified name from the page. DeleteCookieNamed ( name ) Parameters: Name Type Description name string The name of the cookie to be deleted. GetCookieNamed \u00b6 Gets a cookie with the specified name. GetCookieNamed ( name ) Parameters: Name Type Description name string The name of the cookie to retrieve.","title":"Cookies"},{"location":"Libraries/Cookies/#cookies","text":"This is a JavaScript wrapper for Cookies of Selenium .NET library.","title":"Cookies"},{"location":"Libraries/Cookies/#action-summary","text":"Action Description AddCookie Adds a cookie to the current page. AllCookies Gets all cookies defined for the current page. DeleteAllCookies Deletes the cookie with the specified name from the page. DeleteCookie Deletes the specified cookie from the page. DeleteCookieNamed Deletes the cookie with the specified name from the page. GetCookieNamed Gets a cookie with the specified name.","title":"Action Summary"},{"location":"Libraries/Cookies/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Cookies/#addcookie","text":"Adds a cookie to the current page. AddCookie ( cookie ) Parameters: Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}.","title":"AddCookie"},{"location":"Libraries/Cookies/#allcookies","text":"Gets all cookies defined for the current page. AllCookies ()","title":"AllCookies"},{"location":"Libraries/Cookies/#deleteallcookies","text":"Deletes the cookie with the specified name from the page. DeleteAllCookies ()","title":"DeleteAllCookies"},{"location":"Libraries/Cookies/#deletecookie","text":"Deletes the specified cookie from the page. DeleteCookie ( cookie ) Parameters: Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}.","title":"DeleteCookie"},{"location":"Libraries/Cookies/#deletecookienamed","text":"Deletes the cookie with the specified name from the page. DeleteCookieNamed ( name ) Parameters: Name Type Description name string The name of the cookie to be deleted.","title":"DeleteCookieNamed"},{"location":"Libraries/Cookies/#getcookienamed","text":"Gets a cookie with the specified name. GetCookieNamed ( name ) Parameters: Name Type Description name string The name of the cookie to retrieve.","title":"GetCookieNamed"},{"location":"Libraries/DXButtonEdit/","text":"DXButtonEdit \u00b6 DevXpress ButtonEdit. UI element class: DevExpress.XtraEditors.ButtonEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DXButtonEditBehavior Property Summary \u00b6 Property Description Getter Setter ButtonCount Number of buttons in this control. GetButtonCount ButtonKind Kind of a button at index. GetButtonKind Action Summary \u00b6 Action Description DoClickButton Selects an item of this object. Property Detail \u00b6 ButtonCount \u00b6 Number of buttons in this control. Type: number Accessors: GetButtonCount ButtonKind \u00b6 Kind of a button at index. Returns one of Glyph, Ellipsis, Delete, OK, Plus, Minus, Redo, Undo or DropDown Getter Parameters: Name Type Description index number index of button Type: string Accessors: GetButtonKind Action Detail \u00b6 DoClickButton \u00b6 Selects an item of this object. DoClickButton ( index , isLeft ) Parameters: Name Type Description index number index of button to select isLeft boolean set to 'true' if buttons are at the left of the control Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXButtonEdit"},{"location":"Libraries/DXButtonEdit/#dxbuttonedit","text":"DevXpress ButtonEdit. UI element class: DevExpress.XtraEditors.ButtonEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXButtonEdit"},{"location":"Libraries/DXButtonEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXButtonEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXButtonEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXButtonEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXButtonEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXButtonEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DXButtonEditBehavior","title":"DoSetText"},{"location":"Libraries/DXButtonEdit/#property-summary_1","text":"Property Description Getter Setter ButtonCount Number of buttons in this control. GetButtonCount ButtonKind Kind of a button at index. GetButtonKind","title":"Property Summary"},{"location":"Libraries/DXButtonEdit/#action-summary_1","text":"Action Description DoClickButton Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DXButtonEdit/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/DXButtonEdit/#buttoncount","text":"Number of buttons in this control. Type: number Accessors: GetButtonCount","title":"ButtonCount"},{"location":"Libraries/DXButtonEdit/#buttonkind","text":"Kind of a button at index. Returns one of Glyph, Ellipsis, Delete, OK, Plus, Minus, Redo, Undo or DropDown Getter Parameters: Name Type Description index number index of button Type: string Accessors: GetButtonKind","title":"ButtonKind"},{"location":"Libraries/DXButtonEdit/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/DXButtonEdit/#doclickbutton","text":"Selects an item of this object. DoClickButton ( index , isLeft ) Parameters: Name Type Description index number index of button to select isLeft boolean set to 'true' if buttons are at the left of the control Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickButton"},{"location":"Libraries/DXCalcEdit/","text":"DXCalcEdit \u00b6 DevXpress CalcEdit. UI element class: DevExpress.XtraEditors.CalcEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXCalcEdit"},{"location":"Libraries/DXCalcEdit/#dxcalcedit","text":"DevXpress CalcEdit. UI element class: DevExpress.XtraEditors.CalcEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXCalcEdit"},{"location":"Libraries/DXCalcEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXCalcEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXCalcEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXCalcEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXCalcEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXCalcEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXCheckButton/","text":"DXCheckButton \u00b6 DevXpress CheckButton. UI element class: DevExpress.XtraEditors.CheckButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXCheckButton"},{"location":"Libraries/DXCheckButton/#dxcheckbutton","text":"DevXpress CheckButton. UI element class: DevExpress.XtraEditors.CheckButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckableBehavior","title":"DXCheckButton"},{"location":"Libraries/DXCheckButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/DXCheckButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/DXCheckButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXCheckButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/DXCheckButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXCheckButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/DXCheckEdit/","text":"DXCheckEdit \u00b6 DevXpress CheckEdit. UI element class: DevExpress.XtraEditors.CheckEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXCheckEdit"},{"location":"Libraries/DXCheckEdit/#dxcheckedit","text":"DevXpress CheckEdit. UI element class: DevExpress.XtraEditors.CheckEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckableBehavior","title":"DXCheckEdit"},{"location":"Libraries/DXCheckEdit/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/DXCheckEdit/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/DXCheckEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXCheckEdit/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/DXCheckEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXCheckEdit/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/DXCheckedComboBoxEdit/","text":"DXCheckedComboBoxEdit \u00b6 DevXpress CheckedComboBoxEdit. UI element class: DevExpress.XtraEditors.CheckedComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckedComboBoxEditBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXCheckedComboBoxEdit"},{"location":"Libraries/DXCheckedComboBoxEdit/#dxcheckedcomboboxedit","text":"DevXpress CheckedComboBoxEdit. UI element class: DevExpress.XtraEditors.CheckedComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckedComboBoxEditBehavior","title":"DXCheckedComboBoxEdit"},{"location":"Libraries/DXCheckedComboBoxEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/DXCheckedComboBoxEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXCheckedComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXCheckedComboBoxEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DXCheckedComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXCheckedComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXCheckedListBoxControl/","text":"DXCheckedListBoxControl \u00b6 DevXpress CheckedListBoxControl. UI element class: regex:DevExpress.XtraEditors.CheckedListBoxControl|DevExpress.XtraEditors.Popup.PopupCheckedListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckedListBoxControlBehavior Property Summary \u00b6 Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node. Property Detail \u00b6 CheckedCount \u00b6 Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount CheckedIndices \u00b6 Array of indices of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedIndices CheckedItems \u00b6 Array of item names of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedItems ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCheckItem \u00b6 Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXCheckedListBoxControl"},{"location":"Libraries/DXCheckedListBoxControl/#dxcheckedlistboxcontrol","text":"DevXpress CheckedListBoxControl. UI element class: regex:DevExpress.XtraEditors.CheckedListBoxControl|DevExpress.XtraEditors.Popup.PopupCheckedListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXCheckedListBoxControlBehavior","title":"DXCheckedListBoxControl"},{"location":"Libraries/DXCheckedListBoxControl/#property-summary","text":"Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/DXCheckedListBoxControl/#action-summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node.","title":"Action Summary"},{"location":"Libraries/DXCheckedListBoxControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXCheckedListBoxControl/#checkedcount","text":"Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount","title":"CheckedCount"},{"location":"Libraries/DXCheckedListBoxControl/#checkedindices","text":"Array of indices of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedIndices","title":"CheckedIndices"},{"location":"Libraries/DXCheckedListBoxControl/#checkeditems","text":"Array of item names of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedItems","title":"CheckedItems"},{"location":"Libraries/DXCheckedListBoxControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXCheckedListBoxControl/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/DXCheckedListBoxControl/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXCheckedListBoxControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXCheckedListBoxControl/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/DXCheckedListBoxControl/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/DXCheckedListBoxControl/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/DXCheckedListBoxControl/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/DXCheckedListBoxControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXCheckedListBoxControl/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/DXCheckedListBoxControl/#docheckitem","text":"Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCheckItem"},{"location":"Libraries/DXCheckedListBoxControl/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/DXCheckedListBoxControl/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/DXCheckedListBoxControl/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXCheckedListBoxControl/#dosetcheck","text":"Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/DXColorEdit/","text":"DXColorEdit \u00b6 DevXpress ColorEdit. UI element class: DevExpress.XtraEditors.ColorEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXColorEditBehavior Property Summary \u00b6 Property Description Getter Setter SelectedColor Selected color of the object GetSelectedColor SetSelectedColor SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectColor Selects a color. DoSetText Sets text value of this object. Property Detail \u00b6 SelectedColor \u00b6 Selected color of the object Type: struct Accessors: GetSelectedColor, SetSelectedColor SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectColor \u00b6 Selects a color. DoSelectColor ( val ) Parameters: Name Type Description val struct structure with three fields '{R, G, B}'. Returns: boolean: 'true' if successful, 'false' otherwise DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXColorEdit"},{"location":"Libraries/DXColorEdit/#dxcoloredit","text":"DevXpress ColorEdit. UI element class: DevExpress.XtraEditors.ColorEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXColorEditBehavior","title":"DXColorEdit"},{"location":"Libraries/DXColorEdit/#property-summary","text":"Property Description Getter Setter SelectedColor Selected color of the object GetSelectedColor SetSelectedColor SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXColorEdit/#action-summary","text":"Action Description DoSelectColor Selects a color. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXColorEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXColorEdit/#selectedcolor","text":"Selected color of the object Type: struct Accessors: GetSelectedColor, SetSelectedColor","title":"SelectedColor"},{"location":"Libraries/DXColorEdit/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXColorEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXColorEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXColorEdit/#doselectcolor","text":"Selects a color. DoSelectColor ( val ) Parameters: Name Type Description val struct structure with three fields '{R, G, B}'. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelectColor"},{"location":"Libraries/DXColorEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXComboBoxEdit/","text":"DXComboBoxEdit \u00b6 DevXpress ComboBoxEdit. UI element class: DevExpress.XtraEditors.ComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the selected item in a single string. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXComboBoxEdit"},{"location":"Libraries/DXComboBoxEdit/#dxcomboboxedit","text":"DevXpress ComboBoxEdit. UI element class: DevExpress.XtraEditors.ComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior","title":"DXComboBoxEdit"},{"location":"Libraries/DXComboBoxEdit/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXComboBoxEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXComboBoxEdit/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXComboBoxEdit/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXComboBoxEdit/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXComboBoxEdit/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXComboBoxEdit/#text","text":"Text of the selected item in a single string. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXComboBoxEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXDateEdit/","text":"DXDateEdit \u00b6 DevXpress DateEdit. UI element class: DevExpress.XtraEditors.Controls.DateEditCalendarBase Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDateEditBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( day , month , year ) Parameters: Name Type Description day number Day to set month number Month to set year number Year to set Returns: boolean: 'true' if success, 'false' otherwise","title":"DXDateEdit"},{"location":"Libraries/DXDateEdit/#dxdateedit","text":"DevXpress DateEdit. UI element class: DevExpress.XtraEditors.Controls.DateEditCalendarBase Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDateEditBehavior","title":"DXDateEdit"},{"location":"Libraries/DXDateEdit/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/DXDateEdit/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/DXDateEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXDateEdit/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/DXDateEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXDateEdit/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/DXDateEdit/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/DXDateEdit/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( day , month , year ) Parameters: Name Type Description day number Day to set month number Month to set year number Year to set Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/DXDockPanel/","text":"DXDockPanel \u00b6 DevExpress DXDockPanel. UI element class: regex:DevExpress.XtraBars.Docking.DockPanel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDockPanelBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Number of items. GetItemsCount PanelName Name of the panel at index GetPanelName SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedPanel Title of the selected panel GetSelectedPanel Action Summary \u00b6 Action Description DoSelectPanel Selects the tab by name. Property Detail \u00b6 ItemsCount \u00b6 Number of items. Type: number Accessors: GetItemsCount PanelName \u00b6 Name of the panel at index Getter Parameters: Name Type Description index Type: string Accessors: GetPanelName SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex SelectedPanel \u00b6 Title of the selected panel Type: string Accessors: GetSelectedPanel Action Detail \u00b6 DoSelectPanel \u00b6 Selects the tab by name. DoSelectPanel ( panelName ) Parameters: Name Type Description panelName string Panel name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXDockPanel"},{"location":"Libraries/DXDockPanel/#dxdockpanel","text":"DevExpress DXDockPanel. UI element class: regex:DevExpress.XtraBars.Docking.DockPanel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDockPanelBehavior","title":"DXDockPanel"},{"location":"Libraries/DXDockPanel/#property-summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount PanelName Name of the panel at index GetPanelName SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedPanel Title of the selected panel GetSelectedPanel","title":"Property Summary"},{"location":"Libraries/DXDockPanel/#action-summary","text":"Action Description DoSelectPanel Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/DXDockPanel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXDockPanel/#itemscount","text":"Number of items. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/DXDockPanel/#panelname","text":"Name of the panel at index Getter Parameters: Name Type Description index Type: string Accessors: GetPanelName","title":"PanelName"},{"location":"Libraries/DXDockPanel/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXDockPanel/#selectedpanel","text":"Title of the selected panel Type: string Accessors: GetSelectedPanel","title":"SelectedPanel"},{"location":"Libraries/DXDockPanel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXDockPanel/#doselectpanel","text":"Selects the tab by name. DoSelectPanel ( panelName ) Parameters: Name Type Description panelName string Panel name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectPanel"},{"location":"Libraries/DXDockedBarControl/","text":"DXDockedBarControl \u00b6 DevXpress Docked Bar. UI element class: regex:DevExpress.XtraBars.Controls.DockedBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount ItemEnabled Enabled state of an item at index. GetItemEnabled ItemTooltip Tooltip assigned to an item at index. GetItemTooltip Action Summary \u00b6 Action Description DoClickItem Performs click on the navigation item Property Detail \u00b6 Item \u00b6 Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemEnabled \u00b6 Enabled state of an item at index. Returns boolean value. Getter Parameters: Name Type Description ind number Zero-based index of an item. Type: boolean Accessors: GetItemEnabled ItemTooltip \u00b6 Tooltip assigned to an item at index. Getter Parameters: Name Type Description ind number Zero-based index of an item. Type: string Accessors: GetItemTooltip Action Detail \u00b6 DoClickItem \u00b6 Performs click on the navigation item DoClickItem ( nameCaptionIndex , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DXDockedBarControl"},{"location":"Libraries/DXDockedBarControl/#dxdockedbarcontrol","text":"DevXpress Docked Bar. UI element class: regex:DevExpress.XtraBars.Controls.DockedBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXBarControlBehavior","title":"DXDockedBarControl"},{"location":"Libraries/DXDockedBarControl/#property-summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount ItemEnabled Enabled state of an item at index. GetItemEnabled ItemTooltip Tooltip assigned to an item at index. GetItemTooltip","title":"Property Summary"},{"location":"Libraries/DXDockedBarControl/#action-summary","text":"Action Description DoClickItem Performs click on the navigation item","title":"Action Summary"},{"location":"Libraries/DXDockedBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXDockedBarControl/#item","text":"Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem","title":"Item"},{"location":"Libraries/DXDockedBarControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXDockedBarControl/#itemenabled","text":"Enabled state of an item at index. Returns boolean value. Getter Parameters: Name Type Description ind number Zero-based index of an item. Type: boolean Accessors: GetItemEnabled","title":"ItemEnabled"},{"location":"Libraries/DXDockedBarControl/#itemtooltip","text":"Tooltip assigned to an item at index. Getter Parameters: Name Type Description ind number Zero-based index of an item. Type: string Accessors: GetItemTooltip","title":"ItemTooltip"},{"location":"Libraries/DXDockedBarControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXDockedBarControl/#doclickitem","text":"Performs click on the navigation item DoClickItem ( nameCaptionIndex , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/DXDocumentsHost/","text":"DXDocumentsHost \u00b6 DevExpress DXDocumentsHost. UI element class: DevExpress.XtraBars.Docking2010.DocumentsHost Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDocumentsHostBehavior Property Summary \u00b6 Property Description Getter Setter DocName Name of the doc at index GetDocName ItemsCount Number of items. GetItemsCount Action Summary \u00b6 Action Description DoSelectDoc Selects a doc by name. Property Detail \u00b6 DocName \u00b6 Name of the doc at index Getter Parameters: Name Type Description index Type: string Accessors: GetDocName ItemsCount \u00b6 Number of items. Type: number Accessors: GetItemsCount Action Detail \u00b6 DoSelectDoc \u00b6 Selects a doc by name. DoSelectDoc ( docName ) Parameters: Name Type Description docName string Doc name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXDocumentsHost"},{"location":"Libraries/DXDocumentsHost/#dxdocumentshost","text":"DevExpress DXDocumentsHost. UI element class: DevExpress.XtraBars.Docking2010.DocumentsHost Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDocumentsHostBehavior","title":"DXDocumentsHost"},{"location":"Libraries/DXDocumentsHost/#property-summary","text":"Property Description Getter Setter DocName Name of the doc at index GetDocName ItemsCount Number of items. GetItemsCount","title":"Property Summary"},{"location":"Libraries/DXDocumentsHost/#action-summary","text":"Action Description DoSelectDoc Selects a doc by name.","title":"Action Summary"},{"location":"Libraries/DXDocumentsHost/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXDocumentsHost/#docname","text":"Name of the doc at index Getter Parameters: Name Type Description index Type: string Accessors: GetDocName","title":"DocName"},{"location":"Libraries/DXDocumentsHost/#itemscount","text":"Number of items. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/DXDocumentsHost/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXDocumentsHost/#doselectdoc","text":"Selects a doc by name. DoSelectDoc ( docName ) Parameters: Name Type Description docName string Doc name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectDoc"},{"location":"Libraries/DXDropDownButton/","text":"DXDropDownButton \u00b6 DevXpress DropDownButton. UI element class: DevExpress.XtraEditors.DropDownButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDropDownButtonBehavior Action Summary \u00b6 Action Description DoShowPopup Show popup Action Detail \u00b6 DoShowPopup \u00b6 Show popup DoShowPopup ()","title":"DXDropDownButton"},{"location":"Libraries/DXDropDownButton/#dxdropdownbutton","text":"DevXpress DropDownButton. UI element class: DevExpress.XtraEditors.DropDownButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXDropDownButtonBehavior","title":"DXDropDownButton"},{"location":"Libraries/DXDropDownButton/#action-summary","text":"Action Description DoShowPopup Show popup","title":"Action Summary"},{"location":"Libraries/DXDropDownButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXDropDownButton/#doshowpopup","text":"Show popup DoShowPopup ()","title":"DoShowPopup"},{"location":"Libraries/DXFontEdit/","text":"DXFontEdit \u00b6 DevXpress FontEdit. UI element class: DevExpress.XtraEditors.FontEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXFontEditBehavior Property Summary \u00b6 Property Description Getter Setter SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the selected item in a single string. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXFontEdit"},{"location":"Libraries/DXFontEdit/#dxfontedit","text":"DevXpress FontEdit. UI element class: DevExpress.XtraEditors.FontEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXFontEditBehavior","title":"DXFontEdit"},{"location":"Libraries/DXFontEdit/#property-summary","text":"Property Description Getter Setter SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXFontEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DXFontEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXFontEdit/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXFontEdit/#text","text":"Text of the selected item in a single string. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXFontEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXFontEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXGridControl/","text":"DXGridControl \u00b6 DevXpress GridControl. UI element class: DevExpress.XtraGrid.GridControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXGridControlBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!). Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. defSep string Separator for multi-level columns. Optional. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickColumn \u00b6 Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within header. Default is a center. Optional. yOffset number Y offset to click within header. Default is a center. Optional. DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise DoFullText \u00b6 Full text of the table (may be very long!). DoFullText () Returns: string: Table's full text","title":"DXGridControl"},{"location":"Libraries/DXGridControl/#dxgridcontrol","text":"DevXpress GridControl. UI element class: DevExpress.XtraGrid.GridControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXGridControlBehavior","title":"DXGridControl"},{"location":"Libraries/DXGridControl/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/DXGridControl/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!).","title":"Action Summary"},{"location":"Libraries/DXGridControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXGridControl/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DXGridControl/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DXGridControl/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. defSep string Separator for multi-level columns. Optional. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DXGridControl/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DXGridControl/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/DXGridControl/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/DXGridControl/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DXGridControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXGridControl/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DXGridControl/#doclickcolumn","text":"Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within header. Default is a center. Optional. yOffset number Y offset to click within header. Default is a center. Optional.","title":"DoClickColumn"},{"location":"Libraries/DXGridControl/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/DXGridControl/#dofulltext","text":"Full text of the table (may be very long!). DoFullText () Returns: string: Table's full text","title":"DoFullText"},{"location":"Libraries/DXHyperLinkEdit/","text":"DXHyperLinkEdit \u00b6 DevXpress HyperLinkEdit. UI element class: DevExpress.XtraEditors.HyperLinkEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Height \u00b6 Height of the object. Type: number Accessors: GetHeight Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByName \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DXHyperLinkEdit"},{"location":"Libraries/DXHyperLinkEdit/#dxhyperlinkedit","text":"DevXpress HyperLinkEdit. UI element class: DevExpress.XtraEditors.HyperLinkEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectGenericBehavior","title":"DXHyperLinkEdit"},{"location":"Libraries/DXHyperLinkEdit/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/DXHyperLinkEdit/#action-summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/DXHyperLinkEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXHyperLinkEdit/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/DXHyperLinkEdit/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/DXHyperLinkEdit/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/DXHyperLinkEdit/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/DXHyperLinkEdit/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/DXHyperLinkEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXHyperLinkEdit/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/DXHyperLinkEdit/#dofindbyname","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/DXHyperLinkEdit/#dofindbytext","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/DXHyperLinkEdit/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/DXImageComboBoxEdit/","text":"DXImageComboBoxEdit \u00b6 DevXpress ImageComboBoxEdit. UI element class: DevExpress.XtraEditors.ImageComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the selected item in a single string. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXImageComboBoxEdit"},{"location":"Libraries/DXImageComboBoxEdit/#dximagecomboboxedit","text":"DevXpress ImageComboBoxEdit. UI element class: DevExpress.XtraEditors.ImageComboBoxEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior","title":"DXImageComboBoxEdit"},{"location":"Libraries/DXImageComboBoxEdit/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXImageComboBoxEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXImageComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXImageComboBoxEdit/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXImageComboBoxEdit/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXImageComboBoxEdit/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXImageComboBoxEdit/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXImageComboBoxEdit/#text","text":"Text of the selected item in a single string. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXImageComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXImageComboBoxEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXImageComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXImageEdit/","text":"DXImageEdit \u00b6 DevXpress ImageEdit. UI element class: DevExpress.XtraEditors.ImageEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXImageEditBehavior Property Summary \u00b6 Property Description Getter Setter Image 'true' if there is image loaded into the editor, 'false' otherwise. GetImage Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Image \u00b6 'true' if there is image loaded into the editor, 'false' otherwise. Type: boolean Accessors: GetImage Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXImageEdit"},{"location":"Libraries/DXImageEdit/#dximageedit","text":"DevXpress ImageEdit. UI element class: DevExpress.XtraEditors.ImageEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXImageEditBehavior","title":"DXImageEdit"},{"location":"Libraries/DXImageEdit/#property-summary","text":"Property Description Getter Setter Image 'true' if there is image loaded into the editor, 'false' otherwise. GetImage","title":"Property Summary"},{"location":"Libraries/DXImageEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXImageEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXImageEdit/#image","text":"'true' if there is image loaded into the editor, 'false' otherwise. Type: boolean Accessors: GetImage","title":"Image"},{"location":"Libraries/DXImageEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXImageEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXImageListBoxControl/","text":"DXImageListBoxControl \u00b6 DevXpress ImageListBoxControl. UI element class: DevExpress.XtraEditors.ImageListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXListBoxControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXImageListBoxControl"},{"location":"Libraries/DXImageListBoxControl/#dximagelistboxcontrol","text":"DevXpress ImageListBoxControl. UI element class: DevExpress.XtraEditors.ImageListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXListBoxControlBehavior","title":"DXImageListBoxControl"},{"location":"Libraries/DXImageListBoxControl/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/DXImageListBoxControl/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/DXImageListBoxControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXImageListBoxControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXImageListBoxControl/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/DXImageListBoxControl/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXImageListBoxControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXImageListBoxControl/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/DXImageListBoxControl/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/DXImageListBoxControl/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/DXImageListBoxControl/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/DXImageListBoxControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXImageListBoxControl/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/DXImageListBoxControl/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/DXImageListBoxControl/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/DXImageListBoxControl/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXListBoxControl/","text":"DXListBoxControl \u00b6 DevXpress ListBoxControl. UI element class: DevExpress.XtraEditors.ListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXListBoxControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXListBoxControl"},{"location":"Libraries/DXListBoxControl/#dxlistboxcontrol","text":"DevXpress ListBoxControl. UI element class: DevExpress.XtraEditors.ListBoxControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXListBoxControlBehavior","title":"DXListBoxControl"},{"location":"Libraries/DXListBoxControl/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/DXListBoxControl/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/DXListBoxControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXListBoxControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXListBoxControl/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/DXListBoxControl/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXListBoxControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXListBoxControl/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/DXListBoxControl/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/DXListBoxControl/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/DXListBoxControl/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/DXListBoxControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXListBoxControl/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/DXListBoxControl/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/DXListBoxControl/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/DXListBoxControl/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXLookUpEdit/","text":"DXLookUpEdit \u00b6 DevXpress LookUpEdit. UI element class: DevExpress.XtraEditors.LookUpEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXLookUpEditBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndex Index of the selected element of the object. GetItemIndex SetItemIndex ItemName Name of the selected element of the object. GetItemName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the object, 'false' if text can not be read. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 ItemIndex \u00b6 Index of the selected element of the object. Type: string Accessors: GetItemIndex, SetItemIndex ItemName \u00b6 Name of the selected element of the object. Type: string Accessors: GetItemName SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( val ) Parameters: Name Type Description val number index of value to select Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXLookUpEdit"},{"location":"Libraries/DXLookUpEdit/#dxlookupedit","text":"DevXpress LookUpEdit. UI element class: DevExpress.XtraEditors.LookUpEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXLookUpEditBehavior","title":"DXLookUpEdit"},{"location":"Libraries/DXLookUpEdit/#property-summary","text":"Property Description Getter Setter ItemIndex Index of the selected element of the object. GetItemIndex SetItemIndex ItemName Name of the selected element of the object. GetItemName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the object, 'false' if text can not be read. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXLookUpEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXLookUpEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXLookUpEdit/#itemindex","text":"Index of the selected element of the object. Type: string Accessors: GetItemIndex, SetItemIndex","title":"ItemIndex"},{"location":"Libraries/DXLookUpEdit/#itemname","text":"Name of the selected element of the object. Type: string Accessors: GetItemName","title":"ItemName"},{"location":"Libraries/DXLookUpEdit/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXLookUpEdit/#selectedtext","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXLookUpEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXLookUpEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXLookUpEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( val ) Parameters: Name Type Description val number index of value to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXLookUpEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXMRUEdit/","text":"DXMRUEdit \u00b6 DevXpress MRUEdit. UI element class: DevExpress.XtraEditors.MRUEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Text \u00b6 Text of the selected item in a single string. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXMRUEdit"},{"location":"Libraries/DXMRUEdit/#dxmruedit","text":"DevXpress MRUEdit. UI element class: DevExpress.XtraEditors.MRUEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXComboBoxEditBehavior","title":"DXMRUEdit"},{"location":"Libraries/DXMRUEdit/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXMRUEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXMRUEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXMRUEdit/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXMRUEdit/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DXMRUEdit/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXMRUEdit/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/DXMRUEdit/#text","text":"Text of the selected item in a single string. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXMRUEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXMRUEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DXMRUEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXMarqueeProgressBarControl/","text":"DXMarqueeProgressBarControl \u00b6 DevXpress MarqueeProgressBarControl. UI element class: DevExpress.XtraEditors.MarqueeProgressBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXMarqueeProgressBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Working Gets or sets a value indicating whether the control can respond to user interaction GetWorking Property Detail \u00b6 Working \u00b6 Gets or sets a value indicating whether the control can respond to user interaction Type: boolean Accessors: GetWorking","title":"DXMarqueeProgressBarControl"},{"location":"Libraries/DXMarqueeProgressBarControl/#dxmarqueeprogressbarcontrol","text":"DevXpress MarqueeProgressBarControl. UI element class: DevExpress.XtraEditors.MarqueeProgressBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXMarqueeProgressBarControlBehavior","title":"DXMarqueeProgressBarControl"},{"location":"Libraries/DXMarqueeProgressBarControl/#property-summary","text":"Property Description Getter Setter Working Gets or sets a value indicating whether the control can respond to user interaction GetWorking","title":"Property Summary"},{"location":"Libraries/DXMarqueeProgressBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXMarqueeProgressBarControl/#working","text":"Gets or sets a value indicating whether the control can respond to user interaction Type: boolean Accessors: GetWorking","title":"Working"},{"location":"Libraries/DXMaskBox/","text":"DXMaskBox \u00b6 DevXpress MaskBox. UI element class: DevExpress.XtraEditors.TextBoxMaskBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXMaskBox"},{"location":"Libraries/DXMaskBox/#dxmaskbox","text":"DevXpress MaskBox. UI element class: DevExpress.XtraEditors.TextBoxMaskBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXObjectTextBehavior","title":"DXMaskBox"},{"location":"Libraries/DXMaskBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXMaskBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXMaskBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXMaskBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXMaskBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXMaskBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXMemoEdit/","text":"DXMemoEdit \u00b6 DevXpress MemoEdit. UI element class: DevExpress.XtraEditors.MemoEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXMemoEdit"},{"location":"Libraries/DXMemoEdit/#dxmemoedit","text":"DevXpress MemoEdit. UI element class: DevExpress.XtraEditors.MemoEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXMemoEdit"},{"location":"Libraries/DXMemoEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXMemoEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXMemoEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXMemoEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXMemoEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXMemoEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXMemoExEdit/","text":"DXMemoExEdit \u00b6 DevXpress MemoExEdit. UI element class: DevExpress.XtraEditors.MemoExEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXMemoExEdit"},{"location":"Libraries/DXMemoExEdit/#dxmemoexedit","text":"DevXpress MemoExEdit. UI element class: DevExpress.XtraEditors.MemoExEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXMemoExEdit"},{"location":"Libraries/DXMemoExEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXMemoExEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXMemoExEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXMemoExEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXMemoExEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXMemoExEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXNavBarControl/","text":"DXNavBarControl \u00b6 DevXpress NavBar. UI element class: DevExpress.XtraNavBar.NavBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXNavBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group Property Detail \u00b6 Item \u00b6 Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise. DoExpandGroup \u00b6 Expand (or make active) the navigation group DoExpandGroup ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DXNavBarControl"},{"location":"Libraries/DXNavBarControl/#dxnavbarcontrol","text":"DevXpress NavBar. UI element class: DevExpress.XtraNavBar.NavBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXNavBarControlBehavior","title":"DXNavBarControl"},{"location":"Libraries/DXNavBarControl/#property-summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/DXNavBarControl/#action-summary","text":"Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group","title":"Action Summary"},{"location":"Libraries/DXNavBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXNavBarControl/#item","text":"Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem","title":"Item"},{"location":"Libraries/DXNavBarControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXNavBarControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXNavBarControl/#doclickitem","text":"Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/DXNavBarControl/#doexpandgroup","text":"Expand (or make active) the navigation group DoExpandGroup ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoExpandGroup"},{"location":"Libraries/DXPopupBarControl/","text":"DXPopupBarControl \u00b6 DevXpress DXPopupBarControl. UI element class: regex:DevExpress.XtraBars.Controls..*BarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPopupBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on the navigation item Property Detail \u00b6 Item \u00b6 Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on the navigation item DoClickItem ( nameCaptionIndex , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DXPopupBarControl"},{"location":"Libraries/DXPopupBarControl/#dxpopupbarcontrol","text":"DevXpress DXPopupBarControl. UI element class: regex:DevExpress.XtraBars.Controls..*BarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPopupBarControlBehavior","title":"DXPopupBarControl"},{"location":"Libraries/DXPopupBarControl/#property-summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/DXPopupBarControl/#action-summary","text":"Action Description DoClickItem Performs click on the navigation item","title":"Action Summary"},{"location":"Libraries/DXPopupBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXPopupBarControl/#item","text":"Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem","title":"Item"},{"location":"Libraries/DXPopupBarControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXPopupBarControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXPopupBarControl/#doclickitem","text":"Performs click on the navigation item DoClickItem ( nameCaptionIndex , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/DXPopupContainerEdit/","text":"DXPopupContainerEdit \u00b6 DevXpress PopupContainerEdit. UI element class: DevExpress.XtraEditors.PopupContainerEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXPopupContainerEdit"},{"location":"Libraries/DXPopupContainerEdit/#dxpopupcontaineredit","text":"DevXpress PopupContainerEdit. UI element class: DevExpress.XtraEditors.PopupContainerEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXPopupContainerEdit"},{"location":"Libraries/DXPopupContainerEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXPopupContainerEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXPopupContainerEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXPopupContainerEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXPopupContainerEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXPopupContainerEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXPopupLookUpEditForm/","text":"DXPopupLookUpEditForm \u00b6 DevXpress PopupLookUpEditForm. UI element class: DevExpress.XtraEditors.Popup.PopupLookUpEditForm Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPopupLookUpEditFormBehavior","title":"DXPopupLookUpEditForm"},{"location":"Libraries/DXPopupLookUpEditForm/#dxpopuplookupeditform","text":"DevXpress PopupLookUpEditForm. UI element class: DevExpress.XtraEditors.Popup.PopupLookUpEditForm Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPopupLookUpEditFormBehavior","title":"DXPopupLookUpEditForm"},{"location":"Libraries/DXProgressBarControl/","text":"DXProgressBarControl \u00b6 DevXpress ProgressBarControl. UI element class: DevExpress.XtraEditors.ProgressBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXProgressBarControlBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"DXProgressBarControl"},{"location":"Libraries/DXProgressBarControl/#dxprogressbarcontrol","text":"DevXpress ProgressBarControl. UI element class: DevExpress.XtraEditors.ProgressBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXProgressBarControlBehavior","title":"DXProgressBarControl"},{"location":"Libraries/DXProgressBarControl/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/DXProgressBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXProgressBarControl/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/DXProgressBarControl/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/DXProgressBarControl/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/DXPropertyGridControl/","text":"DXPropertyGridControl \u00b6 DevExpress DXPropertyGridControl. UI element class: DevExpress.XtraVerticalGrid.PropertyGridControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPropertyGridControlBehavior Property Summary \u00b6 Property Description Getter Setter RowCount Number of rows in the table. GetRowCount Action Summary \u00b6 Action Description DoGetRowCaption Gets caption of the row with index. DoGetRowColor Gets color of the row with index. DoGetRowRect Gets rectangle of the row with index. DoGetRowValue Gets value of the row with index. DoSetRowValue Sets value of the row with index. Property Detail \u00b6 RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount Action Detail \u00b6 DoGetRowCaption \u00b6 Gets caption of the row with index. DoGetRowCaption ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: string: Row caption DoGetRowColor \u00b6 Gets color of the row with index. DoGetRowColor ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: string: Row color DoGetRowRect \u00b6 Gets rectangle of the row with index. DoGetRowRect ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: object: Row rectangle {x, y, w, h}. DoGetRowValue \u00b6 Gets value of the row with index. DoGetRowValue ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: object: Row value DoSetRowValue \u00b6 Sets value of the row with index. DoSetRowValue ( rowIndex , value ) Parameters: Name Type Description rowIndex number Row index value string Value to set Returns: boolean: 'true' if successful","title":"DXPropertyGridControl"},{"location":"Libraries/DXPropertyGridControl/#dxpropertygridcontrol","text":"DevExpress DXPropertyGridControl. UI element class: DevExpress.XtraVerticalGrid.PropertyGridControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXPropertyGridControlBehavior","title":"DXPropertyGridControl"},{"location":"Libraries/DXPropertyGridControl/#property-summary","text":"Property Description Getter Setter RowCount Number of rows in the table. GetRowCount","title":"Property Summary"},{"location":"Libraries/DXPropertyGridControl/#action-summary","text":"Action Description DoGetRowCaption Gets caption of the row with index. DoGetRowColor Gets color of the row with index. DoGetRowRect Gets rectangle of the row with index. DoGetRowValue Gets value of the row with index. DoSetRowValue Sets value of the row with index.","title":"Action Summary"},{"location":"Libraries/DXPropertyGridControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXPropertyGridControl/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DXPropertyGridControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXPropertyGridControl/#dogetrowcaption","text":"Gets caption of the row with index. DoGetRowCaption ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: string: Row caption","title":"DoGetRowCaption"},{"location":"Libraries/DXPropertyGridControl/#dogetrowcolor","text":"Gets color of the row with index. DoGetRowColor ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: string: Row color","title":"DoGetRowColor"},{"location":"Libraries/DXPropertyGridControl/#dogetrowrect","text":"Gets rectangle of the row with index. DoGetRowRect ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: object: Row rectangle {x, y, w, h}.","title":"DoGetRowRect"},{"location":"Libraries/DXPropertyGridControl/#dogetrowvalue","text":"Gets value of the row with index. DoGetRowValue ( rowIndex ) Parameters: Name Type Description rowIndex number Row index Returns: object: Row value","title":"DoGetRowValue"},{"location":"Libraries/DXPropertyGridControl/#dosetrowvalue","text":"Sets value of the row with index. DoSetRowValue ( rowIndex , value ) Parameters: Name Type Description rowIndex number Row index value string Value to set Returns: boolean: 'true' if successful","title":"DoSetRowValue"},{"location":"Libraries/DXRadioGroup/","text":"DXRadioGroup \u00b6 DevXpress RadioGroup. UI element class: DevExpress.XtraEditors.RadioGroup Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRadioGroupBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the label of the object GetText Action Summary \u00b6 Action Description DoSelectItem Selects Item Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex Text \u00b6 Text of the label of the object Type: string Accessors: GetText Action Detail \u00b6 DoSelectItem \u00b6 Selects Item DoSelectItem ( index ) Parameters: Name Type Description index number Index of the element to check Returns: boolean: 'true' if successful, 'false' otherwise","title":"DXRadioGroup"},{"location":"Libraries/DXRadioGroup/#dxradiogroup","text":"DevXpress RadioGroup. UI element class: DevExpress.XtraEditors.RadioGroup Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRadioGroupBehavior","title":"DXRadioGroup"},{"location":"Libraries/DXRadioGroup/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the label of the object GetText","title":"Property Summary"},{"location":"Libraries/DXRadioGroup/#action-summary","text":"Action Description DoSelectItem Selects Item","title":"Action Summary"},{"location":"Libraries/DXRadioGroup/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXRadioGroup/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DXRadioGroup/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXRadioGroup/#text","text":"Text of the label of the object Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DXRadioGroup/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXRadioGroup/#doselectitem","text":"Selects Item DoSelectItem ( index ) Parameters: Name Type Description index number Index of the element to check Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelectItem"},{"location":"Libraries/DXRangeTrackBarControl/","text":"DXRangeTrackBarControl \u00b6 DevXpress RangeTrackBarControl. UI element class: DevExpress.XtraEditors.RangeTrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRangeTrackBarControlBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"DXRangeTrackBarControl"},{"location":"Libraries/DXRangeTrackBarControl/#dxrangetrackbarcontrol","text":"DevXpress RangeTrackBarControl. UI element class: DevExpress.XtraEditors.RangeTrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRangeTrackBarControlBehavior","title":"DXRangeTrackBarControl"},{"location":"Libraries/DXRangeTrackBarControl/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue","title":"Property Summary"},{"location":"Libraries/DXRangeTrackBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXRangeTrackBarControl/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/DXRangeTrackBarControl/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/DXRibbon/","text":"DXRibbon \u00b6 DevXpress Ribbon. UI element class: DevExpress.XtraBars.Ribbon.RibbonControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRibbonControlBehavior Action Summary \u00b6 Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickGalleryItem Select a gallery item in the Ribbon gallery control. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon. Action Detail \u00b6 DoClickApplicationButton \u00b6 Clicks an application button on the ribbon. DoClickApplicationButton ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickGalleryItem \u00b6 Select a gallery item in the Ribbon gallery control. DoClickGalleryItem ( gallery , galleryItem , bNewValue , bUncheckOthers ) Parameters: Name Type Description gallery string | number Gallery control identifier in the Ribbon. galleryItem string | number Caption or index of item to click. bNewValue boolean New checked value for an item Optional, Default: \"true\". bUncheckOthers boolean set to 'false' if this click is a part of multi-selection Optional, Default: \"true\". Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickTab \u00b6 Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXRibbon"},{"location":"Libraries/DXRibbon/#dxribbon","text":"DevXpress Ribbon. UI element class: DevExpress.XtraBars.Ribbon.RibbonControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXRibbonControlBehavior","title":"DXRibbon"},{"location":"Libraries/DXRibbon/#action-summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickGalleryItem Select a gallery item in the Ribbon gallery control. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon.","title":"Action Summary"},{"location":"Libraries/DXRibbon/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXRibbon/#doclickapplicationbutton","text":"Clicks an application button on the ribbon. DoClickApplicationButton ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickApplicationButton"},{"location":"Libraries/DXRibbon/#doclickgalleryitem","text":"Select a gallery item in the Ribbon gallery control. DoClickGalleryItem ( gallery , galleryItem , bNewValue , bUncheckOthers ) Parameters: Name Type Description gallery string | number Gallery control identifier in the Ribbon. galleryItem string | number Caption or index of item to click. bNewValue boolean New checked value for an item Optional, Default: \"true\". bUncheckOthers boolean set to 'false' if this click is a part of multi-selection Optional, Default: \"true\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickGalleryItem"},{"location":"Libraries/DXRibbon/#doclickitem","text":"Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/DXRibbon/#doclicktab","text":"Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickTab"},{"location":"Libraries/DXSimpleButton/","text":"DXSimpleButton \u00b6 DevXpress SimpleButton. UI element class: DevExpress.XtraEditors.SimpleButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"DXSimpleButton"},{"location":"Libraries/DXSimpleButton/#dxsimplebutton","text":"DevXpress SimpleButton. UI element class: DevExpress.XtraEditors.SimpleButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"DXSimpleButton"},{"location":"Libraries/DXSpinEdit/","text":"DXSpinEdit \u00b6 DevXpress SpinEdit. UI element class: DevExpress.XtraEditors.SpinEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXSpinEditBehavior Property Summary \u00b6 Property Description Getter Setter Increment The value of increment for spin. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoDown Decrements the Value of an object. DoSetText Sets text value of this object. DoUp Increments the Value of an object. Property Detail \u00b6 Increment \u00b6 The value of increment for spin. Type: number Accessors: GetIncrement, SetIncrement MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoDown \u00b6 Decrements the Value of an object. DoDown () Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. DoUp \u00b6 Increments the Value of an object. DoUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXSpinEdit"},{"location":"Libraries/DXSpinEdit/#dxspinedit","text":"DevXpress SpinEdit. UI element class: DevExpress.XtraEditors.SpinEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXSpinEditBehavior","title":"DXSpinEdit"},{"location":"Libraries/DXSpinEdit/#property-summary","text":"Property Description Getter Setter Increment The value of increment for spin. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/DXSpinEdit/#action-summary","text":"Action Description DoDown Decrements the Value of an object. DoSetText Sets text value of this object. DoUp Increments the Value of an object.","title":"Action Summary"},{"location":"Libraries/DXSpinEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXSpinEdit/#increment","text":"The value of increment for spin. Type: number Accessors: GetIncrement, SetIncrement","title":"Increment"},{"location":"Libraries/DXSpinEdit/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/DXSpinEdit/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/DXSpinEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXSpinEdit/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/DXSpinEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXSpinEdit/#dodown","text":"Decrements the Value of an object. DoDown () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoDown"},{"location":"Libraries/DXSpinEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXSpinEdit/#doup","text":"Increments the Value of an object. DoUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoUp"},{"location":"Libraries/DXTabControl/","text":"DXTabControl \u00b6 DevExpress DXTabControl. UI element class: DevExpress.XtraTab.XtraTabControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTabControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 ItemsCount \u00b6 Number of items. Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab TabName \u00b6 Name of the tab at index Getter Parameters: Name Type Description index number Type: string Accessors: GetTabName Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXTabControl"},{"location":"Libraries/DXTabControl/#dxtabcontrol","text":"DevExpress DXTabControl. UI element class: DevExpress.XtraTab.XtraTabControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTabControlBehavior","title":"DXTabControl"},{"location":"Libraries/DXTabControl/#property-summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName","title":"Property Summary"},{"location":"Libraries/DXTabControl/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/DXTabControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTabControl/#itemscount","text":"Number of items. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/DXTabControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/DXTabControl/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab","title":"SelectedTab"},{"location":"Libraries/DXTabControl/#tabname","text":"Name of the tab at index Getter Parameters: Name Type Description index number Type: string Accessors: GetTabName","title":"TabName"},{"location":"Libraries/DXTabControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXTabControl/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/DXTextEdit/","text":"DXTextEdit \u00b6 DevXpress TextEdit. UI element class: DevExpress.XtraEditors.TextEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXTextEdit"},{"location":"Libraries/DXTextEdit/#dxtextedit","text":"DevXpress TextEdit. UI element class: DevExpress.XtraEditors.TextEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXTextEdit"},{"location":"Libraries/DXTextEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXTextEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXTextEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTextEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXTextEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXTextEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXTextEditMasked/","text":"DXTextEditMasked \u00b6 DevXpress Masked TextEdit. UI element class: DevExpress.XtraEditors.TextEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXTextEditMasked"},{"location":"Libraries/DXTextEditMasked/#dxtexteditmasked","text":"DevXpress Masked TextEdit. UI element class: DevExpress.XtraEditors.TextEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXTextEditMasked"},{"location":"Libraries/DXTextEditMasked/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXTextEditMasked/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXTextEditMasked/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTextEditMasked/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXTextEditMasked/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXTextEditMasked/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXTimeEdit/","text":"DXTimeEdit \u00b6 DevXpress TimeEdit. UI element class: DevExpress.XtraEditors.TimeEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXTimeEdit"},{"location":"Libraries/DXTimeEdit/#dxtimeedit","text":"DevXpress TimeEdit. UI element class: DevExpress.XtraEditors.TimeEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"DXTimeEdit"},{"location":"Libraries/DXTimeEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DXTimeEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DXTimeEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTimeEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DXTimeEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXTimeEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DXTrackBarControl/","text":"DXTrackBarControl \u00b6 DevXpress TrackBarControl. UI element class: DevExpress.XtraEditors.TrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTrackBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Value Value of the object. GetValue SetValue Property Detail \u00b6 Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"DXTrackBarControl"},{"location":"Libraries/DXTrackBarControl/#dxtrackbarcontrol","text":"DevXpress TrackBarControl. UI element class: DevExpress.XtraEditors.TrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTrackBarControlBehavior","title":"DXTrackBarControl"},{"location":"Libraries/DXTrackBarControl/#property-summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/DXTrackBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTrackBarControl/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/DXTreeList/","text":"DXTreeList \u00b6 DevXpress TreeList. UI element class: DevExpress.XtraTreeList.TreeList Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTreeListBehavior Property Summary \u00b6 Property Description Getter Setter CellText Cell text for the cell specified by 'rowPath' and 'col'. GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount ColumnCount Number of columns in current grid. GetColumnCount ColumnName Caption of a column. GetColumnName Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText RowCount Number of rows in current grid. GetRowCount Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText Action Summary \u00b6 Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node Property Detail \u00b6 CellText \u00b6 Cell text for the cell specified by 'rowPath' and 'col'. Getter Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name. Default is 0 Optional. Type: string Accessors: GetCellText Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount ColumnCount \u00b6 Number of columns in current grid. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText RowCount \u00b6 Number of rows in current grid. Type: number Accessors: GetRowCount Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected Text \u00b6 ;-combined text of all selected nodes. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Click the cell specified by row name or index and column name or index DoClickCell ( rowPath , col , xOffset , yOffset ) Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DXTreeList"},{"location":"Libraries/DXTreeList/#dxtreelist","text":"DevXpress TreeList. UI element class: DevExpress.XtraTreeList.TreeList Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXTreeListBehavior","title":"DXTreeList"},{"location":"Libraries/DXTreeList/#property-summary","text":"Property Description Getter Setter CellText Cell text for the cell specified by 'rowPath' and 'col'. GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount ColumnCount Number of columns in current grid. GetColumnCount ColumnName Caption of a column. GetColumnName Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText RowCount Number of rows in current grid. GetRowCount Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText","title":"Property Summary"},{"location":"Libraries/DXTreeList/#action-summary","text":"Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node","title":"Action Summary"},{"location":"Libraries/DXTreeList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXTreeList/#celltext","text":"Cell text for the cell specified by 'rowPath' and 'col'. Getter Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name. Default is 0 Optional. Type: string Accessors: GetCellText","title":"CellText"},{"location":"Libraries/DXTreeList/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/DXTreeList/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/DXTreeList/#columncount","text":"Number of columns in current grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DXTreeList/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DXTreeList/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/DXTreeList/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/DXTreeList/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/DXTreeList/#rowcount","text":"Number of rows in current grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DXTreeList/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/DXTreeList/#text","text":";-combined text of all selected nodes. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DXTreeList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DXTreeList/#doclickcell","text":"Click the cell specified by row name or index and column name or index DoClickCell ( rowPath , col , xOffset , yOffset ) Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickCell"},{"location":"Libraries/DXTreeList/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/DXTreeList/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/DXTreeList/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/DXTreeList/#dosetcheck","text":"Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/DXZoomTrackBarControl/","text":"DXZoomTrackBarControl \u00b6 DevXpress ZoomTrackBarControl. UI element class: DevExpress.XtraEditors.ZoomTrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXZoomTrackBarControlBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"DXZoomTrackBarControl"},{"location":"Libraries/DXZoomTrackBarControl/#dxzoomtrackbarcontrol","text":"DevXpress ZoomTrackBarControl. UI element class: DevExpress.XtraEditors.ZoomTrackBarControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: DXZoomTrackBarControlBehavior","title":"DXZoomTrackBarControl"},{"location":"Libraries/DXZoomTrackBarControl/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/DXZoomTrackBarControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DXZoomTrackBarControl/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/DXZoomTrackBarControl/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/DXZoomTrackBarControl/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/Database/","text":"Database \u00b6 Database object. Use it to read and write ADO data sources. Action Summary \u00b6 Action Description DoAttach Attaches to a Database with given ADO connection string and SQL query. DoMoveToRow Moves to a given row. DoRandom Selects random row and column in the recordset. DoSequential Advances to the next row in the table. GetColumnCount Gets columns count. GetColumnName Gets column name. GetColumnNames Gets column names. GetCurrentRowIndex Get zero based current row index. GetRowCount Gets rows count. GetValue Gets value by column name, and, optionally, row number. Action Detail \u00b6 DoAttach \u00b6 Attaches to a Database with given ADO connection string and SQL query. DoAttach ( connection_string , sql ) Parameters: Name Type Description connection_string string ADO connection string. sql SQL Query (i.e. 'select * from Customers') Optional. Returns: true, if successful DoMoveToRow \u00b6 Moves to a given row. DoMoveToRow ( rowInd ) Parameters: Name Type Description rowInd number Row index to set active. DoRandom \u00b6 Selects random row and column in the recordset. DoRandom () Returns: 'false' if the the DB is is not connected, 'true' - otherwise. DoSequential \u00b6 Advances to the next row in the table. When the end of the range is reached DoSequential returns 'false'. DoSequential () Returns: 'false' if being called when active row is the last row or the recordset is not attached, 'true' - otherwise. GetColumnCount \u00b6 Gets columns count. GetColumnCount () Returns: Number of Columns in the result set. GetColumnName \u00b6 Gets column name. GetColumnName ( ind ) Parameters: Name Type Description ind number Column index. Returns: Name of column in the spreadsheet. GetColumnNames \u00b6 Gets column names. GetColumnNames () Returns: Array of column names in the table. GetCurrentRowIndex \u00b6 Get zero based current row index. GetCurrentRowIndex () GetRowCount \u00b6 Gets rows count. GetRowCount () Returns: Number of rows in the result set. GetValue \u00b6 Gets value by column name, and, optionally, row number. Returns current cell value after DoSequential or DoRandom if params not set. GetValue ( columnId , rowId ) Parameters: Name Type Description columnId Number | String Column index or name. If not set 1 st column is used. Optional. rowId number Row index. If not set current row is used. Optional.","title":"Database"},{"location":"Libraries/Database/#database","text":"Database object. Use it to read and write ADO data sources.","title":"Database"},{"location":"Libraries/Database/#action-summary","text":"Action Description DoAttach Attaches to a Database with given ADO connection string and SQL query. DoMoveToRow Moves to a given row. DoRandom Selects random row and column in the recordset. DoSequential Advances to the next row in the table. GetColumnCount Gets columns count. GetColumnName Gets column name. GetColumnNames Gets column names. GetCurrentRowIndex Get zero based current row index. GetRowCount Gets rows count. GetValue Gets value by column name, and, optionally, row number.","title":"Action Summary"},{"location":"Libraries/Database/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Database/#doattach","text":"Attaches to a Database with given ADO connection string and SQL query. DoAttach ( connection_string , sql ) Parameters: Name Type Description connection_string string ADO connection string. sql SQL Query (i.e. 'select * from Customers') Optional. Returns: true, if successful","title":"DoAttach"},{"location":"Libraries/Database/#domovetorow","text":"Moves to a given row. DoMoveToRow ( rowInd ) Parameters: Name Type Description rowInd number Row index to set active.","title":"DoMoveToRow"},{"location":"Libraries/Database/#dorandom","text":"Selects random row and column in the recordset. DoRandom () Returns: 'false' if the the DB is is not connected, 'true' - otherwise.","title":"DoRandom"},{"location":"Libraries/Database/#dosequential","text":"Advances to the next row in the table. When the end of the range is reached DoSequential returns 'false'. DoSequential () Returns: 'false' if being called when active row is the last row or the recordset is not attached, 'true' - otherwise.","title":"DoSequential"},{"location":"Libraries/Database/#getcolumncount","text":"Gets columns count. GetColumnCount () Returns: Number of Columns in the result set.","title":"GetColumnCount"},{"location":"Libraries/Database/#getcolumnname","text":"Gets column name. GetColumnName ( ind ) Parameters: Name Type Description ind number Column index. Returns: Name of column in the spreadsheet.","title":"GetColumnName"},{"location":"Libraries/Database/#getcolumnnames","text":"Gets column names. GetColumnNames () Returns: Array of column names in the table.","title":"GetColumnNames"},{"location":"Libraries/Database/#getcurrentrowindex","text":"Get zero based current row index. GetCurrentRowIndex ()","title":"GetCurrentRowIndex"},{"location":"Libraries/Database/#getrowcount","text":"Gets rows count. GetRowCount () Returns: Number of rows in the result set.","title":"GetRowCount"},{"location":"Libraries/Database/#getvalue","text":"Gets value by column name, and, optionally, row number. Returns current cell value after DoSequential or DoRandom if params not set. GetValue ( columnId , rowId ) Parameters: Name Type Description columnId Number | String Column index or name. If not set 1 st column is used. Optional. rowId number Row index. If not set current row is used. Optional.","title":"GetValue"},{"location":"Libraries/DomDynamicsAXActionSearch/","text":"DomDynamicsAXActionSearch \u00b6 This behavior pattern implements standard behavior for ActionSearch control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXActionSearchBehavior Action Summary \u00b6 Action Description DoSearch Performs action search. Action Detail \u00b6 DoSearch \u00b6 Performs action search. DoSearch ( text ) Parameters: Name Type Description text string Name of action to search.","title":"DomDynamicsAXActionSearch"},{"location":"Libraries/DomDynamicsAXActionSearch/#domdynamicsaxactionsearch","text":"This behavior pattern implements standard behavior for ActionSearch control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXActionSearchBehavior","title":"DomDynamicsAXActionSearch"},{"location":"Libraries/DomDynamicsAXActionSearch/#action-summary","text":"Action Description DoSearch Performs action search.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXActionSearch/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXActionSearch/#dosearch","text":"Performs action search. DoSearch ( text ) Parameters: Name Type Description text string Name of action to search.","title":"DoSearch"},{"location":"Libraries/DomDynamicsAXCheckBox/","text":"DomDynamicsAXCheckBox \u00b6 This behavior pattern implements standard behavior for CheckBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXCheckBoxBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomDynamicsAXCheckBox"},{"location":"Libraries/DomDynamicsAXCheckBox/#domdynamicsaxcheckbox","text":"This behavior pattern implements standard behavior for CheckBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXCheckBoxBehavior","title":"DomDynamicsAXCheckBox"},{"location":"Libraries/DomDynamicsAXCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/DomDynamicsAXCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/DomDynamicsAXComboBox/","text":"DomDynamicsAXComboBox \u00b6 This behavior pattern implements standard behavior for ComboBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Selected value. GetText SetText Action Summary \u00b6 Action Description DoOpen Expands combo box. DoSetText Sets text into the edit field of a combo box. Property Detail \u00b6 Text \u00b6 Selected value. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoOpen \u00b6 Expands combo box. DoOpen () DoSetText \u00b6 Sets text into the edit field of a combo box. DoSetText ( text ) Parameters: Name Type Description text string Value to input.","title":"DomDynamicsAXComboBox"},{"location":"Libraries/DomDynamicsAXComboBox/#domdynamicsaxcombobox","text":"This behavior pattern implements standard behavior for ComboBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXComboBoxBehavior","title":"DomDynamicsAXComboBox"},{"location":"Libraries/DomDynamicsAXComboBox/#property-summary","text":"Property Description Getter Setter Text Selected value. GetText SetText","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXComboBox/#action-summary","text":"Action Description DoOpen Expands combo box. DoSetText Sets text into the edit field of a combo box.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXComboBox/#text","text":"Selected value. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DomDynamicsAXComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXComboBox/#doopen","text":"Expands combo box. DoOpen ()","title":"DoOpen"},{"location":"Libraries/DomDynamicsAXComboBox/#dosettext","text":"Sets text into the edit field of a combo box. DoSetText ( text ) Parameters: Name Type Description text string Value to input.","title":"DoSetText"},{"location":"Libraries/DomDynamicsAXCrumbList/","text":"DomDynamicsAXCrumbList \u00b6 This behavior pattern implements standard behavior for CrumbList control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXCrumbListBehavior Property Summary \u00b6 Property Description Getter Setter Text Text displayed in the breadcrumbs section. GetText Property Detail \u00b6 Text \u00b6 Text displayed in the breadcrumbs section. Type: string Accessors: GetText","title":"DomDynamicsAXCrumbList"},{"location":"Libraries/DomDynamicsAXCrumbList/#domdynamicsaxcrumblist","text":"This behavior pattern implements standard behavior for CrumbList control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXCrumbListBehavior","title":"DomDynamicsAXCrumbList"},{"location":"Libraries/DomDynamicsAXCrumbList/#property-summary","text":"Property Description Getter Setter Text Text displayed in the breadcrumbs section. GetText","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXCrumbList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXCrumbList/#text","text":"Text displayed in the breadcrumbs section. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DomDynamicsAXDatePicker/","text":"DomDynamicsAXDatePicker \u00b6 This behavior pattern implements standard behavior for DatePicker control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXDatePickerBehavior Property Summary \u00b6 Property Description Getter Setter Day Current day displayed by the date picker. GetDay Month Current month displayed by the date picker. GetMonth Year Current year displayed by the date picker. GetYear Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Day \u00b6 Current day displayed by the date picker. Type: string|number Accessors: GetDay Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Year \u00b6 Current year displayed by the date picker. Type: string|number Accessors: GetYear Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DomDynamicsAXDatePicker"},{"location":"Libraries/DomDynamicsAXDatePicker/#domdynamicsaxdatepicker","text":"This behavior pattern implements standard behavior for DatePicker control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXDatePickerBehavior","title":"DomDynamicsAXDatePicker"},{"location":"Libraries/DomDynamicsAXDatePicker/#property-summary","text":"Property Description Getter Setter Day Current day displayed by the date picker. GetDay Month Current month displayed by the date picker. GetMonth Year Current year displayed by the date picker. GetYear","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXDatePicker/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXDatePicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXDatePicker/#day","text":"Current day displayed by the date picker. Type: string|number Accessors: GetDay","title":"Day"},{"location":"Libraries/DomDynamicsAXDatePicker/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/DomDynamicsAXDatePicker/#year","text":"Current year displayed by the date picker. Type: string|number Accessors: GetYear","title":"Year"},{"location":"Libraries/DomDynamicsAXDatePicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXDatePicker/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/DomDynamicsAXDatePicker/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/DomDynamicsAXDatePicker/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/DomDynamicsAXGrid/","text":"DomDynamicsAXGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoSetText Enters text into the active cell. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise DoSetText \u00b6 Enters text into the active cell. Use DoClickCell to make a cell active. DoSetText ( text ) Parameters: Name Type Description text string Text to type into the active cell.","title":"DomDynamicsAXGrid"},{"location":"Libraries/DomDynamicsAXGrid/#domdynamicsaxgrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXGridBehavior","title":"DomDynamicsAXGrid"},{"location":"Libraries/DomDynamicsAXGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoSetText Enters text into the active cell.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomDynamicsAXGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomDynamicsAXGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName","title":"ColumnName"},{"location":"Libraries/DomDynamicsAXGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomDynamicsAXGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomDynamicsAXGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/DomDynamicsAXGrid/#dosettext","text":"Enters text into the active cell. Use DoClickCell to make a cell active. DoSetText ( text ) Parameters: Name Type Description text string Text to type into the active cell.","title":"DoSetText"},{"location":"Libraries/DomDynamicsAXMenuBar/","text":"DomDynamicsAXMenuBar \u00b6 This behavior pattern implements standard behavior for MenuBar control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXMenuBarBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomDynamicsAXMenuBar"},{"location":"Libraries/DomDynamicsAXMenuBar/#domdynamicsaxmenubar","text":"This behavior pattern implements standard behavior for MenuBar control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXMenuBarBehavior","title":"DomDynamicsAXMenuBar"},{"location":"Libraries/DomDynamicsAXMenuBar/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/DomDynamicsAXMessageBar/","text":"DomDynamicsAXMessageBar \u00b6 This behavior pattern implements standard behavior for MessageBar control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXMessageBarBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of messages. GetItemCount ItemText Text of an item at index. GetItemText Text Text of the first item. GetText Property Detail \u00b6 ItemCount \u00b6 Number of messages. Type: number Accessors: GetItemCount ItemText \u00b6 Text of an item at index. Getter Parameters: Name Type Description index number Index of a message. Type: string Accessors: GetItemText Text \u00b6 Text of the first item. Type: string Accessors: GetText","title":"DomDynamicsAXMessageBar"},{"location":"Libraries/DomDynamicsAXMessageBar/#domdynamicsaxmessagebar","text":"This behavior pattern implements standard behavior for MessageBar control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXMessageBarBehavior","title":"DomDynamicsAXMessageBar"},{"location":"Libraries/DomDynamicsAXMessageBar/#property-summary","text":"Property Description Getter Setter ItemCount Number of messages. GetItemCount ItemText Text of an item at index. GetItemText Text Text of the first item. GetText","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXMessageBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXMessageBar/#itemcount","text":"Number of messages. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DomDynamicsAXMessageBar/#itemtext","text":"Text of an item at index. Getter Parameters: Name Type Description index number Index of a message. Type: string Accessors: GetItemText","title":"ItemText"},{"location":"Libraries/DomDynamicsAXMessageBar/#text","text":"Text of the first item. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DomDynamicsAXNavigationSearch/","text":"DomDynamicsAXNavigationSearch \u00b6 This behavior pattern implements standard behavior for NavigationSearch control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXNavigationSearchBehavior Action Summary \u00b6 Action Description DoSearch Performs navigation search. Action Detail \u00b6 DoSearch \u00b6 Performs navigation search. DoSearch ( text ) Parameters: Name Type Description text string Name of a page to search.","title":"DomDynamicsAXNavigationSearch"},{"location":"Libraries/DomDynamicsAXNavigationSearch/#domdynamicsaxnavigationsearch","text":"This behavior pattern implements standard behavior for NavigationSearch control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXNavigationSearchBehavior","title":"DomDynamicsAXNavigationSearch"},{"location":"Libraries/DomDynamicsAXNavigationSearch/#action-summary","text":"Action Description DoSearch Performs navigation search.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXNavigationSearch/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXNavigationSearch/#dosearch","text":"Performs navigation search. DoSearch ( text ) Parameters: Name Type Description text string Name of a page to search.","title":"DoSearch"},{"location":"Libraries/DomDynamicsAXTabControl/","text":"DomDynamicsAXTabControl \u00b6 This behavior pattern implements standard behavior for TabControl control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXTabControlBehavior Property Summary \u00b6 Property Description Getter Setter Expanded State of a tab with name. GetExpanded ItemsCount Number of tabs. GetItemsCount TabName Name of a tab at index GetTabName Action Summary \u00b6 Action Description DoCollapse Collapses specific tab in a tab control. DoExpand Expands specific tab in a tab control. Property Detail \u00b6 Expanded \u00b6 State of a tab with name. Returns 'true' if the tab is expanded, 'false' - otherwise. Getter Parameters: Name Type Description tabName string Name of a tab. Type: boolean Accessors: GetExpanded ItemsCount \u00b6 Number of tabs. Type: number Accessors: GetItemsCount TabName \u00b6 Name of a tab at index Getter Parameters: Name Type Description index number Index of a tab. Type: string Accessors: GetTabName Action Detail \u00b6 DoCollapse \u00b6 Collapses specific tab in a tab control. DoCollapse ( tabName ) Parameters: Name Type Description tabName string Name of a tab Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific tab in a tab control. DoExpand ( tabName ) Parameters: Name Type Description tabName string Name of a tab Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomDynamicsAXTabControl"},{"location":"Libraries/DomDynamicsAXTabControl/#domdynamicsaxtabcontrol","text":"This behavior pattern implements standard behavior for TabControl control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXTabControlBehavior","title":"DomDynamicsAXTabControl"},{"location":"Libraries/DomDynamicsAXTabControl/#property-summary","text":"Property Description Getter Setter Expanded State of a tab with name. GetExpanded ItemsCount Number of tabs. GetItemsCount TabName Name of a tab at index GetTabName","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXTabControl/#action-summary","text":"Action Description DoCollapse Collapses specific tab in a tab control. DoExpand Expands specific tab in a tab control.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXTabControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXTabControl/#expanded","text":"State of a tab with name. Returns 'true' if the tab is expanded, 'false' - otherwise. Getter Parameters: Name Type Description tabName string Name of a tab. Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/DomDynamicsAXTabControl/#itemscount","text":"Number of tabs. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/DomDynamicsAXTabControl/#tabname","text":"Name of a tab at index Getter Parameters: Name Type Description index number Index of a tab. Type: string Accessors: GetTabName","title":"TabName"},{"location":"Libraries/DomDynamicsAXTabControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXTabControl/#docollapse","text":"Collapses specific tab in a tab control. DoCollapse ( tabName ) Parameters: Name Type Description tabName string Name of a tab Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/DomDynamicsAXTabControl/#doexpand","text":"Expands specific tab in a tab control. DoExpand ( tabName ) Parameters: Name Type Description tabName string Name of a tab Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/DomDynamicsAXTextBox/","text":"DomDynamicsAXTextBox \u00b6 This behavior pattern implements standard behavior for TextBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( value , hitEnter ) Parameters: Name Type Description value string Text value. hitEnter boolean Pass 'true' to additionally hit enter after entering the text. Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomDynamicsAXTextBox"},{"location":"Libraries/DomDynamicsAXTextBox/#domdynamicsaxtextbox","text":"This behavior pattern implements standard behavior for TextBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsAXTextBoxBehavior","title":"DomDynamicsAXTextBox"},{"location":"Libraries/DomDynamicsAXTextBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DomDynamicsAXTextBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DomDynamicsAXTextBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsAXTextBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DomDynamicsAXTextBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsAXTextBox/#dosettext","text":"Sets text value of this object. DoSetText ( value , hitEnter ) Parameters: Name Type Description value string Text value. hitEnter boolean Pass 'true' to additionally hit enter after entering the text. Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DomDynamicsCrmAgGrid/","text":"DomDynamicsCrmAgGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmAgGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DomDynamicsCrmAgGrid"},{"location":"Libraries/DomDynamicsCrmAgGrid/#domdynamicscrmaggrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmAgGridBehavior","title":"DomDynamicsCrmAgGrid"},{"location":"Libraries/DomDynamicsCrmAgGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows","title":"Property Summary"},{"location":"Libraries/DomDynamicsCrmAgGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/DomDynamicsCrmAgGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsCrmAgGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomDynamicsCrmAgGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrows","text":"Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows","title":"SelectedRows"},{"location":"Libraries/DomDynamicsCrmAgGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsCrmAgGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomDynamicsCrmAgGrid/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/DomDynamicsCrmGrid/","text":"DomDynamicsCrmGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DomDynamicsCrmGrid"},{"location":"Libraries/DomDynamicsCrmGrid/#domdynamicscrmgrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmGridBehavior","title":"DomDynamicsCrmGrid"},{"location":"Libraries/DomDynamicsCrmGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows","title":"Property Summary"},{"location":"Libraries/DomDynamicsCrmGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/DomDynamicsCrmGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsCrmGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomDynamicsCrmGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomDynamicsCrmGrid/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomDynamicsCrmGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomDynamicsCrmGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrows","text":"Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows","title":"SelectedRows"},{"location":"Libraries/DomDynamicsCrmGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsCrmGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomDynamicsCrmGrid/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/","text":"DomDynamicsCrmUnifiedInterfaceGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmUnifiedInterfaceGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DomDynamicsCrmUnifiedInterfaceGrid"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#domdynamicscrmunifiedinterfacegrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmUnifiedInterfaceGridBehavior","title":"DomDynamicsCrmUnifiedInterfaceGrid"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows","title":"Property Summary"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrows","text":"Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows","title":"SelectedRows"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/","text":"DomDynamicsCrmUnifiedInterfaceList \u00b6 This behavior pattern implements standard behavior for List control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmUnifiedInterfaceListBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex Action Summary \u00b6 Action Description DoClickItem Performs click on the item Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex Action Detail \u00b6 DoClickItem \u00b6 Performs click on the item DoClickItem ( item , xOffset , yOffset ) Parameters: Name Type Description item string | number Index or name of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DomDynamicsCrmUnifiedInterfaceList"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#domdynamicscrmunifiedinterfacelist","text":"This behavior pattern implements standard behavior for List control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsCrmUnifiedInterfaceListBehavior","title":"DomDynamicsCrmUnifiedInterfaceList"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex","title":"Property Summary"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#action-summary","text":"Action Description DoClickItem Performs click on the item","title":"Action Summary"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#doclickitem","text":"Performs click on the item DoClickItem ( item , xOffset , yOffset ) Parameters: Name Type Description item string | number Index or name of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/DomDynamicsNAVEdit/","text":"DomDynamicsNAVEdit \u00b6 This behavior pattern implements standard behavior for Edit control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsNAVEditBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoClick Clicks on the edit field. DoOpen Opens lookup table for this edit field. DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoClick \u00b6 Clicks on the edit field. DoClick ( x , y , forceEvent ) Parameters: Name Type Description x number X coordinate to click. Optional. y number Y coordinate to click. Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise' DoOpen \u00b6 Opens lookup table for this edit field. DoOpen ( x , y , forceEvent ) Parameters: Name Type Description x number X coordinate to click. Optional. y number Y coordinate to click. Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise DoSetText \u00b6 Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomDynamicsNAVEdit"},{"location":"Libraries/DomDynamicsNAVEdit/#domdynamicsnavedit","text":"This behavior pattern implements standard behavior for Edit control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsNAVEditBehavior","title":"DomDynamicsNAVEdit"},{"location":"Libraries/DomDynamicsNAVEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DomDynamicsNAVEdit/#action-summary","text":"Action Description DoClick Clicks on the edit field. DoOpen Opens lookup table for this edit field. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DomDynamicsNAVEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsNAVEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DomDynamicsNAVEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsNAVEdit/#doclick","text":"Clicks on the edit field. DoClick ( x , y , forceEvent ) Parameters: Name Type Description x number X coordinate to click. Optional. y number Y coordinate to click. Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoClick"},{"location":"Libraries/DomDynamicsNAVEdit/#doopen","text":"Opens lookup table for this edit field. DoOpen ( x , y , forceEvent ) Parameters: Name Type Description x number X coordinate to click. Optional. y number Y coordinate to click. Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoOpen"},{"location":"Libraries/DomDynamicsNAVEdit/#dosettext","text":"Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DomDynamicsNAVGrid/","text":"DomDynamicsNAVGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsNAVGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoLookup Opens lookup table for the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSetText Sets a text value into the specified cell. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise. DoLookup \u00b6 Opens lookup table for the specified cell. DoLookup ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise DoScrollTo \u00b6 Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise DoSelect \u00b6 Selects a dropdown item in the specified cell. DoSelect ( row , col , item ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. Returns: boolean: 'true' if successful, 'false' otherwise DoSetText \u00b6 Sets a text value into the specified cell. DoSetText ( row , col , text ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DomDynamicsNAVGrid"},{"location":"Libraries/DomDynamicsNAVGrid/#domdynamicsnavgrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomDynamicsNAVGridBehavior","title":"DomDynamicsNAVGrid"},{"location":"Libraries/DomDynamicsNAVGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows","title":"Property Summary"},{"location":"Libraries/DomDynamicsNAVGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoLookup Opens lookup table for the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSetText Sets a text value into the specified cell.","title":"Action Summary"},{"location":"Libraries/DomDynamicsNAVGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomDynamicsNAVGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomDynamicsNAVGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomDynamicsNAVGrid/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomDynamicsNAVGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomDynamicsNAVGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrows","text":"Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows","title":"SelectedRows"},{"location":"Libraries/DomDynamicsNAVGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomDynamicsNAVGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomDynamicsNAVGrid/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/DomDynamicsNAVGrid/#dolookup","text":"Opens lookup table for the specified cell. DoLookup ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoLookup"},{"location":"Libraries/DomDynamicsNAVGrid/#doscrollto","text":"Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoScrollTo"},{"location":"Libraries/DomDynamicsNAVGrid/#doselect","text":"Selects a dropdown item in the specified cell. DoSelect ( row , col , item ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelect"},{"location":"Libraries/DomDynamicsNAVGrid/#dosettext","text":"Sets a text value into the specified cell. DoSetText ( row , col , text ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSetText"},{"location":"Libraries/DomLightningComboBox/","text":"DomLightningComboBox \u00b6 This behavior pattern implements standard behavior for Lightning ComboBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningComboBoxBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomLightningComboBox"},{"location":"Libraries/DomLightningComboBox/#domlightningcombobox","text":"This behavior pattern implements standard behavior for Lightning ComboBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningComboBoxBehavior","title":"DomLightningComboBox"},{"location":"Libraries/DomLightningComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DomLightningComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomLightningComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DomLightningGrid/","text":"DomLightningGrid \u00b6 This behavior pattern implements standard behavior for Lightning Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise","title":"DomLightningGrid"},{"location":"Libraries/DomLightningGrid/#domlightninggrid","text":"This behavior pattern implements standard behavior for Lightning Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningGridBehavior","title":"DomLightningGrid"},{"location":"Libraries/DomLightningGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DomLightningGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid.","title":"Action Summary"},{"location":"Libraries/DomLightningGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomLightningGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomLightningGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomLightningGrid/#columnindex","text":"Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomLightningGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomLightningGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomLightningGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomLightningGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomLightningGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/DomLightningListBox/","text":"DomLightningListBox \u00b6 This behavior pattern implements standard behavior for Lightning ListBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningListBoxBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomLightningListBox"},{"location":"Libraries/DomLightningListBox/#domlightninglistbox","text":"This behavior pattern implements standard behavior for Lightning ListBox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomLightningListBoxBehavior","title":"DomLightningListBox"},{"location":"Libraries/DomLightningListBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DomLightningListBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomLightningListBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DomSAPButton/","text":"DomSAPButton \u00b6 Button control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPButtonBehavior","title":"DomSAPButton"},{"location":"Libraries/DomSAPButton/#domsapbutton","text":"Button control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPButtonBehavior","title":"DomSAPButton"},{"location":"Libraries/DomSAPCombobox/","text":"DomSAPCombobox \u00b6 Combobox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPComboboxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DomSAPCombobox"},{"location":"Libraries/DomSAPCombobox/#domsapcombobox","text":"Combobox control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPComboboxBehavior","title":"DomSAPCombobox"},{"location":"Libraries/DomSAPCombobox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/DomSAPCombobox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DomSAPCombobox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomSAPCombobox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/DomSAPCombobox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomSAPCombobox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DomSAPGrid/","text":"DomSAPGrid \u00b6 Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSelectAll Selects/deselects all rows based on check parameter value. DoSelectRow Selects/deselects a given row based on check parameter value. DoSetText Sets a text value into the specified cell. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoScrollTo \u00b6 Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise DoSelect \u00b6 Selects a dropdown item in the specified cell. DoSelect ( row , col , item ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. Returns: boolean: 'true' if successful, 'false' otherwise DoSelectAll \u00b6 Selects/deselects all rows based on check parameter value. DoSelectAll ( check ) Parameters: Name Type Description check boolean Desired checkbox state. Returns: boolean: 'true' if successful, 'false' otherwise DoSelectRow \u00b6 Selects/deselects a given row based on check parameter value. DoSelectRow ( row , check ) Parameters: Name Type Description row number Zero-based index if the row. check boolean Desired checkbox state. Returns: boolean: 'true' if successful, 'false' otherwise DoSetText \u00b6 Sets a text value into the specified cell. DoSetText ( row , col , text ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DomSAPGrid"},{"location":"Libraries/DomSAPGrid/#domsapgrid","text":"Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPGridBehavior","title":"DomSAPGrid"},{"location":"Libraries/DomSAPGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DomSAPGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSelectAll Selects/deselects all rows based on check parameter value. DoSelectRow Selects/deselects a given row based on check parameter value. DoSetText Sets a text value into the specified cell.","title":"Action Summary"},{"location":"Libraries/DomSAPGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomSAPGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomSAPGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomSAPGrid/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomSAPGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomSAPGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomSAPGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomSAPGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomSAPGrid/#doscrollto","text":"Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoScrollTo"},{"location":"Libraries/DomSAPGrid/#doselect","text":"Selects a dropdown item in the specified cell. DoSelect ( row , col , item ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelect"},{"location":"Libraries/DomSAPGrid/#doselectall","text":"Selects/deselects all rows based on check parameter value. DoSelectAll ( check ) Parameters: Name Type Description check boolean Desired checkbox state. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelectAll"},{"location":"Libraries/DomSAPGrid/#doselectrow","text":"Selects/deselects a given row based on check parameter value. DoSelectRow ( row , check ) Parameters: Name Type Description row number Zero-based index if the row. check boolean Desired checkbox state. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSelectRow"},{"location":"Libraries/DomSAPGrid/#dosettext","text":"Sets a text value into the specified cell. DoSetText ( row , col , text ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSetText"},{"location":"Libraries/DomSAPInput/","text":"DomSAPInput \u00b6 Input field. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPInputBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoOpen Clicks right-side icon of the input. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoOpen \u00b6 Clicks right-side icon of the input. DoOpen () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DomSAPInput"},{"location":"Libraries/DomSAPInput/#domsapinput","text":"Input field. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPInputBehavior","title":"DomSAPInput"},{"location":"Libraries/DomSAPInput/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DomSAPInput/#action-summary","text":"Action Description DoOpen Clicks right-side icon of the input.","title":"Action Summary"},{"location":"Libraries/DomSAPInput/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomSAPInput/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DomSAPInput/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomSAPInput/#doopen","text":"Clicks right-side icon of the input. DoOpen () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoOpen"},{"location":"Libraries/DomSAPTable/","text":"DomSAPTable \u00b6 Table control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPTableBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoScrollTo Scrolls to the specified cell. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise. DoScrollTo \u00b6 Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DomSAPTable"},{"location":"Libraries/DomSAPTable/#domsaptable","text":"Table control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSAPTableBehavior","title":"DomSAPTable"},{"location":"Libraries/DomSAPTable/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DomSAPTable/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoScrollTo Scrolls to the specified cell.","title":"Action Summary"},{"location":"Libraries/DomSAPTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomSAPTable/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomSAPTable/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomSAPTable/#columnindex","text":"Index of a column with a given name. Getter Parameters: Name Type Description columnName string Name of a column. Type: string Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomSAPTable/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomSAPTable/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomSAPTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomSAPTable/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomSAPTable/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/DomSAPTable/#doscrollto","text":"Scrolls to the specified cell. DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoScrollTo"},{"location":"Libraries/DomSalesforceGrid/","text":"DomSalesforceGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSalesforceGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise","title":"DomSalesforceGrid"},{"location":"Libraries/DomSalesforceGrid/#domsalesforcegrid","text":"This behavior pattern implements standard behavior for Grid control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSalesforceGridBehavior","title":"DomSalesforceGrid"},{"location":"Libraries/DomSalesforceGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DomSalesforceGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid.","title":"Action Summary"},{"location":"Libraries/DomSalesforceGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DomSalesforceGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DomSalesforceGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DomSalesforceGrid/#columnindex","text":"Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DomSalesforceGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DomSalesforceGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DomSalesforceGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DomSalesforceGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DomSalesforceGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( text , index ) Parameters: Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times. Optional. Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/DynamicsAXAddressBar/","text":"DynamicsAXAddressBar \u00b6 DynamicsAX DynamicsAXAddressBar. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXAddressBarBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXAddressBar"},{"location":"Libraries/DynamicsAXAddressBar/#dynamicsaxaddressbar","text":"DynamicsAX DynamicsAXAddressBar. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXAddressBarBehavior","title":"DynamicsAXAddressBar"},{"location":"Libraries/DynamicsAXAddressBar/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DynamicsAXAddressBar/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXAddressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsAXAddressBar/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DynamicsAXAddressBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXAddressBar/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DynamicsAXComboBox/","text":"DynamicsAXComboBox \u00b6 Behavior patterm for Dynamics AX combo box. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXComboBox"},{"location":"Libraries/DynamicsAXComboBox/#dynamicsaxcombobox","text":"Behavior patterm for Dynamics AX combo box. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior","title":"DynamicsAXComboBox"},{"location":"Libraries/DynamicsAXComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DynamicsAXComboBoxEdit/","text":"DynamicsAXComboBoxEdit \u00b6 DynamicsAX DynamicsAXComboBoxEdit. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DynamicsAXTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXComboBoxEdit"},{"location":"Libraries/DynamicsAXComboBoxEdit/#dynamicsaxcomboboxedit","text":"DynamicsAX DynamicsAXComboBoxEdit. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior","title":"DynamicsAXComboBoxEdit"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXComboBoxEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DynamicsAXTextBoxBehavior","title":"DoSelectItem"},{"location":"Libraries/DynamicsAXComboBoxEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsAXComboBoxEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/","text":"DynamicsAXComboBoxEditExpanded \u00b6 DynamicsAX DynamicsAXComboBoxEditExpanded. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DynamicsAXTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXComboBoxEditExpanded"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#dynamicsaxcomboboxeditexpanded","text":"DynamicsAX DynamicsAXComboBoxEditExpanded. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXComboBoxBehavior","title":"DynamicsAXComboBoxEditExpanded"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: DynamicsAXTextBoxBehavior","title":"DoSelectItem"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DynamicsAXFastTabs/","text":"DynamicsAXFastTabs \u00b6 Behavior patterm for Dynamics AX fast tabs control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXFastTabsBehavior Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXFastTabs"},{"location":"Libraries/DynamicsAXFastTabs/#dynamicsaxfasttabs","text":"Behavior patterm for Dynamics AX fast tabs control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXFastTabsBehavior","title":"DynamicsAXFastTabs"},{"location":"Libraries/DynamicsAXFastTabs/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/DynamicsAXFastTabs/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXFastTabs/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/DynamicsAXMenu/","text":"DynamicsAXMenu \u00b6 Behavior patterm for Dynamics AX menu. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXMenu"},{"location":"Libraries/DynamicsAXMenu/#dynamicsaxmenu","text":"Behavior patterm for Dynamics AX menu. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuBehavior","title":"DynamicsAXMenu"},{"location":"Libraries/DynamicsAXMenu/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/DynamicsAXMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/DynamicsAXMenuDropDown/","text":"DynamicsAXMenuDropDown \u00b6 Behavior patterm for Dynamics AX dropdown (popup). Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuDropDownBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXMenuDropDown"},{"location":"Libraries/DynamicsAXMenuDropDown/#dynamicsaxmenudropdown","text":"Behavior patterm for Dynamics AX dropdown (popup). Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuDropDownBehavior","title":"DynamicsAXMenuDropDown"},{"location":"Libraries/DynamicsAXMenuDropDown/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXMenuDropDown/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXMenuDropDown/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DynamicsAXMenuDropDownList/","text":"DynamicsAXMenuDropDownList \u00b6 DynamicsAX DynamicsAXMenuDropDownList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuDropDownBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXMenuDropDownList"},{"location":"Libraries/DynamicsAXMenuDropDownList/#dynamicsaxmenudropdownlist","text":"DynamicsAX DynamicsAXMenuDropDownList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuDropDownBehavior","title":"DynamicsAXMenuDropDownList"},{"location":"Libraries/DynamicsAXMenuDropDownList/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXMenuDropDownList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXMenuDropDownList/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/DynamicsAXMenuItem/","text":"DynamicsAXMenuItem \u00b6 DynamicsAX DynamicsAXMenuItem. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuItemBehavior","title":"DynamicsAXMenuItem"},{"location":"Libraries/DynamicsAXMenuItem/#dynamicsaxmenuitem","text":"DynamicsAX DynamicsAXMenuItem. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXMenuItemBehavior","title":"DynamicsAXMenuItem"},{"location":"Libraries/DynamicsAXTable/","text":"DynamicsAXTable \u00b6 Behavior patterm for Dynamics AX grid/table. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXTableBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Zero-based index of the column. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScroll Scrolls table horizontally and vertically. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell CellObject \u00b6 UIAObject for the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: UIAObject Accessors: GetCellObject ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Zero-based index of the column. Getter Parameters: Name Type Description columnName string Name of a column. Type: number Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName ColumnValues \u00b6 Values of cells in a column Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. Type: Array Accessors: GetColumnValues RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickColumn \u00b6 Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. DoScroll \u00b6 Scrolls table horizontally and vertically. DoScroll ( horizontalPercent , verticalPercent ) Parameters: Name Type Description horizontalPercent number Percent value from 0 to 100. -1 means no horizontal scroll. verticalPercent number Percent value from 0 to 100. -1 means no vertical scroll.","title":"DynamicsAXTable"},{"location":"Libraries/DynamicsAXTable/#dynamicsaxtable","text":"Behavior patterm for Dynamics AX grid/table. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXTableBehavior","title":"DynamicsAXTable"},{"location":"Libraries/DynamicsAXTable/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Zero-based index of the column. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DynamicsAXTable/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScroll Scrolls table horizontally and vertically.","title":"Action Summary"},{"location":"Libraries/DynamicsAXTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsAXTable/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DynamicsAXTable/#cellobject","text":"UIAObject for the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: UIAObject Accessors: GetCellObject","title":"CellObject"},{"location":"Libraries/DynamicsAXTable/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DynamicsAXTable/#columnindex","text":"Zero-based index of the column. Getter Parameters: Name Type Description columnName string Name of a column. Type: number Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DynamicsAXTable/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DynamicsAXTable/#columnvalues","text":"Values of cells in a column Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. Type: Array Accessors: GetColumnValues","title":"ColumnValues"},{"location":"Libraries/DynamicsAXTable/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DynamicsAXTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXTable/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DynamicsAXTable/#doclickcolumn","text":"Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional.","title":"DoClickColumn"},{"location":"Libraries/DynamicsAXTable/#doscroll","text":"Scrolls table horizontally and vertically. DoScroll ( horizontalPercent , verticalPercent ) Parameters: Name Type Description horizontalPercent number Percent value from 0 to 100. -1 means no horizontal scroll. verticalPercent number Percent value from 0 to 100. -1 means no vertical scroll.","title":"DoScroll"},{"location":"Libraries/DynamicsAXTextBox/","text":"DynamicsAXTextBox \u00b6 This behavior pattern implements standard behavior for TextBox control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsAXTextBox"},{"location":"Libraries/DynamicsAXTextBox/#dynamicsaxtextbox","text":"This behavior pattern implements standard behavior for TextBox control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsAXTextBoxBehavior","title":"DynamicsAXTextBox"},{"location":"Libraries/DynamicsAXTextBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/DynamicsAXTextBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/DynamicsAXTextBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsAXTextBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/DynamicsAXTextBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsAXTextBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/DynamicsNAV/","text":"DynamicsNAV \u00b6 DynamicsNAV object. Implements common functions you may need in any Dynamics NAV test. Action Summary \u00b6 Action Description DoLaunch Action Detail \u00b6 DoLaunch \u00b6 DoLaunch ()","title":"DynamicsNAV"},{"location":"Libraries/DynamicsNAV/#dynamicsnav","text":"DynamicsNAV object. Implements common functions you may need in any Dynamics NAV test.","title":"DynamicsNAV"},{"location":"Libraries/DynamicsNAV/#action-summary","text":"Action Description DoLaunch","title":"Action Summary"},{"location":"Libraries/DynamicsNAV/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsNAV/#dolaunch","text":"DoLaunch ()","title":"DoLaunch"},{"location":"Libraries/DynamicsNAVFastTabs/","text":"DynamicsNAVFastTabs \u00b6 Behavior patterm for Dynamics NAV fast tabs control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVFastTabsBehavior Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName , toggleAdditionalFields , additionalFieldsButtonName ) Parameters: Name Type Description tabName string Tab name to select. toggleAdditionalFields boolean Set to true to click on Show more fields button inside the tab. Supported in Rapise 6.4+. Optional, Default: \"false\". additionalFieldsButtonName string If Show more fields button is named differently in your locale you need to specify it. Supported in Rapise 6.4+. Optional, Default: \"Show more fields\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsNAVFastTabs"},{"location":"Libraries/DynamicsNAVFastTabs/#dynamicsnavfasttabs","text":"Behavior patterm for Dynamics NAV fast tabs control. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVFastTabsBehavior","title":"DynamicsNAVFastTabs"},{"location":"Libraries/DynamicsNAVFastTabs/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/DynamicsNAVFastTabs/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsNAVFastTabs/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName , toggleAdditionalFields , additionalFieldsButtonName ) Parameters: Name Type Description tabName string Tab name to select. toggleAdditionalFields boolean Set to true to click on Show more fields button inside the tab. Supported in Rapise 6.4+. Optional, Default: \"false\". additionalFieldsButtonName string If Show more fields button is named differently in your locale you need to specify it. Supported in Rapise 6.4+. Optional, Default: \"Show more fields\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/DynamicsNAVTable/","text":"DynamicsNAVTable \u00b6 Behavior patterm for Dynamics NAV grid/table. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVTableBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject CellRowIndex Index of a row with the specified cell. GetCellRowIndex ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScrollTo Scrolls to the specified cell Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell CellObject \u00b6 UIAObject for the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: UIAObject Accessors: GetCellObject CellRowIndex \u00b6 Index of a row with the specified cell. Getter Parameters: Name Type Description row string Text in the cell to search for. col string | number Name of a column or zero-based column index. Type: number Accessors: GetCellRowIndex ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnIndex \u00b6 Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName ColumnValues \u00b6 Values of cells in a column Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. Type: Array Accessors: GetColumnValues RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickColumn \u00b6 Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. DoScrollTo \u00b6 Scrolls to the specified cell DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name.","title":"DynamicsNAVTable"},{"location":"Libraries/DynamicsNAVTable/#dynamicsnavtable","text":"Behavior patterm for Dynamics NAV grid/table. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVTableBehavior","title":"DynamicsNAVTable"},{"location":"Libraries/DynamicsNAVTable/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject CellRowIndex Index of a row with the specified cell. GetCellRowIndex ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/DynamicsNAVTable/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScrollTo Scrolls to the specified cell","title":"Action Summary"},{"location":"Libraries/DynamicsNAVTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/DynamicsNAVTable/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/DynamicsNAVTable/#cellobject","text":"UIAObject for the specified cell. Getter Parameters: Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. Type: UIAObject Accessors: GetCellObject","title":"CellObject"},{"location":"Libraries/DynamicsNAVTable/#cellrowindex","text":"Index of a row with the specified cell. Getter Parameters: Name Type Description row string Text in the cell to search for. col string | number Name of a column or zero-based column index. Type: number Accessors: GetCellRowIndex","title":"CellRowIndex"},{"location":"Libraries/DynamicsNAVTable/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/DynamicsNAVTable/#columnindex","text":"Index of a column with given name. Getter Parameters: Name Type Description columnName string Column name. Type: number Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/DynamicsNAVTable/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/DynamicsNAVTable/#columnvalues","text":"Values of cells in a column Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. Type: Array Accessors: GetColumnValues","title":"ColumnValues"},{"location":"Libraries/DynamicsNAVTable/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/DynamicsNAVTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsNAVTable/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/DynamicsNAVTable/#doclickcolumn","text":"Clicks on column header DoClickColumn ( col , clickType , xOffset , yOffset ) Parameters: Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional.","title":"DoClickColumn"},{"location":"Libraries/DynamicsNAVTable/#doscrollto","text":"Scrolls to the specified cell DoScrollTo ( row , col ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name.","title":"DoScrollTo"},{"location":"Libraries/DynamicsNAVToolBar/","text":"DynamicsNAVToolBar \u00b6 Behavior patterm for Dynamics NAV toolbar with menu items. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVToolBarBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DynamicsNAVToolBar"},{"location":"Libraries/DynamicsNAVToolBar/#dynamicsnavtoolbar","text":"Behavior patterm for Dynamics NAV toolbar with menu items. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: DynamicsNAVToolBarBehavior","title":"DynamicsNAVToolBar"},{"location":"Libraries/DynamicsNAVToolBar/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/DynamicsNAVToolBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/DynamicsNAVToolBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/FarPointGrid/","text":"FarPointGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends SeSSimulatedObject Behavior Pattern: FarPointGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedCells Selected cells. GetSelectedCells SetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount Text Text of the currently focused cell. GetText SetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell DoFullText Returns text representation of the table. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. Type: string Accessors: GetCell, SetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount, SetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount, SetRowCount SelectedCells \u00b6 Selected cells. Getter Parameters: Name Type Description asArray rowcolSep cellSep Type: array|string Accessors: GetSelectedCells, SetSelectedCells SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedColumnCount \u00b6 Number of selected columns. Type: number Accessors: GetSelectedColumnCount SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell DoClickCell ( rowIndex , columnIndex ) Parameters: Name Type Description rowIndex number Zero-based index if the row. columnIndex number Zero-based index of the column. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText ( fileName ) Parameters: Name Type Description fileName string Name of a file that should hold text representation of the grid. Optional. Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"FarPointGrid"},{"location":"Libraries/FarPointGrid/#farpointgrid","text":"This behavior pattern implements standard behavior for Grid control. Extends SeSSimulatedObject Behavior Pattern: FarPointGridBehavior","title":"FarPointGrid"},{"location":"Libraries/FarPointGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedCells Selected cells. GetSelectedCells SetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount Text Text of the currently focused cell. GetText SetText","title":"Property Summary"},{"location":"Libraries/FarPointGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/FarPointGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/FarPointGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. Type: string Accessors: GetCell, SetCell","title":"Cell"},{"location":"Libraries/FarPointGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount, SetColumnCount","title":"ColumnCount"},{"location":"Libraries/FarPointGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName","title":"ColumnName"},{"location":"Libraries/FarPointGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount, SetRowCount","title":"RowCount"},{"location":"Libraries/FarPointGrid/#selectedcells","text":"Selected cells. Getter Parameters: Name Type Description asArray rowcolSep cellSep Type: array|string Accessors: GetSelectedCells, SetSelectedCells","title":"SelectedCells"},{"location":"Libraries/FarPointGrid/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/FarPointGrid/#selectedcolumncount","text":"Number of selected columns. Type: number Accessors: GetSelectedColumnCount","title":"SelectedColumnCount"},{"location":"Libraries/FarPointGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/FarPointGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/FarPointGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/FarPointGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/FarPointGrid/#doclickcell","text":"Clicks the specified cell DoClickCell ( rowIndex , columnIndex ) Parameters: Name Type Description rowIndex number Zero-based index if the row. columnIndex number Zero-based index of the column. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/FarPointGrid/#dofulltext","text":"Returns text representation of the table. DoFullText ( fileName ) Parameters: Name Type Description fileName string Name of a file that should hold text representation of the grid. Optional. Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/FarPointGridAX/","text":"FarPointGridAX \u00b6 This behavior pattern implements standard behavior for Grid control. Extends SeSSimulatedObject Behavior Pattern: FarPointGridAXBehavior Property Summary \u00b6 Property Description Getter Setter CellComboList Get array of dropdown values for a given cell. GetCellComboList CellInfo Returns object with following fields. GetCellInfo ColumnCount Number of columns in the grid. GetColumnCount ColumnHeaders Get array of column captions. GetColumnHeaders ColumnIndex Get column index by name. GetColumnIndex ColumnInfo Returns object with following fields. GetColumnInfo GridInfo Returns object with following fields. GetGridInfo RowCount Number of rows in the table. GetRowCount RowHeaders Get array of row captions. GetRowHeaders RowInfo Returns object with following fields. GetRowInfo SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow SetSelectedRow SelectedRowsCount Get number of selected rows. GetSelectedRowsCount Text Text of the specified cell. GetText SetText Action Summary \u00b6 Action Description DoActivateCell Make specified cell active DoClearCell Clear specified cell range DoClickCell Clicks the specified cell DoExportGrid Save Grid data to file DoFullText Return whole grid as text Property Detail \u00b6 CellComboList \u00b6 Get array of dropdown values for a given cell. Getter Parameters: Name Type Description row number Row index col number Column index Type: array Accessors: GetCellComboList CellInfo \u00b6 Returns object with following fields. ActionOnEnter one of: 0 None (Default) Active cell does not change 1 Up Active cell moves up 2 Down Active cell moves down 3 Left Active cell moves left 4 Right Active cell moves right 5 Next Next cell becomes active cell 6 Previous Previous cell becomes active cell 7 Same Current cell remains active cell 8 Next Row Active cell moves to first column of next row EditMode Locked MoveOnArrow ArrowsExitEditMode; NextCellOnTab ProcessTab; Type one of: 0 Date Creates date cell 1 Edit (Default) Creates edit cell 4 PIC Creates PIC cell 5 Static Text Creates static text cell 6 Time Creates time cell 7 Button Creates button cell 8 Combo Box Creates combo box cell 9 Picture Creates picture cell 10 Check Box Creates check box cell 11 OwnerDrawn Creates ownerdrawn cell 12 Currency Creates currency cell 13 Number Creates numeric cell 14 Percent Creates percent cell 15 Scientific Creates scientific cell 16 Custom Creates custom cell Text Value Width WidthTwips Height HeightTwips Left Right Top Bottom Visible row col Getter Parameters: Name Type Description row number Row index col number Column index Type: object Accessors: GetCellInfo ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount ColumnHeaders \u00b6 Get array of column captions. Type: array Accessors: GetColumnHeaders ColumnIndex \u00b6 Get column index by name. Getter Parameters: Name Type Description colName string Column name Type: number Accessors: GetColumnIndex ColumnInfo \u00b6 Returns object with following fields. Header - Column caption, if any Width - Width in pixels WidthTwips - Width in TWIPs Hidden Index Visible Getter Parameters: Name Type Description col number Column index Type: object Accessors: GetColumnInfo GridInfo \u00b6 Returns object with following fields. ActiveCol ActiveRow ColCount RowCount Enabled Visible Top Bottom Height Width Rect [Top, Right, Bottom, Left] Left Right hWnd TopRow LeftCol Type: object Accessors: GetGridInfo RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount RowHeaders \u00b6 Get array of row captions. Type: array Accessors: GetRowHeaders RowInfo \u00b6 Returns object with following fields. ActiveCol ActiveRow ColCount RowCount Enabled Visible Top Bottom Height Width Rect [Top, Right, Bottom, Left] Left Right hWnd TopRow LeftCol Getter Parameters: Name Type Description row number Row index Type: object Accessors: GetRowInfo SelectedCells \u00b6 Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separator Optional. cellSep string cell separator Optional. Type: string Accessors: GetSelectedCells SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn, SetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow, SetSelectedRow SelectedRowsCount \u00b6 Get number of selected rows. Type: number Accessors: GetSelectedRowsCount Text \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoActivateCell \u00b6 Make specified cell active DoActivateCell ( row , col ) Parameters: Name Type Description row number Column to use col number Column to use DoClearCell \u00b6 Clear specified cell range DoClearCell ( col1 , row1 , col2 , row2 ) Parameters: Name Type Description col1 number Column to use row1 number Column to use col2 number Column to use row2 number Column to use DoClickCell \u00b6 Clicks the specified cell DoClickCell ( col , row , clickType , xOffset , yOffset ) Parameters: Name Type Description col number Zero-based index of the column. row number Zero-based index if the row. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoExportGrid \u00b6 Save Grid data to file DoExportGrid ( fileName , type ) Parameters: Name Type Description fileName string Path to destination file type string Export file format (EXCEL, HTML, XML). Empty (\"\") for tab-separated text Possible values: \"EXCEL\", \"HTML\", \"XML\", \"\" Optional, Default: \"L\". DoFullText \u00b6 Return whole grid as text DoFullText ( saveToFile , fileName ) Parameters: Name Type Description saveToFile boolean 'true' if you need to have copy of the text in the file fileName string Path to destination file","title":"FarPointGridAX"},{"location":"Libraries/FarPointGridAX/#farpointgridax","text":"This behavior pattern implements standard behavior for Grid control. Extends SeSSimulatedObject Behavior Pattern: FarPointGridAXBehavior","title":"FarPointGridAX"},{"location":"Libraries/FarPointGridAX/#property-summary","text":"Property Description Getter Setter CellComboList Get array of dropdown values for a given cell. GetCellComboList CellInfo Returns object with following fields. GetCellInfo ColumnCount Number of columns in the grid. GetColumnCount ColumnHeaders Get array of column captions. GetColumnHeaders ColumnIndex Get column index by name. GetColumnIndex ColumnInfo Returns object with following fields. GetColumnInfo GridInfo Returns object with following fields. GetGridInfo RowCount Number of rows in the table. GetRowCount RowHeaders Get array of row captions. GetRowHeaders RowInfo Returns object with following fields. GetRowInfo SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow SetSelectedRow SelectedRowsCount Get number of selected rows. GetSelectedRowsCount Text Text of the specified cell. GetText SetText","title":"Property Summary"},{"location":"Libraries/FarPointGridAX/#action-summary","text":"Action Description DoActivateCell Make specified cell active DoClearCell Clear specified cell range DoClickCell Clicks the specified cell DoExportGrid Save Grid data to file DoFullText Return whole grid as text","title":"Action Summary"},{"location":"Libraries/FarPointGridAX/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/FarPointGridAX/#cellcombolist","text":"Get array of dropdown values for a given cell. Getter Parameters: Name Type Description row number Row index col number Column index Type: array Accessors: GetCellComboList","title":"CellComboList"},{"location":"Libraries/FarPointGridAX/#cellinfo","text":"Returns object with following fields. ActionOnEnter one of: 0 None (Default) Active cell does not change 1 Up Active cell moves up 2 Down Active cell moves down 3 Left Active cell moves left 4 Right Active cell moves right 5 Next Next cell becomes active cell 6 Previous Previous cell becomes active cell 7 Same Current cell remains active cell 8 Next Row Active cell moves to first column of next row EditMode Locked MoveOnArrow ArrowsExitEditMode; NextCellOnTab ProcessTab; Type one of: 0 Date Creates date cell 1 Edit (Default) Creates edit cell 4 PIC Creates PIC cell 5 Static Text Creates static text cell 6 Time Creates time cell 7 Button Creates button cell 8 Combo Box Creates combo box cell 9 Picture Creates picture cell 10 Check Box Creates check box cell 11 OwnerDrawn Creates ownerdrawn cell 12 Currency Creates currency cell 13 Number Creates numeric cell 14 Percent Creates percent cell 15 Scientific Creates scientific cell 16 Custom Creates custom cell Text Value Width WidthTwips Height HeightTwips Left Right Top Bottom Visible row col Getter Parameters: Name Type Description row number Row index col number Column index Type: object Accessors: GetCellInfo","title":"CellInfo"},{"location":"Libraries/FarPointGridAX/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/FarPointGridAX/#columnheaders","text":"Get array of column captions. Type: array Accessors: GetColumnHeaders","title":"ColumnHeaders"},{"location":"Libraries/FarPointGridAX/#columnindex","text":"Get column index by name. Getter Parameters: Name Type Description colName string Column name Type: number Accessors: GetColumnIndex","title":"ColumnIndex"},{"location":"Libraries/FarPointGridAX/#columninfo","text":"Returns object with following fields. Header - Column caption, if any Width - Width in pixels WidthTwips - Width in TWIPs Hidden Index Visible Getter Parameters: Name Type Description col number Column index Type: object Accessors: GetColumnInfo","title":"ColumnInfo"},{"location":"Libraries/FarPointGridAX/#gridinfo","text":"Returns object with following fields. ActiveCol ActiveRow ColCount RowCount Enabled Visible Top Bottom Height Width Rect [Top, Right, Bottom, Left] Left Right hWnd TopRow LeftCol Type: object Accessors: GetGridInfo","title":"GridInfo"},{"location":"Libraries/FarPointGridAX/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/FarPointGridAX/#rowheaders","text":"Get array of row captions. Type: array Accessors: GetRowHeaders","title":"RowHeaders"},{"location":"Libraries/FarPointGridAX/#rowinfo","text":"Returns object with following fields. ActiveCol ActiveRow ColCount RowCount Enabled Visible Top Bottom Height Width Rect [Top, Right, Bottom, Left] Left Right hWnd TopRow LeftCol Getter Parameters: Name Type Description row number Row index Type: object Accessors: GetRowInfo","title":"RowInfo"},{"location":"Libraries/FarPointGridAX/#selectedcells","text":"Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separator Optional. cellSep string cell separator Optional. Type: string Accessors: GetSelectedCells","title":"SelectedCells"},{"location":"Libraries/FarPointGridAX/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn, SetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/FarPointGridAX/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow, SetSelectedRow","title":"SelectedRow"},{"location":"Libraries/FarPointGridAX/#selectedrowscount","text":"Get number of selected rows. Type: number Accessors: GetSelectedRowsCount","title":"SelectedRowsCount"},{"location":"Libraries/FarPointGridAX/#text","text":"Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/FarPointGridAX/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/FarPointGridAX/#doactivatecell","text":"Make specified cell active DoActivateCell ( row , col ) Parameters: Name Type Description row number Column to use col number Column to use","title":"DoActivateCell"},{"location":"Libraries/FarPointGridAX/#doclearcell","text":"Clear specified cell range DoClearCell ( col1 , row1 , col2 , row2 ) Parameters: Name Type Description col1 number Column to use row1 number Column to use col2 number Column to use row2 number Column to use","title":"DoClearCell"},{"location":"Libraries/FarPointGridAX/#doclickcell","text":"Clicks the specified cell DoClickCell ( col , row , clickType , xOffset , yOffset ) Parameters: Name Type Description col number Zero-based index of the column. row number Zero-based index if the row. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/FarPointGridAX/#doexportgrid","text":"Save Grid data to file DoExportGrid ( fileName , type ) Parameters: Name Type Description fileName string Path to destination file type string Export file format (EXCEL, HTML, XML). Empty (\"\") for tab-separated text Possible values: \"EXCEL\", \"HTML\", \"XML\", \"\" Optional, Default: \"L\".","title":"DoExportGrid"},{"location":"Libraries/FarPointGridAX/#dofulltext","text":"Return whole grid as text DoFullText ( saveToFile , fileName ) Parameters: Name Type Description saveToFile boolean 'true' if you need to have copy of the text in the file fileName string Path to destination file","title":"DoFullText"},{"location":"Libraries/File/","text":"File \u00b6 File object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test. Action Summary \u00b6 Action Description Append Appends text to a file. CreateFolder Creates a folder. Delete Deletes a file. DeleteFolder Deletes a folder. Exists Checks if file exists or not. Find Find files in folder using wildcard pattern (including * and ?). FolderExists Checks if folder exists. FolderInfo Gets information about a folder. Include Includes code from a file. IncludeOnce Includes code from a file if it was not included earlier. Info Gets information about a file. Read Reads UTF-8 encoded text file. ResolvePath Finds the file in test folders and calculates its absolute path. Touch Sets file modification time to current time. Write Writes text file. Action Detail \u00b6 Append \u00b6 Appends text to a file. Append ( fileName , text ) Parameters: Name Type Description fileName string Name of the file. text string Text to append to the file. CreateFolder \u00b6 Creates a folder. CreateFolder ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Delete \u00b6 Deletes a file. Delete ( fileName ) Parameters: Name Type Description fileName string Name of the file to delete. DeleteFolder \u00b6 Deletes a folder. DeleteFolder ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Exists \u00b6 Checks if file exists or not. Exists ( fileName ) Parameters: Name Type Description fileName string Name of the file to check. Returns: true if file exists, false otherwise. Find \u00b6 Find files in folder using wildcard pattern (including * and ?). I.e. File.Find(\"c:/Temp\", \"*.txt\", true) may return C:\\Temp\\file1.txt C:\\Temp\\SubFolder\\file2.txt C:\\Temp\\SubFolder2\\file3.txt C:\\Temp\\SubFolder2\\file4.txt Result may be converted to array like that: var arrFiles = File.Find(\"c:/Temp\", \"*.txt\", true).split('\\n'); Find ( path , searchPattern , recursive , firstOnly , files , folders ) Parameters: Name Type Description path string Path to a folder to search in. searchPattern string Search pattern (may include * and ? wildcards, but no regexp). recursive boolean 'true' for folder and subfolders. Optional, Default: \"false\". firstOnly boolean Return only first matching item (if any). Optional, Default: \"false\". files boolean Return matching files. Optional, Default: \"true\". folders boolean Return matching folders. Optional, Default: \"false\". Returns: string: \\n-separated string where each line is a path to the found item. FolderExists \u00b6 Checks if folder exists. FolderExists ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Returns: true if folder exists, false - otherwise. FolderInfo \u00b6 Gets information about a folder. FolderInfo ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Returns: Folder object as described here https://msdn.microsoft.com/en-us/library/1c87day3%28v=vs.84%29.aspx e.g. Path, SubFolders and Files enumeration. Include \u00b6 Includes code from a file. Normally used together with eval statement, i.e.: eval( File.Include('myfile.js') ) Include ( fileName ) Parameters: Name Type Description fileName string Name of the file to load. Returns: Contents of the source file for evaluation. IncludeOnce \u00b6 Includes code from a file if it was not included earlier. Normally used together with eval statement, i.e.: eval( File.IncludeOnce('myfile.js') ) IncludeOnce ( fileName ) Parameters: Name Type Description fileName string Name of the file to load. Returns: Contents of the source file for evaluation. Info \u00b6 Gets information about a file. Info ( fileName ) Parameters: Name Type Description fileName string Name of the file. Returns: File object as described here https://msdn.microsoft.com/en-us/library/1ft05taf%28v=vs.84%29.aspx e.g. DateLastModified, Size, Type, Name, Path. Read \u00b6 Reads UTF-8 encoded text file. Read ( fileName ) Parameters: Name Type Description fileName string Name of the file to read. Returns: Contents of the text file as string. ResolvePath \u00b6 Finds the file in test folders and calculates its absolute path. ResolvePath ( fileName ) Parameters: Name Type Description fileName string Name of the file to resolve path. Returns: Absolute path of the file. Touch \u00b6 Sets file modification time to current time. Touch ( fileName ) Parameters: Name Type Description fileName string Name of the file to touch. Write \u00b6 Writes text file. Write ( fileName , text ) Parameters: Name Type Description fileName string Name of the file to write. text string Text to write into the file.","title":"File"},{"location":"Libraries/File/#file","text":"File object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.","title":"File"},{"location":"Libraries/File/#action-summary","text":"Action Description Append Appends text to a file. CreateFolder Creates a folder. Delete Deletes a file. DeleteFolder Deletes a folder. Exists Checks if file exists or not. Find Find files in folder using wildcard pattern (including * and ?). FolderExists Checks if folder exists. FolderInfo Gets information about a folder. Include Includes code from a file. IncludeOnce Includes code from a file if it was not included earlier. Info Gets information about a file. Read Reads UTF-8 encoded text file. ResolvePath Finds the file in test folders and calculates its absolute path. Touch Sets file modification time to current time. Write Writes text file.","title":"Action Summary"},{"location":"Libraries/File/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/File/#append","text":"Appends text to a file. Append ( fileName , text ) Parameters: Name Type Description fileName string Name of the file. text string Text to append to the file.","title":"Append"},{"location":"Libraries/File/#createfolder","text":"Creates a folder. CreateFolder ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder.","title":"CreateFolder"},{"location":"Libraries/File/#delete","text":"Deletes a file. Delete ( fileName ) Parameters: Name Type Description fileName string Name of the file to delete.","title":"Delete"},{"location":"Libraries/File/#deletefolder","text":"Deletes a folder. DeleteFolder ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder.","title":"DeleteFolder"},{"location":"Libraries/File/#exists","text":"Checks if file exists or not. Exists ( fileName ) Parameters: Name Type Description fileName string Name of the file to check. Returns: true if file exists, false otherwise.","title":"Exists"},{"location":"Libraries/File/#find","text":"Find files in folder using wildcard pattern (including * and ?). I.e. File.Find(\"c:/Temp\", \"*.txt\", true) may return C:\\Temp\\file1.txt C:\\Temp\\SubFolder\\file2.txt C:\\Temp\\SubFolder2\\file3.txt C:\\Temp\\SubFolder2\\file4.txt Result may be converted to array like that: var arrFiles = File.Find(\"c:/Temp\", \"*.txt\", true).split('\\n'); Find ( path , searchPattern , recursive , firstOnly , files , folders ) Parameters: Name Type Description path string Path to a folder to search in. searchPattern string Search pattern (may include * and ? wildcards, but no regexp). recursive boolean 'true' for folder and subfolders. Optional, Default: \"false\". firstOnly boolean Return only first matching item (if any). Optional, Default: \"false\". files boolean Return matching files. Optional, Default: \"true\". folders boolean Return matching folders. Optional, Default: \"false\". Returns: string: \\n-separated string where each line is a path to the found item.","title":"Find"},{"location":"Libraries/File/#folderexists","text":"Checks if folder exists. FolderExists ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Returns: true if folder exists, false - otherwise.","title":"FolderExists"},{"location":"Libraries/File/#folderinfo","text":"Gets information about a folder. FolderInfo ( folderPath ) Parameters: Name Type Description folderPath string Path to a folder. Returns: Folder object as described here https://msdn.microsoft.com/en-us/library/1c87day3%28v=vs.84%29.aspx e.g. Path, SubFolders and Files enumeration.","title":"FolderInfo"},{"location":"Libraries/File/#include","text":"Includes code from a file. Normally used together with eval statement, i.e.: eval( File.Include('myfile.js') ) Include ( fileName ) Parameters: Name Type Description fileName string Name of the file to load. Returns: Contents of the source file for evaluation.","title":"Include"},{"location":"Libraries/File/#includeonce","text":"Includes code from a file if it was not included earlier. Normally used together with eval statement, i.e.: eval( File.IncludeOnce('myfile.js') ) IncludeOnce ( fileName ) Parameters: Name Type Description fileName string Name of the file to load. Returns: Contents of the source file for evaluation.","title":"IncludeOnce"},{"location":"Libraries/File/#info","text":"Gets information about a file. Info ( fileName ) Parameters: Name Type Description fileName string Name of the file. Returns: File object as described here https://msdn.microsoft.com/en-us/library/1ft05taf%28v=vs.84%29.aspx e.g. DateLastModified, Size, Type, Name, Path.","title":"Info"},{"location":"Libraries/File/#read","text":"Reads UTF-8 encoded text file. Read ( fileName ) Parameters: Name Type Description fileName string Name of the file to read. Returns: Contents of the text file as string.","title":"Read"},{"location":"Libraries/File/#resolvepath","text":"Finds the file in test folders and calculates its absolute path. ResolvePath ( fileName ) Parameters: Name Type Description fileName string Name of the file to resolve path. Returns: Absolute path of the file.","title":"ResolvePath"},{"location":"Libraries/File/#touch","text":"Sets file modification time to current time. Touch ( fileName ) Parameters: Name Type Description fileName string Name of the file to touch.","title":"Touch"},{"location":"Libraries/File/#write","text":"Writes text file. Write ( fileName , text ) Parameters: Name Type Description fileName string Name of the file to write. text string Text to write into the file.","title":"Write"},{"location":"Libraries/GWTCheckBox/","text":"GWTCheckBox \u00b6 GWT CheckBox. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTCheckBoxBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTCheckBox"},{"location":"Libraries/GWTCheckBox/#gwtcheckbox","text":"GWT CheckBox. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTCheckBoxBehavior","title":"GWTCheckBox"},{"location":"Libraries/GWTCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/GWTCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/GWTCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/GWTCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/GWTDatePicker/","text":"GWTDatePicker \u00b6 GWT DatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTDatePickerBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"GWTDatePicker"},{"location":"Libraries/GWTDatePicker/#gwtdatepicker","text":"GWT DatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTDatePickerBehavior","title":"GWTDatePicker"},{"location":"Libraries/GWTDatePicker/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/GWTDatePicker/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/GWTDatePicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTDatePicker/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/GWTDatePicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTDatePicker/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/GWTDatePicker/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/GWTDatePicker/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/GWTDecoratedStackPanel/","text":"GWTDecoratedStackPanel \u00b6 GWT Decorated StackPanel. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTDecoratedStackPanelBehavior Action Summary \u00b6 Action Description DoSelect Selects specified panel. Action Detail \u00b6 DoSelect \u00b6 Selects specified panel. DoSelect ( name ) Parameters: Name Type Description name string Panel name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTDecoratedStackPanel"},{"location":"Libraries/GWTDecoratedStackPanel/#gwtdecoratedstackpanel","text":"GWT Decorated StackPanel. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTDecoratedStackPanelBehavior","title":"GWTDecoratedStackPanel"},{"location":"Libraries/GWTDecoratedStackPanel/#action-summary","text":"Action Description DoSelect Selects specified panel.","title":"Action Summary"},{"location":"Libraries/GWTDecoratedStackPanel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTDecoratedStackPanel/#doselect","text":"Selects specified panel. DoSelect ( name ) Parameters: Name Type Description name string Panel name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelect"},{"location":"Libraries/GWTExtComboBox/","text":"GWTExtComboBox \u00b6 GWT-Ext ComboBox. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Text of the selected item in a single string. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoExpand Expands the combobox. DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedItem \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedItem, SetSelectedItem Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoExpand \u00b6 Expands the combobox. DoExpand ( x , y , forceEvent ) Parameters: Name Type Description x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTExtComboBox"},{"location":"Libraries/GWTExtComboBox/#gwtextcombobox","text":"GWT-Ext ComboBox. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtComboBoxBehavior","title":"GWTExtComboBox"},{"location":"Libraries/GWTExtComboBox/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Text of the selected item in a single string. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/GWTExtComboBox/#action-summary","text":"Action Description DoExpand Expands the combobox. DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/GWTExtComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtComboBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/GWTExtComboBox/#selecteditem","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedItem, SetSelectedItem","title":"SelectedItem"},{"location":"Libraries/GWTExtComboBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/GWTExtComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtComboBox/#doexpand","text":"Expands the combobox. DoExpand ( x , y , forceEvent ) Parameters: Name Type Description x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/GWTExtComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/GWTExtDatePicker/","text":"GWTExtDatePicker \u00b6 GWT-Ext DatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtDatePickerBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"GWTExtDatePicker"},{"location":"Libraries/GWTExtDatePicker/#gwtextdatepicker","text":"GWT-Ext DatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtDatePickerBehavior","title":"GWTExtDatePicker"},{"location":"Libraries/GWTExtDatePicker/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/GWTExtDatePicker/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/GWTExtDatePicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtDatePicker/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/GWTExtDatePicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtDatePicker/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/GWTExtDatePicker/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/GWTExtDatePicker/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/GWTExtGrid/","text":"GWTExtGrid \u00b6 GWT-Ext Grid. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"GWTExtGrid"},{"location":"Libraries/GWTExtGrid/#gwtextgrid","text":"GWT-Ext Grid. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtGridBehavior","title":"GWTExtGrid"},{"location":"Libraries/GWTExtGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/GWTExtGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell","title":"Action Summary"},{"location":"Libraries/GWTExtGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/GWTExtGrid/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/GWTExtGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/GWTExtGrid/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/GWTExtGrid/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/GWTExtGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/GWTExtGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/GWTExtGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtGrid/#doclickcell","text":"Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/GWTExtMenuBar/","text":"GWTExtMenuBar \u00b6 GWT-Ext MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtMenuBarBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTExtMenuBar"},{"location":"Libraries/GWTExtMenuBar/#gwtextmenubar","text":"GWT-Ext MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtMenuBarBehavior","title":"GWTExtMenuBar"},{"location":"Libraries/GWTExtMenuBar/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/GWTExtMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/GWTExtTabPanel/","text":"GWTExtTabPanel \u00b6 GWT-Ext Tab. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtTabPanelBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Number of tabs in the panel GetItemsCount SelectedIndex Index of the selected tab GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 ItemsCount \u00b6 Number of tabs in the panel Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Index of the selected tab Type: number Accessors: GetSelectedIndex SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( name , x , y , forceEvent ) Parameters: Name Type Description name string | number Tab name to select x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTExtTabPanel"},{"location":"Libraries/GWTExtTabPanel/#gwtexttabpanel","text":"GWT-Ext Tab. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtTabPanelBehavior","title":"GWTExtTabPanel"},{"location":"Libraries/GWTExtTabPanel/#property-summary","text":"Property Description Getter Setter ItemsCount Number of tabs in the panel GetItemsCount SelectedIndex Index of the selected tab GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/GWTExtTabPanel/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/GWTExtTabPanel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtTabPanel/#itemscount","text":"Number of tabs in the panel Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/GWTExtTabPanel/#selectedindex","text":"Index of the selected tab Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/GWTExtTabPanel/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/GWTExtTabPanel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtTabPanel/#doselecttab","text":"Selects the tab by name. DoSelectTab ( name , x , y , forceEvent ) Parameters: Name Type Description name string | number Tab name to select x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/GWTExtToggleButton/","text":"GWTExtToggleButton \u00b6 GWT-Ext ToggleButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtToggleButtonBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTExtToggleButton"},{"location":"Libraries/GWTExtToggleButton/#gwtexttogglebutton","text":"GWT-Ext ToggleButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtToggleButtonBehavior","title":"GWTExtToggleButton"},{"location":"Libraries/GWTExtToggleButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/GWTExtToggleButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/GWTExtToggleButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtToggleButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/GWTExtToggleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtToggleButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/GWTExtToolbar/","text":"GWTExtToolbar \u00b6 GWT-Ext Toolbar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtToolbarBehavior Action Summary \u00b6 Action Description DoClickItem Clicks specified element of the ribbon Action Detail \u00b6 DoClickItem \u00b6 Clicks specified element of the ribbon DoClickItem ( item ) Parameters: Name Type Description item string Name of an item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTExtToolbar"},{"location":"Libraries/GWTExtToolbar/#gwtexttoolbar","text":"GWT-Ext Toolbar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtToolbarBehavior","title":"GWTExtToolbar"},{"location":"Libraries/GWTExtToolbar/#action-summary","text":"Action Description DoClickItem Clicks specified element of the ribbon","title":"Action Summary"},{"location":"Libraries/GWTExtToolbar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtToolbar/#doclickitem","text":"Clicks specified element of the ribbon DoClickItem ( item ) Parameters: Name Type Description item string Name of an item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/GWTExtTree/","text":"GWTExtTree \u00b6 GWT-Ext Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtTreeBehavior Property Summary \u00b6 Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node. Property Detail \u00b6 ChildrenCount \u00b6 Children count of the current node in the tree. Type: number Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded NodeIndex \u00b6 Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex NodeText \u00b6 Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText Selected \u00b6 Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected SelectedNodeText \u00b6 Text of the selected node. Type: string Accessors: GetSelectedNodeText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoFindChild \u00b6 Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoFindNode \u00b6 Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoGetPath \u00b6 Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"GWTExtTree"},{"location":"Libraries/GWTExtTree/#gwtexttree","text":"GWT-Ext Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTExtTreeBehavior","title":"GWTExtTree"},{"location":"Libraries/GWTExtTree/#property-summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText","title":"Property Summary"},{"location":"Libraries/GWTExtTree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node.","title":"Action Summary"},{"location":"Libraries/GWTExtTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTExtTree/#childrencount","text":"Children count of the current node in the tree. Type: number Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/GWTExtTree/#expanded","text":"Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/GWTExtTree/#nodeindex","text":"Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex","title":"NodeIndex"},{"location":"Libraries/GWTExtTree/#nodetext","text":"Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/GWTExtTree/#selected","text":"Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/GWTExtTree/#selectednodetext","text":"Text of the selected node. Type: string Accessors: GetSelectedNodeText","title":"SelectedNodeText"},{"location":"Libraries/GWTExtTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTExtTree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/GWTExtTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/GWTExtTree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/GWTExtTree/#dofindchild","text":"Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/GWTExtTree/#dofindnode","text":"Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindNode"},{"location":"Libraries/GWTExtTree/#dogetpath","text":"Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"DoGetPath"},{"location":"Libraries/GWTMenuBar/","text":"GWTMenuBar \u00b6 GWT MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTMenuBarBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTMenuBar"},{"location":"Libraries/GWTMenuBar/#gwtmenubar","text":"GWT MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTMenuBarBehavior","title":"GWTMenuBar"},{"location":"Libraries/GWTMenuBar/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/GWTMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/GWTPushButton/","text":"GWTPushButton \u00b6 GWT PushButton. Use DoClick() to push it. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTPushButtonBehavior Property Summary \u00b6 Property Description Getter Setter Disabled Disable state of the button. GetDisabled Property Detail \u00b6 Disabled \u00b6 Disable state of the button. Type: boolean Accessors: GetDisabled","title":"GWTPushButton"},{"location":"Libraries/GWTPushButton/#gwtpushbutton","text":"GWT PushButton. Use DoClick() to push it. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTPushButtonBehavior","title":"GWTPushButton"},{"location":"Libraries/GWTPushButton/#property-summary","text":"Property Description Getter Setter Disabled Disable state of the button. GetDisabled","title":"Property Summary"},{"location":"Libraries/GWTPushButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTPushButton/#disabled","text":"Disable state of the button. Type: boolean Accessors: GetDisabled","title":"Disabled"},{"location":"Libraries/GWTRadio/","text":"GWTRadio \u00b6 GWT Radio. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTRadioBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTRadio"},{"location":"Libraries/GWTRadio/#gwtradio","text":"GWT Radio. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTRadioBehavior","title":"GWTRadio"},{"location":"Libraries/GWTRadio/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/GWTRadio/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/GWTRadio/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTRadio/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/GWTRadio/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTRadio/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/GWTStackPanel/","text":"GWTStackPanel \u00b6 GWT StackPanel. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTStackPanelBehavior Action Summary \u00b6 Action Description DoSelect Selects specified panel. Action Detail \u00b6 DoSelect \u00b6 Selects specified panel. DoSelect ( name ) Parameters: Name Type Description name string Panel name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTStackPanel"},{"location":"Libraries/GWTStackPanel/#gwtstackpanel","text":"GWT StackPanel. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTStackPanelBehavior","title":"GWTStackPanel"},{"location":"Libraries/GWTStackPanel/#action-summary","text":"Action Description DoSelect Selects specified panel.","title":"Action Summary"},{"location":"Libraries/GWTStackPanel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTStackPanel/#doselect","text":"Selects specified panel. DoSelect ( name ) Parameters: Name Type Description name string Panel name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelect"},{"location":"Libraries/GWTToggleButton/","text":"GWTToggleButton \u00b6 GWT ToggleButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTToggleButtonBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"GWTToggleButton"},{"location":"Libraries/GWTToggleButton/#gwttogglebutton","text":"GWT ToggleButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTToggleButtonBehavior","title":"GWTToggleButton"},{"location":"Libraries/GWTToggleButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/GWTToggleButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/GWTToggleButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTToggleButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/GWTToggleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTToggleButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/GWTTree/","text":"GWTTree \u00b6 GWT Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTTreeBehavior Property Summary \u00b6 Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node. Property Detail \u00b6 ChildrenCount \u00b6 Children count of the current node in the tree. Type: number Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded NodeIndex \u00b6 Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex NodeText \u00b6 Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText Selected \u00b6 Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected SelectedNodeText \u00b6 Text of the selected node. Type: string Accessors: GetSelectedNodeText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoFindChild \u00b6 Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoFindNode \u00b6 Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoGetPath \u00b6 Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"GWTTree"},{"location":"Libraries/GWTTree/#gwttree","text":"GWT Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: GWTTreeBehavior","title":"GWTTree"},{"location":"Libraries/GWTTree/#property-summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText","title":"Property Summary"},{"location":"Libraries/GWTTree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node.","title":"Action Summary"},{"location":"Libraries/GWTTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/GWTTree/#childrencount","text":"Children count of the current node in the tree. Type: number Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/GWTTree/#expanded","text":"Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/GWTTree/#nodeindex","text":"Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex","title":"NodeIndex"},{"location":"Libraries/GWTTree/#nodetext","text":"Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/GWTTree/#selected","text":"Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/GWTTree/#selectednodetext","text":"Text of the selected node. Type: string Accessors: GetSelectedNodeText","title":"SelectedNodeText"},{"location":"Libraries/GWTTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/GWTTree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/GWTTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/GWTTree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/GWTTree/#dofindchild","text":"Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/GWTTree/#dofindnode","text":"Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindNode"},{"location":"Libraries/GWTTree/#dogetpath","text":"Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"DoGetPath"},{"location":"Libraries/Generator/","text":"Generator \u00b6 Use Generator object to produce unique and formatted data input. Requires Rapise 7.2+ Action Summary \u00b6 Action Description Create Creates generator object in Spira. Format Formats string according to a template. GetNextValue Calculates next value of the generator according to a template. Action Detail \u00b6 Create \u00b6 Creates generator object in Spira. To get next value from the generator use GetNextValue . Generator object can be used by parallel tests and simultaneously by different users. Create ( name , type , value , projectNameOrId ) Parameters: Name Type Description name string Unique name of the generator. type string Type of the generator. Supported types: increment. value string | number Initial value of the generator. projectNameOrId string | number Name or ID of a Spira project that should host the generator. Returns: number: ID of the generator or 0 in the case of error Format \u00b6 Formats string according to a template. Supported patterns: Pattern Description Example # Digit 0-9 3 dd Day of month (1-28) 21 mm Month number 10 yy 00-99 75 yyyy Year (1950-2000) 1993 GUID GUID 00eccc37-6802-9adf-22f6-b376826d73c7 DAY Mon-Sat Fri NAME Random name Belinda BOYNAMES Random male name William GIRLNAMES Random female name Olivia SURNAME Random last name Keller MONTH Jan-Dec Apr COLOR Color Green CAR Car vendor Mazda STREET Random street name Main Street STATE State name Arkansas STATECODE State code AR CITY Random city name Esmont COMPANY Random company name Earthmark Format ( template ) Parameters: Name Type Description template string Template string. Returns: string | number: Value generated using a template. GetNextValue \u00b6 Calculates next value of the generator according to a template. The template can be empty, can contain {value} placeholder or be a function. GetNextValue ( name , template , projectNameOrId ) Parameters: Name Type Description name string Unique name of the generator. template string | function Template for the value to return. If template is empty then generated value is returned as is. If it is a string then generated value replaces placeholder {value}. Template can be a function that receives the next value and calculates the value to return. projectNameOrId string | number Name or ID of a Spira project that hosts the generator. Returns: string | number: Next generated value or null","title":"Generator"},{"location":"Libraries/Generator/#generator","text":"Use Generator object to produce unique and formatted data input. Requires Rapise 7.2+","title":"Generator"},{"location":"Libraries/Generator/#action-summary","text":"Action Description Create Creates generator object in Spira. Format Formats string according to a template. GetNextValue Calculates next value of the generator according to a template.","title":"Action Summary"},{"location":"Libraries/Generator/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Generator/#create","text":"Creates generator object in Spira. To get next value from the generator use GetNextValue . Generator object can be used by parallel tests and simultaneously by different users. Create ( name , type , value , projectNameOrId ) Parameters: Name Type Description name string Unique name of the generator. type string Type of the generator. Supported types: increment. value string | number Initial value of the generator. projectNameOrId string | number Name or ID of a Spira project that should host the generator. Returns: number: ID of the generator or 0 in the case of error","title":"Create"},{"location":"Libraries/Generator/#format","text":"Formats string according to a template. Supported patterns: Pattern Description Example # Digit 0-9 3 dd Day of month (1-28) 21 mm Month number 10 yy 00-99 75 yyyy Year (1950-2000) 1993 GUID GUID 00eccc37-6802-9adf-22f6-b376826d73c7 DAY Mon-Sat Fri NAME Random name Belinda BOYNAMES Random male name William GIRLNAMES Random female name Olivia SURNAME Random last name Keller MONTH Jan-Dec Apr COLOR Color Green CAR Car vendor Mazda STREET Random street name Main Street STATE State name Arkansas STATECODE State code AR CITY Random city name Esmont COMPANY Random company name Earthmark Format ( template ) Parameters: Name Type Description template string Template string. Returns: string | number: Value generated using a template.","title":"Format"},{"location":"Libraries/Generator/#getnextvalue","text":"Calculates next value of the generator according to a template. The template can be empty, can contain {value} placeholder or be a function. GetNextValue ( name , template , projectNameOrId ) Parameters: Name Type Description name string Unique name of the generator. template string | function Template for the value to return. If template is empty then generated value is returned as is. If it is a string then generated value replaces placeholder {value}. Template can be a function that receives the next value and calculates the value to return. projectNameOrId string | number Name or ID of a Spira project that hosts the generator. Returns: string | number: Next generated value or null","title":"GetNextValue"},{"location":"Libraries/GlassMouseGrabProvider%24Proxy/","text":"GlassMouseGrabProvider$Proxy \u00b6 Oracle Forms GlassMouseGrabProvider$Proxy. UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy Extends JavaObject Extends SeSSimulatedObject","title":"GlassMouseGrabProvider$Proxy"},{"location":"Libraries/GlassMouseGrabProvider%24Proxy/#glassmousegrabproviderproxy","text":"Oracle Forms GlassMouseGrabProvider$Proxy. UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy Extends JavaObject Extends SeSSimulatedObject","title":"GlassMouseGrabProvider$Proxy"},{"location":"Libraries/GlassMouseGrabProvider/","text":"GlassMouseGrabProvider$Proxy \u00b6 Oracle Forms GlassMouseGrabProvider$Proxy. UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy Extends JavaObject Extends SeSSimulatedObject","title":"GlassMouseGrabProvider$Proxy"},{"location":"Libraries/GlassMouseGrabProvider/#glassmousegrabproviderproxy","text":"Oracle Forms GlassMouseGrabProvider$Proxy. UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy Extends JavaObject Extends SeSSimulatedObject","title":"GlassMouseGrabProvider$Proxy"},{"location":"Libraries/Global/","text":"Global \u00b6 Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test. Action Summary \u00b6 Action Description DoAnalogPlay Performs Analog Playback of events recorded in a file. DoAppActivate Activates window with the specified title. DoClick Performs mouse click at the current position. DoCmd Executes a BAT/CMD file specified in cmdLine. DoCompareJsObjects Compares two JavaScript objects and prints differences to the report. DoDecrypt Decrypts a piece of text. DoEncrypt Encrypts a piece of text. DoHorizontalScroll Simulates mouse horizontal wheel scroll gesture. DoInvokeTest Invokes another test (aka subtest). DoInvokeTestParallel Executes specified test in few parallel threads. DoKillByName Terminates a given process. DoKillByPid Terminates a given process or the last process created by DoLaunch if 'pid' is not specified. DoLaunch Executes a command specified in cmdLine. DoLoadObjects Loads objects from external .objects.js file. DoMaximizeWindow Maximizes window that matches given title and class name. DoMessageBox Shows message box (popup message) to a user. DoMinimizeWindow Minimizes window that matches given title and class name. DoMouseMove Moves mouse to the specified position. DoPlayManual Executes a manual test. DoRestoreWindow Restores window that matches given title and class name. DoRunTestSet Executes a test set. DoSendKeys Sends series of keystrokes to a currently focused application. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys). DoSetScreenResolution Sets screen resolution. DoSleep Pauses execution for given number of milliseconds (1000 = 1 second). DoTrim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. DoTypePassword Types encrypted password into a control which has a focus. DoVerticalScroll Simulates mouse vertical wheel scroll gesture. DoWaitFor Waits for object specified by objectId to become available. DoWaitForProperty Waits for specified value of object's property. DoWaitForWindow Waits for window specified by title/class name to become available. GetClipboardText Reads text stored in the windows clipboard. GetCurrentDir Gets current directory path. GetFileAsByteArray Reads file and returns its content as array of bytes. GetFirstDayOfWeek Returns first day of week for current user. GetFullPath Constructs an absolute file name using working directory (WORKDIR) of the test. GetOsOwner Reads OS registered owner from the registry. GetOsPath Returns OS root path. GetOsType Reads OS type from the registry. GetOsVersion Reads OS service pack version from the registry. GetProperty Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise. GetRapiseVersion Reads Rapise version. GetSpecialFolderPath Returns path to a special folder specified by one of possible values. SetClipboardText Updates clipboard text SetConfigPath Set default path for config file instead of default %WORKDIR%\\Config.json. SetFileAsByteArray Creates or rewrites file and fills with contents of the provided byte array. SetProperty Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise. Action Detail \u00b6 DoAnalogPlay \u00b6 Performs Analog Playback of events recorded in a file. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string This is a path to a file with recorded analog events. left number X-coordinate of top-left corner of the analog area. top number Y-coordinate of the top-left corner of the analog area. DoAppActivate \u00b6 Activates window with the specified title. I.e. Global.DoAppActivate(\"Calculator\") will bring running instance (if any) of Windows Calculator to the foreground. DoAppActivate ( title ) Parameters: Name Type Description title string Title of an application window. See: MSDN Article for AppActivate DoClick \u00b6 Performs mouse click at the current position. DoClick ( clickType ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". DoCmd \u00b6 Executes a BAT/CMD file specified in cmdLine. Optionally one may specify working dir. Requires Rapise 6.4+ DoCmd ( cmdLine , wrkDir , wait , show ) Parameters: Name Type Description cmdLine string Command line to execute. Contains path to a batch file and parameters. wrkDir string Working directory. By default it is a directory of the test. Optional, Default: \".\". wait boolean If true - Wait until batch process exit. If false - immediately proceed to the next test steps. Optional, Default: \"true\". show boolean If true - maximize the command line window. If false - minimize the command line window. Optional, Default: \"true\". Returns: number: Error code returned by the batch process. 0 - indicates success if wait is true . DoCompareJsObjects \u00b6 Compares two JavaScript objects and prints differences to the report. DoCompareJsObjects ( msg , obj1 , obj2 ) Parameters: Name Type Description msg string Message to write into report. obj1 object First object. obj2 object Second object. Returns: boolean: 'true' if two objects are equal, 'false' otherwise. DoDecrypt \u00b6 Decrypts a piece of text. DoDecrypt ( encryptedText ) Parameters: Name Type Description encryptedText string Text to decrypt. Returns: string: Decrypted text. DoEncrypt \u00b6 Encrypts a piece of text. DoEncrypt ( plainText ) Parameters: Name Type Description plainText string Text to encrypt. Returns: string: Encrypted text. DoHorizontalScroll \u00b6 Simulates mouse horizontal wheel scroll gesture. Requires Rapise 6.5+ DoHorizontalScroll ( scrollAmountInClicks ) Parameters: Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left. DoInvokeTest \u00b6 Invokes another test (aka subtest). The subtest should have the set of libraries as calling test. Otherwise it may lead to a conflict. DoInvokeTest ( pathToTest , optionalParams ) Parameters: Name Type Description pathToTest string Path to .sstest file. optionalParams object Parameters to pass into entry point Test() function of the subtest. I.e. it is called as Test(optionalParams). Optional, Default: \"[object Object]\". Returns: boolean: 'true' if the test passed, 'false' otherwise. DoInvokeTestParallel \u00b6 Executes specified test in few parallel threads. Pass additional arguments in 'threads' param DoInvokeTestParallel ( \"t2/t2.sstest\" , { \"THR01\" : { g_browserLibrary : 'Selenium Chrome' }, \"THR02\" : { g_browserLibrary : 'Selenium Firefox' } } ); DoInvokeTestParallel ( testPath , threads , commonParams ) Parameters: Name Type Description testPath string Path to .sstest to execute. threads object Structure, defining parallel threads to execute. commonParams object Object containing {name:'value',...} pairs to be passed as parameters to all tests. Optional. Returns: boolean: true, if execution finished with exit code 0 (all tests executed successfully) DoKillByName \u00b6 Terminates a given process. DoKillByName ( processName ) Parameters: Name Type Description processName string Executable name to kill (such as 'iexplore.exe'). Returns: boolean: 'true' if the process was terminated, 'false' otherwise. DoKillByPid \u00b6 Terminates a given process or the last process created by DoLaunch if 'pid' is not specified. DoKillByPid ( pid ) Parameters: Name Type Description pid number ID of the process. Optional. Returns: boolean: 'true' if the process was terminated, 'false' otherwise. DoLaunch \u00b6 Executes a command specified in cmdLine. Optionally one may specify working dir, and window name to attach if it is already launched. DoLaunch ( cmdLine , wrkDir , attachIfExists , attachToWindow ) Parameters: Name Type Description cmdLine string Command line to an executable with parameters. wrkDir string Working directory. By default it is a directory of the test. Optional, Default: \".\". attachIfExists boolean Try to find a process with the same executable path instead of launching it. Optional, Default: \"false\". attachToWindow string When attachIfExists is 'true' this parameter may be used to specify top window name to find a process to attach to. Optional, Default: \"null\". Returns: number: ID of the new process (positive number) or an error code (negative number) DoLoadObjects \u00b6 Loads objects from external .objects.js file. DoLoadObjects ( objectsFilePath ) Parameters: Name Type Description objectsFilePath string Path to *.objects.js file. Returns: object: saved_script_objects or null if the load was unsuccessful. DoMaximizeWindow \u00b6 Maximizes window that matches given title and class name. Requires Rapise 7.2+ DoMaximizeWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false . DoMessageBox \u00b6 Shows message box (popup message) to a user. buttons is a value or a sum of values that specifies the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. Default value is 0. 0 = vbOKOnly - OK button only 1 = vbOKCancel - OK and Cancel buttons 2 = vbAbortRetryIgnore - Abort, Retry, and Ignore buttons 3 = vbYesNoCancel - Yes, No, and Cancel buttons 4 = vbYesNo - Yes and No buttons 5 = vbRetryCancel - Retry and Cancel buttons 16 = vbCritical - Critical Message icon 32 = vbQuestion - Warning Query icon 48 = vbExclamation - Warning Message icon 64 = vbInformation - Information Message icon 0 = vbDefaultButton1 - First button is default 256 = vbDefaultButton2 - Second button is default 512 = vbDefaultButton3 - Third button is default 768 = vbDefaultButton4 - Fourth button is default 0 = vbApplicationModal - Application modal (the current application will not work until the user responds to the message box) 4096 = vbSystemModal - System modal (all applications wont work until the user responds to the message box) We can divide the buttons values into four groups: The first group (0\u20135) describes the buttons to be displayed in the message box, the second group (16, 32, 48, 64) describes the icon style, the third group (0, 256, 512, 768) indicates which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When adding numbers to create a final value for the buttons parameter, use only one number from each group. The function returns a number representation of a button pressed by user: vbOK = 1 - OK button was clicked. vbCancel = 2 - Cancel button was clicked. vbAbort = 3 - Abort button was clicked. vbRetry = 4 - Retry button was clicked. vbIgnore = 5 - Ignore button was clicked. vbYes = 6 - Yes button was clicked. vbNo = 7 - No button was clicked. DoMessageBox ( prompt , buttons ) Parameters: Name Type Description prompt string Message to display. buttons number Buttons to show. Possible values: 0, 1, 2, 3, 4, 5, 16, 32, 48, 64, 0, 256, 512, 768, 0, 4096 Optional, Default: \"0\". Returns: number: A number representation of a button pressed by user. DoMinimizeWindow \u00b6 Minimizes window that matches given title and class name. Requires Rapise 7.2+ DoMinimizeWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false . DoMouseMove \u00b6 Moves mouse to the specified position. DoMouseMove ( x , y , duration ) Parameters: Name Type Description x number Absolute X-coordinate of the target mouse position. y number Absolute Y-coordinate of the target mouse position. duration number Mouse move duration (milliseconds). If 0 - do immediate move. Optional, Default: \"0\". DoPlayManual \u00b6 Executes a manual test. Results are shown in the report of the calling test. DoPlayManual ( rmtFilePath , rmtParams ) Parameters: Name Type Description rmtFilePath string Path to manual test (.rmt) file. rmtParams object Additional parameters to pass to the manual test executor. Optional. Returns: boolean: 'true' if the manual test passed, 'false' otherwise. DoRestoreWindow \u00b6 Restores window that matches given title and class name. Requires Rapise 7.2+ DoRestoreWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false . DoRunTestSet \u00b6 Executes a test set. Results are shown in the report of the calling test. DoRunTestSet ( testSetFilePath , testSetParams ) Parameters: Name Type Description testSetFilePath string Path to a test set file. testSetParams object Additional parameters to pass for each test in the test set. Optional. DoSendKeys \u00b6 Sends series of keystrokes to a currently focused application. DoSendKeys ( keys ) Parameters: Name Type Description keys string Keystrokes, including special characters and control symbols. DoSendText \u00b6 Sends text to the active application as is (while SendKeys also supports sending special keys). Requires Rapise 6.5+ DoSendText ( text ) Parameters: Name Type Description text string Text to input. DoSetScreenResolution \u00b6 Sets screen resolution. Use to run UI tests in unattended RDP sessions. DoSetScreenResolution ( width , height ) Parameters: Name Type Description width number Screen width in pixels height number Screen height in pixels DoSleep \u00b6 Pauses execution for given number of milliseconds (1000 = 1 second). DoSleep ( millis ) Parameters: Name Type Description millis number Number of milliseconds to sleep. DoTrim \u00b6 Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. DoTrim ( str , global , trimChars ) Parameters: Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed. Optional, Default: \"false\". trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string. DoTypePassword \u00b6 Types encrypted password into a control which has a focus. DoTypePassword ( encryptedPassword ) Parameters: Name Type Description encryptedPassword string Password to type. Encrypted. Returns: string: 'true' DoVerticalScroll \u00b6 Simulates mouse vertical wheel scroll gesture. Requires Rapise 6.5+ DoVerticalScroll ( scrollAmountInClicks ) Parameters: Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. DoWaitFor \u00b6 Waits for object specified by objectId to become available. Function returns if object was found or timeout. DoWaitFor ( objectId , timeout , sleepTimeIfFound ) Parameters: Name Type Description objectId objectid Id of an object to wait for. timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". sleepTimeIfFound number Wait time (milliseconds) after object is found. Optional, Default: \"0\". Returns: SeSObject | boolean: Found object or 'false'. DoWaitForProperty \u00b6 Waits for specified value of object's property. Function returns object handle if object was found and specified property equals to desired value or 'false' in the case of timeout. propValue may be a callback function: function ( value ) { if ( value != 'some text' ) { // if the condition is met return true ; } return false ; } Use the callback if you need to check more complex condition than equality. DoWaitForProperty ( obj , getterName , propValue , timeout , params ) Parameters: Name Type Description obj objectid | SeSObject Id of an object to wait for or object itself. getterName string Property getter function name. propValue string | number | boolean | function Desired property value or callback function (see description). timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". params array | string | number | boolean Parameters for property getter function. Optional. Returns: SeSObject | boolean: Found object or 'false'. DoWaitForWindow \u00b6 Waits for window specified by title/class name to become available. Function returns if window was found or timeout. Requires Rapise 7.2+ DoWaitForWindow ( title , className , timeout ) Parameters: Name Type Description title string Title of a window to wait for. Use exact value or regex: expression. className string Class name of a window to wait for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". Returns: boolean: true if window was found, otherwise false . GetClipboardText \u00b6 Reads text stored in the windows clipboard. GetClipboardText () Returns: string: Clipboard text GetCurrentDir \u00b6 Gets current directory path. GetCurrentDir () Returns: string: Path of the current directory. GetFileAsByteArray \u00b6 Reads file and returns its content as array of bytes. May be useful for binary files and for passing data to web services. GetFileAsByteArray ( fileName ) Parameters: Name Type Description fileName string Filename to read (recommended to use absolute file name). Returns: object: Array of bytes. GetFirstDayOfWeek \u00b6 Returns first day of week for current user. GetFirstDayOfWeek () Returns: number: 0 - Sunday, 1 - Monday. GetFullPath \u00b6 Constructs an absolute file name using working directory (WORKDIR) of the test. GetFullPath ( fileName ) Parameters: Name Type Description fileName string Name of a file. Returns: string: Absolute file name. GetOsOwner \u00b6 Reads OS registered owner from the registry. GetOsOwner () Returns: string: OS registered owner. GetOsPath \u00b6 Returns OS root path. GetOsPath () Returns: string: OS root path without the trailing backslash, e.g. 'C:\\Windows'. GetOsType \u00b6 Reads OS type from the registry. GetOsType () Returns: string: OS type string. GetOsVersion \u00b6 Reads OS service pack version from the registry. GetOsVersion () Returns: string: Service pack version. GetProperty \u00b6 Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise. GetProperty ( name , defValue , configPath ) Parameters: Name Type Description name string Name of a property defValue string | number | boolean Default value to return if property does not exist Optional. configPath string Path to options file (.json, .xlsx). Optional. Returns: string | number | boolean: Property value. If a property does not exist then defValue is returned. If defValue is not set then null is returned. GetRapiseVersion \u00b6 Reads Rapise version. If 'optMinVersion' is specified, then returns true/false depending on 'optMinVersion' less than actual Rapise version. GetRapiseVersion ( optMinVersion ) Parameters: Name Type Description optMinVersion string Minimum version to check Optional. Returns: string: Rapise Version (i.e. 6.3.18.5), 'true' if optMinVersion Rapise version. GetSpecialFolderPath \u00b6 Returns path to a special folder specified by one of possible values. Possible values: ApplicationData The directory that serves as a common repository for application-specific data for the current roaming user. CommonApplicationData The directory that serves as a common repository for application-specific data that is used by all users. CommonProgramFiles The directory for components that are shared across applications. Cookies The directory that serves as a common repository for Internet cookies. Desktop The logical Desktop rather than the physical file system location. DesktopDirectory The directory used to physically store file objects on the desktop. Favorites The directory that serves as a common repository for the user's favorite items. History The directory that serves as a common repository for Internet history items. InternetCache The directory that serves as a common repository for temporary Internet files. LocalApplicationData The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. MyComputer The \"My Computer\" folder. MyDocuments The \"My Documents\" folder. MyMusic The \"My Music\" folder. MyPictures The \"My Pictures\" folder. Personal The directory that serves as a common repository for documents. ProgramFiles The program files directory. Programs The directory that contains the user's program groups. Recent The directory that contains the user's most recently used documents. SendTo The directory that contains the Send To menu items. StartMenu The directory that contains the Start menu items. Startup The directory that corresponds to the user's Startup program group. System The System directory. Templates The directory that serves as a common repository for document templates. GetSpecialFolderPath ( folder ) Parameters: Name Type Description folder string Folder Id. Possible values: \"ApplicationData\", \"CommonApplicationData\", \"CommonProgramFiles\", \"Cookies\", \"Desktop\", \"DesktopDirectory\", \"Favorites\", \"History\", \"InternetCache\", \"LocalApplicationData\", \"MyComputer\", \"MyDocuments\", \"MyMusic\", \"ProgramFiles\", \"Programs\", \"Recent\", \"SendTo\", \"StartMenu\", \"Startup\", \"System\", \"Templates\" Returns: string: System specified folder path without the trailing backslash, e.g. 'C:\\Program Files'. SetClipboardText \u00b6 Updates clipboard text SetClipboardText ( txt ) Parameters: Name Type Description txt string Text to store into clipboard. Returns: boolean: 'true' when clipboard is set. SetConfigPath \u00b6 Set default path for config file instead of default %WORKDIR%\\Config.json. Supports .xlsx and .json file format. This path is used by default for further calls to Global.GetProperty and Global.SetProperty SetConfigPath ( defPath ) Parameters: Name Type Description defPath string New config path, i.e. %WORKDIR%\\Config.xlsx Returns: string: Previous config path SetFileAsByteArray \u00b6 Creates or rewrites file and fills with contents of the provided byte array. SetFileAsByteArray ( fileName , bytes ) Parameters: Name Type Description fileName string Filename to write (recommended to use absolute file name). bytes array Array of bytes to write. Returns: number: Number of bytes written. SetProperty \u00b6 Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise. If the file does not exist it will be created. SetProperty ( name , value , configPath ) Parameters: Name Type Description name string Name of a property. value string | number | boolean Value to set. configPath string Path to options file (.json, .xlsx). Optional. Returns: boolean: 'true' if property value set successfully, 'false' otherwise.","title":"Global"},{"location":"Libraries/Global/#global","text":"Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.","title":"Global"},{"location":"Libraries/Global/#action-summary","text":"Action Description DoAnalogPlay Performs Analog Playback of events recorded in a file. DoAppActivate Activates window with the specified title. DoClick Performs mouse click at the current position. DoCmd Executes a BAT/CMD file specified in cmdLine. DoCompareJsObjects Compares two JavaScript objects and prints differences to the report. DoDecrypt Decrypts a piece of text. DoEncrypt Encrypts a piece of text. DoHorizontalScroll Simulates mouse horizontal wheel scroll gesture. DoInvokeTest Invokes another test (aka subtest). DoInvokeTestParallel Executes specified test in few parallel threads. DoKillByName Terminates a given process. DoKillByPid Terminates a given process or the last process created by DoLaunch if 'pid' is not specified. DoLaunch Executes a command specified in cmdLine. DoLoadObjects Loads objects from external .objects.js file. DoMaximizeWindow Maximizes window that matches given title and class name. DoMessageBox Shows message box (popup message) to a user. DoMinimizeWindow Minimizes window that matches given title and class name. DoMouseMove Moves mouse to the specified position. DoPlayManual Executes a manual test. DoRestoreWindow Restores window that matches given title and class name. DoRunTestSet Executes a test set. DoSendKeys Sends series of keystrokes to a currently focused application. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys). DoSetScreenResolution Sets screen resolution. DoSleep Pauses execution for given number of milliseconds (1000 = 1 second). DoTrim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. DoTypePassword Types encrypted password into a control which has a focus. DoVerticalScroll Simulates mouse vertical wheel scroll gesture. DoWaitFor Waits for object specified by objectId to become available. DoWaitForProperty Waits for specified value of object's property. DoWaitForWindow Waits for window specified by title/class name to become available. GetClipboardText Reads text stored in the windows clipboard. GetCurrentDir Gets current directory path. GetFileAsByteArray Reads file and returns its content as array of bytes. GetFirstDayOfWeek Returns first day of week for current user. GetFullPath Constructs an absolute file name using working directory (WORKDIR) of the test. GetOsOwner Reads OS registered owner from the registry. GetOsPath Returns OS root path. GetOsType Reads OS type from the registry. GetOsVersion Reads OS service pack version from the registry. GetProperty Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise. GetRapiseVersion Reads Rapise version. GetSpecialFolderPath Returns path to a special folder specified by one of possible values. SetClipboardText Updates clipboard text SetConfigPath Set default path for config file instead of default %WORKDIR%\\Config.json. SetFileAsByteArray Creates or rewrites file and fills with contents of the provided byte array. SetProperty Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise.","title":"Action Summary"},{"location":"Libraries/Global/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Global/#doanalogplay","text":"Performs Analog Playback of events recorded in a file. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string This is a path to a file with recorded analog events. left number X-coordinate of top-left corner of the analog area. top number Y-coordinate of the top-left corner of the analog area.","title":"DoAnalogPlay"},{"location":"Libraries/Global/#doappactivate","text":"Activates window with the specified title. I.e. Global.DoAppActivate(\"Calculator\") will bring running instance (if any) of Windows Calculator to the foreground. DoAppActivate ( title ) Parameters: Name Type Description title string Title of an application window. See: MSDN Article for AppActivate","title":"DoAppActivate"},{"location":"Libraries/Global/#doclick","text":"Performs mouse click at the current position. DoClick ( clickType ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\".","title":"DoClick"},{"location":"Libraries/Global/#docmd","text":"Executes a BAT/CMD file specified in cmdLine. Optionally one may specify working dir. Requires Rapise 6.4+ DoCmd ( cmdLine , wrkDir , wait , show ) Parameters: Name Type Description cmdLine string Command line to execute. Contains path to a batch file and parameters. wrkDir string Working directory. By default it is a directory of the test. Optional, Default: \".\". wait boolean If true - Wait until batch process exit. If false - immediately proceed to the next test steps. Optional, Default: \"true\". show boolean If true - maximize the command line window. If false - minimize the command line window. Optional, Default: \"true\". Returns: number: Error code returned by the batch process. 0 - indicates success if wait is true .","title":"DoCmd"},{"location":"Libraries/Global/#docomparejsobjects","text":"Compares two JavaScript objects and prints differences to the report. DoCompareJsObjects ( msg , obj1 , obj2 ) Parameters: Name Type Description msg string Message to write into report. obj1 object First object. obj2 object Second object. Returns: boolean: 'true' if two objects are equal, 'false' otherwise.","title":"DoCompareJsObjects"},{"location":"Libraries/Global/#dodecrypt","text":"Decrypts a piece of text. DoDecrypt ( encryptedText ) Parameters: Name Type Description encryptedText string Text to decrypt. Returns: string: Decrypted text.","title":"DoDecrypt"},{"location":"Libraries/Global/#doencrypt","text":"Encrypts a piece of text. DoEncrypt ( plainText ) Parameters: Name Type Description plainText string Text to encrypt. Returns: string: Encrypted text.","title":"DoEncrypt"},{"location":"Libraries/Global/#dohorizontalscroll","text":"Simulates mouse horizontal wheel scroll gesture. Requires Rapise 6.5+ DoHorizontalScroll ( scrollAmountInClicks ) Parameters: Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left.","title":"DoHorizontalScroll"},{"location":"Libraries/Global/#doinvoketest","text":"Invokes another test (aka subtest). The subtest should have the set of libraries as calling test. Otherwise it may lead to a conflict. DoInvokeTest ( pathToTest , optionalParams ) Parameters: Name Type Description pathToTest string Path to .sstest file. optionalParams object Parameters to pass into entry point Test() function of the subtest. I.e. it is called as Test(optionalParams). Optional, Default: \"[object Object]\". Returns: boolean: 'true' if the test passed, 'false' otherwise.","title":"DoInvokeTest"},{"location":"Libraries/Global/#doinvoketestparallel","text":"Executes specified test in few parallel threads. Pass additional arguments in 'threads' param DoInvokeTestParallel ( \"t2/t2.sstest\" , { \"THR01\" : { g_browserLibrary : 'Selenium Chrome' }, \"THR02\" : { g_browserLibrary : 'Selenium Firefox' } } ); DoInvokeTestParallel ( testPath , threads , commonParams ) Parameters: Name Type Description testPath string Path to .sstest to execute. threads object Structure, defining parallel threads to execute. commonParams object Object containing {name:'value',...} pairs to be passed as parameters to all tests. Optional. Returns: boolean: true, if execution finished with exit code 0 (all tests executed successfully)","title":"DoInvokeTestParallel"},{"location":"Libraries/Global/#dokillbyname","text":"Terminates a given process. DoKillByName ( processName ) Parameters: Name Type Description processName string Executable name to kill (such as 'iexplore.exe'). Returns: boolean: 'true' if the process was terminated, 'false' otherwise.","title":"DoKillByName"},{"location":"Libraries/Global/#dokillbypid","text":"Terminates a given process or the last process created by DoLaunch if 'pid' is not specified. DoKillByPid ( pid ) Parameters: Name Type Description pid number ID of the process. Optional. Returns: boolean: 'true' if the process was terminated, 'false' otherwise.","title":"DoKillByPid"},{"location":"Libraries/Global/#dolaunch","text":"Executes a command specified in cmdLine. Optionally one may specify working dir, and window name to attach if it is already launched. DoLaunch ( cmdLine , wrkDir , attachIfExists , attachToWindow ) Parameters: Name Type Description cmdLine string Command line to an executable with parameters. wrkDir string Working directory. By default it is a directory of the test. Optional, Default: \".\". attachIfExists boolean Try to find a process with the same executable path instead of launching it. Optional, Default: \"false\". attachToWindow string When attachIfExists is 'true' this parameter may be used to specify top window name to find a process to attach to. Optional, Default: \"null\". Returns: number: ID of the new process (positive number) or an error code (negative number)","title":"DoLaunch"},{"location":"Libraries/Global/#doloadobjects","text":"Loads objects from external .objects.js file. DoLoadObjects ( objectsFilePath ) Parameters: Name Type Description objectsFilePath string Path to *.objects.js file. Returns: object: saved_script_objects or null if the load was unsuccessful.","title":"DoLoadObjects"},{"location":"Libraries/Global/#domaximizewindow","text":"Maximizes window that matches given title and class name. Requires Rapise 7.2+ DoMaximizeWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false .","title":"DoMaximizeWindow"},{"location":"Libraries/Global/#domessagebox","text":"Shows message box (popup message) to a user. buttons is a value or a sum of values that specifies the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. Default value is 0. 0 = vbOKOnly - OK button only 1 = vbOKCancel - OK and Cancel buttons 2 = vbAbortRetryIgnore - Abort, Retry, and Ignore buttons 3 = vbYesNoCancel - Yes, No, and Cancel buttons 4 = vbYesNo - Yes and No buttons 5 = vbRetryCancel - Retry and Cancel buttons 16 = vbCritical - Critical Message icon 32 = vbQuestion - Warning Query icon 48 = vbExclamation - Warning Message icon 64 = vbInformation - Information Message icon 0 = vbDefaultButton1 - First button is default 256 = vbDefaultButton2 - Second button is default 512 = vbDefaultButton3 - Third button is default 768 = vbDefaultButton4 - Fourth button is default 0 = vbApplicationModal - Application modal (the current application will not work until the user responds to the message box) 4096 = vbSystemModal - System modal (all applications wont work until the user responds to the message box) We can divide the buttons values into four groups: The first group (0\u20135) describes the buttons to be displayed in the message box, the second group (16, 32, 48, 64) describes the icon style, the third group (0, 256, 512, 768) indicates which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When adding numbers to create a final value for the buttons parameter, use only one number from each group. The function returns a number representation of a button pressed by user: vbOK = 1 - OK button was clicked. vbCancel = 2 - Cancel button was clicked. vbAbort = 3 - Abort button was clicked. vbRetry = 4 - Retry button was clicked. vbIgnore = 5 - Ignore button was clicked. vbYes = 6 - Yes button was clicked. vbNo = 7 - No button was clicked. DoMessageBox ( prompt , buttons ) Parameters: Name Type Description prompt string Message to display. buttons number Buttons to show. Possible values: 0, 1, 2, 3, 4, 5, 16, 32, 48, 64, 0, 256, 512, 768, 0, 4096 Optional, Default: \"0\". Returns: number: A number representation of a button pressed by user.","title":"DoMessageBox"},{"location":"Libraries/Global/#dominimizewindow","text":"Minimizes window that matches given title and class name. Requires Rapise 7.2+ DoMinimizeWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false .","title":"DoMinimizeWindow"},{"location":"Libraries/Global/#domousemove","text":"Moves mouse to the specified position. DoMouseMove ( x , y , duration ) Parameters: Name Type Description x number Absolute X-coordinate of the target mouse position. y number Absolute Y-coordinate of the target mouse position. duration number Mouse move duration (milliseconds). If 0 - do immediate move. Optional, Default: \"0\".","title":"DoMouseMove"},{"location":"Libraries/Global/#doplaymanual","text":"Executes a manual test. Results are shown in the report of the calling test. DoPlayManual ( rmtFilePath , rmtParams ) Parameters: Name Type Description rmtFilePath string Path to manual test (.rmt) file. rmtParams object Additional parameters to pass to the manual test executor. Optional. Returns: boolean: 'true' if the manual test passed, 'false' otherwise.","title":"DoPlayManual"},{"location":"Libraries/Global/#dorestorewindow","text":"Restores window that matches given title and class name. Requires Rapise 7.2+ DoRestoreWindow ( title , className ) Parameters: Name Type Description title string Title of a window to search for. Use exact value or regex: expression. className string Class name of a window to search for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". Returns: boolean: true if window was found, otherwise false .","title":"DoRestoreWindow"},{"location":"Libraries/Global/#doruntestset","text":"Executes a test set. Results are shown in the report of the calling test. DoRunTestSet ( testSetFilePath , testSetParams ) Parameters: Name Type Description testSetFilePath string Path to a test set file. testSetParams object Additional parameters to pass for each test in the test set. Optional.","title":"DoRunTestSet"},{"location":"Libraries/Global/#dosendkeys","text":"Sends series of keystrokes to a currently focused application. DoSendKeys ( keys ) Parameters: Name Type Description keys string Keystrokes, including special characters and control symbols.","title":"DoSendKeys"},{"location":"Libraries/Global/#dosendtext","text":"Sends text to the active application as is (while SendKeys also supports sending special keys). Requires Rapise 6.5+ DoSendText ( text ) Parameters: Name Type Description text string Text to input.","title":"DoSendText"},{"location":"Libraries/Global/#dosetscreenresolution","text":"Sets screen resolution. Use to run UI tests in unattended RDP sessions. DoSetScreenResolution ( width , height ) Parameters: Name Type Description width number Screen width in pixels height number Screen height in pixels","title":"DoSetScreenResolution"},{"location":"Libraries/Global/#dosleep","text":"Pauses execution for given number of milliseconds (1000 = 1 second). DoSleep ( millis ) Parameters: Name Type Description millis number Number of milliseconds to sleep.","title":"DoSleep"},{"location":"Libraries/Global/#dotrim","text":"Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. DoTrim ( str , global , trimChars ) Parameters: Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed. Optional, Default: \"false\". trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string.","title":"DoTrim"},{"location":"Libraries/Global/#dotypepassword","text":"Types encrypted password into a control which has a focus. DoTypePassword ( encryptedPassword ) Parameters: Name Type Description encryptedPassword string Password to type. Encrypted. Returns: string: 'true'","title":"DoTypePassword"},{"location":"Libraries/Global/#doverticalscroll","text":"Simulates mouse vertical wheel scroll gesture. Requires Rapise 6.5+ DoVerticalScroll ( scrollAmountInClicks ) Parameters: Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user.","title":"DoVerticalScroll"},{"location":"Libraries/Global/#dowaitfor","text":"Waits for object specified by objectId to become available. Function returns if object was found or timeout. DoWaitFor ( objectId , timeout , sleepTimeIfFound ) Parameters: Name Type Description objectId objectid Id of an object to wait for. timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". sleepTimeIfFound number Wait time (milliseconds) after object is found. Optional, Default: \"0\". Returns: SeSObject | boolean: Found object or 'false'.","title":"DoWaitFor"},{"location":"Libraries/Global/#dowaitforproperty","text":"Waits for specified value of object's property. Function returns object handle if object was found and specified property equals to desired value or 'false' in the case of timeout. propValue may be a callback function: function ( value ) { if ( value != 'some text' ) { // if the condition is met return true ; } return false ; } Use the callback if you need to check more complex condition than equality. DoWaitForProperty ( obj , getterName , propValue , timeout , params ) Parameters: Name Type Description obj objectid | SeSObject Id of an object to wait for or object itself. getterName string Property getter function name. propValue string | number | boolean | function Desired property value or callback function (see description). timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". params array | string | number | boolean Parameters for property getter function. Optional. Returns: SeSObject | boolean: Found object or 'false'.","title":"DoWaitForProperty"},{"location":"Libraries/Global/#dowaitforwindow","text":"Waits for window specified by title/class name to become available. Function returns if window was found or timeout. Requires Rapise 7.2+ DoWaitForWindow ( title , className , timeout ) Parameters: Name Type Description title string Title of a window to wait for. Use exact value or regex: expression. className string Class name of a window to wait for. Use exact value or regex: expression. Empty or null value matches any class name. Optional, Default: \"\". timeout number Maximum time to wait (milliseconds). Optional, Default: \"10000\". Returns: boolean: true if window was found, otherwise false .","title":"DoWaitForWindow"},{"location":"Libraries/Global/#getclipboardtext","text":"Reads text stored in the windows clipboard. GetClipboardText () Returns: string: Clipboard text","title":"GetClipboardText"},{"location":"Libraries/Global/#getcurrentdir","text":"Gets current directory path. GetCurrentDir () Returns: string: Path of the current directory.","title":"GetCurrentDir"},{"location":"Libraries/Global/#getfileasbytearray","text":"Reads file and returns its content as array of bytes. May be useful for binary files and for passing data to web services. GetFileAsByteArray ( fileName ) Parameters: Name Type Description fileName string Filename to read (recommended to use absolute file name). Returns: object: Array of bytes.","title":"GetFileAsByteArray"},{"location":"Libraries/Global/#getfirstdayofweek","text":"Returns first day of week for current user. GetFirstDayOfWeek () Returns: number: 0 - Sunday, 1 - Monday.","title":"GetFirstDayOfWeek"},{"location":"Libraries/Global/#getfullpath","text":"Constructs an absolute file name using working directory (WORKDIR) of the test. GetFullPath ( fileName ) Parameters: Name Type Description fileName string Name of a file. Returns: string: Absolute file name.","title":"GetFullPath"},{"location":"Libraries/Global/#getosowner","text":"Reads OS registered owner from the registry. GetOsOwner () Returns: string: OS registered owner.","title":"GetOsOwner"},{"location":"Libraries/Global/#getospath","text":"Returns OS root path. GetOsPath () Returns: string: OS root path without the trailing backslash, e.g. 'C:\\Windows'.","title":"GetOsPath"},{"location":"Libraries/Global/#getostype","text":"Reads OS type from the registry. GetOsType () Returns: string: OS type string.","title":"GetOsType"},{"location":"Libraries/Global/#getosversion","text":"Reads OS service pack version from the registry. GetOsVersion () Returns: string: Service pack version.","title":"GetOsVersion"},{"location":"Libraries/Global/#getproperty","text":"Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise. GetProperty ( name , defValue , configPath ) Parameters: Name Type Description name string Name of a property defValue string | number | boolean Default value to return if property does not exist Optional. configPath string Path to options file (.json, .xlsx). Optional. Returns: string | number | boolean: Property value. If a property does not exist then defValue is returned. If defValue is not set then null is returned.","title":"GetProperty"},{"location":"Libraries/Global/#getrapiseversion","text":"Reads Rapise version. If 'optMinVersion' is specified, then returns true/false depending on 'optMinVersion' less than actual Rapise version. GetRapiseVersion ( optMinVersion ) Parameters: Name Type Description optMinVersion string Minimum version to check Optional. Returns: string: Rapise Version (i.e. 6.3.18.5), 'true' if optMinVersion Rapise version.","title":"GetRapiseVersion"},{"location":"Libraries/Global/#getspecialfolderpath","text":"Returns path to a special folder specified by one of possible values. Possible values: ApplicationData The directory that serves as a common repository for application-specific data for the current roaming user. CommonApplicationData The directory that serves as a common repository for application-specific data that is used by all users. CommonProgramFiles The directory for components that are shared across applications. Cookies The directory that serves as a common repository for Internet cookies. Desktop The logical Desktop rather than the physical file system location. DesktopDirectory The directory used to physically store file objects on the desktop. Favorites The directory that serves as a common repository for the user's favorite items. History The directory that serves as a common repository for Internet history items. InternetCache The directory that serves as a common repository for temporary Internet files. LocalApplicationData The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. MyComputer The \"My Computer\" folder. MyDocuments The \"My Documents\" folder. MyMusic The \"My Music\" folder. MyPictures The \"My Pictures\" folder. Personal The directory that serves as a common repository for documents. ProgramFiles The program files directory. Programs The directory that contains the user's program groups. Recent The directory that contains the user's most recently used documents. SendTo The directory that contains the Send To menu items. StartMenu The directory that contains the Start menu items. Startup The directory that corresponds to the user's Startup program group. System The System directory. Templates The directory that serves as a common repository for document templates. GetSpecialFolderPath ( folder ) Parameters: Name Type Description folder string Folder Id. Possible values: \"ApplicationData\", \"CommonApplicationData\", \"CommonProgramFiles\", \"Cookies\", \"Desktop\", \"DesktopDirectory\", \"Favorites\", \"History\", \"InternetCache\", \"LocalApplicationData\", \"MyComputer\", \"MyDocuments\", \"MyMusic\", \"ProgramFiles\", \"Programs\", \"Recent\", \"SendTo\", \"StartMenu\", \"Startup\", \"System\", \"Templates\" Returns: string: System specified folder path without the trailing backslash, e.g. 'C:\\Program Files'.","title":"GetSpecialFolderPath"},{"location":"Libraries/Global/#setclipboardtext","text":"Updates clipboard text SetClipboardText ( txt ) Parameters: Name Type Description txt string Text to store into clipboard. Returns: boolean: 'true' when clipboard is set.","title":"SetClipboardText"},{"location":"Libraries/Global/#setconfigpath","text":"Set default path for config file instead of default %WORKDIR%\\Config.json. Supports .xlsx and .json file format. This path is used by default for further calls to Global.GetProperty and Global.SetProperty SetConfigPath ( defPath ) Parameters: Name Type Description defPath string New config path, i.e. %WORKDIR%\\Config.xlsx Returns: string: Previous config path","title":"SetConfigPath"},{"location":"Libraries/Global/#setfileasbytearray","text":"Creates or rewrites file and fills with contents of the provided byte array. SetFileAsByteArray ( fileName , bytes ) Parameters: Name Type Description fileName string Filename to write (recommended to use absolute file name). bytes array Array of bytes to write. Returns: number: Number of bytes written.","title":"SetFileAsByteArray"},{"location":"Libraries/Global/#setproperty","text":"Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise. If the file does not exist it will be created. SetProperty ( name , value , configPath ) Parameters: Name Type Description name string Name of a property. value string | number | boolean Value to set. configPath string Path to options file (.json, .xlsx). Optional. Returns: boolean: 'true' if property value set successfully, 'false' otherwise.","title":"SetProperty"},{"location":"Libraries/HTML5Number/","text":"HTML5Number \u00b6 This behavior pattern implements standard behavior for Number (SpinEdit) control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5NumberBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue","title":"HTML5Number"},{"location":"Libraries/HTML5Number/#html5number","text":"This behavior pattern implements standard behavior for Number (SpinEdit) control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5NumberBehavior","title":"HTML5Number"},{"location":"Libraries/HTML5Number/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue","title":"Property Summary"},{"location":"Libraries/HTML5Number/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/HTML5Number/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue","title":"MaxValue"},{"location":"Libraries/HTML5Number/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue","title":"MinValue"},{"location":"Libraries/HTML5Progress/","text":"HTML5Progress \u00b6 This behavior pattern implements standard behavior for Progress control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5ProgressBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue","title":"HTML5Progress"},{"location":"Libraries/HTML5Progress/#html5progress","text":"This behavior pattern implements standard behavior for Progress control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5ProgressBehavior","title":"HTML5Progress"},{"location":"Libraries/HTML5Progress/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue","title":"Property Summary"},{"location":"Libraries/HTML5Progress/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/HTML5Progress/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue","title":"MaxValue"},{"location":"Libraries/HTML5Range/","text":"HTML5Range \u00b6 This behavior pattern implements standard behavior for Range control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5RangeBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue","title":"HTML5Range"},{"location":"Libraries/HTML5Range/#html5range","text":"This behavior pattern implements standard behavior for Range control. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: HTML5RangeBehavior","title":"HTML5Range"},{"location":"Libraries/HTML5Range/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue","title":"Property Summary"},{"location":"Libraries/HTML5Range/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/HTML5Range/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue","title":"MaxValue"},{"location":"Libraries/HTML5Range/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue","title":"MinValue"},{"location":"Libraries/HTMLObject/","text":"HTMLObject \u00b6 This object contains actions and properties for DOM elements of Web page. Extends SeSSimulatedObject Behavior Pattern: HTMLFirefoxBehavior Property Summary \u00b6 Property Description Getter Setter Alt Alt of the element. GetAlt Checked 'Checked' state of the element. GetChecked Class Class of the element. GetClass ClientX X-coordinate of the top left corner of the element relative to browser window. GetClientX ClientY Y-coordinate of the top left corner of the element relative to browser window. GetClientY Enabled 'Enabled' state of the element. GetEnabled SetEnabled Height Height of the element. GetHeight Href HREF of the element. GetHref Id ID of the element. GetId InnerText Inner text of the element. GetInnerText Label Label of the element. GetLabel Name Name of the element. GetName NodeText Text of the element without children. GetNodeText PageTitle Title of the HTML document. GetPageTitle PageURL Location URL of the HTML document. GetPageURL Style Style of the element. GetStyle Tag Tag of the element. GetTag Text Text of the element with normalized spaces. GetText Title Title of the element. GetTitle Value Value of the element. GetValue Visible Returns true if the element is visible on screen. GetVisible X X-coordinate of the top left corner of the element. GetX XPath XPath of the element. GetXPath Y Y-coordinate of the top left corner of the element. GetY Action Summary \u00b6 Action Description DoAddSelection Adds selection of specified option in multi-select element. DoClick Clicks on HTML element (button, link). DoDblClick Double-Clicks on HTML element (button, link). DoDOMChildAt Returns n-th child (zero-based). DoDOMChildrenCount Returns number of children elements for this one. DoDOMConvert Creates a clone of this object converted to a requested type. DoDOMFindParentWithAttribute Returns parent element (if any) with given attribute matching given string or 'regex:. DoDOMGetAttribute Returns specified attribute. DoDOMGetAttributes Returns all attributes of a node. DoDOMNextSibling Returns next sibling element for this one. DoDOMParent Returns parent element having this element. DoDOMPrevSibling Return previous sibling element for this one. DoDOMQueryCss Gets array of elements matching CSS selector on this object. DoDOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoDOMQueryXPath Gets array of elements matching XPath query on this object. DoDOMRoot Returns Root element having this element. DoEnsureVisible Makes sure specified element is visible on the screen. DoGetRect Finds screen rectangle for this object. DoGetSelection Gets selected options text of a SELECT element. DoMouseMove Moves mouse on HTML element with offset. DoSelect Selects specified element in <select> control. DoSetCheck Sets specified state of check box. DoSetText Sets text for input edit or textarea. Property Detail \u00b6 Alt \u00b6 Alt of the element. Type: string Accessors: GetAlt Checked \u00b6 'Checked' state of the element. Type: boolean Accessors: GetChecked Class \u00b6 Class of the element. Type: string Accessors: GetClass ClientX \u00b6 X-coordinate of the top left corner of the element relative to browser window. Type: number Accessors: GetClientX ClientY \u00b6 Y-coordinate of the top left corner of the element relative to browser window. Type: number Accessors: GetClientY Enabled \u00b6 'Enabled' state of the element. Type: boolean Accessors: GetEnabled, SetEnabled Height \u00b6 Height of the element. Type: number Accessors: GetHeight Href \u00b6 HREF of the element. Type: string Accessors: GetHref Id \u00b6 ID of the element. Type: string Accessors: GetId InnerText \u00b6 Inner text of the element. Type: string Accessors: GetInnerText Label \u00b6 Label of the element. Type: string Accessors: GetLabel Name \u00b6 Name of the element. Type: string Accessors: GetName NodeText \u00b6 Text of the element without children. Type: string Accessors: GetNodeText PageTitle \u00b6 Title of the HTML document. Type: string Accessors: GetPageTitle PageURL \u00b6 Location URL of the HTML document. Type: string Accessors: GetPageURL Style \u00b6 Style of the element. Type: string Accessors: GetStyle Tag \u00b6 Tag of the element. Type: string Accessors: GetTag Text \u00b6 Text of the element with normalized spaces. Type: string Accessors: GetText Title \u00b6 Title of the element. Type: string Accessors: GetTitle Value \u00b6 Value of the element. Type: string Accessors: GetValue Visible \u00b6 Returns true if the element is visible on screen. Requires Rapise 6.6+ Type: boolean Accessors: GetVisible X \u00b6 X-coordinate of the top left corner of the element. Type: number Accessors: GetX XPath \u00b6 XPath of the element. Type: string Accessors: GetXPath Y \u00b6 Y-coordinate of the top left corner of the element. Type: number Accessors: GetY Action Detail \u00b6 DoAddSelection \u00b6 Adds selection of specified option in multi-select element. DoAddSelection ( optionText ) Parameters: Name Type Description optionText string Element to select Returns: boolean: 'true' if successful, 'false' otherwise' DoClick \u00b6 Clicks on HTML element (button, link). DoClick ( x , y , forceEvent ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise' DoDblClick \u00b6 Double-Clicks on HTML element (button, link). DoDblClick ( x , y , forceEvent ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise' DoDOMChildAt \u00b6 Returns n-th child (zero-based). DoDOMChildAt ( n ) Parameters: Name Type Description n number n Index of the child element. Returns: HTMLObject : n-th child. DoDOMChildrenCount \u00b6 Returns number of children elements for this one. DoDOMChildrenCount () Returns: number: Number of children elements. DoDOMConvert \u00b6 Creates a clone of this object converted to a requested type. DoDOMConvert ( type ) Parameters: Name Type Description type string Type of an object. Returns: HTMLObject : New Object of requested type or HTMLObject if type not found, null if error occur. DoDOMFindParentWithAttribute \u00b6 Returns parent element (if any) with given attribute matching given string or 'regex:...' expression. DoDOMFindParentWithAttribute ( attrName , match ) Parameters: Name Type Description attrName string Name of an attribute. match string Match string. Returns: HTMLObject : Matched element or 'null'. DoDOMGetAttribute \u00b6 Returns specified attribute. DoDOMGetAttribute ( attrName ) Parameters: Name Type Description attrName string Name of an attribute. Returns: object: Attribute value. DoDOMGetAttributes \u00b6 Returns all attributes of a node. DoDOMGetAttributes () Returns: array: Array of attributes. DoDOMNextSibling \u00b6 Returns next sibling element for this one. DoDOMNextSibling () Returns: HTMLObject : Next sibling element. DoDOMParent \u00b6 Returns parent element having this element. DoDOMParent () Returns: HTMLObject : Parent element. DoDOMPrevSibling \u00b6 Return previous sibling element for this one. DoDOMPrevSibling () Returns: HTMLObject : Previous sibling element. DoDOMQueryCss \u00b6 Gets array of elements matching CSS selector on this object. DoDOMQueryCss ( css ) Parameters: Name Type Description css string CSS selector. Returns: array: Array of matched elements. DoDOMQueryValue \u00b6 Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then null is returned. Requires Rapise 6.4+ DoDOMQueryValue ( xpath ) Parameters: Name Type Description xpath string Absolute or relative xpath query. e.g. count(//div) , //a[1]/@href='/Home' , ./li/text() Returns: string | number | boolean: Result of the query or null if the query is invalid. DoDOMQueryXPath \u00b6 Gets array of elements matching XPath query on this object. DoDOMQueryXPath ( xpath ) Parameters: Name Type Description xpath string Xpath query. Returns: array: Array of matched elements. DoDOMRoot \u00b6 Returns Root element having this element. DoDOMRoot () Returns: HTMLObject : Root element having this element. DoEnsureVisible \u00b6 Makes sure specified element is visible on the screen. DoEnsureVisible ( vAlign , hAlign ) Parameters: Name Type Description vAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\". Optional. hAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\". Optional. Returns: object: Rectangle of the element if it became visible, 'null' otherwise. DoGetRect \u00b6 Finds screen rectangle for this object. DoGetRect () Returns: object: object {x, y, w, h} DoGetSelection \u00b6 Gets selected options text of a SELECT element. Example: 'Option1,Option2'. DoGetSelection ( delim ) Parameters: Name Type Description delim string Separator between options. Optional, Default: \",\". Returns: boolean: String with option values separated by delim. DoMouseMove \u00b6 Moves mouse on HTML element with offset. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise' DoSelect \u00b6 Selects specified element in <select> control. Since Rapise 6.3 also supports OL and UL lists. DoSelect ( txt ) Parameters: Name Type Description txt string Element to select Returns: boolean: 'true' if successful, 'false' otherwise' DoSetCheck \u00b6 Sets specified state of check box. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean State to set Returns: boolean: 'true' if successful, 'false' otherwise' DoSetText \u00b6 Sets text for input edit or textarea. DoSetText ( txt ) Parameters: Name Type Description txt string Text to set Returns: boolean: 'true' if successful, 'false' otherwise'","title":"HTMLObject"},{"location":"Libraries/HTMLObject/#htmlobject","text":"This object contains actions and properties for DOM elements of Web page. Extends SeSSimulatedObject Behavior Pattern: HTMLFirefoxBehavior","title":"HTMLObject"},{"location":"Libraries/HTMLObject/#property-summary","text":"Property Description Getter Setter Alt Alt of the element. GetAlt Checked 'Checked' state of the element. GetChecked Class Class of the element. GetClass ClientX X-coordinate of the top left corner of the element relative to browser window. GetClientX ClientY Y-coordinate of the top left corner of the element relative to browser window. GetClientY Enabled 'Enabled' state of the element. GetEnabled SetEnabled Height Height of the element. GetHeight Href HREF of the element. GetHref Id ID of the element. GetId InnerText Inner text of the element. GetInnerText Label Label of the element. GetLabel Name Name of the element. GetName NodeText Text of the element without children. GetNodeText PageTitle Title of the HTML document. GetPageTitle PageURL Location URL of the HTML document. GetPageURL Style Style of the element. GetStyle Tag Tag of the element. GetTag Text Text of the element with normalized spaces. GetText Title Title of the element. GetTitle Value Value of the element. GetValue Visible Returns true if the element is visible on screen. GetVisible X X-coordinate of the top left corner of the element. GetX XPath XPath of the element. GetXPath Y Y-coordinate of the top left corner of the element. GetY","title":"Property Summary"},{"location":"Libraries/HTMLObject/#action-summary","text":"Action Description DoAddSelection Adds selection of specified option in multi-select element. DoClick Clicks on HTML element (button, link). DoDblClick Double-Clicks on HTML element (button, link). DoDOMChildAt Returns n-th child (zero-based). DoDOMChildrenCount Returns number of children elements for this one. DoDOMConvert Creates a clone of this object converted to a requested type. DoDOMFindParentWithAttribute Returns parent element (if any) with given attribute matching given string or 'regex:. DoDOMGetAttribute Returns specified attribute. DoDOMGetAttributes Returns all attributes of a node. DoDOMNextSibling Returns next sibling element for this one. DoDOMParent Returns parent element having this element. DoDOMPrevSibling Return previous sibling element for this one. DoDOMQueryCss Gets array of elements matching CSS selector on this object. DoDOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoDOMQueryXPath Gets array of elements matching XPath query on this object. DoDOMRoot Returns Root element having this element. DoEnsureVisible Makes sure specified element is visible on the screen. DoGetRect Finds screen rectangle for this object. DoGetSelection Gets selected options text of a SELECT element. DoMouseMove Moves mouse on HTML element with offset. DoSelect Selects specified element in <select> control. DoSetCheck Sets specified state of check box. DoSetText Sets text for input edit or textarea.","title":"Action Summary"},{"location":"Libraries/HTMLObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/HTMLObject/#alt","text":"Alt of the element. Type: string Accessors: GetAlt","title":"Alt"},{"location":"Libraries/HTMLObject/#checked","text":"'Checked' state of the element. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/HTMLObject/#class","text":"Class of the element. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/HTMLObject/#clientx","text":"X-coordinate of the top left corner of the element relative to browser window. Type: number Accessors: GetClientX","title":"ClientX"},{"location":"Libraries/HTMLObject/#clienty","text":"Y-coordinate of the top left corner of the element relative to browser window. Type: number Accessors: GetClientY","title":"ClientY"},{"location":"Libraries/HTMLObject/#enabled","text":"'Enabled' state of the element. Type: boolean Accessors: GetEnabled, SetEnabled","title":"Enabled"},{"location":"Libraries/HTMLObject/#height","text":"Height of the element. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/HTMLObject/#href","text":"HREF of the element. Type: string Accessors: GetHref","title":"Href"},{"location":"Libraries/HTMLObject/#id","text":"ID of the element. Type: string Accessors: GetId","title":"Id"},{"location":"Libraries/HTMLObject/#innertext","text":"Inner text of the element. Type: string Accessors: GetInnerText","title":"InnerText"},{"location":"Libraries/HTMLObject/#label","text":"Label of the element. Type: string Accessors: GetLabel","title":"Label"},{"location":"Libraries/HTMLObject/#name","text":"Name of the element. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/HTMLObject/#nodetext","text":"Text of the element without children. Type: string Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/HTMLObject/#pagetitle","text":"Title of the HTML document. Type: string Accessors: GetPageTitle","title":"PageTitle"},{"location":"Libraries/HTMLObject/#pageurl","text":"Location URL of the HTML document. Type: string Accessors: GetPageURL","title":"PageURL"},{"location":"Libraries/HTMLObject/#style","text":"Style of the element. Type: string Accessors: GetStyle","title":"Style"},{"location":"Libraries/HTMLObject/#tag","text":"Tag of the element. Type: string Accessors: GetTag","title":"Tag"},{"location":"Libraries/HTMLObject/#text","text":"Text of the element with normalized spaces. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/HTMLObject/#title","text":"Title of the element. Type: string Accessors: GetTitle","title":"Title"},{"location":"Libraries/HTMLObject/#value","text":"Value of the element. Type: string Accessors: GetValue","title":"Value"},{"location":"Libraries/HTMLObject/#visible","text":"Returns true if the element is visible on screen. Requires Rapise 6.6+ Type: boolean Accessors: GetVisible","title":"Visible"},{"location":"Libraries/HTMLObject/#x","text":"X-coordinate of the top left corner of the element. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/HTMLObject/#xpath","text":"XPath of the element. Type: string Accessors: GetXPath","title":"XPath"},{"location":"Libraries/HTMLObject/#y","text":"Y-coordinate of the top left corner of the element. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/HTMLObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/HTMLObject/#doaddselection","text":"Adds selection of specified option in multi-select element. DoAddSelection ( optionText ) Parameters: Name Type Description optionText string Element to select Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoAddSelection"},{"location":"Libraries/HTMLObject/#doclick","text":"Clicks on HTML element (button, link). DoClick ( x , y , forceEvent ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoClick"},{"location":"Libraries/HTMLObject/#dodblclick","text":"Double-Clicks on HTML element (button, link). DoDblClick ( x , y , forceEvent ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse click Optional, Default: \"false\". Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoDblClick"},{"location":"Libraries/HTMLObject/#dodomchildat","text":"Returns n-th child (zero-based). DoDOMChildAt ( n ) Parameters: Name Type Description n number n Index of the child element. Returns: HTMLObject : n-th child.","title":"DoDOMChildAt"},{"location":"Libraries/HTMLObject/#dodomchildrencount","text":"Returns number of children elements for this one. DoDOMChildrenCount () Returns: number: Number of children elements.","title":"DoDOMChildrenCount"},{"location":"Libraries/HTMLObject/#dodomconvert","text":"Creates a clone of this object converted to a requested type. DoDOMConvert ( type ) Parameters: Name Type Description type string Type of an object. Returns: HTMLObject : New Object of requested type or HTMLObject if type not found, null if error occur.","title":"DoDOMConvert"},{"location":"Libraries/HTMLObject/#dodomfindparentwithattribute","text":"Returns parent element (if any) with given attribute matching given string or 'regex:...' expression. DoDOMFindParentWithAttribute ( attrName , match ) Parameters: Name Type Description attrName string Name of an attribute. match string Match string. Returns: HTMLObject : Matched element or 'null'.","title":"DoDOMFindParentWithAttribute"},{"location":"Libraries/HTMLObject/#dodomgetattribute","text":"Returns specified attribute. DoDOMGetAttribute ( attrName ) Parameters: Name Type Description attrName string Name of an attribute. Returns: object: Attribute value.","title":"DoDOMGetAttribute"},{"location":"Libraries/HTMLObject/#dodomgetattributes","text":"Returns all attributes of a node. DoDOMGetAttributes () Returns: array: Array of attributes.","title":"DoDOMGetAttributes"},{"location":"Libraries/HTMLObject/#dodomnextsibling","text":"Returns next sibling element for this one. DoDOMNextSibling () Returns: HTMLObject : Next sibling element.","title":"DoDOMNextSibling"},{"location":"Libraries/HTMLObject/#dodomparent","text":"Returns parent element having this element. DoDOMParent () Returns: HTMLObject : Parent element.","title":"DoDOMParent"},{"location":"Libraries/HTMLObject/#dodomprevsibling","text":"Return previous sibling element for this one. DoDOMPrevSibling () Returns: HTMLObject : Previous sibling element.","title":"DoDOMPrevSibling"},{"location":"Libraries/HTMLObject/#dodomquerycss","text":"Gets array of elements matching CSS selector on this object. DoDOMQueryCss ( css ) Parameters: Name Type Description css string CSS selector. Returns: array: Array of matched elements.","title":"DoDOMQueryCss"},{"location":"Libraries/HTMLObject/#dodomqueryvalue","text":"Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then null is returned. Requires Rapise 6.4+ DoDOMQueryValue ( xpath ) Parameters: Name Type Description xpath string Absolute or relative xpath query. e.g. count(//div) , //a[1]/@href='/Home' , ./li/text() Returns: string | number | boolean: Result of the query or null if the query is invalid.","title":"DoDOMQueryValue"},{"location":"Libraries/HTMLObject/#dodomqueryxpath","text":"Gets array of elements matching XPath query on this object. DoDOMQueryXPath ( xpath ) Parameters: Name Type Description xpath string Xpath query. Returns: array: Array of matched elements.","title":"DoDOMQueryXPath"},{"location":"Libraries/HTMLObject/#dodomroot","text":"Returns Root element having this element. DoDOMRoot () Returns: HTMLObject : Root element having this element.","title":"DoDOMRoot"},{"location":"Libraries/HTMLObject/#doensurevisible","text":"Makes sure specified element is visible on the screen. DoEnsureVisible ( vAlign , hAlign ) Parameters: Name Type Description vAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\". Optional. hAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\". Optional. Returns: object: Rectangle of the element if it became visible, 'null' otherwise.","title":"DoEnsureVisible"},{"location":"Libraries/HTMLObject/#dogetrect","text":"Finds screen rectangle for this object. DoGetRect () Returns: object: object {x, y, w, h}","title":"DoGetRect"},{"location":"Libraries/HTMLObject/#dogetselection","text":"Gets selected options text of a SELECT element. Example: 'Option1,Option2'. DoGetSelection ( delim ) Parameters: Name Type Description delim string Separator between options. Optional, Default: \",\". Returns: boolean: String with option values separated by delim.","title":"DoGetSelection"},{"location":"Libraries/HTMLObject/#domousemove","text":"Moves mouse on HTML element with offset. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoMouseMove"},{"location":"Libraries/HTMLObject/#doselect","text":"Selects specified element in <select> control. Since Rapise 6.3 also supports OL and UL lists. DoSelect ( txt ) Parameters: Name Type Description txt string Element to select Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoSelect"},{"location":"Libraries/HTMLObject/#dosetcheck","text":"Sets specified state of check box. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean State to set Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoSetCheck"},{"location":"Libraries/HTMLObject/#dosettext","text":"Sets text for input edit or textarea. DoSetText ( txt ) Parameters: Name Type Description txt string Text to set Returns: boolean: 'true' if successful, 'false' otherwise'","title":"DoSetText"},{"location":"Libraries/JQueryAccordion/","text":"JQueryAccordion \u00b6 jQuery-UI JQuery Accordion. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryAccordionBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects a specific tab of the accordion. Property Detail \u00b6 ItemsCount \u00b6 Gets the number of tabs Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Gets the index of the selected tab Type: number Accessors: GetSelectedIndex SelectedTab \u00b6 Gets the text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects a specific tab of the accordion. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string The name of the tab to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"JQueryAccordion"},{"location":"Libraries/JQueryAccordion/#jqueryaccordion","text":"jQuery-UI JQuery Accordion. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryAccordionBehavior","title":"JQueryAccordion"},{"location":"Libraries/JQueryAccordion/#property-summary","text":"Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/JQueryAccordion/#action-summary","text":"Action Description DoSelectTab Selects a specific tab of the accordion.","title":"Action Summary"},{"location":"Libraries/JQueryAccordion/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JQueryAccordion/#itemscount","text":"Gets the number of tabs Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/JQueryAccordion/#selectedindex","text":"Gets the index of the selected tab Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JQueryAccordion/#selectedtab","text":"Gets the text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/JQueryAccordion/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQueryAccordion/#doselecttab","text":"Selects a specific tab of the accordion. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string The name of the tab to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/JQueryDatepicker/","text":"JQueryDatepicker \u00b6 jQuery-UI JQuery Date Picker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryDatepickerBehavior Property Summary \u00b6 Property Description Getter Setter Month Gets the currently selected month GetMonth Year Gets the currently selected year GetYear Action Summary \u00b6 Action Description DoNextMonth Changes to the next month. DoPrevMonth Changes to the previous month. DoSelectDate Selects a specific day in the current month. Property Detail \u00b6 Month \u00b6 Gets the currently selected month Type: number Accessors: GetMonth Year \u00b6 Gets the currently selected year Type: number Accessors: GetYear Action Detail \u00b6 DoNextMonth \u00b6 Changes to the next month. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise. DoPrevMonth \u00b6 Changes to the previous month. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise. DoSelectDate \u00b6 Selects a specific day in the current month. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number The day of the month to choose Returns: boolean: 'true' if success, 'false' otherwise.","title":"JQueryDatepicker"},{"location":"Libraries/JQueryDatepicker/#jquerydatepicker","text":"jQuery-UI JQuery Date Picker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryDatepickerBehavior","title":"JQueryDatepicker"},{"location":"Libraries/JQueryDatepicker/#property-summary","text":"Property Description Getter Setter Month Gets the currently selected month GetMonth Year Gets the currently selected year GetYear","title":"Property Summary"},{"location":"Libraries/JQueryDatepicker/#action-summary","text":"Action Description DoNextMonth Changes to the next month. DoPrevMonth Changes to the previous month. DoSelectDate Selects a specific day in the current month.","title":"Action Summary"},{"location":"Libraries/JQueryDatepicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JQueryDatepicker/#month","text":"Gets the currently selected month Type: number Accessors: GetMonth","title":"Month"},{"location":"Libraries/JQueryDatepicker/#year","text":"Gets the currently selected year Type: number Accessors: GetYear","title":"Year"},{"location":"Libraries/JQueryDatepicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQueryDatepicker/#donextmonth","text":"Changes to the next month. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoNextMonth"},{"location":"Libraries/JQueryDatepicker/#doprevmonth","text":"Changes to the previous month. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoPrevMonth"},{"location":"Libraries/JQueryDatepicker/#doselectdate","text":"Selects a specific day in the current month. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number The day of the month to choose Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectDate"},{"location":"Libraries/JQueryMenu/","text":"JQueryMenu \u00b6 jQuery-UI JQuery Menu. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryMenuBehavior Action Summary \u00b6 Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item. Action Detail \u00b6 DoFindChild \u00b6 Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: HTMLObject : HTMLObject of the found node DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: HTMLObject : HTMLObject of the found node","title":"JQueryMenu"},{"location":"Libraries/JQueryMenu/#jquerymenu","text":"jQuery-UI JQuery Menu. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryMenuBehavior","title":"JQueryMenu"},{"location":"Libraries/JQueryMenu/#action-summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/JQueryMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQueryMenu/#dofindchild","text":"Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/JQueryMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: HTMLObject : HTMLObject of the found node","title":"DoMenu"},{"location":"Libraries/JQueryProgressbar/","text":"JQueryProgressbar \u00b6 jQuery-UI JQuery Progress Bar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryProgressbarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue Value Current value of the progress bar. GetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number Accessors: GetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number Accessors: GetMinValue Value \u00b6 Current value of the progress bar. Type: number Accessors: GetValue","title":"JQueryProgressbar"},{"location":"Libraries/JQueryProgressbar/#jqueryprogressbar","text":"jQuery-UI JQuery Progress Bar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryProgressbarBehavior","title":"JQueryProgressbar"},{"location":"Libraries/JQueryProgressbar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue Value Current value of the progress bar. GetValue","title":"Property Summary"},{"location":"Libraries/JQueryProgressbar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JQueryProgressbar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number Accessors: GetMaxValue","title":"MaxValue"},{"location":"Libraries/JQueryProgressbar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number Accessors: GetMinValue","title":"MinValue"},{"location":"Libraries/JQueryProgressbar/#value","text":"Current value of the progress bar. Type: number Accessors: GetValue","title":"Value"},{"location":"Libraries/JQuerySliderH/","text":"JQuerySliderH \u00b6 jQuery-UI JQuery SliderH. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySliderHBehavior Action Summary \u00b6 Action Description DoChange Changes slider position. Action Detail \u00b6 DoChange \u00b6 Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"JQuerySliderH"},{"location":"Libraries/JQuerySliderH/#jquerysliderh","text":"jQuery-UI JQuery SliderH. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySliderHBehavior","title":"JQuerySliderH"},{"location":"Libraries/JQuerySliderH/#action-summary","text":"Action Description DoChange Changes slider position.","title":"Action Summary"},{"location":"Libraries/JQuerySliderH/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQuerySliderH/#dochange","text":"Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoChange"},{"location":"Libraries/JQuerySliderV/","text":"JQuerySliderV \u00b6 jQuery-UI JQuery SliderV. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySliderVBehavior Action Summary \u00b6 Action Description DoChange Changes slider position. Action Detail \u00b6 DoChange \u00b6 Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"JQuerySliderV"},{"location":"Libraries/JQuerySliderV/#jquerysliderv","text":"jQuery-UI JQuery SliderV. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySliderVBehavior","title":"JQuerySliderV"},{"location":"Libraries/JQuerySliderV/#action-summary","text":"Action Description DoChange Changes slider position.","title":"Action Summary"},{"location":"Libraries/JQuerySliderV/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQuerySliderV/#dochange","text":"Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoChange"},{"location":"Libraries/JQuerySpinner/","text":"JQuerySpinner \u00b6 jQuery-UI JQuery Spinner. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySpinnerBehavior Property Summary \u00b6 Property Description Getter Setter Value Gets/Sets the value of the spinner GetValue SetValue Action Summary \u00b6 Action Description DoPageDown Clicks the PageDown spinner button. DoPageUp Clicks the PageUp spinner button. DoSetValue Sets the value of the spinner. Property Detail \u00b6 Value \u00b6 Gets/Sets the value of the spinner Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoPageDown \u00b6 Clicks the PageDown spinner button. DoPageDown () Returns: boolean: 'true' if success, 'false' otherwise. DoPageUp \u00b6 Clicks the PageUp spinner button. DoPageUp () Returns: boolean: 'true' if success, 'false' otherwise. DoSetValue \u00b6 Sets the value of the spinner. DoSetValue ( value ) Parameters: Name Type Description value number The desired value of the spinner. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JQuerySpinner"},{"location":"Libraries/JQuerySpinner/#jqueryspinner","text":"jQuery-UI JQuery Spinner. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQuerySpinnerBehavior","title":"JQuerySpinner"},{"location":"Libraries/JQuerySpinner/#property-summary","text":"Property Description Getter Setter Value Gets/Sets the value of the spinner GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JQuerySpinner/#action-summary","text":"Action Description DoPageDown Clicks the PageDown spinner button. DoPageUp Clicks the PageUp spinner button. DoSetValue Sets the value of the spinner.","title":"Action Summary"},{"location":"Libraries/JQuerySpinner/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JQuerySpinner/#value","text":"Gets/Sets the value of the spinner Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JQuerySpinner/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQuerySpinner/#dopagedown","text":"Clicks the PageDown spinner button. DoPageDown () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoPageDown"},{"location":"Libraries/JQuerySpinner/#dopageup","text":"Clicks the PageUp spinner button. DoPageUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoPageUp"},{"location":"Libraries/JQuerySpinner/#dosetvalue","text":"Sets the value of the spinner. DoSetValue ( value ) Parameters: Name Type Description value number The desired value of the spinner. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetValue"},{"location":"Libraries/JQueryTabs/","text":"JQueryTabs \u00b6 jQuery-UI JQuery Tabs. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryTabsBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects a specific tab of the tab control. Property Detail \u00b6 ItemsCount \u00b6 Gets the number of tabs Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Gets the index of the selected tab Type: number Accessors: GetSelectedIndex SelectedTab \u00b6 Gets the text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects a specific tab of the tab control. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string The name of the tab to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"JQueryTabs"},{"location":"Libraries/JQueryTabs/#jquerytabs","text":"jQuery-UI JQuery Tabs. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: JQueryTabsBehavior","title":"JQueryTabs"},{"location":"Libraries/JQueryTabs/#property-summary","text":"Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/JQueryTabs/#action-summary","text":"Action Description DoSelectTab Selects a specific tab of the tab control.","title":"Action Summary"},{"location":"Libraries/JQueryTabs/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JQueryTabs/#itemscount","text":"Gets the number of tabs Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/JQueryTabs/#selectedindex","text":"Gets the index of the selected tab Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JQueryTabs/#selectedtab","text":"Gets the text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/JQueryTabs/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JQueryTabs/#doselecttab","text":"Selects a specific tab of the tab control. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string The name of the tab to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/JavaButton/","text":"JavaButton \u00b6 Java Button. UI element class: java.awt.Button Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectButtonBehavior","title":"JavaButton"},{"location":"Libraries/JavaButton/#javabutton","text":"Java Button. UI element class: java.awt.Button Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectButtonBehavior","title":"JavaButton"},{"location":"Libraries/JavaCheckBox/","text":"JavaCheckBox \u00b6 Java CheckBox. UI element class: java.awt.Checkbox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Value \u00b6 Value of the object. Type: boolean Accessors: GetValue, SetValue Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaCheckBox"},{"location":"Libraries/JavaCheckBox/#javacheckbox","text":"Java CheckBox. UI element class: java.awt.Checkbox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectCheckableBehavior","title":"JavaCheckBox"},{"location":"Libraries/JavaCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/JavaCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/JavaCheckBox/#value","text":"Value of the object. Type: boolean Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/JavaChoice/","text":"JavaChoice \u00b6 Java Choice. UI element class: java.awt.Choice Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectSelectableBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaChoice"},{"location":"Libraries/JavaChoice/#javachoice","text":"Java Choice. UI element class: java.awt.Choice Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectSelectableBehavior","title":"JavaChoice"},{"location":"Libraries/JavaChoice/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText","title":"Property Summary"},{"location":"Libraries/JavaChoice/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/JavaChoice/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaChoice/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JavaChoice/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/JavaChoice/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaChoice/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/JavaLabel/","text":"JavaLabel \u00b6 Java Label. UI element class: java.awt.Label Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"JavaLabel"},{"location":"Libraries/JavaLabel/#javalabel","text":"Java Label. UI element class: java.awt.Label Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectLabelBehavior","title":"JavaLabel"},{"location":"Libraries/JavaLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/JavaLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/JavaList/","text":"JavaList \u00b6 Java List. UI element class: java.awt.List Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectListSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Getter Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaList"},{"location":"Libraries/JavaList/#javalist","text":"Java List. UI element class: java.awt.List Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectListSelectableBehavior","title":"JavaList"},{"location":"Libraries/JavaList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/JavaList/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/JavaList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/JavaList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/JavaList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/JavaList/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JavaList/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/JavaList/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/JavaList/#selectedtext","text":"Text of the selected item in a single string. Getter Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/JavaList/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/JavaList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaList/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/JavaList/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/JavaList/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/JavaList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/JavaObject/","text":"JavaObject \u00b6 Standard Java (AWT, Swing) Object. UI element class: regex:.* Extends SeSSimulatedObject Behavior Pattern: JavaObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Parent Object for UI Automation parent node GetParent Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Clicks in the middle of the control. DoDumpWidget Dumps Spy data for the object. DoFindByLabel Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression). DoFindByName Find nested element by its name (getName() property of each element is compared with specified text or regular expression). DoFindByText Find nested element by its text (getText() property of each element is compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Enabled \u00b6 'Enabled' state of the element. Type: boolean Accessors: GetEnabled Height \u00b6 Height of the object. Type: number Accessors: GetHeight Parent \u00b6 Object for UI Automation parent node Type: UIAObject Accessors: GetParent Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise. DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByLabel \u00b6 Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression). DoFindByLabel ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise DoFindByName \u00b6 Find nested element by its name (getName() property of each element is compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (getText() property of each element is compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise DoFindElementByCondition \u00b6 Finds first element matching the condition. DoFindElementByCondition ( condition ) Parameters: Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: Returns: JavaObject : JavaObject if the element is found, null otherwise DoFindElementsByCondition \u00b6 Finds all elements matching the condition DoFindElementsByCondition ( condition ) Parameters: Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: Returns: Array : Array of JavaObjects for the found elements, the array is empty if nothing is found. DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"JavaObject"},{"location":"Libraries/JavaObject/#javaobject","text":"Standard Java (AWT, Swing) Object. UI element class: regex:.* Extends SeSSimulatedObject Behavior Pattern: JavaObjectGenericBehavior","title":"JavaObject"},{"location":"Libraries/JavaObject/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Parent Object for UI Automation parent node GetParent Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/JavaObject/#action-summary","text":"Action Description DoAction Clicks in the middle of the control. DoDumpWidget Dumps Spy data for the object. DoFindByLabel Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression). DoFindByName Find nested element by its name (getName() property of each element is compared with specified text or regular expression). DoFindByText Find nested element by its text (getText() property of each element is compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/JavaObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaObject/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/JavaObject/#enabled","text":"'Enabled' state of the element. Type: boolean Accessors: GetEnabled","title":"Enabled"},{"location":"Libraries/JavaObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/JavaObject/#parent","text":"Object for UI Automation parent node Type: UIAObject Accessors: GetParent","title":"Parent"},{"location":"Libraries/JavaObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/JavaObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/JavaObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/JavaObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaObject/#doaction","text":"Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAction"},{"location":"Libraries/JavaObject/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/JavaObject/#dofindbylabel","text":"Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression). DoFindByLabel ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise","title":"DoFindByLabel"},{"location":"Libraries/JavaObject/#dofindbyname","text":"Find nested element by its name (getName() property of each element is compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/JavaObject/#dofindbytext","text":"Find nested element by its text (getText() property of each element is compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: JavaObject : JavaObject containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/JavaObject/#dofindelementbycondition","text":"Finds first element matching the condition. DoFindElementByCondition ( condition ) Parameters: Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: Returns: JavaObject : JavaObject if the element is found, null otherwise","title":"DoFindElementByCondition"},{"location":"Libraries/JavaObject/#dofindelementsbycondition","text":"Finds all elements matching the condition DoFindElementsByCondition ( condition ) Parameters: Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: Returns: Array : Array of JavaObjects for the found elements, the array is empty if nothing is found.","title":"DoFindElementsByCondition"},{"location":"Libraries/JavaObject/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/JavaSwingButton/","text":"JavaSwingButton \u00b6 Java Swing Button. UI element class: javax.swing.JButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectButtonBehavior","title":"JavaSwingButton"},{"location":"Libraries/JavaSwingButton/#javaswingbutton","text":"Java Swing Button. UI element class: javax.swing.JButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectButtonBehavior","title":"JavaSwingButton"},{"location":"Libraries/JavaSwingCheckBox/","text":"JavaSwingCheckBox \u00b6 Java Swing CheckBox. UI element class: javax.swing.JCheckBox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingCheckBox"},{"location":"Libraries/JavaSwingCheckBox/#javaswingcheckbox","text":"Java Swing CheckBox. UI element class: javax.swing.JCheckBox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior","title":"JavaSwingCheckBox"},{"location":"Libraries/JavaSwingCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/JavaSwingCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/JavaSwingCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/JavaSwingCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/JavaSwingComboBox/","text":"JavaSwingComboBox \u00b6 Java Swing Combo Box. UI element class: javax.swing.JComboBox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingComboBox"},{"location":"Libraries/JavaSwingComboBox/#javaswingcombobox","text":"Java Swing Combo Box. UI element class: javax.swing.JComboBox Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectSelectableBehavior","title":"JavaSwingComboBox"},{"location":"Libraries/JavaSwingComboBox/#property-summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText","title":"Property Summary"},{"location":"Libraries/JavaSwingComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingComboBox/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/JavaSwingComboBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JavaSwingComboBox/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/JavaSwingComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/JavaSwingLabel/","text":"JavaSwingLabel \u00b6 Java Swing Label. UI element class: javax.swing.JLabel Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"JavaSwingLabel"},{"location":"Libraries/JavaSwingLabel/#javaswinglabel","text":"Java Swing Label. UI element class: javax.swing.JLabel Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectLabelBehavior","title":"JavaSwingLabel"},{"location":"Libraries/JavaSwingLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/JavaSwingLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/JavaSwingList/","text":"JavaSwingList \u00b6 Java Swing List. UI element class: javax.swing.JList Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectListSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Getter Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingList"},{"location":"Libraries/JavaSwingList/#javaswinglist","text":"Java Swing List. UI element class: javax.swing.JList Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectListSelectableBehavior","title":"JavaSwingList"},{"location":"Libraries/JavaSwingList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/JavaSwingList/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/JavaSwingList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/JavaSwingList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/JavaSwingList/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/JavaSwingList/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/JavaSwingList/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/JavaSwingList/#selectedtext","text":"Text of the selected item in a single string. Getter Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/JavaSwingList/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/JavaSwingList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingList/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/JavaSwingList/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/JavaSwingList/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/JavaSwingList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/JavaSwingMenuBar/","text":"JavaSwingMenuBar \u00b6 Java Swing Menu Bar. UI element class: javax.swing.JMenuBar Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectMenuBarBehavior Action Summary \u00b6 Action Description DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item. Action Detail \u00b6 DoFullText \u00b6 Returns text representation of the menu or saves it to a file. DoFullText ( separator , filePath , append , includeSeparators ) Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended. Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result. Optional, Default: \"false\". Returns: number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise. DoGetSubmenuCount \u00b6 Gets the number of submenu items for a given menu path. DoGetSubmenuCount ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: number | boolean: Number of submenu items, 'false' otherwise. DoGetSubmenuProperty \u00b6 Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise. DoGetSubmenuText \u00b6 Gets submenu text. DoGetSubmenuText ( path , index , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu text, 'false' otherwise. DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingMenuBar"},{"location":"Libraries/JavaSwingMenuBar/#javaswingmenubar","text":"Java Swing Menu Bar. UI element class: javax.swing.JMenuBar Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectMenuBarBehavior","title":"JavaSwingMenuBar"},{"location":"Libraries/JavaSwingMenuBar/#action-summary","text":"Action Description DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/JavaSwingMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingMenuBar/#dofulltext","text":"Returns text representation of the menu or saves it to a file. DoFullText ( separator , filePath , append , includeSeparators ) Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended. Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result. Optional, Default: \"false\". Returns: number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenucount","text":"Gets the number of submenu items for a given menu path. DoGetSubmenuCount ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: number | boolean: Number of submenu items, 'false' otherwise.","title":"DoGetSubmenuCount"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenuproperty","text":"Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise.","title":"DoGetSubmenuProperty"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenutext","text":"Gets submenu text. DoGetSubmenuText ( path , index , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu text, 'false' otherwise.","title":"DoGetSubmenuText"},{"location":"Libraries/JavaSwingMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/JavaSwingPasswordField/","text":"JavaSwingPasswordField \u00b6 Java Swing Password Field. UI element class: javax.swing.JPasswordField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingPasswordField"},{"location":"Libraries/JavaSwingPasswordField/#javaswingpasswordfield","text":"Java Swing Password Field. UI element class: javax.swing.JPasswordField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior","title":"JavaSwingPasswordField"},{"location":"Libraries/JavaSwingPasswordField/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaSwingPasswordField/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingPasswordField/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingPasswordField/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/JavaSwingPasswordField/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaSwingPasswordField/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingPasswordField/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/JavaSwingPopupMenu/","text":"JavaSwingPopupMenu \u00b6 Java Swing Popup Menu. UI element class: javax.swing.JPopupMenu Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectPopupSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingPopupMenu"},{"location":"Libraries/JavaSwingPopupMenu/#javaswingpopupmenu","text":"Java Swing Popup Menu. UI element class: javax.swing.JPopupMenu Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectPopupSelectableBehavior","title":"JavaSwingPopupMenu"},{"location":"Libraries/JavaSwingPopupMenu/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex","title":"Property Summary"},{"location":"Libraries/JavaSwingPopupMenu/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingPopupMenu/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingPopupMenu/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/JavaSwingPopupMenu/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/JavaSwingPopupMenu/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/JavaSwingPopupMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingPopupMenu/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/JavaSwingProgressBar/","text":"JavaSwingProgressBar \u00b6 Java Swing Progress Bar. UI element class: javax.swing.JProgressBar Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"JavaSwingProgressBar"},{"location":"Libraries/JavaSwingProgressBar/#javaswingprogressbar","text":"Java Swing Progress Bar. UI element class: javax.swing.JProgressBar Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectProgressBarBehavior","title":"JavaSwingProgressBar"},{"location":"Libraries/JavaSwingProgressBar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaSwingProgressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingProgressBar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/JavaSwingProgressBar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/JavaSwingProgressBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaSwingRadioButton/","text":"JavaSwingRadioButton \u00b6 Java Swing Radio Button. UI element class: javax.swing.JRadioButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingRadioButton"},{"location":"Libraries/JavaSwingRadioButton/#javaswingradiobutton","text":"Java Swing Radio Button. UI element class: javax.swing.JRadioButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior","title":"JavaSwingRadioButton"},{"location":"Libraries/JavaSwingRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/JavaSwingRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/JavaSwingRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/JavaSwingRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/JavaSwingSlider/","text":"JavaSwingSlider \u00b6 Java Swing Slider. UI element class: javax.swing.JSlider Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"JavaSwingSlider"},{"location":"Libraries/JavaSwingSlider/#javaswingslider","text":"Java Swing Slider. UI element class: javax.swing.JSlider Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectProgressBarBehavior","title":"JavaSwingSlider"},{"location":"Libraries/JavaSwingSlider/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaSwingSlider/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingSlider/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/JavaSwingSlider/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/JavaSwingSlider/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaSwingTable/","text":"JavaSwingTable \u00b6 Java Swing Table. UI element class: javax.swing.JTable Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectTableBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Returns string of indexes delimited by separator or array of indexes of selected rows. GetSelectedRows Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell DoFullText Read and return full text contents of the table Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedCells \u00b6 Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separator Optional. cellSep string cell separator Optional. Type: string Accessors: GetSelectedCells SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedColumnCount \u00b6 Number of selected columns. Type: number Accessors: GetSelectedColumnCount SelectedColumns \u00b6 Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Returns string of indexes delimited by separator or array of indexes of selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoFullText \u00b6 Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise","title":"JavaSwingTable"},{"location":"Libraries/JavaSwingTable/#javaswingtable","text":"Java Swing Table. UI element class: javax.swing.JTable Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectTableBehavior","title":"JavaSwingTable"},{"location":"Libraries/JavaSwingTable/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Returns string of indexes delimited by separator or array of indexes of selected rows. GetSelectedRows Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/JavaSwingTable/#action-summary","text":"Action Description DoClickCell Clicks the specified cell DoFullText Read and return full text contents of the table","title":"Action Summary"},{"location":"Libraries/JavaSwingTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingTable/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/JavaSwingTable/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/JavaSwingTable/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/JavaSwingTable/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/JavaSwingTable/#selectedcells","text":"Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separator Optional. cellSep string cell separator Optional. Type: string Accessors: GetSelectedCells","title":"SelectedCells"},{"location":"Libraries/JavaSwingTable/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/JavaSwingTable/#selectedcolumncount","text":"Number of selected columns. Type: number Accessors: GetSelectedColumnCount","title":"SelectedColumnCount"},{"location":"Libraries/JavaSwingTable/#selectedcolumns","text":"Returns string of indexes delimited by separator or array of indexes of selected columns. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedColumns","title":"SelectedColumns"},{"location":"Libraries/JavaSwingTable/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/JavaSwingTable/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/JavaSwingTable/#selectedrows","text":"Returns string of indexes delimited by separator or array of indexes of selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows","title":"SelectedRows"},{"location":"Libraries/JavaSwingTable/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/JavaSwingTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingTable/#doclickcell","text":"Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/JavaSwingTable/#dofulltext","text":"Read and return full text contents of the table DoFullText () Returns: string | boolean: Full text of the table (may be very long!), 'false' otherwise","title":"DoFullText"},{"location":"Libraries/JavaSwingTextArea/","text":"JavaSwingTextArea \u00b6 Java Swing Text Area. UI element class: javax.swing.JTextArea Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingTextArea"},{"location":"Libraries/JavaSwingTextArea/#javaswingtextarea","text":"Java Swing Text Area. UI element class: javax.swing.JTextArea Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior","title":"JavaSwingTextArea"},{"location":"Libraries/JavaSwingTextArea/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaSwingTextArea/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingTextArea/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingTextArea/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/JavaSwingTextArea/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaSwingTextArea/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingTextArea/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/JavaSwingTextField/","text":"JavaSwingTextField \u00b6 Java Swing Text Field. UI element class: javax.swing.JTextField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingTextField"},{"location":"Libraries/JavaSwingTextField/#javaswingtextfield","text":"Java Swing Text Field. UI element class: javax.swing.JTextField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior","title":"JavaSwingTextField"},{"location":"Libraries/JavaSwingTextField/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaSwingTextField/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/JavaSwingTextField/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingTextField/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/JavaSwingTextField/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaSwingTextField/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingTextField/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/JavaSwingToggleButton/","text":"JavaSwingToggleButton \u00b6 Java Swing ToggleButton. UI element class: javax.swing.JToggleButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingToggleButton"},{"location":"Libraries/JavaSwingToggleButton/#javaswingtogglebutton","text":"Java Swing ToggleButton. UI element class: javax.swing.JToggleButton Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectCheckableBehavior","title":"JavaSwingToggleButton"},{"location":"Libraries/JavaSwingToggleButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/JavaSwingToggleButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/JavaSwingToggleButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingToggleButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/JavaSwingToggleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingToggleButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/JavaSwingTree/","text":"JavaSwingTree \u00b6 Java Swing Tree. UI element class: javax.swing.JTree Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectTreeBehavior Property Summary \u00b6 Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. Property Detail \u00b6 ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaSwingTree"},{"location":"Libraries/JavaSwingTree/#javaswingtree","text":"Java Swing Tree. UI element class: javax.swing.JTree Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaSwingObjectTreeBehavior","title":"JavaSwingTree"},{"location":"Libraries/JavaSwingTree/#property-summary","text":"Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected","title":"Property Summary"},{"location":"Libraries/JavaSwingTree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree.","title":"Action Summary"},{"location":"Libraries/JavaSwingTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaSwingTree/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/JavaSwingTree/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/JavaSwingTree/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/JavaSwingTree/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/JavaSwingTree/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/JavaSwingTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaSwingTree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/JavaSwingTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/JavaSwingTree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/JavaTextArea/","text":"JavaTextArea \u00b6 Java Text Area. UI element class: java.awt.TextArea Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaTextArea"},{"location":"Libraries/JavaTextArea/#javatextarea","text":"Java Text Area. UI element class: java.awt.TextArea Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior","title":"JavaTextArea"},{"location":"Libraries/JavaTextArea/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaTextArea/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/JavaTextArea/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaTextArea/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/JavaTextArea/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaTextArea/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaTextArea/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/JavaTextField/","text":"JavaTextField \u00b6 Java Text Field. UI element class: java.awt.TextField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"JavaTextField"},{"location":"Libraries/JavaTextField/#javatextfield","text":"Java Text Field. UI element class: java.awt.TextField Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: JavaObjectTextFieldBehavior","title":"JavaTextField"},{"location":"Libraries/JavaTextField/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/JavaTextField/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/JavaTextField/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/JavaTextField/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/JavaTextField/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/JavaTextField/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/JavaTextField/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/LWCheckbox/","text":"LWCheckbox \u00b6 Oracle Forms LWCheckbox. UI element class: oracle.ewt.lwAWT.LWCheckbox Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsCheckBehavior","title":"LWCheckbox"},{"location":"Libraries/LWCheckbox/#lwcheckbox","text":"Oracle Forms LWCheckbox. UI element class: oracle.ewt.lwAWT.LWCheckbox Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsCheckBehavior","title":"LWCheckbox"},{"location":"Libraries/LWTextComponent/","text":"LWTextComponent \u00b6 Oracle Forms LWTextComponent. UI element class: oracle.ewt.lwAWT.lwText.LWTextComponent Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val , bvalidate ) Parameters: Name Type Description val string Text value. bvalidate boolean Force validation of entered value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"LWTextComponent"},{"location":"Libraries/LWTextComponent/#lwtextcomponent","text":"Oracle Forms LWTextComponent. UI element class: oracle.ewt.lwAWT.lwText.LWTextComponent Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTextFieldBehavior","title":"LWTextComponent"},{"location":"Libraries/LWTextComponent/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/LWTextComponent/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/LWTextComponent/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/LWTextComponent/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/LWTextComponent/#value","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/LWTextComponent/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/LWTextComponent/#dosettext","text":"Sets text value of this object. DoSetText ( val , bvalidate ) Parameters: Name Type Description val string Text value. bvalidate boolean Force validation of entered value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/MSComCtlListView20WndClassRule/","text":"MSComCtlListView20WndClassRule \u00b6","title":"MSComCtlListView20WndClassRule"},{"location":"Libraries/MSComCtlListView20WndClassRule/#mscomctllistview20wndclassrule","text":"","title":"MSComCtlListView20WndClassRule"},{"location":"Libraries/MSComCtlSlider20/","text":"MSComCtlSlider20 \u00b6 ComCtl Slider Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlSlider20Behavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"MSComCtlSlider20"},{"location":"Libraries/MSComCtlSlider20/#mscomctlslider20","text":"ComCtl Slider Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlSlider20Behavior","title":"MSComCtlSlider20"},{"location":"Libraries/MSComCtlSlider20/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/MSComCtlSlider20/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MSComCtlSlider20/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/MSComCtlSlider20/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/MSComCtlSlider20/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/MSComCtlSlider20WndClassRule/","text":"MSComCtlSlider20WndClassRule \u00b6","title":"MSComCtlSlider20WndClassRule"},{"location":"Libraries/MSComCtlSlider20WndClassRule/#mscomctlslider20wndclassrule","text":"","title":"MSComCtlSlider20WndClassRule"},{"location":"Libraries/MSComCtlToolbar/","text":"MSComCtlToolbar \u00b6 Microsoft Windows Toolbar Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlToolbarBehavior Property Summary \u00b6 Property Description Getter Setter ItemCaption The caption of the button on the toolbar GetItemCaption ItemCount The number of the items in the toolbar GetItemCount ItemStyle The style of the button on the toolbar GetItemStyle ItemValue Returns 'true' if element with nameCaptionIndex has value GetItemValue Action Summary \u00b6 Action Description DoClickItem ClickItem DoSetCheck SetCheck Property Detail \u00b6 ItemCaption \u00b6 The caption of the button on the toolbar Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: string Accessors: GetItemCaption ItemCount \u00b6 The number of the items in the toolbar Type: number Accessors: GetItemCount ItemStyle \u00b6 The style of the button on the toolbar Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: number Accessors: GetItemStyle ItemValue \u00b6 Returns 'true' if element with nameCaptionIndex has value Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: boolean Accessors: GetItemValue Action Detail \u00b6 DoClickItem \u00b6 ClickItem DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 SetCheck DoSetCheck ( bcheck , nameCaptionIndex ) Parameters: Name Type Description bcheck boolean Check state to set nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if success, 'false' otherwise.","title":"MSComCtlToolbar"},{"location":"Libraries/MSComCtlToolbar/#mscomctltoolbar","text":"Microsoft Windows Toolbar Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlToolbarBehavior","title":"MSComCtlToolbar"},{"location":"Libraries/MSComCtlToolbar/#property-summary","text":"Property Description Getter Setter ItemCaption The caption of the button on the toolbar GetItemCaption ItemCount The number of the items in the toolbar GetItemCount ItemStyle The style of the button on the toolbar GetItemStyle ItemValue Returns 'true' if element with nameCaptionIndex has value GetItemValue","title":"Property Summary"},{"location":"Libraries/MSComCtlToolbar/#action-summary","text":"Action Description DoClickItem ClickItem DoSetCheck SetCheck","title":"Action Summary"},{"location":"Libraries/MSComCtlToolbar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MSComCtlToolbar/#itemcaption","text":"The caption of the button on the toolbar Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: string Accessors: GetItemCaption","title":"ItemCaption"},{"location":"Libraries/MSComCtlToolbar/#itemcount","text":"The number of the items in the toolbar Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/MSComCtlToolbar/#itemstyle","text":"The style of the button on the toolbar Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: number Accessors: GetItemStyle","title":"ItemStyle"},{"location":"Libraries/MSComCtlToolbar/#itemvalue","text":"Returns 'true' if element with nameCaptionIndex has value Getter Parameters: Name Type Description nameCaptionIndex number | string Index, name or caption of the item. Type: boolean Accessors: GetItemValue","title":"ItemValue"},{"location":"Libraries/MSComCtlToolbar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/MSComCtlToolbar/#doclickitem","text":"ClickItem DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/MSComCtlToolbar/#dosetcheck","text":"SetCheck DoSetCheck ( bcheck , nameCaptionIndex ) Parameters: Name Type Description bcheck boolean Check state to set nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/MSComCtlTreeView20/","text":"MSComCtlTreeView20 \u00b6 ComCtl TreeView20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlTreeView20Behavior Property Summary \u00b6 Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node Property Detail \u00b6 Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected Text \u00b6 ;-combined text of all selected nodes. Type: string Accessors: GetText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"MSComCtlTreeView20"},{"location":"Libraries/MSComCtlTreeView20/#mscomctltreeview20","text":"ComCtl TreeView20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlTreeView20Behavior","title":"MSComCtlTreeView20"},{"location":"Libraries/MSComCtlTreeView20/#property-summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText","title":"Property Summary"},{"location":"Libraries/MSComCtlTreeView20/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node","title":"Action Summary"},{"location":"Libraries/MSComCtlTreeView20/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MSComCtlTreeView20/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/MSComCtlTreeView20/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/MSComCtlTreeView20/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/MSComCtlTreeView20/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/MSComCtlTreeView20/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/MSComCtlTreeView20/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/MSComCtlTreeView20/#text","text":";-combined text of all selected nodes. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/MSComCtlTreeView20/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/MSComCtlTreeView20/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/MSComCtlTreeView20/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/MSComCtlTreeView20/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/MSComCtlTreeView20/#dosetcheck","text":"Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/MSComCtlTreeView20WndClassRule/","text":"MSComCtlTreeView20WndClassRule \u00b6","title":"MSComCtlTreeView20WndClassRule"},{"location":"Libraries/MSComCtlTreeView20WndClassRule/#mscomctltreeview20wndclassrule","text":"","title":"MSComCtlTreeView20WndClassRule"},{"location":"Libraries/MSComList/","text":"MSComList \u00b6 ComCtl ListView20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlListView20Behavior Property Summary \u00b6 Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked ItemCount Number of items. GetItemCount ItemSelected Check if item is selected. GetItemSelected Action Summary \u00b6 Action Description DoCheckItem Checks items of this object. DoClickItem Clicks the specified item DoSelectItem Selects items of this object. Property Detail \u00b6 ItemChecked \u00b6 Check if item is checked. Getter Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. Type: boolean Accessors: GetItemChecked ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemSelected \u00b6 Check if item is selected. Getter Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. Type: boolean Accessors: GetItemSelected Action Detail \u00b6 DoCheckItem \u00b6 Checks items of this object. DoCheckItem ( nameCaptionIndex , bCheck ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. bCheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks the specified item DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( nameCaptionIndex , bSelect ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. bSelect boolean Desired selected state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"MSComList"},{"location":"Libraries/MSComList/#mscomlist","text":"ComCtl ListView20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSComCtlListView20Behavior","title":"MSComList"},{"location":"Libraries/MSComList/#property-summary","text":"Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked ItemCount Number of items. GetItemCount ItemSelected Check if item is selected. GetItemSelected","title":"Property Summary"},{"location":"Libraries/MSComList/#action-summary","text":"Action Description DoCheckItem Checks items of this object. DoClickItem Clicks the specified item DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/MSComList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MSComList/#itemchecked","text":"Check if item is checked. Getter Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. Type: boolean Accessors: GetItemChecked","title":"ItemChecked"},{"location":"Libraries/MSComList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/MSComList/#itemselected","text":"Check if item is selected. Getter Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. Type: boolean Accessors: GetItemSelected","title":"ItemSelected"},{"location":"Libraries/MSComList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/MSComList/#docheckitem","text":"Checks items of this object. DoCheckItem ( nameCaptionIndex , bCheck ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. bCheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCheckItem"},{"location":"Libraries/MSComList/#doclickitem","text":"Clicks the specified item DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/MSComList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( nameCaptionIndex , bSelect ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. bSelect boolean Desired selected state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/MSFlexGrid/","text":"MSFlexGrid \u00b6 MSFLexGrid Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSFlexGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the table. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"MSFlexGrid"},{"location":"Libraries/MSFlexGrid/#msflexgrid","text":"MSFLexGrid Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: MSFlexGridBehavior","title":"MSFlexGrid"},{"location":"Libraries/MSFlexGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/MSFlexGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/MSFlexGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MSFlexGrid/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/MSFlexGrid/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/MSFlexGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/MSFlexGrid/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/MSFlexGrid/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/MSFlexGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/MSFlexGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/MSFlexGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/MSFlexGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/MSFlexGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/MSFlexGrid/#dofulltext","text":"Returns text representation of the table. DoFullText () Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/MSFlexGridWndClassRule/","text":"MSFlexGridWndClassRule \u00b6","title":"MSFlexGridWndClassRule"},{"location":"Libraries/MSFlexGridWndClassRule/#msflexgridwndclassrule","text":"","title":"MSFlexGridWndClassRule"},{"location":"Libraries/ManagedButton/","text":"ManagedButton \u00b6 Managed Button. UI element class: System.Windows.Forms.Button Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"ManagedButton"},{"location":"Libraries/ManagedButton/#managedbutton","text":"Managed Button. UI element class: System.Windows.Forms.Button Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"ManagedButton"},{"location":"Libraries/ManagedCheckBox/","text":"ManagedCheckBox \u00b6 Managed CheckBox. UI element class: System.Windows.Forms.CheckBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedCheckBox"},{"location":"Libraries/ManagedCheckBox/#managedcheckbox","text":"Managed CheckBox. UI element class: System.Windows.Forms.CheckBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"ManagedCheckBox"},{"location":"Libraries/ManagedCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/ManagedCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/ManagedCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/ManagedCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/ManagedCheckedListBox/","text":"ManagedCheckedListBox \u00b6 Managed Checked ListBox. UI element class: System.Windows.Forms.CheckedListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckedListBoxSelectableBehavior Property Summary \u00b6 Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node. Property Detail \u00b6 CheckedCount \u00b6 Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount CheckedIndices \u00b6 Array of indices of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedIndices CheckedItems \u00b6 Array of item names of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedItems ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCheckItem \u00b6 Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedCheckedListBox"},{"location":"Libraries/ManagedCheckedListBox/#managedcheckedlistbox","text":"Managed Checked ListBox. UI element class: System.Windows.Forms.CheckedListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckedListBoxSelectableBehavior","title":"ManagedCheckedListBox"},{"location":"Libraries/ManagedCheckedListBox/#property-summary","text":"Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/ManagedCheckedListBox/#action-summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node.","title":"Action Summary"},{"location":"Libraries/ManagedCheckedListBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedCheckedListBox/#checkedcount","text":"Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount","title":"CheckedCount"},{"location":"Libraries/ManagedCheckedListBox/#checkedindices","text":"Array of indices of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedIndices","title":"CheckedIndices"},{"location":"Libraries/ManagedCheckedListBox/#checkeditems","text":"Array of item names of checked elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetCheckedItems","title":"CheckedItems"},{"location":"Libraries/ManagedCheckedListBox/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/ManagedCheckedListBox/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/ManagedCheckedListBox/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/ManagedCheckedListBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/ManagedCheckedListBox/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/ManagedCheckedListBox/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/ManagedCheckedListBox/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/ManagedCheckedListBox/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/ManagedCheckedListBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedCheckedListBox/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/ManagedCheckedListBox/#docheckitem","text":"Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCheckItem"},{"location":"Libraries/ManagedCheckedListBox/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/ManagedCheckedListBox/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/ManagedCheckedListBox/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/ManagedCheckedListBox/#dosetcheck","text":"Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/ManagedComboBox/","text":"ManagedComboBox \u00b6 Managed ComboBox. UI element class: System.Windows.Forms.ComboBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectSelectableBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedComboBox"},{"location":"Libraries/ManagedComboBox/#managedcombobox","text":"Managed ComboBox. UI element class: System.Windows.Forms.ComboBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectSelectableBehavior","title":"ManagedComboBox"},{"location":"Libraries/ManagedComboBox/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText","title":"Property Summary"},{"location":"Libraries/ManagedComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/ManagedComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedComboBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/ManagedComboBox/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/ManagedComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior","title":"DoSelectItem"},{"location":"Libraries/ManagedComboBox/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/ManagedComboBox/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/ManagedComboBox/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/ManagedComboBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/ManagedComboBox/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/ManagedComboBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/ManagedDataGridView/","text":"ManagedDataGridView \u00b6 Managed DataGridView. UI element class: System.Windows.Forms.DataGridView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedDataGridViewBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"ManagedDataGridView"},{"location":"Libraries/ManagedDataGridView/#manageddatagridview","text":"Managed DataGridView. UI element class: System.Windows.Forms.DataGridView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedDataGridViewBehavior","title":"ManagedDataGridView"},{"location":"Libraries/ManagedDataGridView/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/ManagedDataGridView/#action-summary","text":"Action Description DoClickCell Clicks the specified cell","title":"Action Summary"},{"location":"Libraries/ManagedDataGridView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedDataGridView/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/ManagedDataGridView/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/ManagedDataGridView/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/ManagedDataGridView/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/ManagedDataGridView/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/ManagedDataGridView/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/ManagedDataGridView/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/ManagedDataGridView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedDataGridView/#doclickcell","text":"Clicks the specified cell DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/ManagedLabel/","text":"ManagedLabel \u00b6 Managed Label. UI element class: System.Windows.Forms.Label Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedLabel"},{"location":"Libraries/ManagedLabel/#managedlabel","text":"Managed Label. UI element class: System.Windows.Forms.Label Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"ManagedLabel"},{"location":"Libraries/ManagedLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/ManagedLabel/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/ManagedLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/ManagedLabel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedLabel/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/ManagedLinkLabel/","text":"ManagedLinkLabel \u00b6 Managed Link Label. UI element class: System.Windows.Forms.LinkLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedLinkLabel"},{"location":"Libraries/ManagedLinkLabel/#managedlinklabel","text":"Managed Link Label. UI element class: System.Windows.Forms.LinkLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"ManagedLinkLabel"},{"location":"Libraries/ManagedLinkLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/ManagedLinkLabel/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/ManagedLinkLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedLinkLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/ManagedLinkLabel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedLinkLabel/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/ManagedListBox/","text":"ManagedListBox \u00b6 Managed ListBox. UI element class: System.Windows.Forms.ListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedListBox"},{"location":"Libraries/ManagedListBox/#managedlistbox","text":"Managed ListBox. UI element class: System.Windows.Forms.ListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior","title":"ManagedListBox"},{"location":"Libraries/ManagedListBox/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/ManagedListBox/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/ManagedListBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedListBox/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/ManagedListBox/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/ManagedListBox/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/ManagedListBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/ManagedListBox/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/ManagedListBox/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/ManagedListBox/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/ManagedListBox/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/ManagedListBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedListBox/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/ManagedListBox/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/ManagedListBox/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/ManagedListBox/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/ManagedListView/","text":"ManagedListView \u00b6 Managed ListView. UI element class: System.Windows.Forms.ListView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListViewSelectableBehavior Property Summary \u00b6 Property Description Getter Setter CheckBoxes Returns true if items have checkboxes near them. GetCheckBoxes CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetCheckedIndices ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoClickItem Clicks the specified item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node. Property Detail \u00b6 CheckBoxes \u00b6 Returns true if items have checkboxes near them. Type: boolean Accessors: GetCheckBoxes CheckedCount \u00b6 Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount CheckedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetCheckedIndices ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCheckItem \u00b6 Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks the specified item DoClickItem ( nameCaptionIndex , clickType , nSkipFirst , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". nSkipFirst number Index in the array if item is searched by name or regexp the text found several times. Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedListView"},{"location":"Libraries/ManagedListView/#managedlistview","text":"Managed ListView. UI element class: System.Windows.Forms.ListView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListViewSelectableBehavior","title":"ManagedListView"},{"location":"Libraries/ManagedListView/#property-summary","text":"Property Description Getter Setter CheckBoxes Returns true if items have checkboxes near them. GetCheckBoxes CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetCheckedIndices ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/ManagedListView/#action-summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoClickItem Clicks the specified item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node.","title":"Action Summary"},{"location":"Libraries/ManagedListView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedListView/#checkboxes","text":"Returns true if items have checkboxes near them. Type: boolean Accessors: GetCheckBoxes","title":"CheckBoxes"},{"location":"Libraries/ManagedListView/#checkedcount","text":"Returns number of checked items in ListView. Type: number Accessors: GetCheckedCount","title":"CheckedCount"},{"location":"Libraries/ManagedListView/#checkedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetCheckedIndices","title":"CheckedIndices"},{"location":"Libraries/ManagedListView/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/ManagedListView/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/ManagedListView/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/ManagedListView/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/ManagedListView/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/ManagedListView/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/ManagedListView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedListView/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/ManagedListView/#docheckitem","text":"Checks items of this object. DoCheckItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCheckItem"},{"location":"Libraries/ManagedListView/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/ManagedListView/#doclickitem","text":"Clicks the specified item DoClickItem ( nameCaptionIndex , clickType , nSkipFirst , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". nSkipFirst number Index in the array if item is searched by name or regexp the text found several times. Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/ManagedListView/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/ManagedListView/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/ManagedListView/#dosetcheck","text":"Sets 'checked' state of the specified node. DoSetCheck ( bcheck , items , separator , itemsType ) Parameters: Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/ManagedMenuPopupItem/","text":"ManagedMenuPopupItem \u00b6 Managed MenuPopupItem. UI element class: System.Windows.Forms.ToolStripDropDown Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedMenuItemBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedMenuPopupItem"},{"location":"Libraries/ManagedMenuPopupItem/#managedmenupopupitem","text":"Managed MenuPopupItem. UI element class: System.Windows.Forms.ToolStripDropDown Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedMenuItemBehavior","title":"ManagedMenuPopupItem"},{"location":"Libraries/ManagedMenuPopupItem/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/ManagedMenuPopupItem/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedMenuPopupItem/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/ManagedMenuStrip/","text":"ManagedMenuStrip \u00b6 Managed MenuStrip. UI element class: System.Windows.Forms.MenuStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedMenuBehavior Property Summary \u00b6 Property Description Getter Setter IsEnabled Checks if given menu item is enabled. GetIsEnabled Action Summary \u00b6 Action Description DoClickItem Perform Click on the navigation item DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item. Property Detail \u00b6 IsEnabled \u00b6 Checks if given menu item is enabled. Getter Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: boolean Accessors: GetIsEnabled Action Detail \u00b6 DoClickItem \u00b6 Perform Click on the navigation item DoClickItem ( menuItemName ) Parameters: Name Type Description menuItemName string Name of MenuStip's item to click Returns: boolean: 'true' if success, 'false' otherwise. DoFullText \u00b6 Returns text representation of the menu or saves it to a file. DoFullText ( separator , filePath , append , includeSeparators ) Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended. Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result. Optional, Default: \"false\". Returns: number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise. DoGetSubmenuCount \u00b6 Gets the number of submenu items for a given menu path. DoGetSubmenuCount ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: number | boolean: Number of submenu items, 'false' otherwise. DoGetSubmenuProperty \u00b6 Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise. DoGetSubmenuText \u00b6 Gets submenu text. DoGetSubmenuText ( path , index , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu text, 'false' otherwise. DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedMenuStrip"},{"location":"Libraries/ManagedMenuStrip/#managedmenustrip","text":"Managed MenuStrip. UI element class: System.Windows.Forms.MenuStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedMenuBehavior","title":"ManagedMenuStrip"},{"location":"Libraries/ManagedMenuStrip/#property-summary","text":"Property Description Getter Setter IsEnabled Checks if given menu item is enabled. GetIsEnabled","title":"Property Summary"},{"location":"Libraries/ManagedMenuStrip/#action-summary","text":"Action Description DoClickItem Perform Click on the navigation item DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/ManagedMenuStrip/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedMenuStrip/#isenabled","text":"Checks if given menu item is enabled. Getter Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: boolean Accessors: GetIsEnabled","title":"IsEnabled"},{"location":"Libraries/ManagedMenuStrip/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedMenuStrip/#doclickitem","text":"Perform Click on the navigation item DoClickItem ( menuItemName ) Parameters: Name Type Description menuItemName string Name of MenuStip's item to click Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/ManagedMenuStrip/#dofulltext","text":"Returns text representation of the menu or saves it to a file. DoFullText ( separator , filePath , append , includeSeparators ) Parameters: Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended. Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result. Optional, Default: \"false\". Returns: number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenucount","text":"Gets the number of submenu items for a given menu path. DoGetSubmenuCount ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: number | boolean: Number of submenu items, 'false' otherwise.","title":"DoGetSubmenuCount"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenuproperty","text":"Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise.","title":"DoGetSubmenuProperty"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenutext","text":"Gets submenu text. DoGetSubmenuText ( path , index , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu text, 'false' otherwise.","title":"DoGetSubmenuText"},{"location":"Libraries/ManagedMenuStrip/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/ManagedObject/","text":"ManagedObject \u00b6 Generic .NET Managed Object. UI element class: regex:.* Extends SeSSimulatedObject Behavior Pattern: ManagedObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Height \u00b6 Height of the object. Type: number Accessors: GetHeight Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByName \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"ManagedObject"},{"location":"Libraries/ManagedObject/#managedobject","text":"Generic .NET Managed Object. UI element class: regex:.* Extends SeSSimulatedObject Behavior Pattern: ManagedObjectGenericBehavior","title":"ManagedObject"},{"location":"Libraries/ManagedObject/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/ManagedObject/#action-summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/ManagedObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedObject/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/ManagedObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/ManagedObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/ManagedObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/ManagedObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/ManagedObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedObject/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/ManagedObject/#dofindbyname","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/ManagedObject/#dofindbytext","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/ManagedObject/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/ManagedPopupListBox/","text":"ManagedPopupListBox \u00b6 Managed ManagedPopupListBox. UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView+GridViewListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedPopupListBox"},{"location":"Libraries/ManagedPopupListBox/#managedpopuplistbox","text":"Managed ManagedPopupListBox. UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView+GridViewListBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior","title":"ManagedPopupListBox"},{"location":"Libraries/ManagedPopupListBox/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/ManagedPopupListBox/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/ManagedPopupListBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedPopupListBox/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/ManagedPopupListBox/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/ManagedPopupListBox/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/ManagedPopupListBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/ManagedPopupListBox/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/ManagedPopupListBox/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/ManagedPopupListBox/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/ManagedPopupListBox/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/ManagedPopupListBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedPopupListBox/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/ManagedPopupListBox/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/ManagedPopupListBox/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/ManagedPopupListBox/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/ManagedPropertyGrid/","text":"ManagedPropertyGrid \u00b6 Managed PropertyGrid. UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedPropertyGridBehavior Property Summary \u00b6 Property Description Getter Setter Expanded True if selected item is expanded GetExpanded SelectedItem Returns the structure with label, value, expanded fields GetSelectedItem SelectedLabel Label of the selected item. GetSelectedLabel SelectedText Text of the selected item. GetSelectedText VisibleRowCount Number of visible rows GetVisibleRowCount Action Summary \u00b6 Action Description DoCollapse Collapses an item of this object. DoExpand Expands an item of this object. DoSelectItem Selects an item of this object. DoSetValue Sets value of an grid item of this object. DoShowDropDown Show dropdown (or custom dialog) for an item. Property Detail \u00b6 Expanded \u00b6 True if selected item is expanded Type: boolean Accessors: GetExpanded SelectedItem \u00b6 Returns the structure with label, value, expanded fields Type: string Accessors: GetSelectedItem SelectedLabel \u00b6 Label of the selected item. Type: string Accessors: GetSelectedLabel SelectedText \u00b6 Text of the selected item. Type: string Accessors: GetSelectedText VisibleRowCount \u00b6 Number of visible rows Type: number Accessors: GetVisibleRowCount Action Detail \u00b6 DoCollapse \u00b6 Collapses an item of this object. DoCollapse ( val ) Parameters: Name Type Description val string | number name/index of the value to Collapse. Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands an item of this object. DoExpand ( val ) Parameters: Name Type Description val string | number name/index of the value to Expand. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( indexLabel ) Parameters: Name Type Description indexLabel string | number name/index of the value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetValue \u00b6 Sets value of an grid item of this object. DoSetValue ( label , val ) Parameters: Name Type Description label string | number Property grid row label or index val string | number value to set Returns: boolean: 'true' if success, 'false' otherwise. DoShowDropDown \u00b6 Show dropdown (or custom dialog) for an item. DoShowDropDown ( indexLabel ) Parameters: Name Type Description indexLabel string | number name/index of the item to show dropdown for. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedPropertyGrid"},{"location":"Libraries/ManagedPropertyGrid/#managedpropertygrid","text":"Managed PropertyGrid. UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedPropertyGridBehavior","title":"ManagedPropertyGrid"},{"location":"Libraries/ManagedPropertyGrid/#property-summary","text":"Property Description Getter Setter Expanded True if selected item is expanded GetExpanded SelectedItem Returns the structure with label, value, expanded fields GetSelectedItem SelectedLabel Label of the selected item. GetSelectedLabel SelectedText Text of the selected item. GetSelectedText VisibleRowCount Number of visible rows GetVisibleRowCount","title":"Property Summary"},{"location":"Libraries/ManagedPropertyGrid/#action-summary","text":"Action Description DoCollapse Collapses an item of this object. DoExpand Expands an item of this object. DoSelectItem Selects an item of this object. DoSetValue Sets value of an grid item of this object. DoShowDropDown Show dropdown (or custom dialog) for an item.","title":"Action Summary"},{"location":"Libraries/ManagedPropertyGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedPropertyGrid/#expanded","text":"True if selected item is expanded Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/ManagedPropertyGrid/#selecteditem","text":"Returns the structure with label, value, expanded fields Type: string Accessors: GetSelectedItem","title":"SelectedItem"},{"location":"Libraries/ManagedPropertyGrid/#selectedlabel","text":"Label of the selected item. Type: string Accessors: GetSelectedLabel","title":"SelectedLabel"},{"location":"Libraries/ManagedPropertyGrid/#selectedtext","text":"Text of the selected item. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/ManagedPropertyGrid/#visiblerowcount","text":"Number of visible rows Type: number Accessors: GetVisibleRowCount","title":"VisibleRowCount"},{"location":"Libraries/ManagedPropertyGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedPropertyGrid/#docollapse","text":"Collapses an item of this object. DoCollapse ( val ) Parameters: Name Type Description val string | number name/index of the value to Collapse. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/ManagedPropertyGrid/#doexpand","text":"Expands an item of this object. DoExpand ( val ) Parameters: Name Type Description val string | number name/index of the value to Expand. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/ManagedPropertyGrid/#doselectitem","text":"Selects an item of this object. DoSelectItem ( indexLabel ) Parameters: Name Type Description indexLabel string | number name/index of the value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/ManagedPropertyGrid/#dosetvalue","text":"Sets value of an grid item of this object. DoSetValue ( label , val ) Parameters: Name Type Description label string | number Property grid row label or index val string | number value to set Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetValue"},{"location":"Libraries/ManagedPropertyGrid/#doshowdropdown","text":"Show dropdown (or custom dialog) for an item. DoShowDropDown ( indexLabel ) Parameters: Name Type Description indexLabel string | number name/index of the item to show dropdown for. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoShowDropDown"},{"location":"Libraries/ManagedRadioButton/","text":"ManagedRadioButton \u00b6 Managed Radio Button. UI element class: System.Windows.Forms.RadioButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedRadioButton"},{"location":"Libraries/ManagedRadioButton/#managedradiobutton","text":"Managed Radio Button. UI element class: System.Windows.Forms.RadioButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"ManagedRadioButton"},{"location":"Libraries/ManagedRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/ManagedRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/ManagedRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/ManagedRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/ManagedStatusBar/","text":"ManagedStatusBar \u00b6 Managed Status Bar. UI element class: System.Windows.Forms.StatusStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedStatusBarBehavior Property Summary \u00b6 Property Description Getter Setter Text Status Bar Text. GetText Property Detail \u00b6 Text \u00b6 Status Bar Text. Getter Parameters: Name Type Description ind number Status bar section index. If not specified, the text of all sections is combined with ';' as a separator. Optional. Type: string Accessors: GetText","title":"ManagedStatusBar"},{"location":"Libraries/ManagedStatusBar/#managedstatusbar","text":"Managed Status Bar. UI element class: System.Windows.Forms.StatusStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedStatusBarBehavior","title":"ManagedStatusBar"},{"location":"Libraries/ManagedStatusBar/#property-summary","text":"Property Description Getter Setter Text Status Bar Text. GetText","title":"Property Summary"},{"location":"Libraries/ManagedStatusBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedStatusBar/#text","text":"Status Bar Text. Getter Parameters: Name Type Description ind number Status bar section index. If not specified, the text of all sections is combined with ';' as a separator. Optional. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/ManagedTextBox/","text":"ManagedTextBox \u00b6 Managed Text Editor. UI element class: System.Windows.Forms.TextBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedTextBox"},{"location":"Libraries/ManagedTextBox/#managedtextbox","text":"Managed Text Editor. UI element class: System.Windows.Forms.TextBox Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"ManagedTextBox"},{"location":"Libraries/ManagedTextBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/ManagedTextBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/ManagedTextBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedTextBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/ManagedTextBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedTextBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/ManagedTreeView/","text":"ManagedTreeView \u00b6 Managed TreeView. UI element class: System.Windows.Forms.TreeView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTreeViewBehavior Property Summary \u00b6 Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node Property Detail \u00b6 Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected Text \u00b6 ;-combined text of all selected nodes. Type: string Accessors: GetText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"ManagedTreeView"},{"location":"Libraries/ManagedTreeView/#managedtreeview","text":"Managed TreeView. UI element class: System.Windows.Forms.TreeView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTreeViewBehavior","title":"ManagedTreeView"},{"location":"Libraries/ManagedTreeView/#property-summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText","title":"Property Summary"},{"location":"Libraries/ManagedTreeView/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node","title":"Action Summary"},{"location":"Libraries/ManagedTreeView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ManagedTreeView/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/ManagedTreeView/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/ManagedTreeView/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/ManagedTreeView/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/ManagedTreeView/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/ManagedTreeView/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/ManagedTreeView/#text","text":";-combined text of all selected nodes. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/ManagedTreeView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ManagedTreeView/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/ManagedTreeView/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/ManagedTreeView/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/ManagedTreeView/#dosetcheck","text":"Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/Map/","text":"Map Object \u00b6 Represents an RVL Map object and all its operations. The same operations are used by the RVL runtime implicitly to read the cell value or iterate through the Map. Actions \u00b6 DoMoveToRow \u00b6 DoMoveToRow ( /**number*/ rowInd ) Moves to the row with a given index. Zero-based. If map type is Rows then row with index 0 is the row with column names. rowInd : Row index (or name) to set active. DoSequential \u00b6 DoSequential () Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row which is considered to contain column names. When the end of the range is reached, DoSequential rewinds back to the first row in the range and returns false . Returns false if being called when active row is the last row or the spreadsheet is not attached, true - otherwise. DoMoveToColumn \u00b6 DoMoveToColumn ( /**number|string*/ colInd ) Moves to the column with a given index or name. Index is zero-based. If map type is Columns then column with index 0 is the column with row names. colInd : Column index (or name) to set active. DoMoveToFirstColumn \u00b6 DoMoveToFirstColumn () Moves to a first column with data in the map. If map type is Columns then first column index is 1, if map type is Rows then first column index is 0. DoMoveToFirstRow \u00b6 DoMoveToFirstRow () Moves to a first row with data in the map. If map type is Rows then first row index is 1, if map type is Columns then first row index is 0. DoMoveToLastColumn \u00b6 DoMoveToLastColumn () Moves to a last column in the map. DoMoveToLastRow \u00b6 DoMoveToLastRow () Moves to a last row in the map. Properties \u00b6 Cell \u00b6 GetCell ( /**number|string*/ columnId , /**number*/ rowId ) Gets a cell value by its coordinates. It returns the current cell value after DoSequential or DoRandom if the parameters are not set. [columnId] : Column index or name. If not set ActiveColumn is used. [rowId] : Row index. If not set ActiveRow is used. ColumnCell \u00b6 GetColumnCell ( /**number*/ rowId ) Gets cell value by its coordinates. Returns current cell value after DoSequential . If not set ActiveColumn is used. [rowId] : Row index. If not set ActiveRow is used. ColumnCount \u00b6 GetColumnCount () Returns number of columns in the spreadsheet. ColumnIndexByName \u00b6 GetColumnIndexByName ( /**string*/ name ) Gets index of a column with the given name. name : Column name. Returns column index if found, or -1. ColumnName \u00b6 GetColumnName ( /**number*/ ind ) Gets column name. ind : Column index. Returns name of column in the spreadsheet. RowCount \u00b6 GetRowCount () Returns number of rows in the spreadsheet. RowIndexByName \u00b6 GetRowIndexByName ( /**string*/ name ) Gets row name. name : Row name. Returns row index if found, or -1. CurrentRowIndex \u00b6 GetCurrentRowIndex () Gets zero based current row index. EOF \u00b6 GetEOF () Returns true if current position is beyond the map boundaries range. RowCell \u00b6 GetRowCell ( /**number|string*/ columnId ) Gets cell value for current row. Returns current cell value after DoSequential . ActiveRow is used. [columnId] : Column index or name. If not set ActiveColumn is used. RowName \u00b6 GetRowName ( /**number*/ ind ) Gets row name. ind : Row index. Returns name of row in the map. Value \u00b6 GetValue ( /**number|string*/ rowOrColumnNameOrId ) Gets cell value by its name or id. Returns current cell value after DoSequential . If it is Rows or Table map then the parameter needs to be a column name or index, and ActiveRow is used. If it is Columns map then the parameter needs to be a row name or index, and ActiveRow is used. [rowOrColumnNameOrId] : Row or Column index or Name.","title":"Map Object"},{"location":"Libraries/Map/#map-object","text":"Represents an RVL Map object and all its operations. The same operations are used by the RVL runtime implicitly to read the cell value or iterate through the Map.","title":"Map Object"},{"location":"Libraries/Map/#actions","text":"","title":"Actions"},{"location":"Libraries/Map/#domovetorow","text":"DoMoveToRow ( /**number*/ rowInd ) Moves to the row with a given index. Zero-based. If map type is Rows then row with index 0 is the row with column names. rowInd : Row index (or name) to set active.","title":"DoMoveToRow"},{"location":"Libraries/Map/#dosequential","text":"DoSequential () Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row which is considered to contain column names. When the end of the range is reached, DoSequential rewinds back to the first row in the range and returns false . Returns false if being called when active row is the last row or the spreadsheet is not attached, true - otherwise.","title":"DoSequential"},{"location":"Libraries/Map/#domovetocolumn","text":"DoMoveToColumn ( /**number|string*/ colInd ) Moves to the column with a given index or name. Index is zero-based. If map type is Columns then column with index 0 is the column with row names. colInd : Column index (or name) to set active.","title":"DoMoveToColumn"},{"location":"Libraries/Map/#domovetofirstcolumn","text":"DoMoveToFirstColumn () Moves to a first column with data in the map. If map type is Columns then first column index is 1, if map type is Rows then first column index is 0.","title":"DoMoveToFirstColumn"},{"location":"Libraries/Map/#domovetofirstrow","text":"DoMoveToFirstRow () Moves to a first row with data in the map. If map type is Rows then first row index is 1, if map type is Columns then first row index is 0.","title":"DoMoveToFirstRow"},{"location":"Libraries/Map/#domovetolastcolumn","text":"DoMoveToLastColumn () Moves to a last column in the map.","title":"DoMoveToLastColumn"},{"location":"Libraries/Map/#domovetolastrow","text":"DoMoveToLastRow () Moves to a last row in the map.","title":"DoMoveToLastRow"},{"location":"Libraries/Map/#properties","text":"","title":"Properties"},{"location":"Libraries/Map/#cell","text":"GetCell ( /**number|string*/ columnId , /**number*/ rowId ) Gets a cell value by its coordinates. It returns the current cell value after DoSequential or DoRandom if the parameters are not set. [columnId] : Column index or name. If not set ActiveColumn is used. [rowId] : Row index. If not set ActiveRow is used.","title":"Cell"},{"location":"Libraries/Map/#columncell","text":"GetColumnCell ( /**number*/ rowId ) Gets cell value by its coordinates. Returns current cell value after DoSequential . If not set ActiveColumn is used. [rowId] : Row index. If not set ActiveRow is used.","title":"ColumnCell"},{"location":"Libraries/Map/#columncount","text":"GetColumnCount () Returns number of columns in the spreadsheet.","title":"ColumnCount"},{"location":"Libraries/Map/#columnindexbyname","text":"GetColumnIndexByName ( /**string*/ name ) Gets index of a column with the given name. name : Column name. Returns column index if found, or -1.","title":"ColumnIndexByName"},{"location":"Libraries/Map/#columnname","text":"GetColumnName ( /**number*/ ind ) Gets column name. ind : Column index. Returns name of column in the spreadsheet.","title":"ColumnName"},{"location":"Libraries/Map/#rowcount","text":"GetRowCount () Returns number of rows in the spreadsheet.","title":"RowCount"},{"location":"Libraries/Map/#rowindexbyname","text":"GetRowIndexByName ( /**string*/ name ) Gets row name. name : Row name. Returns row index if found, or -1.","title":"RowIndexByName"},{"location":"Libraries/Map/#currentrowindex","text":"GetCurrentRowIndex () Gets zero based current row index.","title":"CurrentRowIndex"},{"location":"Libraries/Map/#eof","text":"GetEOF () Returns true if current position is beyond the map boundaries range.","title":"EOF"},{"location":"Libraries/Map/#rowcell","text":"GetRowCell ( /**number|string*/ columnId ) Gets cell value for current row. Returns current cell value after DoSequential . ActiveRow is used. [columnId] : Column index or name. If not set ActiveColumn is used.","title":"RowCell"},{"location":"Libraries/Map/#rowname","text":"GetRowName ( /**number*/ ind ) Gets row name. ind : Row index. Returns name of row in the map.","title":"RowName"},{"location":"Libraries/Map/#value","text":"GetValue ( /**number|string*/ rowOrColumnNameOrId ) Gets cell value by its name or id. Returns current cell value after DoSequential . If it is Rows or Table map then the parameter needs to be a column name or index, and ActiveRow is used. If it is Columns map then the parameter needs to be a row name or index, and ActiveRow is used. [rowOrColumnNameOrId] : Row or Column index or Name.","title":"Value"},{"location":"Libraries/MobileWebObject/","text":"MobileWebObject \u00b6 Web Mobile Object. Behavior Pattern: MobileWebObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType Type of the object. GetObjectType Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoDoubleClick Double clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoSendKeys Send a text to the object in character-by-character mode. Property Detail \u00b6 ChildAt \u00b6 Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt ChildCount \u00b6 Number of child items. Type: number Accessors: GetChildCount Class \u00b6 Class name of the object. Type: string Accessors: GetClass Height \u00b6 Height of the object. Type: number Accessors: GetHeight Name \u00b6 Name of the object. Type: string Accessors: GetName ObjectType \u00b6 Type of the object. Type: string Accessors: GetObjectType Property \u00b6 Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise. DoClear \u00b6 Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise. DoClick \u00b6 Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise. DoDoubleClick \u00b6 Double clicks in the middle of the control. DoDoubleClick () Returns: boolean: 'true' if success, 'false' otherwise. DoEnsureVisible \u00b6 Ensure that a child item with the specified text is visible on screen. DoEnsureVisible () Returns: boolean: 'true' if success, 'false' otherwise. DoSendKeys \u00b6 Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise.","title":"MobileWebObject"},{"location":"Libraries/MobileWebObject/#mobilewebobject","text":"Web Mobile Object. Behavior Pattern: MobileWebObjectGenericBehavior","title":"MobileWebObject"},{"location":"Libraries/MobileWebObject/#property-summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType Type of the object. GetObjectType Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/MobileWebObject/#action-summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoDoubleClick Double clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoSendKeys Send a text to the object in character-by-character mode.","title":"Action Summary"},{"location":"Libraries/MobileWebObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/MobileWebObject/#childat","text":"Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt","title":"ChildAt"},{"location":"Libraries/MobileWebObject/#childcount","text":"Number of child items. Type: number Accessors: GetChildCount","title":"ChildCount"},{"location":"Libraries/MobileWebObject/#class","text":"Class name of the object. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/MobileWebObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/MobileWebObject/#name","text":"Name of the object. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/MobileWebObject/#objecttype","text":"Type of the object. Type: string Accessors: GetObjectType","title":"ObjectType"},{"location":"Libraries/MobileWebObject/#property","text":"Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty","title":"Property"},{"location":"Libraries/MobileWebObject/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/MobileWebObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/MobileWebObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/MobileWebObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/MobileWebObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/MobileWebObject/#doaction","text":"Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAction"},{"location":"Libraries/MobileWebObject/#doclear","text":"Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClear"},{"location":"Libraries/MobileWebObject/#doclick","text":"Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClick"},{"location":"Libraries/MobileWebObject/#dodoubleclick","text":"Double clicks in the middle of the control. DoDoubleClick () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoDoubleClick"},{"location":"Libraries/MobileWebObject/#doensurevisible","text":"Ensure that a child item with the specified text is visible on screen. DoEnsureVisible () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoEnsureVisible"},{"location":"Libraries/MobileWebObject/#dosendkeys","text":"Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSendKeys"},{"location":"Libraries/NavButtonPad/","text":"NavButtonPad \u00b6 NavPOSControls NavButtonPad. UI element class: LSRetail.NAV.POSControls.ButtonPad Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: POSControlsButtonPadBehavior Property Summary \u00b6 Property Description Getter Setter ButtonCaption Caption of a button with specified index GetButtonCaption ColumnCount Number of columns on a page GetColumnCount FullInfo JSON-formatted info for all buttons GetFullInfo FullText TAB-separated table with button captions GetFullText PageCount Number of pages GetPageCount RowCount Number of rows on a page GetRowCount ToggleState ToggleState of the button GetToggleState Action Summary \u00b6 Action Description DoClick Click button by caption or no (1-based index) Property Detail \u00b6 ButtonCaption \u00b6 Caption of a button with specified index Getter Parameters: Name Type Description textOrId string | number button 'no' (1-based index) Type: string Accessors: GetButtonCaption ColumnCount \u00b6 Number of columns on a page Type: number Accessors: GetColumnCount FullInfo \u00b6 JSON-formatted info for all buttons Type: string Accessors: GetFullInfo FullText \u00b6 TAB-separated table with button captions Type: string Accessors: GetFullText PageCount \u00b6 Number of pages Type: number Accessors: GetPageCount RowCount \u00b6 Number of rows on a page Type: number Accessors: GetRowCount ToggleState \u00b6 ToggleState of the button Getter Parameters: Name Type Description textOrId string | number caption or 'no' (1-based index) Type: boolean Accessors: GetToggleState Action Detail \u00b6 DoClick \u00b6 Click button by caption or no (1-based index) DoClick ( textOrId , timeout ) Parameters: Name Type Description textOrId string | number caption or 'no' (1-based index) timeout number number of milliseconds to wait for a button to appear Optional, Default: \"5000\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"NavButtonPad"},{"location":"Libraries/NavButtonPad/#navbuttonpad","text":"NavPOSControls NavButtonPad. UI element class: LSRetail.NAV.POSControls.ButtonPad Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: POSControlsButtonPadBehavior","title":"NavButtonPad"},{"location":"Libraries/NavButtonPad/#property-summary","text":"Property Description Getter Setter ButtonCaption Caption of a button with specified index GetButtonCaption ColumnCount Number of columns on a page GetColumnCount FullInfo JSON-formatted info for all buttons GetFullInfo FullText TAB-separated table with button captions GetFullText PageCount Number of pages GetPageCount RowCount Number of rows on a page GetRowCount ToggleState ToggleState of the button GetToggleState","title":"Property Summary"},{"location":"Libraries/NavButtonPad/#action-summary","text":"Action Description DoClick Click button by caption or no (1-based index)","title":"Action Summary"},{"location":"Libraries/NavButtonPad/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/NavButtonPad/#buttoncaption","text":"Caption of a button with specified index Getter Parameters: Name Type Description textOrId string | number button 'no' (1-based index) Type: string Accessors: GetButtonCaption","title":"ButtonCaption"},{"location":"Libraries/NavButtonPad/#columncount","text":"Number of columns on a page Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/NavButtonPad/#fullinfo","text":"JSON-formatted info for all buttons Type: string Accessors: GetFullInfo","title":"FullInfo"},{"location":"Libraries/NavButtonPad/#fulltext","text":"TAB-separated table with button captions Type: string Accessors: GetFullText","title":"FullText"},{"location":"Libraries/NavButtonPad/#pagecount","text":"Number of pages Type: number Accessors: GetPageCount","title":"PageCount"},{"location":"Libraries/NavButtonPad/#rowcount","text":"Number of rows on a page Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/NavButtonPad/#togglestate","text":"ToggleState of the button Getter Parameters: Name Type Description textOrId string | number caption or 'no' (1-based index) Type: boolean Accessors: GetToggleState","title":"ToggleState"},{"location":"Libraries/NavButtonPad/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/NavButtonPad/#doclick","text":"Click button by caption or no (1-based index) DoClick ( textOrId , timeout ) Parameters: Name Type Description textOrId string | number caption or 'no' (1-based index) timeout number number of milliseconds to wait for a button to appear Optional, Default: \"5000\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClick"},{"location":"Libraries/Navigator/","text":"Navigator \u00b6 Navigator object. This is used to provide functions for manipulating the web browser when using the HTML libraries. Property Summary \u00b6 Property Description AutoOpen During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. EnsureVisibleHorizontalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". EnsureVisibleVerticalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". NativeEvents Set it to true to use native keyboard and mouse input. QuitIfNotConnected If connection to browser fails - open plugin page and quit. Action Summary \u00b6 Action Description CheckObjectExists Checks if object is found on the screen by its id or XPath. CheckObjectVisible Checks if object is visible on the screen by its id or XPath. Close Closes browser. Detach Disconnects from a browser. DoActivateWindow Makes specified browser window active and focused. DoCheckAlert Waits until browser alert with a given text. DoCheckConfirmation Waits until browser confirmation with a given text. DoCheckPrompt Waits until browser prompt with a given text. DoClickUntilOnScreen Clicks on a given element until another element appears on screen. DoClickWhileOnScreen Clicks on an element until it disappears. DoCloseTab Closes currently selected tab. DoCloseWindow Closes currently active browser window. DoCreateTab Creates new browser tab. DoCreateWindow Creates a new browser window. DOMFindByAttributeValue Looks for a web element by specific attribute value through all frames. DOMFindByName Looks for a web element by its name through all frames. DOMFindByText Looks for a web element by its text contents through all frames. DOMFindByXPath Looks for a web element by specific local XPath value through all frames. DoMoveWindow Sets the position of the active browser window. DOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoResizeWindow Sets size of the active browser window. DoScreenshot Makes screenshot of the browser window. DoSelectTab Selects browser tab by title or URL. DoSetExpectedConfirmResult Sets boolean value to return as a result of next browser confirm request. DoSetExpectedPromptResult Sets text to return as a result of next browser prompt request. DoWaitFor Waits for object to appear on screen. ExecJS Executes given JavaScript statement in a browser and returns results. ExecPageJS Executes given JavaScript statement in a browser in the context of the current page. Find Returns HTMLObject wrapping DOM element for a given xpath . GetActiveTabId Gets Id of active browser tab. GetActiveTabTitle Gets title of active browser tab. GetActiveTabUrl Gets URL of active browser tab. GetActiveWindowId Gets active browser window Id. GetActiveWindowTitle Gets active browser window title. GetActiveWindowUrl Gets active browser window URL. GetPerformance Reads performance information from currently used browser. GetPosition Gets position of the top-left corner of the browser window. GetSize Gets size of the browser window. GetTabIdAt Gets browser tab Id. GetTabIndexById Gets index of the browser tab by Id. GetTabsCount Gets number of browser tabs. GetTabTitleAt Gets browser tab title. GetTabUrlAt Gets browser tab URL. GetWindowIdAt Gets browser window Id. GetWindowsCount Gets the number of browser windows. GetWindowTitleAt Gets browser window title. GetWindowUrlAt Gets browser window URL. KillBrowser Kills the browser process. LaunchBrowser Launches browser, but does not connect to it. Maximize Maximizes browser window. Navigate Redirects browser to a specified URL. Open Opens a browser. SelectBrowserProfile Selects browser profile to use for testing. SeSFind Waits for object to appear on screen. SetPosition Positions top-left corner of the browser window at specifid location. SetSize Sets size if the browser window. Property Detail \u00b6 AutoOpen \u00b6 During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. If AutoOpen is 'false' it does nothing. Default value is 'true'. Applicable to Chrome, Firefox and Internet Explorer. Selenium targets are not affected by this property. Use Navigator.GetAutoOpen() to read the value and Navigator.SetAutoOpen(true|false) to set the value. Type: boolean EnsureVisibleHorizontalAlignment \u00b6 One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\". Type: string EnsureVisibleVerticalAlignment \u00b6 One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\". Type: string NativeEvents \u00b6 Set it to true to use native keyboard and mouse input. Overrides browser profile settings. Does not affect Selenium targets. Requires Rapise 6.3+ Type: boolean QuitIfNotConnected \u00b6 If connection to browser fails - open plugin page and quit. If set to 'false' - just return 'false' in Open call. Type: boolean Action Detail \u00b6 CheckObjectExists \u00b6 Checks if object is found on the screen by its id or XPath. CheckObjectExists ( xpathOrObjId ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". Returns: true if object exists, false otherwise. CheckObjectVisible \u00b6 Checks if object is visible on the screen by its id or XPath. CheckObjectVisible ( xpathOrObjId ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". Returns: true if object is visible, false otherwise. Close \u00b6 Closes browser. Finishes session. Close ( url ) Parameters: Name Type Description url string Not used - can leave empty. Returns true if the browser closed successfully, otherwise - false . Detach \u00b6 Disconnects from a browser. Make Navigator ready for a new browser instance connection. Detach () DoActivateWindow \u00b6 Makes specified browser window active and focused. Requires Rapise 6.5+ DoActivateWindow ( titleOrUrl ) Parameters: Name Type Description titleOrUrl string string or regex matching URL or window title. DoCheckAlert \u00b6 Waits until browser alert with a given text. Wait timeout is 10 seconds. DoCheckAlert ( msg ) Parameters: Name Type Description msg string Alert text. Can be exact text or regular expression. Returns: true if browser alert had occurred, false otherwise. DoCheckConfirmation \u00b6 Waits until browser confirmation with a given text. Wait timeout is 10 seconds. DoCheckConfirmation ( msg , result ) Parameters: Name Type Description msg string Confirmation text. Can be exact text or regular expression. result string Not used - can leave empty. Optional. Returns: true if browser confirmation popup is shown, false otherwise. DoCheckPrompt \u00b6 Waits until browser prompt with a given text. Wait timeout is 10 seconds. DoCheckPrompt ( msg , result ) Parameters: Name Type Description msg string Prompt text. Can be exact text or regular expression. result string Not used - can leave empty. Optional. Returns: true if browser prompt popup is shown, false otherwise. DoClickUntilOnScreen \u00b6 Clicks on a given element until another element appears on screen. Requires Rapise 6.3+ DoClickUntilOnScreen ( xpathOrObjIdToClick , xpathOrObjIdToExpect , attempts , delay , x , y , forceEvent ) Parameters: Name Type Description xpathOrObjIdToClick objectId Object Id or XPath of an element to click. xpathOrObjIdToExpect objectId Object Id or XPath of an element that should appear on screen. attempts number Max number of clicks. Default is 2. Optional. delay number Delay between attempts. Default is 1000 milliseconds. Optional. x number X-offset from the top-left corner of the object. Default is object width/2. Optional. y number Y-offset from the top-left corner of the object. Default is object height/2. Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings. Optional. Returns: expected object if successful, otherwise - null. DoClickWhileOnScreen \u00b6 Clicks on an element until it disappears. Requires Rapise 6.3+ DoClickWhileOnScreen ( xpathOrObjId , attempts , delay , x , y , forceEvent ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to click. attempts number Max number of clicks. Default is 2. Optional. delay number Delay between attempts. Default is 1000 milliseconds. Optional. x number X-offset from the top-left corner of the object. Default is object width/2. Optional. y number Y-offset from the top-left corner of the object. Default is object height/2. Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings. Optional. Returns: true if object disappeared, otherwise - false. DoCloseTab \u00b6 Closes currently selected tab. Requires Rapise 6.5+ DoCloseTab () DoCloseWindow \u00b6 Closes currently active browser window. Requires Rapise 6.5+ DoCloseWindow () DoCreateTab \u00b6 Creates new browser tab. Requires Rapise 6.5+ DoCreateTab ( url ) Parameters: Name Type Description url string new page URL DoCreateWindow \u00b6 Creates a new browser window. Requires Rapise 6.5+ DoCreateWindow ( url ) Parameters: Name Type Description url string page URL. DOMFindByAttributeValue \u00b6 Looks for a web element by specific attribute value through all frames. attrValue is checked against each element's attrName attribute. DOMFindByAttributeValue ( attrName , attrValue , tagName , findAll , timeout ) Parameters: Name Type Description attrName string Name of the attribute to check. May be @attr or attr . attrValue string Expected attribute value. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found). DOMFindByName \u00b6 Looks for a web element by its name through all frames. Name is checked against @name and @id attribute of each element DOMFindByName ( name , tagName , findAll , timeout ) Parameters: Name Type Description name string Expected element name to search for. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found). DOMFindByText \u00b6 Looks for a web element by its text contents through all frames. text is checked against each element text contents. DOMFindByText ( text , tagName , findAll , timeout ) Parameters: Name Type Description text string Expected text to search for. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found). DOMFindByXPath \u00b6 Looks for a web element by specific local XPath value through all frames. If XPath is local (i.e. //img) then search will be performed for all images in all nested frames. DOMFindByXPath ( xpath , findAll , timeout ) Parameters: Name Type Description xpath string Local XPath to execute for each frame. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found). DoMoveWindow \u00b6 Sets the position of the active browser window. Requires Rapise 6.5+ DoMoveWindow ( left , top ) Parameters: Name Type Description left number offset in pixels from the corner of the display. top number offset in pixels from the corner of the display. DOMQueryValue \u00b6 Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then null is returned. Requires Rapise 6.4+ DOMQueryValue ( xpathOrObjId , query ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading '.' or '/'. If the value is empty then this parameter defaults to /html . query string Absolute or relative xpath query. e.g. count(//div) , //a[1]/@href='/Home' , ./li/text() Returns: string | number | boolean: Result of the query or null in the case if the query is invalid or nothing matches. DoResizeWindow \u00b6 Sets size of the active browser window. Requires Rapise 6.5+ DoResizeWindow ( width , height ) Parameters: Name Type Description width number New width of the browser window in pixels. height number New height of the browser window in pixels. DoScreenshot \u00b6 Makes screenshot of the browser window. DoScreenshot ( fileName ) Parameters: Name Type Description fileName string Save the screenshot to a file if name is specified. Otherwise - add to report. Optional. DoSelectTab \u00b6 Selects browser tab by title or URL. Requires Rapise 6.5+ DoSelectTab ( titleOrUrl ) Parameters: Name Type Description titleOrUrl string string or regex matching tab URL or title. DoSetExpectedConfirmResult \u00b6 Sets boolean value to return as a result of next browser confirm request. DoSetExpectedConfirmResult ( expectedRes ) Parameters: Name Type Description expectedRes string The text to be returned in the next request. DoSetExpectedPromptResult \u00b6 Sets text to return as a result of next browser prompt request. DoSetExpectedPromptResult ( expectedRes ) Parameters: Name Type Description expectedRes string The text to be returned in the next request. DoWaitFor \u00b6 Waits for object to appear on screen. Requires Rapise 6.3+ DoWaitFor ( xpathOrObjId , timeout , params ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. timeout number Max time to wait. Default is 10000 milliseconds. Optional. params object Overrides locator options. Optional. Returns: found object, otherwise - false. ExecJS \u00b6 Executes given JavaScript statement in a browser and returns results. ExecJS ( scriptText , obj ) Parameters: Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. Reference it as el or arguments[0] . Optional. Returns: Result of code execution. ExecPageJS \u00b6 Executes given JavaScript statement in a browser in the context of the current page. It means the script may access JS variables and functions declared on the page. Requires Rapise 6.5+ ExecPageJS ( scriptText , obj ) Parameters: Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. The script will be executed in a frame, containing given obj. Optional. Returns: Result of code execution. Find \u00b6 Returns HTMLObject wrapping DOM element for a given xpath . Find ( xpath , url , title , objInfo ) Parameters: Name Type Description xpath string Location path of a DOM element. url string URL. If new Navigator is launched, the URL is used. Optional. title string The title of the HTML document that is being searched. objInfo SeSObjectInfo A populated SeSObjectInfo object. Returns: HTMLObject wrapping DOM element for a given xpath , null if xpath is invalid. GetActiveTabId \u00b6 Gets Id of active browser tab. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+ GetActiveTabId () GetActiveTabTitle \u00b6 Gets title of active browser tab. Requires Rapise 6.5+ GetActiveTabTitle () GetActiveTabUrl \u00b6 Gets URL of active browser tab. Requires Rapise 6.5+ GetActiveTabUrl () GetActiveWindowId \u00b6 Gets active browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+ GetActiveWindowId () GetActiveWindowTitle \u00b6 Gets active browser window title. Requires Rapise 6.5+ GetActiveWindowTitle () GetActiveWindowUrl \u00b6 Gets active browser window URL. Requires Rapise 6.5+ GetActiveWindowUrl ( index ) Parameters: Name Type Description index number GetPerformance \u00b6 Reads performance information from currently used browser. Performance numbers are based on output from window.performance structure of the web page. See also http://www.w3.org/TR/navigation-timing/#processing-model GetPerformance ( resources , dontWriteReport ) Parameters: Name Type Description resources boolean optional, bool. Set to true if you want to dump information about resource timing into the report Optional. dontWriteReport boolean optional, Set to true if you want just return page load time and write nothing to report Optional. Returns: number: page open time (in milliseconds) GetPosition \u00b6 Gets position of the top-left corner of the browser window. This function is DPI aware. GetPosition () Returns: object: {X, Y} GetSize \u00b6 Gets size of the browser window. This function is DPI aware. GetSize () Returns: object: {Width, Height} GetTabIdAt \u00b6 Gets browser tab Id. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+ GetTabIdAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount() GetTabIndexById \u00b6 Gets index of the browser tab by Id. Index may be used as param to GetTabIdAt/GetTabUrlAt/GetTabTitleAt. Requires Rapise 6.5+ GetTabIndexById ( tabId ) Parameters: Name Type Description tabId number GetTabsCount \u00b6 Gets number of browser tabs. Requires Rapise 6.5+ GetTabsCount () GetTabTitleAt \u00b6 Gets browser tab title. Requires Rapise 6.5+ GetTabTitleAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount() GetTabUrlAt \u00b6 Gets browser tab URL. Requires Rapise 6.5+ GetTabUrlAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount() GetWindowIdAt \u00b6 Gets browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+ GetWindowIdAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount() GetWindowsCount \u00b6 Gets the number of browser windows. Requires Rapise 6.5+ GetWindowsCount () GetWindowTitleAt \u00b6 Gets browser window title. Requires Rapise 6.5+ GetWindowTitleAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount() GetWindowUrlAt \u00b6 Gets browser window URL. Requires Rapise 6.5+ GetWindowUrlAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount() KillBrowser \u00b6 Kills the browser process. The browser to kill is detected from browser profile settings. Requires Rapise 6.4+ KillBrowser () LaunchBrowser \u00b6 Launches browser, but does not connect to it. Recommended for applications with basic authentication. Requires Rapise 6.5+ LaunchBrowser ( url ) Parameters: Name Type Description url Initial url, may be empty. Optional. Maximize \u00b6 Maximizes browser window. Maximize () Navigate \u00b6 Redirects browser to a specified URL. Navigate ( url ) Parameters: Name Type Description url string The URL to navigate to. Open \u00b6 Opens a browser. If URL is specified, goes to URL. Open ( url ) Parameters: Name Type Description url string Start URL for opening browser. Can be null . SelectBrowserProfile \u00b6 Selects browser profile to use for testing. SelectBrowserProfile ( profileName ) Parameters: Name Type Description profileName string name of a browser profile. SeSFind \u00b6 Waits for object to appear on screen. Uses test ObjectLookup... settings . Requires Rapise 6.4+ SeSFind ( xpathOrObjId , params ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. params object Overrides locator options. Optional. Returns: found object, otherwise - false . SetPosition \u00b6 Positions top-left corner of the browser window at specifid location. This function is DPI aware. SetPosition ( x , y ) Parameters: Name Type Description x number X-offset from the top-left corner of the screen. y number Y-offset from the top-left corner of the screen. SetSize \u00b6 Sets size if the browser window. This function is DPI aware. SetSize ( width , height ) Parameters: Name Type Description width number New width of the browser window. height number New height of the browser window.","title":"Navigator"},{"location":"Libraries/Navigator/#navigator","text":"Navigator object. This is used to provide functions for manipulating the web browser when using the HTML libraries.","title":"Navigator"},{"location":"Libraries/Navigator/#property-summary","text":"Property Description AutoOpen During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. EnsureVisibleHorizontalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". EnsureVisibleVerticalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". NativeEvents Set it to true to use native keyboard and mouse input. QuitIfNotConnected If connection to browser fails - open plugin page and quit.","title":"Property Summary"},{"location":"Libraries/Navigator/#action-summary","text":"Action Description CheckObjectExists Checks if object is found on the screen by its id or XPath. CheckObjectVisible Checks if object is visible on the screen by its id or XPath. Close Closes browser. Detach Disconnects from a browser. DoActivateWindow Makes specified browser window active and focused. DoCheckAlert Waits until browser alert with a given text. DoCheckConfirmation Waits until browser confirmation with a given text. DoCheckPrompt Waits until browser prompt with a given text. DoClickUntilOnScreen Clicks on a given element until another element appears on screen. DoClickWhileOnScreen Clicks on an element until it disappears. DoCloseTab Closes currently selected tab. DoCloseWindow Closes currently active browser window. DoCreateTab Creates new browser tab. DoCreateWindow Creates a new browser window. DOMFindByAttributeValue Looks for a web element by specific attribute value through all frames. DOMFindByName Looks for a web element by its name through all frames. DOMFindByText Looks for a web element by its text contents through all frames. DOMFindByXPath Looks for a web element by specific local XPath value through all frames. DoMoveWindow Sets the position of the active browser window. DOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoResizeWindow Sets size of the active browser window. DoScreenshot Makes screenshot of the browser window. DoSelectTab Selects browser tab by title or URL. DoSetExpectedConfirmResult Sets boolean value to return as a result of next browser confirm request. DoSetExpectedPromptResult Sets text to return as a result of next browser prompt request. DoWaitFor Waits for object to appear on screen. ExecJS Executes given JavaScript statement in a browser and returns results. ExecPageJS Executes given JavaScript statement in a browser in the context of the current page. Find Returns HTMLObject wrapping DOM element for a given xpath . GetActiveTabId Gets Id of active browser tab. GetActiveTabTitle Gets title of active browser tab. GetActiveTabUrl Gets URL of active browser tab. GetActiveWindowId Gets active browser window Id. GetActiveWindowTitle Gets active browser window title. GetActiveWindowUrl Gets active browser window URL. GetPerformance Reads performance information from currently used browser. GetPosition Gets position of the top-left corner of the browser window. GetSize Gets size of the browser window. GetTabIdAt Gets browser tab Id. GetTabIndexById Gets index of the browser tab by Id. GetTabsCount Gets number of browser tabs. GetTabTitleAt Gets browser tab title. GetTabUrlAt Gets browser tab URL. GetWindowIdAt Gets browser window Id. GetWindowsCount Gets the number of browser windows. GetWindowTitleAt Gets browser window title. GetWindowUrlAt Gets browser window URL. KillBrowser Kills the browser process. LaunchBrowser Launches browser, but does not connect to it. Maximize Maximizes browser window. Navigate Redirects browser to a specified URL. Open Opens a browser. SelectBrowserProfile Selects browser profile to use for testing. SeSFind Waits for object to appear on screen. SetPosition Positions top-left corner of the browser window at specifid location. SetSize Sets size if the browser window.","title":"Action Summary"},{"location":"Libraries/Navigator/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Navigator/#autoopen","text":"During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. If AutoOpen is 'false' it does nothing. Default value is 'true'. Applicable to Chrome, Firefox and Internet Explorer. Selenium targets are not affected by this property. Use Navigator.GetAutoOpen() to read the value and Navigator.SetAutoOpen(true|false) to set the value. Type: boolean","title":"AutoOpen"},{"location":"Libraries/Navigator/#ensurevisiblehorizontalalignment","text":"One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\". Type: string","title":"EnsureVisibleHorizontalAlignment"},{"location":"Libraries/Navigator/#ensurevisibleverticalalignment","text":"One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\". Type: string","title":"EnsureVisibleVerticalAlignment"},{"location":"Libraries/Navigator/#nativeevents","text":"Set it to true to use native keyboard and mouse input. Overrides browser profile settings. Does not affect Selenium targets. Requires Rapise 6.3+ Type: boolean","title":"NativeEvents"},{"location":"Libraries/Navigator/#quitifnotconnected","text":"If connection to browser fails - open plugin page and quit. If set to 'false' - just return 'false' in Open call. Type: boolean","title":"QuitIfNotConnected"},{"location":"Libraries/Navigator/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Navigator/#checkobjectexists","text":"Checks if object is found on the screen by its id or XPath. CheckObjectExists ( xpathOrObjId ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". Returns: true if object exists, false otherwise.","title":"CheckObjectExists"},{"location":"Libraries/Navigator/#checkobjectvisible","text":"Checks if object is visible on the screen by its id or XPath. CheckObjectVisible ( xpathOrObjId ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". Returns: true if object is visible, false otherwise.","title":"CheckObjectVisible"},{"location":"Libraries/Navigator/#close","text":"Closes browser. Finishes session. Close ( url ) Parameters: Name Type Description url string Not used - can leave empty. Returns true if the browser closed successfully, otherwise - false .","title":"Close"},{"location":"Libraries/Navigator/#detach","text":"Disconnects from a browser. Make Navigator ready for a new browser instance connection. Detach ()","title":"Detach"},{"location":"Libraries/Navigator/#doactivatewindow","text":"Makes specified browser window active and focused. Requires Rapise 6.5+ DoActivateWindow ( titleOrUrl ) Parameters: Name Type Description titleOrUrl string string or regex matching URL or window title.","title":"DoActivateWindow"},{"location":"Libraries/Navigator/#docheckalert","text":"Waits until browser alert with a given text. Wait timeout is 10 seconds. DoCheckAlert ( msg ) Parameters: Name Type Description msg string Alert text. Can be exact text or regular expression. Returns: true if browser alert had occurred, false otherwise.","title":"DoCheckAlert"},{"location":"Libraries/Navigator/#docheckconfirmation","text":"Waits until browser confirmation with a given text. Wait timeout is 10 seconds. DoCheckConfirmation ( msg , result ) Parameters: Name Type Description msg string Confirmation text. Can be exact text or regular expression. result string Not used - can leave empty. Optional. Returns: true if browser confirmation popup is shown, false otherwise.","title":"DoCheckConfirmation"},{"location":"Libraries/Navigator/#docheckprompt","text":"Waits until browser prompt with a given text. Wait timeout is 10 seconds. DoCheckPrompt ( msg , result ) Parameters: Name Type Description msg string Prompt text. Can be exact text or regular expression. result string Not used - can leave empty. Optional. Returns: true if browser prompt popup is shown, false otherwise.","title":"DoCheckPrompt"},{"location":"Libraries/Navigator/#doclickuntilonscreen","text":"Clicks on a given element until another element appears on screen. Requires Rapise 6.3+ DoClickUntilOnScreen ( xpathOrObjIdToClick , xpathOrObjIdToExpect , attempts , delay , x , y , forceEvent ) Parameters: Name Type Description xpathOrObjIdToClick objectId Object Id or XPath of an element to click. xpathOrObjIdToExpect objectId Object Id or XPath of an element that should appear on screen. attempts number Max number of clicks. Default is 2. Optional. delay number Delay between attempts. Default is 1000 milliseconds. Optional. x number X-offset from the top-left corner of the object. Default is object width/2. Optional. y number Y-offset from the top-left corner of the object. Default is object height/2. Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings. Optional. Returns: expected object if successful, otherwise - null.","title":"DoClickUntilOnScreen"},{"location":"Libraries/Navigator/#doclickwhileonscreen","text":"Clicks on an element until it disappears. Requires Rapise 6.3+ DoClickWhileOnScreen ( xpathOrObjId , attempts , delay , x , y , forceEvent ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to click. attempts number Max number of clicks. Default is 2. Optional. delay number Delay between attempts. Default is 1000 milliseconds. Optional. x number X-offset from the top-left corner of the object. Default is object width/2. Optional. y number Y-offset from the top-left corner of the object. Default is object height/2. Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings. Optional. Returns: true if object disappeared, otherwise - false.","title":"DoClickWhileOnScreen"},{"location":"Libraries/Navigator/#doclosetab","text":"Closes currently selected tab. Requires Rapise 6.5+ DoCloseTab ()","title":"DoCloseTab"},{"location":"Libraries/Navigator/#doclosewindow","text":"Closes currently active browser window. Requires Rapise 6.5+ DoCloseWindow ()","title":"DoCloseWindow"},{"location":"Libraries/Navigator/#docreatetab","text":"Creates new browser tab. Requires Rapise 6.5+ DoCreateTab ( url ) Parameters: Name Type Description url string new page URL","title":"DoCreateTab"},{"location":"Libraries/Navigator/#docreatewindow","text":"Creates a new browser window. Requires Rapise 6.5+ DoCreateWindow ( url ) Parameters: Name Type Description url string page URL.","title":"DoCreateWindow"},{"location":"Libraries/Navigator/#domfindbyattributevalue","text":"Looks for a web element by specific attribute value through all frames. attrValue is checked against each element's attrName attribute. DOMFindByAttributeValue ( attrName , attrValue , tagName , findAll , timeout ) Parameters: Name Type Description attrName string Name of the attribute to check. May be @attr or attr . attrValue string Expected attribute value. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).","title":"DOMFindByAttributeValue"},{"location":"Libraries/Navigator/#domfindbyname","text":"Looks for a web element by its name through all frames. Name is checked against @name and @id attribute of each element DOMFindByName ( name , tagName , findAll , timeout ) Parameters: Name Type Description name string Expected element name to search for. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).","title":"DOMFindByName"},{"location":"Libraries/Navigator/#domfindbytext","text":"Looks for a web element by its text contents through all frames. text is checked against each element text contents. DOMFindByText ( text , tagName , findAll , timeout ) Parameters: Name Type Description text string Expected text to search for. tagName string Tag name, default is * (any tag). Optional. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).","title":"DOMFindByText"},{"location":"Libraries/Navigator/#domfindbyxpath","text":"Looks for a web element by specific local XPath value through all frames. If XPath is local (i.e. //img) then search will be performed for all images in all nested frames. DOMFindByXPath ( xpath , findAll , timeout ) Parameters: Name Type Description xpath string Local XPath to execute for each frame. findAll boolean Defines if we return just first element ( false , default) or all found elements ( true ). Default is false . Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt. Optional. Returns: array | object: If findAll is set to false then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).","title":"DOMFindByXPath"},{"location":"Libraries/Navigator/#domovewindow","text":"Sets the position of the active browser window. Requires Rapise 6.5+ DoMoveWindow ( left , top ) Parameters: Name Type Description left number offset in pixels from the corner of the display. top number offset in pixels from the corner of the display.","title":"DoMoveWindow"},{"location":"Libraries/Navigator/#domqueryvalue","text":"Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then null is returned. Requires Rapise 6.4+ DOMQueryValue ( xpathOrObjId , query ) Parameters: Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading '.' or '/'. If the value is empty then this parameter defaults to /html . query string Absolute or relative xpath query. e.g. count(//div) , //a[1]/@href='/Home' , ./li/text() Returns: string | number | boolean: Result of the query or null in the case if the query is invalid or nothing matches.","title":"DOMQueryValue"},{"location":"Libraries/Navigator/#doresizewindow","text":"Sets size of the active browser window. Requires Rapise 6.5+ DoResizeWindow ( width , height ) Parameters: Name Type Description width number New width of the browser window in pixels. height number New height of the browser window in pixels.","title":"DoResizeWindow"},{"location":"Libraries/Navigator/#doscreenshot","text":"Makes screenshot of the browser window. DoScreenshot ( fileName ) Parameters: Name Type Description fileName string Save the screenshot to a file if name is specified. Otherwise - add to report. Optional.","title":"DoScreenshot"},{"location":"Libraries/Navigator/#doselecttab","text":"Selects browser tab by title or URL. Requires Rapise 6.5+ DoSelectTab ( titleOrUrl ) Parameters: Name Type Description titleOrUrl string string or regex matching tab URL or title.","title":"DoSelectTab"},{"location":"Libraries/Navigator/#dosetexpectedconfirmresult","text":"Sets boolean value to return as a result of next browser confirm request. DoSetExpectedConfirmResult ( expectedRes ) Parameters: Name Type Description expectedRes string The text to be returned in the next request.","title":"DoSetExpectedConfirmResult"},{"location":"Libraries/Navigator/#dosetexpectedpromptresult","text":"Sets text to return as a result of next browser prompt request. DoSetExpectedPromptResult ( expectedRes ) Parameters: Name Type Description expectedRes string The text to be returned in the next request.","title":"DoSetExpectedPromptResult"},{"location":"Libraries/Navigator/#dowaitfor","text":"Waits for object to appear on screen. Requires Rapise 6.3+ DoWaitFor ( xpathOrObjId , timeout , params ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. timeout number Max time to wait. Default is 10000 milliseconds. Optional. params object Overrides locator options. Optional. Returns: found object, otherwise - false.","title":"DoWaitFor"},{"location":"Libraries/Navigator/#execjs","text":"Executes given JavaScript statement in a browser and returns results. ExecJS ( scriptText , obj ) Parameters: Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. Reference it as el or arguments[0] . Optional. Returns: Result of code execution.","title":"ExecJS"},{"location":"Libraries/Navigator/#execpagejs","text":"Executes given JavaScript statement in a browser in the context of the current page. It means the script may access JS variables and functions declared on the page. Requires Rapise 6.5+ ExecPageJS ( scriptText , obj ) Parameters: Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. The script will be executed in a frame, containing given obj. Optional. Returns: Result of code execution.","title":"ExecPageJS"},{"location":"Libraries/Navigator/#find","text":"Returns HTMLObject wrapping DOM element for a given xpath . Find ( xpath , url , title , objInfo ) Parameters: Name Type Description xpath string Location path of a DOM element. url string URL. If new Navigator is launched, the URL is used. Optional. title string The title of the HTML document that is being searched. objInfo SeSObjectInfo A populated SeSObjectInfo object. Returns: HTMLObject wrapping DOM element for a given xpath , null if xpath is invalid.","title":"Find"},{"location":"Libraries/Navigator/#getactivetabid","text":"Gets Id of active browser tab. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+ GetActiveTabId ()","title":"GetActiveTabId"},{"location":"Libraries/Navigator/#getactivetabtitle","text":"Gets title of active browser tab. Requires Rapise 6.5+ GetActiveTabTitle ()","title":"GetActiveTabTitle"},{"location":"Libraries/Navigator/#getactivetaburl","text":"Gets URL of active browser tab. Requires Rapise 6.5+ GetActiveTabUrl ()","title":"GetActiveTabUrl"},{"location":"Libraries/Navigator/#getactivewindowid","text":"Gets active browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+ GetActiveWindowId ()","title":"GetActiveWindowId"},{"location":"Libraries/Navigator/#getactivewindowtitle","text":"Gets active browser window title. Requires Rapise 6.5+ GetActiveWindowTitle ()","title":"GetActiveWindowTitle"},{"location":"Libraries/Navigator/#getactivewindowurl","text":"Gets active browser window URL. Requires Rapise 6.5+ GetActiveWindowUrl ( index ) Parameters: Name Type Description index number","title":"GetActiveWindowUrl"},{"location":"Libraries/Navigator/#getperformance","text":"Reads performance information from currently used browser. Performance numbers are based on output from window.performance structure of the web page. See also http://www.w3.org/TR/navigation-timing/#processing-model GetPerformance ( resources , dontWriteReport ) Parameters: Name Type Description resources boolean optional, bool. Set to true if you want to dump information about resource timing into the report Optional. dontWriteReport boolean optional, Set to true if you want just return page load time and write nothing to report Optional. Returns: number: page open time (in milliseconds)","title":"GetPerformance"},{"location":"Libraries/Navigator/#getposition","text":"Gets position of the top-left corner of the browser window. This function is DPI aware. GetPosition () Returns: object: {X, Y}","title":"GetPosition"},{"location":"Libraries/Navigator/#getsize","text":"Gets size of the browser window. This function is DPI aware. GetSize () Returns: object: {Width, Height}","title":"GetSize"},{"location":"Libraries/Navigator/#gettabidat","text":"Gets browser tab Id. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+ GetTabIdAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount()","title":"GetTabIdAt"},{"location":"Libraries/Navigator/#gettabindexbyid","text":"Gets index of the browser tab by Id. Index may be used as param to GetTabIdAt/GetTabUrlAt/GetTabTitleAt. Requires Rapise 6.5+ GetTabIndexById ( tabId ) Parameters: Name Type Description tabId number","title":"GetTabIndexById"},{"location":"Libraries/Navigator/#gettabscount","text":"Gets number of browser tabs. Requires Rapise 6.5+ GetTabsCount ()","title":"GetTabsCount"},{"location":"Libraries/Navigator/#gettabtitleat","text":"Gets browser tab title. Requires Rapise 6.5+ GetTabTitleAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount()","title":"GetTabTitleAt"},{"location":"Libraries/Navigator/#gettaburlat","text":"Gets browser tab URL. Requires Rapise 6.5+ GetTabUrlAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetTabsCount()","title":"GetTabUrlAt"},{"location":"Libraries/Navigator/#getwindowidat","text":"Gets browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+ GetWindowIdAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount()","title":"GetWindowIdAt"},{"location":"Libraries/Navigator/#getwindowscount","text":"Gets the number of browser windows. Requires Rapise 6.5+ GetWindowsCount ()","title":"GetWindowsCount"},{"location":"Libraries/Navigator/#getwindowtitleat","text":"Gets browser window title. Requires Rapise 6.5+ GetWindowTitleAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount()","title":"GetWindowTitleAt"},{"location":"Libraries/Navigator/#getwindowurlat","text":"Gets browser window URL. Requires Rapise 6.5+ GetWindowUrlAt ( index ) Parameters: Name Type Description index number number from 0 to Navigator.GetWindowsCount()","title":"GetWindowUrlAt"},{"location":"Libraries/Navigator/#killbrowser","text":"Kills the browser process. The browser to kill is detected from browser profile settings. Requires Rapise 6.4+ KillBrowser ()","title":"KillBrowser"},{"location":"Libraries/Navigator/#launchbrowser","text":"Launches browser, but does not connect to it. Recommended for applications with basic authentication. Requires Rapise 6.5+ LaunchBrowser ( url ) Parameters: Name Type Description url Initial url, may be empty. Optional.","title":"LaunchBrowser"},{"location":"Libraries/Navigator/#maximize","text":"Maximizes browser window. Maximize ()","title":"Maximize"},{"location":"Libraries/Navigator/#navigate","text":"Redirects browser to a specified URL. Navigate ( url ) Parameters: Name Type Description url string The URL to navigate to.","title":"Navigate"},{"location":"Libraries/Navigator/#open","text":"Opens a browser. If URL is specified, goes to URL. Open ( url ) Parameters: Name Type Description url string Start URL for opening browser. Can be null .","title":"Open"},{"location":"Libraries/Navigator/#selectbrowserprofile","text":"Selects browser profile to use for testing. SelectBrowserProfile ( profileName ) Parameters: Name Type Description profileName string name of a browser profile.","title":"SelectBrowserProfile"},{"location":"Libraries/Navigator/#sesfind","text":"Waits for object to appear on screen. Uses test ObjectLookup... settings . Requires Rapise 6.4+ SeSFind ( xpathOrObjId , params ) Parameters: Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. params object Overrides locator options. Optional. Returns: found object, otherwise - false .","title":"SeSFind"},{"location":"Libraries/Navigator/#setposition","text":"Positions top-left corner of the browser window at specifid location. This function is DPI aware. SetPosition ( x , y ) Parameters: Name Type Description x number X-offset from the top-left corner of the screen. y number Y-offset from the top-left corner of the screen.","title":"SetPosition"},{"location":"Libraries/Navigator/#setsize","text":"Sets size if the browser window. This function is DPI aware. SetSize ( width , height ) Parameters: Name Type Description width number New width of the browser window. height number New height of the browser window.","title":"SetSize"},{"location":"Libraries/NeoLoad/","text":"NeoLoad \u00b6 Important NeoLoad integration has been removed in Rapise 7.0. Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test. Action Summary \u00b6 Action Description CaptureBrowserPerformance Captures duration of loading a page and resources. CaptureHostPerformance Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery. CapturePerformanceValue Sends performance value to NeoLoad. CreateClient Connects to NeoLoad. EndTransaction Marks end of a transaction and sends performance metrics to NeoLoad. GetNetworkInterfaceNames Gets names of network interfaces. SetBaseContainer Sets current step (Init, Actions, End) during test conversion SetContainer Sets current container/business transaction during test conversion StartTransaction Marks start of a transaction. Action Detail \u00b6 CaptureBrowserPerformance \u00b6 Captures duration of loading a page and resources. CaptureBrowserPerformance ( url ) Parameters: Name Type Description url Node name for NeoLoad entry tree. CaptureHostPerformance \u00b6 Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery. CaptureHostPerformance () CapturePerformanceValue \u00b6 Sends performance value to NeoLoad. CapturePerformanceValue ( entry , path , units , value ) Parameters: Name Type Description entry Name of a group of performance metrics. Can be a transaction name. path Name of a metric to capture. units Units of measure. value Current value of the metric. CreateClient \u00b6 Connects to NeoLoad. CreateClient ( hardware , location , networkInterface ) Parameters: Name Type Description hardware string Hardware details (Apple MacBook Pro, Sony Vaio, etc.) location string Location information. networkInterface string Name of network interface to monitor. Names of available interfaces can be obtained using GetNetworkInterfaceNames. EndTransaction \u00b6 Marks end of a transaction and sends performance metrics to NeoLoad. EndTransaction ( name ) Parameters: Name Type Description name string Name of a transaction. GetNetworkInterfaceNames \u00b6 Gets names of network interfaces. Use one of them to CreateClient. GetNetworkInterfaceNames () SetBaseContainer \u00b6 Sets current step (Init, Actions, End) during test conversion SetBaseContainer ( name ) Parameters: Name Type Description name string Name of a step. SetContainer \u00b6 Sets current container/business transaction during test conversion SetContainer ( name ) Parameters: Name Type Description name string Name of a container/transaction. StartTransaction \u00b6 Marks start of a transaction. StartTransaction ( name ) Parameters: Name Type Description name string Name of a transaction.","title":"NeoLoad"},{"location":"Libraries/NeoLoad/#neoload","text":"Important NeoLoad integration has been removed in Rapise 7.0. Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.","title":"NeoLoad"},{"location":"Libraries/NeoLoad/#action-summary","text":"Action Description CaptureBrowserPerformance Captures duration of loading a page and resources. CaptureHostPerformance Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery. CapturePerformanceValue Sends performance value to NeoLoad. CreateClient Connects to NeoLoad. EndTransaction Marks end of a transaction and sends performance metrics to NeoLoad. GetNetworkInterfaceNames Gets names of network interfaces. SetBaseContainer Sets current step (Init, Actions, End) during test conversion SetContainer Sets current container/business transaction during test conversion StartTransaction Marks start of a transaction.","title":"Action Summary"},{"location":"Libraries/NeoLoad/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/NeoLoad/#capturebrowserperformance","text":"Captures duration of loading a page and resources. CaptureBrowserPerformance ( url ) Parameters: Name Type Description url Node name for NeoLoad entry tree.","title":"CaptureBrowserPerformance"},{"location":"Libraries/NeoLoad/#capturehostperformance","text":"Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery. CaptureHostPerformance ()","title":"CaptureHostPerformance"},{"location":"Libraries/NeoLoad/#captureperformancevalue","text":"Sends performance value to NeoLoad. CapturePerformanceValue ( entry , path , units , value ) Parameters: Name Type Description entry Name of a group of performance metrics. Can be a transaction name. path Name of a metric to capture. units Units of measure. value Current value of the metric.","title":"CapturePerformanceValue"},{"location":"Libraries/NeoLoad/#createclient","text":"Connects to NeoLoad. CreateClient ( hardware , location , networkInterface ) Parameters: Name Type Description hardware string Hardware details (Apple MacBook Pro, Sony Vaio, etc.) location string Location information. networkInterface string Name of network interface to monitor. Names of available interfaces can be obtained using GetNetworkInterfaceNames.","title":"CreateClient"},{"location":"Libraries/NeoLoad/#endtransaction","text":"Marks end of a transaction and sends performance metrics to NeoLoad. EndTransaction ( name ) Parameters: Name Type Description name string Name of a transaction.","title":"EndTransaction"},{"location":"Libraries/NeoLoad/#getnetworkinterfacenames","text":"Gets names of network interfaces. Use one of them to CreateClient. GetNetworkInterfaceNames ()","title":"GetNetworkInterfaceNames"},{"location":"Libraries/NeoLoad/#setbasecontainer","text":"Sets current step (Init, Actions, End) during test conversion SetBaseContainer ( name ) Parameters: Name Type Description name string Name of a step.","title":"SetBaseContainer"},{"location":"Libraries/NeoLoad/#setcontainer","text":"Sets current container/business transaction during test conversion SetContainer ( name ) Parameters: Name Type Description name string Name of a container/transaction.","title":"SetContainer"},{"location":"Libraries/NeoLoad/#starttransaction","text":"Marks start of a transaction. StartTransaction ( name ) Parameters: Name Type Description name string Name of a transaction.","title":"StartTransaction"},{"location":"Libraries/OFTabBar/","text":"OFTabBar \u00b6 Oracle Forms OFTabBar. UI element class: oracle.ewt.tabBar.TabBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTabBarBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"OFTabBar"},{"location":"Libraries/OFTabBar/#oftabbar","text":"Oracle Forms OFTabBar. UI element class: oracle.ewt.tabBar.TabBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTabBarBehavior","title":"OFTabBar"},{"location":"Libraries/OFTabBar/#property-summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText","title":"Property Summary"},{"location":"Libraries/OFTabBar/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/OFTabBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/OFTabBar/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/OFTabBar/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/OFTabBar/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/OFTabBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OFTabBar/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/OFToolBar/","text":"OFToolBar \u00b6 Oracle Forms OFToolBar. UI element class: oracle.ewt.toolBar.ToolBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsToolBarBehavior Property Summary \u00b6 Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked SetItemChecked ItemIndexByName Returns item index by its name. GetItemIndexByName Action Summary \u00b6 Action Description DoClickItem Performs click on the navigation item Property Detail \u00b6 ItemChecked \u00b6 Check if item is checked. Type: boolean Accessors: GetItemChecked, SetItemChecked ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName Action Detail \u00b6 DoClickItem \u00b6 Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"OFToolBar"},{"location":"Libraries/OFToolBar/#oftoolbar","text":"Oracle Forms OFToolBar. UI element class: oracle.ewt.toolBar.ToolBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsToolBarBehavior","title":"OFToolBar"},{"location":"Libraries/OFToolBar/#property-summary","text":"Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked SetItemChecked ItemIndexByName Returns item index by its name. GetItemIndexByName","title":"Property Summary"},{"location":"Libraries/OFToolBar/#action-summary","text":"Action Description DoClickItem Performs click on the navigation item","title":"Action Summary"},{"location":"Libraries/OFToolBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/OFToolBar/#itemchecked","text":"Check if item is checked. Type: boolean Accessors: GetItemChecked, SetItemChecked","title":"ItemChecked"},{"location":"Libraries/OFToolBar/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/OFToolBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OFToolBar/#doclickitem","text":"Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/OracleEnhLabledIconButton/","text":"OracleEnhLabledIconButton \u00b6 Oracle Forms Enhanced Labelled Icon Button. UI element class: oracle.forms.enhancedItems.LabledIconButton Extends VButton Extends SeSSimulatedObject","title":"OracleEnhLabledIconButton"},{"location":"Libraries/OracleEnhLabledIconButton/#oracleenhlablediconbutton","text":"Oracle Forms Enhanced Labelled Icon Button. UI element class: oracle.forms.enhancedItems.LabledIconButton Extends VButton Extends SeSSimulatedObject","title":"OracleEnhLabledIconButton"},{"location":"Libraries/OracleForms/","text":"OracleForms \u00b6 OracleForms Global Helper Object. Action Summary \u00b6 Action Description DoLOVSelect Get title of currently displayed LOV selection window. DoMenu DoPressNotificationButton Get message of currently displayed notification window. GetLOVTitle GetNotificationMessage GetNotificationTitle Get status bar message. GetStatusMessage Action Detail \u00b6 DoLOVSelect \u00b6 Get title of currently displayed LOV selection window. DoLOVSelect ( txtOrInd , timeoutS ) Parameters: Name Type Description txtOrInd string timeoutS number Returns: popup window title. DoMenu \u00b6 DoMenu ( menuPath , sep ) Parameters: Name Type Description menuPath string sep string DoPressNotificationButton \u00b6 Get message of currently displayed notification window. DoPressNotificationButton ( label ) Parameters: Name Type Description label string Returns: popup window message. GetLOVTitle \u00b6 GetLOVTitle () GetNotificationMessage \u00b6 GetNotificationMessage () GetNotificationTitle \u00b6 Get status bar message. GetNotificationTitle ( timeout ) Parameters: Name Type Description timeout number Returns: status bar message text. GetStatusMessage \u00b6 GetStatusMessage ()","title":"OracleForms"},{"location":"Libraries/OracleForms/#oracleforms","text":"OracleForms Global Helper Object.","title":"OracleForms"},{"location":"Libraries/OracleForms/#action-summary","text":"Action Description DoLOVSelect Get title of currently displayed LOV selection window. DoMenu DoPressNotificationButton Get message of currently displayed notification window. GetLOVTitle GetNotificationMessage GetNotificationTitle Get status bar message. GetStatusMessage","title":"Action Summary"},{"location":"Libraries/OracleForms/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OracleForms/#dolovselect","text":"Get title of currently displayed LOV selection window. DoLOVSelect ( txtOrInd , timeoutS ) Parameters: Name Type Description txtOrInd string timeoutS number Returns: popup window title.","title":"DoLOVSelect"},{"location":"Libraries/OracleForms/#domenu","text":"DoMenu ( menuPath , sep ) Parameters: Name Type Description menuPath string sep string","title":"DoMenu"},{"location":"Libraries/OracleForms/#dopressnotificationbutton","text":"Get message of currently displayed notification window. DoPressNotificationButton ( label ) Parameters: Name Type Description label string Returns: popup window message.","title":"DoPressNotificationButton"},{"location":"Libraries/OracleForms/#getlovtitle","text":"GetLOVTitle ()","title":"GetLOVTitle"},{"location":"Libraries/OracleForms/#getnotificationmessage","text":"GetNotificationMessage ()","title":"GetNotificationMessage"},{"location":"Libraries/OracleForms/#getnotificationtitle","text":"Get status bar message. GetNotificationTitle ( timeout ) Parameters: Name Type Description timeout number Returns: status bar message text.","title":"GetNotificationTitle"},{"location":"Libraries/OracleForms/#getstatusmessage","text":"GetStatusMessage ()","title":"GetStatusMessage"},{"location":"Libraries/OracleFormsMenuBar/","text":"OracleFormsMenuBar \u00b6 Oracle Forms MenuBar. UI element class: oracle.ewt.lwAWT.lwMenu.LWMenuBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsMenuBarBehavior Action Summary \u00b6 Action Description DoGetSubmenuProperty Gets submenu property. DoMenu Performs click on the menu item. Action Detail \u00b6 DoGetSubmenuProperty \u00b6 Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise. DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"OracleFormsMenuBar"},{"location":"Libraries/OracleFormsMenuBar/#oracleformsmenubar","text":"Oracle Forms MenuBar. UI element class: oracle.ewt.lwAWT.lwMenu.LWMenuBar Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsMenuBarBehavior","title":"OracleFormsMenuBar"},{"location":"Libraries/OracleFormsMenuBar/#action-summary","text":"Action Description DoGetSubmenuProperty Gets submenu property. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/OracleFormsMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OracleFormsMenuBar/#dogetsubmenuproperty","text":"Gets submenu property. DoGetSubmenuProperty ( path , index , property , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string | boolean: Submenu property, 'false' otherwise.","title":"DoGetSubmenuProperty"},{"location":"Libraries/OracleFormsMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/OracleFormsObject/","text":"OracleFormsObject \u00b6 Oracle Forms Object. UI element class: regex:oracle\\.(ewt||forms)\\..* Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsGenericBehavior Action Summary \u00b6 Action Description DoSetFocus Sets keyboard input focus to this editor control. DoSoftKey Send softkey to this editor control. Action Detail \u00b6 DoSetFocus \u00b6 Sets keyboard input focus to this editor control. DoSetFocus () DoSoftKey \u00b6 Send softkey to this editor control. DoSoftKey ( softKey , bNoFocus ) Parameters: Name Type Description softKey string Soft Key Code Possible values: \"NEXT FIELD\", \"CLEAR RECORD\", \"DISPLAY ERROR\", \"PREVIOUS FIELD\", \"DELETE RECORD\", \"PRINT\", \"CLEAR FIELD\", \"DUPLICATE RECORD\", \"COUNT QUERY\", \"UP\", \"INSERT RECORD\", \"UPDATE RECORD\", \"DOWN\", \"NEXT SET OF RECORDS\", \"FUNCTION 0\", \"SCROLL UP\", \"NEXT RECORD\", \"FUNCTION 1\", \"SCROLL DOWN\", \"PREVIOUS RECORD\", \"FUNCTION 2\", \"EDIT\", \"CLEAR BLOCK\", \"FUNCTION 3\", \"RETURN\", \"BLOCK MENU\", \"FUNCTION 4\", \"LIST OF VALUES\", \"NEXT BLOCK\", \"FUNCTION 5\", \"HELP\", \"PREVIOUS BLOCK\", \"FUNCTION 6\", \"EXIT\", \"DUPLICATE FIELD\", \"FUNCTION 7\", \"SHOW KEYS\", \"CLEAR FORM\", \"FUNCTION 8\", \"COMMIT\", \"ENTER QUERY\", \"FUNCTION 9\", \"NEXT PRIMARY KEY\", \"EXECUTE QUERY\", \"LIST TAB PAGES\" Optional, Default: \"NEXT FIELD\". bNoFocus boolean Don't try to set focus before sending softkey. Optional, Default: \"true\".","title":"OracleFormsObject"},{"location":"Libraries/OracleFormsObject/#oracleformsobject","text":"Oracle Forms Object. UI element class: regex:oracle\\.(ewt||forms)\\..* Extends JavaObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsGenericBehavior","title":"OracleFormsObject"},{"location":"Libraries/OracleFormsObject/#action-summary","text":"Action Description DoSetFocus Sets keyboard input focus to this editor control. DoSoftKey Send softkey to this editor control.","title":"Action Summary"},{"location":"Libraries/OracleFormsObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OracleFormsObject/#dosetfocus","text":"Sets keyboard input focus to this editor control. DoSetFocus ()","title":"DoSetFocus"},{"location":"Libraries/OracleFormsObject/#dosoftkey","text":"Send softkey to this editor control. DoSoftKey ( softKey , bNoFocus ) Parameters: Name Type Description softKey string Soft Key Code Possible values: \"NEXT FIELD\", \"CLEAR RECORD\", \"DISPLAY ERROR\", \"PREVIOUS FIELD\", \"DELETE RECORD\", \"PRINT\", \"CLEAR FIELD\", \"DUPLICATE RECORD\", \"COUNT QUERY\", \"UP\", \"INSERT RECORD\", \"UPDATE RECORD\", \"DOWN\", \"NEXT SET OF RECORDS\", \"FUNCTION 0\", \"SCROLL UP\", \"NEXT RECORD\", \"FUNCTION 1\", \"SCROLL DOWN\", \"PREVIOUS RECORD\", \"FUNCTION 2\", \"EDIT\", \"CLEAR BLOCK\", \"FUNCTION 3\", \"RETURN\", \"BLOCK MENU\", \"FUNCTION 4\", \"LIST OF VALUES\", \"NEXT BLOCK\", \"FUNCTION 5\", \"HELP\", \"PREVIOUS BLOCK\", \"FUNCTION 6\", \"EXIT\", \"DUPLICATE FIELD\", \"FUNCTION 7\", \"SHOW KEYS\", \"CLEAR FORM\", \"FUNCTION 8\", \"COMMIT\", \"ENTER QUERY\", \"FUNCTION 9\", \"NEXT PRIMARY KEY\", \"EXECUTE QUERY\", \"LIST TAB PAGES\" Optional, Default: \"NEXT FIELD\". bNoFocus boolean Don't try to set focus before sending softkey. Optional, Default: \"true\".","title":"DoSoftKey"},{"location":"Libraries/OracleFormsTable/","text":"OracleFormsTable \u00b6 Oracle Forms Table. UI element class: oracle.forms.ui.ExtendedFrame Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTableBehavior Property Summary \u00b6 Property Description Getter Setter Cell Value of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount Action Summary \u00b6 Action Description DoGetValue Sets value of the table cell. DoSetFocus Sets keyboard input focus to the table cell. DoSetValue Sets value of the table cell. Property Detail \u00b6 Cell \u00b6 Value of the specified cell. Getter Parameters: Name Type Description row number Zero-based index of a row. col string | number Name of a column or zero-based column index. Type: string|number|boolean Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount Action Detail \u00b6 DoGetValue \u00b6 Sets value of the table cell. DoGetValue ( row , col ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index Returns: boolean: 'true' if success, 'false' otherwise. DoSetFocus \u00b6 Sets keyboard input focus to the table cell. DoSetFocus ( row , col ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index Returns: boolean: 'true' if success, 'false' otherwise. DoSetValue \u00b6 Sets value of the table cell. DoSetValue ( row , col , value ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index value string | boolean | number value to set Returns: boolean: 'true' if success, 'false' otherwise.","title":"OracleFormsTable"},{"location":"Libraries/OracleFormsTable/#oracleformstable","text":"Oracle Forms Table. UI element class: oracle.forms.ui.ExtendedFrame Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTableBehavior","title":"OracleFormsTable"},{"location":"Libraries/OracleFormsTable/#property-summary","text":"Property Description Getter Setter Cell Value of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount","title":"Property Summary"},{"location":"Libraries/OracleFormsTable/#action-summary","text":"Action Description DoGetValue Sets value of the table cell. DoSetFocus Sets keyboard input focus to the table cell. DoSetValue Sets value of the table cell.","title":"Action Summary"},{"location":"Libraries/OracleFormsTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/OracleFormsTable/#cell","text":"Value of the specified cell. Getter Parameters: Name Type Description row number Zero-based index of a row. col string | number Name of a column or zero-based column index. Type: string|number|boolean Accessors: GetCell","title":"Cell"},{"location":"Libraries/OracleFormsTable/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/OracleFormsTable/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/OracleFormsTable/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/OracleFormsTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/OracleFormsTable/#dogetvalue","text":"Sets value of the table cell. DoGetValue ( row , col ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoGetValue"},{"location":"Libraries/OracleFormsTable/#dosetfocus","text":"Sets keyboard input focus to the table cell. DoSetFocus ( row , col ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetFocus"},{"location":"Libraries/OracleFormsTable/#dosetvalue","text":"Sets value of the table cell. DoSetValue ( row , col , value ) Parameters: Name Type Description row number Table row index col string | number Table column caption or index value string | boolean | number value to set Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetValue"},{"location":"Libraries/OraclePushButton/","text":"OraclePushButton \u00b6 Oracle Forms Push Button. UI element class: oracle.ewt.button.PushButton Extends VButton Extends SeSSimulatedObject","title":"OraclePushButton"},{"location":"Libraries/OraclePushButton/#oraclepushbutton","text":"Oracle Forms Push Button. UI element class: oracle.ewt.button.PushButton Extends VButton Extends SeSSimulatedObject","title":"OraclePushButton"},{"location":"Libraries/QAbstractButton/","text":"QAbstractButton \u00b6 Qt Framework QAbstractButton. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"QAbstractButton"},{"location":"Libraries/QAbstractButton/#qabstractbutton","text":"Qt Framework QAbstractButton. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"QAbstractButton"},{"location":"Libraries/QAbstractButton/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/QAbstractButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QAbstractButton/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/QCheckBox/","text":"QCheckBox \u00b6 Qt CheckBox. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: QtCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QCheckBox"},{"location":"Libraries/QCheckBox/#qcheckbox","text":"Qt CheckBox. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: QtCheckableBehavior","title":"QCheckBox"},{"location":"Libraries/QCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/QCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/QCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/QCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/QComboBox/","text":"QComboBox \u00b6 This is the Qt combo box. Use DoSelectItem to select a particular item. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemComboBehavior Property Summary \u00b6 Property Description Getter Setter Value Gets the value of the selected item. GetValue Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 Value \u00b6 Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QComboBox"},{"location":"Libraries/QComboBox/#qcombobox","text":"This is the Qt combo box. Use DoSelectItem to select a particular item. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemComboBehavior","title":"QComboBox"},{"location":"Libraries/QComboBox/#property-summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue","title":"Property Summary"},{"location":"Libraries/QComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/QComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QComboBox/#value","text":"Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue","title":"Value"},{"location":"Libraries/QComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/QDateTimeEdit/","text":"QDateTimeEdit \u00b6 This is Qt masked date edit box. Use DoSetDateTime to set the time value of the edit box and GetText to read current value. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtDateTimeBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Action Summary \u00b6 Action Description DoSetDate Sets the date value of this object. DoSetDateTime Sets the date/time value of this object. DoSetTime Sets the time value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Action Detail \u00b6 DoSetDate \u00b6 Sets the date value of this object. DoSetDate ( value ) Parameters: Name Type Description value string Date value. Returns: boolean: 'true' if success, 'false' otherwise. DoSetDateTime \u00b6 Sets the date/time value of this object. DoSetDateTime ( value ) Parameters: Name Type Description value string Date/time value. Returns: boolean: 'true' if success, 'false' otherwise. DoSetTime \u00b6 Sets the time value of this object. DoSetTime ( value ) Parameters: Name Type Description value string Time value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QDateTimeEdit"},{"location":"Libraries/QDateTimeEdit/#qdatetimeedit","text":"This is Qt masked date edit box. Use DoSetDateTime to set the time value of the edit box and GetText to read current value. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtDateTimeBehavior","title":"QDateTimeEdit"},{"location":"Libraries/QDateTimeEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/QDateTimeEdit/#action-summary","text":"Action Description DoSetDate Sets the date value of this object. DoSetDateTime Sets the date/time value of this object. DoSetTime Sets the time value of this object.","title":"Action Summary"},{"location":"Libraries/QDateTimeEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QDateTimeEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/QDateTimeEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QDateTimeEdit/#dosetdate","text":"Sets the date value of this object. DoSetDate ( value ) Parameters: Name Type Description value string Date value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetDate"},{"location":"Libraries/QDateTimeEdit/#dosetdatetime","text":"Sets the date/time value of this object. DoSetDateTime ( value ) Parameters: Name Type Description value string Date/time value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetDateTime"},{"location":"Libraries/QDateTimeEdit/#dosettime","text":"Sets the time value of this object. DoSetTime ( value ) Parameters: Name Type Description value string Time value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetTime"},{"location":"Libraries/QFontComboBox/","text":"QFontComboBox \u00b6 This is the Qt font combo box. Use DoSelectItem to select a particular font. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemComboBehavior Property Summary \u00b6 Property Description Getter Setter Value Gets the value of the selected item. GetValue Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 Value \u00b6 Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QFontComboBox"},{"location":"Libraries/QFontComboBox/#qfontcombobox","text":"This is the Qt font combo box. Use DoSelectItem to select a particular font. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemComboBehavior","title":"QFontComboBox"},{"location":"Libraries/QFontComboBox/#property-summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue","title":"Property Summary"},{"location":"Libraries/QFontComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/QFontComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QFontComboBox/#value","text":"Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue","title":"Value"},{"location":"Libraries/QFontComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QFontComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/QLabel/","text":"QLabel \u00b6 This is Qt read-only text label. Use GetText to read the current value of the label text. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"QLabel"},{"location":"Libraries/QLabel/#qlabel","text":"This is Qt read-only text label. Use GetText to read the current value of the label text. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtTextBehavior","title":"QLabel"},{"location":"Libraries/QLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/QLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/QLineEdit/","text":"QLineEdit \u00b6 This is Qt single-line text edit box. Use DoSetText to set the value of the edit box and GetText to read current value. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtTextEditableBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QLineEdit"},{"location":"Libraries/QLineEdit/#qlineedit","text":"This is Qt single-line text edit box. Use DoSetText to set the value of the edit box and GetText to read current value. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtTextEditableBehavior","title":"QLineEdit"},{"location":"Libraries/QLineEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/QLineEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/QLineEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QLineEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/QLineEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QLineEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/QListBox/","text":"QListBox \u00b6 This is the Qt list box. Use DoSelectItem to select a particular item. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtListBoxBehavior Property Summary \u00b6 Property Description Getter Setter Value Gets the value of the selected item. GetValue Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 Value \u00b6 Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QListBox"},{"location":"Libraries/QListBox/#qlistbox","text":"This is the Qt list box. Use DoSelectItem to select a particular item. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtListBoxBehavior","title":"QListBox"},{"location":"Libraries/QListBox/#property-summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue","title":"Property Summary"},{"location":"Libraries/QListBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/QListBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QListBox/#value","text":"Gets the value of the selected item. This is usually equivalent to the name of the item being selected. Type: string Accessors: GetValue","title":"Value"},{"location":"Libraries/QListBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QListBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string Item name to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/QMenuBar/","text":"QMenuBar \u00b6 This is for testing the main Qt menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemClickable Action Summary \u00b6 Action Description DoClickItem Performs click on an item of this object. Action Detail \u00b6 DoClickItem \u00b6 Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if success, 'false' otherwise.","title":"QMenuBar"},{"location":"Libraries/QMenuBar/#qmenubar","text":"This is for testing the main Qt menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: QtItemClickable","title":"QMenuBar"},{"location":"Libraries/QMenuBar/#action-summary","text":"Action Description DoClickItem Performs click on an item of this object.","title":"Action Summary"},{"location":"Libraries/QMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QMenuBar/#doclickitem","text":"Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/QPopup/","text":"QPopup \u00b6 Generic Qt Popup control. Extends SeSSimulatedObject","title":"QPopup"},{"location":"Libraries/QPopup/#qpopup","text":"Generic Qt Popup control. Extends SeSSimulatedObject","title":"QPopup"},{"location":"Libraries/QPopupMenu/","text":"QPopupMenu \u00b6 This is generic Qt popup menu. Use DoClickItem to click a particular item from the menu. Extends QPopup Extends SeSSimulatedObject Behavior Pattern: QtItemClickable Action Summary \u00b6 Action Description DoClickItem Performs click on an item of this object. Action Detail \u00b6 DoClickItem \u00b6 Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if success, 'false' otherwise.","title":"QPopupMenu"},{"location":"Libraries/QPopupMenu/#qpopupmenu","text":"This is generic Qt popup menu. Use DoClickItem to click a particular item from the menu. Extends QPopup Extends SeSSimulatedObject Behavior Pattern: QtItemClickable","title":"QPopupMenu"},{"location":"Libraries/QPopupMenu/#action-summary","text":"Action Description DoClickItem Performs click on an item of this object.","title":"Action Summary"},{"location":"Libraries/QPopupMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QPopupMenu/#doclickitem","text":"Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/QPushButton/","text":"QPushButton \u00b6 This matches a Qt push button. Use DoAction to press it. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"QPushButton"},{"location":"Libraries/QPushButton/#qpushbutton","text":"This matches a Qt push button. Use DoAction to press it. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"QPushButton"},{"location":"Libraries/QPushButton/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/QPushButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QPushButton/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/QRadioButton/","text":"QRadioButton \u00b6 Qt Radio button. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: QtCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"QRadioButton"},{"location":"Libraries/QRadioButton/#qradiobutton","text":"Qt Radio button. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: QtCheckableBehavior","title":"QRadioButton"},{"location":"Libraries/QRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/QRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/QRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/QRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/QRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/QSimulated/","text":"QSimulated \u00b6 Qt Simulated control. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"QSimulated"},{"location":"Libraries/QSimulated/#qsimulated","text":"Qt Simulated control. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"QSimulated"},{"location":"Libraries/QTabPage/","text":"QTabPage \u00b6 Qt Tab Page control. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"QTabPage"},{"location":"Libraries/QTabPage/#qtabpage","text":"Qt Tab Page control. Extends QWidget Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"QTabPage"},{"location":"Libraries/QTabPage/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/QTabPage/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QTabPage/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/QToolButton/","text":"QToolButton \u00b6 This matches a Qt tool button. Use DoAction to press it. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"QToolButton"},{"location":"Libraries/QToolButton/#qtoolbutton","text":"This matches a Qt tool button. Use DoAction to press it. Extends QAbstractButton Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"QToolButton"},{"location":"Libraries/QToolButton/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/QToolButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/QToolButton/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/QWidget/","text":"QWidget \u00b6 Generic Qt widget. Extends SeSSimulatedObject","title":"QWidget"},{"location":"Libraries/QWidget/#qwidget","text":"Generic Qt widget. Extends SeSSimulatedObject","title":"QWidget"},{"location":"Libraries/RESTRequest/","text":"RESTRequest \u00b6 This is a JavaScript wrapper for RESTRequest Action Summary \u00b6 Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential The HTTP Basic Authentication Credentials (if any). GetHeader HTTP header GetMethod The HTTP Method being used for the request (GET, POST, etc. GetName The name of the request operation GetParameter Access request parameters. GetRequestBodyText The body of the HTTP request in raw text format GetUrl The URL being used to access the web service SetCredential The HTTP Basic Authentication Credentials (if any). SetHeader HTTP header SetMethod The HTTP Method being used for the request (GET, POST, etc. SetParameter Access request parameters. SetRequestBodyText The body of the HTTP request in raw text format SetUrl The URL being used to access the web service Action Detail \u00b6 DoRemoveParameter \u00b6 Remove one pre-defined parameter. DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name DoRemoveRequestHeader \u00b6 Remove one pre-defined request header by name. DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name GetCredential \u00b6 The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); GetCredential () GetHeader \u00b6 HTTP header GetHeader ( name ) Parameters: Name Type Description name string Header Name GetMethod \u00b6 The HTTP Method being used for the request (GET, POST, etc.) GetMethod () GetName \u00b6 The name of the request operation GetName () GetParameter \u00b6 Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value. GetParameter ( name ) Parameters: Name Type Description name string Name of a parameter. GetRequestBodyText \u00b6 The body of the HTTP request in raw text format GetRequestBodyText () GetUrl \u00b6 The URL being used to access the web service GetUrl () SetCredential \u00b6 The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); SetCredential ( value , value2 ) Parameters: Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one. SetHeader \u00b6 HTTP header SetHeader ( name , value ) Parameters: Name Type Description name string Header Name value string Header Value SetMethod \u00b6 The HTTP Method being used for the request (GET, POST, etc.) SetMethod ( method ) Parameters: Name Type Description method string New request method (if you ever need it!) SetParameter \u00b6 Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value. SetParameter ( name , value ) Parameters: Name Type Description name string Name of a parameter. value string Value of a parameter SetRequestBodyText \u00b6 The body of the HTTP request in raw text format SetRequestBodyText ( body ) Parameters: Name Type Description body string New version of request data SetUrl \u00b6 The URL being used to access the web service SetUrl ( url ) Parameters: Name Type Description url string New Url","title":"RESTRequest"},{"location":"Libraries/RESTRequest/#restrequest","text":"This is a JavaScript wrapper for RESTRequest","title":"RESTRequest"},{"location":"Libraries/RESTRequest/#action-summary","text":"Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential The HTTP Basic Authentication Credentials (if any). GetHeader HTTP header GetMethod The HTTP Method being used for the request (GET, POST, etc. GetName The name of the request operation GetParameter Access request parameters. GetRequestBodyText The body of the HTTP request in raw text format GetUrl The URL being used to access the web service SetCredential The HTTP Basic Authentication Credentials (if any). SetHeader HTTP header SetMethod The HTTP Method being used for the request (GET, POST, etc. SetParameter Access request parameters. SetRequestBodyText The body of the HTTP request in raw text format SetUrl The URL being used to access the web service","title":"Action Summary"},{"location":"Libraries/RESTRequest/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/RESTRequest/#doremoveparameter","text":"Remove one pre-defined parameter. DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name","title":"DoRemoveParameter"},{"location":"Libraries/RESTRequest/#doremoverequestheader","text":"Remove one pre-defined request header by name. DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name","title":"DoRemoveRequestHeader"},{"location":"Libraries/RESTRequest/#getcredential","text":"The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); GetCredential ()","title":"GetCredential"},{"location":"Libraries/RESTRequest/#getheader","text":"HTTP header GetHeader ( name ) Parameters: Name Type Description name string Header Name","title":"GetHeader"},{"location":"Libraries/RESTRequest/#getmethod","text":"The HTTP Method being used for the request (GET, POST, etc.) GetMethod ()","title":"GetMethod"},{"location":"Libraries/RESTRequest/#getname","text":"The name of the request operation GetName ()","title":"GetName"},{"location":"Libraries/RESTRequest/#getparameter","text":"Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value. GetParameter ( name ) Parameters: Name Type Description name string Name of a parameter.","title":"GetParameter"},{"location":"Libraries/RESTRequest/#getrequestbodytext","text":"The body of the HTTP request in raw text format GetRequestBodyText ()","title":"GetRequestBodyText"},{"location":"Libraries/RESTRequest/#geturl","text":"The URL being used to access the web service GetUrl ()","title":"GetUrl"},{"location":"Libraries/RESTRequest/#setcredential","text":"The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); SetCredential ( value , value2 ) Parameters: Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one.","title":"SetCredential"},{"location":"Libraries/RESTRequest/#setheader","text":"HTTP header SetHeader ( name , value ) Parameters: Name Type Description name string Header Name value string Header Value","title":"SetHeader"},{"location":"Libraries/RESTRequest/#setmethod","text":"The HTTP Method being used for the request (GET, POST, etc.) SetMethod ( method ) Parameters: Name Type Description method string New request method (if you ever need it!)","title":"SetMethod"},{"location":"Libraries/RESTRequest/#setparameter","text":"Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value. SetParameter ( name , value ) Parameters: Name Type Description name string Name of a parameter. value string Value of a parameter","title":"SetParameter"},{"location":"Libraries/RESTRequest/#setrequestbodytext","text":"The body of the HTTP request in raw text format SetRequestBodyText ( body ) Parameters: Name Type Description body string New version of request data","title":"SetRequestBodyText"},{"location":"Libraries/RESTRequest/#seturl","text":"The URL being used to access the web service SetUrl ( url ) Parameters: Name Type Description url string New Url","title":"SetUrl"},{"location":"Libraries/RESTResponse/","text":"RESTResponse \u00b6 This is a JavaScript wrapper for RESTResponse Property Summary \u00b6 Property Description GetResponseBodyObject The body of the HTTP response as a JSON object Action Summary \u00b6 Action Description GetHeader HTTP header GetIsErrorStatus 'true' when there was an error GetResponseBodyText The body of the HTTP response in raw text format GetStatusCode HTTP response code GetStatusText Text version of the response code Property Detail \u00b6 GetResponseBodyObject \u00b6 The body of the HTTP response as a JSON object Type: Action Detail \u00b6 GetHeader \u00b6 HTTP header GetHeader ( name ) Parameters: Name Type Description name string Header Name GetIsErrorStatus \u00b6 'true' when there was an error GetIsErrorStatus () GetResponseBodyText \u00b6 The body of the HTTP response in raw text format GetResponseBodyText () GetStatusCode \u00b6 HTTP response code GetStatusCode () GetStatusText \u00b6 Text version of the response code GetStatusText ()","title":"RESTResponse"},{"location":"Libraries/RESTResponse/#restresponse","text":"This is a JavaScript wrapper for RESTResponse","title":"RESTResponse"},{"location":"Libraries/RESTResponse/#property-summary","text":"Property Description GetResponseBodyObject The body of the HTTP response as a JSON object","title":"Property Summary"},{"location":"Libraries/RESTResponse/#action-summary","text":"Action Description GetHeader HTTP header GetIsErrorStatus 'true' when there was an error GetResponseBodyText The body of the HTTP response in raw text format GetStatusCode HTTP response code GetStatusText Text version of the response code","title":"Action Summary"},{"location":"Libraries/RESTResponse/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/RESTResponse/#getresponsebodyobject","text":"The body of the HTTP response as a JSON object Type:","title":"GetResponseBodyObject"},{"location":"Libraries/RESTResponse/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/RESTResponse/#getheader","text":"HTTP header GetHeader ( name ) Parameters: Name Type Description name string Header Name","title":"GetHeader"},{"location":"Libraries/RESTResponse/#getiserrorstatus","text":"'true' when there was an error GetIsErrorStatus ()","title":"GetIsErrorStatus"},{"location":"Libraries/RESTResponse/#getresponsebodytext","text":"The body of the HTTP response in raw text format GetResponseBodyText ()","title":"GetResponseBodyText"},{"location":"Libraries/RESTResponse/#getstatuscode","text":"HTTP response code GetStatusCode ()","title":"GetStatusCode"},{"location":"Libraries/RESTResponse/#getstatustext","text":"Text version of the response code GetStatusText ()","title":"GetStatusText"},{"location":"Libraries/RESTService/","text":"RESTService \u00b6 This behavior pattern implements REST service client. Behavior Pattern: RESTServiceBehavior Property Summary \u00b6 Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Method The HTTP Method being used for the request (GET, POST, etc. GetMethod SetMethod Name The name of the request operation GetName Parameter Get/Set single parameter by name. GetParameter SetParameter Parameters The list of parameters available for this request url. GetParameters SetParameters RequestBodyObject The body of the HTTP request as a JavaScript object. GetRequestBodyObject SetRequestBodyObject RequestBodyText The body of the HTTP request in raw text format GetRequestBodyText SetRequestBodyText RequestHeader Get/Set Single HTTP header by name. GetRequestHeader SetRequestHeader RequestHeaders The list of HTTP headers that are part of this request. GetRequestHeaders SetRequestHeaders ResponseBodyObject The body of the HTTP response deserialized from JSON into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned from the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service GetResponseIsErrorStatus ResponseStatusCode HTTP response code GetResponseStatusCode ResponseStatusText Text version of the response code GetResponseStatusText Url The URL being used to access the web service GetUrl SetUrl Action Summary \u00b6 Action Description DoExecute Executes a REST service operation, substitutes any of the provided parameter values if necessary. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoVerify Checks that a given part of response equals the expected value. Property Detail \u00b6 Credential \u00b6 The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); Type: object Accessors: GetCredential, SetCredential Method \u00b6 The HTTP Method being used for the request (GET, POST, etc.) Type: string Accessors: GetMethod, SetMethod Name \u00b6 The name of the request operation Type: string Accessors: GetName Parameter \u00b6 Get/Set single parameter by name. Getter Parameters: Name Type Description name string Name of a parameter. Type: object Accessors: GetParameter, SetParameter Parameters \u00b6 The list of parameters available for this request url. Sample code: var parameters = SeS ( \"Operation_Name\" ). GetParameters (); for ( var i = 0 ; i < parameters . length ; i ++ ) { var name = parameters [ i ]. Name ; var token = parameters [ i ]. TokenName ; var value = parameters [ i ]. Value ; } Type: object Accessors: GetParameters, SetParameters RequestBodyObject \u00b6 The body of the HTTP request as a JavaScript object. Sample code: var book = {}; book . Name = \"A Christmas Carol\" ; book . AuthorId = 2 ; book . GenreId = 3 ; SeS ( \"LibraryInformationSystem_Insert_Book\" ). SetRequestBodyObject ( book ); SeS ( \"LibraryInformationSystem_Insert_Book\" ). DoExecute ({ \"session_id\" : sessionId }); Type: object Accessors: GetRequestBodyObject, SetRequestBodyObject RequestBodyText \u00b6 The body of the HTTP request in raw text format Type: string Accessors: GetRequestBodyText, SetRequestBodyText RequestHeader \u00b6 Get/Set Single HTTP header by name. Getter Parameters: Name Type Description name string HTTP Header name. Type: object Accessors: GetRequestHeader, SetRequestHeader RequestHeaders \u00b6 The list of HTTP headers that are part of this request. Sample code: var headers = SeS ( \"Operation_Name\" ). GetRequestHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetRequestHeaders, SetRequestHeaders ResponseBodyObject \u00b6 The body of the HTTP response deserialized from JSON into a JavaScript object. Sample code: SeS ( \"LibraryInformationSystem_Get_BookById\" ). DoExecute ({ \"session_id\" : sessionId , \"book_id\" : bookId }); var book = SeS ( \"LibraryInformationSystem_Get_BookById\" ). GetResponseBodyObject (); Type: object Accessors: GetResponseBodyObject ResponseBodyText \u00b6 The body of the HTTP response in raw text format Type: string Accessors: GetResponseBodyText ResponseHeaders \u00b6 Returns the list of HTTP headers returned from the HTTP response. Sample code: var headers = SeS ( \"Operation_Name\" ). GetResponseHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetResponseHeaders ResponseIsErrorStatus \u00b6 Returns 'true 'if an HTTP error code came back from the web service Type: boolean Accessors: GetResponseIsErrorStatus ResponseStatusCode \u00b6 HTTP response code Type: number Accessors: GetResponseStatusCode ResponseStatusText \u00b6 Text version of the response code Type: string Accessors: GetResponseStatusText Url \u00b6 The URL being used to access the web service Type: string Accessors: GetUrl, SetUrl Action Detail \u00b6 DoExecute \u00b6 Executes a REST service operation, substitutes any of the provided parameter values if necessary. Operation fails if HTTP status code is other than 200. If that is an intention, pass ignoreStatus as true . Sample code: SeS ( \"LibraryInformationSystem_Get_BookById\" ). DoExecute ({ \"session_id\" : sessionId , \"book_id\" : bookId }); var book = SeS ( \"LibraryInformationSystem_Get_BookById\" ). GetResponseBodyObject (); DoExecute ( params , ignoreStatus ) Parameters: Name Type Description params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. ignoreStatus boolean Don't fail if operation status other than 200, just return the code Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveParameter \u00b6 Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name DoRemoveRequestHeader \u00b6 Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name DoVerify \u00b6 Checks that a given part of response equals the expected value. DoVerify ( msg , jsonPath , expectedValue ) Parameters: Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"RESTService"},{"location":"Libraries/RESTService/#restservice","text":"This behavior pattern implements REST service client. Behavior Pattern: RESTServiceBehavior","title":"RESTService"},{"location":"Libraries/RESTService/#property-summary","text":"Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Method The HTTP Method being used for the request (GET, POST, etc. GetMethod SetMethod Name The name of the request operation GetName Parameter Get/Set single parameter by name. GetParameter SetParameter Parameters The list of parameters available for this request url. GetParameters SetParameters RequestBodyObject The body of the HTTP request as a JavaScript object. GetRequestBodyObject SetRequestBodyObject RequestBodyText The body of the HTTP request in raw text format GetRequestBodyText SetRequestBodyText RequestHeader Get/Set Single HTTP header by name. GetRequestHeader SetRequestHeader RequestHeaders The list of HTTP headers that are part of this request. GetRequestHeaders SetRequestHeaders ResponseBodyObject The body of the HTTP response deserialized from JSON into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned from the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service GetResponseIsErrorStatus ResponseStatusCode HTTP response code GetResponseStatusCode ResponseStatusText Text version of the response code GetResponseStatusText Url The URL being used to access the web service GetUrl SetUrl","title":"Property Summary"},{"location":"Libraries/RESTService/#action-summary","text":"Action Description DoExecute Executes a REST service operation, substitutes any of the provided parameter values if necessary. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoVerify Checks that a given part of response equals the expected value.","title":"Action Summary"},{"location":"Libraries/RESTService/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/RESTService/#credential","text":"The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); Type: object Accessors: GetCredential, SetCredential","title":"Credential"},{"location":"Libraries/RESTService/#method","text":"The HTTP Method being used for the request (GET, POST, etc.) Type: string Accessors: GetMethod, SetMethod","title":"Method"},{"location":"Libraries/RESTService/#name","text":"The name of the request operation Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/RESTService/#parameter","text":"Get/Set single parameter by name. Getter Parameters: Name Type Description name string Name of a parameter. Type: object Accessors: GetParameter, SetParameter","title":"Parameter"},{"location":"Libraries/RESTService/#parameters","text":"The list of parameters available for this request url. Sample code: var parameters = SeS ( \"Operation_Name\" ). GetParameters (); for ( var i = 0 ; i < parameters . length ; i ++ ) { var name = parameters [ i ]. Name ; var token = parameters [ i ]. TokenName ; var value = parameters [ i ]. Value ; } Type: object Accessors: GetParameters, SetParameters","title":"Parameters"},{"location":"Libraries/RESTService/#requestbodyobject","text":"The body of the HTTP request as a JavaScript object. Sample code: var book = {}; book . Name = \"A Christmas Carol\" ; book . AuthorId = 2 ; book . GenreId = 3 ; SeS ( \"LibraryInformationSystem_Insert_Book\" ). SetRequestBodyObject ( book ); SeS ( \"LibraryInformationSystem_Insert_Book\" ). DoExecute ({ \"session_id\" : sessionId }); Type: object Accessors: GetRequestBodyObject, SetRequestBodyObject","title":"RequestBodyObject"},{"location":"Libraries/RESTService/#requestbodytext","text":"The body of the HTTP request in raw text format Type: string Accessors: GetRequestBodyText, SetRequestBodyText","title":"RequestBodyText"},{"location":"Libraries/RESTService/#requestheader","text":"Get/Set Single HTTP header by name. Getter Parameters: Name Type Description name string HTTP Header name. Type: object Accessors: GetRequestHeader, SetRequestHeader","title":"RequestHeader"},{"location":"Libraries/RESTService/#requestheaders","text":"The list of HTTP headers that are part of this request. Sample code: var headers = SeS ( \"Operation_Name\" ). GetRequestHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetRequestHeaders, SetRequestHeaders","title":"RequestHeaders"},{"location":"Libraries/RESTService/#responsebodyobject","text":"The body of the HTTP response deserialized from JSON into a JavaScript object. Sample code: SeS ( \"LibraryInformationSystem_Get_BookById\" ). DoExecute ({ \"session_id\" : sessionId , \"book_id\" : bookId }); var book = SeS ( \"LibraryInformationSystem_Get_BookById\" ). GetResponseBodyObject (); Type: object Accessors: GetResponseBodyObject","title":"ResponseBodyObject"},{"location":"Libraries/RESTService/#responsebodytext","text":"The body of the HTTP response in raw text format Type: string Accessors: GetResponseBodyText","title":"ResponseBodyText"},{"location":"Libraries/RESTService/#responseheaders","text":"Returns the list of HTTP headers returned from the HTTP response. Sample code: var headers = SeS ( \"Operation_Name\" ). GetResponseHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetResponseHeaders","title":"ResponseHeaders"},{"location":"Libraries/RESTService/#responseiserrorstatus","text":"Returns 'true 'if an HTTP error code came back from the web service Type: boolean Accessors: GetResponseIsErrorStatus","title":"ResponseIsErrorStatus"},{"location":"Libraries/RESTService/#responsestatuscode","text":"HTTP response code Type: number Accessors: GetResponseStatusCode","title":"ResponseStatusCode"},{"location":"Libraries/RESTService/#responsestatustext","text":"Text version of the response code Type: string Accessors: GetResponseStatusText","title":"ResponseStatusText"},{"location":"Libraries/RESTService/#url","text":"The URL being used to access the web service Type: string Accessors: GetUrl, SetUrl","title":"Url"},{"location":"Libraries/RESTService/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/RESTService/#doexecute","text":"Executes a REST service operation, substitutes any of the provided parameter values if necessary. Operation fails if HTTP status code is other than 200. If that is an intention, pass ignoreStatus as true . Sample code: SeS ( \"LibraryInformationSystem_Get_BookById\" ). DoExecute ({ \"session_id\" : sessionId , \"book_id\" : bookId }); var book = SeS ( \"LibraryInformationSystem_Get_BookById\" ). GetResponseBodyObject (); DoExecute ( params , ignoreStatus ) Parameters: Name Type Description params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. ignoreStatus boolean Don't fail if operation status other than 200, just return the code Optional, Default: \"false\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExecute"},{"location":"Libraries/RESTService/#doremoveparameter","text":"Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name","title":"DoRemoveParameter"},{"location":"Libraries/RESTService/#doremoverequestheader","text":"Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name","title":"DoRemoveRequestHeader"},{"location":"Libraries/RESTService/#doverify","text":"Checks that a given part of response equals the expected value. DoVerify ( msg , jsonPath , expectedValue ) Parameters: Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoVerify"},{"location":"Libraries/RVL/","text":"RVL Object \u00b6 Some common tasks related to script execution, such as calling scripts, executing separate sheets, returning, exiting and bailing out is served by RVL. Actions \u00b6 DoPlayScript \u00b6 DoPlayScript ( /**string*/ scriptPath , /**string*/ sheetName ) Play RVL sheet sheetName from workbook scriptPath passing [extraParams] for variable values. scriptPath : Path to script sheetName : Excel sheet containing the script [extraParams] : default variable values see RVL Extra Params DoPlaySheet \u00b6 DoPlaySheet ( /**string*/ sheetName ) Play RVL sheet sheetName from current workbook passing [extraParams] for variable values. sheetName : Excel sheet containing the script [extraParams] : default variable values see RVL Extra Params DoPlayTest \u00b6 DoPlayTest ( /**string*/ sstestPath ) Executes specified test with passing of additional arguments specified as extraParams . It is an analog of Global.DoInvokeTest sstestPath : Path to test [extraParams] : Param values to be passed into test. May then be accessed via Tester.GetParam . To pass sheet name use extra param name sheetName . The test at sstestPath should have Test function defined like this function Test ( params ) { RVL . DoPlayScript ( \"Main.rvl.xlsx\" , Tester . GetParam ( \"sheetName\" , \"RVL\" )); } DoPlayTestParallel \u00b6 DoPlayTestParallel ( /**string*/ sstestPath , /**objectId*/ threadsMap ) Executes specified test in parallel threads passing additional arguments specified by in threadsMap map. There are as many threads as there are rows in the map. sstestPath : Path to test threadsMap : The name of the map defining params. 1 st column - Thread ID (alphanumeric, i.e. THREAD01), other columns - parameter variables, i.e. column name g_browserLibrary , values 'Selenium Chrome', 'Selenium Firefox', etc. [extraParams] : Global variable values common for all threads. See Also \u00b6 Rapise with Selenium Grid - Parallel Test Execution (video) Rapise with Selenium Grid - Nested Parallel Test Execution (video) Exit \u00b6 Exit ( /**string*/ message , /**boolean*/ isError ) Break execution at the specified line message : Exit message isError : Specify 'false' if you want just exit without exit message GetDropdownValue \u00b6 GetDropdownValue ( /**string*/ id , /**string*/ idList , /**string*/ valList , /**string*/ xlsPath ) Remap dropdown value from one list to another id : Value to remap, the value should be from the column idList . idList : Column name of the list where id belongs to. valList : Column name of the list with values. xlsPath : Optional path to Dropdowns.xlsx . If not specified then %WORKDIR%\\Dropdowns.xlsx is used. Example. Suppose we have the following definitions of dropdowns: Then the call var stateCode = RVL . GetDropdownValue ( stateName , \"Functions.SetState.stateName\" , \"stateCode\" ) would return state code for state name. I.e. if stateName=\"Colorado\" then returned value is \"CO\". See also RVL Editor Param Dropdowns Return \u00b6 Return ( /**string*/ message ) Return from specified line. This method should be called from within RVL. message : Return message SetLocatorOpts \u00b6 SetLocatorOpts ( /**objectid*/ objectid , { optname : optvalue ,...}) Set additional locator options for specified object. This is a way to modify various script parameters such as locator , xpath , url and thus find different objects. objectid { /**objectid*/ }: Object ID Example: Flow Type Object Action ParamName ParamType ParamValue Action RVL SetLocatorOpts objectid objectid MyButton Param locator_param1 string new value1 Param locator_param2 string new value2 All params going after objectid are optional and depend on specified object's locator. If you want to reset all values to default value call this method with just objectid and no additional parameters. FormatString \u00b6 FormatString ( /**string*/ fmtString , { optname : optvalue ,...}) Format string according to the specified template. Template may contain placeholder values enclosed in curly braces, i.e.: My name is {name} . Flow Type Object Action ParamName ParamType ParamValue Action RVL FormatString fmtString string {first} plus {second} equals to {result} Param first string one Param second string five Param result string 6 This Action should put string value one plus five equals to 6 into the variable LastResult. Properties \u00b6 CurrentScriptPath \u00b6 GetCurrentScriptPath () Return path to currently executed .rvl.xls file. CurrentScriptSheet \u00b6 GetCurrentScriptSheet () Return sheet name of the currently executed .rvl.xls file.","title":"RVL Object"},{"location":"Libraries/RVL/#rvl-object","text":"Some common tasks related to script execution, such as calling scripts, executing separate sheets, returning, exiting and bailing out is served by RVL.","title":"RVL Object"},{"location":"Libraries/RVL/#actions","text":"","title":"Actions"},{"location":"Libraries/RVL/#doplayscript","text":"DoPlayScript ( /**string*/ scriptPath , /**string*/ sheetName ) Play RVL sheet sheetName from workbook scriptPath passing [extraParams] for variable values. scriptPath : Path to script sheetName : Excel sheet containing the script [extraParams] : default variable values see RVL Extra Params","title":"DoPlayScript"},{"location":"Libraries/RVL/#doplaysheet","text":"DoPlaySheet ( /**string*/ sheetName ) Play RVL sheet sheetName from current workbook passing [extraParams] for variable values. sheetName : Excel sheet containing the script [extraParams] : default variable values see RVL Extra Params","title":"DoPlaySheet"},{"location":"Libraries/RVL/#doplaytest","text":"DoPlayTest ( /**string*/ sstestPath ) Executes specified test with passing of additional arguments specified as extraParams . It is an analog of Global.DoInvokeTest sstestPath : Path to test [extraParams] : Param values to be passed into test. May then be accessed via Tester.GetParam . To pass sheet name use extra param name sheetName . The test at sstestPath should have Test function defined like this function Test ( params ) { RVL . DoPlayScript ( \"Main.rvl.xlsx\" , Tester . GetParam ( \"sheetName\" , \"RVL\" )); }","title":"DoPlayTest"},{"location":"Libraries/RVL/#doplaytestparallel","text":"DoPlayTestParallel ( /**string*/ sstestPath , /**objectId*/ threadsMap ) Executes specified test in parallel threads passing additional arguments specified by in threadsMap map. There are as many threads as there are rows in the map. sstestPath : Path to test threadsMap : The name of the map defining params. 1 st column - Thread ID (alphanumeric, i.e. THREAD01), other columns - parameter variables, i.e. column name g_browserLibrary , values 'Selenium Chrome', 'Selenium Firefox', etc. [extraParams] : Global variable values common for all threads.","title":"DoPlayTestParallel"},{"location":"Libraries/RVL/#see-also","text":"Rapise with Selenium Grid - Parallel Test Execution (video) Rapise with Selenium Grid - Nested Parallel Test Execution (video)","title":"See Also"},{"location":"Libraries/RVL/#exit","text":"Exit ( /**string*/ message , /**boolean*/ isError ) Break execution at the specified line message : Exit message isError : Specify 'false' if you want just exit without exit message","title":"Exit"},{"location":"Libraries/RVL/#getdropdownvalue","text":"GetDropdownValue ( /**string*/ id , /**string*/ idList , /**string*/ valList , /**string*/ xlsPath ) Remap dropdown value from one list to another id : Value to remap, the value should be from the column idList . idList : Column name of the list where id belongs to. valList : Column name of the list with values. xlsPath : Optional path to Dropdowns.xlsx . If not specified then %WORKDIR%\\Dropdowns.xlsx is used. Example. Suppose we have the following definitions of dropdowns: Then the call var stateCode = RVL . GetDropdownValue ( stateName , \"Functions.SetState.stateName\" , \"stateCode\" ) would return state code for state name. I.e. if stateName=\"Colorado\" then returned value is \"CO\". See also RVL Editor Param Dropdowns","title":"GetDropdownValue"},{"location":"Libraries/RVL/#return","text":"Return ( /**string*/ message ) Return from specified line. This method should be called from within RVL. message : Return message","title":"Return"},{"location":"Libraries/RVL/#setlocatoropts","text":"SetLocatorOpts ( /**objectid*/ objectid , { optname : optvalue ,...}) Set additional locator options for specified object. This is a way to modify various script parameters such as locator , xpath , url and thus find different objects. objectid { /**objectid*/ }: Object ID Example: Flow Type Object Action ParamName ParamType ParamValue Action RVL SetLocatorOpts objectid objectid MyButton Param locator_param1 string new value1 Param locator_param2 string new value2 All params going after objectid are optional and depend on specified object's locator. If you want to reset all values to default value call this method with just objectid and no additional parameters.","title":"SetLocatorOpts"},{"location":"Libraries/RVL/#formatstring","text":"FormatString ( /**string*/ fmtString , { optname : optvalue ,...}) Format string according to the specified template. Template may contain placeholder values enclosed in curly braces, i.e.: My name is {name} . Flow Type Object Action ParamName ParamType ParamValue Action RVL FormatString fmtString string {first} plus {second} equals to {result} Param first string one Param second string five Param result string 6 This Action should put string value one plus five equals to 6 into the variable LastResult.","title":"FormatString"},{"location":"Libraries/RVL/#properties","text":"","title":"Properties"},{"location":"Libraries/RVL/#currentscriptpath","text":"GetCurrentScriptPath () Return path to currently executed .rvl.xls file.","title":"CurrentScriptPath"},{"location":"Libraries/RVL/#currentscriptsheet","text":"GetCurrentScriptSheet () Return sheet name of the currently executed .rvl.xls file.","title":"CurrentScriptSheet"},{"location":"Libraries/SOAPService/","text":"SOAPService \u00b6 This behavior pattern implements SOAP service client. Behavior Pattern: SOAPServiceBehavior Property Summary \u00b6 Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Name The name of the request operation GetName ResponseBodyObject The body of the HTTP response deserialized from SOAP into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format. GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned with the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service. GetResponseIsErrorStatus Url The URL being used to access the web service. GetUrl SetUrl Action Summary \u00b6 Action Description DoExecute Executes a SOAP service operation, substituting any of the provided parameter values if necessary. DoExecuteRaw Sends a SOAP request as is. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoVerify Checks that a given part of response equals the expected value. Property Detail \u00b6 Credential \u00b6 The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Type: object Accessors: GetCredential, SetCredential Name \u00b6 The name of the request operation Type: string Accessors: GetName ResponseBodyObject \u00b6 The body of the HTTP response deserialized from SOAP into a JavaScript object. Getter Parameters: Name Type Description jsonPath string Path to a sub-object within response object. E.g. 'Body.Connection_AuthenticateResult'. Optional, Default: \"Body\". info object Empty object that will receive error information if any. Access as info.error in a calling function. Optional. Type: object Accessors: GetResponseBodyObject ResponseBodyText \u00b6 The body of the HTTP response in raw text format. Type: string Accessors: GetResponseBodyText ResponseHeaders \u00b6 Returns the list of HTTP headers returned with the HTTP response. Sample code: var headers = SeS ( \"Operation_Name\" ). GetResponseHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetResponseHeaders ResponseIsErrorStatus \u00b6 Returns 'true 'if an HTTP error code came back from the web service. Type: boolean Accessors: GetResponseIsErrorStatus Url \u00b6 The URL being used to access the web service. Type: string Accessors: GetUrl, SetUrl Action Detail \u00b6 DoExecute \u00b6 Executes a SOAP service operation, substituting any of the provided parameter values if necessary. DoExecute ( method , params , headers ) Parameters: Name Type Description method string Name of a SOAP method. params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. headers object Array of header name/value pairs. Returns: boolean: 'true' if success, 'false' otherwise. DoExecuteRaw \u00b6 Sends a SOAP request as is. DoExecuteRaw ( method , body , params ) Parameters: Name Type Description method string Name of a SOAP method. body string SOAP xml string. params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveParameter \u00b6 Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name DoRemoveRequestHeader \u00b6 Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name DoVerify \u00b6 Checks that a given part of response equals the expected value. DoVerify ( msg , jsonPath , expectedValue ) Parameters: Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SOAPService"},{"location":"Libraries/SOAPService/#soapservice","text":"This behavior pattern implements SOAP service client. Behavior Pattern: SOAPServiceBehavior","title":"SOAPService"},{"location":"Libraries/SOAPService/#property-summary","text":"Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Name The name of the request operation GetName ResponseBodyObject The body of the HTTP response deserialized from SOAP into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format. GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned with the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service. GetResponseIsErrorStatus Url The URL being used to access the web service. GetUrl SetUrl","title":"Property Summary"},{"location":"Libraries/SOAPService/#action-summary","text":"Action Description DoExecute Executes a SOAP service operation, substituting any of the provided parameter values if necessary. DoExecuteRaw Sends a SOAP request as is. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoVerify Checks that a given part of response equals the expected value.","title":"Action Summary"},{"location":"Libraries/SOAPService/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SOAPService/#credential","text":"The HTTP Basic Authentication Credentials (if any). Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Type: object Accessors: GetCredential, SetCredential","title":"Credential"},{"location":"Libraries/SOAPService/#name","text":"The name of the request operation Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/SOAPService/#responsebodyobject","text":"The body of the HTTP response deserialized from SOAP into a JavaScript object. Getter Parameters: Name Type Description jsonPath string Path to a sub-object within response object. E.g. 'Body.Connection_AuthenticateResult'. Optional, Default: \"Body\". info object Empty object that will receive error information if any. Access as info.error in a calling function. Optional. Type: object Accessors: GetResponseBodyObject","title":"ResponseBodyObject"},{"location":"Libraries/SOAPService/#responsebodytext","text":"The body of the HTTP response in raw text format. Type: string Accessors: GetResponseBodyText","title":"ResponseBodyText"},{"location":"Libraries/SOAPService/#responseheaders","text":"Returns the list of HTTP headers returned with the HTTP response. Sample code: var headers = SeS ( \"Operation_Name\" ). GetResponseHeaders (); for ( var i = 0 ; i < headers . length ; i ++ ) { var name = headers [ i ]. Name ; var value = headers [ i ]. Value ; } Type: object Accessors: GetResponseHeaders","title":"ResponseHeaders"},{"location":"Libraries/SOAPService/#responseiserrorstatus","text":"Returns 'true 'if an HTTP error code came back from the web service. Type: boolean Accessors: GetResponseIsErrorStatus","title":"ResponseIsErrorStatus"},{"location":"Libraries/SOAPService/#url","text":"The URL being used to access the web service. Type: string Accessors: GetUrl, SetUrl","title":"Url"},{"location":"Libraries/SOAPService/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SOAPService/#doexecute","text":"Executes a SOAP service operation, substituting any of the provided parameter values if necessary. DoExecute ( method , params , headers ) Parameters: Name Type Description method string Name of a SOAP method. params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. headers object Array of header name/value pairs. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExecute"},{"location":"Libraries/SOAPService/#doexecuteraw","text":"Sends a SOAP request as is. DoExecuteRaw ( method , body , params ) Parameters: Name Type Description method string Name of a SOAP method. body string SOAP xml string. params object JavaScript object {\"name1\": \"value1\", \"name2\": \"value2\" } . Parameter values that should be passed to the web service operation. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExecuteRaw"},{"location":"Libraries/SOAPService/#doremoveparameter","text":"Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name","title":"DoRemoveParameter"},{"location":"Libraries/SOAPService/#doremoverequestheader","text":"Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name","title":"DoRemoveRequestHeader"},{"location":"Libraries/SOAPService/#doverify","text":"Checks that a given part of response equals the expected value. DoVerify ( msg , jsonPath , expectedValue ) Parameters: Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoVerify"},{"location":"Libraries/SSTab/","text":"SSTab \u00b6 SSTab Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: SSTabBehavior Property Summary \u00b6 Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName , clickType ) Parameters: Name Type Description tabName string Tab name to select clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"SSTab"},{"location":"Libraries/SSTab/#sstab","text":"SSTab Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: SSTabBehavior","title":"SSTab"},{"location":"Libraries/SSTab/#property-summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/SSTab/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/SSTab/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SSTab/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/SSTab/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SSTab/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName , clickType ) Parameters: Name Type Description tabName string Tab name to select clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/SWTComboBox/","text":"SWTComboBox \u00b6 Java SWT Combobox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( text ) Parameters: Name Type Description text string Text to enter into the edit box. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SWTComboBox"},{"location":"Libraries/SWTComboBox/#swtcombobox","text":"Java SWT Combobox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTComboBoxBehavior","title":"SWTComboBox"},{"location":"Libraries/SWTComboBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/SWTComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/SWTComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SWTComboBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/SWTComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SWTComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( text ) Parameters: Name Type Description text string Text to enter into the edit box. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/SWTComboBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/SWTComboBoxEdit/","text":"SWTComboBoxEdit \u00b6 Java SWT Editable Combobox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( text ) Parameters: Name Type Description text string Text to enter into the edit box. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SWTComboBoxEdit"},{"location":"Libraries/SWTComboBoxEdit/#swtcomboboxedit","text":"Java SWT Editable Combobox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTComboBoxBehavior","title":"SWTComboBoxEdit"},{"location":"Libraries/SWTComboBoxEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/SWTComboBoxEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/SWTComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SWTComboBoxEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/SWTComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SWTComboBoxEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( text ) Parameters: Name Type Description text string Text to enter into the edit box. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/SWTComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/SWTList/","text":"SWTList \u00b6 Java SWT List. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTListBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount SetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount SetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount, SetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems, SetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount, SetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Performs click on the item DoClickItem ( nameCaptionIndex , xOffset , yOffset , clickType ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if successful, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SWTList"},{"location":"Libraries/SWTList/#swtlist","text":"Java SWT List. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTListBehavior","title":"SWTList"},{"location":"Libraries/SWTList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount SetSelectionCount","title":"Property Summary"},{"location":"Libraries/SWTList/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/SWTList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SWTList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount, SetItemCount","title":"ItemCount"},{"location":"Libraries/SWTList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/SWTList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/SWTList/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/SWTList/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/SWTList/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems, SetSelectedItems","title":"SelectedItems"},{"location":"Libraries/SWTList/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/SWTList/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount, SetSelectionCount","title":"SelectionCount"},{"location":"Libraries/SWTList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SWTList/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/SWTList/#doclickitem","text":"Performs click on the item DoClickItem ( nameCaptionIndex , xOffset , yOffset , clickType ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/SWTList/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/SWTList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/SWTTree/","text":"SWTTree \u00b6 Java SWT Tree. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTTreeBehavior Property Summary \u00b6 Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount SetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected Action Summary \u00b6 Action Description DoCollapse Collapses specific node in the tree. DoExpand Expands a specific node in the tree. DoSelectItem Selects specified item in the tree. Property Detail \u00b6 Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Type: boolean Accessors: GetChecked, SetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount, SetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Type: string|boolean Accessors: GetNodeText, SetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected Action Detail \u00b6 DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands a specific node in the tree. DoExpand ( node ) Parameters: Name Type Description node string Name of the node Returns: boolean: 'true' if successful, 'false' otherwise. DoSelectItem \u00b6 Selects specified item in the tree. DoSelectItem ( value ) Parameters: Name Type Description value string Item to select Returns: boolean: 'true' if successful, 'false' otherwise.","title":"SWTTree"},{"location":"Libraries/SWTTree/#swttree","text":"Java SWT Tree. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: SWTTreeBehavior","title":"SWTTree"},{"location":"Libraries/SWTTree/#property-summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount SetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected","title":"Property Summary"},{"location":"Libraries/SWTTree/#action-summary","text":"Action Description DoCollapse Collapses specific node in the tree. DoExpand Expands a specific node in the tree. DoSelectItem Selects specified item in the tree.","title":"Action Summary"},{"location":"Libraries/SWTTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SWTTree/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/SWTTree/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount, SetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/SWTTree/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded","title":"Expanded"},{"location":"Libraries/SWTTree/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Type: string|boolean Accessors: GetNodeText, SetNodeText","title":"NodeText"},{"location":"Libraries/SWTTree/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected","title":"Selected"},{"location":"Libraries/SWTTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SWTTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/SWTTree/#doexpand","text":"Expands a specific node in the tree. DoExpand ( node ) Parameters: Name Type Description node string Name of the node Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/SWTTree/#doselectitem","text":"Selects specified item in the tree. DoSelectItem ( value ) Parameters: Name Type Description value string Item to select Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/Screenshot/","text":"Screenshot \u00b6 This is a JavaScript wrapper for Screenshot of Selenium .NET library. Action Summary \u00b6 Action Description SaveAsFile Saves the screenshot to a file. Action Detail \u00b6 SaveAsFile \u00b6 Saves the screenshot to a file. SaveAsFile ( fileName , format ) Parameters: Name Type Description fileName string Path to a file format string Format of the image, one of bmp, emf, exif, gif, icon, jpeg, png, tiff, wmf","title":"Screenshot"},{"location":"Libraries/Screenshot/#screenshot","text":"This is a JavaScript wrapper for Screenshot of Selenium .NET library.","title":"Screenshot"},{"location":"Libraries/Screenshot/#action-summary","text":"Action Description SaveAsFile Saves the screenshot to a file.","title":"Action Summary"},{"location":"Libraries/Screenshot/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Screenshot/#saveasfile","text":"Saves the screenshot to a file. SaveAsFile ( fileName , format ) Parameters: Name Type Description fileName string Path to a file format string Format of the image, one of bmp, emf, exif, gif, icon, jpeg, png, tiff, wmf","title":"SaveAsFile"},{"location":"Libraries/SeSActiveXObjectRule/","text":"SeSActiveXObjectRule \u00b6","title":"SeSActiveXObjectRule"},{"location":"Libraries/SeSActiveXObjectRule/#sesactivexobjectrule","text":"","title":"SeSActiveXObjectRule"},{"location":"Libraries/SeSC1TrueDBGridRule/","text":"SeSC1TrueDBGridRule \u00b6","title":"SeSC1TrueDBGridRule"},{"location":"Libraries/SeSC1TrueDBGridRule/#sesc1truedbgridrule","text":"","title":"SeSC1TrueDBGridRule"},{"location":"Libraries/SeSC1TrueDBListComboRule/","text":"SeSC1TrueDBListComboRule \u00b6","title":"SeSC1TrueDBListComboRule"},{"location":"Libraries/SeSC1TrueDBListComboRule/#sesc1truedblistcomborule","text":"","title":"SeSC1TrueDBListComboRule"},{"location":"Libraries/SeSC1TrueDBListRule/","text":"SeSC1TrueDBListRule \u00b6","title":"SeSC1TrueDBListRule"},{"location":"Libraries/SeSC1TrueDBListRule/#sesc1truedblistrule","text":"","title":"SeSC1TrueDBListRule"},{"location":"Libraries/SeSMSComCtlToolbarRule/","text":"SeSMSComCtlToolbarRule \u00b6","title":"SeSMSComCtlToolbarRule"},{"location":"Libraries/SeSMSComCtlToolbarRule/#sesmscomctltoolbarrule","text":"","title":"SeSMSComCtlToolbarRule"},{"location":"Libraries/SeSReportException/","text":"SeSReportException \u00b6 Used to show exception in the report. Action Summary \u00b6 Action Description SeSReportException Used to show exception in the report. Action Detail \u00b6 SeSReportException \u00b6 Used to show exception in the report. SeSReportException ( e ) Parameters: Name Type Description e Error Error object.","title":"SeSReportException"},{"location":"Libraries/SeSReportException/#sesreportexception","text":"Used to show exception in the report.","title":"SeSReportException"},{"location":"Libraries/SeSReportException/#action-summary","text":"Action Description SeSReportException Used to show exception in the report.","title":"Action Summary"},{"location":"Libraries/SeSReportException/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSReportException/#sesreportexception_1","text":"Used to show exception in the report. SeSReportException ( e ) Parameters: Name Type Description e Error Error object.","title":"SeSReportException"},{"location":"Libraries/SeSReportFile/","text":"SeSReportFile \u00b6 Used to attach a file to the report. Action Summary \u00b6 Action Description SeSReportFile Used to attach a file to the report. Action Detail \u00b6 SeSReportFile \u00b6 Used to attach a file to the report. SeSReportFile ( path , caption ) Parameters: Name Type Description path string Path to a file. caption string Caption to show in the report.","title":"SeSReportFile"},{"location":"Libraries/SeSReportFile/#sesreportfile","text":"Used to attach a file to the report.","title":"SeSReportFile"},{"location":"Libraries/SeSReportFile/#action-summary","text":"Action Description SeSReportFile Used to attach a file to the report.","title":"Action Summary"},{"location":"Libraries/SeSReportFile/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSReportFile/#sesreportfile_1","text":"Used to attach a file to the report. SeSReportFile ( path , caption ) Parameters: Name Type Description path string Path to a file. caption string Caption to show in the report.","title":"SeSReportFile"},{"location":"Libraries/SeSReportImage/","text":"SeSReportImage \u00b6 Used to show a bitmap picture in the report. Action Summary \u00b6 Action Description SeSReportImage Used to show a bitmap picture in the report. Action Detail \u00b6 SeSReportImage \u00b6 Used to show a bitmap picture in the report. SeSReportImage ( imgWrapperOrPath , caption ) Parameters: Name Type Description imgWrapperOrPath ImageWrapper | string Instance of image wrapper with captured image or path to the image. caption string Image label. Optional, Default: \"Image\".","title":"SeSReportImage"},{"location":"Libraries/SeSReportImage/#sesreportimage","text":"Used to show a bitmap picture in the report.","title":"SeSReportImage"},{"location":"Libraries/SeSReportImage/#action-summary","text":"Action Description SeSReportImage Used to show a bitmap picture in the report.","title":"Action Summary"},{"location":"Libraries/SeSReportImage/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSReportImage/#sesreportimage_1","text":"Used to show a bitmap picture in the report. SeSReportImage ( imgWrapperOrPath , caption ) Parameters: Name Type Description imgWrapperOrPath ImageWrapper | string Instance of image wrapper with captured image or path to the image. caption string Image label. Optional, Default: \"Image\".","title":"SeSReportImage"},{"location":"Libraries/SeSReportLink/","text":"SeSReportLink \u00b6 Used to show link (url and text) in the report. Action Summary \u00b6 Action Description SeSReportLink Used to show link (url and text) in the report. Action Detail \u00b6 SeSReportLink \u00b6 Used to show link (url and text) in the report. SeSReportLink ( url , text ) Parameters: Name Type Description url string Actual link. text string Text to show in the report.","title":"SeSReportLink"},{"location":"Libraries/SeSReportLink/#sesreportlink","text":"Used to show link (url and text) in the report.","title":"SeSReportLink"},{"location":"Libraries/SeSReportLink/#action-summary","text":"Action Description SeSReportLink Used to show link (url and text) in the report.","title":"Action Summary"},{"location":"Libraries/SeSReportLink/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSReportLink/#sesreportlink_1","text":"Used to show link (url and text) in the report. SeSReportLink ( url , text ) Parameters: Name Type Description url string Actual link. text string Text to show in the report.","title":"SeSReportLink"},{"location":"Libraries/SeSReportText/","text":"SeSReportText \u00b6 Used to show long text message in the report. Action Summary \u00b6 Action Description SeSReportText Used to show long text message in the report. Action Detail \u00b6 SeSReportText \u00b6 Used to show long text message in the report. SeSReportText ( txt , caption ) Parameters: Name Type Description txt string Message text. caption string Message caption. Optional.","title":"SeSReportText"},{"location":"Libraries/SeSReportText/#sesreporttext","text":"Used to show long text message in the report.","title":"SeSReportText"},{"location":"Libraries/SeSReportText/#action-summary","text":"Action Description SeSReportText Used to show long text message in the report.","title":"Action Summary"},{"location":"Libraries/SeSReportText/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSReportText/#sesreporttext_1","text":"Used to show long text message in the report. SeSReportText ( txt , caption ) Parameters: Name Type Description txt string Message text. caption string Message caption. Optional.","title":"SeSReportText"},{"location":"Libraries/SeSSSTabCtlWndClassRule/","text":"SeSSSTabCtlWndClassRule \u00b6","title":"SeSSSTabCtlWndClassRule"},{"location":"Libraries/SeSSSTabCtlWndClassRule/#sessstabctlwndclassrule","text":"","title":"SeSSSTabCtlWndClassRule"},{"location":"Libraries/SeSSimulatedObject/","text":"SeSSimulatedObject \u00b6 Generic SeSSimulated. This is a rule for simulated objects. Behavior Pattern: Win32Generic Property Summary \u00b6 Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys). Property Detail \u00b6 Bitmap \u00b6 UI Image of the object. Type: ImageWrapper Accessors: GetBitmap BWBitmap \u00b6 UI Image of the object in 1-bit format (black&white). Type: ImageWrapper Accessors: GetBWBitmap Class \u00b6 Class of the object. Type: string Accessors: GetClass Height \u00b6 Height of the object. Type: number Accessors: GetHeight Name \u00b6 Name of the object. Type: string Accessors: GetName ObjectType \u00b6 SeSMatcherRule type for this object. Type: string Accessors: GetObjectType State \u00b6 State of the object. Type: string Accessors: GetState Value \u00b6 Value of the object. Type: string Accessors: GetValue, SetValue Width \u00b6 Width of the object. Type: number Accessors: GetWidth WindowText \u00b6 Window text of the object. Type: string Accessors: GetWindowText, SetWindowText X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Performs default action for an object. If the object doesn't have default action then 'LClick' is performed. DoAction () DoAnalogPlay \u00b6 Plays analog recording using coordinates relative to this object. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left corner Optional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner. Optional. DoClick \u00b6 Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( clickType , xOffset , yOffset ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoEnsureVisible \u00b6 Makes sure specified element is visible on the screen. DoEnsureVisible () DoLButtonDown \u00b6 Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor. DoLButtonDown () DoLButtonUp \u00b6 Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect. DoLButtonUp () DoLClick \u00b6 Performs a left click at the center of an object or at the specified location. DoLClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoLDClick \u00b6 Performs a left double click at the center of an object or at the specified location. DoLDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMButtonDown \u00b6 Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor. DoMButtonDown () DoMButtonUp \u00b6 Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect. DoMButtonUp () DoMClick \u00b6 Performs a middle click at the center of an object or at the specified location. DoMClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMDClick \u00b6 Performs a middle double click at the center of an object or at the specified location. DoMDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMouseMove \u00b6 Moves mouse cursor to a location relative to this object position. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. DoRButtonDown \u00b6 Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor. DoRButtonDown () DoRButtonUp \u00b6 Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect. DoRButtonUp () DoRClick \u00b6 Performs a right click at the center of an object or at the specified location. DoRClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoRDClick \u00b6 Performs a right double click at the center of an object or at the specified location. DoRDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoSendKeys \u00b6 Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys DoSendKeys ( keys ) Parameters: Name Type Description keys string A sequence of keystrokes. DoSendText \u00b6 Sends text to the active application as is (while SendKeys also supports sending special keys). DoSendText ( text ) Parameters: Name Type Description text string A sequence of keystrokes.","title":"SeSSimulatedObject"},{"location":"Libraries/SeSSimulatedObject/#sessimulatedobject","text":"Generic SeSSimulated. This is a rule for simulated objects. Behavior Pattern: Win32Generic","title":"SeSSimulatedObject"},{"location":"Libraries/SeSSimulatedObject/#property-summary","text":"Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/SeSSimulatedObject/#action-summary","text":"Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys).","title":"Action Summary"},{"location":"Libraries/SeSSimulatedObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SeSSimulatedObject/#bitmap","text":"UI Image of the object. Type: ImageWrapper Accessors: GetBitmap","title":"Bitmap"},{"location":"Libraries/SeSSimulatedObject/#bwbitmap","text":"UI Image of the object in 1-bit format (black&white). Type: ImageWrapper Accessors: GetBWBitmap","title":"BWBitmap"},{"location":"Libraries/SeSSimulatedObject/#class","text":"Class of the object. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/SeSSimulatedObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/SeSSimulatedObject/#name","text":"Name of the object. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/SeSSimulatedObject/#objecttype","text":"SeSMatcherRule type for this object. Type: string Accessors: GetObjectType","title":"ObjectType"},{"location":"Libraries/SeSSimulatedObject/#state","text":"State of the object. Type: string Accessors: GetState","title":"State"},{"location":"Libraries/SeSSimulatedObject/#value","text":"Value of the object. Type: string Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/SeSSimulatedObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/SeSSimulatedObject/#windowtext","text":"Window text of the object. Type: string Accessors: GetWindowText, SetWindowText","title":"WindowText"},{"location":"Libraries/SeSSimulatedObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/SeSSimulatedObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/SeSSimulatedObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SeSSimulatedObject/#doaction","text":"Performs default action for an object. If the object doesn't have default action then 'LClick' is performed. DoAction ()","title":"DoAction"},{"location":"Libraries/SeSSimulatedObject/#doanalogplay","text":"Plays analog recording using coordinates relative to this object. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left corner Optional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner. Optional.","title":"DoAnalogPlay"},{"location":"Libraries/SeSSimulatedObject/#doclick","text":"Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( clickType , xOffset , yOffset ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoClick"},{"location":"Libraries/SeSSimulatedObject/#doensurevisible","text":"Makes sure specified element is visible on the screen. DoEnsureVisible ()","title":"DoEnsureVisible"},{"location":"Libraries/SeSSimulatedObject/#dolbuttondown","text":"Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor. DoLButtonDown ()","title":"DoLButtonDown"},{"location":"Libraries/SeSSimulatedObject/#dolbuttonup","text":"Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect. DoLButtonUp ()","title":"DoLButtonUp"},{"location":"Libraries/SeSSimulatedObject/#dolclick","text":"Performs a left click at the center of an object or at the specified location. DoLClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoLClick"},{"location":"Libraries/SeSSimulatedObject/#doldclick","text":"Performs a left double click at the center of an object or at the specified location. DoLDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoLDClick"},{"location":"Libraries/SeSSimulatedObject/#dombuttondown","text":"Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor. DoMButtonDown ()","title":"DoMButtonDown"},{"location":"Libraries/SeSSimulatedObject/#dombuttonup","text":"Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect. DoMButtonUp ()","title":"DoMButtonUp"},{"location":"Libraries/SeSSimulatedObject/#domclick","text":"Performs a middle click at the center of an object or at the specified location. DoMClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoMClick"},{"location":"Libraries/SeSSimulatedObject/#domdclick","text":"Performs a middle double click at the center of an object or at the specified location. DoMDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoMDClick"},{"location":"Libraries/SeSSimulatedObject/#domousemove","text":"Moves mouse cursor to a location relative to this object position. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional.","title":"DoMouseMove"},{"location":"Libraries/SeSSimulatedObject/#dorbuttondown","text":"Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor. DoRButtonDown ()","title":"DoRButtonDown"},{"location":"Libraries/SeSSimulatedObject/#dorbuttonup","text":"Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect. DoRButtonUp ()","title":"DoRButtonUp"},{"location":"Libraries/SeSSimulatedObject/#dorclick","text":"Performs a right click at the center of an object or at the specified location. DoRClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoRClick"},{"location":"Libraries/SeSSimulatedObject/#dordclick","text":"Performs a right double click at the center of an object or at the specified location. DoRDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoRDClick"},{"location":"Libraries/SeSSimulatedObject/#dosendkeys","text":"Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys DoSendKeys ( keys ) Parameters: Name Type Description keys string A sequence of keystrokes.","title":"DoSendKeys"},{"location":"Libraries/SeSSimulatedObject/#dosendtext","text":"Sends text to the active application as is (while SendKeys also supports sending special keys). DoSendText ( text ) Parameters: Name Type Description text string A sequence of keystrokes.","title":"DoSendText"},{"location":"Libraries/SeSTabStrip20WndClassRule/","text":"SeSTabStrip20WndClassRule \u00b6","title":"SeSTabStrip20WndClassRule"},{"location":"Libraries/SeSTabStrip20WndClassRule/#sestabstrip20wndclassrule","text":"","title":"SeSTabStrip20WndClassRule"},{"location":"Libraries/Session/","text":"Session \u00b6 Session object for SOAP and REST services. Action Summary \u00b6 Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential Returns HTTP Basic Authentication credentials (if any). GetNewRequest Create new RESTService object with 'GET' method and specified url . GetParameters Return common request parameters (array of `[{'Name':somename,'Value':somevalue},. GetRequestHeaders Return common HTTP Headers applied to each REST or SOAP request (array of `[{'Name':somename,'Value':somevalue},. GetRESTRequest Create new RESTService object with 'GET' method and specified url . SetBaseUrl Enable URL replacement for all further requests. SetCredential Sets HTTP Basic Authentication Credentials. SetIgnoreStatus Set to true to prevent REST requests with non 200 status code from failing the test. SetParameter Sets common request parameter. SetParameters Sets common request parameters. SetRequestHeader Sets common request header. SetRequestHeaders Sets common HTTP Headers applied to each REST or SOAP request. SetUrl Deprecated. Action Detail \u00b6 DoRemoveParameter \u00b6 Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name DoRemoveRequestHeader \u00b6 Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name GetCredential \u00b6 Returns HTTP Basic Authentication credentials (if any). GetCredential () GetNewRequest \u00b6 Create new RESTService object with 'GET' method and specified url . GetNewRequest ( url , name ) Parameters: Name Type Description url string Request URL name string Request name used to display in the report Optional. GetParameters \u00b6 Return common request parameters (array of [{'Name':somename,'Value':somevalue},...] ) GetParameters () GetRequestHeaders \u00b6 Return common HTTP Headers applied to each REST or SOAP request (array of [{'Name':somename,'Value':somevalue},...] ) GetRequestHeaders () GetRESTRequest \u00b6 Create new RESTService object with 'GET' method and specified url . GetRESTRequest ( defNameOrPath , id ) Parameters: Name Type Description defNameOrPath string Path to the .rest definition file id string Name of the request (as specified in the .rest definition file) SetBaseUrl \u00b6 Enable URL replacement for all further requests. If request URL starts with oldUrl then replace the beginning with newUrl. Requires Rapise 6.6+ SetBaseUrl ( oldUrl , newUrl ) Parameters: Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl SetCredential \u00b6 Sets HTTP Basic Authentication Credentials. Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); SetCredential ( value , value2 ) Parameters: Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one. SetIgnoreStatus \u00b6 Set to true to prevent REST requests with non 200 status code from failing the test. It would <req>.DoExecute() will just return true / false but the line in report will always be marked as Passed . SetIgnoreStatus ( ignore ) Parameters: Name Type Description ignore boolean true to ignore status code SetParameter \u00b6 Sets common request parameter. This parameter will be applied to all further REST and SOAP requests. SetParameter ( name , value ) Parameters: Name Type Description name string Parameter name value string Parameter value SetParameters \u00b6 Sets common request parameters. These parameters will be applied to all further REST and SOAP requests. Accepts one of: Full array of parameters: [{'Name':somename,'Value':somevalue},...] Single parameter as object: {'Name':somename,'Value':somevalue} Single parameter as 2 input parameters: Session.SetParameters(name,value) . SetParameters ( requestParam , optValueVal ) Parameters: Name Type Description requestParam object Parameters or single parameter. optValueVal string Parameter value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be Session.SetParameters('name','value') Optional. SetRequestHeader \u00b6 Sets common request header. This header will be applied to all further REST and SOAP requests. SetRequestHeader ( name , value ) Parameters: Name Type Description name string HTTP header name value string HTTP header value SetRequestHeaders \u00b6 Sets common HTTP Headers applied to each REST or SOAP request. Accepts one of: Full array of headers: [{'Name':somename,'Value':somevalue},...] Single header as object: {'Name':somename,'Value':somevalue} Single header as 2 input parameters: Session.SetRequestHeaders(name, value) SetRequestHeaders ( requestParam , optValueVal ) Parameters: Name Type Description requestParam object Header(s) object or single header name. optValueVal string Header value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be Session.SetRequestHeaders('name','value') Optional. SetUrl \u00b6 Deprecated. Same as SetBaseUrl . SetUrl ( oldUrl , newUrl ) Parameters: Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl","title":"Session"},{"location":"Libraries/Session/#session","text":"Session object for SOAP and REST services.","title":"Session"},{"location":"Libraries/Session/#action-summary","text":"Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential Returns HTTP Basic Authentication credentials (if any). GetNewRequest Create new RESTService object with 'GET' method and specified url . GetParameters Return common request parameters (array of `[{'Name':somename,'Value':somevalue},. GetRequestHeaders Return common HTTP Headers applied to each REST or SOAP request (array of `[{'Name':somename,'Value':somevalue},. GetRESTRequest Create new RESTService object with 'GET' method and specified url . SetBaseUrl Enable URL replacement for all further requests. SetCredential Sets HTTP Basic Authentication Credentials. SetIgnoreStatus Set to true to prevent REST requests with non 200 status code from failing the test. SetParameter Sets common request parameter. SetParameters Sets common request parameters. SetRequestHeader Sets common request header. SetRequestHeaders Sets common HTTP Headers applied to each REST or SOAP request. SetUrl Deprecated.","title":"Action Summary"},{"location":"Libraries/Session/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Session/#doremoveparameter","text":"Remove one pre-defined parameter. Requires Rapise 6.6+ DoRemoveParameter ( name ) Parameters: Name Type Description name string Parameter name","title":"DoRemoveParameter"},{"location":"Libraries/Session/#doremoverequestheader","text":"Remove one pre-defined request header by name. Requires Rapise 6.6+ DoRemoveRequestHeader ( name ) Parameters: Name Type Description name string Header name","title":"DoRemoveRequestHeader"},{"location":"Libraries/Session/#getcredential","text":"Returns HTTP Basic Authentication credentials (if any). GetCredential ()","title":"GetCredential"},{"location":"Libraries/Session/#getnewrequest","text":"Create new RESTService object with 'GET' method and specified url . GetNewRequest ( url , name ) Parameters: Name Type Description url string Request URL name string Request name used to display in the report Optional.","title":"GetNewRequest"},{"location":"Libraries/Session/#getparameters","text":"Return common request parameters (array of [{'Name':somename,'Value':somevalue},...] ) GetParameters ()","title":"GetParameters"},{"location":"Libraries/Session/#getrequestheaders","text":"Return common HTTP Headers applied to each REST or SOAP request (array of [{'Name':somename,'Value':somevalue},...] ) GetRequestHeaders ()","title":"GetRequestHeaders"},{"location":"Libraries/Session/#getrestrequest","text":"Create new RESTService object with 'GET' method and specified url . GetRESTRequest ( defNameOrPath , id ) Parameters: Name Type Description defNameOrPath string Path to the .rest definition file id string Name of the request (as specified in the .rest definition file)","title":"GetRESTRequest"},{"location":"Libraries/Session/#setbaseurl","text":"Enable URL replacement for all further requests. If request URL starts with oldUrl then replace the beginning with newUrl. Requires Rapise 6.6+ SetBaseUrl ( oldUrl , newUrl ) Parameters: Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl","title":"SetBaseUrl"},{"location":"Libraries/Session/#setcredential","text":"Sets HTTP Basic Authentication Credentials. Sample code: var credential = {}; credential . UserName = \"fredbloggs\" ; credential . Password = \"MyPassword\" ; SeS ( \"Operation_Name\" ). SetCredential ( credential ); Another way is to pass user name and password as first and second parameter respectively, e.g. SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\"); SetCredential ( value , value2 ) Parameters: Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one.","title":"SetCredential"},{"location":"Libraries/Session/#setignorestatus","text":"Set to true to prevent REST requests with non 200 status code from failing the test. It would <req>.DoExecute() will just return true / false but the line in report will always be marked as Passed . SetIgnoreStatus ( ignore ) Parameters: Name Type Description ignore boolean true to ignore status code","title":"SetIgnoreStatus"},{"location":"Libraries/Session/#setparameter","text":"Sets common request parameter. This parameter will be applied to all further REST and SOAP requests. SetParameter ( name , value ) Parameters: Name Type Description name string Parameter name value string Parameter value","title":"SetParameter"},{"location":"Libraries/Session/#setparameters","text":"Sets common request parameters. These parameters will be applied to all further REST and SOAP requests. Accepts one of: Full array of parameters: [{'Name':somename,'Value':somevalue},...] Single parameter as object: {'Name':somename,'Value':somevalue} Single parameter as 2 input parameters: Session.SetParameters(name,value) . SetParameters ( requestParam , optValueVal ) Parameters: Name Type Description requestParam object Parameters or single parameter. optValueVal string Parameter value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be Session.SetParameters('name','value') Optional.","title":"SetParameters"},{"location":"Libraries/Session/#setrequestheader","text":"Sets common request header. This header will be applied to all further REST and SOAP requests. SetRequestHeader ( name , value ) Parameters: Name Type Description name string HTTP header name value string HTTP header value","title":"SetRequestHeader"},{"location":"Libraries/Session/#setrequestheaders","text":"Sets common HTTP Headers applied to each REST or SOAP request. Accepts one of: Full array of headers: [{'Name':somename,'Value':somevalue},...] Single header as object: {'Name':somename,'Value':somevalue} Single header as 2 input parameters: Session.SetRequestHeaders(name, value) SetRequestHeaders ( requestParam , optValueVal ) Parameters: Name Type Description requestParam object Header(s) object or single header name. optValueVal string Header value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be Session.SetRequestHeaders('name','value') Optional.","title":"SetRequestHeaders"},{"location":"Libraries/Session/#seturl","text":"Deprecated. Same as SetBaseUrl . SetUrl ( oldUrl , newUrl ) Parameters: Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl","title":"SetUrl"},{"location":"Libraries/SftTree/","text":"SftTree \u00b6 This behavior pattern implements standard behavior for Tree control. Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: ActiveXSftTreeBehavior Property Summary \u00b6 Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded ItemsCount Number of rows in the table. GetItemsCount Node Selected node or a node specified by the input parameters. GetNode NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected SiblingsAfter Number of siblings after the selected node or a node specified by the input parameters. GetSiblingsAfter Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFullText Returns text representation of the table. Property Detail \u00b6 ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded ItemsCount \u00b6 Number of rows in the table. Type: number Accessors: GetItemsCount Node \u00b6 Selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: object Accessors: GetNode NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number Zero-based index of a column. Optional, Default: \"0\". Type: string|boolean Accessors: GetNodeText, SetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected SiblingsAfter \u00b6 Number of siblings after the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path separator pathType Type: number Accessors: GetSiblingsAfter Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoFullText \u00b6 Returns text representation of the table. DoFullText ( fileName ) Parameters: Name Type Description fileName string Name of a file that should hold text representation of the grid. Optional. Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"SftTree"},{"location":"Libraries/SftTree/#sfttree","text":"This behavior pattern implements standard behavior for Tree control. Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: ActiveXSftTreeBehavior","title":"SftTree"},{"location":"Libraries/SftTree/#property-summary","text":"Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded ItemsCount Number of rows in the table. GetItemsCount Node Selected node or a node specified by the input parameters. GetNode NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected SiblingsAfter Number of siblings after the selected node or a node specified by the input parameters. GetSiblingsAfter","title":"Property Summary"},{"location":"Libraries/SftTree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFullText Returns text representation of the table.","title":"Action Summary"},{"location":"Libraries/SftTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SftTree/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/SftTree/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded","title":"Expanded"},{"location":"Libraries/SftTree/#itemscount","text":"Number of rows in the table. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/SftTree/#node","text":"Selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: object Accessors: GetNode","title":"Node"},{"location":"Libraries/SftTree/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number Zero-based index of a column. Optional, Default: \"0\". Type: string|boolean Accessors: GetNodeText, SetNodeText","title":"NodeText"},{"location":"Libraries/SftTree/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected","title":"Selected"},{"location":"Libraries/SftTree/#siblingsafter","text":"Number of siblings after the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path separator pathType Type: number Accessors: GetSiblingsAfter","title":"SiblingsAfter"},{"location":"Libraries/SftTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SftTree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/SftTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/SftTree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/SftTree/#dofulltext","text":"Returns text representation of the table. DoFullText ( fileName ) Parameters: Name Type Description fileName string Name of a file that should hold text representation of the grid. Optional. Returns: string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.","title":"DoFullText"},{"location":"Libraries/SimpleButton/","text":"SimpleButton \u00b6 Button control. Extends SeSSimulatedObject Behavior Pattern: SimplePressable Action Summary \u00b6 Action Description DoAction Presses button using mouse click or default action. Action Detail \u00b6 DoAction \u00b6 Presses button using mouse click or default action. DoAction ()","title":"SimpleButton"},{"location":"Libraries/SimpleButton/#simplebutton","text":"Button control. Extends SeSSimulatedObject Behavior Pattern: SimplePressable","title":"SimpleButton"},{"location":"Libraries/SimpleButton/#action-summary","text":"Action Description DoAction Presses button using mouse click or default action.","title":"Action Summary"},{"location":"Libraries/SimpleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleButton/#doaction","text":"Presses button using mouse click or default action. DoAction ()","title":"DoAction"},{"location":"Libraries/SimpleButtonDropdown/","text":"SimpleButtonDropdown \u00b6 Check button control. Extends SeSSimulatedObject Behavior Pattern: SimplePressable Action Summary \u00b6 Action Description DoAction Presses button using mouse click or default action. Action Detail \u00b6 DoAction \u00b6 Presses button using mouse click or default action. DoAction () Behavior Pattern: SimpleDropdown Action Summary \u00b6 Action Description DoDropdown Opens dropdown. Action Detail \u00b6 DoDropdown \u00b6 Opens dropdown. DoDropdown ()","title":"SimpleButtonDropdown"},{"location":"Libraries/SimpleButtonDropdown/#simplebuttondropdown","text":"Check button control. Extends SeSSimulatedObject Behavior Pattern: SimplePressable","title":"SimpleButtonDropdown"},{"location":"Libraries/SimpleButtonDropdown/#action-summary","text":"Action Description DoAction Presses button using mouse click or default action.","title":"Action Summary"},{"location":"Libraries/SimpleButtonDropdown/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleButtonDropdown/#doaction","text":"Presses button using mouse click or default action. DoAction () Behavior Pattern: SimpleDropdown","title":"DoAction"},{"location":"Libraries/SimpleButtonDropdown/#action-summary_1","text":"Action Description DoDropdown Opens dropdown.","title":"Action Summary"},{"location":"Libraries/SimpleButtonDropdown/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/SimpleButtonDropdown/#dodropdown","text":"Opens dropdown. DoDropdown ()","title":"DoDropdown"},{"location":"Libraries/SimpleCheckButton/","text":"SimpleCheckButton \u00b6 Advanced Accessibility SimpleCheckButton. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SimpleCheckButton"},{"location":"Libraries/SimpleCheckButton/#simplecheckbutton","text":"Advanced Accessibility SimpleCheckButton. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox","title":"SimpleCheckButton"},{"location":"Libraries/SimpleCheckButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/SimpleCheckButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/SimpleCheckButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleCheckButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/SimpleCheckButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleCheckButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/SimpleComboBox/","text":"SimpleComboBox \u00b6 ComboBox control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCombo Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"SimpleComboBox"},{"location":"Libraries/SimpleComboBox/#simplecombobox","text":"ComboBox control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"SimpleComboBox"},{"location":"Libraries/SimpleComboBox/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleComboBox/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleComboBox/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleComboBox/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCombo","title":"DoSelectItem"},{"location":"Libraries/SimpleComboBox/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleComboBox/#action-summary_1","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleComboBox/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/SimpleComboBox/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleComboBox/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/SimpleComboBox/#doselectitem_1","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoSelectItem"},{"location":"Libraries/SimpleGraphics/","text":"SimpleGraphics \u00b6 Graphics control. Extends SeSSimulatedObject Behavior Pattern: Win32Generic Property Summary \u00b6 Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys). Property Detail \u00b6 Bitmap \u00b6 UI Image of the object. Type: ImageWrapper Accessors: GetBitmap BWBitmap \u00b6 UI Image of the object in 1-bit format (black&white). Type: ImageWrapper Accessors: GetBWBitmap Class \u00b6 Class of the object. Type: string Accessors: GetClass Height \u00b6 Height of the object. Type: number Accessors: GetHeight Name \u00b6 Name of the object. Type: string Accessors: GetName ObjectType \u00b6 SeSMatcherRule type for this object. Type: string Accessors: GetObjectType State \u00b6 State of the object. Type: string Accessors: GetState Value \u00b6 Value of the object. Type: string Accessors: GetValue, SetValue Width \u00b6 Width of the object. Type: number Accessors: GetWidth WindowText \u00b6 Window text of the object. Type: string Accessors: GetWindowText, SetWindowText X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Performs default action for an object. If the object doesn't have default action then 'LClick' is performed. DoAction () DoAnalogPlay \u00b6 Plays analog recording using coordinates relative to this object. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left corner Optional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner. Optional. DoClick \u00b6 Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( clickType , xOffset , yOffset ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoEnsureVisible \u00b6 Makes sure specified element is visible on the screen. DoEnsureVisible () DoLButtonDown \u00b6 Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor. DoLButtonDown () DoLButtonUp \u00b6 Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect. DoLButtonUp () DoLClick \u00b6 Performs a left click at the center of an object or at the specified location. DoLClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoLDClick \u00b6 Performs a left double click at the center of an object or at the specified location. DoLDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMButtonDown \u00b6 Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor. DoMButtonDown () DoMButtonUp \u00b6 Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect. DoMButtonUp () DoMClick \u00b6 Performs a middle click at the center of an object or at the specified location. DoMClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMDClick \u00b6 Performs a middle double click at the center of an object or at the specified location. DoMDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoMouseMove \u00b6 Moves mouse cursor to a location relative to this object position. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. DoRButtonDown \u00b6 Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor. DoRButtonDown () DoRButtonUp \u00b6 Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect. DoRButtonUp () DoRClick \u00b6 Performs a right click at the center of an object or at the specified location. DoRClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoRDClick \u00b6 Performs a right double click at the center of an object or at the specified location. DoRDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise DoSendKeys \u00b6 Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys DoSendKeys ( keys ) Parameters: Name Type Description keys string A sequence of keystrokes. DoSendText \u00b6 Sends text to the active application as is (while SendKeys also supports sending special keys). DoSendText ( text ) Parameters: Name Type Description text string A sequence of keystrokes.","title":"SimpleGraphics"},{"location":"Libraries/SimpleGraphics/#simplegraphics","text":"Graphics control. Extends SeSSimulatedObject Behavior Pattern: Win32Generic","title":"SimpleGraphics"},{"location":"Libraries/SimpleGraphics/#property-summary","text":"Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/SimpleGraphics/#action-summary","text":"Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys).","title":"Action Summary"},{"location":"Libraries/SimpleGraphics/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleGraphics/#bitmap","text":"UI Image of the object. Type: ImageWrapper Accessors: GetBitmap","title":"Bitmap"},{"location":"Libraries/SimpleGraphics/#bwbitmap","text":"UI Image of the object in 1-bit format (black&white). Type: ImageWrapper Accessors: GetBWBitmap","title":"BWBitmap"},{"location":"Libraries/SimpleGraphics/#class","text":"Class of the object. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/SimpleGraphics/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/SimpleGraphics/#name","text":"Name of the object. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/SimpleGraphics/#objecttype","text":"SeSMatcherRule type for this object. Type: string Accessors: GetObjectType","title":"ObjectType"},{"location":"Libraries/SimpleGraphics/#state","text":"State of the object. Type: string Accessors: GetState","title":"State"},{"location":"Libraries/SimpleGraphics/#value","text":"Value of the object. Type: string Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/SimpleGraphics/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/SimpleGraphics/#windowtext","text":"Window text of the object. Type: string Accessors: GetWindowText, SetWindowText","title":"WindowText"},{"location":"Libraries/SimpleGraphics/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/SimpleGraphics/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/SimpleGraphics/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleGraphics/#doaction","text":"Performs default action for an object. If the object doesn't have default action then 'LClick' is performed. DoAction ()","title":"DoAction"},{"location":"Libraries/SimpleGraphics/#doanalogplay","text":"Plays analog recording using coordinates relative to this object. DoAnalogPlay ( path , left , top ) Parameters: Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left corner Optional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner. Optional.","title":"DoAnalogPlay"},{"location":"Libraries/SimpleGraphics/#doclick","text":"Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( clickType , xOffset , yOffset ) Parameters: Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoClick"},{"location":"Libraries/SimpleGraphics/#doensurevisible","text":"Makes sure specified element is visible on the screen. DoEnsureVisible ()","title":"DoEnsureVisible"},{"location":"Libraries/SimpleGraphics/#dolbuttondown","text":"Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor. DoLButtonDown ()","title":"DoLButtonDown"},{"location":"Libraries/SimpleGraphics/#dolbuttonup","text":"Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect. DoLButtonUp ()","title":"DoLButtonUp"},{"location":"Libraries/SimpleGraphics/#dolclick","text":"Performs a left click at the center of an object or at the specified location. DoLClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoLClick"},{"location":"Libraries/SimpleGraphics/#doldclick","text":"Performs a left double click at the center of an object or at the specified location. DoLDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoLDClick"},{"location":"Libraries/SimpleGraphics/#dombuttondown","text":"Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor. DoMButtonDown ()","title":"DoMButtonDown"},{"location":"Libraries/SimpleGraphics/#dombuttonup","text":"Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect. DoMButtonUp ()","title":"DoMButtonUp"},{"location":"Libraries/SimpleGraphics/#domclick","text":"Performs a middle click at the center of an object or at the specified location. DoMClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoMClick"},{"location":"Libraries/SimpleGraphics/#domdclick","text":"Performs a middle double click at the center of an object or at the specified location. DoMDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoMDClick"},{"location":"Libraries/SimpleGraphics/#domousemove","text":"Moves mouse cursor to a location relative to this object position. DoMouseMove ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional.","title":"DoMouseMove"},{"location":"Libraries/SimpleGraphics/#dorbuttondown","text":"Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor. DoRButtonDown ()","title":"DoRButtonDown"},{"location":"Libraries/SimpleGraphics/#dorbuttonup","text":"Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect. DoRButtonUp ()","title":"DoRButtonUp"},{"location":"Libraries/SimpleGraphics/#dorclick","text":"Performs a right click at the center of an object or at the specified location. DoRClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoRClick"},{"location":"Libraries/SimpleGraphics/#dordclick","text":"Performs a right double click at the center of an object or at the specified location. DoRDClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoRDClick"},{"location":"Libraries/SimpleGraphics/#dosendkeys","text":"Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys DoSendKeys ( keys ) Parameters: Name Type Description keys string A sequence of keystrokes.","title":"DoSendKeys"},{"location":"Libraries/SimpleGraphics/#dosendtext","text":"Sends text to the active application as is (while SendKeys also supports sending special keys). DoSendText ( text ) Parameters: Name Type Description text string A sequence of keystrokes.","title":"DoSendText"},{"location":"Libraries/SimpleLink/","text":"SimpleLink \u00b6 Link control. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"SimpleLink"},{"location":"Libraries/SimpleLink/#simplelink","text":"Link control. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"SimpleLink"},{"location":"Libraries/SimpleLink/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/SimpleLink/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleLink/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/SimpleLinkText/","text":"SimpleLinkText \u00b6 Link text control. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"SimpleLinkText"},{"location":"Libraries/SimpleLinkText/#simplelinktext","text":"Link text control. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"SimpleLinkText"},{"location":"Libraries/SimpleLinkText/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/SimpleLinkText/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleLinkText/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/SimpleList/","text":"SimpleList \u00b6 List control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable Action Summary \u00b6 Action Description DoExpand Expands an item of this object. Action Detail \u00b6 DoExpand \u00b6 Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoCheckItem Checks an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoCheckItem \u00b6 Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"SimpleList"},{"location":"Libraries/SimpleList/#simplelist","text":"List control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"SimpleList"},{"location":"Libraries/SimpleList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleList/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleList/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable","title":"DoSelectItem"},{"location":"Libraries/SimpleList/#action-summary_1","text":"Action Description DoExpand Expands an item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleList/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/SimpleList/#doexpand","text":"Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable","title":"DoExpand"},{"location":"Libraries/SimpleList/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleList/#action-summary_2","text":"Action Description DoCheckItem Checks an item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleList/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/SimpleList/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleList/#action-detail_2","text":"","title":"Action Detail"},{"location":"Libraries/SimpleList/#docheckitem","text":"Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"DoCheckItem"},{"location":"Libraries/SimpleOutline/","text":"SimpleOutline \u00b6 Outline control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable Action Summary \u00b6 Action Description DoExpand Expands an item of this object. Action Detail \u00b6 DoExpand \u00b6 Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoCheckItem Checks an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoCheckItem \u00b6 Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"SimpleOutline"},{"location":"Libraries/SimpleOutline/#simpleoutline","text":"Outline control. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"SimpleOutline"},{"location":"Libraries/SimpleOutline/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleOutline/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleOutline/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleOutline/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleOutline/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleOutline/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable","title":"DoSelectItem"},{"location":"Libraries/SimpleOutline/#action-summary_1","text":"Action Description DoExpand Expands an item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleOutline/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/SimpleOutline/#doexpand","text":"Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable","title":"DoExpand"},{"location":"Libraries/SimpleOutline/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/SimpleOutline/#action-summary_2","text":"Action Description DoCheckItem Checks an item of this object.","title":"Action Summary"},{"location":"Libraries/SimpleOutline/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/SimpleOutline/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/SimpleOutline/#action-detail_2","text":"","title":"Action Detail"},{"location":"Libraries/SimpleOutline/#docheckitem","text":"Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"DoCheckItem"},{"location":"Libraries/SimpleRadioButton/","text":"SimpleRadioButton \u00b6 Static text control. Extends SeSSimulatedObject Behavior Pattern: Win32Radio","title":"SimpleRadioButton"},{"location":"Libraries/SimpleRadioButton/#simpleradiobutton","text":"Static text control. Extends SeSSimulatedObject Behavior Pattern: Win32Radio","title":"SimpleRadioButton"},{"location":"Libraries/SimpleText/","text":"SimpleText \u00b6 Advanced Accessibility SimpleText. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SimpleText"},{"location":"Libraries/SimpleText/#simpletext","text":"Advanced Accessibility SimpleText. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable","title":"SimpleText"},{"location":"Libraries/SimpleText/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/SimpleText/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/SimpleText/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SimpleText/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/SimpleText/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SimpleText/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/SmartGwtDatePicker/","text":"SmartGwtDatePicker \u00b6 DOM SmartGwt SmartGwtDatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtDatePickerBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"SmartGwtDatePicker"},{"location":"Libraries/SmartGwtDatePicker/#smartgwtdatepicker","text":"DOM SmartGwt SmartGwtDatePicker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtDatePickerBehavior","title":"SmartGwtDatePicker"},{"location":"Libraries/SmartGwtDatePicker/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/SmartGwtDatePicker/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/SmartGwtDatePicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SmartGwtDatePicker/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/SmartGwtDatePicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SmartGwtDatePicker/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/SmartGwtDatePicker/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/SmartGwtDatePicker/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/SmartGwtTabControl/","text":"SmartGwtTabControl \u00b6 DOM SmartGwt SmartGwtTabControl. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtTabControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 ItemsCount \u00b6 Number of items. Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"SmartGwtTabControl"},{"location":"Libraries/SmartGwtTabControl/#smartgwttabcontrol","text":"DOM SmartGwt SmartGwtTabControl. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtTabControlBehavior","title":"SmartGwtTabControl"},{"location":"Libraries/SmartGwtTabControl/#property-summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/SmartGwtTabControl/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/SmartGwtTabControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SmartGwtTabControl/#itemscount","text":"Number of items. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/SmartGwtTabControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/SmartGwtTabControl/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/SmartGwtTabControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SmartGwtTabControl/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/SmartGwtToolbar/","text":"SmartGwtToolbar \u00b6 DOM SmartGwt SmartGwtToolbar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtToolbarBehavior Action Summary \u00b6 Action Description DoClickItem Clicks on a toolbar item. Action Detail \u00b6 DoClickItem \u00b6 Clicks on a toolbar item. DoClickItem ( index ) Parameters: Name Type Description index number Zero-based index if an item. Returns: boolean: 'true' if successful, 'false' otherwise","title":"SmartGwtToolbar"},{"location":"Libraries/SmartGwtToolbar/#smartgwttoolbar","text":"DOM SmartGwt SmartGwtToolbar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: DomSmartGwtToolbarBehavior","title":"SmartGwtToolbar"},{"location":"Libraries/SmartGwtToolbar/#action-summary","text":"Action Description DoClickItem Clicks on a toolbar item.","title":"Action Summary"},{"location":"Libraries/SmartGwtToolbar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SmartGwtToolbar/#doclickitem","text":"Clicks on a toolbar item. DoClickItem ( index ) Parameters: Name Type Description index number Zero-based index if an item. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/Spira/","text":"Spira \u00b6 Use Spira object to communicate with Spira during playback of tests. With Spira object you may do such things as launching a test set and creating an incident. Requires Rapise 7.2+ Action Summary \u00b6 Action Description CreateIncident Creates an incident in Spira. RunTestSet Schedules a test set to execute as soon as possible. Action Detail \u00b6 CreateIncident \u00b6 Creates an incident in Spira.. CreateIncident ( name , description , projectNameOrId ) Parameters: Name Type Description name string Subject of an incident. description string Description of an incident projectNameOrId string Name or ID of a Spira project to add the incident. Returns: number: ID of created incident or 0 in case of error. RunTestSet \u00b6 Schedules a test set to execute as soon as possible. RunTestSet ( nameOrId , token , projectNameOrId ) Parameters: Name Type Description nameOrId Name or ID of the Test Set to run. token string Automation host token. projectNameOrId string Name or ID of a Spira project that contains the Test Set. Returns: boolean: true if the test set scheduled successfully, otherwise - false .","title":"Spira"},{"location":"Libraries/Spira/#spira","text":"Use Spira object to communicate with Spira during playback of tests. With Spira object you may do such things as launching a test set and creating an incident. Requires Rapise 7.2+","title":"Spira"},{"location":"Libraries/Spira/#action-summary","text":"Action Description CreateIncident Creates an incident in Spira. RunTestSet Schedules a test set to execute as soon as possible.","title":"Action Summary"},{"location":"Libraries/Spira/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Spira/#createincident","text":"Creates an incident in Spira.. CreateIncident ( name , description , projectNameOrId ) Parameters: Name Type Description name string Subject of an incident. description string Description of an incident projectNameOrId string Name or ID of a Spira project to add the incident. Returns: number: ID of created incident or 0 in case of error.","title":"CreateIncident"},{"location":"Libraries/Spira/#runtestset","text":"Schedules a test set to execute as soon as possible. RunTestSet ( nameOrId , token , projectNameOrId ) Parameters: Name Type Description nameOrId Name or ID of the Test Set to run. token string Automation host token. projectNameOrId string Name or ID of a Spira project that contains the Test Set. Returns: boolean: true if the test set scheduled successfully, otherwise - false .","title":"RunTestSet"},{"location":"Libraries/Spreadsheet/","text":"Spreadsheet \u00b6 Spreadsheet object. Use it to read and write Excel and text spreadsheets. Action Summary \u00b6 Action Description DoAddColumn Appends a column with specified name. DoAddRow Appends a new row. DoAttach Loads a sheet from Excel file (.xls, .xlsx) or csv file ( .txt, *.csv). DoCompare Compares two spreadsheets. DoCreate Creates a new spreadsheet file. DoInsertColumn Inserts a column at index. DoInsertRow Inserts a new row at index. DoMoveToFirstRow Moves to a first row in selected range. DoMoveToLastRow Moves to a last row in selected range. DoMoveToRow Sets active row index. DoRandom Selects random row and column in the range. DoRemoveColumn Removes a column at index. DoRemoveRow Removes a row at index. DoSave Saves the spreadsheet. DoSequential Advances to the next row in the range. GetCell Cell value by its coordinates. GetColumnCount Gets columns count. GetColumnIndexByName Gets column index by its name. GetColumnName Gets column name. GetCurrentRowIndex Gets zero-based active row index. GetEOF Gets EOF state. GetRange Cell range used in DoSequential and in DoRandom. GetRowCount Gets row count. SetCell Sets cell value by its coordinates. SetRange Cell range used in DoSequential and in DoRandom. Action Detail \u00b6 DoAddColumn \u00b6 Appends a column with specified name. DoAddColumn ( name ) Parameters: Name Type Description name string Name of a new column. Returns: boolean: true if successful, false otherwise. DoAddRow \u00b6 Appends a new row. DoAddRow () Returns: boolean: true if successful, false otherwise. DoAttach \u00b6 Loads a sheet from Excel file (.xls, .xlsx) or csv file ( .txt, *.csv). DoAttach ( fileName , sheetName , separator ) Parameters: Name Type Description fileName string Path to Excel or csv file. sheetName string Sheet name to load. If not specified - load the first sheet. Optional. separator string Separator for values in csv file. Optional, Default: \",\". Returns: boolean: true if successful, false otherwise. DoCompare \u00b6 Compares two spreadsheets. In strict mode number of columns and rows matter and all cell values must be equal. When strict mode is off then spreadsheet2 must contain spreadsheet1 to return 'true' as a result. DoCompare ( spreadsheet1 , spreadsheet2 , strict , sheet1Name , sheet2Name ) Parameters: Name Type Description spreadsheet1 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. spreadsheet2 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. strict boolean If 'true' then number of columns and rows in both spreadsheets must be exactly the same. If 'false' then check that spreadsheet1 is contained in spreadsheet2. Optional, Default: \"false\". sheet1Name string Name of a sheet to compare. Specify this parameter when spreadsheet1 is a path to a file. By default first sheet is compared. Optional. sheet2Name string Name of a sheet to compare. Specify this parameter when spreadsheet2 is a path to a file. By default first sheet is compared. Optional. Returns: boolean: true if spreadsheets are equal, false otherwise. DoCreate \u00b6 Creates a new spreadsheet file. DoCreate ( fileName , sheetName , columnNames , rowCount , separator ) Parameters: Name Type Description fileName string Path to a file. Extension defines file format. Supported extensions: .xls, .xlsx, *.csv, *.txt. sheetName string Name of the first sheet. Optional, Default: \"Sheet1\". columnNames array Array of column names. Optional. rowCount number Initial number of rows with values. Optional, Default: \"10\". separator string Separator for values in csv files. Optional, Default: \",\". Returns: boolean: true if successful, false otherwise. DoInsertColumn \u00b6 Inserts a column at index. DoInsertColumn ( columnIndex , name ) Parameters: Name Type Description columnIndex number Index of a new column. Zero-based. name string Name of a new column. Returns: boolean: true if successful, false otherwise. DoInsertRow \u00b6 Inserts a new row at index. DoInsertRow ( rowIndex ) Parameters: Name Type Description rowIndex number Index of a new row. Zero-based. Returns: boolean: true if successful, false otherwise. DoMoveToFirstRow \u00b6 Moves to a first row in selected range. DoMoveToFirstRow () Returns: boolean: true if successful, false otherwise. DoMoveToLastRow \u00b6 Moves to a last row in selected range. DoMoveToLastRow () Returns: boolean: true if successful, false otherwise. DoMoveToRow \u00b6 Sets active row index. DoMoveToRow ( index ) Parameters: Name Type Description index number Index to set. Zero-based. Returns: boolean: true if successful, false otherwise. DoRandom \u00b6 Selects random row and column in the range. The range is either set by SetRange or it is the default range that includes all rows (except first row which is considred to contain column names) and columns on the sheet. DoRandom () Returns: boolean: false if the spreadhseet is not attached, true otherwise. DoRemoveColumn \u00b6 Removes a column at index. DoRemoveColumn ( columnIndex ) Parameters: Name Type Description columnIndex number Index of a column to remove. Zero-based. Returns: boolean: true if successful, false otherwise. DoRemoveRow \u00b6 Removes a row at index. DoRemoveRow ( rowIndex ) Parameters: Name Type Description rowIndex number Index of a row to remove. Zero-based. Returns: boolean: true if successful, false otherwise. DoSave \u00b6 Saves the spreadsheet. DoSave ( fileName ) Parameters: Name Type Description fileName string Path to a file where to save the spreadsheet. Optional. Returns: boolean: true if successful, false otherwise. DoSequential \u00b6 Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row which is considred to contain column names. When the end of the range is reached DoSequential stays at the last row in the range and returns 'false'. DoSequential () Returns: boolean: false if being called when active row is the last row or the spreadsheet is not attached, true otherwise. GetCell \u00b6 Cell value by its coordinates. Refers to active cell value after DoSequential or DoRandom if params not set. GetCell ( columnId , rowId ) Parameters: Name Type Description columnId number | string Column index or name. If not set active column is used. Optional, Default: \"0\". rowId number Row index. If not set ActiveRow is used. Optional, Default: \"0\". Returns: string: Getter returns string with cell value and null in the case of error. Setter returns true if successful, false otherwise. GetColumnCount \u00b6 Gets columns count. GetColumnCount () Returns: number: Number of columns in the spreadsheet. -1 if no spreadsheet is attached. GetColumnIndexByName \u00b6 Gets column index by its name. GetColumnIndexByName ( name ) Parameters: Name Type Description name string Name of the column to find. Returns: number: column index if found, or -1. GetColumnName \u00b6 Gets column name. GetColumnName ( index ) Parameters: Name Type Description index number Index of a column in the spreadsheet. Returns: string: Name of a column in the spreadsheet. Null in the case of error. GetCurrentRowIndex \u00b6 Gets zero-based active row index. GetCurrentRowIndex () Returns: number: Active row index. GetEOF \u00b6 Gets EOF state. GetEOF () Returns: boolean: false if spreadsheet is attached and active row and column point to existing cell, true otherwise. GetRange \u00b6 Cell range used in DoSequential and in DoRandom. GetRange () Returns: object: Spreadsheet state object: { startRow, endRow, startCol, endCol, activeRow, activeColumn }. GetRowCount \u00b6 Gets row count. GetRowCount () Returns: number: Number of rows in the spreadsheet including the row with column names. -1 if no spreadsheet is attached. SetCell \u00b6 Sets cell value by its coordinates. Sets active cell value after DoSequential or DoRandom if params not set. SetCell ( value , columnId , rowId ) Parameters: Name Type Description value string Value to set. columnId number | string Column index or name. If not set active column is used. Optional, Default: \"0\". rowId number Row index. If not set active row is used. Optional, Default: \"0\". Returns: boolean: true if successful, false otherwise. SetRange \u00b6 Cell range used in DoSequential and in DoRandom. SetRange ( startRow , endRow , startCol , endCol ) Parameters: Name Type Description startRow number Start row index. endRow number Last row index. startCol number Start column index. If not set then it is the first column. Optional. endCol number Last column index. If not set then it is the last column. Optional. Returns: boolean: true if successful, false otherwise.","title":"Spreadsheet"},{"location":"Libraries/Spreadsheet/#spreadsheet","text":"Spreadsheet object. Use it to read and write Excel and text spreadsheets.","title":"Spreadsheet"},{"location":"Libraries/Spreadsheet/#action-summary","text":"Action Description DoAddColumn Appends a column with specified name. DoAddRow Appends a new row. DoAttach Loads a sheet from Excel file (.xls, .xlsx) or csv file ( .txt, *.csv). DoCompare Compares two spreadsheets. DoCreate Creates a new spreadsheet file. DoInsertColumn Inserts a column at index. DoInsertRow Inserts a new row at index. DoMoveToFirstRow Moves to a first row in selected range. DoMoveToLastRow Moves to a last row in selected range. DoMoveToRow Sets active row index. DoRandom Selects random row and column in the range. DoRemoveColumn Removes a column at index. DoRemoveRow Removes a row at index. DoSave Saves the spreadsheet. DoSequential Advances to the next row in the range. GetCell Cell value by its coordinates. GetColumnCount Gets columns count. GetColumnIndexByName Gets column index by its name. GetColumnName Gets column name. GetCurrentRowIndex Gets zero-based active row index. GetEOF Gets EOF state. GetRange Cell range used in DoSequential and in DoRandom. GetRowCount Gets row count. SetCell Sets cell value by its coordinates. SetRange Cell range used in DoSequential and in DoRandom.","title":"Action Summary"},{"location":"Libraries/Spreadsheet/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Spreadsheet/#doaddcolumn","text":"Appends a column with specified name. DoAddColumn ( name ) Parameters: Name Type Description name string Name of a new column. Returns: boolean: true if successful, false otherwise.","title":"DoAddColumn"},{"location":"Libraries/Spreadsheet/#doaddrow","text":"Appends a new row. DoAddRow () Returns: boolean: true if successful, false otherwise.","title":"DoAddRow"},{"location":"Libraries/Spreadsheet/#doattach","text":"Loads a sheet from Excel file (.xls, .xlsx) or csv file ( .txt, *.csv). DoAttach ( fileName , sheetName , separator ) Parameters: Name Type Description fileName string Path to Excel or csv file. sheetName string Sheet name to load. If not specified - load the first sheet. Optional. separator string Separator for values in csv file. Optional, Default: \",\". Returns: boolean: true if successful, false otherwise.","title":"DoAttach"},{"location":"Libraries/Spreadsheet/#docompare","text":"Compares two spreadsheets. In strict mode number of columns and rows matter and all cell values must be equal. When strict mode is off then spreadsheet2 must contain spreadsheet1 to return 'true' as a result. DoCompare ( spreadsheet1 , spreadsheet2 , strict , sheet1Name , sheet2Name ) Parameters: Name Type Description spreadsheet1 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. spreadsheet2 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. strict boolean If 'true' then number of columns and rows in both spreadsheets must be exactly the same. If 'false' then check that spreadsheet1 is contained in spreadsheet2. Optional, Default: \"false\". sheet1Name string Name of a sheet to compare. Specify this parameter when spreadsheet1 is a path to a file. By default first sheet is compared. Optional. sheet2Name string Name of a sheet to compare. Specify this parameter when spreadsheet2 is a path to a file. By default first sheet is compared. Optional. Returns: boolean: true if spreadsheets are equal, false otherwise.","title":"DoCompare"},{"location":"Libraries/Spreadsheet/#docreate","text":"Creates a new spreadsheet file. DoCreate ( fileName , sheetName , columnNames , rowCount , separator ) Parameters: Name Type Description fileName string Path to a file. Extension defines file format. Supported extensions: .xls, .xlsx, *.csv, *.txt. sheetName string Name of the first sheet. Optional, Default: \"Sheet1\". columnNames array Array of column names. Optional. rowCount number Initial number of rows with values. Optional, Default: \"10\". separator string Separator for values in csv files. Optional, Default: \",\". Returns: boolean: true if successful, false otherwise.","title":"DoCreate"},{"location":"Libraries/Spreadsheet/#doinsertcolumn","text":"Inserts a column at index. DoInsertColumn ( columnIndex , name ) Parameters: Name Type Description columnIndex number Index of a new column. Zero-based. name string Name of a new column. Returns: boolean: true if successful, false otherwise.","title":"DoInsertColumn"},{"location":"Libraries/Spreadsheet/#doinsertrow","text":"Inserts a new row at index. DoInsertRow ( rowIndex ) Parameters: Name Type Description rowIndex number Index of a new row. Zero-based. Returns: boolean: true if successful, false otherwise.","title":"DoInsertRow"},{"location":"Libraries/Spreadsheet/#domovetofirstrow","text":"Moves to a first row in selected range. DoMoveToFirstRow () Returns: boolean: true if successful, false otherwise.","title":"DoMoveToFirstRow"},{"location":"Libraries/Spreadsheet/#domovetolastrow","text":"Moves to a last row in selected range. DoMoveToLastRow () Returns: boolean: true if successful, false otherwise.","title":"DoMoveToLastRow"},{"location":"Libraries/Spreadsheet/#domovetorow","text":"Sets active row index. DoMoveToRow ( index ) Parameters: Name Type Description index number Index to set. Zero-based. Returns: boolean: true if successful, false otherwise.","title":"DoMoveToRow"},{"location":"Libraries/Spreadsheet/#dorandom","text":"Selects random row and column in the range. The range is either set by SetRange or it is the default range that includes all rows (except first row which is considred to contain column names) and columns on the sheet. DoRandom () Returns: boolean: false if the spreadhseet is not attached, true otherwise.","title":"DoRandom"},{"location":"Libraries/Spreadsheet/#doremovecolumn","text":"Removes a column at index. DoRemoveColumn ( columnIndex ) Parameters: Name Type Description columnIndex number Index of a column to remove. Zero-based. Returns: boolean: true if successful, false otherwise.","title":"DoRemoveColumn"},{"location":"Libraries/Spreadsheet/#doremoverow","text":"Removes a row at index. DoRemoveRow ( rowIndex ) Parameters: Name Type Description rowIndex number Index of a row to remove. Zero-based. Returns: boolean: true if successful, false otherwise.","title":"DoRemoveRow"},{"location":"Libraries/Spreadsheet/#dosave","text":"Saves the spreadsheet. DoSave ( fileName ) Parameters: Name Type Description fileName string Path to a file where to save the spreadsheet. Optional. Returns: boolean: true if successful, false otherwise.","title":"DoSave"},{"location":"Libraries/Spreadsheet/#dosequential","text":"Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row which is considred to contain column names. When the end of the range is reached DoSequential stays at the last row in the range and returns 'false'. DoSequential () Returns: boolean: false if being called when active row is the last row or the spreadsheet is not attached, true otherwise.","title":"DoSequential"},{"location":"Libraries/Spreadsheet/#getcell","text":"Cell value by its coordinates. Refers to active cell value after DoSequential or DoRandom if params not set. GetCell ( columnId , rowId ) Parameters: Name Type Description columnId number | string Column index or name. If not set active column is used. Optional, Default: \"0\". rowId number Row index. If not set ActiveRow is used. Optional, Default: \"0\". Returns: string: Getter returns string with cell value and null in the case of error. Setter returns true if successful, false otherwise.","title":"GetCell"},{"location":"Libraries/Spreadsheet/#getcolumncount","text":"Gets columns count. GetColumnCount () Returns: number: Number of columns in the spreadsheet. -1 if no spreadsheet is attached.","title":"GetColumnCount"},{"location":"Libraries/Spreadsheet/#getcolumnindexbyname","text":"Gets column index by its name. GetColumnIndexByName ( name ) Parameters: Name Type Description name string Name of the column to find. Returns: number: column index if found, or -1.","title":"GetColumnIndexByName"},{"location":"Libraries/Spreadsheet/#getcolumnname","text":"Gets column name. GetColumnName ( index ) Parameters: Name Type Description index number Index of a column in the spreadsheet. Returns: string: Name of a column in the spreadsheet. Null in the case of error.","title":"GetColumnName"},{"location":"Libraries/Spreadsheet/#getcurrentrowindex","text":"Gets zero-based active row index. GetCurrentRowIndex () Returns: number: Active row index.","title":"GetCurrentRowIndex"},{"location":"Libraries/Spreadsheet/#geteof","text":"Gets EOF state. GetEOF () Returns: boolean: false if spreadsheet is attached and active row and column point to existing cell, true otherwise.","title":"GetEOF"},{"location":"Libraries/Spreadsheet/#getrange","text":"Cell range used in DoSequential and in DoRandom. GetRange () Returns: object: Spreadsheet state object: { startRow, endRow, startCol, endCol, activeRow, activeColumn }.","title":"GetRange"},{"location":"Libraries/Spreadsheet/#getrowcount","text":"Gets row count. GetRowCount () Returns: number: Number of rows in the spreadsheet including the row with column names. -1 if no spreadsheet is attached.","title":"GetRowCount"},{"location":"Libraries/Spreadsheet/#setcell","text":"Sets cell value by its coordinates. Sets active cell value after DoSequential or DoRandom if params not set. SetCell ( value , columnId , rowId ) Parameters: Name Type Description value string Value to set. columnId number | string Column index or name. If not set active column is used. Optional, Default: \"0\". rowId number Row index. If not set active row is used. Optional, Default: \"0\". Returns: boolean: true if successful, false otherwise.","title":"SetCell"},{"location":"Libraries/Spreadsheet/#setrange","text":"Cell range used in DoSequential and in DoRandom. SetRange ( startRow , endRow , startCol , endCol ) Parameters: Name Type Description startRow number Start row index. endRow number Last row index. startCol number Start column index. If not set then it is the first column. Optional. endCol number Last column index. If not set then it is the last column. Optional. Returns: boolean: true if successful, false otherwise.","title":"SetRange"},{"location":"Libraries/SyncfusionGrouping/","text":"SyncfusionGrouping \u00b6 This behavior pattern implements standard behavior for Grouping control. UI element class: Syncfusion.Windows.Forms.Tools.GroupBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: SyncfusionGroupingBehavior Action Summary \u00b6 Action Description DoClickItem Performs click on the groupbar item Action Detail \u00b6 DoClickItem \u00b6 Performs click on the groupbar item DoClickItem ( captionIndex , clickType , ox , oy ) Parameters: Name Type Description captionIndex string | number index or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". ox number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. oy number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"SyncfusionGrouping"},{"location":"Libraries/SyncfusionGrouping/#syncfusiongrouping","text":"This behavior pattern implements standard behavior for Grouping control. UI element class: Syncfusion.Windows.Forms.Tools.GroupBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: SyncfusionGroupingBehavior","title":"SyncfusionGrouping"},{"location":"Libraries/SyncfusionGrouping/#action-summary","text":"Action Description DoClickItem Performs click on the groupbar item","title":"Action Summary"},{"location":"Libraries/SyncfusionGrouping/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SyncfusionGrouping/#doclickitem","text":"Performs click on the groupbar item DoClickItem ( captionIndex , clickType , ox , oy ) Parameters: Name Type Description captionIndex string | number index or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". ox number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. oy number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/SyncfusionRibbon/","text":"SyncfusionRibbon \u00b6 This behavior pattern implements standard behavior for Ribbon control. UI element class: Syncfusion.Windows.Forms.Tools.RibbonControlAdv Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: SyncfusionRibbonBehavior Property Summary \u00b6 Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab Action Summary \u00b6 Action Description DoClickItem Performs click on the ribbon item given by caption or tooltip text DoSelectTab Selects the tab by name. Property Detail \u00b6 SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab Action Detail \u00b6 DoClickItem \u00b6 Performs click on the ribbon item given by caption or tooltip text DoClickItem ( captionOrTooltip ) Parameters: Name Type Description captionOrTooltip string | number caption or tooltip text of the item to click. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"SyncfusionRibbon"},{"location":"Libraries/SyncfusionRibbon/#syncfusionribbon","text":"This behavior pattern implements standard behavior for Ribbon control. UI element class: Syncfusion.Windows.Forms.Tools.RibbonControlAdv Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: SyncfusionRibbonBehavior","title":"SyncfusionRibbon"},{"location":"Libraries/SyncfusionRibbon/#property-summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab","title":"Property Summary"},{"location":"Libraries/SyncfusionRibbon/#action-summary","text":"Action Description DoClickItem Performs click on the ribbon item given by caption or tooltip text DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/SyncfusionRibbon/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/SyncfusionRibbon/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab","title":"SelectedTab"},{"location":"Libraries/SyncfusionRibbon/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/SyncfusionRibbon/#doclickitem","text":"Performs click on the ribbon item given by caption or tooltip text DoClickItem ( captionOrTooltip ) Parameters: Name Type Description captionOrTooltip string | number caption or tooltip text of the item to click. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/SyncfusionRibbon/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/TabStrip20/","text":"TabStrip20 \u00b6 TabStrip20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: TabStrip20Behavior Property Summary \u00b6 Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TabStrip20"},{"location":"Libraries/TabStrip20/#tabstrip20","text":"TabStrip20 Control Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: TabStrip20Behavior","title":"TabStrip20"},{"location":"Libraries/TabStrip20/#property-summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/TabStrip20/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/TabStrip20/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TabStrip20/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/TabStrip20/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TabStrip20/#doselecttab","text":"Selects the tab by name. DoSelectTab ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/TelerikDropDownPopupForm/","text":"TelerikDropDownPopupForm \u00b6 Telerik DropDownPopupForm. UI element class: Telerik.WinControls.UI.DropDownPopupForm Extends ManagedButton Extends SeSSimulatedObject Behavior Pattern: TelerikComboPopupBehavior","title":"TelerikDropDownPopupForm"},{"location":"Libraries/TelerikDropDownPopupForm/#telerikdropdownpopupform","text":"Telerik DropDownPopupForm. UI element class: Telerik.WinControls.UI.DropDownPopupForm Extends ManagedButton Extends SeSSimulatedObject Behavior Pattern: TelerikComboPopupBehavior","title":"TelerikDropDownPopupForm"},{"location":"Libraries/TelerikRadApplicationMenu/","text":"TelerikRadApplicationMenu \u00b6 Telerik RadApplicationMenu. UI element class: Telerik.WinControls.UI.RadApplicationMenu Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadApplicationMenu"},{"location":"Libraries/TelerikRadApplicationMenu/#telerikradapplicationmenu","text":"Telerik RadApplicationMenu. UI element class: Telerik.WinControls.UI.RadApplicationMenu Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior","title":"TelerikRadApplicationMenu"},{"location":"Libraries/TelerikRadApplicationMenu/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/TelerikRadApplicationMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadApplicationMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/TelerikRadApplicationMenuDropDown/","text":"TelerikRadApplicationMenuDropDown \u00b6 Telerik RadApplicationMenuDropDown. UI element class: Telerik.WinControls.UI.RadApplicationMenuDropDown Extends ManagedMenuPopupItem Extends SeSSimulatedObject","title":"TelerikRadApplicationMenuDropDown"},{"location":"Libraries/TelerikRadApplicationMenuDropDown/#telerikradapplicationmenudropdown","text":"Telerik RadApplicationMenuDropDown. UI element class: Telerik.WinControls.UI.RadApplicationMenuDropDown Extends ManagedMenuPopupItem Extends SeSSimulatedObject","title":"TelerikRadApplicationMenuDropDown"},{"location":"Libraries/TelerikRadButton/","text":"TelerikRadButton \u00b6 Telerik RadButton. UI element class: Telerik.WinControls.UI.RadButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"TelerikRadButton"},{"location":"Libraries/TelerikRadButton/#telerikradbutton","text":"Telerik RadButton. UI element class: Telerik.WinControls.UI.RadButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"TelerikRadButton"},{"location":"Libraries/TelerikRadCheckBox/","text":"TelerikRadCheckBox \u00b6 Telerik RadCheckButton. UI element class: Telerik.WinControls.UI.RadCheckBox Extends ManagedCheckBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadCheckBox"},{"location":"Libraries/TelerikRadCheckBox/#telerikradcheckbox","text":"Telerik RadCheckButton. UI element class: Telerik.WinControls.UI.RadCheckBox Extends ManagedCheckBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"TelerikRadCheckBox"},{"location":"Libraries/TelerikRadCheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/TelerikRadCheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/TelerikRadCheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadCheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/TelerikRadCheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadCheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/TelerikRadDateTimePicker/","text":"TelerikRadDateTimePicker \u00b6 Telerik RadDateTimePicker. UI element class: Telerik.WinControls.UI.RadDateTimePicker Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDateTimePickerBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( day , month , year ) Parameters: Name Type Description day number Day to set month number Month to set year number Year to set Returns: boolean: 'true' if success, 'false' otherwise","title":"TelerikRadDateTimePicker"},{"location":"Libraries/TelerikRadDateTimePicker/#telerikraddatetimepicker","text":"Telerik RadDateTimePicker. UI element class: Telerik.WinControls.UI.RadDateTimePicker Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDateTimePickerBehavior","title":"TelerikRadDateTimePicker"},{"location":"Libraries/TelerikRadDateTimePicker/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/TelerikRadDateTimePicker/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/TelerikRadDateTimePicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadDateTimePicker/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/TelerikRadDateTimePicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadDateTimePicker/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/TelerikRadDateTimePicker/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/TelerikRadDateTimePicker/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( day , month , year ) Parameters: Name Type Description day number Day to set month number Month to set year number Year to set Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/TelerikRadDropDownButton/","text":"TelerikRadDropDownButton \u00b6 Telerik RadDropDownButton. UI element class: Telerik.WinControls.UI.RadDropDownButton Extends ManagedButton Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadDropDownButton"},{"location":"Libraries/TelerikRadDropDownButton/#telerikraddropdownbutton","text":"Telerik RadDropDownButton. UI element class: Telerik.WinControls.UI.RadDropDownButton Extends ManagedButton Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior","title":"TelerikRadDropDownButton"},{"location":"Libraries/TelerikRadDropDownButton/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/TelerikRadDropDownButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadDropDownButton/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/TelerikRadDropDownButtonPopup/","text":"TelerikRadDropDownButtonPopup \u00b6 Telerik RadDropDownButtonPopup. UI element class: Telerik.WinControls.UI.RadDropDownButtonPopup Extends ManagedMenuPopupItem Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadDropDownButtonPopup"},{"location":"Libraries/TelerikRadDropDownButtonPopup/#telerikraddropdownbuttonpopup","text":"Telerik RadDropDownButtonPopup. UI element class: Telerik.WinControls.UI.RadDropDownButtonPopup Extends ManagedMenuPopupItem Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior","title":"TelerikRadDropDownButtonPopup"},{"location":"Libraries/TelerikRadDropDownButtonPopup/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/TelerikRadDropDownButtonPopup/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadDropDownButtonPopup/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/TelerikRadDropDownList/","text":"TelerikRadDropDownList \u00b6 Telerik RadDropDownList. UI element class: Telerik.WinControls.UI.RadDropDownList Extends ManagedComboBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectSelectableBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikSelectableBehavior Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadDropDownList"},{"location":"Libraries/TelerikRadDropDownList/#telerikraddropdownlist","text":"Telerik RadDropDownList. UI element class: Telerik.WinControls.UI.RadDropDownList Extends ManagedComboBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectSelectableBehavior","title":"TelerikRadDropDownList"},{"location":"Libraries/TelerikRadDropDownList/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText","title":"Property Summary"},{"location":"Libraries/TelerikRadDropDownList/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadDropDownList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadDropDownList/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/TelerikRadDropDownList/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/TelerikRadDropDownList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadDropDownList/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikSelectableBehavior Behavior Pattern: ManagedObjectTextBehavior","title":"DoSelectItem"},{"location":"Libraries/TelerikRadDropDownList/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/TelerikRadDropDownList/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadDropDownList/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadDropDownList/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/TelerikRadDropDownList/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadDropDownList/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/TelerikRadDropDownMenu/","text":"TelerikRadDropDownMenu \u00b6 Telerik RadDropDownMenu. UI element class: Telerik.WinControls.UI.RadDropDownMenu Extends ManagedMenuPopupItem Extends SeSSimulatedObject","title":"TelerikRadDropDownMenu"},{"location":"Libraries/TelerikRadDropDownMenu/#telerikraddropdownmenu","text":"Telerik RadDropDownMenu. UI element class: Telerik.WinControls.UI.RadDropDownMenu Extends ManagedMenuPopupItem Extends SeSSimulatedObject","title":"TelerikRadDropDownMenu"},{"location":"Libraries/TelerikRadGridView/","text":"TelerikRadGridView \u00b6 Telerik RadGridView. UI element class: Telerik.WinControls.UI.RadGridView Extends ManagedDataGridView Extends SeSSimulatedObject Behavior Pattern: TelerikGridViewBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCell Selected Cell GetSelectedCell Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedCell \u00b6 Selected Cell Type: object Accessors: GetSelectedCell Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell () Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText () Returns: 'true' if successful, 'false' otherwise","title":"TelerikRadGridView"},{"location":"Libraries/TelerikRadGridView/#telerikradgridview","text":"Telerik RadGridView. UI element class: Telerik.WinControls.UI.RadGridView Extends ManagedDataGridView Extends SeSSimulatedObject Behavior Pattern: TelerikGridViewBehavior","title":"TelerikRadGridView"},{"location":"Libraries/TelerikRadGridView/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCell Selected Cell GetSelectedCell Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/TelerikRadGridView/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid.","title":"Action Summary"},{"location":"Libraries/TelerikRadGridView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadGridView/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/TelerikRadGridView/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/TelerikRadGridView/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description col number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/TelerikRadGridView/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/TelerikRadGridView/#selectedcell","text":"Selected Cell Type: object Accessors: GetSelectedCell","title":"SelectedCell"},{"location":"Libraries/TelerikRadGridView/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/TelerikRadGridView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadGridView/#doclickcell","text":"Clicks the specified cell. DoClickCell () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/TelerikRadGridView/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText () Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/TelerikRadLabel/","text":"TelerikRadLabel \u00b6 Telerik RadLabel. UI element class: Telerik.WinControls.UI.RadLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikLabelBehavior","title":"TelerikRadLabel"},{"location":"Libraries/TelerikRadLabel/#telerikradlabel","text":"Telerik RadLabel. UI element class: Telerik.WinControls.UI.RadLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikLabelBehavior","title":"TelerikRadLabel"},{"location":"Libraries/TelerikRadListControl/","text":"TelerikRadListControl \u00b6 Telerik RadListControl. UI element class: Telerik.WinControls.UI.RadListControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikListControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedText Text of the selected item in a single string. GetSelectedText Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadListControl"},{"location":"Libraries/TelerikRadListControl/#telerikradlistcontrol","text":"Telerik RadListControl. UI element class: Telerik.WinControls.UI.RadListControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectListBoxSelectableBehavior","title":"TelerikRadListControl"},{"location":"Libraries/TelerikRadListControl/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/TelerikRadListControl/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadListControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadListControl/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/TelerikRadListControl/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/TelerikRadListControl/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/TelerikRadListControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/TelerikRadListControl/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/TelerikRadListControl/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/TelerikRadListControl/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/TelerikRadListControl/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/TelerikRadListControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadListControl/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/TelerikRadListControl/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/TelerikRadListControl/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/TelerikRadListControl/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikListControlBehavior","title":"DoSelectItem"},{"location":"Libraries/TelerikRadListControl/#property-summary_1","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedText Text of the selected item in a single string. GetSelectedText","title":"Property Summary"},{"location":"Libraries/TelerikRadListControl/#action-summary_1","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadListControl/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadListControl/#itemindexbyname_1","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/TelerikRadListControl/#itemnamebyindex_1","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/TelerikRadListControl/#selectedindex_1","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/TelerikRadListControl/#selectedindices_1","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/TelerikRadListControl/#selectedtext_1","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText","title":"SelectedText"},{"location":"Libraries/TelerikRadListControl/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadListControl/#doaddselection_1","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/TelerikRadListControl/#doclearselection_1","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/TelerikRadListControl/#doremoveselection_1","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/TelerikRadListControl/#doselectitem_1","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/TelerikRadMaskedEditBox/","text":"TelerikRadMaskedEditBox \u00b6 Telerik RadMaskedEditBox. UI element class: Telerik.WinControls.UI.RadMaskedEditBox Extends ManagedTextBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadMaskedEditBox"},{"location":"Libraries/TelerikRadMaskedEditBox/#telerikradmaskededitbox","text":"Telerik RadMaskedEditBox. UI element class: Telerik.WinControls.UI.RadMaskedEditBox Extends ManagedTextBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"TelerikRadMaskedEditBox"},{"location":"Libraries/TelerikRadMaskedEditBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/TelerikRadMaskedEditBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadMaskedEditBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadMaskedEditBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/TelerikRadMaskedEditBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadMaskedEditBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/TelerikRadMenu/","text":"TelerikRadMenu \u00b6 Telerik RadMenu. UI element class: Telerik.WinControls.UI.RadMenu Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikMenuBehavior Action Summary \u00b6 Action Description DoClickItem Perform Click on the navigation item Action Detail \u00b6 DoClickItem \u00b6 Perform Click on the navigation item DoClickItem ( menuItemName ) Parameters: Name Type Description menuItemName string Menuitem name to click at. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadMenu"},{"location":"Libraries/TelerikRadMenu/#telerikradmenu","text":"Telerik RadMenu. UI element class: Telerik.WinControls.UI.RadMenu Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikDropDownButtonBehavior","title":"TelerikRadMenu"},{"location":"Libraries/TelerikRadMenu/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/TelerikRadMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikMenuBehavior","title":"DoMenu"},{"location":"Libraries/TelerikRadMenu/#action-summary_1","text":"Action Description DoClickItem Perform Click on the navigation item","title":"Action Summary"},{"location":"Libraries/TelerikRadMenu/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadMenu/#doclickitem","text":"Perform Click on the navigation item DoClickItem ( menuItemName ) Parameters: Name Type Description menuItemName string Menuitem name to click at. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/TelerikRadProgressBar/","text":"TelerikRadProgressBar \u00b6 Telerik RadProgressBar. UI element class: Telerik.WinControls.UI.RadProgressBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Value1 Gets or sets the value of the first progress line. GetValue1 SetValue1 Value2 Gets or sets the value of the second progress line. GetValue2 SetValue2 Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Value1 \u00b6 Gets or sets the value of the first progress line. There could be two progress lines in the progress bar. Type: number Accessors: GetValue1, SetValue1 Value2 \u00b6 Gets or sets the value of the second progress line. There could be two progress lines in the progress bar. The second one is visualized by making the fill primitive semi-transparent. Type: number Accessors: GetValue2, SetValue2","title":"TelerikRadProgressBar"},{"location":"Libraries/TelerikRadProgressBar/#telerikradprogressbar","text":"Telerik RadProgressBar. UI element class: Telerik.WinControls.UI.RadProgressBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikProgressBarBehavior","title":"TelerikRadProgressBar"},{"location":"Libraries/TelerikRadProgressBar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Value1 Gets or sets the value of the first progress line. GetValue1 SetValue1 Value2 Gets or sets the value of the second progress line. GetValue2 SetValue2","title":"Property Summary"},{"location":"Libraries/TelerikRadProgressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadProgressBar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/TelerikRadProgressBar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/TelerikRadProgressBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/TelerikRadProgressBar/#value1","text":"Gets or sets the value of the first progress line. There could be two progress lines in the progress bar. Type: number Accessors: GetValue1, SetValue1","title":"Value1"},{"location":"Libraries/TelerikRadProgressBar/#value2","text":"Gets or sets the value of the second progress line. There could be two progress lines in the progress bar. The second one is visualized by making the fill primitive semi-transparent. Type: number Accessors: GetValue2, SetValue2","title":"Value2"},{"location":"Libraries/TelerikRadRadioButton/","text":"TelerikRadRadioButton \u00b6 Telerik RadRadioButton. UI element class: Telerik.WinControls.UI.RadRadioButton Extends ManagedRadioButton Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikToggleBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"TelerikRadRadioButton"},{"location":"Libraries/TelerikRadRadioButton/#telerikradradiobutton","text":"Telerik RadRadioButton. UI element class: Telerik.WinControls.UI.RadRadioButton Extends ManagedRadioButton Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"TelerikRadRadioButton"},{"location":"Libraries/TelerikRadRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/TelerikRadRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/TelerikRadRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/TelerikRadRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikToggleBehavior","title":"DoSetCheck"},{"location":"Libraries/TelerikRadRadioButton/#property-summary_1","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/TelerikRadRadioButton/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadRadioButton/#checked_1","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/TelerikRadRibbonBar/","text":"TelerikRadRibbonBar \u00b6 Telerik RadRibbonBar. UI element class: Telerik.WinControls.UI.RadRibbonBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadRibbonBarBehavior Action Summary \u00b6 Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon. Action Detail \u00b6 DoClickApplicationButton \u00b6 Clicks an application button on the ribbon. DoClickApplicationButton ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickTab \u00b6 Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadRibbonBar"},{"location":"Libraries/TelerikRadRibbonBar/#telerikradribbonbar","text":"Telerik RadRibbonBar. UI element class: Telerik.WinControls.UI.RadRibbonBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadRibbonBarBehavior","title":"TelerikRadRibbonBar"},{"location":"Libraries/TelerikRadRibbonBar/#action-summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon.","title":"Action Summary"},{"location":"Libraries/TelerikRadRibbonBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadRibbonBar/#doclickapplicationbutton","text":"Clicks an application button on the ribbon. DoClickApplicationButton ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickApplicationButton"},{"location":"Libraries/TelerikRadRibbonBar/#doclickitem","text":"Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/TelerikRadRibbonBar/#doclicktab","text":"Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickTab"},{"location":"Libraries/TelerikRadSpinEditor/","text":"TelerikRadSpinEditor \u00b6 Telerik RadSpinEditor. UI element class: Telerik.WinControls.UI.RadSpinEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikSpinEditBehavior Property Summary \u00b6 Property Description Getter Setter Increment Number value that means how much is added or removed when user clicks up or down. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoDown Decrements the value of an object DoSetText Sets text value of this object. DoUp Increments the Value of an object. Property Detail \u00b6 Increment \u00b6 Number value that means how much is added or removed when user clicks up or down. Type: number Accessors: GetIncrement, SetIncrement MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoDown \u00b6 Decrements the value of an object DoDown () Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. DoUp \u00b6 Increments the Value of an object. DoUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadSpinEditor"},{"location":"Libraries/TelerikRadSpinEditor/#telerikradspineditor","text":"Telerik RadSpinEditor. UI element class: Telerik.WinControls.UI.RadSpinEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikSpinEditBehavior","title":"TelerikRadSpinEditor"},{"location":"Libraries/TelerikRadSpinEditor/#property-summary","text":"Property Description Getter Setter Increment Number value that means how much is added or removed when user clicks up or down. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/TelerikRadSpinEditor/#action-summary","text":"Action Description DoDown Decrements the value of an object DoSetText Sets text value of this object. DoUp Increments the Value of an object.","title":"Action Summary"},{"location":"Libraries/TelerikRadSpinEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadSpinEditor/#increment","text":"Number value that means how much is added or removed when user clicks up or down. Type: number Accessors: GetIncrement, SetIncrement","title":"Increment"},{"location":"Libraries/TelerikRadSpinEditor/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/TelerikRadSpinEditor/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/TelerikRadSpinEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/TelerikRadSpinEditor/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/TelerikRadSpinEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadSpinEditor/#dodown","text":"Decrements the value of an object DoDown () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoDown"},{"location":"Libraries/TelerikRadSpinEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/TelerikRadSpinEditor/#doup","text":"Increments the Value of an object. DoUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoUp"},{"location":"Libraries/TelerikRadTextBox/","text":"TelerikRadTextBox \u00b6 Telerik RadTextBox. UI element class: Telerik.WinControls.UI.RadTextBox Extends ManagedTextBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadTextBox"},{"location":"Libraries/TelerikRadTextBox/#telerikradtextbox","text":"Telerik RadTextBox. UI element class: Telerik.WinControls.UI.RadTextBox Extends ManagedTextBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"TelerikRadTextBox"},{"location":"Libraries/TelerikRadTextBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/TelerikRadTextBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/TelerikRadTextBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadTextBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/TelerikRadTextBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadTextBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/TelerikRadTitleBar/","text":"TelerikRadTitleBar \u00b6 Telerik RadTitleBar. UI element class: Telerik.WinControls.UI.RadTitleBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikLabelBehavior","title":"TelerikRadTitleBar"},{"location":"Libraries/TelerikRadTitleBar/#telerikradtitlebar","text":"Telerik RadTitleBar. UI element class: Telerik.WinControls.UI.RadTitleBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikLabelBehavior","title":"TelerikRadTitleBar"},{"location":"Libraries/TelerikRadToggleButton/","text":"TelerikRadToggleButton \u00b6 Telerik RadToggleButton. UI element class: Telerik.WinControls.UI.RadToggleButton Extends ManagedCheckBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikToggleBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"TelerikRadToggleButton"},{"location":"Libraries/TelerikRadToggleButton/#telerikradtogglebutton","text":"Telerik RadToggleButton. UI element class: Telerik.WinControls.UI.RadToggleButton Extends ManagedCheckBox Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"TelerikRadToggleButton"},{"location":"Libraries/TelerikRadToggleButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/TelerikRadToggleButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/TelerikRadToggleButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadToggleButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/TelerikRadToggleButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadToggleButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: TelerikToggleBehavior","title":"DoSetCheck"},{"location":"Libraries/TelerikRadToggleButton/#property-summary_1","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/TelerikRadToggleButton/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadToggleButton/#checked_1","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/TelerikRadToolStrip/","text":"TelerikRadToolStrip \u00b6 Telerik RadToolStrip. UI element class: Telerik.WinControls.UI.RadToolStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadToolStripBehavior Action Summary \u00b6 Action Description DoClickItem Clicks on an item on the ribbon. Action Detail \u00b6 DoClickItem \u00b6 Clicks on an item on the ribbon. DoClickItem ( caption , clickType , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"TelerikRadToolStrip"},{"location":"Libraries/TelerikRadToolStrip/#telerikradtoolstrip","text":"Telerik RadToolStrip. UI element class: Telerik.WinControls.UI.RadToolStrip Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadToolStripBehavior","title":"TelerikRadToolStrip"},{"location":"Libraries/TelerikRadToolStrip/#action-summary","text":"Action Description DoClickItem Clicks on an item on the ribbon.","title":"Action Summary"},{"location":"Libraries/TelerikRadToolStrip/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadToolStrip/#doclickitem","text":"Clicks on an item on the ribbon. DoClickItem ( caption , clickType , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/TelerikRadTrackBar/","text":"TelerikRadTrackBar \u00b6 Telerik RadTrackBar (slider). UI element class: Telerik.WinControls.UI.RadTrackBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikTrackBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Position Gets or sets the position of the track bar. GetPosition SetPosition Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Position \u00b6 Gets or sets the position of the track bar. Type: number Accessors: GetPosition, SetPosition","title":"TelerikRadTrackBar"},{"location":"Libraries/TelerikRadTrackBar/#telerikradtrackbar","text":"Telerik RadTrackBar (slider). UI element class: Telerik.WinControls.UI.RadTrackBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikTrackBarBehavior","title":"TelerikRadTrackBar"},{"location":"Libraries/TelerikRadTrackBar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Position Gets or sets the position of the track bar. GetPosition SetPosition","title":"Property Summary"},{"location":"Libraries/TelerikRadTrackBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadTrackBar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/TelerikRadTrackBar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/TelerikRadTrackBar/#position","text":"Gets or sets the position of the track bar. Type: number Accessors: GetPosition, SetPosition","title":"Position"},{"location":"Libraries/TelerikRadTreeView/","text":"TelerikRadTreeView \u00b6 Telerik RadTreeView. UI element class: Telerik.WinControls.UI.RadTreeView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadTreeViewBehavior Property Summary \u00b6 Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected State Selected state of the selected node or a node specified by the input parameters. GetState Text ;-combined text of all selected nodes. GetText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Checks or unchecks specified element. Property Detail \u00b6 Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected State \u00b6 Selected state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path String Path of the node to select. separator String Separator used in the path. pathType String Path type. Can be one of 'name', 'index' or 'id'. Type: Accessors: GetState Text \u00b6 ;-combined text of all selected nodes. Type: string Accessors: GetText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Checks or unchecks specified element. DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Desired check state. path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise","title":"TelerikRadTreeView"},{"location":"Libraries/TelerikRadTreeView/#telerikradtreeview","text":"Telerik RadTreeView. UI element class: Telerik.WinControls.UI.RadTreeView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: TelerikRadTreeViewBehavior","title":"TelerikRadTreeView"},{"location":"Libraries/TelerikRadTreeView/#property-summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected State Selected state of the selected node or a node specified by the input parameters. GetState Text ;-combined text of all selected nodes. GetText","title":"Property Summary"},{"location":"Libraries/TelerikRadTreeView/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Checks or unchecks specified element.","title":"Action Summary"},{"location":"Libraries/TelerikRadTreeView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/TelerikRadTreeView/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/TelerikRadTreeView/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/TelerikRadTreeView/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/TelerikRadTreeView/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/TelerikRadTreeView/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/TelerikRadTreeView/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/TelerikRadTreeView/#state","text":"Selected state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path String Path of the node to select. separator String Separator used in the path. pathType String Path type. Can be one of 'name', 'index' or 'id'. Type: Accessors: GetState","title":"State"},{"location":"Libraries/TelerikRadTreeView/#text","text":";-combined text of all selected nodes. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/TelerikRadTreeView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/TelerikRadTreeView/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/TelerikRadTreeView/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/TelerikRadTreeView/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/TelerikRadTreeView/#dosetcheck","text":"Checks or unchecks specified element. DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Desired check state. path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSetCheck"},{"location":"Libraries/Tester/","text":"Tester \u00b6 Tester object. Use it to perform assertions during test playback and output relevant information to the report. You do not need to record or learn this object, it is always automatically available in any test. Property Summary \u00b6 Property Description Fail Test status, test failed. Info Test status, test is neither passed nor failed. Pass Test status, test passed. Unresolved Test status, test status is unresolved, test terminated unexpectedly. Action Summary \u00b6 Action Description AddImageToReport Adds image to the report. Assert Checks if condition is 'true' and saves corresponding Report entry. AssertContains Checks if str contains substr somewhere and saves corresponding Report entry. AssertEndsWith Checks that str has substr in the end and saves corresponding Report entry. AssertEqual Checks if obj1 equals to obj2 and saves corresponding Report entry. AssertFalse Checks if val is false and saves corresponding Report entry. AssertGreater Checks if n1 greater than n2 and saves corresponding Report entry. AssertGreaterOrEqual Checks if n1 greater or equal than n2 and saves corresponding Report entry. AssertImage Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. AssertLess Checks if n1 is less than n2 and saves corresponding Report entry. AssertLessOrEqual Checks if n1 differs from n2 and saves corresponding Report entry. AssertNotContains Checks that str does not contain substr anywhere and saves corresponding Report entry. AssertNotEqual Checks if obj1 differs from obj2 and saves corresponding Report entry. AssertNotNull Checks if val is NotNull and saves corresponding Report entry. AssertNotSet Checks if val is not set (i.e. AssertNull Checks if val is null and saves corresponding Report entry. AssertSet Checks if val is set (i.e. AssertStartsWith Checks if str begins with substr and saves corresponding Report entry. BeginTest Marks beginning of a test with a given name. CaptureDesktopImage Captures screenshot of the desktop and adds it to the report. CaptureObjectImage Captures screenshot of an object and adds it to the report. CaptureWindowImage Captures screenshot of an application window matched by title and class and adds it to the report. DumpCmdArgsJson Dump node.json with all arguments. EndTest Marks end of a currently executed test. FailTest Stops test execution and sets it's status to failed. GetParam Read parameter field passed into the Test function by field name. GetReportAttribute Gets report attribute previously set by PushReportAttribute or SetReportAttribute. GetTestName Returns name of the running test. GetTestStatus Gets status of currently executed test. IgnoreStatus In IgnoreStatus mode the assertion status is always treated as \"Info\". Message Saves corresponding Report message. MessageBox Shows message box to user. MessageBoxPrompt Shows message box with question to the user and checks if user presses \"Yes\" or \"No\". PopReportAttribute Resets an attribute to its previous value. PushReportAttribute Maintains \"stacked\" attributes. ResetReportAttribute Removes report attribute previously set by SetReportAttribute. SetReportAttribute Set persistent attribute. SoftAssert Is identical to Tester.Assert. SoftAssertAll Fail test if there were any previous failures. SoftAssertContains Checks if str contains substr somewhere and saves corresponding Report entry. SoftAssertEndsWith Checks that str has substr in the end and saves corresponding Report entry. SoftAssertEqual Checks if obj1 equals to obj2 and saves corresponding Report entry. SoftAssertFalse Checks if val is false and saves corresponding Report entry. SoftAssertGreater Checks if n1 greater than n2 and saves corresponding Report entry. SoftAssertGreaterOrEqual Checks if n1 greater or equal than n2 and saves corresponding Report entry. SoftAssertImage Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. SoftAssertLess Checks if n1 is less than n2 and saves corresponding Report entry. SoftAssertLessOrEqual Checks if n1 differs from n2 and saves corresponding Report entry. SoftAssertNotContains Checks that str does not contain substr anywhere and saves corresponding Report entry. SoftAssertNotEqual Checks if obj1 differs from obj2 and saves corresponding Report entry. SoftAssertNotNull Checks if val is NotNull and saves corresponding Report entry. SoftAssertNotSet Checks if val is not set (i.e. SoftAssertNull Checks if val is null and saves corresponding Report entry. SoftAssertSet Checks if val is set (i.e. SoftAssertStartsWith Checks if str begins with substr and saves corresponding Report entry. SuppressReport In SuppressReport mode all assertions are ignored. Property Detail \u00b6 Fail \u00b6 Test status, test failed. Constant, equal to 0. Type: number Info \u00b6 Test status, test is neither passed nor failed. Constant, equal to -2. Type: number Pass \u00b6 Test status, test passed. Constant, equal to 1. Type: number Unresolved \u00b6 Test status, test status is unresolved, test terminated unexpectedly. Constant, equal to -1. Type: number Action Detail \u00b6 AddImageToReport \u00b6 Adds image to the report. AddImageToReport ( path , caption ) Parameters: Name Type Description path string Path to an image caption string Caption for the entry added to the report Assert \u00b6 Checks if condition is 'true' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. Assert ( message , condition , data , tags ) Parameters: Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertContains \u00b6 Checks if str contains substr somewhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertEndsWith \u00b6 Checks that str has substr in the end and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertEndsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertEqual \u00b6 Checks if obj1 equals to obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertFalse \u00b6 Checks if val is false and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertFalse ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertGreater \u00b6 Checks if n1 greater than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertGreater ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertGreaterOrEqual \u00b6 Checks if n1 greater or equal than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertGreaterOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertImage \u00b6 Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertImage ( message , img1 , path , data , tags ) Parameters: Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1 st image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertLess \u00b6 Checks if n1 is less than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertLess ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertLessOrEqual \u00b6 Checks if n1 differs from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertLessOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 object First value to compare. n2 object Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertNotContains \u00b6 Checks that str does not contain substr anywhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertNotEqual \u00b6 Checks if obj1 differs from obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertNotNull \u00b6 Checks if val is NotNull and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertNotSet \u00b6 Checks if val is not set (i.e. it is null, 0, false or \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertNull \u00b6 Checks if val is null and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertSet \u00b6 Checks if val is set (i.e. not false, not 0, not null, not \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. AssertStartsWith \u00b6 Checks if str begins with substr and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertStartsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. BeginTest \u00b6 Marks beginning of a test with a given name. BeginTest ( name , path , optionalParams ) Parameters: Name Type Description name string Test name path string Path to the test, that is executed. This string will be shown as a comment. Optional. optionalParams object Params to pass into Test(...) function. Optional. CaptureDesktopImage \u00b6 Captures screenshot of the desktop and adds it to the report. CaptureDesktopImage ( caption ) Parameters: Name Type Description caption string Image title for the report. CaptureObjectImage \u00b6 Captures screenshot of an object and adds it to the report. CaptureObjectImage ( caption , objId ) Parameters: Name Type Description caption string Image title for the report. objId objectId Id of an object or SeSObject instance. CaptureWindowImage \u00b6 Captures screenshot of an application window matched by title and class and adds it to the report. CaptureWindowImage ( caption , windowTitle , windowClass , bringToFront ) Parameters: Name Type Description caption string Image title for the report. windowTitle string String or regular expression to match window title. windowClass string String or regular expression to match window class. Optional, Default: \"regex:.*\". bringToFront boolean Set to 'false' to not restore the window before making the image. Optional, Default: \"true\". DumpCmdArgsJson \u00b6 Dump node.json with all arguments. DumpCmdArgsJson ( optNodeJsonPath , mkPackageJson ) Parameters: Name Type Description optNodeJsonPath string node.json path Optional. mkPackageJson bool EndTest \u00b6 Marks end of a currently executed test. Calculates test results and performs finalization of test execution. EndTest () FailTest \u00b6 Stops test execution and sets it's status to failed. FailTest ( message , internal ) Parameters: Name Type Description message string Failure description. Optional, Default: \"Test stopped on error\". internal GetParam \u00b6 Read parameter field passed into the Test function by field name. GetParam ( paramName , defaultValue ) Parameters: Name Type Description paramName string defaultValue string Default value GetReportAttribute \u00b6 Gets report attribute previously set by PushReportAttribute or SetReportAttribute. GetReportAttribute ( name ) Parameters: Name Type Description name string Attribute name. GetTestName \u00b6 Returns name of the running test. GetTestName () GetTestStatus \u00b6 Gets status of currently executed test. GetTestStatus () Returns: One of: Tester.Info - test is neither passed nor failed; 1 - Tester.Pass - test passed; 0 - Tester.Fail - test failed; -1 - Tester.Unresolved - test status is unresolved, test terminated unexpectedly. IgnoreStatus \u00b6 In IgnoreStatus mode the assertion status is always treated as \"Info\". Real status is written to \"realStatus\" attribute in this case and used just for information purposes (i.e. it does not affect final test status). This function is used when the test case needs to set test status manually. Tester.IgnoreStatus(true); Tester.Assert(\"Ignored Assertion\", false); // This assertion is failed. But its status is ignored. Tester.IgnoreStatus(false); Tester.Assert(\"Test passed\", true); // The overall test is passed because failed assertion is ignored. IgnoreStatus ( ignore ) Parameters: Name Type Description ignore boolean Set to 'true' to report all messages but ignore the status (Pass/Fail) Message \u00b6 Saves corresponding Report message. Message may contain some additional data (links, images, comments) set via 'data' parameter. Message ( message , data , tags ) Parameters: Name Type Description message string Message to put in the report data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. MessageBox \u00b6 Shows message box to user. Use it for verbose and manual testing. MessageBox ( message ) Parameters: Name Type Description message string Message to display. MessageBoxPrompt \u00b6 Shows message box with question to the user and checks if user presses \"Yes\" or \"No\". \"Yes\" => \"Pass\" goes to the report with this message. \"No\" => \"Fail\" is reported. MessageBoxPrompt ( question ) Parameters: Name Type Description question string Question to display. PopReportAttribute \u00b6 Resets an attribute to its previous value. See PushReportAttribute for more information. PopReportAttribute ( name ) Parameters: Name Type Description name string Attribute name to recall from stack. Returns: string: Previous value. Null if no such stacked attribute found. PushReportAttribute \u00b6 Maintains \"stacked\" attributes. Useful for nesting. Example: Main test sets scenario=Main. Then it calls another scenario (scenario Login) and then continues its own test actions. We want all assertions to be attributed with current scenario name. function Main() { Tester.PushReportAttribute(\"scenario\", \"Main\"); Login(); ... Tester.Assert(\"Main test passed\", mainStatus); // Saved with scenario=Main } function Login() { Tester.PushReportAttribute(\"scenario\", \"Login\"); ... // Do login logic Tester.Assert(\"Login Result\", loginStatus); Tester.PopReportAttribute(\"scenario\"); // Set scenario value back to caller } PushReportAttribute ( name , value ) Parameters: Name Type Description name string Attribute name to recall from stack. value string New attribute value. ResetReportAttribute \u00b6 Removes report attribute previously set by SetReportAttribute. ResetReportAttribute ( name ) Parameters: Name Type Description name string Attribute name. SetReportAttribute \u00b6 Set persistent attribute. It will be set for all subsequent report items (assertions, tests, requirements, and so on). It may be changed by calling the ResetReportAttribute function. SetReportAttribute ( name , value ) Parameters: Name Type Description name string Attribute name to set. value string New attribute value. SoftAssert \u00b6 Is identical to Tester.Assert. But when an assertion fails, don't stop execution and just record the failure. Later you may call Tester.SoftAssertAll(..) that will stop execution if at least one assertion failed. SoftAssert ( message , condition , data , tags ) Parameters: Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertAll \u00b6 Fail test if there were any previous failures. This method is designed to be used after one or many calls to Tester.SoftAssert(...) . SoftAssertAll ( message ) Parameters: Name Type Description message string Message to put in the report. SoftAssertContains \u00b6 Checks if str contains substr somewhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertEndsWith \u00b6 Checks that str has substr in the end and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertEndsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertEqual \u00b6 Checks if obj1 equals to obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertFalse \u00b6 Checks if val is false and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertFalse ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertGreater \u00b6 Checks if n1 greater than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertGreater ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertGreaterOrEqual \u00b6 Checks if n1 greater or equal than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertGreaterOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertImage \u00b6 Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertImage ( message , img1 , path , data , tags ) Parameters: Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1 st image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertLess \u00b6 Checks if n1 is less than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertLess ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertLessOrEqual \u00b6 Checks if n1 differs from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertLessOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 object First value to compare. n2 object Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertNotContains \u00b6 Checks that str does not contain substr anywhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertNotEqual \u00b6 Checks if obj1 differs from obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertNotNull \u00b6 Checks if val is NotNull and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertNotSet \u00b6 Checks if val is not set (i.e. it is null, 0, false or \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertNull \u00b6 Checks if val is null and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertSet \u00b6 Checks if val is set (i.e. not false, not 0, not null, not \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SoftAssertStartsWith \u00b6 Checks if str begins with substr and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertStartsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional. SuppressReport \u00b6 In SuppressReport mode all assertions are ignored. That means no lines are added to report and all statuses are treated as \"Info\". This mode is like IgnoreStatus mode but no status messages are added to report. Tester . SuppressReport ( true ); Tester . Assert ( \"No assertion\" , false ); // Status of this assertion will be ignored and no record will be added to report SeS ( 'Obj1' ). DoClick (); // No line will be added to report and operation status will be ignored Tester . SuppressReport ( false ); SuppressReport ( suppress ) Parameters: Name Type Description suppress boolean Set to 'True' to suppress adding anything into the report.","title":"Tester"},{"location":"Libraries/Tester/#tester","text":"Tester object. Use it to perform assertions during test playback and output relevant information to the report. You do not need to record or learn this object, it is always automatically available in any test.","title":"Tester"},{"location":"Libraries/Tester/#property-summary","text":"Property Description Fail Test status, test failed. Info Test status, test is neither passed nor failed. Pass Test status, test passed. Unresolved Test status, test status is unresolved, test terminated unexpectedly.","title":"Property Summary"},{"location":"Libraries/Tester/#action-summary","text":"Action Description AddImageToReport Adds image to the report. Assert Checks if condition is 'true' and saves corresponding Report entry. AssertContains Checks if str contains substr somewhere and saves corresponding Report entry. AssertEndsWith Checks that str has substr in the end and saves corresponding Report entry. AssertEqual Checks if obj1 equals to obj2 and saves corresponding Report entry. AssertFalse Checks if val is false and saves corresponding Report entry. AssertGreater Checks if n1 greater than n2 and saves corresponding Report entry. AssertGreaterOrEqual Checks if n1 greater or equal than n2 and saves corresponding Report entry. AssertImage Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. AssertLess Checks if n1 is less than n2 and saves corresponding Report entry. AssertLessOrEqual Checks if n1 differs from n2 and saves corresponding Report entry. AssertNotContains Checks that str does not contain substr anywhere and saves corresponding Report entry. AssertNotEqual Checks if obj1 differs from obj2 and saves corresponding Report entry. AssertNotNull Checks if val is NotNull and saves corresponding Report entry. AssertNotSet Checks if val is not set (i.e. AssertNull Checks if val is null and saves corresponding Report entry. AssertSet Checks if val is set (i.e. AssertStartsWith Checks if str begins with substr and saves corresponding Report entry. BeginTest Marks beginning of a test with a given name. CaptureDesktopImage Captures screenshot of the desktop and adds it to the report. CaptureObjectImage Captures screenshot of an object and adds it to the report. CaptureWindowImage Captures screenshot of an application window matched by title and class and adds it to the report. DumpCmdArgsJson Dump node.json with all arguments. EndTest Marks end of a currently executed test. FailTest Stops test execution and sets it's status to failed. GetParam Read parameter field passed into the Test function by field name. GetReportAttribute Gets report attribute previously set by PushReportAttribute or SetReportAttribute. GetTestName Returns name of the running test. GetTestStatus Gets status of currently executed test. IgnoreStatus In IgnoreStatus mode the assertion status is always treated as \"Info\". Message Saves corresponding Report message. MessageBox Shows message box to user. MessageBoxPrompt Shows message box with question to the user and checks if user presses \"Yes\" or \"No\". PopReportAttribute Resets an attribute to its previous value. PushReportAttribute Maintains \"stacked\" attributes. ResetReportAttribute Removes report attribute previously set by SetReportAttribute. SetReportAttribute Set persistent attribute. SoftAssert Is identical to Tester.Assert. SoftAssertAll Fail test if there were any previous failures. SoftAssertContains Checks if str contains substr somewhere and saves corresponding Report entry. SoftAssertEndsWith Checks that str has substr in the end and saves corresponding Report entry. SoftAssertEqual Checks if obj1 equals to obj2 and saves corresponding Report entry. SoftAssertFalse Checks if val is false and saves corresponding Report entry. SoftAssertGreater Checks if n1 greater than n2 and saves corresponding Report entry. SoftAssertGreaterOrEqual Checks if n1 greater or equal than n2 and saves corresponding Report entry. SoftAssertImage Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. SoftAssertLess Checks if n1 is less than n2 and saves corresponding Report entry. SoftAssertLessOrEqual Checks if n1 differs from n2 and saves corresponding Report entry. SoftAssertNotContains Checks that str does not contain substr anywhere and saves corresponding Report entry. SoftAssertNotEqual Checks if obj1 differs from obj2 and saves corresponding Report entry. SoftAssertNotNull Checks if val is NotNull and saves corresponding Report entry. SoftAssertNotSet Checks if val is not set (i.e. SoftAssertNull Checks if val is null and saves corresponding Report entry. SoftAssertSet Checks if val is set (i.e. SoftAssertStartsWith Checks if str begins with substr and saves corresponding Report entry. SuppressReport In SuppressReport mode all assertions are ignored.","title":"Action Summary"},{"location":"Libraries/Tester/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Tester/#fail","text":"Test status, test failed. Constant, equal to 0. Type: number","title":"Fail"},{"location":"Libraries/Tester/#info","text":"Test status, test is neither passed nor failed. Constant, equal to -2. Type: number","title":"Info"},{"location":"Libraries/Tester/#pass","text":"Test status, test passed. Constant, equal to 1. Type: number","title":"Pass"},{"location":"Libraries/Tester/#unresolved","text":"Test status, test status is unresolved, test terminated unexpectedly. Constant, equal to -1. Type: number","title":"Unresolved"},{"location":"Libraries/Tester/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Tester/#addimagetoreport","text":"Adds image to the report. AddImageToReport ( path , caption ) Parameters: Name Type Description path string Path to an image caption string Caption for the entry added to the report","title":"AddImageToReport"},{"location":"Libraries/Tester/#assert","text":"Checks if condition is 'true' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. Assert ( message , condition , data , tags ) Parameters: Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"Assert"},{"location":"Libraries/Tester/#assertcontains","text":"Checks if str contains substr somewhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertContains"},{"location":"Libraries/Tester/#assertendswith","text":"Checks that str has substr in the end and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertEndsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertEndsWith"},{"location":"Libraries/Tester/#assertequal","text":"Checks if obj1 equals to obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertEqual"},{"location":"Libraries/Tester/#assertfalse","text":"Checks if val is false and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertFalse ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertFalse"},{"location":"Libraries/Tester/#assertgreater","text":"Checks if n1 greater than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertGreater ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertGreater"},{"location":"Libraries/Tester/#assertgreaterorequal","text":"Checks if n1 greater or equal than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertGreaterOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertGreaterOrEqual"},{"location":"Libraries/Tester/#assertimage","text":"Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertImage ( message , img1 , path , data , tags ) Parameters: Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1 st image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertImage"},{"location":"Libraries/Tester/#assertless","text":"Checks if n1 is less than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertLess ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertLess"},{"location":"Libraries/Tester/#assertlessorequal","text":"Checks if n1 differs from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertLessOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 object First value to compare. n2 object Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertLessOrEqual"},{"location":"Libraries/Tester/#assertnotcontains","text":"Checks that str does not contain substr anywhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertNotContains"},{"location":"Libraries/Tester/#assertnotequal","text":"Checks if obj1 differs from obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertNotEqual"},{"location":"Libraries/Tester/#assertnotnull","text":"Checks if val is NotNull and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertNotNull"},{"location":"Libraries/Tester/#assertnotset","text":"Checks if val is not set (i.e. it is null, 0, false or \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNotSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertNotSet"},{"location":"Libraries/Tester/#assertnull","text":"Checks if val is null and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertNull"},{"location":"Libraries/Tester/#assertset","text":"Checks if val is set (i.e. not false, not 0, not null, not \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertSet"},{"location":"Libraries/Tester/#assertstartswith","text":"Checks if str begins with substr and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. AssertStartsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"AssertStartsWith"},{"location":"Libraries/Tester/#begintest","text":"Marks beginning of a test with a given name. BeginTest ( name , path , optionalParams ) Parameters: Name Type Description name string Test name path string Path to the test, that is executed. This string will be shown as a comment. Optional. optionalParams object Params to pass into Test(...) function. Optional.","title":"BeginTest"},{"location":"Libraries/Tester/#capturedesktopimage","text":"Captures screenshot of the desktop and adds it to the report. CaptureDesktopImage ( caption ) Parameters: Name Type Description caption string Image title for the report.","title":"CaptureDesktopImage"},{"location":"Libraries/Tester/#captureobjectimage","text":"Captures screenshot of an object and adds it to the report. CaptureObjectImage ( caption , objId ) Parameters: Name Type Description caption string Image title for the report. objId objectId Id of an object or SeSObject instance.","title":"CaptureObjectImage"},{"location":"Libraries/Tester/#capturewindowimage","text":"Captures screenshot of an application window matched by title and class and adds it to the report. CaptureWindowImage ( caption , windowTitle , windowClass , bringToFront ) Parameters: Name Type Description caption string Image title for the report. windowTitle string String or regular expression to match window title. windowClass string String or regular expression to match window class. Optional, Default: \"regex:.*\". bringToFront boolean Set to 'false' to not restore the window before making the image. Optional, Default: \"true\".","title":"CaptureWindowImage"},{"location":"Libraries/Tester/#dumpcmdargsjson","text":"Dump node.json with all arguments. DumpCmdArgsJson ( optNodeJsonPath , mkPackageJson ) Parameters: Name Type Description optNodeJsonPath string node.json path Optional. mkPackageJson bool","title":"DumpCmdArgsJson"},{"location":"Libraries/Tester/#endtest","text":"Marks end of a currently executed test. Calculates test results and performs finalization of test execution. EndTest ()","title":"EndTest"},{"location":"Libraries/Tester/#failtest","text":"Stops test execution and sets it's status to failed. FailTest ( message , internal ) Parameters: Name Type Description message string Failure description. Optional, Default: \"Test stopped on error\". internal","title":"FailTest"},{"location":"Libraries/Tester/#getparam","text":"Read parameter field passed into the Test function by field name. GetParam ( paramName , defaultValue ) Parameters: Name Type Description paramName string defaultValue string Default value","title":"GetParam"},{"location":"Libraries/Tester/#getreportattribute","text":"Gets report attribute previously set by PushReportAttribute or SetReportAttribute. GetReportAttribute ( name ) Parameters: Name Type Description name string Attribute name.","title":"GetReportAttribute"},{"location":"Libraries/Tester/#gettestname","text":"Returns name of the running test. GetTestName ()","title":"GetTestName"},{"location":"Libraries/Tester/#getteststatus","text":"Gets status of currently executed test. GetTestStatus () Returns: One of: Tester.Info - test is neither passed nor failed; 1 - Tester.Pass - test passed; 0 - Tester.Fail - test failed; -1 - Tester.Unresolved - test status is unresolved, test terminated unexpectedly.","title":"GetTestStatus"},{"location":"Libraries/Tester/#ignorestatus","text":"In IgnoreStatus mode the assertion status is always treated as \"Info\". Real status is written to \"realStatus\" attribute in this case and used just for information purposes (i.e. it does not affect final test status). This function is used when the test case needs to set test status manually. Tester.IgnoreStatus(true); Tester.Assert(\"Ignored Assertion\", false); // This assertion is failed. But its status is ignored. Tester.IgnoreStatus(false); Tester.Assert(\"Test passed\", true); // The overall test is passed because failed assertion is ignored. IgnoreStatus ( ignore ) Parameters: Name Type Description ignore boolean Set to 'true' to report all messages but ignore the status (Pass/Fail)","title":"IgnoreStatus"},{"location":"Libraries/Tester/#message","text":"Saves corresponding Report message. Message may contain some additional data (links, images, comments) set via 'data' parameter. Message ( message , data , tags ) Parameters: Name Type Description message string Message to put in the report data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"Message"},{"location":"Libraries/Tester/#messagebox","text":"Shows message box to user. Use it for verbose and manual testing. MessageBox ( message ) Parameters: Name Type Description message string Message to display.","title":"MessageBox"},{"location":"Libraries/Tester/#messageboxprompt","text":"Shows message box with question to the user and checks if user presses \"Yes\" or \"No\". \"Yes\" => \"Pass\" goes to the report with this message. \"No\" => \"Fail\" is reported. MessageBoxPrompt ( question ) Parameters: Name Type Description question string Question to display.","title":"MessageBoxPrompt"},{"location":"Libraries/Tester/#popreportattribute","text":"Resets an attribute to its previous value. See PushReportAttribute for more information. PopReportAttribute ( name ) Parameters: Name Type Description name string Attribute name to recall from stack. Returns: string: Previous value. Null if no such stacked attribute found.","title":"PopReportAttribute"},{"location":"Libraries/Tester/#pushreportattribute","text":"Maintains \"stacked\" attributes. Useful for nesting. Example: Main test sets scenario=Main. Then it calls another scenario (scenario Login) and then continues its own test actions. We want all assertions to be attributed with current scenario name. function Main() { Tester.PushReportAttribute(\"scenario\", \"Main\"); Login(); ... Tester.Assert(\"Main test passed\", mainStatus); // Saved with scenario=Main } function Login() { Tester.PushReportAttribute(\"scenario\", \"Login\"); ... // Do login logic Tester.Assert(\"Login Result\", loginStatus); Tester.PopReportAttribute(\"scenario\"); // Set scenario value back to caller } PushReportAttribute ( name , value ) Parameters: Name Type Description name string Attribute name to recall from stack. value string New attribute value.","title":"PushReportAttribute"},{"location":"Libraries/Tester/#resetreportattribute","text":"Removes report attribute previously set by SetReportAttribute. ResetReportAttribute ( name ) Parameters: Name Type Description name string Attribute name.","title":"ResetReportAttribute"},{"location":"Libraries/Tester/#setreportattribute","text":"Set persistent attribute. It will be set for all subsequent report items (assertions, tests, requirements, and so on). It may be changed by calling the ResetReportAttribute function. SetReportAttribute ( name , value ) Parameters: Name Type Description name string Attribute name to set. value string New attribute value.","title":"SetReportAttribute"},{"location":"Libraries/Tester/#softassert","text":"Is identical to Tester.Assert. But when an assertion fails, don't stop execution and just record the failure. Later you may call Tester.SoftAssertAll(..) that will stop execution if at least one assertion failed. SoftAssert ( message , condition , data , tags ) Parameters: Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssert"},{"location":"Libraries/Tester/#softassertall","text":"Fail test if there were any previous failures. This method is designed to be used after one or many calls to Tester.SoftAssert(...) . SoftAssertAll ( message ) Parameters: Name Type Description message string Message to put in the report.","title":"SoftAssertAll"},{"location":"Libraries/Tester/#softassertcontains","text":"Checks if str contains substr somewhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertContains"},{"location":"Libraries/Tester/#softassertendswith","text":"Checks that str has substr in the end and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertEndsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertEndsWith"},{"location":"Libraries/Tester/#softassertequal","text":"Checks if obj1 equals to obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertEqual"},{"location":"Libraries/Tester/#softassertfalse","text":"Checks if val is false and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertFalse ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertFalse"},{"location":"Libraries/Tester/#softassertgreater","text":"Checks if n1 greater than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertGreater ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertGreater"},{"location":"Libraries/Tester/#softassertgreaterorequal","text":"Checks if n1 greater or equal than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertGreaterOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertGreaterOrEqual"},{"location":"Libraries/Tester/#softassertimage","text":"Checks if 'img1' equals to image stored at 'path' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertImage ( message , img1 , path , data , tags ) Parameters: Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1 st image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertImage"},{"location":"Libraries/Tester/#softassertless","text":"Checks if n1 is less than n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertLess ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 number First value to compare. n2 number Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertLess"},{"location":"Libraries/Tester/#softassertlessorequal","text":"Checks if n1 differs from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertLessOrEqual ( message , n1 , n2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. n1 object First value to compare. n2 object Second value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertLessOrEqual"},{"location":"Libraries/Tester/#softassertnotcontains","text":"Checks that str does not contain substr anywhere and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotContains ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertNotContains"},{"location":"Libraries/Tester/#softassertnotequal","text":"Checks if obj1 differs from obj2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotEqual ( message , obj1 , obj2 , data , tags ) Parameters: Name Type Description message string Message to put in the report. obj1 object First object to compare. obj2 object Second object to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertNotEqual"},{"location":"Libraries/Tester/#softassertnotnull","text":"Checks if val is NotNull and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertNotNull"},{"location":"Libraries/Tester/#softassertnotset","text":"Checks if val is not set (i.e. it is null, 0, false or \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNotSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertNotSet"},{"location":"Libraries/Tester/#softassertnull","text":"Checks if val is null and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertNull ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertNull"},{"location":"Libraries/Tester/#softassertset","text":"Checks if val is set (i.e. not false, not 0, not null, not \"\") and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertSet ( message , val , data , tags ) Parameters: Name Type Description message string Message to put in the report. val object data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertSet"},{"location":"Libraries/Tester/#softassertstartswith","text":"Checks if str begins with substr and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some additional data (links, images, comments) set via 'data' parameter. SoftAssertStartsWith ( message , str , substr , data , tags ) Parameters: Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile. Optional. tags object Hash of attributes to set for this particular log entry. Optional.","title":"SoftAssertStartsWith"},{"location":"Libraries/Tester/#suppressreport","text":"In SuppressReport mode all assertions are ignored. That means no lines are added to report and all statuses are treated as \"Info\". This mode is like IgnoreStatus mode but no status messages are added to report. Tester . SuppressReport ( true ); Tester . Assert ( \"No assertion\" , false ); // Status of this assertion will be ignored and no record will be added to report SeS ( 'Obj1' ). DoClick (); // No line will be added to report and operation status will be ignored Tester . SuppressReport ( false ); SuppressReport ( suppress ) Parameters: Name Type Description suppress boolean Set to 'True' to suppress adding anything into the report.","title":"SuppressReport"},{"location":"Libraries/Text/","text":"Text \u00b6 Text object. Use it to perform text manipulations. Action Summary \u00b6 Action Description CharAt Returns a new string consisting of the single UTF-16 code unit located at the specified index into the str . CharCodeAt Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index into the str . Concat Append str2 to str1 . Contains Perform a case-sensitive search to determine whether substr may be found within str , returning true or false as appropriate. EndsWith Determines whether a str ends with the characters of substr . FileContains Perform a case-sensitive search (find in file) to determine whether substr may be found within a text file represented by filePath , returning true or false as appropriate. FirstIndex The first index at which a given substr can be found in the str , or -1 if it is not present. Format Format given formatStr template string by expanding properties of nameValueJsonObj as {param1}, {param2} etc template params. Join Concatenate all of the elements in arr array (or an array-like object), separated by commas or a specified separator string. LastIndex The last index at which a given substr can be found in the str , or -1 if it is not present. Limit Limit str to be not more than maxLength chars. PadEnd Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. PadStart Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. Repeat Returns a new string which contains the specified number of copies of str , concatenated together. ReplaceAll Replace all occurences of oldValue in str with newValue . ReplaceFirst Replace first occurence of oldValue in str with newValue . Split Divides str into an ordered list of substrings, puts these substrings into an array, and returns the array. SplitAt Get atInd th item after split. SplitCount Get number of parts that will occur after splitting given str with given separator . StartsWith Determines whether str begins with the characters of substr . Substr Extract length characters from a str , counting from the start index. Substring Text.Substring() extracts characters from indexStart up to but not including indexEnd . ToLowercase Returns str value converted to lowercase. ToString Convert anything to a string. ToUppercase Returns the str value converted to uppercase. Trim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimEnd Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimStart Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Action Detail \u00b6 CharAt \u00b6 Returns a new string consisting of the single UTF-16 code unit located at the specified index into the str . CharAt ( str , index ) Parameters: Name Type Description str string Text to extract from. index number Character position. Returns: string: Char at index . CharCodeAt \u00b6 Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index into the str . CharCodeAt ( str , index ) Parameters: Name Type Description str string Text to search in. index number Character position. Returns: number: Char code at index . Concat \u00b6 Append str2 to str1 . Concat ( str1 , str2 ) Parameters: Name Type Description str1 string 1 st part. str2 string 2 nd part (may be array). Returns: string: Combined string Contains \u00b6 Perform a case-sensitive search to determine whether substr may be found within str , returning true or false as appropriate. Contains ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true if substr was found in str . EndsWith \u00b6 Determines whether a str ends with the characters of substr . EndsWith ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true or false as appropriate FileContains \u00b6 Perform a case-sensitive search (find in file) to determine whether substr may be found within a text file represented by filePath , returning true or false as appropriate. FileContains ( filePath , substr ) Parameters: Name Type Description filePath string File Path. substr string Text to modify. Returns: boolean: true if substr was found in the file. FirstIndex \u00b6 The first index at which a given substr can be found in the str , or -1 if it is not present. Search starts from fromIndex . FirstIndex ( str , substr , fromIndex ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0. Optional. Returns: number: Index or -1 Format \u00b6 Format given formatStr template string by expanding properties of nameValueJsonObj as {param1}, {param2} etc template params.\". Designed to be called from JavaScript. If you need to call it from RVL then consider using RVL.FormatString instead. Format ( formatStr , nameValueJsonObj ) Parameters: Name Type Description formatStr string Format with template placeholders {a}, {value}, {x} etc. nameValueJsonObj object JSON-formatted object, with properties used as input parameter names. Returns: string: Formatted string Join \u00b6 Concatenate all of the elements in arr array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator. Join ( arr , separator ) Parameters: Name Type Description arr array Input array. separator string Join separator (default - ',') Optional. Returns: string: A string with all array elements joined. If arr.length is 0, the empty string is returned. LastIndex \u00b6 The last index at which a given substr can be found in the str , or -1 if it is not present. Search backwards from fromIndex . LastIndex ( str , substr , fromIndex ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0. Optional. Returns: number: Index or -1 Limit \u00b6 Limit str to be not more than maxLength chars. If ellipsis is specified, it is appended to the string. Limit ( str , maxLength , ellipsis ) Parameters: Name Type Description str string Text to limit. maxLength number The maximum allowed length of the resulting string. ellipsis string The padding text to append to the end if the string was actually shortened. Optional. Returns: string: Whole or shortened string. PadEnd \u00b6 Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied to the end of the str . PadEnd ( str , targetLength , padString ) Parameters: Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. Returns: string: A String of the specified targetLength with padString applied from the start. PadStart \u00b6 Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the str . PadStart ( str , targetLength , padString ) Parameters: Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. Returns: string: A String of the specified targetLength with padString applied from the start. Repeat \u00b6 Returns a new string which contains the specified number of copies of str , concatenated together. Repeat ( str , count ) Parameters: Name Type Description str string Text to repeat. count number Number of times to repeat. Returns: string: string containing the specified number of copies of the given string. ReplaceAll \u00b6 Replace all occurences of oldValue in str with newValue . ReplaceAll ( str , oldValue , newValue ) Parameters: Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. Returns: string: Text after replace. ReplaceFirst \u00b6 Replace first occurence of oldValue in str with newValue . ReplaceFirst ( str , oldValue , newValue ) Parameters: Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. Returns: string: Text after replace. Split \u00b6 Divides str into an ordered list of substrings, puts these substrings into an array, and returns the array. The division is done by searching for a separator . Split ( str , separator ) Parameters: Name Type Description str string Text to split. separator string Split separator Returns: array: Array of strings SplitAt \u00b6 Get atInd th item after split. If atInd <0 or atInd is more than split array size, null is returned. SplitAt ( str , separator , atInd ) Parameters: Name Type Description str string Text to split. separator string Split separator atInd number 0-based index of item Returns: string: Item string or null, if index is out of scope. SplitCount \u00b6 Get number of parts that will occur after splitting given str with given separator . SplitCount ( str , separator ) Parameters: Name Type Description str string Text to split. separator string Split separator Returns: number: Number of split parts StartsWith \u00b6 Determines whether str begins with the characters of substr . StartsWith ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true or false as appropriate Substr \u00b6 Extract length characters from a str , counting from the start index. If start is a non-negative number, the index starts counting from the start of the string. Its value is capped at str.length - 1 . If start is a negative number, the index starts counting from the end of the string. Its value is capped at -str.length . If length is omitted, Text.Substr() extracts characters to the end of the string. If length is undefined , Text.Substr() extracts characters to the end of the string. If length is a negative number, it is treated as 0. For both start and length, NaN is treated as 0. Substr ( str , start , length ) Parameters: Name Type Description str string Text to extract from. start number where to start the substring. length number how many characters to return. Optional. Returns: string: Substring Substring \u00b6 Text.Substring() extracts characters from indexStart up to but not including indexEnd . In particular: If indexEnd is omitted, Text.Substring() extracts characters to the end of the string. If indexStart is equal to indexEnd, Text.Substring() returns an empty string. If indexStart is greater than indexEnd , then the effect of Text.Substring() is as if the two arguments were swapped; Any argument value that is less than 0 or greater than str.length is treated as if it were 0 and str.length , respectively. Substring ( str , indexStart , indexEnd ) Parameters: Name Type Description str string Text to extract from. indexStart number The index of the first character to include in the returned substring. indexEnd number The index of the first character to exclude from the returned substring. Optional. Returns: string: Substring ToLowercase \u00b6 Returns str value converted to lowercase. ToLowercase ( str ) Parameters: Name Type Description str string Text to process. Returns: string: Lowercase value. ToString \u00b6 Convert anything to a string. ToString ( anyObj ) Parameters: Name Type Description anyObj object Object of any type Returns: string: string representation of the object ToUppercase \u00b6 Returns the str value converted to uppercase. ToUppercase ( str ) Parameters: Name Type Description str string Text to process. Returns: string: Uppercase value. Trim \u00b6 Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. Trim ( str , global , trimChars ) Parameters: Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed. Optional, Default: \"false\". trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string. TrimEnd \u00b6 Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. TrimEnd ( str , trimChars ) Parameters: Name Type Description str string String to trim. trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string. TrimStart \u00b6 Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. TrimStart ( str , trimChars ) Parameters: Name Type Description str string String to trim. trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string.","title":"Text"},{"location":"Libraries/Text/#text","text":"Text object. Use it to perform text manipulations.","title":"Text"},{"location":"Libraries/Text/#action-summary","text":"Action Description CharAt Returns a new string consisting of the single UTF-16 code unit located at the specified index into the str . CharCodeAt Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index into the str . Concat Append str2 to str1 . Contains Perform a case-sensitive search to determine whether substr may be found within str , returning true or false as appropriate. EndsWith Determines whether a str ends with the characters of substr . FileContains Perform a case-sensitive search (find in file) to determine whether substr may be found within a text file represented by filePath , returning true or false as appropriate. FirstIndex The first index at which a given substr can be found in the str , or -1 if it is not present. Format Format given formatStr template string by expanding properties of nameValueJsonObj as {param1}, {param2} etc template params. Join Concatenate all of the elements in arr array (or an array-like object), separated by commas or a specified separator string. LastIndex The last index at which a given substr can be found in the str , or -1 if it is not present. Limit Limit str to be not more than maxLength chars. PadEnd Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. PadStart Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. Repeat Returns a new string which contains the specified number of copies of str , concatenated together. ReplaceAll Replace all occurences of oldValue in str with newValue . ReplaceFirst Replace first occurence of oldValue in str with newValue . Split Divides str into an ordered list of substrings, puts these substrings into an array, and returns the array. SplitAt Get atInd th item after split. SplitCount Get number of parts that will occur after splitting given str with given separator . StartsWith Determines whether str begins with the characters of substr . Substr Extract length characters from a str , counting from the start index. Substring Text.Substring() extracts characters from indexStart up to but not including indexEnd . ToLowercase Returns str value converted to lowercase. ToString Convert anything to a string. ToUppercase Returns the str value converted to uppercase. Trim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimEnd Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimStart Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.","title":"Action Summary"},{"location":"Libraries/Text/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Text/#charat","text":"Returns a new string consisting of the single UTF-16 code unit located at the specified index into the str . CharAt ( str , index ) Parameters: Name Type Description str string Text to extract from. index number Character position. Returns: string: Char at index .","title":"CharAt"},{"location":"Libraries/Text/#charcodeat","text":"Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index into the str . CharCodeAt ( str , index ) Parameters: Name Type Description str string Text to search in. index number Character position. Returns: number: Char code at index .","title":"CharCodeAt"},{"location":"Libraries/Text/#concat","text":"Append str2 to str1 . Concat ( str1 , str2 ) Parameters: Name Type Description str1 string 1 st part. str2 string 2 nd part (may be array). Returns: string: Combined string","title":"Concat"},{"location":"Libraries/Text/#contains","text":"Perform a case-sensitive search to determine whether substr may be found within str , returning true or false as appropriate. Contains ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true if substr was found in str .","title":"Contains"},{"location":"Libraries/Text/#endswith","text":"Determines whether a str ends with the characters of substr . EndsWith ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true or false as appropriate","title":"EndsWith"},{"location":"Libraries/Text/#filecontains","text":"Perform a case-sensitive search (find in file) to determine whether substr may be found within a text file represented by filePath , returning true or false as appropriate. FileContains ( filePath , substr ) Parameters: Name Type Description filePath string File Path. substr string Text to modify. Returns: boolean: true if substr was found in the file.","title":"FileContains"},{"location":"Libraries/Text/#firstindex","text":"The first index at which a given substr can be found in the str , or -1 if it is not present. Search starts from fromIndex . FirstIndex ( str , substr , fromIndex ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0. Optional. Returns: number: Index or -1","title":"FirstIndex"},{"location":"Libraries/Text/#format","text":"Format given formatStr template string by expanding properties of nameValueJsonObj as {param1}, {param2} etc template params.\". Designed to be called from JavaScript. If you need to call it from RVL then consider using RVL.FormatString instead. Format ( formatStr , nameValueJsonObj ) Parameters: Name Type Description formatStr string Format with template placeholders {a}, {value}, {x} etc. nameValueJsonObj object JSON-formatted object, with properties used as input parameter names. Returns: string: Formatted string","title":"Format"},{"location":"Libraries/Text/#join","text":"Concatenate all of the elements in arr array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator. Join ( arr , separator ) Parameters: Name Type Description arr array Input array. separator string Join separator (default - ',') Optional. Returns: string: A string with all array elements joined. If arr.length is 0, the empty string is returned.","title":"Join"},{"location":"Libraries/Text/#lastindex","text":"The last index at which a given substr can be found in the str , or -1 if it is not present. Search backwards from fromIndex . LastIndex ( str , substr , fromIndex ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0. Optional. Returns: number: Index or -1","title":"LastIndex"},{"location":"Libraries/Text/#limit","text":"Limit str to be not more than maxLength chars. If ellipsis is specified, it is appended to the string. Limit ( str , maxLength , ellipsis ) Parameters: Name Type Description str string Text to limit. maxLength number The maximum allowed length of the resulting string. ellipsis string The padding text to append to the end if the string was actually shortened. Optional. Returns: string: Whole or shortened string.","title":"Limit"},{"location":"Libraries/Text/#padend","text":"Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied to the end of the str . PadEnd ( str , targetLength , padString ) Parameters: Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. Returns: string: A String of the specified targetLength with padString applied from the start.","title":"PadEnd"},{"location":"Libraries/Text/#padstart","text":"Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the str . PadStart ( str , targetLength , padString ) Parameters: Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. Returns: string: A String of the specified targetLength with padString applied from the start.","title":"PadStart"},{"location":"Libraries/Text/#repeat","text":"Returns a new string which contains the specified number of copies of str , concatenated together. Repeat ( str , count ) Parameters: Name Type Description str string Text to repeat. count number Number of times to repeat. Returns: string: string containing the specified number of copies of the given string.","title":"Repeat"},{"location":"Libraries/Text/#replaceall","text":"Replace all occurences of oldValue in str with newValue . ReplaceAll ( str , oldValue , newValue ) Parameters: Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. Returns: string: Text after replace.","title":"ReplaceAll"},{"location":"Libraries/Text/#replacefirst","text":"Replace first occurence of oldValue in str with newValue . ReplaceFirst ( str , oldValue , newValue ) Parameters: Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. Returns: string: Text after replace.","title":"ReplaceFirst"},{"location":"Libraries/Text/#split","text":"Divides str into an ordered list of substrings, puts these substrings into an array, and returns the array. The division is done by searching for a separator . Split ( str , separator ) Parameters: Name Type Description str string Text to split. separator string Split separator Returns: array: Array of strings","title":"Split"},{"location":"Libraries/Text/#splitat","text":"Get atInd th item after split. If atInd <0 or atInd is more than split array size, null is returned. SplitAt ( str , separator , atInd ) Parameters: Name Type Description str string Text to split. separator string Split separator atInd number 0-based index of item Returns: string: Item string or null, if index is out of scope.","title":"SplitAt"},{"location":"Libraries/Text/#splitcount","text":"Get number of parts that will occur after splitting given str with given separator . SplitCount ( str , separator ) Parameters: Name Type Description str string Text to split. separator string Split separator Returns: number: Number of split parts","title":"SplitCount"},{"location":"Libraries/Text/#startswith","text":"Determines whether str begins with the characters of substr . StartsWith ( str , substr ) Parameters: Name Type Description str string Text to search in. substr string Substring to find. Returns: boolean: true or false as appropriate","title":"StartsWith"},{"location":"Libraries/Text/#substr","text":"Extract length characters from a str , counting from the start index. If start is a non-negative number, the index starts counting from the start of the string. Its value is capped at str.length - 1 . If start is a negative number, the index starts counting from the end of the string. Its value is capped at -str.length . If length is omitted, Text.Substr() extracts characters to the end of the string. If length is undefined , Text.Substr() extracts characters to the end of the string. If length is a negative number, it is treated as 0. For both start and length, NaN is treated as 0. Substr ( str , start , length ) Parameters: Name Type Description str string Text to extract from. start number where to start the substring. length number how many characters to return. Optional. Returns: string: Substring","title":"Substr"},{"location":"Libraries/Text/#substring","text":"Text.Substring() extracts characters from indexStart up to but not including indexEnd . In particular: If indexEnd is omitted, Text.Substring() extracts characters to the end of the string. If indexStart is equal to indexEnd, Text.Substring() returns an empty string. If indexStart is greater than indexEnd , then the effect of Text.Substring() is as if the two arguments were swapped; Any argument value that is less than 0 or greater than str.length is treated as if it were 0 and str.length , respectively. Substring ( str , indexStart , indexEnd ) Parameters: Name Type Description str string Text to extract from. indexStart number The index of the first character to include in the returned substring. indexEnd number The index of the first character to exclude from the returned substring. Optional. Returns: string: Substring","title":"Substring"},{"location":"Libraries/Text/#tolowercase","text":"Returns str value converted to lowercase. ToLowercase ( str ) Parameters: Name Type Description str string Text to process. Returns: string: Lowercase value.","title":"ToLowercase"},{"location":"Libraries/Text/#tostring","text":"Convert anything to a string. ToString ( anyObj ) Parameters: Name Type Description anyObj object Object of any type Returns: string: string representation of the object","title":"ToString"},{"location":"Libraries/Text/#touppercase","text":"Returns the str value converted to uppercase. ToUppercase ( str ) Parameters: Name Type Description str string Text to process. Returns: string: Uppercase value.","title":"ToUppercase"},{"location":"Libraries/Text/#trim","text":"Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. Trim ( str , global , trimChars ) Parameters: Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed. Optional, Default: \"false\". trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string.","title":"Trim"},{"location":"Libraries/Text/#trimend","text":"Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. TrimEnd ( str , trimChars ) Parameters: Name Type Description str string String to trim. trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string.","title":"TrimEnd"},{"location":"Libraries/Text/#trimstart","text":"Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]. TrimStart ( str , trimChars ) Parameters: Name Type Description str string String to trim. trimChars string String with each char to be subject for trim. Optional. Returns: string: Trimmed string.","title":"TrimStart"},{"location":"Libraries/UIAButton/","text":"UIAButton \u00b6 UIAutomation UIAButton. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationButtonBehavior Property Summary \u00b6 Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState Action Summary \u00b6 Action Description DoAction Performs default action on this button. Property Detail \u00b6 ToggleState \u00b6 For toggle button this property contains its toggle state Type: boolean Accessors: GetToggleState, SetToggleState Action Detail \u00b6 DoAction \u00b6 Performs default action on this button. DoAction () Returns: boolean: 'true' if successful, 'false' otherwise","title":"UIAButton"},{"location":"Libraries/UIAButton/#uiabutton","text":"UIAutomation UIAButton. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationButtonBehavior","title":"UIAButton"},{"location":"Libraries/UIAButton/#property-summary","text":"Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState","title":"Property Summary"},{"location":"Libraries/UIAButton/#action-summary","text":"Action Description DoAction Performs default action on this button.","title":"Action Summary"},{"location":"Libraries/UIAButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAButton/#togglestate","text":"For toggle button this property contains its toggle state Type: boolean Accessors: GetToggleState, SetToggleState","title":"ToggleState"},{"location":"Libraries/UIAButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAButton/#doaction","text":"Performs default action on this button. DoAction () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoAction"},{"location":"Libraries/UIACheckBox/","text":"UIACheckBox \u00b6 UIAutomation UIACheckBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationCheckBoxBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIACheckBox"},{"location":"Libraries/UIACheckBox/#uiacheckbox","text":"UIAutomation UIACheckBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationCheckBoxBehavior","title":"UIACheckBox"},{"location":"Libraries/UIACheckBox/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/UIACheckBox/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/UIACheckBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIACheckBox/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/UIACheckBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIACheckBox/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/UIAComboBox/","text":"UIAComboBox \u00b6 UIAutomation UIAComboBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box. Property Detail \u00b6 ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Set text into combobox with an edit box. DoSetText ( newText ) Parameters: Name Type Description newText string Text to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"UIAComboBox"},{"location":"Libraries/UIAComboBox/#uiacombobox","text":"UIAutomation UIAComboBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationComboBoxBehavior","title":"UIAComboBox"},{"location":"Libraries/UIAComboBox/#property-summary","text":"Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UIAComboBox/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box.","title":"Action Summary"},{"location":"Libraries/UIAComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAComboBox/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/UIAComboBox/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UIAComboBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UIAComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAComboBox/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAComboBox/#dosettext","text":"Set text into combobox with an edit box. DoSetText ( newText ) Parameters: Name Type Description newText string Text to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSetText"},{"location":"Libraries/UIAComboBoxEdit/","text":"UIAComboBoxEdit \u00b6 UIAutomation UIAComboBoxEdit. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box. Property Detail \u00b6 ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. DoSetText \u00b6 Set text into combobox with an edit box. DoSetText ( newText ) Parameters: Name Type Description newText string Text to set Returns: boolean: 'true' if successful, 'false' otherwise Behavior Pattern: UIAutomationTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIAComboBoxEdit"},{"location":"Libraries/UIAComboBoxEdit/#uiacomboboxedit","text":"UIAutomation UIAComboBoxEdit. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationComboBoxBehavior","title":"UIAComboBoxEdit"},{"location":"Libraries/UIAComboBoxEdit/#property-summary","text":"Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UIAComboBoxEdit/#action-summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box.","title":"Action Summary"},{"location":"Libraries/UIAComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAComboBoxEdit/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/UIAComboBoxEdit/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UIAComboBoxEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UIAComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAComboBoxEdit/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAComboBoxEdit/#dosettext","text":"Set text into combobox with an edit box. DoSetText ( newText ) Parameters: Name Type Description newText string Text to set Returns: boolean: 'true' if successful, 'false' otherwise Behavior Pattern: UIAutomationTextBoxBehavior","title":"DoSetText"},{"location":"Libraries/UIAComboBoxEdit/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UIAComboBoxEdit/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UIAComboBoxEdit/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/UIAComboBoxEdit/#text_1","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UIAComboBoxEdit/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/UIAComboBoxEdit/#dosettext_1","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UIAHyperlink/","text":"UIAHyperlink \u00b6 UIAutomation UIAHyperlink. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationButtonBehavior Property Summary \u00b6 Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState Action Summary \u00b6 Action Description DoAction Performs default action on this button. Property Detail \u00b6 ToggleState \u00b6 For toggle button this property contains its toggle state Type: boolean Accessors: GetToggleState, SetToggleState Action Detail \u00b6 DoAction \u00b6 Performs default action on this button. DoAction () Returns: boolean: 'true' if successful, 'false' otherwise","title":"UIAHyperlink"},{"location":"Libraries/UIAHyperlink/#uiahyperlink","text":"UIAutomation UIAHyperlink. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationButtonBehavior","title":"UIAHyperlink"},{"location":"Libraries/UIAHyperlink/#property-summary","text":"Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState","title":"Property Summary"},{"location":"Libraries/UIAHyperlink/#action-summary","text":"Action Description DoAction Performs default action on this button.","title":"Action Summary"},{"location":"Libraries/UIAHyperlink/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAHyperlink/#togglestate","text":"For toggle button this property contains its toggle state Type: boolean Accessors: GetToggleState, SetToggleState","title":"ToggleState"},{"location":"Libraries/UIAHyperlink/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAHyperlink/#doaction","text":"Performs default action on this button. DoAction () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoAction"},{"location":"Libraries/UIALabel/","text":"UIALabel \u00b6 UIAutomation UIALabel. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"UIALabel"},{"location":"Libraries/UIALabel/#uialabel","text":"UIAutomation UIALabel. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationLabelBehavior","title":"UIALabel"},{"location":"Libraries/UIALabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/UIALabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIALabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/UIAList/","text":"UIAList \u00b6 UIAutomation UIAList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationListBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems SelectedText \u00b6 Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Performs click on the item DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index or name of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIAList"},{"location":"Libraries/UIAList/#uialist","text":"UIAutomation UIAList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationListBehavior","title":"UIAList"},{"location":"Libraries/UIAList/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/UIAList/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/UIAList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAList/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/UIAList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/UIAList/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/UIAList/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UIAList/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/UIAList/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/UIAList/#selectedtext","text":"Text of the selected item in a single string. Type: string Accessors: GetSelectedText, SetSelectedText","title":"SelectedText"},{"location":"Libraries/UIAList/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/UIAList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAList/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/UIAList/#doclickitem","text":"Performs click on the item DoClickItem ( nameCaptionIndex , clickType , xOffset , yOffset ) Parameters: Name Type Description nameCaptionIndex string | number index or name of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/UIAList/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/UIAList/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAMenu/","text":"UIAMenu \u00b6 UIAutomation UIAMenu. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuBehavior Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIAMenu"},{"location":"Libraries/UIAMenu/#uiamenu","text":"UIAutomation UIAMenu. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuBehavior","title":"UIAMenu"},{"location":"Libraries/UIAMenu/#action-summary","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/UIAMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/UIAObject/","text":"UIAObject \u00b6 UIAutomation UIAObject. Extends SeSSimulatedObject Behavior Pattern: UIAObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter AutomationId Automation ID of UI Automation object GetAutomationId ChildAt Object for nth child of this object's UI Automation node GetChildAt ChildrenCount Number of UI Automation nodes within current node GetChildrenCount Height Height of the object. GetHeight IndexInParent Object's order index in parent UI Automation node GetIndexInParent Name Name of of UI Automation object GetName NextSibling Object for UI Automation next sibling node GetNextSibling Parent Object for UI Automation parent node GetParent PrevSibling Object for UI Automation previous sibling node GetPrevSibling TypeName Type name of UI Automation object GetTypeName Value Value of the object. GetValue Visible Returns true if the element is visible, otherwise - false . GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoClick Performs left click at the center of an object. DoDumpWidget Dumps Spy data for the object. DoFindByText Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 AutomationId \u00b6 Automation ID of UI Automation object Type: string Accessors: GetAutomationId ChildAt \u00b6 Object for nth child of this object's UI Automation node Getter Parameters: Name Type Description ind number Zero-based index for a required child Type: UIAObject Accessors: GetChildAt ChildrenCount \u00b6 Number of UI Automation nodes within current node Type: number Accessors: GetChildrenCount Height \u00b6 Height of the object. Type: number Accessors: GetHeight IndexInParent \u00b6 Object's order index in parent UI Automation node Type: number Accessors: GetIndexInParent Name \u00b6 Name of of UI Automation object Type: string Accessors: GetName NextSibling \u00b6 Object for UI Automation next sibling node Type: UIAObject Accessors: GetNextSibling Parent \u00b6 Object for UI Automation parent node Type: UIAObject Accessors: GetParent PrevSibling \u00b6 Object for UI Automation previous sibling node Type: UIAObject Accessors: GetPrevSibling TypeName \u00b6 Type name of UI Automation object Type: String Accessors: GetTypeName Value \u00b6 Value of the object. Type: number Accessors: GetValue Visible \u00b6 Returns true if the element is visible, otherwise - false . Requires Rapise 6.6+ Type: boolean Accessors: GetVisible Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoClick \u00b6 Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByText \u00b6 Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: UIAObject : UIAObject containing text if found, null otherwise DoFindElementByCondition \u00b6 Finds first element matching the condition. Requires Rapise 6.6+ DoFindElementByCondition ( scope , condition ) Parameters: Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. Returns: UIAObject : UIAObject if the element is found, null otherwise DoFindElementsByCondition \u00b6 Finds all elements matching the condition DoFindElementsByCondition ( scope , condition ) Parameters: Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. Returns: Array : Array of UIAObjects for the found elements, the array is empty if nothing is found. Requires Rapise 6.6+ DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"UIAObject"},{"location":"Libraries/UIAObject/#uiaobject","text":"UIAutomation UIAObject. Extends SeSSimulatedObject Behavior Pattern: UIAObjectGenericBehavior","title":"UIAObject"},{"location":"Libraries/UIAObject/#property-summary","text":"Property Description Getter Setter AutomationId Automation ID of UI Automation object GetAutomationId ChildAt Object for nth child of this object's UI Automation node GetChildAt ChildrenCount Number of UI Automation nodes within current node GetChildrenCount Height Height of the object. GetHeight IndexInParent Object's order index in parent UI Automation node GetIndexInParent Name Name of of UI Automation object GetName NextSibling Object for UI Automation next sibling node GetNextSibling Parent Object for UI Automation parent node GetParent PrevSibling Object for UI Automation previous sibling node GetPrevSibling TypeName Type name of UI Automation object GetTypeName Value Value of the object. GetValue Visible Returns true if the element is visible, otherwise - false . GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/UIAObject/#action-summary","text":"Action Description DoClick Performs left click at the center of an object. DoDumpWidget Dumps Spy data for the object. DoFindByText Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/UIAObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAObject/#automationid","text":"Automation ID of UI Automation object Type: string Accessors: GetAutomationId","title":"AutomationId"},{"location":"Libraries/UIAObject/#childat","text":"Object for nth child of this object's UI Automation node Getter Parameters: Name Type Description ind number Zero-based index for a required child Type: UIAObject Accessors: GetChildAt","title":"ChildAt"},{"location":"Libraries/UIAObject/#childrencount","text":"Number of UI Automation nodes within current node Type: number Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/UIAObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/UIAObject/#indexinparent","text":"Object's order index in parent UI Automation node Type: number Accessors: GetIndexInParent","title":"IndexInParent"},{"location":"Libraries/UIAObject/#name","text":"Name of of UI Automation object Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/UIAObject/#nextsibling","text":"Object for UI Automation next sibling node Type: UIAObject Accessors: GetNextSibling","title":"NextSibling"},{"location":"Libraries/UIAObject/#parent","text":"Object for UI Automation parent node Type: UIAObject Accessors: GetParent","title":"Parent"},{"location":"Libraries/UIAObject/#prevsibling","text":"Object for UI Automation previous sibling node Type: UIAObject Accessors: GetPrevSibling","title":"PrevSibling"},{"location":"Libraries/UIAObject/#typename","text":"Type name of UI Automation object Type: String Accessors: GetTypeName","title":"TypeName"},{"location":"Libraries/UIAObject/#value","text":"Value of the object. Type: number Accessors: GetValue","title":"Value"},{"location":"Libraries/UIAObject/#visible","text":"Returns true if the element is visible, otherwise - false . Requires Rapise 6.6+ Type: boolean Accessors: GetVisible","title":"Visible"},{"location":"Libraries/UIAObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/UIAObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/UIAObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/UIAObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAObject/#doclick","text":"Performs left click at the center of an object. It is a customizable variant of LClick action. DoClick ( x , y ) Parameters: Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional.","title":"DoClick"},{"location":"Libraries/UIAObject/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/UIAObject/#dofindbytext","text":"Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: UIAObject : UIAObject containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/UIAObject/#dofindelementbycondition","text":"Finds first element matching the condition. Requires Rapise 6.6+ DoFindElementByCondition ( scope , condition ) Parameters: Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. Returns: UIAObject : UIAObject if the element is found, null otherwise","title":"DoFindElementByCondition"},{"location":"Libraries/UIAObject/#dofindelementsbycondition","text":"Finds all elements matching the condition DoFindElementsByCondition ( scope , condition ) Parameters: Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. Returns: Array : Array of UIAObjects for the found elements, the array is empty if nothing is found. Requires Rapise 6.6+","title":"DoFindElementsByCondition"},{"location":"Libraries/UIAObject/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/UIAProgressBar/","text":"UIAProgressBar \u00b6 UIAutomation UIAProgressBar. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetValue Sets the value of current object. Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoSetValue \u00b6 Sets the value of current object. DoSetValue ( val ) Parameters: Name Type Description val number Value to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"UIAProgressBar"},{"location":"Libraries/UIAProgressBar/#uiaprogressbar","text":"UIAutomation UIAProgressBar. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationProgressBarBehavior","title":"UIAProgressBar"},{"location":"Libraries/UIAProgressBar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/UIAProgressBar/#action-summary","text":"Action Description DoSetValue Sets the value of current object.","title":"Action Summary"},{"location":"Libraries/UIAProgressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIAProgressBar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/UIAProgressBar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/UIAProgressBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/UIAProgressBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAProgressBar/#dosetvalue","text":"Sets the value of current object. DoSetValue ( val ) Parameters: Name Type Description val number Value to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSetValue"},{"location":"Libraries/UIARadioButton/","text":"UIARadioButton \u00b6 UIAutomation UIARadioButton. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationRadioButtonBehavior Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck () Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIARadioButton"},{"location":"Libraries/UIARadioButton/#uiaradiobutton","text":"UIAutomation UIARadioButton. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationRadioButtonBehavior","title":"UIARadioButton"},{"location":"Libraries/UIARadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/UIARadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIARadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/UIASlider/","text":"UIASlider \u00b6 UIAutomation UIASlider. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetValue Sets the value of current object. Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoSetValue \u00b6 Sets the value of current object. DoSetValue ( val ) Parameters: Name Type Description val number Value to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"UIASlider"},{"location":"Libraries/UIASlider/#uiaslider","text":"UIAutomation UIASlider. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationProgressBarBehavior","title":"UIASlider"},{"location":"Libraries/UIASlider/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/UIASlider/#action-summary","text":"Action Description DoSetValue Sets the value of current object.","title":"Action Summary"},{"location":"Libraries/UIASlider/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIASlider/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/UIASlider/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/UIASlider/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/UIASlider/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIASlider/#dosetvalue","text":"Sets the value of current object. DoSetValue ( val ) Parameters: Name Type Description val number Value to set Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoSetValue"},{"location":"Libraries/UIATabControl/","text":"UIATabControl \u00b6 UIAutomation UIATabControl. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTabControlBehavior Property Summary \u00b6 Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 ItemsCount \u00b6 Number of items. Type: number Accessors: GetItemsCount SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab TabName \u00b6 Name of the tab at index Getter Parameters: Name Type Description index number Type: string Accessors: GetTabName Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIATabControl"},{"location":"Libraries/UIATabControl/#uiatabcontrol","text":"UIAutomation UIATabControl. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTabControlBehavior","title":"UIATabControl"},{"location":"Libraries/UIATabControl/#property-summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName","title":"Property Summary"},{"location":"Libraries/UIATabControl/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/UIATabControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIATabControl/#itemscount","text":"Number of items. Type: number Accessors: GetItemsCount","title":"ItemsCount"},{"location":"Libraries/UIATabControl/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UIATabControl/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab, SetSelectedTab","title":"SelectedTab"},{"location":"Libraries/UIATabControl/#tabname","text":"Name of the tab at index Getter Parameters: Name Type Description index number Type: string Accessors: GetTabName","title":"TabName"},{"location":"Libraries/UIATabControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIATabControl/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/UIATextBlock/","text":"UIATextBlock \u00b6 UIAutomation UIATextBlock. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIATextBlock"},{"location":"Libraries/UIATextBlock/#uiatextblock","text":"UIAutomation UIATextBlock. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTextBoxBehavior","title":"UIATextBlock"},{"location":"Libraries/UIATextBlock/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UIATextBlock/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UIATextBlock/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIATextBlock/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UIATextBlock/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIATextBlock/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UIATextBox/","text":"UIATextBox \u00b6 UIAutomation UIATextBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTextBoxBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIATextBox"},{"location":"Libraries/UIATextBox/#uiatextbox","text":"UIAutomation UIATextBox. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTextBoxBehavior","title":"UIATextBox"},{"location":"Libraries/UIATextBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UIATextBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UIATextBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIATextBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UIATextBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIATextBox/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UIATree/","text":"UIATree \u00b6 UIAutomation UIATree. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTreeBehavior Property Summary \u00b6 Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildAt Child at index of the selected node or a node specified by the input parameters. GetChildAt ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSelectItem Selects specified item in the tree. Property Detail \u00b6 Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked, SetChecked ChildAt \u00b6 Child at index of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node index number separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: object Accessors: GetChildAt ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects specified item in the tree. DoSelectItem ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if successful, 'false' otherwise.","title":"UIATree"},{"location":"Libraries/UIATree/#uiatree","text":"UIAutomation UIATree. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationTreeBehavior","title":"UIATree"},{"location":"Libraries/UIATree/#property-summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildAt Child at index of the selected node or a node specified by the input parameters. GetChildAt ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected","title":"Property Summary"},{"location":"Libraries/UIATree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSelectItem Selects specified item in the tree.","title":"Action Summary"},{"location":"Libraries/UIATree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UIATree/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/UIATree/#childat","text":"Child at index of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node index number separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: object Accessors: GetChildAt","title":"ChildAt"},{"location":"Libraries/UIATree/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/UIATree/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded, SetExpanded","title":"Expanded"},{"location":"Libraries/UIATree/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/UIATree/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected, SetSelected","title":"Selected"},{"location":"Libraries/UIATree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIATree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/UIATree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/UIATree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/UIATree/#doselectitem","text":"Selects specified item in the tree. DoSelectItem ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAutomationMenuDropDown/","text":"UIAutomationMenuDropDown \u00b6 Behavior patterm for dropdown (popup). Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuDropDownBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIAutomationMenuDropDown"},{"location":"Libraries/UIAutomationMenuDropDown/#uiautomationmenudropdown","text":"Behavior patterm for dropdown (popup). Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuDropDownBehavior","title":"UIAutomationMenuDropDown"},{"location":"Libraries/UIAutomationMenuDropDown/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/UIAutomationMenuDropDown/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAutomationMenuDropDown/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAutomationMenuDropDownList/","text":"UIAutomationMenuDropDownList \u00b6 UIAutomation UIAutomationMenuDropDownList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuDropDownBehavior Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UIAutomationMenuDropDownList"},{"location":"Libraries/UIAutomationMenuDropDownList/#uiautomationmenudropdownlist","text":"UIAutomation UIAutomationMenuDropDownList. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuDropDownBehavior","title":"UIAutomationMenuDropDownList"},{"location":"Libraries/UIAutomationMenuDropDownList/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/UIAutomationMenuDropDownList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UIAutomationMenuDropDownList/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UIAutomationMenuItem/","text":"UIAutomationMenuItem \u00b6 UIAutomation UIAutomationMenuItem. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuItemBehavior","title":"UIAutomationMenuItem"},{"location":"Libraries/UIAutomationMenuItem/#uiautomationmenuitem","text":"UIAutomation UIAutomationMenuItem. Extends UIAObject Extends SeSSimulatedObject Behavior Pattern: UIAutomationMenuItemBehavior","title":"UIAutomationMenuItem"},{"location":"Libraries/UltraAppMenu/","text":"UltraAppMenu \u00b6 Infragistics UltraAppMenu. UltraAppMenu UI element class: Infragistics.Win.UltraWinToolbars.ApplicationMenuControlTrusted Extends ManagedObject Behavior Pattern: UltraPopupMenuControlBehavior.UltraAppMenuControlBehavior Behavior Pattern: ManagedObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Height \u00b6 Height of the object. Type: number Accessors: GetHeight Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByName \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"UltraAppMenu"},{"location":"Libraries/UltraAppMenu/#ultraappmenu","text":"Infragistics UltraAppMenu. UltraAppMenu UI element class: Infragistics.Win.UltraWinToolbars.ApplicationMenuControlTrusted Extends ManagedObject Behavior Pattern: UltraPopupMenuControlBehavior.UltraAppMenuControlBehavior Behavior Pattern: ManagedObjectGenericBehavior","title":"UltraAppMenu"},{"location":"Libraries/UltraAppMenu/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/UltraAppMenu/#action-summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/UltraAppMenu/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraAppMenu/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/UltraAppMenu/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/UltraAppMenu/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/UltraAppMenu/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/UltraAppMenu/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/UltraAppMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraAppMenu/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/UltraAppMenu/#dofindbyname","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/UltraAppMenu/#dofindbytext","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/UltraAppMenu/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/UltraButton/","text":"UltraButton \u00b6 Infragistics UltraButton. UI element class: Infragistics.Win.Misc.UltraButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"UltraButton"},{"location":"Libraries/UltraButton/#ultrabutton","text":"Infragistics UltraButton. UI element class: Infragistics.Win.Misc.UltraButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"UltraButton"},{"location":"Libraries/UltraCheckEditor/","text":"UltraCheckEditor \u00b6 Infragistics UltraFormattedTextEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraCheckEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraCheckEditor"},{"location":"Libraries/UltraCheckEditor/#ultracheckeditor","text":"Infragistics UltraFormattedTextEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraCheckEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectCheckableBehavior","title":"UltraCheckEditor"},{"location":"Libraries/UltraCheckEditor/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/UltraCheckEditor/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/UltraCheckEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraCheckEditor/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/UltraCheckEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraCheckEditor/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/UltraColorPicker/","text":"UltraColorPicker \u00b6 Infragistics UltraColorPicker UI element class: Infragistics.Win.UltraWinEditors.UltraColorPicker Extends ManagedObject Extends SeSSimulatedObject","title":"UltraColorPicker"},{"location":"Libraries/UltraColorPicker/#ultracolorpicker","text":"Infragistics UltraColorPicker UI element class: Infragistics.Win.UltraWinEditors.UltraColorPicker Extends ManagedObject Extends SeSSimulatedObject","title":"UltraColorPicker"},{"location":"Libraries/UltraComboEditor/","text":"UltraComboEditor \u00b6 Infragistics UltraComboEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraComboEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedItem \u00b6 Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraComboEditor"},{"location":"Libraries/UltraComboEditor/#ultracomboeditor","text":"Infragistics UltraComboEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraComboEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior","title":"UltraComboEditor"},{"location":"Libraries/UltraComboEditor/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraComboEditor/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/UltraComboEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraComboEditor/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UltraComboEditor/#selecteditem","text":"Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem","title":"SelectedItem"},{"location":"Libraries/UltraComboEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraComboEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraComboEditor/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior","title":"DoSelectItem"},{"location":"Libraries/UltraComboEditor/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraComboEditor/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraComboEditor/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/UltraComboEditor/#text_1","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraComboEditor/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/UltraComboEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraCurrencyEditor/","text":"UltraCurrencyEditor \u00b6 Infragistics UltraCurrencyEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraCurrencyEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraEditBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraCurrencyEditor"},{"location":"Libraries/UltraCurrencyEditor/#ultracurrencyeditor","text":"Infragistics UltraCurrencyEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraCurrencyEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraEditBehavior","title":"UltraCurrencyEditor"},{"location":"Libraries/UltraCurrencyEditor/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraCurrencyEditor/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraCurrencyEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraCurrencyEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraCurrencyEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraCurrencyEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraDropDownButton/","text":"UltraDropDownButton \u00b6 Infragistics UltraDropDownButton. UI element class: Infragistics.Win.Misc.UltraDropDownButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"UltraDropDownButton"},{"location":"Libraries/UltraDropDownButton/#ultradropdownbutton","text":"Infragistics UltraDropDownButton. UI element class: Infragistics.Win.Misc.UltraDropDownButton Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectButtonBehavior","title":"UltraDropDownButton"},{"location":"Libraries/UltraFontNameEditor/","text":"UltraFontNameEditor \u00b6 Infragistics UltraComboEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraFontNameEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedItem \u00b6 Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraFontNameEditor"},{"location":"Libraries/UltraFontNameEditor/#ultrafontnameeditor","text":"Infragistics UltraComboEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraFontNameEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior","title":"UltraFontNameEditor"},{"location":"Libraries/UltraFontNameEditor/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraFontNameEditor/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/UltraFontNameEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraFontNameEditor/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UltraFontNameEditor/#selecteditem","text":"Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem","title":"SelectedItem"},{"location":"Libraries/UltraFontNameEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraFontNameEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraFontNameEditor/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior","title":"DoSelectItem"},{"location":"Libraries/UltraFontNameEditor/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraFontNameEditor/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraFontNameEditor/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/UltraFontNameEditor/#text_1","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraFontNameEditor/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/UltraFontNameEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraFormattedLinkLabel/","text":"UltraFormattedLinkLabel \u00b6 Infragistics UltraTextEditor. UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedLinkLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraLinkLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. DoSetValue Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. DoSetValue \u00b6 Sets text value of this object. DoSetValue ( val ) Parameters: Name Type Description val string Text value to set Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraFormattedLinkLabel"},{"location":"Libraries/UltraFormattedLinkLabel/#ultraformattedlinklabel","text":"Infragistics UltraTextEditor. UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedLinkLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraLinkLabelBehavior","title":"UltraFormattedLinkLabel"},{"location":"Libraries/UltraFormattedLinkLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/UltraFormattedLinkLabel/#action-summary","text":"Action Description DoSetText Sets text value of this object. DoSetValue Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraFormattedLinkLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraFormattedLinkLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraFormattedLinkLabel/#value","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/UltraFormattedLinkLabel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraFormattedLinkLabel/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraFormattedLinkLabel/#dosetvalue","text":"Sets text value of this object. DoSetValue ( val ) Parameters: Name Type Description val string Text value to set Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetValue"},{"location":"Libraries/UltraFormattedTextEditor/","text":"UltraFormattedTextEditor \u00b6 Infragistics UltraFormattedTextEditor. UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedTextEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraFormattedTextEditorBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraFormattedTextEditor"},{"location":"Libraries/UltraFormattedTextEditor/#ultraformattedtexteditor","text":"Infragistics UltraFormattedTextEditor. UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedTextEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraFormattedTextEditorBehavior","title":"UltraFormattedTextEditor"},{"location":"Libraries/UltraFormattedTextEditor/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraFormattedTextEditor/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraFormattedTextEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraFormattedTextEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraFormattedTextEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraFormattedTextEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraGrid/","text":"UltraGrid \u00b6 Infragistics UltraGrid. UI element class: Infragistics.Win.UltraWinGrid.UltraGrid Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Type: string Accessors: GetCell ColumnCount \u00b6 Number of columns in the table. Type: number Accessors: GetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName RowCount \u00b6 Number of rows in the table. Type: number Accessors: GetRowCount SelectedColumn \u00b6 Index of the selected column. Type: number Accessors: GetSelectedColumn SelectedRow \u00b6 Index of the selected row. Type: number Accessors: GetSelectedRow Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"UltraGrid"},{"location":"Libraries/UltraGrid/#ultragrid","text":"Infragistics UltraGrid. UI element class: Infragistics.Win.UltraWinGrid.UltraGrid Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraGridBehavior","title":"UltraGrid"},{"location":"Libraries/UltraGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText","title":"Property Summary"},{"location":"Libraries/UltraGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell.","title":"Action Summary"},{"location":"Libraries/UltraGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraGrid/#cell","text":"Text of the specified cell. Type: string Accessors: GetCell","title":"Cell"},{"location":"Libraries/UltraGrid/#columncount","text":"Number of columns in the table. Type: number Accessors: GetColumnCount","title":"ColumnCount"},{"location":"Libraries/UltraGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName","title":"ColumnName"},{"location":"Libraries/UltraGrid/#rowcount","text":"Number of rows in the table. Type: number Accessors: GetRowCount","title":"RowCount"},{"location":"Libraries/UltraGrid/#selectedcolumn","text":"Index of the selected column. Type: number Accessors: GetSelectedColumn","title":"SelectedColumn"},{"location":"Libraries/UltraGrid/#selectedrow","text":"Index of the selected row. Type: number Accessors: GetSelectedRow","title":"SelectedRow"},{"location":"Libraries/UltraGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/UltraGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType , xOffset , yOffset ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center. Optional. yOffset number Y offset to click within node. Default is a center. Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/UltraLabel/","text":"UltraLabel \u00b6 Infragistics UltraLabel. UI element class: Infragistics.Win.Misc.UltraLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraLabel"},{"location":"Libraries/UltraLabel/#ultralabel","text":"Infragistics UltraLabel. UI element class: Infragistics.Win.Misc.UltraLabel Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"UltraLabel"},{"location":"Libraries/UltraLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraLabel/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraLabel/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraLabel/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraListBar/","text":"UltraListBar \u00b6 Infragistics UltraListBar. UI element class: Infragistics.Win.UltraWinListBar.UltraListBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraListBarControlBehavior Property Summary \u00b6 Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items in this navigation bar. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group Property Detail \u00b6 Item \u00b6 Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem ItemCount \u00b6 Number of items in this navigation bar. All items may then be accessed by SeS( ).GetItem(ind) Type: Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise. DoExpandGroup \u00b6 Expand (or make active) the navigation group DoExpandGroup ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"UltraListBar"},{"location":"Libraries/UltraListBar/#ultralistbar","text":"Infragistics UltraListBar. UI element class: Infragistics.Win.UltraWinListBar.UltraListBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraListBarControlBehavior","title":"UltraListBar"},{"location":"Libraries/UltraListBar/#property-summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items in this navigation bar. GetItemCount","title":"Property Summary"},{"location":"Libraries/UltraListBar/#action-summary","text":"Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group","title":"Action Summary"},{"location":"Libraries/UltraListBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraListBar/#item","text":"Caption of the item specified by index Getter Parameters: Name Type Description ind number Index of an item to get caption Type: string Accessors: GetItem","title":"Item"},{"location":"Libraries/UltraListBar/#itemcount","text":"Number of items in this navigation bar. All items may then be accessed by SeS( ).GetItem(ind) Type: Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/UltraListBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraListBar/#doclickitem","text":"Performs click on the navigation item DoClickItem ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/UltraListBar/#doexpandgroup","text":"Expand (or make active) the navigation group DoExpandGroup ( nameCaptionIndex ) Parameters: Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoExpandGroup"},{"location":"Libraries/UltraListView/","text":"UltraListView \u00b6 Infragistics UltraListView. UI element class: Infragistics.Win.UltraWinListView.UltraListView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraListViewBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Action Summary \u00b6 Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemNameByIndex \u00b6 Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex SelectedIndices \u00b6 Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices SelectedItems \u00b6 Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems SelectionCount \u00b6 Number of selected items. Type: number Accessors: GetSelectionCount Action Detail \u00b6 DoAddSelection \u00b6 Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClearSelection \u00b6 Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise. DoRemoveSelection \u00b6 Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoSelectItem \u00b6 Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraListView"},{"location":"Libraries/UltraListView/#ultralistview","text":"Infragistics UltraListView. UI element class: Infragistics.Win.UltraWinListView.UltraListView Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraListViewBehavior","title":"UltraListView"},{"location":"Libraries/UltraListView/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount","title":"Property Summary"},{"location":"Libraries/UltraListView/#action-summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object.","title":"Action Summary"},{"location":"Libraries/UltraListView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraListView/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/UltraListView/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/UltraListView/#itemnamebyindex","text":"Returns item name by its index.'false' if name is not found. Getter Parameters: Name Type Description index number Index of the item Type: string|boolean Accessors: GetItemNameByIndex","title":"ItemNameByIndex"},{"location":"Libraries/UltraListView/#selectedindices","text":"Returns string of indexes delimited by separator or array of indexes of selected elements. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedIndices","title":"SelectedIndices"},{"location":"Libraries/UltraListView/#selecteditems","text":"Text of all the selected items in a single string. Items are divided by ';' separator. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: string Accessors: GetSelectedItems","title":"SelectedItems"},{"location":"Libraries/UltraListView/#selectioncount","text":"Number of selected items. Type: number Accessors: GetSelectionCount","title":"SelectionCount"},{"location":"Libraries/UltraListView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraListView/#doaddselection","text":"Extends selection. DoAddSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAddSelection"},{"location":"Libraries/UltraListView/#doclearselection","text":"Clears selection. DoClearSelection () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClearSelection"},{"location":"Libraries/UltraListView/#doremoveselection","text":"Removes selection from specified items. DoRemoveSelection ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoRemoveSelection"},{"location":"Libraries/UltraListView/#doselectitem","text":"Selects items of this object. First it clears existing selection. DoSelectItem ( items , separator , itemsType ) Parameters: Name Type Description items number | string | array Can be one of the following: 1. Number, index of an item. 2. String, item names delimited with separator. 3. String, item indexes delimited with separator. 4. Array of item names. 5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined. Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UltraMaskedEdit/","text":"UltraMaskedEdit \u00b6 Infragistics UltraMaskedEdit. UI element class: Infragistics.Win.UltraWinMaskedEdit.UltraMaskedEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraNumericEditBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraMaskedEdit"},{"location":"Libraries/UltraMaskedEdit/#ultramaskededit","text":"Infragistics UltraMaskedEdit. UI element class: Infragistics.Win.UltraWinMaskedEdit.UltraMaskedEdit Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraNumericEditBehavior","title":"UltraMaskedEdit"},{"location":"Libraries/UltraMaskedEdit/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraMaskedEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraMaskedEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraMaskedEdit/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/UltraMaskedEdit/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/UltraMaskedEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraMaskedEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraMaskedEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraMdiTabGroupControl/","text":"UltraMdiTabGroupControl \u00b6 Infragistics UltraMdiTabGroupControl. UI element class: Infragistics.Win.UltraWinTabbedMdi.MdiTabGroupControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraMdiTabGroupControlBehavior Property Summary \u00b6 Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraMdiTabGroupControl"},{"location":"Libraries/UltraMdiTabGroupControl/#ultramditabgroupcontrol","text":"Infragistics UltraMdiTabGroupControl. UI element class: Infragistics.Win.UltraWinTabbedMdi.MdiTabGroupControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraMdiTabGroupControlBehavior","title":"UltraMdiTabGroupControl"},{"location":"Libraries/UltraMdiTabGroupControl/#property-summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/UltraMdiTabGroupControl/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/UltraMdiTabGroupControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraMdiTabGroupControl/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/UltraMdiTabGroupControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraMdiTabGroupControl/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/UltraNumericEditor/","text":"UltraNumericEditor \u00b6 Infragistics UltraNumericEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraNumericEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraNumericEditBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraNumericEditor"},{"location":"Libraries/UltraNumericEditor/#ultranumericeditor","text":"Infragistics UltraNumericEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraNumericEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraNumericEditBehavior","title":"UltraNumericEditor"},{"location":"Libraries/UltraNumericEditor/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraNumericEditor/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraNumericEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraNumericEditor/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/UltraNumericEditor/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/UltraNumericEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraNumericEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraNumericEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraOptionSet/","text":"UltraOptionSet \u00b6 Infragistics UltraOptionSet UI element class: Infragistics.Win.UltraWinEditors.UltraOptionSet Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraOptionSetBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem Text Text of the selected item in a single string. GetText Action Summary \u00b6 Action Description DoSelectItem Performs click on the option set item Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex SelectedItem \u00b6 Selected item of the object. Type: string Accessors: GetSelectedItem Text \u00b6 Text of the selected item in a single string. Type: string Accessors: GetText Action Detail \u00b6 DoSelectItem \u00b6 Performs click on the option set item DoSelectItem ( captionIndex ) Parameters: Name Type Description captionIndex string | number index or caption of the item to be selected. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraOptionSet"},{"location":"Libraries/UltraOptionSet/#ultraoptionset","text":"Infragistics UltraOptionSet UI element class: Infragistics.Win.UltraWinEditors.UltraOptionSet Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraOptionSetBehavior","title":"UltraOptionSet"},{"location":"Libraries/UltraOptionSet/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem Text Text of the selected item in a single string. GetText","title":"Property Summary"},{"location":"Libraries/UltraOptionSet/#action-summary","text":"Action Description DoSelectItem Performs click on the option set item","title":"Action Summary"},{"location":"Libraries/UltraOptionSet/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraOptionSet/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UltraOptionSet/#selecteditem","text":"Selected item of the object. Type: string Accessors: GetSelectedItem","title":"SelectedItem"},{"location":"Libraries/UltraOptionSet/#text","text":"Text of the selected item in a single string. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/UltraOptionSet/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraOptionSet/#doselectitem","text":"Performs click on the option set item DoSelectItem ( captionIndex ) Parameters: Name Type Description captionIndex string | number index or caption of the item to be selected. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/UltraPopupMenu/","text":"UltraPopupMenu \u00b6 Infragistics UltraPopupMenu. UltraPopupMenu UI element class: Infragistics.Win.UltraWinToolbars.PopupMenuControlTrusted Extends ManagedObject Behavior Pattern: UltraPopupMenuControlBehavior Behavior Pattern: ManagedObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Height \u00b6 Height of the object. Type: number Accessors: GetHeight Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByName \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"UltraPopupMenu"},{"location":"Libraries/UltraPopupMenu/#ultrapopupmenu","text":"Infragistics UltraPopupMenu. UltraPopupMenu UI element class: Infragistics.Win.UltraWinToolbars.PopupMenuControlTrusted Extends ManagedObject Behavior Pattern: UltraPopupMenuControlBehavior Behavior Pattern: ManagedObjectGenericBehavior","title":"UltraPopupMenu"},{"location":"Libraries/UltraPopupMenu/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/UltraPopupMenu/#action-summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/UltraPopupMenu/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraPopupMenu/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/UltraPopupMenu/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/UltraPopupMenu/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/UltraPopupMenu/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/UltraPopupMenu/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/UltraPopupMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraPopupMenu/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/UltraPopupMenu/#dofindbyname","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/UltraPopupMenu/#dofindbytext","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/UltraPopupMenu/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/UltraProgressBar/","text":"UltraProgressBar \u00b6 Infragistics UltraProgressBar. UI element class: Infragistics.Win.UltraWinProgressBar.UltraProgressBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraProgressBarBehavior Property Summary \u00b6 Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSetValue Sets value of this object. Property Detail \u00b6 MaxValue \u00b6 Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue MinValue \u00b6 Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue Action Detail \u00b6 DoSetValue \u00b6 Sets value of this object. DoSetValue ( value ) Parameters: Name Type Description value number Value to set. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"UltraProgressBar"},{"location":"Libraries/UltraProgressBar/#ultraprogressbar","text":"Infragistics UltraProgressBar. UI element class: Infragistics.Win.UltraWinProgressBar.UltraProgressBar Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraProgressBarBehavior","title":"UltraProgressBar"},{"location":"Libraries/UltraProgressBar/#property-summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/UltraProgressBar/#action-summary","text":"Action Description DoSetValue Sets value of this object.","title":"Action Summary"},{"location":"Libraries/UltraProgressBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraProgressBar/#maxvalue","text":"Maximum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMaxValue, SetMaxValue","title":"MaxValue"},{"location":"Libraries/UltraProgressBar/#minvalue","text":"Minimum value of the object or 'false' if value can't be read. Type: number|boolean Accessors: GetMinValue, SetMinValue","title":"MinValue"},{"location":"Libraries/UltraProgressBar/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/UltraProgressBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraProgressBar/#dosetvalue","text":"Sets value of this object. DoSetValue ( value ) Parameters: Name Type Description value number Value to set. Returns: boolean: 'true' if successful, 'false' otherwise.","title":"DoSetValue"},{"location":"Libraries/UltraRibbon/","text":"UltraRibbon \u00b6 Infragistics UltraRibbon. UI element class: Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraRibbonControlBehavior Property Summary \u00b6 Property Description Getter Setter DropdownCount NUmber of dropdown controls. GetDropdownCount ItemValue Value of an item. GetItemValue ToggleState Toggle state of a button GetToggleState Action Summary \u00b6 Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon. DoItemDropSelect Clicks specific item in the drop control. DoMenu Performs click on the menu item. Property Detail \u00b6 DropdownCount \u00b6 NUmber of dropdown controls. Getter Parameters: Name Type Description caption string Name of a dropdown. Type: number Accessors: GetDropdownCount ItemValue \u00b6 Value of an item. Getter Parameters: Name Type Description caption string Name of an item. Type: string|number|boolean Accessors: GetItemValue ToggleState \u00b6 Toggle state of a button Getter Parameters: Name Type Description caption string Name of a button. Type: boolean Accessors: GetToggleState Action Detail \u00b6 DoClickApplicationButton \u00b6 Clicks an application button on the ribbon. DoClickApplicationButton ( xOffset , yOffset ) Parameters: Name Type Description xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickItem \u00b6 Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickTab \u00b6 Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoItemDropSelect \u00b6 Clicks specific item in the drop control. DoItemDropSelect ( caption , item ) Parameters: Name Type Description caption string Caption of the drop control. item string Item to select. Returns: boolean: 'true' if success, 'false' otherwise. DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraRibbon"},{"location":"Libraries/UltraRibbon/#ultraribbon","text":"Infragistics UltraRibbon. UI element class: Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraRibbonControlBehavior","title":"UltraRibbon"},{"location":"Libraries/UltraRibbon/#property-summary","text":"Property Description Getter Setter DropdownCount NUmber of dropdown controls. GetDropdownCount ItemValue Value of an item. GetItemValue ToggleState Toggle state of a button GetToggleState","title":"Property Summary"},{"location":"Libraries/UltraRibbon/#action-summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon. DoItemDropSelect Clicks specific item in the drop control. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/UltraRibbon/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraRibbon/#dropdowncount","text":"NUmber of dropdown controls. Getter Parameters: Name Type Description caption string Name of a dropdown. Type: number Accessors: GetDropdownCount","title":"DropdownCount"},{"location":"Libraries/UltraRibbon/#itemvalue","text":"Value of an item. Getter Parameters: Name Type Description caption string Name of an item. Type: string|number|boolean Accessors: GetItemValue","title":"ItemValue"},{"location":"Libraries/UltraRibbon/#togglestate","text":"Toggle state of a button Getter Parameters: Name Type Description caption string Name of a button. Type: boolean Accessors: GetToggleState","title":"ToggleState"},{"location":"Libraries/UltraRibbon/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraRibbon/#doclickapplicationbutton","text":"Clicks an application button on the ribbon. DoClickApplicationButton ( xOffset , yOffset ) Parameters: Name Type Description xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickApplicationButton"},{"location":"Libraries/UltraRibbon/#doclickitem","text":"Clicks on an item on the ribbon. DoClickItem ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickItem"},{"location":"Libraries/UltraRibbon/#doclicktab","text":"Clicks on a tab in the ribbon. DoClickTab ( caption , xOffset , yOffset ) Parameters: Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickTab"},{"location":"Libraries/UltraRibbon/#doitemdropselect","text":"Clicks specific item in the drop control. DoItemDropSelect ( caption , item ) Parameters: Name Type Description caption string Caption of the drop control. item string Item to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoItemDropSelect"},{"location":"Libraries/UltraRibbon/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/UltraTabControl/","text":"UltraTabControl \u00b6 Infragistics UltraTabControl. UI element class: Infragistics.Win.UltraWinTabControl.UltraTabControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraTabControlBehavior Property Summary \u00b6 Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name. Property Detail \u00b6 SelectedTab \u00b6 Text of the selected tab Type: string Accessors: GetSelectedTab Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraTabControl"},{"location":"Libraries/UltraTabControl/#ultratabcontrol","text":"Infragistics UltraTabControl. UI element class: Infragistics.Win.UltraWinTabControl.UltraTabControl Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraTabControlBehavior","title":"UltraTabControl"},{"location":"Libraries/UltraTabControl/#property-summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab","title":"Property Summary"},{"location":"Libraries/UltraTabControl/#action-summary","text":"Action Description DoSelectTab Selects the tab by name.","title":"Action Summary"},{"location":"Libraries/UltraTabControl/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraTabControl/#selectedtab","text":"Text of the selected tab Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/UltraTabControl/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraTabControl/#doselecttab","text":"Selects the tab by name. DoSelectTab ( tabName ) Parameters: Name Type Description tabName string Tab name to select Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/UltraTextEditor/","text":"UltraTextEditor \u00b6 Infragistics UltraTextEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraTextEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraTextEditor"},{"location":"Libraries/UltraTextEditor/#ultratexteditor","text":"Infragistics UltraTextEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraTextEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedObjectTextBehavior","title":"UltraTextEditor"},{"location":"Libraries/UltraTextEditor/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraTextEditor/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraTextEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraTextEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraTextEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraTextEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraTimeZoneEditor/","text":"UltraTimeZoneEditor \u00b6 Infragistics UltraTimeZoneEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraTimeZoneEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior Property Summary \u00b6 Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 SelectedIndex \u00b6 Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex SelectedItem \u00b6 Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraTimeZoneEditor"},{"location":"Libraries/UltraTimeZoneEditor/#ultratimezoneeditor","text":"Infragistics UltraTimeZoneEditor. UI element class: Infragistics.Win.UltraWinEditors.UltraTimeZoneEditor Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraComboBoxBehavior","title":"UltraTimeZoneEditor"},{"location":"Libraries/UltraTimeZoneEditor/#property-summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraTimeZoneEditor/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/UltraTimeZoneEditor/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraTimeZoneEditor/#selectedindex","text":"Index of the selected element of the object. Type: number Accessors: GetSelectedIndex, SetSelectedIndex","title":"SelectedIndex"},{"location":"Libraries/UltraTimeZoneEditor/#selecteditem","text":"Selected item of the object. Type: string Accessors: GetSelectedItem, SetSelectedItem","title":"SelectedItem"},{"location":"Libraries/UltraTimeZoneEditor/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraTimeZoneEditor/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraTimeZoneEditor/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: ManagedObjectTextBehavior","title":"DoSelectItem"},{"location":"Libraries/UltraTimeZoneEditor/#property-summary_1","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/UltraTimeZoneEditor/#action-summary_1","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/UltraTimeZoneEditor/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/UltraTimeZoneEditor/#text_1","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/UltraTimeZoneEditor/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/UltraTimeZoneEditor/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/UltraTree/","text":"UltraTree \u00b6 Infragistics UltraTree. UI element class: Infragistics.Win.UltraWinTree.UltraTree Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraTreeBehavior Property Summary \u00b6 Property Description Getter Setter CellText Cell text for the cell specified by rowPath and col GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText Action Summary \u00b6 Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node Property Detail \u00b6 CellText \u00b6 Cell text for the cell specified by rowPath and col Getter Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. column number | string Column index or column name. Default is 0 Optional. Type: string Accessors: GetCellText Checked \u00b6 Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked ChildrenCount \u00b6 Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded IndexPath \u00b6 Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath NodeText \u00b6 Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText Selected \u00b6 Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected Text \u00b6 ;-combined text of all selected nodes. Type: string Accessors: GetText Action Detail \u00b6 DoClickCell \u00b6 Click the cell specified by row name or index and column name or index DoClickCell ( rowPath , col , clickType , xOffset , yOffset ) Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoSetCheck \u00b6 Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"UltraTree"},{"location":"Libraries/UltraTree/#ultratree","text":"Infragistics UltraTree. UI element class: Infragistics.Win.UltraWinTree.UltraTree Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: UltraTreeBehavior","title":"UltraTree"},{"location":"Libraries/UltraTree/#property-summary","text":"Property Description Getter Setter CellText Cell text for the cell specified by rowPath and col GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText","title":"Property Summary"},{"location":"Libraries/UltraTree/#action-summary","text":"Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node","title":"Action Summary"},{"location":"Libraries/UltraTree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/UltraTree/#celltext","text":"Cell text for the cell specified by rowPath and col Getter Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. column number | string Column index or column name. Default is 0 Optional. Type: string Accessors: GetCellText","title":"CellText"},{"location":"Libraries/UltraTree/#checked","text":"Checked state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/UltraTree/#childrencount","text":"Number of children of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/UltraTree/#expanded","text":"Expanded state of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/UltraTree/#indexpath","text":"Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetIndexPath","title":"IndexPath"},{"location":"Libraries/UltraTree/#nodetext","text":"Text of the selected node or a node specified by the input parameters. Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: string|boolean Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/UltraTree/#selected","text":"Selected state of the selected node or a node specified by the input parameters Getter Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/UltraTree/#text","text":";-combined text of all selected nodes. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/UltraTree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/UltraTree/#doclickcell","text":"Click the cell specified by row name or index and column name or index DoClickCell ( rowPath , col , clickType , xOffset , yOffset ) Parameters: Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickCell"},{"location":"Libraries/UltraTree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType , column , clickType , xOffset , yOffset ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". column number | string Column index or column name. Default is 0 Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height (requires Rapise 6.5+, also requires native events mode in Web tests). Optional. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/UltraTree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/UltraTree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/UltraTree/#dosetcheck","text":"Set 'checked' state of the specified node DoSetCheck ( bcheck , path , separator , pathType ) Parameters: Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/VButton/","text":"VButton \u00b6 Oracle Forms VButton. UI element class: oracle.forms.ui.VButton Extends OracleFormsObject Extends SeSSimulatedObject","title":"VButton"},{"location":"Libraries/VButton/#vbutton","text":"Oracle Forms VButton. UI element class: oracle.forms.ui.VButton Extends OracleFormsObject Extends SeSSimulatedObject","title":"VButton"},{"location":"Libraries/VComboBox/","text":"VComboBox \u00b6 Oracle Forms VComboBox. UI element class: oracle.forms.ui.VComboBox Extends VPopList Extends SeSSimulatedObject","title":"VComboBox"},{"location":"Libraries/VComboBox/#vcombobox","text":"Oracle Forms VComboBox. UI element class: oracle.forms.ui.VComboBox Extends VPopList Extends SeSSimulatedObject","title":"VComboBox"},{"location":"Libraries/VPopList/","text":"VPopList \u00b6 Oracle Forms VPopList. UI element class: oracle.forms.ui.VPopList Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsChoiceBehavior Property Summary \u00b6 Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName Value Value of the object. GetValue SetValue Action Summary \u00b6 Action Description DoSelectItem Selects an item of this object. Property Detail \u00b6 ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName Value \u00b6 Value of the object. Type: text Accessors: GetValue, SetValue Action Detail \u00b6 DoSelectItem \u00b6 Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"VPopList"},{"location":"Libraries/VPopList/#vpoplist","text":"Oracle Forms VPopList. UI element class: oracle.forms.ui.VPopList Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsChoiceBehavior","title":"VPopList"},{"location":"Libraries/VPopList/#property-summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/VPopList/#action-summary","text":"Action Description DoSelectItem Selects an item of this object.","title":"Action Summary"},{"location":"Libraries/VPopList/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/VPopList/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/VPopList/#value","text":"Value of the object. Type: text Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/VPopList/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/VPopList/#doselectitem","text":"Selects an item of this object. DoSelectItem ( item ) Parameters: Name Type Description item string | number Item index or text value to select. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/VSFlexGrid/","text":"VSFlexGrid \u00b6 This behavior pattern implements standard behavior for Grid control. Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: VSFlexGridBehavior Property Summary \u00b6 Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName Height Height of the object. GetHeight RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedRow Checked state of the selected node or a node specified by the input parameters. GetSelectedRow SetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows SetSelectedRows Text Text of the currently focused cell. GetText SetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the grid. Property Detail \u00b6 Cell \u00b6 Text of the specified cell. Getter Parameters: Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. Type: string Accessors: GetCell, SetCell ColumnCount \u00b6 Number of columns in the grid. Type: number Accessors: GetColumnCount, SetColumnCount ColumnName \u00b6 Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName Height \u00b6 Height of the object. Type: number Accessors: GetHeight RowCount \u00b6 Number of rows in the grid. Type: number Accessors: GetRowCount, SetRowCount SelectedRow \u00b6 Checked state of the selected node or a node specified by the input parameters. Type: boolean Accessors: GetSelectedRow, SetSelectedRow SelectedRowCount \u00b6 Number of selected rows. Type: number Accessors: GetSelectedRowCount SelectedRows \u00b6 Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows, SetSelectedRows Text \u00b6 Text of the currently focused cell. Type: string Accessors: GetText, SetText Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoClickCell \u00b6 Clicks the specified cell. DoClickCell ( row , col , clickType ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if successful, 'false' otherwise DoClickText \u00b6 Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise DoFullText \u00b6 Returns text representation of the grid. DoFullText ( path , fmt ) Parameters: Name Type Description path string Name of a file that should hold text representation of the grid. Optional. fmt number function () { } Optional. Returns: string: Path to a file with grid text when 'path' param is defined. Otherwise return Grid text.","title":"VSFlexGrid"},{"location":"Libraries/VSFlexGrid/#vsflexgrid","text":"This behavior pattern implements standard behavior for Grid control. Extends ActiveXObject Extends SeSSimulatedObject Behavior Pattern: VSFlexGridBehavior","title":"VSFlexGrid"},{"location":"Libraries/VSFlexGrid/#property-summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName Height Height of the object. GetHeight RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedRow Checked state of the selected node or a node specified by the input parameters. GetSelectedRow SetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows SetSelectedRows Text Text of the currently focused cell. GetText SetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/VSFlexGrid/#action-summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the grid.","title":"Action Summary"},{"location":"Libraries/VSFlexGrid/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/VSFlexGrid/#cell","text":"Text of the specified cell. Getter Parameters: Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. Type: string Accessors: GetCell, SetCell","title":"Cell"},{"location":"Libraries/VSFlexGrid/#columncount","text":"Number of columns in the grid. Type: number Accessors: GetColumnCount, SetColumnCount","title":"ColumnCount"},{"location":"Libraries/VSFlexGrid/#columnname","text":"Caption of a column. Getter Parameters: Name Type Description columnIndex number Zero-based index of the column. Type: string Accessors: GetColumnName, SetColumnName","title":"ColumnName"},{"location":"Libraries/VSFlexGrid/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/VSFlexGrid/#rowcount","text":"Number of rows in the grid. Type: number Accessors: GetRowCount, SetRowCount","title":"RowCount"},{"location":"Libraries/VSFlexGrid/#selectedrow","text":"Checked state of the selected node or a node specified by the input parameters. Type: boolean Accessors: GetSelectedRow, SetSelectedRow","title":"SelectedRow"},{"location":"Libraries/VSFlexGrid/#selectedrowcount","text":"Number of selected rows. Type: number Accessors: GetSelectedRowCount","title":"SelectedRowCount"},{"location":"Libraries/VSFlexGrid/#selectedrows","text":"Selected rows. Getter Parameters: Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Type: array|string Accessors: GetSelectedRows, SetSelectedRows","title":"SelectedRows"},{"location":"Libraries/VSFlexGrid/#text","text":"Text of the currently focused cell. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/VSFlexGrid/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/VSFlexGrid/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/VSFlexGrid/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/VSFlexGrid/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/VSFlexGrid/#doclickcell","text":"Clicks the specified cell. DoClickCell ( row , col , clickType ) Parameters: Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClickCell"},{"location":"Libraries/VSFlexGrid/#doclicktext","text":"Clicks on a specific text inside the grid. DoClickText ( textOrRegexp , clickType ) Parameters: Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\" Optional, Default: \"L\". Returns: 'true' if successful, 'false' otherwise","title":"DoClickText"},{"location":"Libraries/VSFlexGrid/#dofulltext","text":"Returns text representation of the grid. DoFullText ( path , fmt ) Parameters: Name Type Description path string Name of a file that should hold text representation of the grid. Optional. fmt number function () { } Optional. Returns: string: Path to a file with grid text when 'path' param is defined. Otherwise return Grid text.","title":"DoFullText"},{"location":"Libraries/VTextField/","text":"VTextField \u00b6 Oracle Forms VTextField. UI element class: oracle.forms.ui.VTextField Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Value \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val , bvalidate ) Parameters: Name Type Description val string Text value. bvalidate boolean Force validation of entered value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"VTextField"},{"location":"Libraries/VTextField/#vtextfield","text":"Oracle Forms VTextField. UI element class: oracle.forms.ui.VTextField Extends OracleFormsObject Extends SeSSimulatedObject Behavior Pattern: OracleFormsTextFieldBehavior","title":"VTextField"},{"location":"Libraries/VTextField/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/VTextField/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/VTextField/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/VTextField/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/VTextField/#value","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/VTextField/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/VTextField/#dosettext","text":"Sets text value of this object. DoSetText ( val , bvalidate ) Parameters: Name Type Description val string Text value. bvalidate boolean Force validation of entered value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/ValueListDropDownUnsafe/","text":"ValueListDropDownUnsafe \u00b6 Infragistics ValueListDropDownUnsafe. UI element class: Infragistics.Win.ValueListDropDownUnsafe Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedComboItemBehavior Behavior Pattern: ManagedObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name. Property Detail \u00b6 ControlType \u00b6 Type of the object. Type: string Accessors: GetControlType Height \u00b6 Height of the object. Type: number Accessors: GetHeight Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoDumpWidget \u00b6 Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise. DoFindByName \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoFindByText \u00b6 Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise DoGetWidgetProperty \u00b6 Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"ValueListDropDownUnsafe"},{"location":"Libraries/ValueListDropDownUnsafe/#valuelistdropdownunsafe","text":"Infragistics ValueListDropDownUnsafe. UI element class: Infragistics.Win.ValueListDropDownUnsafe Extends ManagedObject Extends SeSSimulatedObject Behavior Pattern: ManagedComboItemBehavior Behavior Pattern: ManagedObjectGenericBehavior","title":"ValueListDropDownUnsafe"},{"location":"Libraries/ValueListDropDownUnsafe/#property-summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Height Height of the object. GetHeight Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/ValueListDropDownUnsafe/#action-summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name.","title":"Action Summary"},{"location":"Libraries/ValueListDropDownUnsafe/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/ValueListDropDownUnsafe/#controltype","text":"Type of the object. Type: string Accessors: GetControlType","title":"ControlType"},{"location":"Libraries/ValueListDropDownUnsafe/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/ValueListDropDownUnsafe/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/ValueListDropDownUnsafe/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/ValueListDropDownUnsafe/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/ValueListDropDownUnsafe/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/ValueListDropDownUnsafe/#dodumpwidget","text":"Dumps Spy data for the object. DoDumpWidget ( dumpProperties , maxDepth , trimValue , indent , filePath , append , ignoreProps ) Parameters: Name Type Description dumpProperties boolean If 'true' then includes properties to the result. Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects. Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated. Optional, Default: \"256\". indent string Indentation string for child objects and properties. Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file. Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended. Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file. Optional, Default: \"undefined\". Returns: string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.","title":"DoDumpWidget"},{"location":"Libraries/ValueListDropDownUnsafe/#dofindbyname","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByName ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByName"},{"location":"Libraries/ValueListDropDownUnsafe/#dofindbytext","text":"Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText ( textOrRegexp , depth ) Parameters: Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3) Optional, Default: \"3\". Returns: object: Object containing text if found, null otherwise","title":"DoFindByText"},{"location":"Libraries/ValueListDropDownUnsafe/#dogetwidgetproperty","text":"Returns the value of a property with a given name. Names of available properties can be seen in Spy. DoGetWidgetProperty ( name ) Parameters: Name Type Description name string Property name. Returns: string: Property value if successful, an empty string if the property can not be found.","title":"DoGetWidgetProperty"},{"location":"Libraries/WebDriver/","text":"WebDriver \u00b6 This is a JavaScript wrapper for RemoteWebDriver of Selenium .NET library. Action Summary \u00b6 Action Description Actions Gets Actions object. ClearSessions Deletes active sessions on Selenium grid. Close Close the Browser and Dispose of WebDriver. Cookies Gets Cookies object. CreateDriver This will create a WebDriver for currently selected Browser profile. CreateDriverForSession Connects to active Selenium session with given URL and Id. Dispose Dispose of WebDriver. DownloadDriver This will download required binary (e.g. DumpSessions Prints information about active Selenium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetPageSource Gets the source of the page last loaded by the browser. GetProfileCapability GetScreenshot Gets the screenshot of the page. GetScreenshotIW GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. SaveSession Saves session information for use by ReconnectSession. SetBrowserSize Sets size of a browser window. SetUrl Sets the URL the browser is currently displaying. SwitchToAlert Switches to the currently active modal dialog for this particular driver instance. SwitchToDefaultContent Change the active frame to the default. SwitchToFrame Move to different frame using its element. SwitchToLastWindow Switch to last browser window. SwitchToParentFrame Select the parent frame of the currently selected frame. SwitchToWindow Switch to window specified by handle. Window Gets Window object. Action Detail \u00b6 Actions \u00b6 Gets Actions object. Actions () ClearSessions \u00b6 Deletes active sessions on Selenium grid. ClearSessions () Close \u00b6 Close the Browser and Dispose of WebDriver. Close () Cookies \u00b6 Gets Cookies object. Cookies () CreateDriver \u00b6 This will create a WebDriver for currently selected Browser profile. CreateDriver ( nonProfileCapsJson ) Parameters: Name Type Description nonProfileCapsJson object JSON object with capabilities not available in a Browser profile. Returns: WebDriver object. CreateDriverForSession \u00b6 Connects to active Selenium session with given URL and Id. CreateDriverForSession ( addressOfRemoteServer , sessionId ) Parameters: Name Type Description addressOfRemoteServer Selenium server URL. sessionId Id of the session to connect. Returns: true if successful, false otherwise. Dispose \u00b6 Dispose of WebDriver. Dispose () DownloadDriver \u00b6 This will download required binary (e.g. chromedriver.exe) for currently selected Browser profile. Requires Rapise 7.2+ DownloadDriver ( driverVersion ) Parameters: Name Type Description driverVersion string Version of the driver executable. Optional. Returns: true if successful, otherwise - false . DumpSessions \u00b6 Prints information about active Selenium sessions to output. DumpSessions () ExecuteScript \u00b6 Executes JavaScript in the context of the currently selected frame or window. ExecuteScript ( script , args ) Parameters: Name Type Description script string The JavaScript code to execute. args array The arguments to the script. Returns: Null, string or element depending on the script. FindElementByClassName \u00b6 Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element. Returns: element or null. FindElementByCssSelector \u00b6 Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: element ot null. FindElementById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element. Returns: element or null. FindElementByLinkText \u00b6 Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: element or null. FindElementByName \u00b6 Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: element or null. FindElementByPartialLinkText \u00b6 Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: element or null. FindElementByTagName \u00b6 Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: element or null. FindElementByXPath \u00b6 Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: element or null. FindElementsByClassName \u00b6 Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string className of the element. Returns: array of elements. FindElementsByCssSelector \u00b6 Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: array of elements. FindElementsById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element. Returns: array of elements. FindElementsByLinkText \u00b6 Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText Link text of element. Returns: array of elements. FindElementsByName \u00b6 Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: array of elements. FindElementsByPartialLinkText \u00b6 Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: array of elements. FindElementsByTagName \u00b6 Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: array of elements. FindElementsByXPath \u00b6 Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: array of elements. GetAddressOfRemoteServer \u00b6 GetAddressOfRemoteServer () Returns: URL of the remote Selenium server. GetCurrentWindowHandle \u00b6 Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetCurrentWindowHandle () GetPageSource \u00b6 Gets the source of the page last loaded by the browser. GetPageSource () GetProfileCapability \u00b6 GetProfileCapability ( name ) Parameters: Name Type Description name GetScreenshot \u00b6 Gets the screenshot of the page. GetScreenshot () GetScreenshotIW \u00b6 GetScreenshotIW () GetSessionId \u00b6 GetSessionId () Returns: Id of the current session. GetTitle \u00b6 Gets the title of the current browser window. GetTitle () GetUrl \u00b6 Gets the URL the browser is currently displaying. GetUrl () GetWindowHandles \u00b6 Gets the window handles of open browser windows. GetWindowHandles () Quit \u00b6 Disconnects from the Browser. Quit () ReconnectSession \u00b6 Reads session information produced by SaveSession and connects to the mobile target. ReconnectSession ( autoCreate ) Parameters: Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore. Optional, Default: \"false\". SaveSession \u00b6 Saves session information for use by ReconnectSession. SaveSession () SetBrowserSize \u00b6 Sets size of a browser window. SetBrowserSize ( width , height ) Parameters: Name Type Description width number Window width to set height number Window height to set SetUrl \u00b6 Sets the URL the browser is currently displaying. SetUrl ( url ) Parameters: Name Type Description url string The URL to display SwitchToAlert \u00b6 Switches to the currently active modal dialog for this particular driver instance. SwitchToAlert () SwitchToDefaultContent \u00b6 Change the active frame to the default. SwitchToDefaultContent () SwitchToFrame \u00b6 Move to different frame using its element. SwitchToFrame ( el ) Parameters: Name Type Description el WebElementWrapper Element of the frame. SwitchToLastWindow \u00b6 Switch to last browser window. SwitchToLastWindow () SwitchToParentFrame \u00b6 Select the parent frame of the currently selected frame. SwitchToParentFrame () SwitchToWindow \u00b6 Switch to window specified by handle. SwitchToWindow ( windowHandle ) Parameters: Name Type Description windowHandle Window \u00b6 Gets Window object. Window ()","title":"WebDriver"},{"location":"Libraries/WebDriver/#webdriver","text":"This is a JavaScript wrapper for RemoteWebDriver of Selenium .NET library.","title":"WebDriver"},{"location":"Libraries/WebDriver/#action-summary","text":"Action Description Actions Gets Actions object. ClearSessions Deletes active sessions on Selenium grid. Close Close the Browser and Dispose of WebDriver. Cookies Gets Cookies object. CreateDriver This will create a WebDriver for currently selected Browser profile. CreateDriverForSession Connects to active Selenium session with given URL and Id. Dispose Dispose of WebDriver. DownloadDriver This will download required binary (e.g. DumpSessions Prints information about active Selenium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetPageSource Gets the source of the page last loaded by the browser. GetProfileCapability GetScreenshot Gets the screenshot of the page. GetScreenshotIW GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. SaveSession Saves session information for use by ReconnectSession. SetBrowserSize Sets size of a browser window. SetUrl Sets the URL the browser is currently displaying. SwitchToAlert Switches to the currently active modal dialog for this particular driver instance. SwitchToDefaultContent Change the active frame to the default. SwitchToFrame Move to different frame using its element. SwitchToLastWindow Switch to last browser window. SwitchToParentFrame Select the parent frame of the currently selected frame. SwitchToWindow Switch to window specified by handle. Window Gets Window object.","title":"Action Summary"},{"location":"Libraries/WebDriver/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/WebDriver/#actions","text":"Gets Actions object. Actions ()","title":"Actions"},{"location":"Libraries/WebDriver/#clearsessions","text":"Deletes active sessions on Selenium grid. ClearSessions ()","title":"ClearSessions"},{"location":"Libraries/WebDriver/#close","text":"Close the Browser and Dispose of WebDriver. Close ()","title":"Close"},{"location":"Libraries/WebDriver/#cookies","text":"Gets Cookies object. Cookies ()","title":"Cookies"},{"location":"Libraries/WebDriver/#createdriver","text":"This will create a WebDriver for currently selected Browser profile. CreateDriver ( nonProfileCapsJson ) Parameters: Name Type Description nonProfileCapsJson object JSON object with capabilities not available in a Browser profile. Returns: WebDriver object.","title":"CreateDriver"},{"location":"Libraries/WebDriver/#createdriverforsession","text":"Connects to active Selenium session with given URL and Id. CreateDriverForSession ( addressOfRemoteServer , sessionId ) Parameters: Name Type Description addressOfRemoteServer Selenium server URL. sessionId Id of the session to connect. Returns: true if successful, false otherwise.","title":"CreateDriverForSession"},{"location":"Libraries/WebDriver/#dispose","text":"Dispose of WebDriver. Dispose ()","title":"Dispose"},{"location":"Libraries/WebDriver/#downloaddriver","text":"This will download required binary (e.g. chromedriver.exe) for currently selected Browser profile. Requires Rapise 7.2+ DownloadDriver ( driverVersion ) Parameters: Name Type Description driverVersion string Version of the driver executable. Optional. Returns: true if successful, otherwise - false .","title":"DownloadDriver"},{"location":"Libraries/WebDriver/#dumpsessions","text":"Prints information about active Selenium sessions to output. DumpSessions ()","title":"DumpSessions"},{"location":"Libraries/WebDriver/#executescript","text":"Executes JavaScript in the context of the currently selected frame or window. ExecuteScript ( script , args ) Parameters: Name Type Description script string The JavaScript code to execute. args array The arguments to the script. Returns: Null, string or element depending on the script.","title":"ExecuteScript"},{"location":"Libraries/WebDriver/#findelementbyclassname","text":"Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element. Returns: element or null.","title":"FindElementByClassName"},{"location":"Libraries/WebDriver/#findelementbycssselector","text":"Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: element ot null.","title":"FindElementByCssSelector"},{"location":"Libraries/WebDriver/#findelementbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element. Returns: element or null.","title":"FindElementById"},{"location":"Libraries/WebDriver/#findelementbylinktext","text":"Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: element or null.","title":"FindElementByLinkText"},{"location":"Libraries/WebDriver/#findelementbyname","text":"Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: element or null.","title":"FindElementByName"},{"location":"Libraries/WebDriver/#findelementbypartiallinktext","text":"Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: element or null.","title":"FindElementByPartialLinkText"},{"location":"Libraries/WebDriver/#findelementbytagname","text":"Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: element or null.","title":"FindElementByTagName"},{"location":"Libraries/WebDriver/#findelementbyxpath","text":"Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: element or null.","title":"FindElementByXPath"},{"location":"Libraries/WebDriver/#findelementsbyclassname","text":"Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string className of the element. Returns: array of elements.","title":"FindElementsByClassName"},{"location":"Libraries/WebDriver/#findelementsbycssselector","text":"Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: array of elements.","title":"FindElementsByCssSelector"},{"location":"Libraries/WebDriver/#findelementsbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element. Returns: array of elements.","title":"FindElementsById"},{"location":"Libraries/WebDriver/#findelementsbylinktext","text":"Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText Link text of element. Returns: array of elements.","title":"FindElementsByLinkText"},{"location":"Libraries/WebDriver/#findelementsbyname","text":"Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: array of elements.","title":"FindElementsByName"},{"location":"Libraries/WebDriver/#findelementsbypartiallinktext","text":"Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: array of elements.","title":"FindElementsByPartialLinkText"},{"location":"Libraries/WebDriver/#findelementsbytagname","text":"Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: array of elements.","title":"FindElementsByTagName"},{"location":"Libraries/WebDriver/#findelementsbyxpath","text":"Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: array of elements.","title":"FindElementsByXPath"},{"location":"Libraries/WebDriver/#getaddressofremoteserver","text":"GetAddressOfRemoteServer () Returns: URL of the remote Selenium server.","title":"GetAddressOfRemoteServer"},{"location":"Libraries/WebDriver/#getcurrentwindowhandle","text":"Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetCurrentWindowHandle ()","title":"GetCurrentWindowHandle"},{"location":"Libraries/WebDriver/#getpagesource","text":"Gets the source of the page last loaded by the browser. GetPageSource ()","title":"GetPageSource"},{"location":"Libraries/WebDriver/#getprofilecapability","text":"GetProfileCapability ( name ) Parameters: Name Type Description name","title":"GetProfileCapability"},{"location":"Libraries/WebDriver/#getscreenshot","text":"Gets the screenshot of the page. GetScreenshot ()","title":"GetScreenshot"},{"location":"Libraries/WebDriver/#getscreenshotiw","text":"GetScreenshotIW ()","title":"GetScreenshotIW"},{"location":"Libraries/WebDriver/#getsessionid","text":"GetSessionId () Returns: Id of the current session.","title":"GetSessionId"},{"location":"Libraries/WebDriver/#gettitle","text":"Gets the title of the current browser window. GetTitle ()","title":"GetTitle"},{"location":"Libraries/WebDriver/#geturl","text":"Gets the URL the browser is currently displaying. GetUrl ()","title":"GetUrl"},{"location":"Libraries/WebDriver/#getwindowhandles","text":"Gets the window handles of open browser windows. GetWindowHandles ()","title":"GetWindowHandles"},{"location":"Libraries/WebDriver/#quit","text":"Disconnects from the Browser. Quit ()","title":"Quit"},{"location":"Libraries/WebDriver/#reconnectsession","text":"Reads session information produced by SaveSession and connects to the mobile target. ReconnectSession ( autoCreate ) Parameters: Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore. Optional, Default: \"false\".","title":"ReconnectSession"},{"location":"Libraries/WebDriver/#savesession","text":"Saves session information for use by ReconnectSession. SaveSession ()","title":"SaveSession"},{"location":"Libraries/WebDriver/#setbrowsersize","text":"Sets size of a browser window. SetBrowserSize ( width , height ) Parameters: Name Type Description width number Window width to set height number Window height to set","title":"SetBrowserSize"},{"location":"Libraries/WebDriver/#seturl","text":"Sets the URL the browser is currently displaying. SetUrl ( url ) Parameters: Name Type Description url string The URL to display","title":"SetUrl"},{"location":"Libraries/WebDriver/#switchtoalert","text":"Switches to the currently active modal dialog for this particular driver instance. SwitchToAlert ()","title":"SwitchToAlert"},{"location":"Libraries/WebDriver/#switchtodefaultcontent","text":"Change the active frame to the default. SwitchToDefaultContent ()","title":"SwitchToDefaultContent"},{"location":"Libraries/WebDriver/#switchtoframe","text":"Move to different frame using its element. SwitchToFrame ( el ) Parameters: Name Type Description el WebElementWrapper Element of the frame.","title":"SwitchToFrame"},{"location":"Libraries/WebDriver/#switchtolastwindow","text":"Switch to last browser window. SwitchToLastWindow ()","title":"SwitchToLastWindow"},{"location":"Libraries/WebDriver/#switchtoparentframe","text":"Select the parent frame of the currently selected frame. SwitchToParentFrame ()","title":"SwitchToParentFrame"},{"location":"Libraries/WebDriver/#switchtowindow","text":"Switch to window specified by handle. SwitchToWindow ( windowHandle ) Parameters: Name Type Description windowHandle","title":"SwitchToWindow"},{"location":"Libraries/WebDriver/#window","text":"Gets Window object. Window ()","title":"Window"},{"location":"Libraries/WebElement/","text":"WebElement \u00b6 This is a JavaScript wrapper for RemoteWebElement of Selenium .NET library. For code complete feature use class name WebElementWrapper, e.g. var /**WebElementWrapper*/el = WebDriver.FindElementById('username'); Action Summary \u00b6 Action Description Clear Clears the content of this element. Click Clicks this element. ClickAt Clicks this element at the specified location. ContextClick Opens context menu for this element. DoubleClick Performs double click on this element. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAttribute Gets the value of the specified attribute for this element. GetCoordinates Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetCssValue Gets the value of a CSS property of this element. GetDisplayed Gets a value indicating whether or not this element is displayed. GetEnabled Gets a value indicating whether or not this element is enabled. GetHashCode Method to get the hash code of the element. GetLocation Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetLocationOnScreenOnceScrolledIntoView Gets the point where the element would be when scrolled into view. GetSelected Gets a value indicating whether or not this element is selected. GetSize Gets a 'Size' object containing the height and width of this element. GetTagName Gets the tag name of this element. GetText Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed. SelectOptionByText Selects option from select element. SendKeys Simulates typing text into the element. Submit Submits this element to the web server. Action Detail \u00b6 Clear \u00b6 Clears the content of this element. Clear () Click \u00b6 Clicks this element. Click () ClickAt \u00b6 Clicks this element at the specified location. ClickAt ( x , y ) Parameters: Name Type Description x number y number ContextClick \u00b6 Opens context menu for this element. ContextClick () DoubleClick \u00b6 Performs double click on this element. DoubleClick () FindElementByClassName \u00b6 Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element. Returns: element or null. FindElementByCssSelector \u00b6 Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: element ot null. FindElementById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element. Returns: element or null. FindElementByLinkText \u00b6 Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: element or null. FindElementByName \u00b6 Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: element or null. FindElementByPartialLinkText \u00b6 Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: element or null. FindElementByTagName \u00b6 Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: element or null. FindElementByXPath \u00b6 Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: element or null. FindElementsByClassName \u00b6 Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string className of the element. Returns: array of elements. FindElementsByCssSelector \u00b6 Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: array of elements. FindElementsById \u00b6 Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element. Returns: array of elements. FindElementsByLinkText \u00b6 Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: array of elements. FindElementsByName \u00b6 Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: array of elements. FindElementsByPartialLinkText \u00b6 Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: array of elements. FindElementsByTagName \u00b6 Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: array of elements. FindElementsByXPath \u00b6 Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: array of elements. GetAttribute \u00b6 Gets the value of the specified attribute for this element. GetAttribute ( attributeName ) Parameters: Name Type Description attributeName GetCoordinates \u00b6 Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetCoordinates () GetCssValue \u00b6 Gets the value of a CSS property of this element. GetCssValue ( propertyName ) Parameters: Name Type Description propertyName GetDisplayed \u00b6 Gets a value indicating whether or not this element is displayed. GetDisplayed () GetEnabled \u00b6 Gets a value indicating whether or not this element is enabled. GetEnabled () GetHashCode \u00b6 Method to get the hash code of the element. GetHashCode () GetLocation \u00b6 Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetLocation () GetLocationOnScreenOnceScrolledIntoView \u00b6 Gets the point where the element would be when scrolled into view. GetLocationOnScreenOnceScrolledIntoView () GetSelected \u00b6 Gets a value indicating whether or not this element is selected. GetSelected () GetSize \u00b6 Gets a 'Size' object containing the height and width of this element. GetSize () GetTagName \u00b6 Gets the tag name of this element. GetTagName () GetText \u00b6 Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed. GetText () SelectOptionByText \u00b6 Selects option from select element. SelectOptionByText ( option ) Parameters: Name Type Description option SendKeys \u00b6 Simulates typing text into the element. SendKeys ( text ) Parameters: Name Type Description text Submit \u00b6 Submits this element to the web server. Submit ()","title":"WebElement"},{"location":"Libraries/WebElement/#webelement","text":"This is a JavaScript wrapper for RemoteWebElement of Selenium .NET library. For code complete feature use class name WebElementWrapper, e.g. var /**WebElementWrapper*/el = WebDriver.FindElementById('username');","title":"WebElement"},{"location":"Libraries/WebElement/#action-summary","text":"Action Description Clear Clears the content of this element. Click Clicks this element. ClickAt Clicks this element at the specified location. ContextClick Opens context menu for this element. DoubleClick Performs double click on this element. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAttribute Gets the value of the specified attribute for this element. GetCoordinates Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetCssValue Gets the value of a CSS property of this element. GetDisplayed Gets a value indicating whether or not this element is displayed. GetEnabled Gets a value indicating whether or not this element is enabled. GetHashCode Method to get the hash code of the element. GetLocation Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetLocationOnScreenOnceScrolledIntoView Gets the point where the element would be when scrolled into view. GetSelected Gets a value indicating whether or not this element is selected. GetSize Gets a 'Size' object containing the height and width of this element. GetTagName Gets the tag name of this element. GetText Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed. SelectOptionByText Selects option from select element. SendKeys Simulates typing text into the element. Submit Submits this element to the web server.","title":"Action Summary"},{"location":"Libraries/WebElement/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/WebElement/#clear","text":"Clears the content of this element. Clear ()","title":"Clear"},{"location":"Libraries/WebElement/#click","text":"Clicks this element. Click ()","title":"Click"},{"location":"Libraries/WebElement/#clickat","text":"Clicks this element at the specified location. ClickAt ( x , y ) Parameters: Name Type Description x number y number","title":"ClickAt"},{"location":"Libraries/WebElement/#contextclick","text":"Opens context menu for this element. ContextClick ()","title":"ContextClick"},{"location":"Libraries/WebElement/#doubleclick","text":"Performs double click on this element. DoubleClick ()","title":"DoubleClick"},{"location":"Libraries/WebElement/#findelementbyclassname","text":"Finds the first element in the page that matches the CSS Class supplied. FindElementByClassName ( className ) Parameters: Name Type Description className string CSS class name of the element. Returns: element or null.","title":"FindElementByClassName"},{"location":"Libraries/WebElement/#findelementbycssselector","text":"Finds the first element matching the specified CSS selector. FindElementByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: element ot null.","title":"FindElementByCssSelector"},{"location":"Libraries/WebElement/#findelementbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementById ( id ) Parameters: Name Type Description id string ID of the element. Returns: element or null.","title":"FindElementById"},{"location":"Libraries/WebElement/#findelementbylinktext","text":"Finds the first of elements that match the link text supplied. FindElementByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: element or null.","title":"FindElementByLinkText"},{"location":"Libraries/WebElement/#findelementbyname","text":"Finds the first of elements that match the name supplied. FindElementByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: element or null.","title":"FindElementByName"},{"location":"Libraries/WebElement/#findelementbypartiallinktext","text":"Finds the first of elements that match the part of the link text supplied. FindElementByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: element or null.","title":"FindElementByPartialLinkText"},{"location":"Libraries/WebElement/#findelementbytagname","text":"Finds the first of elements that match the DOM Tag supplied. FindElementByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: element or null.","title":"FindElementByTagName"},{"location":"Libraries/WebElement/#findelementbyxpath","text":"Finds the first of elements that match the XPath supplied. FindElementByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: element or null.","title":"FindElementByXPath"},{"location":"Libraries/WebElement/#findelementsbyclassname","text":"Finds a list of elements that match the class name supplied. FindElementsByClassName ( className ) Parameters: Name Type Description className string className of the element. Returns: array of elements.","title":"FindElementsByClassName"},{"location":"Libraries/WebElement/#findelementsbycssselector","text":"Finds all elements matching the specified CSS selector. FindElementsByCssSelector ( cssSelector ) Parameters: Name Type Description cssSelector string The CSS selector to match. Returns: array of elements.","title":"FindElementsByCssSelector"},{"location":"Libraries/WebElement/#findelementsbyid","text":"Finds the first element in the page that matches the ID supplied. FindElementsById ( id ) Parameters: Name Type Description id string ID of the element. Returns: array of elements.","title":"FindElementsById"},{"location":"Libraries/WebElement/#findelementsbylinktext","text":"Finds a list of elements that match the link text supplied. FindElementsByLinkText ( linkText ) Parameters: Name Type Description linkText string Link text of element. Returns: array of elements.","title":"FindElementsByLinkText"},{"location":"Libraries/WebElement/#findelementsbyname","text":"Finds a list of elements that match the name supplied. FindElementsByName ( name ) Parameters: Name Type Description name string Name of the element on the page. Returns: array of elements.","title":"FindElementsByName"},{"location":"Libraries/WebElement/#findelementsbypartiallinktext","text":"Finds a list of elements that match the part of the link text supplied. FindElementsByPartialLinkText ( partialLinkText ) Parameters: Name Type Description partialLinkText string Part of the link text. Returns: array of elements.","title":"FindElementsByPartialLinkText"},{"location":"Libraries/WebElement/#findelementsbytagname","text":"Finds a list of elements that match the DOM Tag supplied. FindElementsByTagName ( tagName ) Parameters: Name Type Description tagName string DOM tag Name of the element being searched. Returns: array of elements.","title":"FindElementsByTagName"},{"location":"Libraries/WebElement/#findelementsbyxpath","text":"Finds a list of elements that match the XPath supplied. FindElementsByXPath ( xpath ) Parameters: Name Type Description xpath string xpath to the element. Returns: array of elements.","title":"FindElementsByXPath"},{"location":"Libraries/WebElement/#getattribute","text":"Gets the value of the specified attribute for this element. GetAttribute ( attributeName ) Parameters: Name Type Description attributeName","title":"GetAttribute"},{"location":"Libraries/WebElement/#getcoordinates","text":"Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetCoordinates ()","title":"GetCoordinates"},{"location":"Libraries/WebElement/#getcssvalue","text":"Gets the value of a CSS property of this element. GetCssValue ( propertyName ) Parameters: Name Type Description propertyName","title":"GetCssValue"},{"location":"Libraries/WebElement/#getdisplayed","text":"Gets a value indicating whether or not this element is displayed. GetDisplayed ()","title":"GetDisplayed"},{"location":"Libraries/WebElement/#getenabled","text":"Gets a value indicating whether or not this element is enabled. GetEnabled ()","title":"GetEnabled"},{"location":"Libraries/WebElement/#gethashcode","text":"Method to get the hash code of the element. GetHashCode ()","title":"GetHashCode"},{"location":"Libraries/WebElement/#getlocation","text":"Gets a 'Point' object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetLocation ()","title":"GetLocation"},{"location":"Libraries/WebElement/#getlocationonscreenoncescrolledintoview","text":"Gets the point where the element would be when scrolled into view. GetLocationOnScreenOnceScrolledIntoView ()","title":"GetLocationOnScreenOnceScrolledIntoView"},{"location":"Libraries/WebElement/#getselected","text":"Gets a value indicating whether or not this element is selected. GetSelected ()","title":"GetSelected"},{"location":"Libraries/WebElement/#getsize","text":"Gets a 'Size' object containing the height and width of this element. GetSize ()","title":"GetSize"},{"location":"Libraries/WebElement/#gettagname","text":"Gets the tag name of this element. GetTagName ()","title":"GetTagName"},{"location":"Libraries/WebElement/#gettext","text":"Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed. GetText ()","title":"GetText"},{"location":"Libraries/WebElement/#selectoptionbytext","text":"Selects option from select element. SelectOptionByText ( option ) Parameters: Name Type Description option","title":"SelectOptionByText"},{"location":"Libraries/WebElement/#sendkeys","text":"Simulates typing text into the element. SendKeys ( text ) Parameters: Name Type Description text","title":"SendKeys"},{"location":"Libraries/WebElement/#submit","text":"Submits this element to the web server. Submit ()","title":"Submit"},{"location":"Libraries/Win32Button/","text":"Win32Button \u00b6 This is generic Win32 button. Use DoAction to press it. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable Action Summary \u00b6 Action Description DoAction Presses the button. Action Detail \u00b6 DoAction \u00b6 Presses the button. DoAction ()","title":"Win32Button"},{"location":"Libraries/Win32Button/#win32button","text":"This is generic Win32 button. Use DoAction to press it. Extends SeSSimulatedObject Behavior Pattern: Win32Pressable","title":"Win32Button"},{"location":"Libraries/Win32Button/#action-summary","text":"Action Description DoAction Presses the button.","title":"Action Summary"},{"location":"Libraries/Win32Button/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32Button/#doaction","text":"Presses the button. DoAction ()","title":"DoAction"},{"location":"Libraries/Win32CheckButton/","text":"Win32CheckButton \u00b6 This is generic Win32 check box. Use DoAction to toggle its state. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"Win32CheckButton"},{"location":"Libraries/Win32CheckButton/#win32checkbutton","text":"This is generic Win32 check box. Use DoAction to toggle its state. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox","title":"Win32CheckButton"},{"location":"Libraries/Win32CheckButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/Win32CheckButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/Win32CheckButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32CheckButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/Win32CheckButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32CheckButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/Win32ComboBox/","text":"Win32ComboBox \u00b6 This is generic Win32 combo box. Use DoSelectItem to select a particular item. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"Win32ComboBox"},{"location":"Libraries/Win32ComboBox/#win32combobox","text":"This is generic Win32 combo box. Use DoSelectItem to select a particular item. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"Win32ComboBox"},{"location":"Libraries/Win32ComboBox/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ComboBox/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ComboBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32ComboBox/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ComboBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32ComboBox/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoSelectItem"},{"location":"Libraries/Win32ComboBoxEdit/","text":"Win32ComboBoxEdit \u00b6 This is generic Win32 editable combo box. Use DoSelectItem to select a particular item and DoSetText to set a custom value. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCombo Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"Win32ComboBoxEdit"},{"location":"Libraries/Win32ComboBoxEdit/#win32comboboxedit","text":"This is generic Win32 editable combo box. Use DoSelectItem to select a particular item and DoSetText to set a custom value. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable","title":"Win32ComboBoxEdit"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/Win32ComboBoxEdit/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32ComboBoxEdit/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32ComboBoxEdit/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: Win32ItemSelectable","title":"DoSetText"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary_1","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ComboBoxEdit/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/Win32ComboBoxEdit/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32ComboBoxEdit/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCombo","title":"DoSelectItem"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary_2","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary_2","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ComboBoxEdit/#property-detail_2","text":"","title":"Property Detail"},{"location":"Libraries/Win32ComboBoxEdit/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail_2","text":"","title":"Action Detail"},{"location":"Libraries/Win32ComboBoxEdit/#doselectitem_1","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Returns: boolean: 'true' if operation is successful, 'false' otherwise","title":"DoSelectItem"},{"location":"Libraries/Win32ContextMenu/","text":"Win32ContextMenu \u00b6 This is generic Win32 context menu. Use DoClickItem to click a particular item from the menu Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"Win32ContextMenu"},{"location":"Libraries/Win32ContextMenu/#win32contextmenu","text":"This is generic Win32 context menu. Use DoClickItem to click a particular item from the menu Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable","title":"Win32ContextMenu"},{"location":"Libraries/Win32ContextMenu/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ContextMenu/#action-summary","text":"Action Description DoClickItem Performs click on an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ContextMenu/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32ContextMenu/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ContextMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32ContextMenu/#doclickitem","text":"Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/Win32Link/","text":"Win32Link \u00b6 This is a generic Win32 link. Use DoAction to activate the link. Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"Win32Link"},{"location":"Libraries/Win32Link/#win32link","text":"This is a generic Win32 link. Use DoAction to activate the link. Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"Win32Link"},{"location":"Libraries/Win32List/","text":"Win32List \u00b6 This is generic Win32 list. Use DoSelectItem to select a particular item. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable Action Summary \u00b6 Action Description DoExpand Expands an item of this object. Action Detail \u00b6 DoExpand \u00b6 Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"Win32List"},{"location":"Libraries/Win32List/#win32list","text":"This is generic Win32 list. Use DoSelectItem to select a particular item. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"Win32List"},{"location":"Libraries/Win32List/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32List/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32List/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32List/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32List/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32List/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable","title":"DoSelectItem"},{"location":"Libraries/Win32List/#action-summary_1","text":"Action Description DoExpand Expands an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32List/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32List/#doexpand","text":"Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"DoExpand"},{"location":"Libraries/Win32ListCheckable/","text":"Win32ListCheckable \u00b6 This is generic Win32 list with a check box near each item. Use DoSelectItem to select a particular item and DoCheckItem to change corresponding check box state. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoCheckItem Checks an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoCheckItem \u00b6 Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"Win32ListCheckable"},{"location":"Libraries/Win32ListCheckable/#win32listcheckable","text":"This is generic Win32 list with a check box near each item. Use DoSelectItem to select a particular item and DoCheckItem to change corresponding check box state. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"Win32ListCheckable"},{"location":"Libraries/Win32ListCheckable/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ListCheckable/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ListCheckable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32ListCheckable/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ListCheckable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32ListCheckable/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable","title":"DoSelectItem"},{"location":"Libraries/Win32ListCheckable/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32ListCheckable/#action-summary_1","text":"Action Description DoCheckItem Checks an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32ListCheckable/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/Win32ListCheckable/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32ListCheckable/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32ListCheckable/#docheckitem","text":"Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check","title":"DoCheckItem"},{"location":"Libraries/Win32MenuBar/","text":"Win32MenuBar \u00b6 This is generic WIn32 menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu and DoMenu to choose a menu item at the specified path. Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32Menu Action Summary \u00b6 Action Description DoMenu Performs click on the menu item. Action Detail \u00b6 DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , sep ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. sep string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"Win32MenuBar"},{"location":"Libraries/Win32MenuBar/#win32menubar","text":"This is generic WIn32 menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu and DoMenu to choose a menu item at the specified path. Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable","title":"Win32MenuBar"},{"location":"Libraries/Win32MenuBar/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32MenuBar/#action-summary","text":"Action Description DoClickItem Performs click on an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32MenuBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32MenuBar/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32MenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32MenuBar/#doclickitem","text":"Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise Behavior Pattern: Win32Menu","title":"DoClickItem"},{"location":"Libraries/Win32MenuBar/#action-summary_1","text":"Action Description DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/Win32MenuBar/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32MenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , sep ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. sep string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/Win32Outline/","text":"Win32Outline \u00b6 This is generic Win32 tree. Use DoSelectItem to select and DoExpand to expand/collapse a particular node. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable Action Summary \u00b6 Action Description DoExpand Expands an item of this object. Action Detail \u00b6 DoExpand \u00b6 Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"Win32Outline"},{"location":"Libraries/Win32Outline/#win32outline","text":"This is generic Win32 tree. Use DoSelectItem to select and DoExpand to expand/collapse a particular node. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"Win32Outline"},{"location":"Libraries/Win32Outline/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32Outline/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32Outline/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32Outline/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32Outline/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32Outline/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemExpandable","title":"DoSelectItem"},{"location":"Libraries/Win32Outline/#action-summary_1","text":"Action Description DoExpand Expands an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32Outline/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32Outline/#doexpand","text":"Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"DoExpand"},{"location":"Libraries/Win32PopupMenu/","text":"Win32PopupMenu \u00b6 This is generic Win32 popup menu. Use DoClickItem to click a particular item from the menu. Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoClickItem Performs click on an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoClickItem \u00b6 Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"Win32PopupMenu"},{"location":"Libraries/Win32PopupMenu/#win32popupmenu","text":"This is generic Win32 popup menu. Use DoClickItem to click a particular item from the menu. Extends SeSSimulatedObject Behavior Pattern: Win32ItemClickable","title":"Win32PopupMenu"},{"location":"Libraries/Win32PopupMenu/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32PopupMenu/#action-summary","text":"Action Description DoClickItem Performs click on an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32PopupMenu/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32PopupMenu/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32PopupMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32PopupMenu/#doclickitem","text":"Performs click on an item of this object. DoClickItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to click Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"DoClickItem"},{"location":"Libraries/Win32RadioButton/","text":"Win32RadioButton \u00b6 This is generic Win32 radio button. Use DoAction to select the button. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: Win32Radio","title":"Win32RadioButton"},{"location":"Libraries/Win32RadioButton/#win32radiobutton","text":"This is generic Win32 radio button. Use DoAction to select the button. Extends SeSSimulatedObject Behavior Pattern: Win32CheckBox","title":"Win32RadioButton"},{"location":"Libraries/Win32RadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/Win32RadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/Win32RadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32RadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/Win32RadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32RadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise. Behavior Pattern: Win32Radio","title":"DoSetCheck"},{"location":"Libraries/Win32StaticText/","text":"Win32StaticText \u00b6 This is generic Win32 label. Use WindowText property to read/write label text. Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"Win32StaticText"},{"location":"Libraries/Win32StaticText/#win32statictext","text":"This is generic Win32 label. Use WindowText property to read/write label text. Extends SeSSimulatedObject Behavior Pattern: Win32Simulated","title":"Win32StaticText"},{"location":"Libraries/Win32Text/","text":"Win32Text \u00b6 This is generic Win32 edit box. Use DoSetText to set the value of the edit box and GetText to read current value. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"Win32Text"},{"location":"Libraries/Win32Text/#win32text","text":"This is generic Win32 edit box. Use DoSetText to set the value of the edit box and GetText to read current value. Extends SeSSimulatedObject Behavior Pattern: Win32TextEditable","title":"Win32Text"},{"location":"Libraries/Win32Text/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/Win32Text/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/Win32Text/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32Text/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/Win32Text/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32Text/#dosettext","text":"Sets text value of this object. DoSetText ( val ) Parameters: Name Type Description val string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/Win32TreeCheckable/","text":"Win32TreeCheckable \u00b6 This is generic Win32 tree with a check box near each item. Use DoSelectItem to select and DoExpand to expand/collapse a particular item. Use DoCheckItem to change corresponding check box state. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoSelectItem Selects item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoSelectItem \u00b6 Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount Action Summary \u00b6 Action Description DoCheckItem Checks an item of this object. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount Action Detail \u00b6 DoCheckItem \u00b6 Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check Behavior Pattern: Win32ItemExpandable Action Summary \u00b6 Action Description DoExpand Expands an item of this object. Action Detail \u00b6 DoExpand \u00b6 Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"Win32TreeCheckable"},{"location":"Libraries/Win32TreeCheckable/#win32treecheckable","text":"This is generic Win32 tree with a check box near each item. Use DoSelectItem to select and DoExpand to expand/collapse a particular item. Use DoCheckItem to change corresponding check box state. Extends SeSSimulatedObject Behavior Pattern: Win32ItemSelectable","title":"Win32TreeCheckable"},{"location":"Libraries/Win32TreeCheckable/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32TreeCheckable/#action-summary","text":"Action Description DoSelectItem Selects item of this object.","title":"Action Summary"},{"location":"Libraries/Win32TreeCheckable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/Win32TreeCheckable/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32TreeCheckable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Win32TreeCheckable/#doselectitem","text":"Selects item of this object. DoSelectItem ( itemName ) Parameters: Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. Returns: boolean: 'true' if operation is successful, 'false' otherwise Behavior Pattern: Win32ItemCheckable","title":"DoSelectItem"},{"location":"Libraries/Win32TreeCheckable/#property-summary_1","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount","title":"Property Summary"},{"location":"Libraries/Win32TreeCheckable/#action-summary_1","text":"Action Description DoCheckItem Checks an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32TreeCheckable/#property-detail_1","text":"","title":"Property Detail"},{"location":"Libraries/Win32TreeCheckable/#itemcount_1","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/Win32TreeCheckable/#action-detail_1","text":"","title":"Action Detail"},{"location":"Libraries/Win32TreeCheckable/#docheckitem","text":"Checks an item of this object. DoCheckItem ( itemName ) Parameters: Name Type Description itemName string Name of the item to check Behavior Pattern: Win32ItemExpandable","title":"DoCheckItem"},{"location":"Libraries/Win32TreeCheckable/#action-summary_2","text":"Action Description DoExpand Expands an item of this object.","title":"Action Summary"},{"location":"Libraries/Win32TreeCheckable/#action-detail_2","text":"","title":"Action Detail"},{"location":"Libraries/Win32TreeCheckable/#doexpand","text":"Expands an item of this object. DoExpand ( itemName ) Parameters: Name Type Description itemName string Name of the item to expand Returns: boolean: 'true' if operation was successful, 'false' otherwise","title":"DoExpand"},{"location":"Libraries/Window/","text":"Window \u00b6 This is a JavaScript wrapper for Window of Selenium .NET library. Action Summary \u00b6 Action Description FullScreen Sets the current window to full screen if it is not already in that state. GetPosition Gets the position of the browser window relative to the upper-left corner of the screen. GetSize Gets the size of the outer browser window, including title bars and window borders. Maximize Maximizes the current window if it is not already maximized. Minimize Minimizes the current window if it is not already minimized. SetPosition Sets the position of the browser window relative to the upper-left corner of the screen. SetSize Sets the size of the outer browser window, including title bars and window borders. Action Detail \u00b6 FullScreen \u00b6 Sets the current window to full screen if it is not already in that state. FullScreen () GetPosition \u00b6 Gets the position of the browser window relative to the upper-left corner of the screen. GetPosition () GetSize \u00b6 Gets the size of the outer browser window, including title bars and window borders. GetSize () Maximize \u00b6 Maximizes the current window if it is not already maximized. Maximize () Minimize \u00b6 Minimizes the current window if it is not already minimized. Minimize () SetPosition \u00b6 Sets the position of the browser window relative to the upper-left corner of the screen. SetPosition ( x , y ) Parameters: Name Type Description x number y number SetSize \u00b6 Sets the size of the outer browser window, including title bars and window borders. SetSize ( width , height ) Parameters: Name Type Description width number height number","title":"Window"},{"location":"Libraries/Window/#window","text":"This is a JavaScript wrapper for Window of Selenium .NET library.","title":"Window"},{"location":"Libraries/Window/#action-summary","text":"Action Description FullScreen Sets the current window to full screen if it is not already in that state. GetPosition Gets the position of the browser window relative to the upper-left corner of the screen. GetSize Gets the size of the outer browser window, including title bars and window borders. Maximize Maximizes the current window if it is not already maximized. Minimize Minimizes the current window if it is not already minimized. SetPosition Sets the position of the browser window relative to the upper-left corner of the screen. SetSize Sets the size of the outer browser window, including title bars and window borders.","title":"Action Summary"},{"location":"Libraries/Window/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/Window/#fullscreen","text":"Sets the current window to full screen if it is not already in that state. FullScreen ()","title":"FullScreen"},{"location":"Libraries/Window/#getposition","text":"Gets the position of the browser window relative to the upper-left corner of the screen. GetPosition ()","title":"GetPosition"},{"location":"Libraries/Window/#getsize","text":"Gets the size of the outer browser window, including title bars and window borders. GetSize ()","title":"GetSize"},{"location":"Libraries/Window/#maximize","text":"Maximizes the current window if it is not already maximized. Maximize ()","title":"Maximize"},{"location":"Libraries/Window/#minimize","text":"Minimizes the current window if it is not already minimized. Minimize ()","title":"Minimize"},{"location":"Libraries/Window/#setposition","text":"Sets the position of the browser window relative to the upper-left corner of the screen. SetPosition ( x , y ) Parameters: Name Type Description x number y number","title":"SetPosition"},{"location":"Libraries/Window/#setsize","text":"Sets the size of the outer browser window, including title bars and window borders. SetSize ( width , height ) Parameters: Name Type Description width number height number","title":"SetSize"},{"location":"Libraries/YUIButtonMenu/","text":"YUIButtonMenu \u00b6 YUI ButtonMenu. It is a container attached to a menu button. Using this container is useful when you need to house HTML content or another YUI widget, such as a Calendar or Color Picker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIButtonMenuBehavior Action Summary \u00b6 Action Description DoClick Clicks on the menu container. Action Detail \u00b6 DoClick \u00b6 Clicks on the menu container. DoClick () Returns: boolean: 'true' if successful, 'false' otherwise","title":"YUIButtonMenu"},{"location":"Libraries/YUIButtonMenu/#yuibuttonmenu","text":"YUI ButtonMenu. It is a container attached to a menu button. Using this container is useful when you need to house HTML content or another YUI widget, such as a Calendar or Color Picker. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIButtonMenuBehavior","title":"YUIButtonMenu"},{"location":"Libraries/YUIButtonMenu/#action-summary","text":"Action Description DoClick Clicks on the menu container.","title":"Action Summary"},{"location":"Libraries/YUIButtonMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUIButtonMenu/#doclick","text":"Clicks on the menu container. DoClick () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClick"},{"location":"Libraries/YUICalendar/","text":"YUICalendar \u00b6 YUI Calendar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUICalendarBehavior Property Summary \u00b6 Property Description Getter Setter Month Current month displayed by the date picker. GetMonth Action Summary \u00b6 Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker. Property Detail \u00b6 Month \u00b6 Current month displayed by the date picker. Type: string|number Accessors: GetMonth Action Detail \u00b6 DoNextMonth \u00b6 Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise DoPrevMonth \u00b6 Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise DoSelectDate \u00b6 Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"YUICalendar"},{"location":"Libraries/YUICalendar/#yuicalendar","text":"YUI Calendar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUICalendarBehavior","title":"YUICalendar"},{"location":"Libraries/YUICalendar/#property-summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth","title":"Property Summary"},{"location":"Libraries/YUICalendar/#action-summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker.","title":"Action Summary"},{"location":"Libraries/YUICalendar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUICalendar/#month","text":"Current month displayed by the date picker. Type: string|number Accessors: GetMonth","title":"Month"},{"location":"Libraries/YUICalendar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUICalendar/#donextmonth","text":"Clicks on 'Next Month' selector. DoNextMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoNextMonth"},{"location":"Libraries/YUICalendar/#doprevmonth","text":"Clicks on 'Previous Month' selector. DoPrevMonth () Returns: boolean: 'true' if success, 'false' otherwise","title":"DoPrevMonth"},{"location":"Libraries/YUICalendar/#doselectdate","text":"Selects specific date in the date picker. DoSelectDate ( dateValue ) Parameters: Name Type Description dateValue number New date to select Returns: boolean: 'true' if success, 'false' otherwise","title":"DoSelectDate"},{"location":"Libraries/YUICheckButton/","text":"YUICheckButton \u00b6 YUI CheckButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUICheckButtonBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"YUICheckButton"},{"location":"Libraries/YUICheckButton/#yuicheckbutton","text":"YUI CheckButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUICheckButtonBehavior","title":"YUICheckButton"},{"location":"Libraries/YUICheckButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/YUICheckButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/YUICheckButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUICheckButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/YUICheckButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUICheckButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/YUIMenu/","text":"YUIMenu \u00b6 YUI Menu. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuBehavior Action Summary \u00b6 Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item. DoTitleMenu Clicks menu title item. Action Detail \u00b6 DoFindChild \u00b6 Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: HTMLObject : HTMLObject of the found node DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise. DoTitleMenu \u00b6 Clicks menu title item. Only 1 menu level currently supported. DoTitleMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise.","title":"YUIMenu"},{"location":"Libraries/YUIMenu/#yuimenu","text":"YUI Menu. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuBehavior","title":"YUIMenu"},{"location":"Libraries/YUIMenu/#action-summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item. DoTitleMenu Clicks menu title item.","title":"Action Summary"},{"location":"Libraries/YUIMenu/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUIMenu/#dofindchild","text":"Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/YUIMenu/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/YUIMenu/#dotitlemenu","text":"Clicks menu title item. Only 1 menu level currently supported. DoTitleMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoTitleMenu"},{"location":"Libraries/YUIMenuBar/","text":"YUIMenuBar \u00b6 YUI MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuBarBehavior Action Summary \u00b6 Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item. Action Detail \u00b6 DoFindChild \u00b6 Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: HTMLObject : HTMLObject of the found node DoMenu \u00b6 Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise.","title":"YUIMenuBar"},{"location":"Libraries/YUIMenuBar/#yuimenubar","text":"YUI MenuBar. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuBarBehavior","title":"YUIMenuBar"},{"location":"Libraries/YUIMenuBar/#action-summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item.","title":"Action Summary"},{"location":"Libraries/YUIMenuBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUIMenuBar/#dofindchild","text":"Searches for specific item in the menu. DoFindChild ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/YUIMenuBar/#domenu","text":"Performs click on the menu item. DoMenu ( path , separator , pathType ) Parameters: Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoMenu"},{"location":"Libraries/YUIMenuButton/","text":"YUIMenuButton \u00b6 YUI MenuButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuButtonBehavior Property Summary \u00b6 Property Description Getter Setter Active Active state of the button. GetActive Action Summary \u00b6 Action Description DoClick Clicks the menu button. Property Detail \u00b6 Active \u00b6 Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object Type: boolean Accessors: GetActive Action Detail \u00b6 DoClick \u00b6 Clicks the menu button. DoClick () Returns: boolean: 'true' if successful, 'false' otherwise","title":"YUIMenuButton"},{"location":"Libraries/YUIMenuButton/#yuimenubutton","text":"YUI MenuButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIMenuButtonBehavior","title":"YUIMenuButton"},{"location":"Libraries/YUIMenuButton/#property-summary","text":"Property Description Getter Setter Active Active state of the button. GetActive","title":"Property Summary"},{"location":"Libraries/YUIMenuButton/#action-summary","text":"Action Description DoClick Clicks the menu button.","title":"Action Summary"},{"location":"Libraries/YUIMenuButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUIMenuButton/#active","text":"Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object Type: boolean Accessors: GetActive","title":"Active"},{"location":"Libraries/YUIMenuButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUIMenuButton/#doclick","text":"Clicks the menu button. DoClick () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClick"},{"location":"Libraries/YUIPushButton/","text":"YUIPushButton \u00b6 YUI PushButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIPushButtonBehavior","title":"YUIPushButton"},{"location":"Libraries/YUIPushButton/#yuipushbutton","text":"YUI PushButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIPushButtonBehavior","title":"YUIPushButton"},{"location":"Libraries/YUIRadioButton/","text":"YUIRadioButton \u00b6 YUI RadioButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIRadioButtonBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"YUIRadioButton"},{"location":"Libraries/YUIRadioButton/#yuiradiobutton","text":"YUI RadioButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUIRadioButtonBehavior","title":"YUIRadioButton"},{"location":"Libraries/YUIRadioButton/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked","title":"Property Summary"},{"location":"Libraries/YUIRadioButton/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/YUIRadioButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUIRadioButton/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked","title":"Checked"},{"location":"Libraries/YUIRadioButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUIRadioButton/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/YUISliderH/","text":"YUISliderH \u00b6 YUI Horizontal Slider. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISliderHBehavior Action Summary \u00b6 Action Description DoChange Changes slider position. Action Detail \u00b6 DoChange \u00b6 Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"YUISliderH"},{"location":"Libraries/YUISliderH/#yuisliderh","text":"YUI Horizontal Slider. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISliderHBehavior","title":"YUISliderH"},{"location":"Libraries/YUISliderH/#action-summary","text":"Action Description DoChange Changes slider position.","title":"Action Summary"},{"location":"Libraries/YUISliderH/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUISliderH/#dochange","text":"Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoChange"},{"location":"Libraries/YUISliderV/","text":"YUISliderV \u00b6 YUI Vertical Slider. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISliderVBehavior Action Summary \u00b6 Action Description DoChange Changes slider position. Action Detail \u00b6 DoChange \u00b6 Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"YUISliderV"},{"location":"Libraries/YUISliderV/#yuisliderv","text":"YUI Vertical Slider. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISliderVBehavior","title":"YUISliderV"},{"location":"Libraries/YUISliderV/#action-summary","text":"Action Description DoChange Changes slider position.","title":"Action Summary"},{"location":"Libraries/YUISliderV/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUISliderV/#dochange","text":"Changes slider position. DoChange ( value ) Parameters: Name Type Description value number Slider position to set. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoChange"},{"location":"Libraries/YUISplitButton/","text":"YUISplitButton \u00b6 Standard YUI SplitButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISplitButtonBehavior Property Summary \u00b6 Property Description Getter Setter Active Active state of the button. GetActive Action Summary \u00b6 Action Description DoClick Clicks the button. DoMenu Clicks menu of the split button. Property Detail \u00b6 Active \u00b6 Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object. Type: Boolean Accessors: GetActive Action Detail \u00b6 DoClick \u00b6 Clicks the button. DoClick ( x , y ) Parameters: Name Type Description x number x coordinate to click Optional. y number y coordinate to click Optional. Returns: boolean: 'true' if successful, 'false' otherwise DoMenu \u00b6 Clicks menu of the split button. DoMenu () Returns: boolean: 'true' if successful, 'false' otherwise","title":"YUISplitButton"},{"location":"Libraries/YUISplitButton/#yuisplitbutton","text":"Standard YUI SplitButton. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUISplitButtonBehavior","title":"YUISplitButton"},{"location":"Libraries/YUISplitButton/#property-summary","text":"Property Description Getter Setter Active Active state of the button. GetActive","title":"Property Summary"},{"location":"Libraries/YUISplitButton/#action-summary","text":"Action Description DoClick Clicks the button. DoMenu Clicks menu of the split button.","title":"Action Summary"},{"location":"Libraries/YUISplitButton/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUISplitButton/#active","text":"Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object. Type: Boolean Accessors: GetActive","title":"Active"},{"location":"Libraries/YUISplitButton/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUISplitButton/#doclick","text":"Clicks the button. DoClick ( x , y ) Parameters: Name Type Description x number x coordinate to click Optional. y number y coordinate to click Optional. Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoClick"},{"location":"Libraries/YUISplitButton/#domenu","text":"Clicks menu of the split button. DoMenu () Returns: boolean: 'true' if successful, 'false' otherwise","title":"DoMenu"},{"location":"Libraries/YUITree/","text":"YUITree \u00b6 YUI Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUITreeBehavior Property Summary \u00b6 Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText Action Summary \u00b6 Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node. Property Detail \u00b6 ChildrenCount \u00b6 Children count of the current node in the tree. Type: number Accessors: GetChildrenCount Expanded \u00b6 Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded NodeIndex \u00b6 Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex NodeText \u00b6 Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText Selected \u00b6 Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected SelectedNodeText \u00b6 Text of the selected node. Type: string Accessors: GetSelectedNodeText Action Detail \u00b6 DoClickNode \u00b6 Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoCollapse \u00b6 Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoExpand \u00b6 Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise. DoFindChild \u00b6 Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoFindNode \u00b6 Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node DoGetPath \u00b6 Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"YUITree"},{"location":"Libraries/YUITree/#yuitree","text":"YUI Tree. Extends HTMLObject Extends SeSSimulatedObject Behavior Pattern: YUITreeBehavior","title":"YUITree"},{"location":"Libraries/YUITree/#property-summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText","title":"Property Summary"},{"location":"Libraries/YUITree/#action-summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node.","title":"Action Summary"},{"location":"Libraries/YUITree/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/YUITree/#childrencount","text":"Children count of the current node in the tree. Type: number Accessors: GetChildrenCount","title":"ChildrenCount"},{"location":"Libraries/YUITree/#expanded","text":"Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf. Type: number Accessors: GetExpanded","title":"Expanded"},{"location":"Libraries/YUITree/#nodeindex","text":"Zero based index of the current node. Use DoFindNode to set current node. Type: number Accessors: GetNodeIndex","title":"NodeIndex"},{"location":"Libraries/YUITree/#nodetext","text":"Text of the current node. Use DoFindNode to set current node. Type: string Accessors: GetNodeText","title":"NodeText"},{"location":"Libraries/YUITree/#selected","text":"Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise. Type: boolean Accessors: GetSelected","title":"Selected"},{"location":"Libraries/YUITree/#selectednodetext","text":"Text of the selected node. Type: string Accessors: GetSelectedNodeText","title":"SelectedNodeText"},{"location":"Libraries/YUITree/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/YUITree/#doclicknode","text":"Clicks specific node in the tree. DoClickNode ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClickNode"},{"location":"Libraries/YUITree/#docollapse","text":"Collapses specific node in the tree. DoCollapse ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoCollapse"},{"location":"Libraries/YUITree/#doexpand","text":"Expands specific node in the tree. DoExpand ( path , separator , pathType ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoExpand"},{"location":"Libraries/YUITree/#dofindchild","text":"Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used. DoFindChild ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindChild"},{"location":"Libraries/YUITree/#dofindnode","text":"Searches for specific node in the tree and remembers it as the current node. DoFindNode ( path , separator , pathType , expand ) Parameters: Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". expand boolean is set to true, then found node is expanded Returns: HTMLObject : HTMLObject of the found node","title":"DoFindNode"},{"location":"Libraries/YUITree/#dogetpath","text":"Returns path to the current node. DoGetPath ( pathType , separator ) Parameters: Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\" Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\" Optional, Default: \";\". Returns: string: Path to the current node","title":"DoGetPath"},{"location":"Libraries/iOS/","text":"iOS \u00b6 Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test. Action Summary \u00b6 Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoScreenshot Makes screenshot of a device. DoShake Shakes device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. GetDeviceOrientation Gets device orientation. SetContext Sets context. SetDeviceOrientation Sets device orientation. Action Detail \u00b6 DoFlick \u00b6 Flick action. DoFlick ( endX , endY , startX , startY , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise. DoGoToUrl \u00b6 Opens URL in active browser. DoGoToUrl ( url ) Parameters: Name Type Description url string Returns: 'true' if successful, 'false' otherwise. DoScreenshot \u00b6 Makes screenshot of a device. DoScreenshot () Returns: 'true' if successful, 'false' otherwise. DoShake \u00b6 Shakes device. DoShake () Returns: 'true' if successful, 'false' otherwise. DoSwipe \u00b6 Swipe action. DoSwipe ( endX , endY , startX , startY , duration , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. duration number time (in seconds) to spend performing the swipe/drag Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise. DoTap \u00b6 Tap screen. DoTap ( x , y , duration , tapCount , touchCount ) Parameters: Name Type Description x number x coordinate to tap (in pixels or relative units) Optional. y number y coordinate to tap (in pixels or relative units) Optional. duration number how long (in seconds) to tap Optional. tapCount number how many times to tap Optional. touchCount number how many fingers to tap with Optional. Returns: 'true' if successful, 'false' otherwise. GetCapability \u00b6 Gets capability with specified name. GetCapability ( name ) Parameters: Name Type Description name string Name of a capability. Returns: Capability string. GetContext \u00b6 Gets current context. GetContext () Returns: Either NATIVE_APP or WEBVIEW_1. GetDeviceOrientation \u00b6 Gets device orientation. GetDeviceOrientation () Returns: Device orientation. SetContext \u00b6 Sets context. SetContext ( name ) Parameters: Name Type Description name string Either NATIVE_APP or WEBVIEW_1. SetDeviceOrientation \u00b6 Sets device orientation. SetDeviceOrientation ( orientation ) Parameters: Name Type Description orientation number ORIENTATION_PORTRAIT, ORIENTATION_LANDSCAPE Returns: Device orientation.","title":"iOS"},{"location":"Libraries/iOS/#ios","text":"Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.","title":"iOS"},{"location":"Libraries/iOS/#action-summary","text":"Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoScreenshot Makes screenshot of a device. DoShake Shakes device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. GetDeviceOrientation Gets device orientation. SetContext Sets context. SetDeviceOrientation Sets device orientation.","title":"Action Summary"},{"location":"Libraries/iOS/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOS/#doflick","text":"Flick action. DoFlick ( endX , endY , startX , startY , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoFlick"},{"location":"Libraries/iOS/#dogotourl","text":"Opens URL in active browser. DoGoToUrl ( url ) Parameters: Name Type Description url string Returns: 'true' if successful, 'false' otherwise.","title":"DoGoToUrl"},{"location":"Libraries/iOS/#doscreenshot","text":"Makes screenshot of a device. DoScreenshot () Returns: 'true' if successful, 'false' otherwise.","title":"DoScreenshot"},{"location":"Libraries/iOS/#doshake","text":"Shakes device. DoShake () Returns: 'true' if successful, 'false' otherwise.","title":"DoShake"},{"location":"Libraries/iOS/#doswipe","text":"Swipe action. DoSwipe ( endX , endY , startX , startY , duration , touchCount ) Parameters: Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units) Optional. startY number y coordinate where swipe begins (in pixels or relative units) Optional. duration number time (in seconds) to spend performing the swipe/drag Optional. touchCount number how many fingers to swipe with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoSwipe"},{"location":"Libraries/iOS/#dotap","text":"Tap screen. DoTap ( x , y , duration , tapCount , touchCount ) Parameters: Name Type Description x number x coordinate to tap (in pixels or relative units) Optional. y number y coordinate to tap (in pixels or relative units) Optional. duration number how long (in seconds) to tap Optional. tapCount number how many times to tap Optional. touchCount number how many fingers to tap with Optional. Returns: 'true' if successful, 'false' otherwise.","title":"DoTap"},{"location":"Libraries/iOS/#getcapability","text":"Gets capability with specified name. GetCapability ( name ) Parameters: Name Type Description name string Name of a capability. Returns: Capability string.","title":"GetCapability"},{"location":"Libraries/iOS/#getcontext","text":"Gets current context. GetContext () Returns: Either NATIVE_APP or WEBVIEW_1.","title":"GetContext"},{"location":"Libraries/iOS/#getdeviceorientation","text":"Gets device orientation. GetDeviceOrientation () Returns: Device orientation.","title":"GetDeviceOrientation"},{"location":"Libraries/iOS/#setcontext","text":"Sets context. SetContext ( name ) Parameters: Name Type Description name string Either NATIVE_APP or WEBVIEW_1.","title":"SetContext"},{"location":"Libraries/iOS/#setdeviceorientation","text":"Sets device orientation. SetDeviceOrientation ( orientation ) Parameters: Name Type Description orientation number ORIENTATION_PORTRAIT, ORIENTATION_LANDSCAPE Returns: Device orientation.","title":"SetDeviceOrientation"},{"location":"Libraries/iOSButton/","text":"iOSButton \u00b6 iOS Button. Extends iOSObject Behavior Pattern: iOSObjectButtonBehavior","title":"iOSButton"},{"location":"Libraries/iOSButton/#iosbutton","text":"iOS Button. Extends iOSObject Behavior Pattern: iOSObjectButtonBehavior","title":"iOSButton"},{"location":"Libraries/iOSEditBox/","text":"iOSEditBox \u00b6 iOS EditBox. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSEditBox"},{"location":"Libraries/iOSEditBox/#ioseditbox","text":"iOS EditBox. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior","title":"iOSEditBox"},{"location":"Libraries/iOSEditBox/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/iOSEditBox/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/iOSEditBox/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSEditBox/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/iOSEditBox/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSEditBox/#dosettext","text":"Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/iOSImage/","text":"iOSImage \u00b6 iOS Image. Extends iOSObject Behavior Pattern: iOSObjectImageBehavior","title":"iOSImage"},{"location":"Libraries/iOSImage/#iosimage","text":"iOS Image. Extends iOSObject Behavior Pattern: iOSObjectImageBehavior","title":"iOSImage"},{"location":"Libraries/iOSLabel/","text":"iOSLabel \u00b6 iOS Label. Extends iOSObject Behavior Pattern: iOSObjectLabelBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"iOSLabel"},{"location":"Libraries/iOSLabel/#ioslabel","text":"iOS Label. Extends iOSObject Behavior Pattern: iOSObjectLabelBehavior","title":"iOSLabel"},{"location":"Libraries/iOSLabel/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText","title":"Property Summary"},{"location":"Libraries/iOSLabel/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSLabel/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/iOSObject/","text":"iOSObject \u00b6 iOS Object. Behavior Pattern: iOSObjectGenericBehavior Property Summary \u00b6 Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Label Label of the iOS object GetLabel Name Name of the object. GetName NextSibling iOSObject for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent iOSObject for the parent element. GetParent PrevSibling iOSObject for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY Action Summary \u00b6 Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoSendKeys Send a text to the object in character-by-character mode. DoTap Taps the control. DoTwoFingerTap Taps the control with two fingers. Property Detail \u00b6 ChildAt \u00b6 Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt ChildCount \u00b6 Number of child items. Type: number Accessors: GetChildCount Class \u00b6 Class name of the object. Type: string Accessors: GetClass Height \u00b6 Height of the object. Type: number Accessors: GetHeight Label \u00b6 Label of the iOS object Type: string Accessors: GetLabel Name \u00b6 Name of the object. Type: string Accessors: GetName NextSibling \u00b6 iOSObject for the next sibling element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetNextSibling ObjectType \u00b6 Type of the object. Type: string Accessors: GetObjectType Parent \u00b6 iOSObject for the parent element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetParent PrevSibling \u00b6 iOSObject for the previous sibling element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetPrevSibling Property \u00b6 Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText Width \u00b6 Width of the object. Type: number Accessors: GetWidth X \u00b6 X-coordinate of the top left corner of the object. Type: number Accessors: GetX Y \u00b6 Y-coordinate of the top left corner of the object. Type: number Accessors: GetY Action Detail \u00b6 DoAction \u00b6 Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise. DoClear \u00b6 Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise. DoClick \u00b6 Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise. DoEnsureVisible \u00b6 Ensure that a child item with the specified text is visible on screen. DoEnsureVisible () Returns: boolean: 'true' if success, 'false' otherwise. DoFindByXPath \u00b6 Finds an element by relative XPath expression. Requires Rapise 6.6+ DoFindByXPath ( xpath ) Parameters: Name Type Description xpath string Relative XPath expression. Returns: iOSObject : iOSObject if success, null otherwise. DoSendKeys \u00b6 Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise. DoTap \u00b6 Taps the control. DoTap () Returns: boolean: 'true' if success, 'false' otherwise. DoTwoFingerTap \u00b6 Taps the control with two fingers. DoTwoFingerTap () Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSObject"},{"location":"Libraries/iOSObject/#iosobject","text":"iOS Object. Behavior Pattern: iOSObjectGenericBehavior","title":"iOSObject"},{"location":"Libraries/iOSObject/#property-summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Label Label of the iOS object GetLabel Name Name of the object. GetName NextSibling iOSObject for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent iOSObject for the parent element. GetParent PrevSibling iOSObject for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY","title":"Property Summary"},{"location":"Libraries/iOSObject/#action-summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoSendKeys Send a text to the object in character-by-character mode. DoTap Taps the control. DoTwoFingerTap Taps the control with two fingers.","title":"Action Summary"},{"location":"Libraries/iOSObject/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSObject/#childat","text":"Child object at index. Getter Parameters: Name Type Description index number Index of the object to get. Type: string Accessors: GetChildAt","title":"ChildAt"},{"location":"Libraries/iOSObject/#childcount","text":"Number of child items. Type: number Accessors: GetChildCount","title":"ChildCount"},{"location":"Libraries/iOSObject/#class","text":"Class name of the object. Type: string Accessors: GetClass","title":"Class"},{"location":"Libraries/iOSObject/#height","text":"Height of the object. Type: number Accessors: GetHeight","title":"Height"},{"location":"Libraries/iOSObject/#label","text":"Label of the iOS object Type: string Accessors: GetLabel","title":"Label"},{"location":"Libraries/iOSObject/#name","text":"Name of the object. Type: string Accessors: GetName","title":"Name"},{"location":"Libraries/iOSObject/#nextsibling","text":"iOSObject for the next sibling element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetNextSibling","title":"NextSibling"},{"location":"Libraries/iOSObject/#objecttype","text":"Type of the object. Type: string Accessors: GetObjectType","title":"ObjectType"},{"location":"Libraries/iOSObject/#parent","text":"iOSObject for the parent element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetParent","title":"Parent"},{"location":"Libraries/iOSObject/#prevsibling","text":"iOSObject for the previous sibling element. Requires Rapise 6.6+ Type: iOSObject Accessors: GetPrevSibling","title":"PrevSibling"},{"location":"Libraries/iOSObject/#property","text":"Value of a named property of the object. Getter Parameters: Name Type Description name string Property name. Type: string Accessors: GetProperty","title":"Property"},{"location":"Libraries/iOSObject/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText","title":"Text"},{"location":"Libraries/iOSObject/#width","text":"Width of the object. Type: number Accessors: GetWidth","title":"Width"},{"location":"Libraries/iOSObject/#x","text":"X-coordinate of the top left corner of the object. Type: number Accessors: GetX","title":"X"},{"location":"Libraries/iOSObject/#y","text":"Y-coordinate of the top left corner of the object. Type: number Accessors: GetY","title":"Y"},{"location":"Libraries/iOSObject/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSObject/#doaction","text":"Clicks in the middle of the control. DoAction () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoAction"},{"location":"Libraries/iOSObject/#doclear","text":"Clears the text of the object. DoClear () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClear"},{"location":"Libraries/iOSObject/#doclick","text":"Clicks in the middle of the control. DoClick () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoClick"},{"location":"Libraries/iOSObject/#doensurevisible","text":"Ensure that a child item with the specified text is visible on screen. DoEnsureVisible () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoEnsureVisible"},{"location":"Libraries/iOSObject/#dofindbyxpath","text":"Finds an element by relative XPath expression. Requires Rapise 6.6+ DoFindByXPath ( xpath ) Parameters: Name Type Description xpath string Relative XPath expression. Returns: iOSObject : iOSObject if success, null otherwise.","title":"DoFindByXPath"},{"location":"Libraries/iOSObject/#dosendkeys","text":"Send a text to the object in character-by-character mode. DoSendKeys ( keys ) Parameters: Name Type Description keys string Text to type into the object. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSendKeys"},{"location":"Libraries/iOSObject/#dotap","text":"Taps the control. DoTap () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoTap"},{"location":"Libraries/iOSObject/#dotwofingertap","text":"Taps the control with two fingers. DoTwoFingerTap () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoTwoFingerTap"},{"location":"Libraries/iOSPageIndicator/","text":"iOSPageIndicator \u00b6 iOS PageIndicator. Extends iOSObject Behavior Pattern: iOSObjectPageIndicatorBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount PageIndex Selected page index. GetPageIndex Action Summary \u00b6 Action Description DoNextPage Navigates to next page. DoPrevPage Navigates to previous page. DoSelectPage Selects a page at index. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount PageIndex \u00b6 Selected page index. Type: number Accessors: GetPageIndex Action Detail \u00b6 DoNextPage \u00b6 Navigates to next page. DoNextPage () Returns: boolean: 'true' if success, 'false' otherwise. DoPrevPage \u00b6 Navigates to previous page. DoPrevPage () Returns: boolean: 'true' if success, 'false' otherwise. DoSelectPage \u00b6 Selects a page at index. DoSelectPage ( index ) Parameters: Name Type Description index number Index of the page. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSPageIndicator"},{"location":"Libraries/iOSPageIndicator/#iospageindicator","text":"iOS PageIndicator. Extends iOSObject Behavior Pattern: iOSObjectPageIndicatorBehavior","title":"iOSPageIndicator"},{"location":"Libraries/iOSPageIndicator/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount PageIndex Selected page index. GetPageIndex","title":"Property Summary"},{"location":"Libraries/iOSPageIndicator/#action-summary","text":"Action Description DoNextPage Navigates to next page. DoPrevPage Navigates to previous page. DoSelectPage Selects a page at index.","title":"Action Summary"},{"location":"Libraries/iOSPageIndicator/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSPageIndicator/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/iOSPageIndicator/#pageindex","text":"Selected page index. Type: number Accessors: GetPageIndex","title":"PageIndex"},{"location":"Libraries/iOSPageIndicator/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSPageIndicator/#donextpage","text":"Navigates to next page. DoNextPage () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoNextPage"},{"location":"Libraries/iOSPageIndicator/#doprevpage","text":"Navigates to previous page. DoPrevPage () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoPrevPage"},{"location":"Libraries/iOSPageIndicator/#doselectpage","text":"Selects a page at index. DoSelectPage ( index ) Parameters: Name Type Description index number Index of the page. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectPage"},{"location":"Libraries/iOSPicker/","text":"iOSPicker \u00b6 iOS Picker. Extends iOSObject Behavior Pattern: iOSObjectPickerSelectableBehavior Property Summary \u00b6 Property Description Getter Setter SelectedItem Text of the selected item. GetSelectedItem Action Summary \u00b6 Action Description DoSelectItem Selects an item with the specified name. Property Detail \u00b6 SelectedItem \u00b6 Text of the selected item. Type: string Accessors: GetSelectedItem Action Detail \u00b6 DoSelectItem \u00b6 Selects an item with the specified name. DoSelectItem ( name ) Parameters: Name Type Description name string Item name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSPicker"},{"location":"Libraries/iOSPicker/#iospicker","text":"iOS Picker. Extends iOSObject Behavior Pattern: iOSObjectPickerSelectableBehavior","title":"iOSPicker"},{"location":"Libraries/iOSPicker/#property-summary","text":"Property Description Getter Setter SelectedItem Text of the selected item. GetSelectedItem","title":"Property Summary"},{"location":"Libraries/iOSPicker/#action-summary","text":"Action Description DoSelectItem Selects an item with the specified name.","title":"Action Summary"},{"location":"Libraries/iOSPicker/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSPicker/#selecteditem","text":"Text of the selected item. Type: string Accessors: GetSelectedItem","title":"SelectedItem"},{"location":"Libraries/iOSPicker/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSPicker/#doselectitem","text":"Selects an item with the specified name. DoSelectItem ( name ) Parameters: Name Type Description name string Item name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/iOSScrollView/","text":"iOSScrollView \u00b6 iOS ScrollView. Extends iOSObject Behavior Pattern: iOSObjectScrollViewBehavior Action Summary \u00b6 Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area. Action Detail \u00b6 DoScrollDown \u00b6 Scrolls content to show lower area. DoScrollDown () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollLeft \u00b6 Scrolls content to show area to the left. DoScrollLeft () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollRight \u00b6 Scrolls content to show area to the right. DoScrollRight () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollToElementWithName \u00b6 Scrolls to an sub control with name. DoScrollToElementWithName ( name ) Parameters: Name Type Description name string Sub control name. Returns: boolean: 'true' if success, 'false' otherwise. DoScrollUp \u00b6 Scrolls content to show upper area. DoScrollUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSScrollView"},{"location":"Libraries/iOSScrollView/#iosscrollview","text":"iOS ScrollView. Extends iOSObject Behavior Pattern: iOSObjectScrollViewBehavior","title":"iOSScrollView"},{"location":"Libraries/iOSScrollView/#action-summary","text":"Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area.","title":"Action Summary"},{"location":"Libraries/iOSScrollView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSScrollView/#doscrolldown","text":"Scrolls content to show lower area. DoScrollDown () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollDown"},{"location":"Libraries/iOSScrollView/#doscrollleft","text":"Scrolls content to show area to the left. DoScrollLeft () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollLeft"},{"location":"Libraries/iOSScrollView/#doscrollright","text":"Scrolls content to show area to the right. DoScrollRight () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollRight"},{"location":"Libraries/iOSScrollView/#doscrolltoelementwithname","text":"Scrolls to an sub control with name. DoScrollToElementWithName ( name ) Parameters: Name Type Description name string Sub control name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollToElementWithName"},{"location":"Libraries/iOSScrollView/#doscrollup","text":"Scrolls content to show upper area. DoScrollUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollUp"},{"location":"Libraries/iOSSearch/","text":"iOSSearch \u00b6 iOS Search. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSSearch"},{"location":"Libraries/iOSSearch/#iossearch","text":"iOS Search. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior","title":"iOSSearch"},{"location":"Libraries/iOSSearch/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/iOSSearch/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/iOSSearch/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSSearch/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/iOSSearch/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSSearch/#dosettext","text":"Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/iOSSlider/","text":"iOSSlider \u00b6 iOS Slider. Extends iOSObject Behavior Pattern: iOSObjectSliderBehavior Property Summary \u00b6 Property Description Getter Setter Value Value of the object. GetValue SetValue Property Detail \u00b6 Value \u00b6 Value of the object. Type: number Accessors: GetValue, SetValue","title":"iOSSlider"},{"location":"Libraries/iOSSlider/#iosslider","text":"iOS Slider. Extends iOSObject Behavior Pattern: iOSObjectSliderBehavior","title":"iOSSlider"},{"location":"Libraries/iOSSlider/#property-summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue","title":"Property Summary"},{"location":"Libraries/iOSSlider/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSSlider/#value","text":"Value of the object. Type: number Accessors: GetValue, SetValue","title":"Value"},{"location":"Libraries/iOSSwitch/","text":"iOSSwitch \u00b6 iOS Switch. Extends iOSObject Behavior Pattern: iOSObjectSwitchBehavior Property Summary \u00b6 Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Action Summary \u00b6 Action Description DoSetCheck Sets check state of the object. Property Detail \u00b6 Checked \u00b6 Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked Action Detail \u00b6 DoSetCheck \u00b6 Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSSwitch"},{"location":"Libraries/iOSSwitch/#iosswitch","text":"iOS Switch. Extends iOSObject Behavior Pattern: iOSObjectSwitchBehavior","title":"iOSSwitch"},{"location":"Libraries/iOSSwitch/#property-summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked","title":"Property Summary"},{"location":"Libraries/iOSSwitch/#action-summary","text":"Action Description DoSetCheck Sets check state of the object.","title":"Action Summary"},{"location":"Libraries/iOSSwitch/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSSwitch/#checked","text":"Check state of the button. 'true' if the button is checked, 'false' otherwise. Type: boolean Accessors: GetChecked, SetChecked","title":"Checked"},{"location":"Libraries/iOSSwitch/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSSwitch/#dosetcheck","text":"Sets check state of the object. DoSetCheck ( bcheck ) Parameters: Name Type Description bcheck boolean Desired check state for the item. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetCheck"},{"location":"Libraries/iOSTabBar/","text":"iOSTabBar \u00b6 iOS TabBar. Extends iOSObject Behavior Pattern: iOSObjectTabBarBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedTab Selected tab name. GetSelectedTab TabName Name of the tab at index GetTabName Action Summary \u00b6 Action Description DoSelectTab Selects the tab by name or index. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount SelectedTab \u00b6 Selected tab name. Type: string Accessors: GetSelectedTab TabName \u00b6 Name of the tab at index Getter Parameters: Name Type Description index number Index of the tab. Type: string Accessors: GetTabName Action Detail \u00b6 DoSelectTab \u00b6 Selects the tab by name or index. DoSelectTab ( tabNameIndex ) Parameters: Name Type Description tabNameIndex string | number Tab name or index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSTabBar"},{"location":"Libraries/iOSTabBar/#iostabbar","text":"iOS TabBar. Extends iOSObject Behavior Pattern: iOSObjectTabBarBehavior","title":"iOSTabBar"},{"location":"Libraries/iOSTabBar/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedTab Selected tab name. GetSelectedTab TabName Name of the tab at index GetTabName","title":"Property Summary"},{"location":"Libraries/iOSTabBar/#action-summary","text":"Action Description DoSelectTab Selects the tab by name or index.","title":"Action Summary"},{"location":"Libraries/iOSTabBar/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSTabBar/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/iOSTabBar/#selectedtab","text":"Selected tab name. Type: string Accessors: GetSelectedTab","title":"SelectedTab"},{"location":"Libraries/iOSTabBar/#tabname","text":"Name of the tab at index Getter Parameters: Name Type Description index number Index of the tab. Type: string Accessors: GetTabName","title":"TabName"},{"location":"Libraries/iOSTabBar/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSTabBar/#doselecttab","text":"Selects the tab by name or index. DoSelectTab ( tabNameIndex ) Parameters: Name Type Description tabNameIndex string | number Tab name or index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectTab"},{"location":"Libraries/iOSTable/","text":"iOSTable \u00b6 iOS Table. Extends iOSObject Behavior Pattern: iOSObjectTableSelectableBehavior Property Summary \u00b6 Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemTextAt Text of the item at the specified index GetItemTextAt Action Summary \u00b6 Action Description DoSelectItem Selects an item with the specified index. Property Detail \u00b6 ItemCount \u00b6 Number of items. Type: number Accessors: GetItemCount ItemIndexByName \u00b6 Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName ItemTextAt \u00b6 Text of the item at the specified index Type: string Accessors: GetItemTextAt Action Detail \u00b6 DoSelectItem \u00b6 Selects an item with the specified index. DoSelectItem ( index ) Parameters: Name Type Description index number Item index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSTable"},{"location":"Libraries/iOSTable/#iostable","text":"iOS Table. Extends iOSObject Behavior Pattern: iOSObjectTableSelectableBehavior","title":"iOSTable"},{"location":"Libraries/iOSTable/#property-summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemTextAt Text of the item at the specified index GetItemTextAt","title":"Property Summary"},{"location":"Libraries/iOSTable/#action-summary","text":"Action Description DoSelectItem Selects an item with the specified index.","title":"Action Summary"},{"location":"Libraries/iOSTable/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSTable/#itemcount","text":"Number of items. Type: number Accessors: GetItemCount","title":"ItemCount"},{"location":"Libraries/iOSTable/#itemindexbyname","text":"Returns item index by its name. 'false' if name is not found. Getter Parameters: Name Type Description name string Type: number|boolean Accessors: GetItemIndexByName","title":"ItemIndexByName"},{"location":"Libraries/iOSTable/#itemtextat","text":"Text of the item at the specified index Type: string Accessors: GetItemTextAt","title":"ItemTextAt"},{"location":"Libraries/iOSTable/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSTable/#doselectitem","text":"Selects an item with the specified index. DoSelectItem ( index ) Parameters: Name Type Description index number Item index. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSelectItem"},{"location":"Libraries/iOSTextView/","text":"iOSTextView \u00b6 iOS TextView. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior Property Summary \u00b6 Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Action Summary \u00b6 Action Description DoSetText Sets text value of this object. Property Detail \u00b6 Text \u00b6 Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText Action Detail \u00b6 DoSetText \u00b6 Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSTextView"},{"location":"Libraries/iOSTextView/#iostextview","text":"iOS TextView. Extends iOSObject Behavior Pattern: iOSObjectTextFieldBehavior","title":"iOSTextView"},{"location":"Libraries/iOSTextView/#property-summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText","title":"Property Summary"},{"location":"Libraries/iOSTextView/#action-summary","text":"Action Description DoSetText Sets text value of this object.","title":"Action Summary"},{"location":"Libraries/iOSTextView/#property-detail","text":"","title":"Property Detail"},{"location":"Libraries/iOSTextView/#text","text":"Text of the object, 'false' if text can not be read. Type: string Accessors: GetText, SetText","title":"Text"},{"location":"Libraries/iOSTextView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSTextView/#dosettext","text":"Sets text value of this object. DoSetText ( value ) Parameters: Name Type Description value string Text value. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoSetText"},{"location":"Libraries/iOSWebView/","text":"iOSWebView \u00b6 iOS WebView. Extends iOSObject Behavior Pattern: iOSObjectScrollViewBehavior Action Summary \u00b6 Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area. Action Detail \u00b6 DoScrollDown \u00b6 Scrolls content to show lower area. DoScrollDown () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollLeft \u00b6 Scrolls content to show area to the left. DoScrollLeft () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollRight \u00b6 Scrolls content to show area to the right. DoScrollRight () Returns: boolean: 'true' if success, 'false' otherwise. DoScrollToElementWithName \u00b6 Scrolls to an sub control with name. DoScrollToElementWithName ( name ) Parameters: Name Type Description name string Sub control name. Returns: boolean: 'true' if success, 'false' otherwise. DoScrollUp \u00b6 Scrolls content to show upper area. DoScrollUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"iOSWebView"},{"location":"Libraries/iOSWebView/#ioswebview","text":"iOS WebView. Extends iOSObject Behavior Pattern: iOSObjectScrollViewBehavior","title":"iOSWebView"},{"location":"Libraries/iOSWebView/#action-summary","text":"Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area.","title":"Action Summary"},{"location":"Libraries/iOSWebView/#action-detail","text":"","title":"Action Detail"},{"location":"Libraries/iOSWebView/#doscrolldown","text":"Scrolls content to show lower area. DoScrollDown () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollDown"},{"location":"Libraries/iOSWebView/#doscrollleft","text":"Scrolls content to show area to the left. DoScrollLeft () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollLeft"},{"location":"Libraries/iOSWebView/#doscrollright","text":"Scrolls content to show area to the right. DoScrollRight () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollRight"},{"location":"Libraries/iOSWebView/#doscrolltoelementwithname","text":"Scrolls to an sub control with name. DoScrollToElementWithName ( name ) Parameters: Name Type Description name string Sub control name. Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollToElementWithName"},{"location":"Libraries/iOSWebView/#doscrollup","text":"Scrolls content to show upper area. DoScrollUp () Returns: boolean: 'true' if success, 'false' otherwise.","title":"DoScrollUp"},{"location":"Libraries/libraries/","text":"Libraries \u00b6 This part of the docs describes Object API of Rapise. There are global objects providing essential functionality like writing to a report, launching applications, working with files. There are also application specific objects that correspond to UI elements. Such objects are grouped into libraries. See Also \u00b6 Object Libraries","title":"Libraries"},{"location":"Libraries/libraries/#libraries","text":"This part of the docs describes Object API of Rapise. There are global objects providing essential functionality like writing to a report, launching applications, working with files. There are also application specific objects that correspond to UI elements. Such objects are grouped into libraries.","title":"Libraries"},{"location":"Libraries/libraries/#see-also","text":"Object Libraries","title":"See Also"},{"location":"Libraries/ses_engine/","text":"Global \u00b6 Android Database File Global iOS Navigator Screenshot SeSReportException SeSReportFile SeSReportImage SeSReportLink SeSReportText Session Spreadsheet Tester WebDriver Generic \u00b6 SeSSimulatedObject Win32Button Win32CheckButton Win32ComboBox Win32ComboBoxEdit Win32ContextMenu Win32Link Win32List Win32ListCheckable Win32MenuBar Win32Outline Win32PopupMenu Win32RadioButton Win32StaticText Win32Text Win32TreeCheckable HTML \u00b6 HTMLObject","title":"Global"},{"location":"Libraries/ses_engine/#global","text":"Android Database File Global iOS Navigator Screenshot SeSReportException SeSReportFile SeSReportImage SeSReportLink SeSReportText Session Spreadsheet Tester WebDriver","title":"Global"},{"location":"Libraries/ses_engine/#generic","text":"SeSSimulatedObject Win32Button Win32CheckButton Win32ComboBox Win32ComboBoxEdit Win32ContextMenu Win32Link Win32List Win32ListCheckable Win32MenuBar Win32Outline Win32PopupMenu Win32RadioButton Win32StaticText Win32Text Win32TreeCheckable","title":"Generic"},{"location":"Libraries/ses_engine/#html","text":"HTMLObject","title":"HTML"},{"location":"Libraries/ses_lib_activex/","text":"ActiveX \u00b6 ActiveXObject MSComCtlSlider20 MSComCtlToolbar MSComCtlTreeView20 MSComList MSFlexGrid SSTab TabStrip20 ActiveXC1 \u00b6 C1TrueDBGrid C1TrueDBList C1TrueDBListCombo ActiveXSft \u00b6 SftTree","title":"ActiveXSft Objects"},{"location":"Libraries/ses_lib_activex/#activex","text":"ActiveXObject MSComCtlSlider20 MSComCtlToolbar MSComCtlTreeView20 MSComList MSFlexGrid SSTab TabStrip20","title":"ActiveX"},{"location":"Libraries/ses_lib_activex/#activexc1","text":"C1TrueDBGrid C1TrueDBList C1TrueDBListCombo","title":"ActiveXC1"},{"location":"Libraries/ses_lib_activex/#activexsft","text":"SftTree","title":"ActiveXSft"},{"location":"Libraries/ses_lib_advaac/","text":"Advanced Accessibility \u00b6 SimpleButton SimpleButtonDropdown SimpleCheckButton SimpleComboBox SimpleGraphics SimpleLink SimpleLinkText SimpleList SimpleOutline SimpleRadioButton SimpleText","title":"Advanced Acessibility Objects"},{"location":"Libraries/ses_lib_advaac/#advanced-accessibility","text":"SimpleButton SimpleButtonDropdown SimpleCheckButton SimpleComboBox SimpleGraphics SimpleLink SimpleLinkText SimpleList SimpleOutline SimpleRadioButton SimpleText","title":"Advanced Accessibility"},{"location":"Libraries/ses_lib_devexpress/","text":"DevExpress \u00b6 DXButtonEdit DXCalcEdit DXCheckButton DXCheckedComboBoxEdit DXCheckEdit DXCheckedListBoxControl DXColorEdit DXComboBoxEdit DXDateEdit DXDockedBarControl DXDockPanel DXDocumentsHost DXDropDownButton DXFontEdit DXGridControl DXHyperLinkEdit DXImageComboBoxEdit DXImageEdit DXImageListBoxControl DXListBoxControl DXLookUpEdit DXMarqueeProgressBarControl DXMaskBox DXMemoEdit DXMemoExEdit DXMRUEdit DXNavBarControl DXPopupBarControl DXPopupContainerEdit DXPopupLookUpEditForm DXProgressBarControl DXPropertyGridControl DXRadioGroup DXRangeTrackBarControl DXRibbon DXSimpleButton DXSpinEdit DXTabControl DXTextEdit DXTextEditMasked DXTimeEdit DXTrackBarControl DXTreeList DXZoomTrackBarControl","title":"DevExpress Objects"},{"location":"Libraries/ses_lib_devexpress/#devexpress","text":"DXButtonEdit DXCalcEdit DXCheckButton DXCheckedComboBoxEdit DXCheckEdit DXCheckedListBoxControl DXColorEdit DXComboBoxEdit DXDateEdit DXDockedBarControl DXDockPanel DXDocumentsHost DXDropDownButton DXFontEdit DXGridControl DXHyperLinkEdit DXImageComboBoxEdit DXImageEdit DXImageListBoxControl DXListBoxControl DXLookUpEdit DXMarqueeProgressBarControl DXMaskBox DXMemoEdit DXMemoExEdit DXMRUEdit DXNavBarControl DXPopupBarControl DXPopupContainerEdit DXPopupLookUpEditForm DXProgressBarControl DXPropertyGridControl DXRadioGroup DXRangeTrackBarControl DXRibbon DXSimpleButton DXSpinEdit DXTabControl DXTextEdit DXTextEditMasked DXTimeEdit DXTrackBarControl DXTreeList DXZoomTrackBarControl","title":"DevExpress"},{"location":"Libraries/ses_lib_domdynamicsnav/","text":"DomDynamicsNAV \u00b6 DomDynamicsNAVEdit DomDynamicsNAVGrid","title":"DomDynamicsNAV Objects"},{"location":"Libraries/ses_lib_domdynamicsnav/#domdynamicsnav","text":"DomDynamicsNAVEdit DomDynamicsNAVGrid","title":"DomDynamicsNAV"},{"location":"Libraries/ses_lib_domsap/","text":"DomSAP \u00b6 DomSAPButton DomSAPCombobox DomSAPGrid DomSAPInput DomSAPTable","title":"DomSAP Objects"},{"location":"Libraries/ses_lib_domsap/#domsap","text":"DomSAPButton DomSAPCombobox DomSAPGrid DomSAPInput DomSAPTable","title":"DomSAP"},{"location":"Libraries/ses_lib_dynamics365/","text":"DomDynamicsAX \u00b6 DomDynamicsAXActionSearch DomDynamicsAXCheckBox DomDynamicsAXComboBox DomDynamicsAXCrumbList DomDynamicsAXDatePicker DomDynamicsAXGrid DomDynamicsAXMenuBar DomDynamicsAXMessageBar DomDynamicsAXNavigationSearch DomDynamicsAXTabControl DomDynamicsAXTextBox","title":"DomDynamicsAX Objects"},{"location":"Libraries/ses_lib_dynamics365/#domdynamicsax","text":"DomDynamicsAXActionSearch DomDynamicsAXCheckBox DomDynamicsAXComboBox DomDynamicsAXCrumbList DomDynamicsAXDatePicker DomDynamicsAXGrid DomDynamicsAXMenuBar DomDynamicsAXMessageBar DomDynamicsAXNavigationSearch DomDynamicsAXTabControl DomDynamicsAXTextBox","title":"DomDynamicsAX"},{"location":"Libraries/ses_lib_dynamicsax/","text":"DynamicsAX \u00b6 DynamicsAXAddressBar DynamicsAXComboBox DynamicsAXComboBoxEdit DynamicsAXComboBoxEditExpanded DynamicsAXFastTabs DynamicsAXMenu DynamicsAXMenuDropDown DynamicsAXMenuDropDownList DynamicsAXMenuItem DynamicsAXTable DynamicsAXTextBox","title":"DynamicsAX Objects"},{"location":"Libraries/ses_lib_dynamicsax/#dynamicsax","text":"DynamicsAXAddressBar DynamicsAXComboBox DynamicsAXComboBoxEdit DynamicsAXComboBoxEditExpanded DynamicsAXFastTabs DynamicsAXMenu DynamicsAXMenuDropDown DynamicsAXMenuDropDownList DynamicsAXMenuItem DynamicsAXTable DynamicsAXTextBox","title":"DynamicsAX"},{"location":"Libraries/ses_lib_dynamicscrm/","text":"DomDynamicsCrm \u00b6 DomDynamicsCrmAgGrid DomDynamicsCrmGrid DomDynamicsCrmUnifiedInterfaceGrid DomDynamicsCrmUnifiedInterfaceList","title":"DomDynamicsCrm Objects"},{"location":"Libraries/ses_lib_dynamicscrm/#domdynamicscrm","text":"DomDynamicsCrmAgGrid DomDynamicsCrmGrid DomDynamicsCrmUnifiedInterfaceGrid DomDynamicsCrmUnifiedInterfaceList","title":"DomDynamicsCrm"},{"location":"Libraries/ses_lib_dynamicsnav/","text":"DynamicsNAV \u00b6 DynamicsNAVFastTabs DynamicsNAVTable DynamicsNAVToolBar","title":"DynamicsNAV Objects"},{"location":"Libraries/ses_lib_dynamicsnav/#dynamicsnav","text":"DynamicsNAVFastTabs DynamicsNAVTable DynamicsNAVToolBar","title":"DynamicsNAV"},{"location":"Libraries/ses_lib_farpoint/","text":"FarPoint \u00b6 FarPointGrid FarPointGridAX","title":"FarPoint Objects"},{"location":"Libraries/ses_lib_farpoint/#farpoint","text":"FarPointGrid FarPointGridAX","title":"FarPoint"},{"location":"Libraries/ses_lib_generic/","text":"Generic \u00b6 SeSSimulatedObject Win32Button Win32CheckButton Win32ComboBox Win32ComboBoxEdit Win32ContextMenu Win32Link Win32List Win32ListCheckable Win32MenuBar Win32Outline Win32PopupMenu Win32RadioButton Win32StaticText Win32Text Win32TreeCheckable","title":"Generic Objects"},{"location":"Libraries/ses_lib_generic/#generic","text":"SeSSimulatedObject Win32Button Win32CheckButton Win32ComboBox Win32ComboBoxEdit Win32ContextMenu Win32Link Win32List Win32ListCheckable Win32MenuBar Win32Outline Win32PopupMenu Win32RadioButton Win32StaticText Win32Text Win32TreeCheckable","title":"Generic"},{"location":"Libraries/ses_lib_global/","text":"Global \u00b6 Android Database File Generator Global iOS Navigator NeoLoad Screenshot SeSReportException SeSReportImage SeSReportLink SeSReportText [Spira][Spira.md] Spreadsheet Tester WebDriver","title":"Global Objects"},{"location":"Libraries/ses_lib_global/#global","text":"Android Database File Generator Global iOS Navigator NeoLoad Screenshot SeSReportException SeSReportImage SeSReportLink SeSReportText [Spira][Spira.md] Spreadsheet Tester WebDriver","title":"Global"},{"location":"Libraries/ses_lib_gwt/","text":"GWT \u00b6 GWTCheckBox GWTDatePicker GWTDecoratedStackPanel GWTMenuBar GWTPushButton GWTRadio GWTStackPanel GWTToggleButton GWTTree","title":"GWT Objects"},{"location":"Libraries/ses_lib_gwt/#gwt","text":"GWTCheckBox GWTDatePicker GWTDecoratedStackPanel GWTMenuBar GWTPushButton GWTRadio GWTStackPanel GWTToggleButton GWTTree","title":"GWT"},{"location":"Libraries/ses_lib_gwtext/","text":"GWTExt \u00b6 GWTExtComboBox GWTExtDatePicker GWTExtGrid GWTExtMenuBar GWTExtTabPanel GWTExtToggleButton GWTExtToolbar GWTExtTree","title":"GWTExt Objects"},{"location":"Libraries/ses_lib_gwtext/#gwtext","text":"GWTExtComboBox GWTExtDatePicker GWTExtGrid GWTExtMenuBar GWTExtTabPanel GWTExtToggleButton GWTExtToolbar GWTExtTree","title":"GWTExt"},{"location":"Libraries/ses_lib_html/","text":"HTML \u00b6 HTMLObject Navigator","title":"HTML Objects"},{"location":"Libraries/ses_lib_html/#html","text":"HTMLObject Navigator","title":"HTML"},{"location":"Libraries/ses_lib_html5/","text":"HTML5 \u00b6 HTML5Number HTML5Progress HTML5Range","title":"HTML5 Objects"},{"location":"Libraries/ses_lib_html5/#html5","text":"HTML5Number HTML5Progress HTML5Range","title":"HTML5"},{"location":"Libraries/ses_lib_infragistics/","text":"Infragistics \u00b6 AnimationControl UltraAppMenu UltraButton UltraCheckEditor UltraColorPicker UltraComboEditor UltraCurrencyEditor UltraDropDownButton UltraFontNameEditor UltraFormattedLinkLabel UltraFormattedTextEditor UltraGrid UltraLabel UltraListBar UltraListView UltraMaskedEdit UltraMdiTabGroupControl UltraNumericEditor UltraOptionSet UltraPopupMenu UltraProgressBar UltraRibbon UltraTabControl UltraTextEditor UltraTimeZoneEditor UltraTree ValueListDropDownUnsafe","title":"Infragistics Objects"},{"location":"Libraries/ses_lib_infragistics/#infragistics","text":"AnimationControl UltraAppMenu UltraButton UltraCheckEditor UltraColorPicker UltraComboEditor UltraCurrencyEditor UltraDropDownButton UltraFontNameEditor UltraFormattedLinkLabel UltraFormattedTextEditor UltraGrid UltraLabel UltraListBar UltraListView UltraMaskedEdit UltraMdiTabGroupControl UltraNumericEditor UltraOptionSet UltraPopupMenu UltraProgressBar UltraRibbon UltraTabControl UltraTextEditor UltraTimeZoneEditor UltraTree ValueListDropDownUnsafe","title":"Infragistics"},{"location":"Libraries/ses_lib_java/","text":"Java \u00b6 JavaButton JavaCheckBox JavaChoice JavaLabel JavaList JavaObject JavaSwingButton JavaSwingCheckBox JavaSwingComboBox JavaSwingLabel JavaSwingList JavaSwingMenuBar JavaSwingPasswordField JavaSwingPopupMenu JavaSwingProgressBar JavaSwingRadioButton JavaSwingSlider JavaSwingTable JavaSwingTextArea JavaSwingTextField JavaSwingToggleButton JavaSwingTree JavaTextArea JavaTextField","title":"Java Objects"},{"location":"Libraries/ses_lib_java/#java","text":"JavaButton JavaCheckBox JavaChoice JavaLabel JavaList JavaObject JavaSwingButton JavaSwingCheckBox JavaSwingComboBox JavaSwingLabel JavaSwingList JavaSwingMenuBar JavaSwingPasswordField JavaSwingPopupMenu JavaSwingProgressBar JavaSwingRadioButton JavaSwingSlider JavaSwingTable JavaSwingTextArea JavaSwingTextField JavaSwingToggleButton JavaSwingTree JavaTextArea JavaTextField","title":"Java"},{"location":"Libraries/ses_lib_jquery/","text":"jQuery \u00b6 JQueryAccordion JQueryDatepicker JQueryMenu JQueryProgressbar JQuerySliderH JQuerySliderV JQuerySpinner JQueryTabs","title":"jQuery Objects"},{"location":"Libraries/ses_lib_jquery/#jquery","text":"JQueryAccordion JQueryDatepicker JQueryMenu JQueryProgressbar JQuerySliderH JQuerySliderV JQuerySpinner JQueryTabs","title":"jQuery"},{"location":"Libraries/ses_lib_managed/","text":"Managed \u00b6 ManagedButton ManagedCheckBox ManagedCheckedListBox ManagedComboBox ManagedDataGridView ManagedLabel ManagedLinkLabel ManagedListBox ManagedListView ManagedMenuPopupItem ManagedMenuStrip ManagedObject ManagedPopupListBox ManagedPropertyGrid ManagedRadioButton ManagedStatusBar ManagedTextBox ManagedTreeView","title":"Managed Objects"},{"location":"Libraries/ses_lib_managed/#managed","text":"ManagedButton ManagedCheckBox ManagedCheckedListBox ManagedComboBox ManagedDataGridView ManagedLabel ManagedLinkLabel ManagedListBox ManagedListView ManagedMenuPopupItem ManagedMenuStrip ManagedObject ManagedPopupListBox ManagedPropertyGrid ManagedRadioButton ManagedStatusBar ManagedTextBox ManagedTreeView","title":"Managed"},{"location":"Libraries/ses_lib_mobile/","text":"Mobile \u00b6 Android Native \u00b6 Android AndroidButton AndroidCheckBox AndroidEditBox AndroidImageButton AndroidImageView AndroidLabel AndroidListView AndroidObject AndroidProgressBar AndroidRadioButton AndroidRatingBar AndroidSeekBar AndroidSpinner AndroidSwitch AndroidToggleButton iOS Native \u00b6 iOS iOSButton iOSEditBox iOSImage iOSLabel iOSObject iOSPageIndicator iOSPicker iOSScrollView iOSSearch iOSSlider iOSSwitch iOSTabBar iOSTable iOSTextView iOSWebView Mobile Web \u00b6 MobileWebObject Appium API \u00b6 AppiumCapabilities AppiumDriver AppiumWebElement","title":"Mobile Objects"},{"location":"Libraries/ses_lib_mobile/#mobile","text":"","title":"Mobile"},{"location":"Libraries/ses_lib_mobile/#android-native","text":"Android AndroidButton AndroidCheckBox AndroidEditBox AndroidImageButton AndroidImageView AndroidLabel AndroidListView AndroidObject AndroidProgressBar AndroidRadioButton AndroidRatingBar AndroidSeekBar AndroidSpinner AndroidSwitch AndroidToggleButton","title":"Android Native"},{"location":"Libraries/ses_lib_mobile/#ios-native","text":"iOS iOSButton iOSEditBox iOSImage iOSLabel iOSObject iOSPageIndicator iOSPicker iOSScrollView iOSSearch iOSSlider iOSSwitch iOSTabBar iOSTable iOSTextView iOSWebView","title":"iOS Native"},{"location":"Libraries/ses_lib_mobile/#mobile-web","text":"MobileWebObject","title":"Mobile Web"},{"location":"Libraries/ses_lib_mobile/#appium-api","text":"AppiumCapabilities AppiumDriver AppiumWebElement","title":"Appium API"},{"location":"Libraries/ses_lib_navposcontrols/","text":"NavPOSControls \u00b6 NavButtonPad","title":"NavPOSControls Objects"},{"location":"Libraries/ses_lib_navposcontrols/#navposcontrols","text":"NavButtonPad","title":"NavPOSControls"},{"location":"Libraries/ses_lib_oracleforms/","text":"OracleForms \u00b6 [GlassMouseGrabProvider Proxy](GlassMouseGrabProvider Proxy](GlassMouseGrabProvider Proxy.md) LWCheckbox LWTextComponent OFTabBar OFToolBar OracleEnhLabledIconButton OracleFormsMenuBar OracleFormsObject OracleFormsTable OraclePushButton VButton VComboBox VPopList VTextField","title":"OracleForms Objects"},{"location":"Libraries/ses_lib_oracleforms/#oracleforms","text":"[GlassMouseGrabProvider Proxy](GlassMouseGrabProvider Proxy](GlassMouseGrabProvider Proxy.md) LWCheckbox LWTextComponent OFTabBar OFToolBar OracleEnhLabledIconButton OracleFormsMenuBar OracleFormsObject OracleFormsTable OraclePushButton VButton VComboBox VPopList VTextField","title":"OracleForms"},{"location":"Libraries/ses_lib_qt/","text":"Qt \u00b6 QAbstractButton QCheckBox QComboBox QDateTimeEdit QFontComboBox QLabel QLineEdit QListBox QMenuBar QPopup QPopupMenu QPushButton QRadioButton QSimulated QTabPage QToolButton QWidget","title":"Qt Objects"},{"location":"Libraries/ses_lib_qt/#qt","text":"QAbstractButton QCheckBox QComboBox QDateTimeEdit QFontComboBox QLabel QLineEdit QListBox QMenuBar QPopup QPopupMenu QPushButton QRadioButton QSimulated QTabPage QToolButton QWidget","title":"Qt"},{"location":"Libraries/ses_lib_salesforce/","text":"DomSalesforce \u00b6 DomLightningComboBox DomLightningGrid DomLightningListBox DomSalesforceGrid","title":"DomSalesforce Objects"},{"location":"Libraries/ses_lib_salesforce/#domsalesforce","text":"DomLightningComboBox DomLightningGrid DomLightningListBox DomSalesforceGrid","title":"DomSalesforce"},{"location":"Libraries/ses_lib_selenium/","text":"Selenium \u00b6 Actions Capabilities Cookies Screenshot WebDriver WebElement Window","title":"Selenium Objects"},{"location":"Libraries/ses_lib_selenium/#selenium","text":"Actions Capabilities Cookies Screenshot WebDriver WebElement Window","title":"Selenium"},{"location":"Libraries/ses_lib_smartgwt/","text":"DomSmartGwt \u00b6 SmartGwtDatePicker SmartGwtTabControl SmartGwtToolbar","title":"DomSmartGwt Objects"},{"location":"Libraries/ses_lib_smartgwt/#domsmartgwt","text":"SmartGwtDatePicker SmartGwtTabControl SmartGwtToolbar","title":"DomSmartGwt"},{"location":"Libraries/ses_lib_swt/","text":"SWT \u00b6 SWTComboBox SWTComboBoxEdit SWTList SWTTree","title":"SWT Objects"},{"location":"Libraries/ses_lib_swt/#swt","text":"SWTComboBox SWTComboBoxEdit SWTList SWTTree","title":"SWT"},{"location":"Libraries/ses_lib_syncfusion/","text":"Syncfusion \u00b6 SyncfusionGrouping SyncfusionRibbon","title":"Syncfusion Objects"},{"location":"Libraries/ses_lib_syncfusion/#syncfusion","text":"SyncfusionGrouping SyncfusionRibbon","title":"Syncfusion"},{"location":"Libraries/ses_lib_telerik/","text":"Telerik \u00b6 TelerikDropDownPopupForm TelerikRadApplicationMenu TelerikRadApplicationMenuDropDown TelerikRadButton TelerikRadCheckBox TelerikRadDateTimePicker TelerikRadDropDownButton TelerikRadDropDownButtonPopup TelerikRadDropDownList TelerikRadDropDownMenu TelerikRadGridView TelerikRadLabel TelerikRadListControl TelerikRadMaskedEditBox TelerikRadMenu TelerikRadProgressBar TelerikRadRadioButton TelerikRadRibbonBar TelerikRadSpinEditor TelerikRadTextBox TelerikRadTitleBar TelerikRadToggleButton TelerikRadToolStrip TelerikRadTrackBar TelerikRadTreeView","title":"Telerik Objects"},{"location":"Libraries/ses_lib_telerik/#telerik","text":"TelerikDropDownPopupForm TelerikRadApplicationMenu TelerikRadApplicationMenuDropDown TelerikRadButton TelerikRadCheckBox TelerikRadDateTimePicker TelerikRadDropDownButton TelerikRadDropDownButtonPopup TelerikRadDropDownList TelerikRadDropDownMenu TelerikRadGridView TelerikRadLabel TelerikRadListControl TelerikRadMaskedEditBox TelerikRadMenu TelerikRadProgressBar TelerikRadRadioButton TelerikRadRibbonBar TelerikRadSpinEditor TelerikRadTextBox TelerikRadTitleBar TelerikRadToggleButton TelerikRadToolStrip TelerikRadTrackBar TelerikRadTreeView","title":"Telerik"},{"location":"Libraries/ses_lib_uiautomation/","text":"UIAutomation \u00b6 UIAButton UIACheckBox UIAComboBox UIAComboBoxEdit UIAHyperlink UIALabel UIAList UIAMenu UIAObject UIAProgressBar UIARadioButton UIASlider UIATabControl UIATextBlock UIATextBox UIATree UIAutomationMenuDropDown UIAutomationMenuDropDownList UIAutomationMenuItem","title":"UIAutomation Objects"},{"location":"Libraries/ses_lib_uiautomation/#uiautomation","text":"UIAButton UIACheckBox UIAComboBox UIAComboBoxEdit UIAHyperlink UIALabel UIAList UIAMenu UIAObject UIAProgressBar UIARadioButton UIASlider UIATabControl UIATextBlock UIATextBox UIATree UIAutomationMenuDropDown UIAutomationMenuDropDownList UIAutomationMenuItem","title":"UIAutomation"},{"location":"Libraries/ses_lib_vsflexgrid/","text":"VSFlexGrid \u00b6 VSFlexGrid","title":"VSFlexGrid Objects"},{"location":"Libraries/ses_lib_vsflexgrid/#vsflexgrid","text":"VSFlexGrid","title":"VSFlexGrid"},{"location":"Libraries/ses_lib_webservices/","text":"Global \u00b6 Session Web Services \u00b6 RESTRequest RESTResponse RESTService SOAPService","title":"Web Services Objects"},{"location":"Libraries/ses_lib_webservices/#global","text":"Session","title":"Global"},{"location":"Libraries/ses_lib_webservices/#web-services","text":"RESTRequest RESTResponse RESTService SOAPService","title":"Web Services"},{"location":"Libraries/ses_lib_yui/","text":"YUI \u00b6 YUIButtonMenu YUICalendar YUICheckButton YUIMenu YUIMenuBar YUIMenuButton YUIPushButton YUIRadioButton YUISliderH YUISliderV YUISplitButton YUITree","title":"YUI Objects"},{"location":"Libraries/ses_lib_yui/#yui","text":"YUIButtonMenu YUICalendar YUICheckButton YUIMenu YUIMenuBar YUIMenuButton YUIPushButton YUIRadioButton YUISliderH YUISliderV YUISplitButton YUITree","title":"YUI"},{"location":"Manuals/Preparing_for_Android_Testing/","text":"Preparing Environment for Android Mobile Testing with Rapise \u00b6 Rapise lets you record and play automated tests against native applications on a variety of mobile devices using the Android operating system. Rapise gives you the flexibility to test your applications on either real or simulated devices. This section explains how to setup your environment for mobile testing , once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing. Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium. Testing Architectures \u00b6 Rapise runs on Windows computers (PC) and Android devices (both real and simulated) can be tested on either an Apple Macintosh (Mac) computer or a PC. So this means that there are two separate possible testing environments that you may need to setup: Using a Mac to Host Android Emulator and Devices. It will be necessary to install Appium and Android Studio onto the Mac and connect to Appium over the network from Rapise running on your PC. Using a PC to Host Android Emulator and Devices. You can either install Appium and Android Studio onto a separate PC or you can simply use the same PC that is running Rapise. The only difference will be whether the URL used to connect to Appium is a localhost URL or one pointing to the other PC. The steps for setting each of these will be described separately. For physical Android devices the architecture looks like: For simulated Android devices (using the Android Virtual Device Manager) the architecture looks like: Using a Mac to Host Android Emulator and Devices \u00b6 The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal. > brew install node > npm install -g appium More about Appium installation . Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website . Once that has been installed, make sure that the JAVA_HOME environment variable has been set. Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site . More about Android Studio installation . Once it has installed, you will use the Android SDK Manager to download and install the necessary packages: Preparing Android Emulator \u00b6 If you want to test using the Android Emulator, make sure you have installed it using the SDK manager. Then you can launch (from the main menu of the Android Studio) the Android Virtual Device (AVD) Manager . In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise. Preparing a Physical Android Device \u00b6 If you are going to be testing a physical Android device, you will need to do the following. The Settings app on Android includes a screen called Developer options that lets you configure system behaviors that help you profile and debug your app performance. Enable developer options and debugging On Android 4.1 and lower, the Developer options screen is available by default. On Android 4.2 and higher, you must enable this screen as follows: Open the Settings app. (Only on Android 8.0 or higher) Select System. Scroll to the bottom and select About phone. Scroll to the bottom and tap Build number 7 times. Return to the previous screen to find Developer options near the bottom. At the top of the Developer options screen, you can toggle the options on and off. You probably want to keep this on. When off, most options are disabled except those that don't require communication between the device and your development computer. Next, you should scroll down a little and enable USB debugging . This allows Android Studio and other SDK tools to recognize your device when connected via USB, so you can use the debugger and other tools. Read more about Developer Options and USB Debugging . You are now ready to start mobile testing of your Android Device and Android Emulator. Using a PC to Host Android Emulator and Devices \u00b6 The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Command Prompt. Install NodeJS and NPM as described here . Install Appium > npm install -g appium Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website . Once that has been installed, make sure that the JAVA_HOME environment variable has been set. Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site . Make sure you have ANDROID_HOME environment variable set to point to Android SDK. In most cases it should point to 1 c:\\Users\\<user name>\\AppData\\Local\\Android\\sdk More about Android Studio installation Once it has installed, you will use the Android SDK Manager to download and install the necessary packages. Preparing Android Emulator \u00b6 If you want to test using the Android Emulator, make sure you have installed it using the SDK manager. Then you can launch (from the main menu of the Android Studio) the Android Virtual Device (AVD) Manager . In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise. Preparing a Physical Android Device \u00b6 Steps are the same as for Mac .","title":"Preparing for Android Testing"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-environment-for-android-mobile-testing-with-rapise","text":"Rapise lets you record and play automated tests against native applications on a variety of mobile devices using the Android operating system. Rapise gives you the flexibility to test your applications on either real or simulated devices. This section explains how to setup your environment for mobile testing , once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing. Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium.","title":"Preparing Environment for Android Mobile Testing with Rapise"},{"location":"Manuals/Preparing_for_Android_Testing/#testing-architectures","text":"Rapise runs on Windows computers (PC) and Android devices (both real and simulated) can be tested on either an Apple Macintosh (Mac) computer or a PC. So this means that there are two separate possible testing environments that you may need to setup: Using a Mac to Host Android Emulator and Devices. It will be necessary to install Appium and Android Studio onto the Mac and connect to Appium over the network from Rapise running on your PC. Using a PC to Host Android Emulator and Devices. You can either install Appium and Android Studio onto a separate PC or you can simply use the same PC that is running Rapise. The only difference will be whether the URL used to connect to Appium is a localhost URL or one pointing to the other PC. The steps for setting each of these will be described separately. For physical Android devices the architecture looks like: For simulated Android devices (using the Android Virtual Device Manager) the architecture looks like:","title":"Testing Architectures"},{"location":"Manuals/Preparing_for_Android_Testing/#using-a-mac-to-host-android-emulator-and-devices","text":"The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal. > brew install node > npm install -g appium More about Appium installation . Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website . Once that has been installed, make sure that the JAVA_HOME environment variable has been set. Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site . More about Android Studio installation . Once it has installed, you will use the Android SDK Manager to download and install the necessary packages:","title":"Using a Mac to Host Android Emulator and Devices"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-android-emulator","text":"If you want to test using the Android Emulator, make sure you have installed it using the SDK manager. Then you can launch (from the main menu of the Android Studio) the Android Virtual Device (AVD) Manager . In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise.","title":"Preparing Android Emulator"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-a-physical-android-device","text":"If you are going to be testing a physical Android device, you will need to do the following. The Settings app on Android includes a screen called Developer options that lets you configure system behaviors that help you profile and debug your app performance. Enable developer options and debugging On Android 4.1 and lower, the Developer options screen is available by default. On Android 4.2 and higher, you must enable this screen as follows: Open the Settings app. (Only on Android 8.0 or higher) Select System. Scroll to the bottom and select About phone. Scroll to the bottom and tap Build number 7 times. Return to the previous screen to find Developer options near the bottom. At the top of the Developer options screen, you can toggle the options on and off. You probably want to keep this on. When off, most options are disabled except those that don't require communication between the device and your development computer. Next, you should scroll down a little and enable USB debugging . This allows Android Studio and other SDK tools to recognize your device when connected via USB, so you can use the debugger and other tools. Read more about Developer Options and USB Debugging . You are now ready to start mobile testing of your Android Device and Android Emulator.","title":"Preparing a Physical Android Device"},{"location":"Manuals/Preparing_for_Android_Testing/#using-a-pc-to-host-android-emulator-and-devices","text":"The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Command Prompt. Install NodeJS and NPM as described here . Install Appium > npm install -g appium Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website . Once that has been installed, make sure that the JAVA_HOME environment variable has been set. Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site . Make sure you have ANDROID_HOME environment variable set to point to Android SDK. In most cases it should point to 1 c:\\Users\\<user name>\\AppData\\Local\\Android\\sdk More about Android Studio installation Once it has installed, you will use the Android SDK Manager to download and install the necessary packages.","title":"Using a PC to Host Android Emulator and Devices"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-android-emulator_1","text":"If you want to test using the Android Emulator, make sure you have installed it using the SDK manager. Then you can launch (from the main menu of the Android Studio) the Android Virtual Device (AVD) Manager . In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise.","title":"Preparing Android Emulator"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-a-physical-android-device_1","text":"Steps are the same as for Mac .","title":"Preparing a Physical Android Device"},{"location":"Manuals/Preparing_for_iOS_Testing/","text":"Preparing Environment for iOS Mobile Testing with Rapise \u00b6 Rapise lets you record and play automated tests against native applications on a variety of mobile devices using Apple iOS. Rapise gives you the flexibility to test your applications on either real or simulated devices. This section explains how to setup your environment for mobile testing , once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing. Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium. Testing Architecture \u00b6 Since Rapise runs on Windows computers (PC) and iOS devices (both real and simulated) can only be tested on an Apple Macintosh (Mac) computer, it is necessary that you install Appium and Apple Xcode onto the Mac and connect to Appium over the network from Rapise running on your PC. For Physical iOS devices the architecture looks like: For simulated iOS devices (using the XCode iOS Simulator) the architecture looks like: Using a Mac to Host iOS Simulator and Devices \u00b6 The first thing you need to do is install Xcode from the Apple Mac app store. Make sure you include the iOS SDK , and also the iOS Simulator if you intend to test simulated iOS devices. (Please refer to the Apple tutorial if you are writing your first iOS application and need an introduction into how to develop for iOS). Get the AUTiOS Source Code \u00b6 Sample iOS application is hosted in AUTiOS Repository . Launch Xcode on the Mac and check out the application from the repository: Before you can actually build and deploy this project, you will need to register for an Apple ID and setup an Apple Developer account. You should check with your company to see if they have already joined the Apple iOS Developer Program , if not, you will need to join yourself and become a member. You can learn more about this at the Apple developer website . Join Your iOS Development Team \u00b6 Assuming that either you or your company already has signed up for the iOS Developer Program, you will need to ask the administrator of your account (it might be you) to send an invitation to you if you are not already a member. The link for accepting such an invitation is typically: https://developer.apple.com/programs/start/jointeam/index.php?success=%2Fios%2Finvitation%2Faccept.action Click on this link and accept the invitation. Meanwhile, back in Xcode Use the \u2018Add an Account\u2026\u2019 to login with your Apple ID : Building and Deploying on a Simulated Device \u00b6 Now that you have signed into Xcode using your developer account, you can select a simulated device and run the project on it: Once you have selected the simulated iOS device you want to use, click the Product > Build option to build the app for the targeted device. You can use the Run option to make sure that the app actually launches on this device before testing it with Rapise. Assuming that this is successful, you will see the AUTiOS running in the iOS Simulator: If you are only going to use Simulated devices (not recommended) then you can skip the next section and just continue with setting up Appium , as described in the main Mobile Testing topic. Building and Deploying on a Physical Device \u00b6 Login with your Apple ID to http://developer.apple.com Choose Certificates, Identifiers & Profiles: Select Devices: Add your device's UDID to the list of registered iOS devices in the developer account: You can find out the UDID by connecting it to the Mac and viewing the device inside Xcode. Then, back in Xcode choose your physical device, and use the Product > Build and Run option to test that the app launches on the device: Installing Appium on the Mac \u00b6 The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal. > brew install node > npm install -g appium More about Appium installation . You are now ready to start mobile testing of your iOS simulator or device.","title":"Preparing for iOS Testing"},{"location":"Manuals/Preparing_for_iOS_Testing/#preparing-environment-for-ios-mobile-testing-with-rapise","text":"Rapise lets you record and play automated tests against native applications on a variety of mobile devices using Apple iOS. Rapise gives you the flexibility to test your applications on either real or simulated devices. This section explains how to setup your environment for mobile testing , once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing. Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium.","title":"Preparing Environment for iOS Mobile Testing with Rapise"},{"location":"Manuals/Preparing_for_iOS_Testing/#testing-architecture","text":"Since Rapise runs on Windows computers (PC) and iOS devices (both real and simulated) can only be tested on an Apple Macintosh (Mac) computer, it is necessary that you install Appium and Apple Xcode onto the Mac and connect to Appium over the network from Rapise running on your PC. For Physical iOS devices the architecture looks like: For simulated iOS devices (using the XCode iOS Simulator) the architecture looks like:","title":"Testing Architecture"},{"location":"Manuals/Preparing_for_iOS_Testing/#using-a-mac-to-host-ios-simulator-and-devices","text":"The first thing you need to do is install Xcode from the Apple Mac app store. Make sure you include the iOS SDK , and also the iOS Simulator if you intend to test simulated iOS devices. (Please refer to the Apple tutorial if you are writing your first iOS application and need an introduction into how to develop for iOS).","title":"Using a Mac to Host iOS Simulator and Devices"},{"location":"Manuals/Preparing_for_iOS_Testing/#get-the-autios-source-code","text":"Sample iOS application is hosted in AUTiOS Repository . Launch Xcode on the Mac and check out the application from the repository: Before you can actually build and deploy this project, you will need to register for an Apple ID and setup an Apple Developer account. You should check with your company to see if they have already joined the Apple iOS Developer Program , if not, you will need to join yourself and become a member. You can learn more about this at the Apple developer website .","title":"Get the AUTiOS Source Code"},{"location":"Manuals/Preparing_for_iOS_Testing/#join-your-ios-development-team","text":"Assuming that either you or your company already has signed up for the iOS Developer Program, you will need to ask the administrator of your account (it might be you) to send an invitation to you if you are not already a member. The link for accepting such an invitation is typically: https://developer.apple.com/programs/start/jointeam/index.php?success=%2Fios%2Finvitation%2Faccept.action Click on this link and accept the invitation. Meanwhile, back in Xcode Use the \u2018Add an Account\u2026\u2019 to login with your Apple ID :","title":"Join Your iOS Development Team"},{"location":"Manuals/Preparing_for_iOS_Testing/#building-and-deploying-on-a-simulated-device","text":"Now that you have signed into Xcode using your developer account, you can select a simulated device and run the project on it: Once you have selected the simulated iOS device you want to use, click the Product > Build option to build the app for the targeted device. You can use the Run option to make sure that the app actually launches on this device before testing it with Rapise. Assuming that this is successful, you will see the AUTiOS running in the iOS Simulator: If you are only going to use Simulated devices (not recommended) then you can skip the next section and just continue with setting up Appium , as described in the main Mobile Testing topic.","title":"Building and Deploying on a Simulated Device"},{"location":"Manuals/Preparing_for_iOS_Testing/#building-and-deploying-on-a-physical-device","text":"Login with your Apple ID to http://developer.apple.com Choose Certificates, Identifiers & Profiles: Select Devices: Add your device's UDID to the list of registered iOS devices in the developer account: You can find out the UDID by connecting it to the Mac and viewing the device inside Xcode. Then, back in Xcode choose your physical device, and use the Product > Build and Run option to test that the app launches on the device:","title":"Building and Deploying on a Physical Device"},{"location":"Manuals/Preparing_for_iOS_Testing/#installing-appium-on-the-mac","text":"The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal. > brew install node > npm install -g appium More about Appium installation . You are now ready to start mobile testing of your iOS simulator or device.","title":"Installing Appium on the Mac"},{"location":"Manuals/Rapise_Installation_Guide/","text":"Rapise Installation Guide \u00b6 Introduction \u00b6 Rapise\u00ae is a next generation software test automation tool that leverages the power of open architecture to improve application quality and reduce time to market. This installation guide outlines how to setup a working installation of Rapise including the installation of any dependencies and prerequisites. It also provides information on obtaining an evaluation or production license key from Inflectra so that you can use the software. It assumes a basic understanding of how to setup and administer a Windows\u00ae workstation, and also assumes that you have access to a valid Administrator level account that can install software. For information on how to use the features of Rapise please refer to either the Rapise Quick Start Guide or the Rapise User's Guide instead. Installing Rapise \u00b6 This section outlines how to prepare your system for installation of Rapise, and how to actually install the software using the provided installation package. The first sub-section will outline what hardware and software configurations are supported and the exact installation sequence for different versions of Microsoft\u00ae Windows\u00ae. The second sub-section will explain how to load the Rapise software onto the computer, and discuss common problems and solutions. The minimum hardware and software requirements for running the Rapise are: Requirement Minimum Specification Processor: Intel\u00ae or AMD\u00ae x86 or x64 compatible processor Memory: 2 GB, 4 GB recommended Disk Space: 5 GB Display: HD (1280 x 720) Operating System: Microsoft Windows 8.1 (x86 and x64) Microsoft Windows 10 Microsoft Windows Server 2012 R1 / R2 Microsoft Windows Server 2016 Microsoft Windows Server 2019 Web Browsers: Internet Explorer 8.0+ Mozilla Firefox Google Chrome Microsoft Edge Apple Safari Other Components: .NET Framework 4.7.2 System Prerequisites \u00b6 Assuming that you have already installed the appropriate version of Microsoft Windows onto your computer (or that has been pre-installed for you), you need to then make sure that the various prerequisites have been correctly added to your installation before trying to install Rapise. The Rapise installer will check to ensure that the various prerequisites are in place, and will install any missing perquisites (apart from the Microsoft .NET Framework) automatically. Microsoft .NET 4.7.2 \u00b6 On Windows 10 and Windows 2016 Server installations (with all latest updates) Microsoft .NET Framework meets minimum requirements, whereas on earlier operating systems, you might need to manually add the .NET 4.7.2 components to the factory configuration. To install the .NET Framework, launch Internet Explorer and enter the URL: https://dotnet.microsoft.com/en-us/download/dotnet-framework/net472 . From this page there will be links to download and install the appropriate version of the .NET Framework. Remove any Previous Versions \u00b6 Before installing the current version of Rapise, we recommend first uninstalling any previous versions of Rapise to ensure you have a clean installation. To do this, go to Start > Control Panel > Programs and Features : The click the \"Rapise\" entry and confirm that you want to install the existing installed version. Installing the Software \u00b6 Now that all the prerequisites have been correctly installed, you are now ready to install Rapise onto your system. To perform the installation, you will need the installation package downloaded from the Inflectra\u00ae website. To start the installation, double-click on the Rapise installation package (it will have a filename of the form Rapise-vX.X.X.X.exe), and the Windows Installer will display the following dialog box: The first screen in the installation wizard outlines the Inflectra End User License Agreement (EULA). Please read this carefully as it describes the legal contract between you -- the user of the software -- and Inflectra\u00ae Corporation, the developer and publisher. Once you have read the agreement and understood your rights and obligations, select the checkbox marked \"I agree to the license terms and conditions\" and click the Install button. This will begin the process of installing Rapise onto your system. If you are installing Rapise onto Windows Vista or newer, then you may be prompted by the Windows User Access Control (UAC) security system to confirm that you want to install a new piece of software: Click the option that confirms you want to proceed with the install. The installer will then display a progress bar that gradually fills as the installation proceeds. Once the installation is complete, the following message will be displayed: Congratulations! You have successfully installed Rapise onto your system. You should now have a Rapise shortcut icon added to your Windows Desktop and if you click on Start > Program Files > Inflectra > Rapise , you should see the new Rapise program group: License \u00b6 As we announced back in June 2021, there have been plans to provide our Rapise test automation platform with a new floating license option, in addition to the fixed licensing system that we've had since the launch of the product. Well the big day has arrived - we are pleased to announce that you can now purchase Rapise floating licenses as part of your existing Spira subscription, with both monthly and annual options. Floating License \u00b6 How to Purchase \u00b6 Unlike fixed licenses which are purchased from our website as a standalone purchase, Rapise uses our Spira test management platform to manage its floating licenses. So you will need to first login to Customer Portal on our website. From here, you need to locate your SpiraTest, SpiraTeam or SpiraPlan cloud subscription and click the Customize button: (If you are not using the cloud version of Spira, then unfortunately at this time you cannot use floating licenses) Once you click on the Customize button you can choose the number of Rapise floating licenses you want to purchase: If you have a monthly Spira subscription, the Rapise floating licenses will also be charged monthly, whereas if you have an annual Spira subscription, then the Rapise floating licenses will similarly be part of the annual renewal. Once you have completed the purchase of the floating licenses, you will see a new Rapise subscription add-on in your Customer Area homepage: It will be initially in the Pending status while our cloud servers complete the task of updating your Spira instance with the number of Rapise licenses. Once that task is completed, you will get an email letting you know, and the status will change to Active . How to Manage \u00b6 Once the subscription add-on has been provisioned, you will see a new menu entry in the System Administration: Integration section of your Spira instance: When you click on this link you will see how many Rapise floating licenses are available as well as how many are currently in use (initially the list will be empty): You can now connect Rapise to your Spira instance to use the new floating licenses. How to Configure \u00b6 Now that you have floating licenses available, when you connect Rapise to Spira as you would normally to start writing tests: Rapise automatically requests a floating license from Spira and will use that license until Rapise is closed or an administrator clicks the End Session button in Spira: The advantage of the floating licenses is that you can have all your computers install Rapise and they will only use a license when Rapise is active, vs. having to purchase a fixed license for a machine regardless of whether that machine is actually using the license. In addition, it lets you purchase Rapise licenses monthly bundled with your existing Spira subscription. Fixed License \u00b6 Once you have successfully installed Rapise, you will need to activate it with a license key (either a temporary evaluation key or a permanent production key). This section describes the process for activating your copy of Rapise as well as how to perform updates to the license key and potentially move it to another computer. Getting Your Activation Code \u00b6 When you first launch Rapise after installation, it will display the following dialog box: You should now enter the alphanumeric activation code from the Customer Area of the Inflectra website (the same page that you downloaded the installation package from). It will be displayed in the \"My Licenses\" section of the webpage. An example page is shown below: There are two kinds of activation code: Evaluation Activation Codes -- these start with the letters \"DMO\" Production Activation Codes -- these start with the letters \"SDM\" You should enter the appropriate activation code into the Rapise activation wizard and choose the option to either activate online or offline. If you are connected to the Internet, online activation is easier. If you are not connected to the Internet (e.g. working in a secure environment), then you will need to use the offline activation option. The following sections will explain how each of the options work: Activating Online \u00b6 To use online activation, make sure you are connected to the Internet, enter the activation code, choose \"Activate Online\" and click the Next button: The activation system will contact our activation server, process the activation code and activate the license. The application will start automatically and if you visit the Customer Area of our website, you will see that it is listed as activated, with a license key displayed: Activating Offline \u00b6 To use offline activation, enter the activation code, choose \"Activate Offline\" and click the \\<Next> button: This will bring up the Offline Activation screen: Click on the Save button to save the Rapise.LIC file to your hard drive. Copy across the Rapise.LIC file to a computer that has Internet access and open up the Customer Area of our website: Click on the Activate link which will take you to the Offline Activation part of our website: Click on the Browse button and navigate to the place where the Rapise.LIC file is stored. Then click on the [Activate] button to begin the activation process. Assuming that the License file is valid, the website will activate the license and take you back to the Customer Area where the license key will be displayed: Click on the License Key hyperlink and you will be prompted to save the Rapise.CDM file to your hard drive. Save this file and then copy it across to the computer that has Rapise installed. Now on the Offline Activation screen: Click the Step 3 Open button and browse to the Rapise.CDM file. Once you have the file selected, click on the Finish button to complete the activation. Assuming that the Rapise.CDM file is valid, the application will start. Note: If you have any problems activating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem. Upgrading from Demo License \u00b6 If you have installed a demonstration license, when the expiration date is reached the software will stop working and prompt to you purchase a commercial license. To purchase the commercial license, go to http://www.inflectra.com/Rapise and click on the appropriate Purchase link to obtain a commercial production license. Once you have purchased the license your Customer Area will display a new activation code. Simply start up Rapise, enter the new activation code and follow the process described in section 2.2 or 2.3. If you want to upgrade your license before the demonstration license is expired, you need to click on the menu Help > Activation : This will bring up the Activation dialog box: Click on the Enter Activation Code button and then follow the steps in 2.3 or 2.4 to activate the product with the new production license. Transferring to Another Computer \u00b6 Sometimes you need to transfer your Rapise license from one computer to another, or the computer it's installed on needs to be rebuilt. In either case, it's important that you first deactivate the product from the current computer, otherwise you will be prevented from activating the product on the new / rebuilt computer. To deactivate your current installation, you need to click on the Activation button in the Help section of the Rapise Test ribbon: This will bring up the Activation dialog box: Click on the Deactivate button and activation system will contact our activation server, process the deactivation code and deactivate the license. If you visit the Customer Area of our website, you will see that it is listed as deactivated, with the option to activate it now available: Note: If you have any problems deactivating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem. Legal Notices \u00b6 This publication is provided as is without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. This publication could include technical inaccuracies or typographical errors. Changes are periodically added to the information contained herein; these changes will be incorporated in new editions of the publication. Inflectra\u00ae Corporation may make improvements and/or changes in the product(s) and/or program(s) and/or service(s) described in this publication at any time. The sections in this guide that discuss internet web security are provided as suggestions and guidelines. Internet security is constantly evolving field, and our suggestions are no substitute for an up-to-date understanding of the vulnerabilities inherent in deploying internet or web applications, and Inflectra \u00ae cannot be held liable for any losses due to breaches of security, compromise of data or other cyber-attacks that may result from following our recommendations. The section of the manual that describes modifying the Windows System Registry (\"Registry\") should only be attempted by experienced Windows administrators who are familiar with its organization and contents. Inflectra\u00ae cannot be held liable for any losses due to damage to the system registry made by inexperienced personnel. SpiraTest\u00ae, SpiraTeam\u00ae, Rapise\u00ae and Inflectra\u00ae are either trademarks or registered trademarks of Inflectra Corporation in the United States of America and other countries. Microsoft\u00ae, Windows\u00ae, Explorer\u00ae and Microsoft Project\u00ae are registered trademarks of Microsoft Corporation. All other trademarks and product names are property of their respective holders. Please send comments and questions to: 1 2 3 4 5 6 Technical Publications Inflectra Corporation 8121 Georgia Ave Suite 504 Silver Spring, MD 20910 U.S.A. support@inflectra.com","title":"Rapise Installation Guide"},{"location":"Manuals/Rapise_Installation_Guide/#rapise-installation-guide","text":"","title":"Rapise Installation Guide"},{"location":"Manuals/Rapise_Installation_Guide/#introduction","text":"Rapise\u00ae is a next generation software test automation tool that leverages the power of open architecture to improve application quality and reduce time to market. This installation guide outlines how to setup a working installation of Rapise including the installation of any dependencies and prerequisites. It also provides information on obtaining an evaluation or production license key from Inflectra so that you can use the software. It assumes a basic understanding of how to setup and administer a Windows\u00ae workstation, and also assumes that you have access to a valid Administrator level account that can install software. For information on how to use the features of Rapise please refer to either the Rapise Quick Start Guide or the Rapise User's Guide instead.","title":"Introduction"},{"location":"Manuals/Rapise_Installation_Guide/#installing-rapise","text":"This section outlines how to prepare your system for installation of Rapise, and how to actually install the software using the provided installation package. The first sub-section will outline what hardware and software configurations are supported and the exact installation sequence for different versions of Microsoft\u00ae Windows\u00ae. The second sub-section will explain how to load the Rapise software onto the computer, and discuss common problems and solutions. The minimum hardware and software requirements for running the Rapise are: Requirement Minimum Specification Processor: Intel\u00ae or AMD\u00ae x86 or x64 compatible processor Memory: 2 GB, 4 GB recommended Disk Space: 5 GB Display: HD (1280 x 720) Operating System: Microsoft Windows 8.1 (x86 and x64) Microsoft Windows 10 Microsoft Windows Server 2012 R1 / R2 Microsoft Windows Server 2016 Microsoft Windows Server 2019 Web Browsers: Internet Explorer 8.0+ Mozilla Firefox Google Chrome Microsoft Edge Apple Safari Other Components: .NET Framework 4.7.2","title":"Installing Rapise"},{"location":"Manuals/Rapise_Installation_Guide/#system-prerequisites","text":"Assuming that you have already installed the appropriate version of Microsoft Windows onto your computer (or that has been pre-installed for you), you need to then make sure that the various prerequisites have been correctly added to your installation before trying to install Rapise. The Rapise installer will check to ensure that the various prerequisites are in place, and will install any missing perquisites (apart from the Microsoft .NET Framework) automatically.","title":"System Prerequisites"},{"location":"Manuals/Rapise_Installation_Guide/#microsoft-net-472","text":"On Windows 10 and Windows 2016 Server installations (with all latest updates) Microsoft .NET Framework meets minimum requirements, whereas on earlier operating systems, you might need to manually add the .NET 4.7.2 components to the factory configuration. To install the .NET Framework, launch Internet Explorer and enter the URL: https://dotnet.microsoft.com/en-us/download/dotnet-framework/net472 . From this page there will be links to download and install the appropriate version of the .NET Framework.","title":"Microsoft .NET 4.7.2"},{"location":"Manuals/Rapise_Installation_Guide/#remove-any-previous-versions","text":"Before installing the current version of Rapise, we recommend first uninstalling any previous versions of Rapise to ensure you have a clean installation. To do this, go to Start > Control Panel > Programs and Features : The click the \"Rapise\" entry and confirm that you want to install the existing installed version.","title":"Remove any Previous Versions"},{"location":"Manuals/Rapise_Installation_Guide/#installing-the-software","text":"Now that all the prerequisites have been correctly installed, you are now ready to install Rapise onto your system. To perform the installation, you will need the installation package downloaded from the Inflectra\u00ae website. To start the installation, double-click on the Rapise installation package (it will have a filename of the form Rapise-vX.X.X.X.exe), and the Windows Installer will display the following dialog box: The first screen in the installation wizard outlines the Inflectra End User License Agreement (EULA). Please read this carefully as it describes the legal contract between you -- the user of the software -- and Inflectra\u00ae Corporation, the developer and publisher. Once you have read the agreement and understood your rights and obligations, select the checkbox marked \"I agree to the license terms and conditions\" and click the Install button. This will begin the process of installing Rapise onto your system. If you are installing Rapise onto Windows Vista or newer, then you may be prompted by the Windows User Access Control (UAC) security system to confirm that you want to install a new piece of software: Click the option that confirms you want to proceed with the install. The installer will then display a progress bar that gradually fills as the installation proceeds. Once the installation is complete, the following message will be displayed: Congratulations! You have successfully installed Rapise onto your system. You should now have a Rapise shortcut icon added to your Windows Desktop and if you click on Start > Program Files > Inflectra > Rapise , you should see the new Rapise program group:","title":"Installing the Software"},{"location":"Manuals/Rapise_Installation_Guide/#license","text":"As we announced back in June 2021, there have been plans to provide our Rapise test automation platform with a new floating license option, in addition to the fixed licensing system that we've had since the launch of the product. Well the big day has arrived - we are pleased to announce that you can now purchase Rapise floating licenses as part of your existing Spira subscription, with both monthly and annual options.","title":"License"},{"location":"Manuals/Rapise_Installation_Guide/#floating-license","text":"","title":"Floating License"},{"location":"Manuals/Rapise_Installation_Guide/#how-to-purchase","text":"Unlike fixed licenses which are purchased from our website as a standalone purchase, Rapise uses our Spira test management platform to manage its floating licenses. So you will need to first login to Customer Portal on our website. From here, you need to locate your SpiraTest, SpiraTeam or SpiraPlan cloud subscription and click the Customize button: (If you are not using the cloud version of Spira, then unfortunately at this time you cannot use floating licenses) Once you click on the Customize button you can choose the number of Rapise floating licenses you want to purchase: If you have a monthly Spira subscription, the Rapise floating licenses will also be charged monthly, whereas if you have an annual Spira subscription, then the Rapise floating licenses will similarly be part of the annual renewal. Once you have completed the purchase of the floating licenses, you will see a new Rapise subscription add-on in your Customer Area homepage: It will be initially in the Pending status while our cloud servers complete the task of updating your Spira instance with the number of Rapise licenses. Once that task is completed, you will get an email letting you know, and the status will change to Active .","title":"How to Purchase"},{"location":"Manuals/Rapise_Installation_Guide/#how-to-manage","text":"Once the subscription add-on has been provisioned, you will see a new menu entry in the System Administration: Integration section of your Spira instance: When you click on this link you will see how many Rapise floating licenses are available as well as how many are currently in use (initially the list will be empty): You can now connect Rapise to your Spira instance to use the new floating licenses.","title":"How to Manage"},{"location":"Manuals/Rapise_Installation_Guide/#how-to-configure","text":"Now that you have floating licenses available, when you connect Rapise to Spira as you would normally to start writing tests: Rapise automatically requests a floating license from Spira and will use that license until Rapise is closed or an administrator clicks the End Session button in Spira: The advantage of the floating licenses is that you can have all your computers install Rapise and they will only use a license when Rapise is active, vs. having to purchase a fixed license for a machine regardless of whether that machine is actually using the license. In addition, it lets you purchase Rapise licenses monthly bundled with your existing Spira subscription.","title":"How to Configure"},{"location":"Manuals/Rapise_Installation_Guide/#fixed-license","text":"Once you have successfully installed Rapise, you will need to activate it with a license key (either a temporary evaluation key or a permanent production key). This section describes the process for activating your copy of Rapise as well as how to perform updates to the license key and potentially move it to another computer.","title":"Fixed License"},{"location":"Manuals/Rapise_Installation_Guide/#getting-your-activation-code","text":"When you first launch Rapise after installation, it will display the following dialog box: You should now enter the alphanumeric activation code from the Customer Area of the Inflectra website (the same page that you downloaded the installation package from). It will be displayed in the \"My Licenses\" section of the webpage. An example page is shown below: There are two kinds of activation code: Evaluation Activation Codes -- these start with the letters \"DMO\" Production Activation Codes -- these start with the letters \"SDM\" You should enter the appropriate activation code into the Rapise activation wizard and choose the option to either activate online or offline. If you are connected to the Internet, online activation is easier. If you are not connected to the Internet (e.g. working in a secure environment), then you will need to use the offline activation option. The following sections will explain how each of the options work:","title":"Getting Your Activation Code"},{"location":"Manuals/Rapise_Installation_Guide/#activating-online","text":"To use online activation, make sure you are connected to the Internet, enter the activation code, choose \"Activate Online\" and click the Next button: The activation system will contact our activation server, process the activation code and activate the license. The application will start automatically and if you visit the Customer Area of our website, you will see that it is listed as activated, with a license key displayed:","title":"Activating Online"},{"location":"Manuals/Rapise_Installation_Guide/#activating-offline","text":"To use offline activation, enter the activation code, choose \"Activate Offline\" and click the \\<Next> button: This will bring up the Offline Activation screen: Click on the Save button to save the Rapise.LIC file to your hard drive. Copy across the Rapise.LIC file to a computer that has Internet access and open up the Customer Area of our website: Click on the Activate link which will take you to the Offline Activation part of our website: Click on the Browse button and navigate to the place where the Rapise.LIC file is stored. Then click on the [Activate] button to begin the activation process. Assuming that the License file is valid, the website will activate the license and take you back to the Customer Area where the license key will be displayed: Click on the License Key hyperlink and you will be prompted to save the Rapise.CDM file to your hard drive. Save this file and then copy it across to the computer that has Rapise installed. Now on the Offline Activation screen: Click the Step 3 Open button and browse to the Rapise.CDM file. Once you have the file selected, click on the Finish button to complete the activation. Assuming that the Rapise.CDM file is valid, the application will start. Note: If you have any problems activating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem.","title":"Activating Offline"},{"location":"Manuals/Rapise_Installation_Guide/#upgrading-from-demo-license","text":"If you have installed a demonstration license, when the expiration date is reached the software will stop working and prompt to you purchase a commercial license. To purchase the commercial license, go to http://www.inflectra.com/Rapise and click on the appropriate Purchase link to obtain a commercial production license. Once you have purchased the license your Customer Area will display a new activation code. Simply start up Rapise, enter the new activation code and follow the process described in section 2.2 or 2.3. If you want to upgrade your license before the demonstration license is expired, you need to click on the menu Help > Activation : This will bring up the Activation dialog box: Click on the Enter Activation Code button and then follow the steps in 2.3 or 2.4 to activate the product with the new production license.","title":"Upgrading from Demo License"},{"location":"Manuals/Rapise_Installation_Guide/#transferring-to-another-computer","text":"Sometimes you need to transfer your Rapise license from one computer to another, or the computer it's installed on needs to be rebuilt. In either case, it's important that you first deactivate the product from the current computer, otherwise you will be prevented from activating the product on the new / rebuilt computer. To deactivate your current installation, you need to click on the Activation button in the Help section of the Rapise Test ribbon: This will bring up the Activation dialog box: Click on the Deactivate button and activation system will contact our activation server, process the deactivation code and deactivate the license. If you visit the Customer Area of our website, you will see that it is listed as deactivated, with the option to activate it now available: Note: If you have any problems deactivating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem.","title":"Transferring to Another Computer"},{"location":"Manuals/Rapise_Installation_Guide/#legal-notices","text":"This publication is provided as is without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. This publication could include technical inaccuracies or typographical errors. Changes are periodically added to the information contained herein; these changes will be incorporated in new editions of the publication. Inflectra\u00ae Corporation may make improvements and/or changes in the product(s) and/or program(s) and/or service(s) described in this publication at any time. The sections in this guide that discuss internet web security are provided as suggestions and guidelines. Internet security is constantly evolving field, and our suggestions are no substitute for an up-to-date understanding of the vulnerabilities inherent in deploying internet or web applications, and Inflectra \u00ae cannot be held liable for any losses due to breaches of security, compromise of data or other cyber-attacks that may result from following our recommendations. The section of the manual that describes modifying the Windows System Registry (\"Registry\") should only be attempted by experienced Windows administrators who are familiar with its organization and contents. Inflectra\u00ae cannot be held liable for any losses due to damage to the system registry made by inexperienced personnel. SpiraTest\u00ae, SpiraTeam\u00ae, Rapise\u00ae and Inflectra\u00ae are either trademarks or registered trademarks of Inflectra Corporation in the United States of America and other countries. Microsoft\u00ae, Windows\u00ae, Explorer\u00ae and Microsoft Project\u00ae are registered trademarks of Microsoft Corporation. All other trademarks and product names are property of their respective holders. Please send comments and questions to: 1 2 3 4 5 6 Technical Publications Inflectra Corporation 8121 Georgia Ave Suite 504 Silver Spring, MD 20910 U.S.A. support@inflectra.com","title":"Legal Notices"},{"location":"Manuals/Rpa/","text":"Robotic Process Automation \u00b6 Since version 6.3 Rapise includes RPA Monitor . RPA Monitor runs agents based on configuration specified in a JSON file (usually rpa_config.json ). This file has the following structure: { \"name\" : \"Name of RPA Scenario\" , \"agents\" : [ { \"id\" : \"unique id of the agent\" , \"description\" : \"purpose of the agent\" , \"type\" : \"RpaFolderMonitor|RpaQueue|RpaTimer\" , \"options\" : { // Op t io ns speci f ic f or t he age nt t ype } } // o t her age nts ] } RPA Monitor supports different types of agents. Agent Types \u00b6 RpaQueue \u00b6 Any scenario must have a queue that will process commands triggered by other agents. Queue specification is always the same: { \"id\" : \"rpa_queue\" , \"description\" : \"Queue for managing RPA communication\" , \"type\" : \"RpaQueue\" , \"options\" : { } } The queue ensures that commands are processed sequentially and no more than one Rapise test is executed at the same time. RpaFolderMonitor \u00b6 This type of agent monitors a specific folder and triggers actions when new items are created, changed or deleted in this folder. Example: { \"id\" : \"pdf_folder_monitor\" , \"description\" : \"Monitors folder for new PDF files\" , \"type\" : \"RpaFolderMonitor\" , \"options\" : { \"folder\" : \"c:\\\\Demo\\\\RPA\\\\Invoices\" , \"filter\" : \"*.pdf\" , \"events\" : [ { \"name\" : \"created\" , \"command\" : \"c:\\\\Demo\\\\RPA\\\\processinvoice.cmd\" , \"args\" : \"{file_name}\" } ] } } Supported event names: created changed deleted Placeholders for triggered command arguments: {file_name} - full path of an item. RpaTimer \u00b6 Timer agent triggers a command on regular basis. Example: { \"id\" : \"rpa_email_checker\" , \"description\" : \"Email checker\" , \"type\" : \"RpaTimer\" , \"options\" : { \"command\" : \"c:\\\\Demo\\\\RPA\\\\checkemail.cmd\" , \"args\" : \"\" , \"interval\" : 20000 } } Timer interval is specified in milliseconds. Launching RPA Monitor \u00b6 From Command Line \u00b6 \"<Rapise Bin Folder>\\RPAMonitor.exe\" \"<path to JSON file with configuration>\" Usually <Rapise Bin Folder> is C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin Example: \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RPAMonitor.exe\" \"c:\\Demo\\RPA\\rpa_config.json\" From Rapise Menu \u00b6 Use menu Tools > RPA Monitor . Rapise will search for rpa_config.json in the current test folder and its parent folders. Most nested rpa_config.json will be passed to the RPA Monitor. Running Spira Test Case \u00b6 If you want to run a Rapise test linked to Spira (to collect execution results in Spira) you may trigger Rapise Launcher in minimized mode by passing project and test set id to it. The test set should contain the test case you want to run. -minimized switch tells RapiseLauncher to not show up on screen. Example: \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RapiseLauncher.exe\" -testset:37 -project:8 -minimized See Also \u00b6 RPA Demo using Rapise and Dynamics NAV (video) Sample RPA Framework on GitHub RPA Whitepaper","title":"Robotic Process Automation"},{"location":"Manuals/Rpa/#robotic-process-automation","text":"Since version 6.3 Rapise includes RPA Monitor . RPA Monitor runs agents based on configuration specified in a JSON file (usually rpa_config.json ). This file has the following structure: { \"name\" : \"Name of RPA Scenario\" , \"agents\" : [ { \"id\" : \"unique id of the agent\" , \"description\" : \"purpose of the agent\" , \"type\" : \"RpaFolderMonitor|RpaQueue|RpaTimer\" , \"options\" : { // Op t io ns speci f ic f or t he age nt t ype } } // o t her age nts ] } RPA Monitor supports different types of agents.","title":"Robotic Process Automation"},{"location":"Manuals/Rpa/#agent-types","text":"","title":"Agent Types"},{"location":"Manuals/Rpa/#rpaqueue","text":"Any scenario must have a queue that will process commands triggered by other agents. Queue specification is always the same: { \"id\" : \"rpa_queue\" , \"description\" : \"Queue for managing RPA communication\" , \"type\" : \"RpaQueue\" , \"options\" : { } } The queue ensures that commands are processed sequentially and no more than one Rapise test is executed at the same time.","title":"RpaQueue"},{"location":"Manuals/Rpa/#rpafoldermonitor","text":"This type of agent monitors a specific folder and triggers actions when new items are created, changed or deleted in this folder. Example: { \"id\" : \"pdf_folder_monitor\" , \"description\" : \"Monitors folder for new PDF files\" , \"type\" : \"RpaFolderMonitor\" , \"options\" : { \"folder\" : \"c:\\\\Demo\\\\RPA\\\\Invoices\" , \"filter\" : \"*.pdf\" , \"events\" : [ { \"name\" : \"created\" , \"command\" : \"c:\\\\Demo\\\\RPA\\\\processinvoice.cmd\" , \"args\" : \"{file_name}\" } ] } } Supported event names: created changed deleted Placeholders for triggered command arguments: {file_name} - full path of an item.","title":"RpaFolderMonitor"},{"location":"Manuals/Rpa/#rpatimer","text":"Timer agent triggers a command on regular basis. Example: { \"id\" : \"rpa_email_checker\" , \"description\" : \"Email checker\" , \"type\" : \"RpaTimer\" , \"options\" : { \"command\" : \"c:\\\\Demo\\\\RPA\\\\checkemail.cmd\" , \"args\" : \"\" , \"interval\" : 20000 } } Timer interval is specified in milliseconds.","title":"RpaTimer"},{"location":"Manuals/Rpa/#launching-rpa-monitor","text":"","title":"Launching RPA Monitor"},{"location":"Manuals/Rpa/#from-command-line","text":"\"<Rapise Bin Folder>\\RPAMonitor.exe\" \"<path to JSON file with configuration>\" Usually <Rapise Bin Folder> is C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin Example: \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RPAMonitor.exe\" \"c:\\Demo\\RPA\\rpa_config.json\"","title":"From Command Line"},{"location":"Manuals/Rpa/#from-rapise-menu","text":"Use menu Tools > RPA Monitor . Rapise will search for rpa_config.json in the current test folder and its parent folders. Most nested rpa_config.json will be passed to the RPA Monitor.","title":"From Rapise Menu"},{"location":"Manuals/Rpa/#running-spira-test-case","text":"If you want to run a Rapise test linked to Spira (to collect execution results in Spira) you may trigger Rapise Launcher in minimized mode by passing project and test set id to it. The test set should contain the test case you want to run. -minimized switch tells RapiseLauncher to not show up on screen. Example: \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RapiseLauncher.exe\" -testset:37 -project:8 -minimized","title":"Running Spira Test Case"},{"location":"Manuals/Rpa/#see-also","text":"RPA Demo using Rapise and Dynamics NAV (video) Sample RPA Framework on GitHub RPA Whitepaper","title":"See Also"},{"location":"Manuals/kb/","text":"Knowledge Base \u00b6 We update this list regularly. For the most recent list of KBs please navigate to Inflectra Knowledge Base KB636 Silent Installation of Rapise for CI/CD \u00b6 Sometimes you need to perform unattended installation of Rapise for test execution only. It may be a part of automated test execution step executed by CI/CD pipeline. Here is the snippet. KB635 Create an incident in Spira from Rapise test \u00b6 In some cases a test may automatically determine that it's failure is definitely caused by a bug in software under test. In this case the test may create an incident in Spira using Spira.CreateIncident action. Requires Rapise 7.2+. KB634 Comparing Web Page to Text or Word File \u00b6 Sometimes you need to validate the whole page text. This sample demonstrates usage of plain text or MSWord file for this purpose with some help of myers-diff npm module KB631 Reading DOM element style property \u00b6 Sometimes we need to get runtime property for the element. For example, we need to get a background color to know that element is visually highlighted for a user. This topic shows how it may be done with Navigator.ExecJS. KB623 Fix DPI scaling for RDP connections to Windows VMs \u00b6 If you connect to a Windows VM via RDP and see that all fonts are very small and it is hard to read text on screen then this article is for you. If you can access the VM without RDP then you may change scaling via Display Settings in Windows and thus make text larger. But if this VM is Azure or AWS hosted VM then you may see a message: the display settings can't be changed from a remote session. KB608 What Blocked status means for a Test Run \u00b6 When you run a test with Spira (via RapiseLauncher) you may get a Blocked status for a test run. It is displayed in the Test Runs view and Test Sets view both in Spira and Spira Dashboard in Rapise. KB603 The 2021 release wave 2 for Dynamics 365 for Sales \u00b6 The 2021 release wave 2 for Dynamics 365 contains hundreds of new features across Dynamics 365 applications. If you are using Rapise to test a Dynamics 365 for Sales instance you may be affected by the coming changes. To help you update existing tests we summarized differences (important for UI automation) between old and new versions of Dynamics 365 for Sales. KB602 Auto start/stop Azure VM to run UI tests \u00b6 If you are using a Microsoft Azure VM to run UI tests and do not want to keep the VM always running (to save budget) you may configure automatic start/stop and auto logon for the machine. KB600 Change the default Screenshot folder \u00b6 If a test is configured to capture screenshots during playback - Rapise puts then into Reports folder in the working directory of the test. If you want to copy screenshots to a different location or instruct Rapise to put images into a different folder - check out this article. KB599 RVL Toolbox to boost productivity in writing tests \u00b6 If you are new to Rapise or use it occasionally you may not know or remember all the cool objects and actions to use in your tests. With RVL Toolbox you can get access to required information by searching for it without leaving the RVL Editor. KB598 Using RVL Merge Utility \u00b6 Sometimes we need to do Diff and Merge operations when working with external Source Control systems (git, svn, etc). This utility (ExcelMerge) will enable this functionality. KB597 Using Regular Expressions in Object Locators \u00b6 Sometimes application components change and we need more flexibility when creating locators. You may use regex: prefix for locator components to make it more flexible. Very similar approach applies to Managed (DotNet Forms), Java and UI Automation locators. KB596 SoftAssert in Rapise \u00b6 Sometimes you need more control on whether to stop execution when an assertion fails. Assertion that does not stop execution is Soft Assertion. With soft assertions you may force it to fail later when all expected errors are collected or keep running until the very end. KB594 Returning Values from RVL sheets \u00b6 Sometimes you need to return a value or a set of values from RVL.DoPlaySheet or RVL.DoPlayScript calls. This sample shows you how. KB588 Using SeeTest Instrumented Mode \u00b6 If you are testing a native mobile application using SeeTest you have an option to switch to NATIVE_APP_INSTRUMENTED context and record/playback tests in it. KB586 How to get AWS Secret from Rapise \u00b6 Learn how to query AWS Secret from Rapise. Requires Rapise 6.7+ KB585 How to run cross-browser tests on AWS Device Farm \u00b6 Learn how to configure Rapise to run cross-browser tests on AWS Device Farm. Requires Rapise 6.7+ KB584 Rapise and Microsoft Defender Antivirus \u00b6 If you use Microsoft Defender Antivirus to protect your system then you may need to perform certain steps to use Rapise effectively. KB583 Rapise and Avast Antivirus \u00b6 If you use Avast Antivirus to protect your system then you may need to perform certain steps to install and use Rapise. KB581 Rapise 6.6 Built In Help Fix \u00b6 Rapise help system has been updated to latest template introducing new search and navigation capabilities. The side effect is that is it not compatible with default HTML-based viewer engine and may look corrupted. KB574 Advanced search for elements in desktop applications \u00b6 If a desktop application is dynamic and recorded locators do not work then there is a way to search for elements using UIAObject.DoFindElementByCondition and UIAObject.DoFindElementsByCondition.Requires Rapise 6.6+ KB572 Specifying Timeout for REST Calls \u00b6 Rapise REST module uses 100seconds timeout by default. Since Rapise 6.6 you may make it longer or shorter. KB570 Easy Way to Dump Sheet Variables \u00b6 We sometimes need to dump diagnostic information to the report. It may be values of some or all local variables. KB569 Making Negative API Tests \u00b6 By default Rapise reports an error when REST service request fails. With the negative test the request should fail, so we want the reporting to behave differently. KB568 How to rename a Rapise test linked to a Spira Test Case \u00b6 It is a 3 step process: 1. SaveAs or Clone the test with a new name 2. Save it to Spira 3. Delete old test copy from Documents module in Spira (optional) KB566 Merge Strings in RVL \u00b6 Here we show a few examples on how to combine strings in RVL. KB565 Customize Rapise Report Messages \u00b6 Sometimes we need to override the message written to the report when some action is performed. KB561 Using Free Apple Development account to test on mobile devices \u00b6 It is possible to use Free Apple Developer account for iOS testing. But it requires some knowledge and time to setup. KB558 Mobile testing with Experitest SeeTest \u00b6 Connecting to the mobile devices hosted by SeeTest is easy. Learn how from this article. Requires Rapise 6.5+. KB556 RapiseChromeExtension version 3 \u00b6 Along with Rapise 6.5 we are releasing an update to the RapiseChromeExtension. The new version (v3) is back compatible. It means that older versions of Rapise should work with it without issues. Rapise 6.5+ will require you to update the extension if you have RapiseChromeExtension v2. KB555 Recording Web and Desktop actions into the same test \u00b6 Starting from Rapise 6.5 you may record both Web and Desktop actions into the same test. KB553 Basic authentication in Web tests \u00b6 Legacy Web applications still may use basic authentication. So when you navigate to an application URL the browser shows a dialog with Username and Password fields to enter. The content of this dialog is not a Web content so recording and playback in a Web test will not work. KB551 Searching for a Web element by text that contains non-breaking spaces \u00b6 Are you writing XPath to find an element using its inner text but it does not work? Most likely the text contains non-breaking spaces. This situation is described in detail in our UI Test Automation Playground. KB545 How To Read Environment Variable in Rapise \u00b6 Here is a number of ways of doing it. KB543 Values passed from RapiseLauncher to Rapise \u00b6 When a test is executed by RapiseLauncher it may access key properties of the test run, custom test set properties and test case parameters. Requires Rapise 6.4.19.16+ KB541 Automating TinyMCE 2020 \u00b6 The world moves forward and our older KB articles related to TinyMCE became outdated. In this article we present a modern way (as of year 2020) of automating TinyMCE controls. KB540 Unified Service Desk with Chrome for Hosted Controls \u00b6 If you want to use Unified Service Desk with Chrome and test it with Rapise you need to configure it properly. KB539 Working with Rapise AWS SaaS Images \u00b6 Rapise is available as a SaaS solution. Here we describe step-by-step guide how to make several Rapise cloud instances ready for test execution. KB538 Increasing the Size of Rapise Images in Spira Reports \u00b6 When you run Rapise automated tests using RapiseLauncher the system will automatically embed the images from Rapise into the various test cases and test run reports. By default the report format has relatively small images so that they can fit easily into the tables of expected result and actual results. However some users have asked for ways to make the images bigger. KB537 Using Extra Columns in RVL to control screenshots \u00b6 Sometimes we need more fine-grained control over screenshots. Here we describe the way of using H column for defining which actions will have what kind of screenshot captured. KB533 Make screenshots on failure only \u00b6 Automatic screenshots on every test step may occupy too much space. Learn how to make a screenshot on failure only. KB532 How to set path for local browser and mobile profiles \u00b6 Since version 6.3 Rapise has support for local browser and mobile profiles. Using it you may package browser profiles along with tests. What if you want to reuse browser profiles between different projects? Or have sets of profiles for different situations? You may now set path to profile directory using a special global variable. Supported in Rapise 6.4+ KB531 Handling Grouped Data in Rapise \u00b6 Sometimes we need to process data in groups or even in hierarchical way. Here we will show how to make it using plain table and loop in RVL. KB530 Why Does Rapise Use DoXXXX Naming for Methods \u00b6 A customer asked us why Rapise uses Pascal Case names for the various operations, functions and properties, as well as the reason why operations are prefixed with a \"Do\" action name. KB529 Using GoToMeeting for Support Session \u00b6 Learn how to connect to a support session and how to enable Rapise Expert to remotely control your Rapise instance. KB528 Import JUnit XML Report into Rapise \u00b6 Some unit testing tools produce reports in JUnit XML format. Here we show how to import it into Rapise test report. KB526 How to disable recording URLs \u00b6 When you do recording of test steps for a Web application - Rapise by default captures page URLs and stores them in the object repository. Learn how to disable URL recording from this article. Requires Rapise 6.4+ KB522 Windows Calculator \u00b6 For Rapise training purposes we may need a simple desktop application that can be executed on any Windows version. What can be simpler than Windows Calculator? KB519 Reading values from .properties files in Rapise \u00b6 .properties is a file format mainly used in Java related technologies to store the configurable values. Here we show how to work with it in Rapise. KB518 JavaScript version used by Rapise \u00b6 Below we provide the information on JavaScript version used by Rapise. KB517 How to disable Google Chrome Software Reporter Tool \u00b6 We've seen systems where Software Reporter Tool (which is a part of Google Chrome) may produce very high CPU load and make system suspending/resuming processes randomly. Because of this Rapise may not be able to connect to Chrome for recording/playback. In fact many things may go wrong when CPU load is 100%. KB516 The pipe is being closed message from Rapise installer \u00b6 When you install Rapise on some systems you may get an error message: 0x800700e8 - The pipe is being closed KB515 Checking String Length in RVL \u00b6 If you need to get the size of the string, then here is a couple of possible ways for doing it. KB514 How to Press Alt, Shift, Ctrl or Win key Alone \u00b6 SendKeys is good for making key combinations, but this way does not work when you need to press special key. Here is a useful workaround. KB508 Compare Images in JavaScript \u00b6 To compare images in JavaScript you may use Tester.AssertImage. KB507 UIAutomation2 Locator \u00b6 Rapise 6.3 includes an experimental feature - new UIAutomation2 locator for UIAutomation based desktop testing. Rather than specifying a path from the element tree root to the element this locator relies on built-in ability of UIAutomation to search for elements based on property values. KB506 How to define and use a dynamic Web locator \u00b6 Imaging you have a table with dynamic data on the page. It is not possible to learn every cell. But it is possible to parameterize the locator of a cell and access cells you need during test playback. KB504 Referring Repository Objects from Maps \u00b6 Sometimes you need to specify object and data for it in the map. Here we will show how to make it using Rapise built in maps and available APIs. KB503 Accessing svg elements via XPath \u00b6 By default straight forward XPath to SVG primitives will not work. So XPath ending like .../svg[2]/path will fail. Here is a workaround. KB502 Passing Map as a Parameter into RVL Sheet \u00b6 This topic covers more detailed description on how to pass map from one Sheet to another in RVL KB501 Passing Sub-Test Parameters \u00b6 Here we will cover several ways of passing parameters and returning values from Sub-Tests. KB499 How to set size of a browser window \u00b6 To ensure that web tests always run on a browser window of a specific size you may use different techniques. KB497 Connecting to PostgreSQL from Rapise \u00b6 If you need to connect Database object to PostgreSQL database follow these simple steps. KB496 Connecting to MySQL from Rapise \u00b6 If you need to connect Database object to MySQL database follow these simple steps. KB493 Rapise Data Generator \u00b6 Sometimes you need to feed your application with demo data that is human-readable but still random. Here is such a generator for Rapise. KB492 Calling NodeJS script from Rapise \u00b6 NodeJS provides a lot of unique features and plethora of features implemented in npm packages. Here we describe how to combine such a script with a Rapise test. KB489 Headless Firefox Testing \u00b6 Firefox 56+ supports headless mode on Windows. You can use it to Run Rapise tests via Selenium integration. KB488 Rapise Objects and Files Metadata for Code Completion \u00b6 Rapise scripts and engine are mostly implemented in JS. Some people prefer to use 3 rd party editors for scripting. This is helpful when integrating Rapise tests into bigger development pipeline together with other scripts and config files. Here we explain where information about objects and types is provided for Code Completion/Intellisense support in 3 rd party editors. KB487 How to Do Mouse Wheel Scroll in Rapise \u00b6 Some controls require mouse wheel input. Here is how to do it. KB486 Automatic learning of objects in a Java application \u00b6 If you prefer writing test steps manually in JavaScript then it might be helpful to automatically learn all child objects of a Java application to make them available for scripting. KB485 How to Enable JRE Accessibility Only for Tests \u00b6 By default Rapise is using Java Accessibility Bridge by changing some Java Runtime Environment (JRE)-wide configuration files. So all applications using same JRE will use the modified version. If your goal is to have Accessibility only for test runs, then there is another way of doing that. KB484 Comparing Parts of Images \u00b6 Sometimes compared images partially differ due to some dynamic part. Here we show how to do partial comparison in this case. KB483 Renaming Objects in Rapise \u00b6 Good object naming is important for test script clarity and readability. Default names are detected during record/learn session and results sometimes are cumbersome, obscure or irrelevant. Here we show how to give proper names to objects. KB482 How to get contents of the HEAD element in a DOM \u00b6 In this article we will get contents of the HEAD element to get the links to all referenced stylesheets. It may be useful if you plan to verify that a set of CSS did not change for a page. KB479 Rapise and Citrix/RDP \u00b6 We are getting a lot of questions on how to use Rapise with Citrix and remotely accessed VMs . Here is the answer. KB477 Inspecting custom UI control with UI Automation Spy \u00b6 UI Automation is a default technology for testing desktop applications on Windows. If your application is not .NET or Java then Rapise will turn on UI Automation library during recording. If some elements in your application are not recognized or there are issues with playback of recorded steps then most likely your application is using custom UI controls. You may inspect those controls and send information to Rapise support team to get recommendations on how to proceed with testing. KB475 How to Get All Links on the Page with Rapise \u00b6 Sometimes you need to go through all links to check something. Here are two ways: JS and RVL of doing it with Rapise. KB473 Viewing Rapise logs in Spira \u00b6 When you execute Rapise tests via Rapise Launcher - test reports and logs are automatically uploaded to Spira. But verbose level is always set to Level 1 by Rapise Launcher. If you need more detailed log set verbose to 2 or 3 in test case properties. KB472 Read PDF Text wih Rapise \u00b6 Sometimes you need to check that some text is available in the PDF document. Sometimes you need to extract some value from it. So you need access to plain text content of the document. Here we explain how to do it with Rapise. KB470 How to run a PowerShell script in Rapise test \u00b6 To run a PowerShell script use Global.DoLaunch action. KB468 Using Rapise with Java Web Start Applications \u00b6 Rapise supports testing of Java applications. In the case that application is launched using Java Web Start (JWS) additional steps are needed to successfully test an application. KB466 How to deal with custom UI Automation controls \u00b6 This article is for those who test a desktop application via UI Automation library. Since desktop applications are frequently built using UI controls from different vendors and the number of such controls available on the market is pretty big (> 1k) - Rapise may not have out-of-the-box support for some controls in your application. For such cases Rapise offers a low level API to navigate UI Automation tree of elements inside an application and read/write element properties. In this tutorial we'll show how to use this API and quickly add minimal support for a custom control. KB465 How to check if web element is really visible on screen \u00b6 Checking if element is visible on screen may be a tricky task. It's usually not a problem in manual testing but there are nuances when you do test automation. KB462 How to check if a web dropdown element has specific option or not \u00b6 If a test needs to verify existence or absence of a specific option in a dropdown you can do it via a simple function presented below. KB458 How to start Rapise Launcher on Windows Boot \u00b6 Windows may reboot because of various reasons. If you use a machine to run Rapise tests on regular basis than you want Rapise Launcher to be started automatically after system reboot. The most reliable method that works with any Windows edition is to use Task Scheduler. KB457 How to organize custom code in User.js \u00b6 Every test has a User.js file and it is a place to put custom code and functions. This code must follow a few rules. KB453 Working Directory of a Test and Relative Paths \u00b6 When Rapise starts execution of a test it sets working directory. If a test refers to a file using a relative path then the absolute path is calculated using the working directory. KB448 How to create a Rapise web object from XPath \u00b6 In some cases it may be convenient to construct Rapise Objects dynamically rather than capture in advance with record/learn. In Web tests you can do it via Navigator.Find. KB446 Getting browser console logs \u00b6 In some cases it may be useful to analyze browser-side logs. For example, if you are using Navigator.ExecJS action. KB444 How to get title of a window \u00b6 In this short topic we describe how to get the value of a window title. The way depends on the application type. KB443 Closing application under test from Rapise \u00b6 There are different techniques one can use to close the application being tested from Rapise. The method to choose may depend on the application type. KB442 Troubleshooting Rapise Install \u00b6 If you install Rapise on non-vanilla system, e.g. old workstation with a lot of other software, especially with anti-virus and development tools, it may end-up in a state when some components are not registered successfully and some files are blocked. In this article we describe symptoms and ways to cure. KB439 Troubleshooting Rapise Uninstall \u00b6 In the unlikely case of unsuccessful deinstallation of Rapise (e.g. if computer power switched off during deinstallation, or Windows Installer process terminated) there is a way to manually fix the system and complete interrupted deinstallation process.. Automatic uninstall may no longer properly work and leave files in Program Files folder. KB436 Handling Toast Messages \u00b6 The toast message is like an alert box that is only shown for a couple of seconds when something happens (i.e. when the user clicks on a button, submits a form, etc.). This article describes how to deal with toast messages in Rapise. KB434 How to Send Special Keys to Selenium Targets \u00b6 Sometimes you need to press Tab, Return, Backspace to the web page. Here is how you may do it through WebDriver. KB433 Using Extra Columns in RVL to add Report Attributes \u00b6 You may use extra RVL columns for your own purposes. In the simple case for storing additional information (notes, links). In more advanced cases extra columns may affect script behavior: add report attributes, control screenshots, control custom actions, assign variable values etc. Here we provide live example of one of such use-cases. KB432 Writing data to an Excel spreadsheet \u00b6 In this article we describe how to write data to an external Excel spreadsheet during test playback. Both RVL and JavaScript examples are given. KB431 Multiple Object Locators \u00b6 Sometimes object location is unstable. The same object may be identified by different location path or XPath depending on application version or state. KB430 How To Pass Shift+Control+F12 or Shift+Control+F11 from Rapise \u00b6 Global.DoSendKeys is a way to to that, but there is also a little trick required to make it happen. KB429 How to deal with dynamic window titles \u00b6 Desktop applications may use window titles to show important information to a user. In some cases the title contains subject of a displayed entity or time. Since Rapise uses window title while searching for an object during playback - the search may fail. This complication may be resolved if you replace recorded windows title with a regular expression. KB428 How to relearn an object \u00b6 If an object can not be found at playback and it is obvious that object location has changed because of application update (differs from the case when location is dynamic!) then the best way to fix the test is simply relearn the object. KB427 How to master a dynamic locator with RVL \u00b6 There are situations when object location attribute depends on the object data and it is not possible to record/learn all such objects in advance. In this case it may be convenient to calculate object location at playback time using FormatString and SetLocatorOpts actions of the RVL global object. KB422 How to save/load DOM tree in Web Spy \u00b6 Better to see something once than to hear about it a thousand times. If a Web element can not be found on the page using given XPATH expression and you do not know why - you have an option to save the DOM tree of the page and ask someone else with Rapise for assistance. Here is how. KB421 How to save type information for UI control in Rapise Spy \u00b6 Rapise supports many standard UI controls out-of-the-box. And there are even more custom UI controls that are not supported. This is why Rapise has a well-defined way of adding extensions. To add support for a custom control first it makes sense to Spy on it. If you are dealing with Managed or Java applications you can Save Type Information for the control and also save UI tree structure/properties to a file. Send this information to Rapise team to get an advice on how to add support for the new control. KB420 Firefox 64 Compatibility \u00b6 Once you have your Firefox updated to version 64 Rapise may have problems connecting to it. Here is a quick workaround until new release of Rapise addressing the problem shows up. KB418 Is it Possible to Automate an iOS Web App using Rapise? \u00b6 Yes, in general, Rapise can automate most web applications using mobile Safari running on iOS (either on a real or simulated device). However there are some limitations. KB417 How to manipulate browser cookies using Selenium API in Rapise \u00b6 If you run Rapise tests via Selenium WeDriver you may need to manipulate browser cookies. Learn how from this post. KB416 WPF Calendar and DatePicker \u00b6 It is tricky do deal with WPF calendar control. Here we introduce a number of supplementary functions to copy in your project and use to modify and read Calendar and DatePicker data. KB415 Is it Possible to Automate an iOS App Store App using Rapise? \u00b6 We often get asked this question: \"We have Rapise and want to automate a native iOS app that is available on the application store\", can we do it? KB412 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX \u00b6 Many views in Dynamics AX have several collapsible panes: General, Addresses, Contact information, etc. They are also known as Fast Tabs. Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+ KB411 If recording of actions in Dynamics AX or Dynamics NAV does not work \u00b6 More and more computers are equipped with High DPI displays. Though high resolution looks beautiful it may bring some issues. One of them is broken recording in Rapise. KB408 How to upgrade Rapise to a newer version \u00b6 Rapise is evolving product and we release new versions of it from time to time. If you plan to upgrade your copy of Rapise follow these simple steps. KB407 How to emulate keyboard and mouse via Selenium API in Rapise \u00b6 Though Rapise can execute it's native recorded tests via WebDriver - some users prefer to write their tests in pure Selenium API. In this post we describe how to perform complex mouse and keyboard sequences via Selenium API in Rapise tests. KB406 Rapise Start Page Layout Does Not Display Correctly \u00b6 Sometimes when you first install and open Rapise, the Start Page does not display correctly. This article explains the cause and solution to fix the issue. KB396 Mapping Spira Requirements to Test Steps in Bulk Using Excel and Rapise \u00b6 Of the unique needs of a requirements and test management system when working in the Defense industry, specifically when designing, building, and testing mission systems, is the ability to link individual test steps to the requirements. Since v5 of SpiraTest, this has been possible inside the Spira user interface, however many customers have been looking for a way to map test steps to requirements in bulk using Excel. KB395 How to configure Mobile Profile to automatically grant Android application permissions on install \u00b6 When Appium installs an application at the beginning of a test session - Android may ask for permissions (e.g. access to media files, camera, etc.). Until such prompt is dismissed - Main activity is not launched. It prevents the test from proceeding. Learn how to configure the Mobile Profile to automatically grant required permissions on install. KB394 How to use specific version of Chromedriver with Appium \u00b6 In Mobile Spy of Rapise when switching from NATIVE_APP to WEBVIEW context you may see an error message: Chrome version must be >= 55.0.2883.0 From this article you will learn how to fix this. KB393 DoClick() vs DoClick(x,y) \u00b6 When doing mouse click from Rapise it is sometimes need to use offset coordinates. You will learn: 1. When explicit coordinates are needed 2. How to determine them KB391 Creating a Purchase Order in Dynamics AX \u00b6 Learn how to break down a long scenario into manageable pieces in RVL. Creating a purchase order in Dynamics AX takes many steps: start PO process, enter basic details, fill order lines, approve, receive, invoice. In RVL you can create separate sheets to implement stages of a complex test. KB387 Display Intellisense for ActiveX and .NET Objects \u00b6 Sometimes when you are using Rapise, you have to use external ActiveX or .NET objects to perform specific actions. You can get Rapise to display intellisense for those objects. KB383 RPA Features of Rapise \u00b6 Robotic Process Automation (RPA) is well suited for processes that are clearly defined, repeatable and rules based. With Rapise you can create software robots that can do boring repetitive tasks and free employee time for more creative work. Below you will find a brief description of RPA tasks that Rapise can do. KB382 Android Testing Hints \u00b6 Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article. KB381 iOS Testing Hints \u00b6 Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article. KB380 How to insert an RVL step into Manual Test \u00b6 Sometimes it makes sense to automate certain steps of a Manual Test. If you prefer to implement automatic steps in RVL then include the AUTO helper function into your test. KB379 Processing registration Emails \u00b6 Common scenario: register a user and receive registration confirmation link by email. The most painless way for doing it. KB378 RPA - importing data into Dynamics AX \u00b6 If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics AX instance. You have a choice either to develop a software program that does the import via Dynamics AX API or you can create an automation script in Rapise. KB377 How to find an object in the object tree \u00b6 A test may contain a lot of objects. If you want to locate an object in the object tree you may use the filter box. KB376 What is object Location? \u00b6 When you record a test Rapise captures UI elements with which you interact and adds them as objects to the Object Tree of a test. Each object has a Type (Button, Text, Label, Tree, Grid, ...) and Location. Rapise uses Location attribute of an object to find it in the application during test execution. KB375 How to check that Rapise can find an object on screen \u00b6 When you execute a recorded test, sometimes, Rapise may not find some object on screen and display Object is not found error message in the report. If you see that the object is visible you can check if Rapise can find it or not without running the test. KB374 RPA - importing data into Dynamics NAV \u00b6 If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics NAV instance. You have a choice either to develop a software program that does the import via Dynamics NAV API or you can create an automation script in Rapise. KB372 How to save content of a table/grid into a spreadsheet file \u00b6 If you need to make a copy of data in a Table/Grid object - you may simply save it to Excel file with a single function call. KB371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library \u00b6 Working example of test framework designed to maximize flexibility and get the most from Rapise productivity features. KB367 Storing Values Across Test Cases and Sessions in Rapise \u00b6 Sometimes test set requires a value passing through the sequence of test cases. Good example is User ID assigned during sign it and then used in subsequent test cases. Another use case is when test case requires some input value that should always be unique. KB366 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV \u00b6 Many views in Dynamics NAV have several collapsible panes: General, Lines, Invoice Details, etc. They are also known as Fast Tabs. Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+ KB364 How to ensure that web element is visible before interacting with it? \u00b6 Sometimes an element on a web page may be invisible because it is out of a viewport. Real user scrolls a page vertically and horizontally to reach such an element. How to achieve same behavior with Rapise? KB363 How to define a profile for Web Application in Rapise \u00b6 Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for styling . There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this article you will learn how to define a profile for your web application. KB362 How to automate testing of Unified Service Desk for Microsoft Dynamics 365 \u00b6 Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD. KB361 Text Validation Does Not Always Fire on Angular4 Application \u00b6 Sometimes when you are testing an application written in Angular 4, the text box will not accept a value that is correct during playback (e.g. zip code is not in the right format) when you use DoSetText to set the value. KB360 Overriding Rapise Settings from SpiraTest \u00b6 Sometimes you want to override certain Rapise settings (e.g. the Command Interval) from within SpiraTest. For example you might to run one test set more slowly than other test sets because the environment is slower. This article explains how you can easily pass settings values from SpiraTest to Rapise. KB359 How to Install the Chrome and Firefox Extensions Offline \u00b6 By default, when you want to use Rapise to record and playback web tests using either Chrome or Firefox, you simply go to the appropriate web browser \"store\" and install the extension directly from the store. However sometimes you are testing web applications on a machine with no Internet Connectivity. KB358 Hot to disable \"Chrome is being controlled by automated test software\" message \u00b6 When you run a test with Selenium - Chrome profile the browser is launched with a warning message below the address bar. It can be disabled. KB357 Data-driven testing with spreadsheets and RVL \u00b6 Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes. You will also learn how to define data within a test and in external spreadsheet. KB354 How to override an action for an object type \u00b6 Rapise supports many types of objects in Web, Mobile and Desktop applications. And each object has a set of actions that can be applied to it. You may want to override behavior of existing action or add a new one. Learn how from this article. KB353 Rapise Doesn't Launch Because of Missing Windows Fonts \u00b6 If you don't have some of the standard Window fonts installed (e.g. Courier New), when you try and launch Rapise, it will fail to open correctly. This article provides information on the problem and solution. KB352 Converting Recorded Steps into Functions/Scenarios \u00b6 You have recorded some basic test scripts in Rapise, and now you want to easily extract the steps into a reusable function that can be called from the main test script. This article explains how you can do this for both RVL and JavaScript based tests. KB351 How to automatically enter user credentials into Windows Security dialog on Windows 10 \u00b6 Some test scenarios require running processes as different user or entering user credentials into Internet Explorer security prompt. Rapise can enter user credentials into Windows Security dialog on Windows 10 automatically. KB349 Recording tips for Dynamics NAV 2017 Web Client and Dynamics 365 Business Central \u00b6 Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test. KB347 How to record entering of data into Dynamics NAV tables \u00b6 Follow these simple rules to record entering of data into Dynamics NAV grids. For example, entering of new order lines into a Sales Order. KB344 Doing a SubString on a Database Value in Rapise \u00b6 When you try and do a substring on a value returned from a database, you may get an error about the object not supporting the property. KB343 How to scroll Dynamics NAV table vertically and horizontally \u00b6 Rapise 5.7+ performs scrolling automatically before clicking on a cell. Also there is DoScroll action that does explicit scrolling. In Rapise 5.6 and below use this simple function to scroll your Dynamics NAV table left, right, up, bottom. KB341 Jumping to the Definition of a User Function \u00b6 When you have a user defined function in Rapise, you sometimes want to jump to it. KB340 How to Do a Nested Loop with Rapise Visual Language (RVL) \u00b6 Sometimes you want to have multiple nested loops to test a set of test data (for example loop over a list of users, and for each user, loop over a list of browsers). In JavaScript you can use standard nested loops, this article explains how you can do the same using RVL. KB339 Where Does Rapise Log Errors? \u00b6 Sometimes when you are using Rapise, you see an error on the screen, or something doesn't work as expected. In that case, our support team will need a copy of the log file that is likely to contain the error message. This article explains how to get that log file. KB338 Dealing with Unexpected Popup Objects \u00b6 Some applications show unexpected popup windows. This could be feature announcements, update reminders, license expiration reminders, alerts, internal messengers and so on. Here we are going to show a solution for this problem. KB336 Ways to deal with flaky tests \u00b6 When you do UI test automation and create a big enough test coverage the probability of having certain portion of flaky tests increases. In many cases there is no reasonable way in terms of time and resources to mitigate all flakiness from the test coverage. In some cases even a flaky test may still be useful. KB335 What is UI Test Automation Framework? \u00b6 At Inflectra we think that UI Test Automation Framework is a set of tools with specific features that enables QA teams to develop and run tests, and effectively analyze test execution results. KB334 How to launch a browser in private mode? \u00b6 In some cases it makes sense to launch a browser in private mode to ensure exact same conditions every time you run a test. This helps to cope with such things as remembered accounts or pending sessions not disconnected by a previous test. Learn how to properly adjust browser profiles from this article. KB333 Installing Rapise Browser Extensions without Internet Access \u00b6 Normally you can install the add-ons for Chrome and Firefox directly from the browser's app store (just search for Rapise). This is the easiest option, and avoids the need to run the browsers in developer mode. KB331 How to Check if Rapise Can Test My Delphi Application \u00b6 In order for Rapise to be able to test a thick-client desktop application written using Delphi, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://edn.embarcadero.com/article/33642 This article demonstrates how to check your application to see if it supports MSAA. KB330 Compare two SpreadSheets in Rapise \u00b6 Sometimes you need to compare two tables. Here we introduce a function to compare two spreadsheets. KB328 Using Rapise Mobile with Browserstack \u00b6 BrowserStack supports automated browser testing via Selenium and Appium on real iOS and Android devices. Learn how to configure Rapise to connect to Browserstack via Appium. KB326 Windows Scripting Host Crashes When Playing Back Rapise RVL Script after Windows 10 Update \u00b6 Unfortunately, Windows10 has a nasty habit of frequently updating itself and then breaking existing applications. We found that the February 14 th , 2018 Windows10 update corrupted the Excel device driver that Rapise uses to access the RVL test script spreadsheet during playback. KB325 Running nightly tests with RapiseLauncher on VM with RDP \u00b6 It is common to use UI tests with RDP connected to remote VM. By default this works only while RDP window is open and client is connected. On disconnect remote session gets locked and UI becomes unavailable for the test. This topic covers a workaround. KB324 List Files from Folder in RVL \u00b6 Sometimes it is required to have list of files from some folder. Here we demonstrate how to get this list and how to iterate through it in RVL. KB323 How to launch a web browser in Rapise with a specific size \u00b6 Sometimes when recording a test against a mobile responsive web site, it is useful to be able to record on the local browser (before playing it back against a cloud service such as SauceLabs, Browserstack, etc.). However you want to always record using a specific browser window size. KB322 How to run cross-browser tests on BrowserStack \u00b6 BrowserStack enables testing of your website for cross browser compatibility on real browsers. Instant access to multiple desktop and mobile browsers. Learn how to configure Selenium profiles in Rapise to enable connection to BrowserStack services. Requires Rapise 5.3+ KB320 Using RVL Loop to generate sequence of file names \u00b6 We show how to do data generation for test scenario using RVL Variable loop in Rapise. This sample shows how to produce a sequence of filenames: FILE1.txt, FILE2.txt, FILE3.txt and so on. KB318 Troubleshooting the \"The Pipe is being Closed\" Error during Rapise Installation \u00b6 Sometimes when you try and install Rapise, you will see the error message \"The Pipe is Being Closed\", this article provides some solutions for this message. KB317 Read external Excel spreadsheet in RVL \u00b6 Attaching to external .XLS spreadsheet in RVL may be easily done in RVL by use of Range type of the Map. KB314 How to start Dynamics NAV client \u00b6 Check that Dynamics NAV client is installed on a machine and launch it if it is not started yet with this simple function. KB313 Testing Visualforce components in Salesforce \u00b6 Visualforce is the component-based user interface framework for the Force.com platform. Visualforce components can be tested with Rapise just like default Salesforce interface. KB312 Accessing DOM elements by Attributes in RVL \u00b6 It is possible to access such objects form RVL using one of the methods shown in this article. KB310 Custom Attributes for XPath Generation in the Rapise Web Spy \u00b6 Sometimes web applications use custom DOM attributes for internal purposes. XPath locators containing those attributes are sometimes more stable and resilient. Rapise contains features intended to simplify utilization of such attributes. KB308 How to include file with common function in test \u00b6 Sometimes it is useful to have common functionality and variables in a separate JavaScript source file. This topic explains the steps to do it. KB307 How to Check if Rapise can Test my Qt Application \u00b6 In order for Rapise to be able to test a thick-client desktop application written using Qt, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://doc.qt.io/qt-5/accessible-qwidget.html This article demonstrates how to check your application to see if it supports MSAA. KB305 How to run a program as a different user \u00b6 Sometimes a test needs to run a process as a different user (not the logged in user executing Rapise). It is not possible to use runas command for this purpose because it forces a user to type a password manually. From this short article you will learn how to reach the goal. KB304 Using Global.DoEncrypt and Global.DoDecrypt to Hide Passwords \u00b6 Sometimes passwords need to stay secure. Here are simple steps on how to hide some information in Rapise. Here we will demonstrate usage of Global.DoDecrypt and Global.DoEncrypt available since Rapise 5.4. KB303 How to run CMD shell commands \u00b6 In some cases a test needs to run a Windows shell command (e.g. dir, ipconfig, gpresult) and capture/parse output. Learn how to do this in Rapise from this short article. KB302 About Rapise ImageFinder \u00b6 Sometimes the goal is to find specific image on the screen. It may be special symbol, map pointer or an icon. This topic contains ImageFinder and sample test demonstrating its capabilities. KB301 Ways to slow down test execution \u00b6 There are several types of delays one can use to slow down test execution. Implicit Explicit fixed Explicit with timeout KB300 Running Rapise GUI Tests with Jenkins \u00b6 Recommended approach is to use SpiraTest and RapiseLauncher designed for this task. In some cases it is not an option and we need to execute a test directly. KB299 Installing Rapise on PC without Internet Access \u00b6 In general Rapise installs on disconnected PC without problems. However, if PC contains old version of windows without most recent root certificates then installer may fail due to inability to check application authenticode certificate. This topic explains a workaround. KB294 How to Measure Operation Performance in Rapise \u00b6 Sometimes we need to track the time taken by an operation. This KB contains suggested approach for Rapise and working sample. KB293 How to store Rapise tests in Git and run them with SpiraTeam \u00b6 In some cases it is convenient to store tests in the same Git repository where source code of an application under test is located. For example, if you are using Visual Studio Team Services. From this article you will learn how to execute Rapise tests stored in a Git repository with SpiraTeam and leverage the power of SpiraTeam reporting and analysis features. KB292 Dynamics NAV Support in Rapise \u00b6 In this guide we describe how to master tests for Dynamics NAV application using Rapise. Rapise provides a complete automated testing solution that can handle all of your technologies in one environment. With support for web, mobile and desktop applications and a wide variety of third-party component libraries. Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries. KB291 How to Enable/Disable screenshots during script execution \u00b6 Sometimes we need to disable screenshots for a while (during some long loop) or when doing some specific operations. Here we show how to do it. KB290 How to create Spira-friendly Test Set with shared functions and files \u00b6 The notion of the integrated test framework usually implies common functions and shared data between tests. Here we provide sample configuration making sharing Spira-friendly. KB289 How Object Recognition Works in Rapise \u00b6 This article contains of overview of object recognition by UI automation tools in general and its implementation in Rapise in particular. KB288 Search by Name, Text, XPath or Attribute on the Web Page \u00b6 It is common task to search for an element by its text. In some cases it is the fastest way to find one. This approach works in web browsers and selenium targets. KB285 Using bytext and byname Locators in WinForms \u00b6 byname and bytext is an universal feature common for Web, UI Automation and WinForms (Managed) targets. Here we consider WinForms (.NET) desktop applications. KB284 Model-Based UI Testing \u00b6 Model-based testing is widely used for a long time for testing software systems. Typical application fields include telecommunication protocols, embedded software, server software, automotive and reactive systems. What about model-based testing of desktop, web and mobile GUI applications? KB283 Using bytext and byname locators in UI Automation \u00b6 byname and bytext simplify finding objects by text or by name. KB282 Elastic XPATH Expressions \u00b6 When working on UI test automation for a web application a test engineer has to deal with XPATH expressions. They are used to locate UI elements during test execution. It is very important to use such XPATH expressions that do not break when developers update the application. Good XPATH expressions which still find required elements after UI modification can be referred to as resilient or elastic. In this article we'll consider several examples of elastic XPATH expressions. KB281 How to get the most out of code complete feature in Rapise \u00b6 Writing JavaScript code in Rapise is fun and easy. It has full featured editor with folding, syntax highlighting and code complete. From this article you will learn how to enhance Rapise code complete with support for external types. KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI? \u00b6 From this article you will learn how to pass additional parameters to Selenium or Appium target, even if they can not be specified in a profile. This recipe can be also used to override parameters of a profile right from a test code. Requires Rapise 5.3+ KB279 How to run cross-browser and mobile tests on Sauce Labs? \u00b6 Sauce Labs allows users to run tests in the cloud on different combinations of browser and OS versions as well as mobile devices and emulators. Learn how to configure Selenium and Mobile profiles in Rapise to enable connection to Sauce Labs services. Requires Rapise 5.3+ KB278 How to run a cross-browser test on a mobile device? \u00b6 Let's assume you have a cross-browser test which was created on desktop and can be successfully executed on any desktop browser (Chrome, Firefox, Internet Explorer, Safari). You want to execute this test on your mobile devices or emulators. Learn how from this article. Requires Rapise 5.3+ KB277 Tips & Tricks for Rapise and Dynamics 365 for Sales \u00b6 Essential information to get started with testing Dynamics 365 for Sales. KB276 How to upgrade Chrome browser on Android emulator \u00b6 Appium requires certain version of Chrome to work with. Even Android 7.0 is shipped with Chrome 51 and this is too old version. From this article you will learn how to upgrade Chrome on your Android emulator. KB275 JSON in Rapise \u00b6 This topic describes how to read and write JSON data in Rapise KB274 Using Rapise Mobile with a Cloud Device Farm \u00b6 Rapise connects to mobile devices (iOS and Android) using the standard Appium mobile device testing API (similar to Selenium WebDriver for web browsers). This articles describes how you can use Rapise to connect to a mobile device farm using the Appium mobile device profiles inside Rapise. We use Kobiton as an example. KB273 Rapise Tips, Tricks & Workarounds when Testing Dynamics AX 2012 \u00b6 During the evaluation of Rapise 5.2 for Microsoft Dynamics AX testing, a customer collected the following tips and tricks from our support team (thanks Maxime!). KB272 Microsoft Dynamics Solutions - Which One Do You Have? \u00b6 As described in a recent article, Microsoft Dynamics has been going through major changes in the past year, there are now many different products that all bear the 'Microsoft Dynamics' brand, including older legacy tools such as Dynamics AX, NAV, GP, SL and CRM and the new Dynamics 365 platform which has different modules (Sales, Operations, etc.). This article helps you know which tool you have when you need help from our Rapise support team. KB271 Headless Chrome Testing \u00b6 Headless Chrome on Windows is introduced in version 60 . Learn how to configure Rapise to run cross-browser tests using non-GUI mode of Chrome. KB270 Using Object ID as RVL ParamValue \u00b6 Sometimes Object ID used as a parameter to the function or object Action (such as Global.DoWaitFor(objId) ). RVL contains special feature intended to make pick-up of object from the list easier. KB269 Different Ways of Slowing Down Rapise to Handle Slow Applications \u00b6 We often get requests for ways to slow down the playback speed of Rapise so that the application under test (AUT) has time to respond. This article describes the different ways and provides suggestions as to when you should use each one. KB268 How to automate Drag and Drop from Windows Explorer into Google Drive \u00b6 Modern technologies allow to drag&drop files into a browser window to upload them to a server. Such a feature works for example in Chrome browser in Google Drive and Photo applications. In this howto post we'll show how to automate drag&drop of files from Windows Explorer to Google Drive opened in Chrome. KB266 How to integrate Rapise and Elasticsearch \u00b6 Rapise is a test automation platform for desktop, web and mobile applications. It is designed for building automated and manual end-to-end UI tests and fits any TestOps infrastructure. Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. From this article you will learn how to integrate Rapise and Elasticsearch together. KB264 How to integrate Rapise with Jasmine BDD Framework \u00b6 Jasmine is a behavior-driven development framework. If you want to test UI with Rapise in a behavior-driven way learn how to tie Rapise and Jasmine together. KB263 How to fix IE 11 recording/playback on Windows 64-bit \u00b6 Symptoms: When new recording is started Rapise always opens new IE window Spy does not show DOM tree During playback no object is found KB262 Debugging Rapise DOM libraries in Chrome using VS Code \u00b6 Rapise can be extended with DOM libraries to add support for custom UI controls used in modern web applications. Many of such applications work in Chrome browser. So there may be a need to debug Rapise code embedded into Chrome via Rapise Extension for Chrome. Most powerful and easy way to do this is to add VS Code into the equation. From this article you will learn how to tie Rapise, Chrome and VS Code together. KB260 Handling Auth prompt in Rapise \u00b6 Some web site show Auth prompt when entering some area. The prompt is rendered differently by different browser. Here we show how to bypass the prompt in automation scripts. KB259 How I added support for JPopupMenu automation in 1-hour \u00b6 Example of adding support for Java UI control in Rapise. KB257 Using Rapise Visual Language (RVL) 5.1 with Multiple Sheets \u00b6 With the release of the new Rapise Visual Language (RVL), there have been some questions about how to use it to organize tests, subtests and multiple sheets. For example: I see that I can create multiple sheets. How does Rapise handle multiple sheets? Does it run each in order or can they be run separately? Is it possible to call a test in RVL from another test in RVL? In other worlds, how can I create subtests and scenarios using RVL? KB249 Resources for Learning JavaScript \u00b6 One of the most popular programming languages in the world is JavaScript. Initially conceived by Netscape as a web page scripting language, christened JavaScript to leverage the popularity of Java (which was fairly new and sexy at the time) and now used for servers (NodeJS), desktop apps (ReactNative) and for us at Inflectra, the core technology at the heart of our Rapise test automation system. This article provides some useful resources for those first learning the language. KB248 Rapise Recording/Playback Throw Error Due to ANSICON application conflict \u00b6 A customer of ours was using Rapise on a computer that was also running the ANSICON application. This changed some of the settings in the Windows registry that affected the Windows command-line parser. This article explains how to clean up the command-line to allow both applications to work correctly together. KB247 Formatting dates in JavaScript \u00b6 This is a short sample demonstrating how one can format a date KB243 Changing REST Headers When Web Service Testing \u00b6 When performing web service testing using Rapise you may need to change the HTTP headers being sent with the request. This article provides suggestions on the different ways of doing this. KB242 How to execute a JavaScript function when its name as a string \u00b6 Sometimes it is convenient to store function names in strings and use those strings to call actual functions. The article describes two ways of how you can do this in Rapise. KB235 Magic Tricks of the Triple Click \u00b6 This article shows how to select paragraph of text using various types of mouse activities. Also it demonstrates use of clipboard Global.DoTrim function. Working example is attached. KB233 Suppressing Text in Rapise Logs for Sensitive Data \u00b6 A customer had a question - is there a way to suppress the DoSetText or DoSendkeys methods from sending their text to the logs. They didn't want users to see this text in the Rapise (and SpiraTest) logs because they contained sensitive information (e.g. passwords). KB232 Rapise Tip - How to Handle a Webpage that Displays an Alert when You Navigate Away \u00b6 One of our users had a webpage with a form. When it was submitted partially filled, the page came back (after being processed on the backend) with some errors about incomplete form. If the user tried to navigate away from this page via a link (or close the page/browser tab) he was prompted with browser's standard \"Are you sure you want to leave this page?\" dialog. He needed a way for Rapise to handle this popup when recording and playing back the web test. KB231 Adobe Flash / Flex / AIR Support in Rapise \u00b6 Rapise 4.0 supports the testing of Adobe AIR Flex applications using the Adobe Integrated Runtime (AIR). Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.Rapise 4.0 supports the testing of Adobe Flex applications that are executed by the Adobe Flash Player inside the Internet Explorer, Mozilla Firefox or Google Chrome web browsers. Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.[We have depreciated support for testing Adobe Flex/Flash applications in Rapise 5.0 and later, so this article is provided for use by existing customers] KB230 Unusual case where Rapise Cannot Click on Hyperlinks in IE \u00b6 We have found an occasional situation where Rapise is not able to click on hyperlinks ( tags) when you playback a test on IE. The same test works fine on other computers and on other browsers on the same computer. KB228 Web Object Not Found in IE when Object has 0px Size \u00b6 We had a customer with a problem related to having elements with complex display styles applied inside an HTML anchor tag . The anchor tag was reporting back as having zero size (0px) in IE, so when Rapise tried to locate it to click on it, the browser was not able to find it. KB227 Executing a Windows .BAT Batch File from Rapise \u00b6 Sometimes you need to run a Windows batch file (.BAT) from Rapise. Unlike an executable, you cannot simply use Global.DoLaunch() to execute it since it's not actually an application. This article provides the code you need to use. KB224 Testing Popup Windows using Internet Explorer \u00b6 When you are testing a web application that has popup windows (where the popup is a whole new browser window) you will need to make a slight change to the test script to enable it to playback successfully in Internet Explorer (no change is needed for Chrome or Firefox). KB223 Troubleshooting Java Swing/AWT Testing \u00b6 When you are testing a Java application using either Swing or AWT you may run into some issues due to the environment. This article collects some of these common cases and provides the recommended solutions. KB221 Where do I get the Microsoft Script Debugger \u00b6 When you install Rapise onto a computer that does not have Visual Studio or the Microsoft Script Debugger installed you will get a message to install the debugger. This article provides the download link to the necessary debugger. KB218 Testing Adobe AIR Applications on Mobile Devices \u00b6 We have had a couple of questions about whether Rapise can test Adobe AIR based applications running on mobile devices using platforms such as Android. This article provides some background and also describes the support Rapise has. KB219 What to do When Rapise Doesn't Display the Web Page DOM? \u00b6 Sometimes when testing certain web applications instead of the browser DOM tree appearing you will see strange results such as \"Node0\" appearing. This is caused by the application using nested frames with potentially different security origins. This article describes some of the common issues and describes the solution. KB217 Rapise - Cannot Find AllLibraries.json file during Recording/Playback \u00b6 When recording or playing back a test script on a new PC you may get an error message that Rapise cannot find the path to \"AllLibraries.json\".This article provides instructions on how to fix the issue. KB216 Testing Multiple Web Browser Tabs at Once in Chrome \u00b6 Sometimes you have a web test where you need to test the contents of two browser tabs at the same time in Google Chrome. For example you may have an application which opens up a second browser tab and you want to test that changes in the second tab show up correctly in the first tab. This article describes how to perform this kind of testing. KB215 Fixing the 'Method Not Found' error when using Appium for Mobile Testing in Rapise \u00b6 If you receive the following error message when performing Mobile device testing with Rapise, this article provides the necessary solution:Method not found:'OpenQA.Selenium.RemoteCommandInfoRepositoryOpenQA.Selenium.RemoteCommandInfoRepository.get_Instance()'. KB209 Testing Web Applications that use SVG \u00b6 One of the more challenging types of web application is that with uses embedded SVG (Scalable Vector Graphics) in additional to HTML DOM elements. This article describes how to use Rapise to write automated testing scripts for such applications. KB205 Rapise 3.x / 4.0 Does not Connect to Chrome x64 Bit \u00b6 When you try and connect to the 64-bit version of the Google Chrome web browser using Rapise 4.0 (or earlier) you may get the error 'Connection to Chrome Failed!'. This issue has been fixed in the Rapise 4.1 release, but for those customers using Rapise 4.0 or earlier, this article provides two solutions. KB204 Working with WPF and UIAutomation Structures \u00b6 It is a common situation that desktop applications written using Microsoft Windows Presentation Framework (WPF) will have complex layouts including tabs, splitters and panels having custom grids and tables inside. This article provides help in dealing with such situations, including how to dynamically find items. KB202 Reading the Details of Files on the Windows File System \u00b6 In the KB62 article - Accessing Files using Rapise we explain how to access the names, versions and locations of files on the Windows file system. One customer asked - can we verify any file details other than version. This article provides sample code for accessing other information. KB203 Accessing the Windows Registry using Rapise \u00b6 Sometimes when testing local/desktop applications you need to access the Windows registry to verify that keys exist or that keys have specific values. For example you may be testing that a DLL was successfully registered. This article provides information on the 'UsingRegistry' sample that comes with Rapise. KB201 Error attaching to Excel spreadsheet when using Rapise 4.0 with MS-Excel 64-bit \u00b6 When you are using the global Rapise Spreadsheet object on a system running the 64-bit version of MS-Office, you may get an error attaching to the spreadsheet. This article describes the cause of the issue and provides a solution and workaround. KB200 Testing MS-Word With Rapise \u00b6 We had some customers that were looking to record some tests against Microsoft Word 2010. When testing against MS-Word 2010 there are actually two parts to the application:There is the application ribbon (the menus, navigation, etc.)There is the MS-Word text window where your content is actually displayedThis article provides some strategies for dealing with both areas. KB194 When recording with Chrome, Rapise does not record actions within frames \u00b6 When creating web tests with Chrome, objects within cross-frames are not recognized by the Rapise Web Spy and recorder. This article gives a solution. KB193 Using Rapise to test websites that contain frames \u00b6 If the website under test contains frames, that presents some challenges to test automation. This article gives tips for success and explains the current limitations. KB192 Different XPath Options in Rapise 4.0 \u00b6 When testing complex data-driven web applications using Rapise, it is helpful to understand the different ways that Rapise can automatically learn the objects. Rapise can learn an object using either XPATH or CSS. In the case of XPATH there are several strategies that Rapise can use to make the testing more robust. This article describes these strategies and provides some suggestions about which one is the best to use for different scenarios. KB191 WebSpy Attribute Filtering \u00b6 The v4.0 release of Rapise adds enhanced attribute filtering to the Web Spy as well as different options for creating XPath queries automatically. This article explains why you would want to use these features and how they can make the testing of complex data-driven web applications much easier. KB185 Using Global.DoLoadObjects to Use Rapise Objects from External File \u00b6 One of the challenges using an automated testing tool is to organize things in a way that it is logical enough to find something quickly, structured enough to avoid duplication and simple enough to maintain and upgrade. This statement is also true for Rapise objects. A common requirement is to deal with the same objects within a flow of different test cases. For instance, if an application has \u201cLog In\u201d functionality then many, many tests will require logging-in and logging-out. Each test will have this object in its own object tree. However this causes trouble if a change in the application affects the recognition of the Log In object. All of the test cases will need to be updated. In such situations it is much more convenient to have the \u201cLog In\u201d objects placed into their own file and re-used by other tests. KB186 Global.DoWaitFor vs Global.DoWaitForProperty \u00b6 The most commonly used synchronization option to make Rapise wait until the application under test (AUT) is ready is the Global.DoSleep action. However having just a sleep may cause an unnecessary delay because we have to consider the maximum wait interval and it may be much less on average. Rapise includes some additional synchronization options for more fine grained control of the test case flow. KB187 Using CheckObjectExists(xpathOrObjId) to See if Web Object Exists on Page \u00b6 This articles describes how you can use the Navigator.CheckObjectExists(...) action to see if an element exists on a web page and how it differs from the Global.DoWaitFor / DoWaitForProperty actions that are described in another article. KB184 What is the purpose of the Tester.EndTest() Function? \u00b6 The Tester.EndTest() function in Rapise is described as: Marks end of a currently executed test. Calculates test results and performs finalization of test execution. We have found that some of our customers have been confused as what the purpose of this function is. KB183 Desktop Application Testing - Choosing the Right Library \u00b6 Suppose we have a situation that a thick-client (desktop) application under test (AUT) is based on a technology that is too old or not completely supported by Rapise. Rapise has a number of libraries for different types of apps. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails. KB182 How to automate the testing of TinyMCE Rich Text Boxes using Rapise \u00b6 DEPRECATED Method described in this article does not work any more because browser security has changed since 2015. Now it is not possible to directly access client side JavaScript model. We have a new article that explains how to automate TinyMCE https://www.inflectra.com/Support/KnowledgeBase/KB541.aspx When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. When you are using the popular TinyMCE rich text box you have more options to automate it by using its special client-side JavaScript API. KB181 Dynamically constructing the .rest file URLs to test REST APIs \u00b6 Sometimes when using Rapise to test REST web services, you want to be able to dynamically change the base URL of the web service yet still use the same URL template and method information. This article describes a process for achieving this. KB177 Web testing - Dynamically Switching the Browser in the Same Test \u00b6 Sometimes you have a test that you want to run on Chrome, Firefox, and IE in the same script. Normally you write a browser-agnostic test and then have SpiraTest simply call Rapise with different browser names as a parameter and then you have the same test executed multiple times. However suppose you want to have a single test that by itself can run on all the necessary browsers. This article addresses this case. KB176 Measuring browser performance with Rapise \u00b6 How do you get the exact time that Rapise takes to load a page? Now, the reports summary shows the overall execution time but if you have pause times between steps then these times are added to the total time of that a page took to display. Customers have asked if Rapise has some kind of function that will allow them to see only the transaction time between pages without the pause times. Does Rapise have something like that? This article provides a solution to these cases. KB175 Using Rapise to populate data in an Excel Spreadsheet \u00b6 The built-in Spreadsheet object in Rapise makes it easy to read data from an MS-Excel spreadsheet. What happens if you want to write data back to the Excel sheet? KB172 Dynamically changing object locators for Web applications \u00b6 Sometimes you want to dynamically change the XPATH or CSS used in a specific object from within the test script itself. This article explains the process for doing this. KB168 Customizing the Rapise Reports \u00b6 By default, the reports displayed within Rapise report back each test activity and assert statement as a line in the report with all of the activities and events being displayed in a single flat list regardless of whether they happen inside the main Test() function or a sub-function. This articles explains how you can extend the reporting. KB166 Using Rapise 3.1 to test a web page with a multi-select list \u00b6 When you have a multi-select list in a web application, you may need to check which items are selected, or to check whether or not a particular item is selected. This article illustrates how to do that. KB164 Calling Rapise DoX functions without reporting result \u00b6 When you use a DoX command in Rapise to perform a specific command (e.g. DoDOMChildrenCount() to get a number of object's DOM children), in the report an extra step -- assert -- is created during test execution. Sometimes you want to be able to call a function 'quietly' without it affecting the report. KB163 Accessing the Computed Style Properties of an HTML DOM Object \u00b6 A common question from our users is, is there a way to get object's style properties that are in effect at a certain point in time. (for example, it could have been inherited from higher level of hierarchy, or modified via JavaScript running on the page)? This article describes how to do this. KB161 Certain Hyperlinks won't click during playback with Internet Explorer (IE) \u00b6 Sometimes when you record a test script using IE and then play it back, some of the clicks on hyperlinks will not playback correctly. Rapise will list them as Passed, but the click won't actually be performed. KB160 Rapise cannot connect to Firefox immediately after Firefox updates \u00b6 If you try and connect to Firefox with Rapise immediately after Firefox has updated, you may see the following error message: Microsoft JScript runtime error: 'Navigator.GetBrowserHWND()' is null or not an object KB159 Fixing 'Unable to cast object of type 'System.DBNull' to type 'System.String'' errors in Spira v4.x \u00b6 Sometimes when you are saving Rapise test scripts into some early versions of Spira v4.2.x.x (e.g. Spira v4.2.0.1 - v4.2.0.5) you can start getting these errors on the Test Case details page. You may also get the error for other reasons in earlier versions of Spira v4.x. KB158 Accessing the Spira v4.2 REST API to get test cases in a release \u00b6 This article describes the process and provides an example for accessing the Spira v4.2 REST API to get a filtered list of test cases in a release. KB146 How to Use Sub-Tests and Common Objects with REST Web Service Tests \u00b6 It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. However due to the way REST web service tests are stored, there are some slight changes needed to handle REST services. This articles describes the process. KB143 Rapise Won't Record Steps or Display Reports \u00b6 If you are running Rapise and you suddenly start to find that none of your recordings get saved and the reports are not displaying during execution it may be due to the fact that you have saved your Rapise test folder onto a Network Share. KB142 Scripts created with Rapise 2.1 or earlier no longer playing back correctly in Rapise 2.2 or later \u00b6 In Rapise 2.2, \"DoClick\" behavior was changed, so we don't do a click but rather just position the mouse over the control and do API-level \"click\" event. However we provided a way to enable backward compatibility. KB141 Testing Silverlight Applications \u00b6 When testing Silverlight applications, you may find that Rapise fails to recognize the objects in the Silverlight app using the UIAutomation library. When using the Rapise Spy Tool, the whole app is identified as a single window. The objects such as a dropdown, buttons etc. inside the silverlight app are not individually recognized. KB544 How to Use Rapise Cloud on AWS \u00b6 With our Rapise cloud edition, you can take your automated software testing to the cloud. With Rapise cloud edition you can start testing immediately, no hardware or test lab needed, just sign up for Amazon Web Services (AWS) and rent our Rapise cloud AMIs on-demand, with no minimum usage and no annoying monthly or annual fees, just pay for what you use. KB139 Disabling the generation of comments during Recording \u00b6 By default Rapise records user actions with a line commented out for each action. This articles describes how you can disable this behavior if you just want the script lines recorded on their own. KB138 My Actions are Not Recorded \u00b6 By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal (often several lower-level user actions are combined)Rapise uses a heuristics to distinguish meaningful activity from low level actions. In some cases this leads to a result that some user activity is not automatically recorded (for example, a mouse click before entering text in a box). There is a broad range of available UI platforms and libraries. The variety of graphical widgets makes user interface robust and beautiful. Rapise tries to recognize as much objects as possible. However this range is growing and there are always widgets that are not being recorded. KB137 Anti-Virus Software and Test Automation \u00b6 Anti-virus software is very sensitive to test automation tools. This is normal, because test automation tools usually do API, keyboard and mouse hooking to be able to record and playback user actions. KB136 How are Global Functions stored and recalled? \u00b6 We need to call many common functions from a common library frequently. KB134 Why is My Flex application recorded as mouse clicks? \u00b6 A Flex application requires some instrumentation to be ready for testing. By default Flash player has security restrictions preventing Rapise from accessing the application contents. Please, check the this help topic to learn more about Adobe Flex testing. KB133 The Recorder asks for a Library. Which should I choose? \u00b6 In most cases \"Auto\" is the best choice. Manual selection of libraries may be needed in more advanced scenarios and is intended for experienced users. KB132 Does Rapise work with Windows UAC? \u00b6 If you are using Rapise on Windows Vista or Windows 7 it is not necessary to disable the Windows User Account Control (UAC) to use Rapise. Unlike some other automated testing tools on market, you can use Rapise with UAC enabled. KB131 Executing Under a VM or Remote Desktop \u00b6 Sometimes you need to test an application running on a VM or remote computer using Remote Desktop (RDP) rather than a physical terminal. This guide explains how to ensure that Rapise is able to correctly fire events on the application under test. KB130 Waiting Until Application Ready \u00b6 Sometimes you need to synchronize the test script so that it waits for a specific application event (change for status message or wait for some specific value). This guide explains how to ensure that Rapise waits for the appropriate condition. KB124 Reading an Object's State \u00b6 Sometimes it is necessary to examine the state of an object. For example, determine if Toggle Button is pressed or not, Radio/Check Button is checked or not, etc. This guide describes a couple of different ways of achieving this. KB123 About Highlighting (Flash Command) Rectangles \u00b6 Rapise has a choice of visual effects it can use when highlighting a control being learned during the recording process. This guide describes the different modes. KB121 Choosing Object Type Manually \u00b6 Sometimes Rapise will incorrectly recognize a GUI component. This guide outlines how you can manually change the object type captured during recording. KB120 Capture Screenshots During Playback \u00b6 When playing back a test it is useful to be able to capture the screen as its current state so that the cause of any test failures can be more easily deduced. KB119 Working with Right-Click Context Menus \u00b6 The context menu control is not natively supported by Rapise, but one can use a simple workaround. KB118 Working with Selectable Lists \u00b6 The behavior of list and combobox controls in GUI applications sometimes require additional attention. This guide explains the different types of combobox controls and best practices for testing them in Rapise. KB115 Recording Web Menus \u00b6 Many web sites have dynamic site menus. This guide outlines the best practices for recording events associated with such dynamic site menus. KB114 My Actions are Not Recorded \u00b6 By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal. However that sometimes means that certain actions that a user performs won't be automatically picked up. This guide explains ways to handle situations when a specific user activity is not recorded. KB113 Recording Mouse Activity \u00b6 This guide describes the different types of mouse events and how they are recorded in Rapise. KB112 Re-Using Test Logic \u00b6 It is common for test scenarios to share similar pieces of functionality. A good example of such sharing is login logic. This guide outlines ways in which you can share such logic to avoid having repeated code in your tests. KB116 Working with HTML XPath \u00b6 When testing web applications you will often need to use XPath to query the browser DOM for elements based on the scenario under test. This guide explains how you can use XPath queries with Rapise to make your browser testing more flexible and adaptive to changes on the screen. KB117 Working with HTML Tables containing Dynamic Data \u00b6 Many web sites use HTML tables to display lists of tabular data. When testing such applications you will often need to dynamically search for items in the table to verify that the application under test performed correctly. This guide outlines best practices for accessing data held in HTML tables. KB122 Change Object Value or Text \u00b6 This guide describes the different ways that you can change the value of text label of an object. KB125 Analog Recording \u00b6 Sometimes the application under test doesn't contain any learnable objects. In that case you may need to use the fallback of Analog Recording. This guide describes how you perform analog recording. KB126 Simulated Objects \u00b6 This guide describes what simulated objects are and when they should be used. KB127 Passing Test Parameters \u00b6 There are many different ways of passing test parameters to Rapise from an external system. This guide describes the different ways of passing parameter values to Rapise. KB128 Creating a Set of Tests to Run in Rapise \u00b6 This guide describes how you manage groups of Rapise tests together in situations where you are not using SpiraTest test sets. KB129 Using Dynamic Linked Library (DLLs) in Test Scripts \u00b6 Sometimes you need to call code libraries from your Rapise tests, for example when the built-in JavaScript scripting engine does not provide the necessary functionality. This guide explains how to call an external DLL from your Rapise test script. KB135 How does Rapise detect if a dialog is already open? \u00b6 There are several ways to find if something is already on the screen, this article explains some of the options. KB111 Analog Testing when the Machine does not have the Break Key \u00b6 When using Rapise for analog testing you need to use the key sequence CTRL+BREAK to start and stop the analog recorder. However some machines (particularly smaller laptops) do not have a BREAK or PAUSE (often the same function as BREAK) key. This article describes some solutions KB109 Using DoDOMChildrenCount and DoDOMQueryXPath to inspect child HTML elements \u00b6 Often you want to be able to query for the child elements on a web page that are dynamically created and therefore not good candidates for LEARNing individually. This article explains how you can use the dynamic XPATH methods of Rapise to accomplish this task. KB105 After installing Windows Update KB3025390 Rapise No Longer Connects to IE \u00b6 An old (December 9 th , 2014) security update for Microsoft Windows and Internet Explorer (KB3025390) broke the support in IE for 'out-of-process' code execution. This effectively prevented an automated testing application such as Rapise from automating Internet Explorer (IE) applications. This was subsequently fixed by Microsoft on February 10 th , 2015 with the KB 3021952 update. KB102 How to Get Rapise Trace Logging Information \u00b6 When using Rapise, it is often useful to see how Rapise is identifying objects in the Application Under Test (AUT) and if necessary find out why Rapise is not able to locate a specific object. This article outlines how to increase the logging level in Rapise. KB101 Automating HTML File Upload Boxes \u00b6 Sometimes you have to automate the uploading of files using an HTML file upload control. This article explains how to record and playback such a script. KB98 Code Completion of Native JavaScript Objects \u00b6 Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However since JavaScript is fundamentally an un-typed language, for the code completion to work, there are some tips and tricks that you can use. KB97 Recording Popup JavaScript Confirmation Boxes \u00b6 When you are recording a test against a Web application you may have to deal with a popup JavaScript confirm or alert box. This article describes the process for dealing with them. KB96 How to automate the testing of Rich Text Boxes using Rapise \u00b6 When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. This is because the browser actually uses a separate IFRAME and HTML document for the editable rich text box. This article explains the process for recording/playing back such a test. KB89 Adding Support for Custom Flex Controls \u00b6 By default the Rapise Flex library supports a wide variety of Flex controls which will be capable of testing the majority of application. However sometimes there will be an unknown objects which will be learnt as a generic object with FlexObject flavor. The article describes support for such custom Flex controls: KB87 Using Rapise to Validate Display of Data Grid Data \u00b6 One common requirement is to run a query in an application being tested and verify that the data on the screen matches the data in the application. This article explains the recommended process for doing this. KB86 Choosing the Web Browser in Rapise from SpiraTest / SpiraTeam \u00b6 When writing a web test in Rapise you will often want to run the same test script in all three web browsers (IE, Firefox and Chrome). You will want to be able to choose the Test Script from within Rapise when debugging the test and then from a Test Set in SpiraTest when you move the test into production. This article explains the process. KB85 Sending Special Keys to the Current Application \u00b6 You can use the Global.DoSendKeys('...'); command in Rapise to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. Page Down, or CTRL + Key). This article explains the way to do this. KB83 Turning off Chrome and Firefox Auto-Updating \u00b6 When you are testing a web application against different environments, it can be useful disable to default browser auto-updating policies so that you have a stable testing environment. This articles describes how to disable the auto-updating policies of Google Chrome and Firefox. KB79 A DLL required for this install to complete could not be run \u00b6 If you run one of our installation packages (.msi) and receive the following message: A DLL required for this install to complete could not be run KB78 Enabling Windows Installer (.msi) Trace Logging \u00b6 Sometimes when installing our products you get error messages during the installation and it's necessary to provide Inflectra support personnel with detailed trace/logging information so that they can better support you. This article describes the steps necessary to enable Windows Installer (.msi) trace logging. KB77 How to resolve WScript.CreateObject: Could not connect object errors \u00b6 Sometimes when you install Rapise on a computer that had a previous version of Rapise installed, when you try to record and/or playback a test you get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Player.js WScript.CreateObject: Could not connect object. This article describes the steps to correct the error. KB68 Accessing Clipboard in Rapise \u00b6 Sometimes when automating a test, you need to access the local Windows clipboard. This article describes how to access the Windows clipboard programmatically. KB65 Testing Win32 applications to verify that controls change display state \u00b6 Sometimes you may have a button (or other control) that can have a different appearance depending on the different focus statuses.For example, the default status without focus is a grey image, whereas when the mouse hovering over it becomes blue. Then when the mouse left button is held down on the button (and not released), the image changes to a red image.Finally, when the button is activated using the tab key to tab into the button and the mouse is somewhere else, it has a fourth color. This article discusses solutions for how to test these kinds of situation KB64 Using Navigator.ExecJS to execute JavaScript code inside a browser \u00b6 Sometimes you need to execute JavaScript code at a browser side and get the result. You can do this with Navigator.ExecJS. KB63 Getting the State of a Win32 object using Rapise \u00b6 Sometimes you need to be able to test the state of a specific Win32 object in Rapise to see if it is enabled, disabled, is activated, etc. This sample illustrates how to get the numeric and textual value of the object's state. KB62 Accessing Files and I/O functions using Rapise \u00b6 Sometimes using Rapise you need to access files on the Windows filesystem, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file. This sample illustrates how you can access the File System using Rapise and the Windows FileSystemObject ( http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx ). KB59 Using Simulated Objects \u00b6 Simulated objects are found by looking at the parameters of the object (x number of pixels from the top of the window, y number of pixels from the left of the window, etc). One common question that has arisen is - during playback, does Rapise take into account screen resolution? If the resolution on the computer you run it on is different from the one it records on the location of the object will change relative to the number of pixels. So on the computer you record it on the top parameter might be 200 but on a different resolution it might be 180. Would Rapise recognize that the resolution is different and adjust for that? KB58 Javascript .js not associated with Windows Scripting Host \u00b6 Sometimes if you have installed a program that associates itself with the .js file extension, you will see the following error when you try and record/play a Rapise test: Microsoft (R) Windows Script Host Version 5.8 Copyright (C) Microsoft Corporation. All rights reserved. Input Error: There is no script engine for file extension \".js\". KB57 Accessing Child Objects in a Java AWT/Swing application \u00b6 This article describes how to access child objects of a Learned Java AWT/Swing object when using the Rapise Java library. Sometimes when you Learn a top-level object, you want to be able to programmatically query the object to locate the child objects that are visible in the Java SPY. KB56 Accessing child components of a WPF / Silverlight ListBox \u00b6 When you have a WPF or Silverlight application that has a list box (or other control that supports templates such as a Tree) that has an item template that contains sub-controls, you may need to access the individual controls rather than just the entire list item. This article outlines the approach for doing this. KB50 Dynamically changing object locators for WPF/Silverlight applications \u00b6 Sometimes you will have controls in a WPF or Silverlight application which use dynamic lists. Depending on certain settings, the widgets in the list will appear in different places. This means that a Learned Rapise object which works fine if its in the original ListBox[0] location position is then played-back when it's displayed in another position, it will be ListBox[1] or [2]. Unlike the XPath option with web testing, Rapise doesn't currently allow regular expressions (Regex) in locators stored inside the objects.js file. This article describes a way around the problem: KB47 Executing a process and checking if it's still running \u00b6 If you use the Global.DoLaunch(...) command to launch a Windows console application, it will return a process ID. This article provides some sample code for executing a console application and checking to make sure that the process is not still running. KB46 Executing JavaScript commands against Web Browser \u00b6 Sometimes you want to be able to open a browser window and execute JavaScript commands directly against the DOM objects rather than using the Rapise learned objects. This article explains the recommended way of doing this. KB40 Extending RapiseLauncher inactivity timeout \u00b6 When executing Rapise scripts from SpiraTest using RapiseLauncher there is a 10-minute inactivity timeout. If your scripts have periods of inactivity that last longer than 10 minutes, you may need to extend the default timeout. This article describes the steps for doing this. KB39 Executing SQL Database Queries from Rapise \u00b6 Sometimes when you are running Rapise tests you need to run direct database queries to prepare the data in the test application, or you need to make queries against the database to verify that some user interactions left the data in a specific state. The sample script below illustrates how you can call database queries directly from the Rapise scripting editor: KB38 Selecting Browser for Test \u00b6 This article describes how to playback a test in a different browser from the one it was recorded in. KB32 Unable to record/play a Java applet using Rapise inside a web browser \u00b6 Sometimes you have the situation where you can record/play a Java application using Rapise having correctly installed the Java bridge and set the JAVA_HOME environment variable correctly, but applets running inside a web browser do not work. This article provides some suggested solutions KB28 Detecting the presence of an object in Rapise \u00b6 Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this in Rapise 1.5. KB27 Using Rapise to extract test data from an Excel sheet \u00b6 Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this. KB26 Passing Parameters to a Rapise script through the command line \u00b6 This article describes the syntax for passing parameters from the Windows 32-bit command-line to a Rapise script. Note that you need to make sure that you're using the 32-bit command line on a 64-bit machine. I.e. follow the instructions in this KB article - https://www.inflectra.com/Support/KnowledgeBase/KB17.aspx KB25 Using Global.DoInvokeTest() to pass parameters between tests \u00b6 Sometimes you want a test script to be able to call another sub-test as part of its operation. You can do this using the Global.DoInvokeTest('path to test', [parameters]); function. This articles provides a more detailed example for doing this. The high-level information can be found on our website at: https://www.inflectra.com/Rapise/Guides.aspx?feature=Passing-Test-Parameters KB24 How to handle Windows/Objects that have names that change \u00b6 When using Rapise to record test scripts against Windows, Java, Flex, or other thick client applications that have windows or objects whose names may change in between test runs, you will usually need to make changes to either the test script or the learned objects so that they can match correctly. This article outlines some suggested techniques for recording/playing back scripts against such applications. KB18 How Do I Ensure No Other Browser Windows Open \u00b6 When running a test you will often want to make sure there are no other browser windows open. This is commonly done either at the start or end of the test. This article describes how you do this. KB19 How to successfully include and use common functions and objects \u00b6 It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. This article describes the process KB17 Running a Rapise script from the command-line on a 64-bit machine \u00b6 If you try and run a Rapise script from the command-line on a 64-bit machine you may get an error message. Learn how to fix it from the article. KB13 Test-Scripts suddenly moving/clicking at false locations \u00b6 If you have your browser zoom set to a value that is not 100% when recording or playing back scripts it will affect the playback reliability. Specifically Rapise will click/move at/to false locations in the test browser.You need to set your browser zoom to 100% before doing any playback/recording activities. KB11 How do I change the URL of the website being tested in Rapise. \u00b6 We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address? KB8 Recording Infragistics Applications with Rapise Throws Error \u00b6 If you try and record a test script in Rapise using just the 'Infragistics' library you will get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Recorder.js(285, 3) Microsoft JScript runtime error: 'ManagedObjectSelectableBehavior_OnMouseEvent' is undefined","title":"Knowledge Base"},{"location":"Manuals/kb/#knowledge-base","text":"We update this list regularly. For the most recent list of KBs please navigate to Inflectra Knowledge Base","title":"Knowledge Base"},{"location":"Manuals/kb/#kb636-silent-installation-of-rapise-for-cicd","text":"Sometimes you need to perform unattended installation of Rapise for test execution only. It may be a part of automated test execution step executed by CI/CD pipeline. Here is the snippet.","title":"KB636 Silent Installation of Rapise for CI/CD"},{"location":"Manuals/kb/#kb635-create-an-incident-in-spira-from-rapise-test","text":"In some cases a test may automatically determine that it's failure is definitely caused by a bug in software under test. In this case the test may create an incident in Spira using Spira.CreateIncident action. Requires Rapise 7.2+.","title":"KB635 Create an incident in Spira from Rapise test"},{"location":"Manuals/kb/#kb634-comparing-web-page-to-text-or-word-file","text":"Sometimes you need to validate the whole page text. This sample demonstrates usage of plain text or MSWord file for this purpose with some help of myers-diff npm module","title":"KB634 Comparing Web Page to Text or Word File"},{"location":"Manuals/kb/#kb631-reading-dom-element-style-property","text":"Sometimes we need to get runtime property for the element. For example, we need to get a background color to know that element is visually highlighted for a user. This topic shows how it may be done with Navigator.ExecJS.","title":"KB631 Reading DOM element style property"},{"location":"Manuals/kb/#kb623-fix-dpi-scaling-for-rdp-connections-to-windows-vms","text":"If you connect to a Windows VM via RDP and see that all fonts are very small and it is hard to read text on screen then this article is for you. If you can access the VM without RDP then you may change scaling via Display Settings in Windows and thus make text larger. But if this VM is Azure or AWS hosted VM then you may see a message: the display settings can't be changed from a remote session.","title":"KB623 Fix DPI scaling for RDP connections to Windows VMs"},{"location":"Manuals/kb/#kb608-what-blocked-status-means-for-a-test-run","text":"When you run a test with Spira (via RapiseLauncher) you may get a Blocked status for a test run. It is displayed in the Test Runs view and Test Sets view both in Spira and Spira Dashboard in Rapise.","title":"KB608 What Blocked status means for a Test Run"},{"location":"Manuals/kb/#kb603-the-2021-release-wave-2-for-dynamics-365-for-sales","text":"The 2021 release wave 2 for Dynamics 365 contains hundreds of new features across Dynamics 365 applications. If you are using Rapise to test a Dynamics 365 for Sales instance you may be affected by the coming changes. To help you update existing tests we summarized differences (important for UI automation) between old and new versions of Dynamics 365 for Sales.","title":"KB603 The 2021 release wave 2 for Dynamics 365 for Sales"},{"location":"Manuals/kb/#kb602-auto-startstop-azure-vm-to-run-ui-tests","text":"If you are using a Microsoft Azure VM to run UI tests and do not want to keep the VM always running (to save budget) you may configure automatic start/stop and auto logon for the machine.","title":"KB602 Auto start/stop Azure VM to run UI tests"},{"location":"Manuals/kb/#kb600-change-the-default-screenshot-folder","text":"If a test is configured to capture screenshots during playback - Rapise puts then into Reports folder in the working directory of the test. If you want to copy screenshots to a different location or instruct Rapise to put images into a different folder - check out this article.","title":"KB600 Change the default Screenshot folder"},{"location":"Manuals/kb/#kb599-rvl-toolbox-to-boost-productivity-in-writing-tests","text":"If you are new to Rapise or use it occasionally you may not know or remember all the cool objects and actions to use in your tests. With RVL Toolbox you can get access to required information by searching for it without leaving the RVL Editor.","title":"KB599 RVL Toolbox to boost productivity in writing tests"},{"location":"Manuals/kb/#kb598-using-rvl-merge-utility","text":"Sometimes we need to do Diff and Merge operations when working with external Source Control systems (git, svn, etc). This utility (ExcelMerge) will enable this functionality.","title":"KB598 Using RVL Merge Utility"},{"location":"Manuals/kb/#kb597-using-regular-expressions-in-object-locators","text":"Sometimes application components change and we need more flexibility when creating locators. You may use regex: prefix for locator components to make it more flexible. Very similar approach applies to Managed (DotNet Forms), Java and UI Automation locators.","title":"KB597 Using Regular Expressions in Object Locators"},{"location":"Manuals/kb/#kb596-softassert-in-rapise","text":"Sometimes you need more control on whether to stop execution when an assertion fails. Assertion that does not stop execution is Soft Assertion. With soft assertions you may force it to fail later when all expected errors are collected or keep running until the very end.","title":"KB596 SoftAssert in Rapise"},{"location":"Manuals/kb/#kb594-returning-values-from-rvl-sheets","text":"Sometimes you need to return a value or a set of values from RVL.DoPlaySheet or RVL.DoPlayScript calls. This sample shows you how.","title":"KB594 Returning Values from RVL sheets"},{"location":"Manuals/kb/#kb588-using-seetest-instrumented-mode","text":"If you are testing a native mobile application using SeeTest you have an option to switch to NATIVE_APP_INSTRUMENTED context and record/playback tests in it.","title":"KB588 Using SeeTest Instrumented Mode"},{"location":"Manuals/kb/#kb586-how-to-get-aws-secret-from-rapise","text":"Learn how to query AWS Secret from Rapise. Requires Rapise 6.7+","title":"KB586 How to get AWS Secret from Rapise"},{"location":"Manuals/kb/#kb585-how-to-run-cross-browser-tests-on-aws-device-farm","text":"Learn how to configure Rapise to run cross-browser tests on AWS Device Farm. Requires Rapise 6.7+","title":"KB585 How to run cross-browser tests on AWS Device Farm"},{"location":"Manuals/kb/#kb584-rapise-and-microsoft-defender-antivirus","text":"If you use Microsoft Defender Antivirus to protect your system then you may need to perform certain steps to use Rapise effectively.","title":"KB584 Rapise and Microsoft Defender Antivirus"},{"location":"Manuals/kb/#kb583-rapise-and-avast-antivirus","text":"If you use Avast Antivirus to protect your system then you may need to perform certain steps to install and use Rapise.","title":"KB583 Rapise and Avast Antivirus"},{"location":"Manuals/kb/#kb581-rapise-66-built-in-help-fix","text":"Rapise help system has been updated to latest template introducing new search and navigation capabilities. The side effect is that is it not compatible with default HTML-based viewer engine and may look corrupted.","title":"KB581 Rapise 6.6 Built In Help Fix"},{"location":"Manuals/kb/#kb574-advanced-search-for-elements-in-desktop-applications","text":"If a desktop application is dynamic and recorded locators do not work then there is a way to search for elements using UIAObject.DoFindElementByCondition and UIAObject.DoFindElementsByCondition.Requires Rapise 6.6+","title":"KB574 Advanced search for elements in desktop applications"},{"location":"Manuals/kb/#kb572-specifying-timeout-for-rest-calls","text":"Rapise REST module uses 100seconds timeout by default. Since Rapise 6.6 you may make it longer or shorter.","title":"KB572 Specifying Timeout for REST Calls"},{"location":"Manuals/kb/#kb570-easy-way-to-dump-sheet-variables","text":"We sometimes need to dump diagnostic information to the report. It may be values of some or all local variables.","title":"KB570 Easy Way to Dump Sheet Variables"},{"location":"Manuals/kb/#kb569-making-negative-api-tests","text":"By default Rapise reports an error when REST service request fails. With the negative test the request should fail, so we want the reporting to behave differently.","title":"KB569 Making Negative API Tests"},{"location":"Manuals/kb/#kb568-how-to-rename-a-rapise-test-linked-to-a-spira-test-case","text":"It is a 3 step process: 1. SaveAs or Clone the test with a new name 2. Save it to Spira 3. Delete old test copy from Documents module in Spira (optional)","title":"KB568 How to rename a Rapise test linked to a Spira Test Case"},{"location":"Manuals/kb/#kb566-merge-strings-in-rvl","text":"Here we show a few examples on how to combine strings in RVL.","title":"KB566 Merge Strings in RVL"},{"location":"Manuals/kb/#kb565-customize-rapise-report-messages","text":"Sometimes we need to override the message written to the report when some action is performed.","title":"KB565 Customize Rapise Report Messages"},{"location":"Manuals/kb/#kb561-using-free-apple-development-account-to-test-on-mobile-devices","text":"It is possible to use Free Apple Developer account for iOS testing. But it requires some knowledge and time to setup.","title":"KB561 Using Free Apple Development account to test on mobile devices"},{"location":"Manuals/kb/#kb558-mobile-testing-with-experitest-seetest","text":"Connecting to the mobile devices hosted by SeeTest is easy. Learn how from this article. Requires Rapise 6.5+.","title":"KB558 Mobile testing with Experitest SeeTest"},{"location":"Manuals/kb/#kb556-rapisechromeextension-version-3","text":"Along with Rapise 6.5 we are releasing an update to the RapiseChromeExtension. The new version (v3) is back compatible. It means that older versions of Rapise should work with it without issues. Rapise 6.5+ will require you to update the extension if you have RapiseChromeExtension v2.","title":"KB556 RapiseChromeExtension version 3"},{"location":"Manuals/kb/#kb555-recording-web-and-desktop-actions-into-the-same-test","text":"Starting from Rapise 6.5 you may record both Web and Desktop actions into the same test.","title":"KB555 Recording Web and Desktop actions into the same test"},{"location":"Manuals/kb/#kb553-basic-authentication-in-web-tests","text":"Legacy Web applications still may use basic authentication. So when you navigate to an application URL the browser shows a dialog with Username and Password fields to enter. The content of this dialog is not a Web content so recording and playback in a Web test will not work.","title":"KB553 Basic authentication in Web tests"},{"location":"Manuals/kb/#kb551-searching-for-a-web-element-by-text-that-contains-non-breaking-spaces","text":"Are you writing XPath to find an element using its inner text but it does not work? Most likely the text contains non-breaking spaces. This situation is described in detail in our UI Test Automation Playground.","title":"KB551 Searching for a Web element by text that contains non-breaking spaces"},{"location":"Manuals/kb/#kb545-how-to-read-environment-variable-in-rapise","text":"Here is a number of ways of doing it.","title":"KB545 How To Read Environment Variable in Rapise"},{"location":"Manuals/kb/#kb543-values-passed-from-rapiselauncher-to-rapise","text":"When a test is executed by RapiseLauncher it may access key properties of the test run, custom test set properties and test case parameters. Requires Rapise 6.4.19.16+","title":"KB543 Values passed from RapiseLauncher to Rapise"},{"location":"Manuals/kb/#kb541-automating-tinymce-2020","text":"The world moves forward and our older KB articles related to TinyMCE became outdated. In this article we present a modern way (as of year 2020) of automating TinyMCE controls.","title":"KB541 Automating TinyMCE 2020"},{"location":"Manuals/kb/#kb540-unified-service-desk-with-chrome-for-hosted-controls","text":"If you want to use Unified Service Desk with Chrome and test it with Rapise you need to configure it properly.","title":"KB540 Unified Service Desk with Chrome for Hosted Controls"},{"location":"Manuals/kb/#kb539-working-with-rapise-aws-saas-images","text":"Rapise is available as a SaaS solution. Here we describe step-by-step guide how to make several Rapise cloud instances ready for test execution.","title":"KB539 Working with Rapise AWS SaaS Images"},{"location":"Manuals/kb/#kb538-increasing-the-size-of-rapise-images-in-spira-reports","text":"When you run Rapise automated tests using RapiseLauncher the system will automatically embed the images from Rapise into the various test cases and test run reports. By default the report format has relatively small images so that they can fit easily into the tables of expected result and actual results. However some users have asked for ways to make the images bigger.","title":"KB538 Increasing the Size of Rapise Images in Spira Reports"},{"location":"Manuals/kb/#kb537-using-extra-columns-in-rvl-to-control-screenshots","text":"Sometimes we need more fine-grained control over screenshots. Here we describe the way of using H column for defining which actions will have what kind of screenshot captured.","title":"KB537 Using Extra Columns in RVL to control screenshots"},{"location":"Manuals/kb/#kb533-make-screenshots-on-failure-only","text":"Automatic screenshots on every test step may occupy too much space. Learn how to make a screenshot on failure only.","title":"KB533 Make screenshots on failure only"},{"location":"Manuals/kb/#kb532-how-to-set-path-for-local-browser-and-mobile-profiles","text":"Since version 6.3 Rapise has support for local browser and mobile profiles. Using it you may package browser profiles along with tests. What if you want to reuse browser profiles between different projects? Or have sets of profiles for different situations? You may now set path to profile directory using a special global variable. Supported in Rapise 6.4+","title":"KB532 How to set path for local browser and mobile profiles"},{"location":"Manuals/kb/#kb531-handling-grouped-data-in-rapise","text":"Sometimes we need to process data in groups or even in hierarchical way. Here we will show how to make it using plain table and loop in RVL.","title":"KB531 Handling Grouped Data in Rapise"},{"location":"Manuals/kb/#kb530-why-does-rapise-use-doxxxx-naming-for-methods","text":"A customer asked us why Rapise uses Pascal Case names for the various operations, functions and properties, as well as the reason why operations are prefixed with a \"Do\" action name.","title":"KB530 Why Does Rapise Use DoXXXX Naming for Methods"},{"location":"Manuals/kb/#kb529-using-gotomeeting-for-support-session","text":"Learn how to connect to a support session and how to enable Rapise Expert to remotely control your Rapise instance.","title":"KB529 Using GoToMeeting for Support Session"},{"location":"Manuals/kb/#kb528-import-junit-xml-report-into-rapise","text":"Some unit testing tools produce reports in JUnit XML format. Here we show how to import it into Rapise test report.","title":"KB528 Import JUnit XML Report into Rapise"},{"location":"Manuals/kb/#kb526-how-to-disable-recording-urls","text":"When you do recording of test steps for a Web application - Rapise by default captures page URLs and stores them in the object repository. Learn how to disable URL recording from this article. Requires Rapise 6.4+","title":"KB526 How to disable recording URLs"},{"location":"Manuals/kb/#kb522-windows-calculator","text":"For Rapise training purposes we may need a simple desktop application that can be executed on any Windows version. What can be simpler than Windows Calculator?","title":"KB522 Windows Calculator"},{"location":"Manuals/kb/#kb519-reading-values-from-properties-files-in-rapise","text":".properties is a file format mainly used in Java related technologies to store the configurable values. Here we show how to work with it in Rapise.","title":"KB519 Reading values from .properties files in Rapise"},{"location":"Manuals/kb/#kb518-javascript-version-used-by-rapise","text":"Below we provide the information on JavaScript version used by Rapise.","title":"KB518 JavaScript version used by Rapise"},{"location":"Manuals/kb/#kb517-how-to-disable-google-chrome-software-reporter-tool","text":"We've seen systems where Software Reporter Tool (which is a part of Google Chrome) may produce very high CPU load and make system suspending/resuming processes randomly. Because of this Rapise may not be able to connect to Chrome for recording/playback. In fact many things may go wrong when CPU load is 100%.","title":"KB517 How to disable Google Chrome Software Reporter Tool"},{"location":"Manuals/kb/#kb516-the-pipe-is-being-closed-message-from-rapise-installer","text":"When you install Rapise on some systems you may get an error message: 0x800700e8 - The pipe is being closed","title":"KB516 The pipe is being closed message from Rapise installer"},{"location":"Manuals/kb/#kb515-checking-string-length-in-rvl","text":"If you need to get the size of the string, then here is a couple of possible ways for doing it.","title":"KB515 Checking String Length in RVL"},{"location":"Manuals/kb/#kb514-how-to-press-alt-shift-ctrl-or-win-key-alone","text":"SendKeys is good for making key combinations, but this way does not work when you need to press special key. Here is a useful workaround.","title":"KB514 How to Press Alt, Shift, Ctrl or Win key Alone"},{"location":"Manuals/kb/#kb508-compare-images-in-javascript","text":"To compare images in JavaScript you may use Tester.AssertImage.","title":"KB508 Compare Images in JavaScript"},{"location":"Manuals/kb/#kb507-uiautomation2-locator","text":"Rapise 6.3 includes an experimental feature - new UIAutomation2 locator for UIAutomation based desktop testing. Rather than specifying a path from the element tree root to the element this locator relies on built-in ability of UIAutomation to search for elements based on property values.","title":"KB507 UIAutomation2 Locator"},{"location":"Manuals/kb/#kb506-how-to-define-and-use-a-dynamic-web-locator","text":"Imaging you have a table with dynamic data on the page. It is not possible to learn every cell. But it is possible to parameterize the locator of a cell and access cells you need during test playback.","title":"KB506 How to define and use a dynamic Web locator"},{"location":"Manuals/kb/#kb504-referring-repository-objects-from-maps","text":"Sometimes you need to specify object and data for it in the map. Here we will show how to make it using Rapise built in maps and available APIs.","title":"KB504 Referring Repository Objects from Maps"},{"location":"Manuals/kb/#kb503-accessing-svg-elements-via-xpath","text":"By default straight forward XPath to SVG primitives will not work. So XPath ending like .../svg[2]/path will fail. Here is a workaround.","title":"KB503 Accessing svg elements via XPath"},{"location":"Manuals/kb/#kb502-passing-map-as-a-parameter-into-rvl-sheet","text":"This topic covers more detailed description on how to pass map from one Sheet to another in RVL","title":"KB502 Passing Map as a Parameter into RVL Sheet"},{"location":"Manuals/kb/#kb501-passing-sub-test-parameters","text":"Here we will cover several ways of passing parameters and returning values from Sub-Tests.","title":"KB501 Passing Sub-Test Parameters"},{"location":"Manuals/kb/#kb499-how-to-set-size-of-a-browser-window","text":"To ensure that web tests always run on a browser window of a specific size you may use different techniques.","title":"KB499 How to set size of a browser window"},{"location":"Manuals/kb/#kb497-connecting-to-postgresql-from-rapise","text":"If you need to connect Database object to PostgreSQL database follow these simple steps.","title":"KB497 Connecting to PostgreSQL from Rapise"},{"location":"Manuals/kb/#kb496-connecting-to-mysql-from-rapise","text":"If you need to connect Database object to MySQL database follow these simple steps.","title":"KB496 Connecting to MySQL from Rapise"},{"location":"Manuals/kb/#kb493-rapise-data-generator","text":"Sometimes you need to feed your application with demo data that is human-readable but still random. Here is such a generator for Rapise.","title":"KB493 Rapise Data Generator"},{"location":"Manuals/kb/#kb492-calling-nodejs-script-from-rapise","text":"NodeJS provides a lot of unique features and plethora of features implemented in npm packages. Here we describe how to combine such a script with a Rapise test.","title":"KB492 Calling NodeJS script from Rapise"},{"location":"Manuals/kb/#kb489-headless-firefox-testing","text":"Firefox 56+ supports headless mode on Windows. You can use it to Run Rapise tests via Selenium integration.","title":"KB489 Headless Firefox Testing"},{"location":"Manuals/kb/#kb488-rapise-objects-and-files-metadata-for-code-completion","text":"Rapise scripts and engine are mostly implemented in JS. Some people prefer to use 3 rd party editors for scripting. This is helpful when integrating Rapise tests into bigger development pipeline together with other scripts and config files. Here we explain where information about objects and types is provided for Code Completion/Intellisense support in 3 rd party editors.","title":"KB488 Rapise Objects and Files Metadata for Code Completion"},{"location":"Manuals/kb/#kb487-how-to-do-mouse-wheel-scroll-in-rapise","text":"Some controls require mouse wheel input. Here is how to do it.","title":"KB487 How to Do Mouse Wheel Scroll in Rapise"},{"location":"Manuals/kb/#kb486-automatic-learning-of-objects-in-a-java-application","text":"If you prefer writing test steps manually in JavaScript then it might be helpful to automatically learn all child objects of a Java application to make them available for scripting.","title":"KB486 Automatic learning of objects in a Java application"},{"location":"Manuals/kb/#kb485-how-to-enable-jre-accessibility-only-for-tests","text":"By default Rapise is using Java Accessibility Bridge by changing some Java Runtime Environment (JRE)-wide configuration files. So all applications using same JRE will use the modified version. If your goal is to have Accessibility only for test runs, then there is another way of doing that.","title":"KB485 How to Enable JRE Accessibility Only for Tests"},{"location":"Manuals/kb/#kb484-comparing-parts-of-images","text":"Sometimes compared images partially differ due to some dynamic part. Here we show how to do partial comparison in this case.","title":"KB484 Comparing Parts of Images"},{"location":"Manuals/kb/#kb483-renaming-objects-in-rapise","text":"Good object naming is important for test script clarity and readability. Default names are detected during record/learn session and results sometimes are cumbersome, obscure or irrelevant. Here we show how to give proper names to objects.","title":"KB483 Renaming Objects in Rapise"},{"location":"Manuals/kb/#kb482-how-to-get-contents-of-the-head-element-in-a-dom","text":"In this article we will get contents of the HEAD element to get the links to all referenced stylesheets. It may be useful if you plan to verify that a set of CSS did not change for a page.","title":"KB482 How to get contents of the HEAD element in a DOM"},{"location":"Manuals/kb/#kb479-rapise-and-citrixrdp","text":"We are getting a lot of questions on how to use Rapise with Citrix and remotely accessed VMs . Here is the answer.","title":"KB479 Rapise and Citrix/RDP"},{"location":"Manuals/kb/#kb477-inspecting-custom-ui-control-with-ui-automation-spy","text":"UI Automation is a default technology for testing desktop applications on Windows. If your application is not .NET or Java then Rapise will turn on UI Automation library during recording. If some elements in your application are not recognized or there are issues with playback of recorded steps then most likely your application is using custom UI controls. You may inspect those controls and send information to Rapise support team to get recommendations on how to proceed with testing.","title":"KB477 Inspecting custom UI control with UI Automation Spy"},{"location":"Manuals/kb/#kb475-how-to-get-all-links-on-the-page-with-rapise","text":"Sometimes you need to go through all links to check something. Here are two ways: JS and RVL of doing it with Rapise.","title":"KB475 How to Get All Links on the Page with Rapise"},{"location":"Manuals/kb/#kb473-viewing-rapise-logs-in-spira","text":"When you execute Rapise tests via Rapise Launcher - test reports and logs are automatically uploaded to Spira. But verbose level is always set to Level 1 by Rapise Launcher. If you need more detailed log set verbose to 2 or 3 in test case properties.","title":"KB473 Viewing Rapise logs in Spira"},{"location":"Manuals/kb/#kb472-read-pdf-text-wih-rapise","text":"Sometimes you need to check that some text is available in the PDF document. Sometimes you need to extract some value from it. So you need access to plain text content of the document. Here we explain how to do it with Rapise.","title":"KB472 Read PDF Text wih Rapise"},{"location":"Manuals/kb/#kb470-how-to-run-a-powershell-script-in-rapise-test","text":"To run a PowerShell script use Global.DoLaunch action.","title":"KB470 How to run a PowerShell script in Rapise test"},{"location":"Manuals/kb/#kb468-using-rapise-with-java-web-start-applications","text":"Rapise supports testing of Java applications. In the case that application is launched using Java Web Start (JWS) additional steps are needed to successfully test an application.","title":"KB468 Using Rapise with Java Web Start Applications"},{"location":"Manuals/kb/#kb466-how-to-deal-with-custom-ui-automation-controls","text":"This article is for those who test a desktop application via UI Automation library. Since desktop applications are frequently built using UI controls from different vendors and the number of such controls available on the market is pretty big (> 1k) - Rapise may not have out-of-the-box support for some controls in your application. For such cases Rapise offers a low level API to navigate UI Automation tree of elements inside an application and read/write element properties. In this tutorial we'll show how to use this API and quickly add minimal support for a custom control.","title":"KB466 How to deal with custom UI Automation controls"},{"location":"Manuals/kb/#kb465-how-to-check-if-web-element-is-really-visible-on-screen","text":"Checking if element is visible on screen may be a tricky task. It's usually not a problem in manual testing but there are nuances when you do test automation.","title":"KB465 How to check if web element is really visible on screen"},{"location":"Manuals/kb/#kb462-how-to-check-if-a-web-dropdown-element-has-specific-option-or-not","text":"If a test needs to verify existence or absence of a specific option in a dropdown you can do it via a simple function presented below.","title":"KB462 How to check if a web dropdown element has specific option or not"},{"location":"Manuals/kb/#kb458-how-to-start-rapise-launcher-on-windows-boot","text":"Windows may reboot because of various reasons. If you use a machine to run Rapise tests on regular basis than you want Rapise Launcher to be started automatically after system reboot. The most reliable method that works with any Windows edition is to use Task Scheduler.","title":"KB458 How to start Rapise Launcher on Windows Boot"},{"location":"Manuals/kb/#kb457-how-to-organize-custom-code-in-userjs","text":"Every test has a User.js file and it is a place to put custom code and functions. This code must follow a few rules.","title":"KB457 How to organize custom code in User.js"},{"location":"Manuals/kb/#kb453-working-directory-of-a-test-and-relative-paths","text":"When Rapise starts execution of a test it sets working directory. If a test refers to a file using a relative path then the absolute path is calculated using the working directory.","title":"KB453 Working Directory of a Test and Relative Paths"},{"location":"Manuals/kb/#kb448-how-to-create-a-rapise-web-object-from-xpath","text":"In some cases it may be convenient to construct Rapise Objects dynamically rather than capture in advance with record/learn. In Web tests you can do it via Navigator.Find.","title":"KB448 How to create a Rapise web object from XPath"},{"location":"Manuals/kb/#kb446-getting-browser-console-logs","text":"In some cases it may be useful to analyze browser-side logs. For example, if you are using Navigator.ExecJS action.","title":"KB446 Getting browser console logs"},{"location":"Manuals/kb/#kb444-how-to-get-title-of-a-window","text":"In this short topic we describe how to get the value of a window title. The way depends on the application type.","title":"KB444 How to get title of a window"},{"location":"Manuals/kb/#kb443-closing-application-under-test-from-rapise","text":"There are different techniques one can use to close the application being tested from Rapise. The method to choose may depend on the application type.","title":"KB443 Closing application under test from Rapise"},{"location":"Manuals/kb/#kb442-troubleshooting-rapise-install","text":"If you install Rapise on non-vanilla system, e.g. old workstation with a lot of other software, especially with anti-virus and development tools, it may end-up in a state when some components are not registered successfully and some files are blocked. In this article we describe symptoms and ways to cure.","title":"KB442 Troubleshooting Rapise Install"},{"location":"Manuals/kb/#kb439-troubleshooting-rapise-uninstall","text":"In the unlikely case of unsuccessful deinstallation of Rapise (e.g. if computer power switched off during deinstallation, or Windows Installer process terminated) there is a way to manually fix the system and complete interrupted deinstallation process.. Automatic uninstall may no longer properly work and leave files in Program Files folder.","title":"KB439 Troubleshooting Rapise Uninstall"},{"location":"Manuals/kb/#kb436-handling-toast-messages","text":"The toast message is like an alert box that is only shown for a couple of seconds when something happens (i.e. when the user clicks on a button, submits a form, etc.). This article describes how to deal with toast messages in Rapise.","title":"KB436 Handling Toast Messages"},{"location":"Manuals/kb/#kb434-how-to-send-special-keys-to-selenium-targets","text":"Sometimes you need to press Tab, Return, Backspace to the web page. Here is how you may do it through WebDriver.","title":"KB434 How to Send Special Keys to Selenium Targets"},{"location":"Manuals/kb/#kb433-using-extra-columns-in-rvl-to-add-report-attributes","text":"You may use extra RVL columns for your own purposes. In the simple case for storing additional information (notes, links). In more advanced cases extra columns may affect script behavior: add report attributes, control screenshots, control custom actions, assign variable values etc. Here we provide live example of one of such use-cases.","title":"KB433 Using Extra Columns in RVL to add Report Attributes"},{"location":"Manuals/kb/#kb432-writing-data-to-an-excel-spreadsheet","text":"In this article we describe how to write data to an external Excel spreadsheet during test playback. Both RVL and JavaScript examples are given.","title":"KB432 Writing data to an Excel spreadsheet"},{"location":"Manuals/kb/#kb431-multiple-object-locators","text":"Sometimes object location is unstable. The same object may be identified by different location path or XPath depending on application version or state.","title":"KB431 Multiple Object Locators"},{"location":"Manuals/kb/#kb430-how-to-pass-shiftcontrolf12-or-shiftcontrolf11-from-rapise","text":"Global.DoSendKeys is a way to to that, but there is also a little trick required to make it happen.","title":"KB430 How To Pass Shift+Control+F12 or Shift+Control+F11 from Rapise"},{"location":"Manuals/kb/#kb429-how-to-deal-with-dynamic-window-titles","text":"Desktop applications may use window titles to show important information to a user. In some cases the title contains subject of a displayed entity or time. Since Rapise uses window title while searching for an object during playback - the search may fail. This complication may be resolved if you replace recorded windows title with a regular expression.","title":"KB429 How to deal with dynamic window titles"},{"location":"Manuals/kb/#kb428-how-to-relearn-an-object","text":"If an object can not be found at playback and it is obvious that object location has changed because of application update (differs from the case when location is dynamic!) then the best way to fix the test is simply relearn the object.","title":"KB428 How to relearn an object"},{"location":"Manuals/kb/#kb427-how-to-master-a-dynamic-locator-with-rvl","text":"There are situations when object location attribute depends on the object data and it is not possible to record/learn all such objects in advance. In this case it may be convenient to calculate object location at playback time using FormatString and SetLocatorOpts actions of the RVL global object.","title":"KB427 How to master a dynamic locator with RVL"},{"location":"Manuals/kb/#kb422-how-to-saveload-dom-tree-in-web-spy","text":"Better to see something once than to hear about it a thousand times. If a Web element can not be found on the page using given XPATH expression and you do not know why - you have an option to save the DOM tree of the page and ask someone else with Rapise for assistance. Here is how.","title":"KB422 How to save/load DOM tree in Web Spy"},{"location":"Manuals/kb/#kb421-how-to-save-type-information-for-ui-control-in-rapise-spy","text":"Rapise supports many standard UI controls out-of-the-box. And there are even more custom UI controls that are not supported. This is why Rapise has a well-defined way of adding extensions. To add support for a custom control first it makes sense to Spy on it. If you are dealing with Managed or Java applications you can Save Type Information for the control and also save UI tree structure/properties to a file. Send this information to Rapise team to get an advice on how to add support for the new control.","title":"KB421 How to save type information for UI control in Rapise Spy"},{"location":"Manuals/kb/#kb420-firefox-64-compatibility","text":"Once you have your Firefox updated to version 64 Rapise may have problems connecting to it. Here is a quick workaround until new release of Rapise addressing the problem shows up.","title":"KB420 Firefox 64 Compatibility"},{"location":"Manuals/kb/#kb418-is-it-possible-to-automate-an-ios-web-app-using-rapise","text":"Yes, in general, Rapise can automate most web applications using mobile Safari running on iOS (either on a real or simulated device). However there are some limitations.","title":"KB418 Is it Possible to Automate an iOS Web App using Rapise?"},{"location":"Manuals/kb/#kb417-how-to-manipulate-browser-cookies-using-selenium-api-in-rapise","text":"If you run Rapise tests via Selenium WeDriver you may need to manipulate browser cookies. Learn how from this post.","title":"KB417 How to manipulate browser cookies using Selenium API in Rapise"},{"location":"Manuals/kb/#kb416-wpf-calendar-and-datepicker","text":"It is tricky do deal with WPF calendar control. Here we introduce a number of supplementary functions to copy in your project and use to modify and read Calendar and DatePicker data.","title":"KB416 WPF Calendar and DatePicker"},{"location":"Manuals/kb/#kb415-is-it-possible-to-automate-an-ios-app-store-app-using-rapise","text":"We often get asked this question: \"We have Rapise and want to automate a native iOS app that is available on the application store\", can we do it?","title":"KB415 Is it Possible to Automate an iOS App Store App using Rapise?"},{"location":"Manuals/kb/#kb412-how-to-ensure-that-a-fast-tab-is-expanded-and-scrolled-into-view-in-dynamics-ax","text":"Many views in Dynamics AX have several collapsible panes: General, Addresses, Contact information, etc. They are also known as Fast Tabs. Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+","title":"KB412 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX"},{"location":"Manuals/kb/#kb411-if-recording-of-actions-in-dynamics-ax-or-dynamics-nav-does-not-work","text":"More and more computers are equipped with High DPI displays. Though high resolution looks beautiful it may bring some issues. One of them is broken recording in Rapise.","title":"KB411 If recording of actions in Dynamics AX or Dynamics NAV does not work"},{"location":"Manuals/kb/#kb408-how-to-upgrade-rapise-to-a-newer-version","text":"Rapise is evolving product and we release new versions of it from time to time. If you plan to upgrade your copy of Rapise follow these simple steps.","title":"KB408 How to upgrade Rapise to a newer version"},{"location":"Manuals/kb/#kb407-how-to-emulate-keyboard-and-mouse-via-selenium-api-in-rapise","text":"Though Rapise can execute it's native recorded tests via WebDriver - some users prefer to write their tests in pure Selenium API. In this post we describe how to perform complex mouse and keyboard sequences via Selenium API in Rapise tests.","title":"KB407 How to emulate keyboard and mouse via Selenium API in Rapise"},{"location":"Manuals/kb/#kb406-rapise-start-page-layout-does-not-display-correctly","text":"Sometimes when you first install and open Rapise, the Start Page does not display correctly. This article explains the cause and solution to fix the issue.","title":"KB406 Rapise Start Page Layout Does Not Display Correctly"},{"location":"Manuals/kb/#kb396-mapping-spira-requirements-to-test-steps-in-bulk-using-excel-and-rapise","text":"Of the unique needs of a requirements and test management system when working in the Defense industry, specifically when designing, building, and testing mission systems, is the ability to link individual test steps to the requirements. Since v5 of SpiraTest, this has been possible inside the Spira user interface, however many customers have been looking for a way to map test steps to requirements in bulk using Excel.","title":"KB396 Mapping Spira Requirements to Test Steps in Bulk Using Excel and Rapise"},{"location":"Manuals/kb/#kb395-how-to-configure-mobile-profile-to-automatically-grant-android-application-permissions-on-install","text":"When Appium installs an application at the beginning of a test session - Android may ask for permissions (e.g. access to media files, camera, etc.). Until such prompt is dismissed - Main activity is not launched. It prevents the test from proceeding. Learn how to configure the Mobile Profile to automatically grant required permissions on install.","title":"KB395 How to configure Mobile Profile to automatically grant Android application permissions on install"},{"location":"Manuals/kb/#kb394-how-to-use-specific-version-of-chromedriver-with-appium","text":"In Mobile Spy of Rapise when switching from NATIVE_APP to WEBVIEW context you may see an error message: Chrome version must be >= 55.0.2883.0 From this article you will learn how to fix this.","title":"KB394 How to use specific version of Chromedriver with Appium"},{"location":"Manuals/kb/#kb393-doclick-vs-doclickxy","text":"When doing mouse click from Rapise it is sometimes need to use offset coordinates. You will learn: 1. When explicit coordinates are needed 2. How to determine them","title":"KB393 DoClick() vs DoClick(x,y)"},{"location":"Manuals/kb/#kb391-creating-a-purchase-order-in-dynamics-ax","text":"Learn how to break down a long scenario into manageable pieces in RVL. Creating a purchase order in Dynamics AX takes many steps: start PO process, enter basic details, fill order lines, approve, receive, invoice. In RVL you can create separate sheets to implement stages of a complex test.","title":"KB391 Creating a Purchase Order in Dynamics AX"},{"location":"Manuals/kb/#kb387-display-intellisense-for-activex-and-net-objects","text":"Sometimes when you are using Rapise, you have to use external ActiveX or .NET objects to perform specific actions. You can get Rapise to display intellisense for those objects.","title":"KB387 Display Intellisense for ActiveX and .NET Objects"},{"location":"Manuals/kb/#kb383-rpa-features-of-rapise","text":"Robotic Process Automation (RPA) is well suited for processes that are clearly defined, repeatable and rules based. With Rapise you can create software robots that can do boring repetitive tasks and free employee time for more creative work. Below you will find a brief description of RPA tasks that Rapise can do.","title":"KB383 RPA Features of Rapise"},{"location":"Manuals/kb/#kb382-android-testing-hints","text":"Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article.","title":"KB382 Android Testing Hints"},{"location":"Manuals/kb/#kb381-ios-testing-hints","text":"Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article.","title":"KB381 iOS Testing Hints"},{"location":"Manuals/kb/#kb380-how-to-insert-an-rvl-step-into-manual-test","text":"Sometimes it makes sense to automate certain steps of a Manual Test. If you prefer to implement automatic steps in RVL then include the AUTO helper function into your test.","title":"KB380 How to insert an RVL step into Manual Test"},{"location":"Manuals/kb/#kb379-processing-registration-emails","text":"Common scenario: register a user and receive registration confirmation link by email. The most painless way for doing it.","title":"KB379 Processing registration Emails"},{"location":"Manuals/kb/#kb378-rpa-importing-data-into-dynamics-ax","text":"If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics AX instance. You have a choice either to develop a software program that does the import via Dynamics AX API or you can create an automation script in Rapise.","title":"KB378 RPA - importing data into Dynamics AX"},{"location":"Manuals/kb/#kb377-how-to-find-an-object-in-the-object-tree","text":"A test may contain a lot of objects. If you want to locate an object in the object tree you may use the filter box.","title":"KB377 How to find an object in the object tree"},{"location":"Manuals/kb/#kb376-what-is-object-location","text":"When you record a test Rapise captures UI elements with which you interact and adds them as objects to the Object Tree of a test. Each object has a Type (Button, Text, Label, Tree, Grid, ...) and Location. Rapise uses Location attribute of an object to find it in the application during test execution.","title":"KB376 What is object Location?"},{"location":"Manuals/kb/#kb375-how-to-check-that-rapise-can-find-an-object-on-screen","text":"When you execute a recorded test, sometimes, Rapise may not find some object on screen and display Object is not found error message in the report. If you see that the object is visible you can check if Rapise can find it or not without running the test.","title":"KB375 How to check that Rapise can find an object on screen"},{"location":"Manuals/kb/#kb374-rpa-importing-data-into-dynamics-nav","text":"If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics NAV instance. You have a choice either to develop a software program that does the import via Dynamics NAV API or you can create an automation script in Rapise.","title":"KB374 RPA - importing data into Dynamics NAV"},{"location":"Manuals/kb/#kb372-how-to-save-content-of-a-tablegrid-into-a-spreadsheet-file","text":"If you need to make a copy of data in a Table/Grid object - you may simply save it to Excel file with a single function call.","title":"KB372 How to save content of a table/grid into a spreadsheet file"},{"location":"Manuals/kb/#kb371-sample-spira-friendly-framework-with-multiple-rvls-and-common-library","text":"Working example of test framework designed to maximize flexibility and get the most from Rapise productivity features.","title":"KB371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library"},{"location":"Manuals/kb/#kb367-storing-values-across-test-cases-and-sessions-in-rapise","text":"Sometimes test set requires a value passing through the sequence of test cases. Good example is User ID assigned during sign it and then used in subsequent test cases. Another use case is when test case requires some input value that should always be unique.","title":"KB367 Storing Values Across Test Cases and Sessions in Rapise"},{"location":"Manuals/kb/#kb366-how-to-ensure-that-a-fast-tab-is-expanded-and-scrolled-into-view-in-dynamics-nav","text":"Many views in Dynamics NAV have several collapsible panes: General, Lines, Invoice Details, etc. They are also known as Fast Tabs. Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+","title":"KB366 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV"},{"location":"Manuals/kb/#kb364-how-to-ensure-that-web-element-is-visible-before-interacting-with-it","text":"Sometimes an element on a web page may be invisible because it is out of a viewport. Real user scrolls a page vertically and horizontally to reach such an element. How to achieve same behavior with Rapise?","title":"KB364 How to ensure that web element is visible before interacting with it?"},{"location":"Manuals/kb/#kb363-how-to-define-a-profile-for-web-application-in-rapise","text":"Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for styling . There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this article you will learn how to define a profile for your web application.","title":"KB363 How to define a profile for Web Application  in Rapise"},{"location":"Manuals/kb/#kb362-how-to-automate-testing-of-unified-service-desk-for-microsoft-dynamics-365","text":"Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD.","title":"KB362 How to automate testing of Unified Service Desk for Microsoft Dynamics 365"},{"location":"Manuals/kb/#kb361-text-validation-does-not-always-fire-on-angular4-application","text":"Sometimes when you are testing an application written in Angular 4, the text box will not accept a value that is correct during playback (e.g. zip code is not in the right format) when you use DoSetText to set the value.","title":"KB361 Text Validation Does Not Always Fire on Angular4 Application"},{"location":"Manuals/kb/#kb360-overriding-rapise-settings-from-spiratest","text":"Sometimes you want to override certain Rapise settings (e.g. the Command Interval) from within SpiraTest. For example you might to run one test set more slowly than other test sets because the environment is slower. This article explains how you can easily pass settings values from SpiraTest to Rapise.","title":"KB360 Overriding Rapise Settings from SpiraTest"},{"location":"Manuals/kb/#kb359-how-to-install-the-chrome-and-firefox-extensions-offline","text":"By default, when you want to use Rapise to record and playback web tests using either Chrome or Firefox, you simply go to the appropriate web browser \"store\" and install the extension directly from the store. However sometimes you are testing web applications on a machine with no Internet Connectivity.","title":"KB359 How to Install the Chrome and Firefox Extensions Offline"},{"location":"Manuals/kb/#kb358-hot-to-disable-chrome-is-being-controlled-by-automated-test-software-message","text":"When you run a test with Selenium - Chrome profile the browser is launched with a warning message below the address bar. It can be disabled.","title":"KB358 Hot to disable \"Chrome is being controlled by automated test software\" message"},{"location":"Manuals/kb/#kb357-data-driven-testing-with-spreadsheets-and-rvl","text":"Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes. You will also learn how to define data within a test and in external spreadsheet.","title":"KB357 Data-driven testing with spreadsheets and RVL"},{"location":"Manuals/kb/#kb354-how-to-override-an-action-for-an-object-type","text":"Rapise supports many types of objects in Web, Mobile and Desktop applications. And each object has a set of actions that can be applied to it. You may want to override behavior of existing action or add a new one. Learn how from this article.","title":"KB354 How to override an action for an object type"},{"location":"Manuals/kb/#kb353-rapise-doesnt-launch-because-of-missing-windows-fonts","text":"If you don't have some of the standard Window fonts installed (e.g. Courier New), when you try and launch Rapise, it will fail to open correctly. This article provides information on the problem and solution.","title":"KB353 Rapise Doesn't Launch Because of Missing Windows Fonts"},{"location":"Manuals/kb/#kb352-converting-recorded-steps-into-functionsscenarios","text":"You have recorded some basic test scripts in Rapise, and now you want to easily extract the steps into a reusable function that can be called from the main test script. This article explains how you can do this for both RVL and JavaScript based tests.","title":"KB352 Converting Recorded Steps into Functions/Scenarios"},{"location":"Manuals/kb/#kb351-how-to-automatically-enter-user-credentials-into-windows-security-dialog-on-windows-10","text":"Some test scenarios require running processes as different user or entering user credentials into Internet Explorer security prompt. Rapise can enter user credentials into Windows Security dialog on Windows 10 automatically.","title":"KB351 How to automatically enter user credentials into Windows Security dialog on Windows 10"},{"location":"Manuals/kb/#kb349-recording-tips-for-dynamics-nav-2017-web-client-and-dynamics-365-business-central","text":"Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test.","title":"KB349 Recording tips for Dynamics NAV 2017 Web Client and Dynamics 365 Business Central"},{"location":"Manuals/kb/#kb347-how-to-record-entering-of-data-into-dynamics-nav-tables","text":"Follow these simple rules to record entering of data into Dynamics NAV grids. For example, entering of new order lines into a Sales Order.","title":"KB347 How to record entering of data into Dynamics NAV tables"},{"location":"Manuals/kb/#kb344-doing-a-substring-on-a-database-value-in-rapise","text":"When you try and do a substring on a value returned from a database, you may get an error about the object not supporting the property.","title":"KB344 Doing a SubString on a Database Value in Rapise"},{"location":"Manuals/kb/#kb343-how-to-scroll-dynamics-nav-table-vertically-and-horizontally","text":"Rapise 5.7+ performs scrolling automatically before clicking on a cell. Also there is DoScroll action that does explicit scrolling. In Rapise 5.6 and below use this simple function to scroll your Dynamics NAV table left, right, up, bottom.","title":"KB343 How to scroll Dynamics NAV table vertically and horizontally"},{"location":"Manuals/kb/#kb341-jumping-to-the-definition-of-a-user-function","text":"When you have a user defined function in Rapise, you sometimes want to jump to it.","title":"KB341 Jumping to the Definition of a User Function"},{"location":"Manuals/kb/#kb340-how-to-do-a-nested-loop-with-rapise-visual-language-rvl","text":"Sometimes you want to have multiple nested loops to test a set of test data (for example loop over a list of users, and for each user, loop over a list of browsers). In JavaScript you can use standard nested loops, this article explains how you can do the same using RVL.","title":"KB340 How to Do a Nested Loop with Rapise Visual Language (RVL)"},{"location":"Manuals/kb/#kb339-where-does-rapise-log-errors","text":"Sometimes when you are using Rapise, you see an error on the screen, or something doesn't work as expected. In that case, our support team will need a copy of the log file that is likely to contain the error message. This article explains how to get that log file.","title":"KB339 Where Does Rapise Log Errors?"},{"location":"Manuals/kb/#kb338-dealing-with-unexpected-popup-objects","text":"Some applications show unexpected popup windows. This could be feature announcements, update reminders, license expiration reminders, alerts, internal messengers and so on. Here we are going to show a solution for this problem.","title":"KB338 Dealing with Unexpected Popup Objects"},{"location":"Manuals/kb/#kb336-ways-to-deal-with-flaky-tests","text":"When you do UI test automation and create a big enough test coverage the probability of having certain portion of flaky tests increases. In many cases there is no reasonable way in terms of time and resources to mitigate all flakiness from the test coverage. In some cases even a flaky test may still be useful.","title":"KB336 Ways to deal with flaky tests"},{"location":"Manuals/kb/#kb335-what-is-ui-test-automation-framework","text":"At Inflectra we think that UI Test Automation Framework is a set of tools with specific features that enables QA teams to develop and run tests, and effectively analyze test execution results.","title":"KB335 What is UI Test Automation Framework?"},{"location":"Manuals/kb/#kb334-how-to-launch-a-browser-in-private-mode","text":"In some cases it makes sense to launch a browser in private mode to ensure exact same conditions every time you run a test. This helps to cope with such things as remembered accounts or pending sessions not disconnected by a previous test. Learn how to properly adjust browser profiles from this article.","title":"KB334 How to launch a browser in private mode?"},{"location":"Manuals/kb/#kb333-installing-rapise-browser-extensions-without-internet-access","text":"Normally you can install the add-ons for Chrome and Firefox directly from the browser's app store (just search for Rapise). This is the easiest option, and avoids the need to run the browsers in developer mode.","title":"KB333 Installing Rapise Browser Extensions without Internet Access"},{"location":"Manuals/kb/#kb331-how-to-check-if-rapise-can-test-my-delphi-application","text":"In order for Rapise to be able to test a thick-client desktop application written using Delphi, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://edn.embarcadero.com/article/33642 This article demonstrates how to check your application to see if it supports MSAA.","title":"KB331 How to Check if Rapise Can Test My Delphi Application"},{"location":"Manuals/kb/#kb330-compare-two-spreadsheets-in-rapise","text":"Sometimes you need to compare two tables. Here we introduce a function to compare two spreadsheets.","title":"KB330 Compare two SpreadSheets in Rapise"},{"location":"Manuals/kb/#kb328-using-rapise-mobile-with-browserstack","text":"BrowserStack supports automated browser testing via Selenium and Appium on real iOS and Android devices. Learn how to configure Rapise to connect to Browserstack via Appium.","title":"KB328 Using Rapise Mobile with Browserstack"},{"location":"Manuals/kb/#kb326-windows-scripting-host-crashes-when-playing-back-rapise-rvl-script-after-windows-10-update","text":"Unfortunately, Windows10 has a nasty habit of frequently updating itself and then breaking existing applications. We found that the February 14 th , 2018 Windows10 update corrupted the Excel device driver that Rapise uses to access the RVL test script spreadsheet during playback.","title":"KB326 Windows Scripting Host Crashes When Playing Back Rapise RVL Script after Windows 10 Update"},{"location":"Manuals/kb/#kb325-running-nightly-tests-with-rapiselauncher-on-vm-with-rdp","text":"It is common to use UI tests with RDP connected to remote VM. By default this works only while RDP window is open and client is connected. On disconnect remote session gets locked and UI becomes unavailable for the test. This topic covers a workaround.","title":"KB325 Running nightly tests with RapiseLauncher on VM with RDP"},{"location":"Manuals/kb/#kb324-list-files-from-folder-in-rvl","text":"Sometimes it is required to have list of files from some folder. Here we demonstrate how to get this list and how to iterate through it in RVL.","title":"KB324 List Files from Folder in RVL"},{"location":"Manuals/kb/#kb323-how-to-launch-a-web-browser-in-rapise-with-a-specific-size","text":"Sometimes when recording a test against a mobile responsive web site, it is useful to be able to record on the local browser (before playing it back against a cloud service such as SauceLabs, Browserstack, etc.). However you want to always record using a specific browser window size.","title":"KB323 How to launch a web browser in Rapise with a specific size"},{"location":"Manuals/kb/#kb322-how-to-run-cross-browser-tests-on-browserstack","text":"BrowserStack enables testing of your website for cross browser compatibility on real browsers. Instant access to multiple desktop and mobile browsers. Learn how to configure Selenium profiles in Rapise to enable connection to BrowserStack services. Requires Rapise 5.3+","title":"KB322 How to run cross-browser tests on BrowserStack"},{"location":"Manuals/kb/#kb320-using-rvl-loop-to-generate-sequence-of-file-names","text":"We show how to do data generation for test scenario using RVL Variable loop in Rapise. This sample shows how to produce a sequence of filenames: FILE1.txt, FILE2.txt, FILE3.txt and so on.","title":"KB320 Using RVL Loop to generate sequence of file names"},{"location":"Manuals/kb/#kb318-troubleshooting-the-the-pipe-is-being-closed-error-during-rapise-installation","text":"Sometimes when you try and install Rapise, you will see the error message \"The Pipe is Being Closed\", this article provides some solutions for this message.","title":"KB318 Troubleshooting the \"The Pipe is being Closed\" Error during Rapise Installation"},{"location":"Manuals/kb/#kb317-read-external-excel-spreadsheet-in-rvl","text":"Attaching to external .XLS spreadsheet in RVL may be easily done in RVL by use of Range type of the Map.","title":"KB317 Read external Excel spreadsheet in RVL"},{"location":"Manuals/kb/#kb314-how-to-start-dynamics-nav-client","text":"Check that Dynamics NAV client is installed on a machine and launch it if it is not started yet with this simple function.","title":"KB314 How to start Dynamics NAV client"},{"location":"Manuals/kb/#kb313-testing-visualforce-components-in-salesforce","text":"Visualforce is the component-based user interface framework for the Force.com platform. Visualforce components can be tested with Rapise just like default Salesforce interface.","title":"KB313 Testing Visualforce components in Salesforce"},{"location":"Manuals/kb/#kb312-accessing-dom-elements-by-attributes-in-rvl","text":"It is possible to access such objects form RVL using one of the methods shown in this article.","title":"KB312 Accessing DOM elements by Attributes in RVL"},{"location":"Manuals/kb/#kb310-custom-attributes-for-xpath-generation-in-the-rapise-web-spy","text":"Sometimes web applications use custom DOM attributes for internal purposes. XPath locators containing those attributes are sometimes more stable and resilient. Rapise contains features intended to simplify utilization of such attributes.","title":"KB310 Custom Attributes  for XPath Generation in the Rapise Web Spy"},{"location":"Manuals/kb/#kb308-how-to-include-file-with-common-function-in-test","text":"Sometimes it is useful to have common functionality and variables in a separate JavaScript source file. This topic explains the steps to do it.","title":"KB308 How to include file with common function in test"},{"location":"Manuals/kb/#kb307-how-to-check-if-rapise-can-test-my-qt-application","text":"In order for Rapise to be able to test a thick-client desktop application written using Qt, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://doc.qt.io/qt-5/accessible-qwidget.html This article demonstrates how to check your application to see if it supports MSAA.","title":"KB307 How to Check if Rapise can Test my Qt Application"},{"location":"Manuals/kb/#kb305-how-to-run-a-program-as-a-different-user","text":"Sometimes a test needs to run a process as a different user (not the logged in user executing Rapise). It is not possible to use runas command for this purpose because it forces a user to type a password manually. From this short article you will learn how to reach the goal.","title":"KB305 How to run a program as a different user"},{"location":"Manuals/kb/#kb304-using-globaldoencrypt-and-globaldodecrypt-to-hide-passwords","text":"Sometimes passwords need to stay secure. Here are simple steps on how to hide some information in Rapise. Here we will demonstrate usage of Global.DoDecrypt and Global.DoEncrypt available since Rapise 5.4.","title":"KB304 Using Global.DoEncrypt and Global.DoDecrypt to Hide Passwords"},{"location":"Manuals/kb/#kb303-how-to-run-cmd-shell-commands","text":"In some cases a test needs to run a Windows shell command (e.g. dir, ipconfig, gpresult) and capture/parse output. Learn how to do this in Rapise from this short article.","title":"KB303 How to run CMD shell commands"},{"location":"Manuals/kb/#kb302-about-rapise-imagefinder","text":"Sometimes the goal is to find specific image on the screen. It may be special symbol, map pointer or an icon. This topic contains ImageFinder and sample test demonstrating its capabilities.","title":"KB302 About Rapise ImageFinder"},{"location":"Manuals/kb/#kb301-ways-to-slow-down-test-execution","text":"There are several types of delays one can use to slow down test execution. Implicit Explicit fixed Explicit with timeout","title":"KB301 Ways to slow down test execution"},{"location":"Manuals/kb/#kb300-running-rapise-gui-tests-with-jenkins","text":"Recommended approach is to use SpiraTest and RapiseLauncher designed for this task. In some cases it is not an option and we need to execute a test directly.","title":"KB300 Running Rapise GUI Tests with Jenkins"},{"location":"Manuals/kb/#kb299-installing-rapise-on-pc-without-internet-access","text":"In general Rapise installs on disconnected PC without problems. However, if PC contains old version of windows without most recent root certificates then installer may fail due to inability to check application authenticode certificate. This topic explains a workaround.","title":"KB299 Installing Rapise on PC without Internet Access"},{"location":"Manuals/kb/#kb294-how-to-measure-operation-performance-in-rapise","text":"Sometimes we need to track the time taken by an operation. This KB contains suggested approach for Rapise and working sample.","title":"KB294 How to Measure Operation Performance in Rapise"},{"location":"Manuals/kb/#kb293-how-to-store-rapise-tests-in-git-and-run-them-with-spirateam","text":"In some cases it is convenient to store tests in the same Git repository where source code of an application under test is located. For example, if you are using Visual Studio Team Services. From this article you will learn how to execute Rapise tests stored in a Git repository with SpiraTeam and leverage the power of SpiraTeam reporting and analysis features.","title":"KB293 How to store Rapise tests in Git and run them with SpiraTeam"},{"location":"Manuals/kb/#kb292-dynamics-nav-support-in-rapise","text":"In this guide we describe how to master tests for Dynamics NAV application using Rapise. Rapise provides a complete automated testing solution that can handle all of your technologies in one environment. With support for web, mobile and desktop applications and a wide variety of third-party component libraries. Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries.","title":"KB292 Dynamics NAV Support in Rapise"},{"location":"Manuals/kb/#kb291-how-to-enabledisable-screenshots-during-script-execution","text":"Sometimes we need to disable screenshots for a while (during some long loop) or when doing some specific operations. Here we show how to do it.","title":"KB291 How to Enable/Disable screenshots during script execution"},{"location":"Manuals/kb/#kb290-how-to-create-spira-friendly-test-set-with-shared-functions-and-files","text":"The notion of the integrated test framework usually implies common functions and shared data between tests. Here we provide sample configuration making sharing Spira-friendly.","title":"KB290 How to create Spira-friendly Test Set with shared functions and files"},{"location":"Manuals/kb/#kb289-how-object-recognition-works-in-rapise","text":"This article contains of overview of object recognition by UI automation tools in general and its implementation in Rapise in particular.","title":"KB289 How Object Recognition Works in Rapise"},{"location":"Manuals/kb/#kb288-search-by-name-text-xpath-or-attribute-on-the-web-page","text":"It is common task to search for an element by its text. In some cases it is the fastest way to find one. This approach works in web browsers and selenium targets.","title":"KB288 Search by Name, Text, XPath or Attribute on the Web Page"},{"location":"Manuals/kb/#kb285-using-bytext-and-byname-locators-in-winforms","text":"byname and bytext is an universal feature common for Web, UI Automation and WinForms (Managed) targets. Here we consider WinForms (.NET) desktop applications.","title":"KB285 Using bytext and byname Locators in WinForms"},{"location":"Manuals/kb/#kb284-model-based-ui-testing","text":"Model-based testing is widely used for a long time for testing software systems. Typical application fields include telecommunication protocols, embedded software, server software, automotive and reactive systems. What about model-based testing of desktop, web and mobile GUI applications?","title":"KB284 Model-Based UI Testing"},{"location":"Manuals/kb/#kb283-using-bytext-and-byname-locators-in-ui-automation","text":"byname and bytext simplify finding objects by text or by name.","title":"KB283 Using bytext and byname locators in UI Automation"},{"location":"Manuals/kb/#kb282-elastic-xpath-expressions","text":"When working on UI test automation for a web application a test engineer has to deal with XPATH expressions. They are used to locate UI elements during test execution. It is very important to use such XPATH expressions that do not break when developers update the application. Good XPATH expressions which still find required elements after UI modification can be referred to as resilient or elastic. In this article we'll consider several examples of elastic XPATH expressions.","title":"KB282 Elastic XPATH Expressions"},{"location":"Manuals/kb/#kb281-how-to-get-the-most-out-of-code-complete-feature-in-rapise","text":"Writing JavaScript code in Rapise is fun and easy. It has full featured editor with folding, syntax highlighting and code complete. From this article you will learn how to enhance Rapise code complete with support for external types.","title":"KB281 How to get the most out of code complete feature in Rapise"},{"location":"Manuals/kb/#kb280-how-to-specify-selenium-or-appium-capabilities-which-are-not-available-through-rapise-ui","text":"From this article you will learn how to pass additional parameters to Selenium or Appium target, even if they can not be specified in a profile. This recipe can be also used to override parameters of a profile right from a test code. Requires Rapise 5.3+","title":"KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI?"},{"location":"Manuals/kb/#kb279-how-to-run-cross-browser-and-mobile-tests-on-sauce-labs","text":"Sauce Labs allows users to run tests in the cloud on different combinations of browser and OS versions as well as mobile devices and emulators. Learn how to configure Selenium and Mobile profiles in Rapise to enable connection to Sauce Labs services. Requires Rapise 5.3+","title":"KB279 How to run cross-browser and mobile tests on Sauce Labs?"},{"location":"Manuals/kb/#kb278-how-to-run-a-cross-browser-test-on-a-mobile-device","text":"Let's assume you have a cross-browser test which was created on desktop and can be successfully executed on any desktop browser (Chrome, Firefox, Internet Explorer, Safari). You want to execute this test on your mobile devices or emulators. Learn how from this article. Requires Rapise 5.3+","title":"KB278 How to run a cross-browser test on a mobile device?"},{"location":"Manuals/kb/#kb277-tips-tricks-for-rapise-and-dynamics-365-for-sales","text":"Essential information to get started with testing Dynamics 365 for Sales.","title":"KB277 Tips &amp; Tricks for Rapise and Dynamics 365 for Sales"},{"location":"Manuals/kb/#kb276-how-to-upgrade-chrome-browser-on-android-emulator","text":"Appium requires certain version of Chrome to work with. Even Android 7.0 is shipped with Chrome 51 and this is too old version. From this article you will learn how to upgrade Chrome on your Android emulator.","title":"KB276 How to upgrade Chrome browser on Android emulator"},{"location":"Manuals/kb/#kb275-json-in-rapise","text":"This topic describes how to read and write JSON data in Rapise","title":"KB275 JSON in Rapise"},{"location":"Manuals/kb/#kb274-using-rapise-mobile-with-a-cloud-device-farm","text":"Rapise connects to mobile devices (iOS and Android) using the standard Appium mobile device testing API (similar to Selenium WebDriver for web browsers). This articles describes how you can use Rapise to connect to a mobile device farm using the Appium mobile device profiles inside Rapise. We use Kobiton as an example.","title":"KB274 Using Rapise Mobile with a Cloud Device Farm"},{"location":"Manuals/kb/#kb273-rapise-tips-tricks-workarounds-when-testing-dynamics-ax-2012","text":"During the evaluation of Rapise 5.2 for Microsoft Dynamics AX testing, a customer collected the following tips and tricks from our support team (thanks Maxime!).","title":"KB273 Rapise Tips, Tricks &amp; Workarounds when Testing Dynamics AX 2012"},{"location":"Manuals/kb/#kb272-microsoft-dynamics-solutions-which-one-do-you-have","text":"As described in a recent article, Microsoft Dynamics has been going through major changes in the past year, there are now many different products that all bear the 'Microsoft Dynamics' brand, including older legacy tools such as Dynamics AX, NAV, GP, SL and CRM and the new Dynamics 365 platform which has different modules (Sales, Operations, etc.). This article helps you know which tool you have when you need help from our Rapise support team.","title":"KB272 Microsoft Dynamics Solutions - Which One Do You Have?"},{"location":"Manuals/kb/#kb271-headless-chrome-testing","text":"Headless Chrome on Windows is introduced in version 60 . Learn how to configure Rapise to run cross-browser tests using non-GUI mode of Chrome.","title":"KB271 Headless Chrome Testing"},{"location":"Manuals/kb/#kb270-using-object-id-as-rvl-paramvalue","text":"Sometimes Object ID used as a parameter to the function or object Action (such as Global.DoWaitFor(objId) ). RVL contains special feature intended to make pick-up of object from the list easier.","title":"KB270 Using Object ID as RVL ParamValue"},{"location":"Manuals/kb/#kb269-different-ways-of-slowing-down-rapise-to-handle-slow-applications","text":"We often get requests for ways to slow down the playback speed of Rapise so that the application under test (AUT) has time to respond. This article describes the different ways and provides suggestions as to when you should use each one.","title":"KB269 Different Ways of Slowing Down Rapise to Handle Slow Applications"},{"location":"Manuals/kb/#kb268-how-to-automate-drag-and-drop-from-windows-explorer-into-google-drive","text":"Modern technologies allow to drag&drop files into a browser window to upload them to a server. Such a feature works for example in Chrome browser in Google Drive and Photo applications. In this howto post we'll show how to automate drag&drop of files from Windows Explorer to Google Drive opened in Chrome.","title":"KB268 How to automate Drag and Drop from Windows Explorer into Google Drive"},{"location":"Manuals/kb/#kb266-how-to-integrate-rapise-and-elasticsearch","text":"Rapise is a test automation platform for desktop, web and mobile applications. It is designed for building automated and manual end-to-end UI tests and fits any TestOps infrastructure. Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. From this article you will learn how to integrate Rapise and Elasticsearch together.","title":"KB266 How to integrate Rapise and Elasticsearch"},{"location":"Manuals/kb/#kb264-how-to-integrate-rapise-with-jasmine-bdd-framework","text":"Jasmine is a behavior-driven development framework. If you want to test UI with Rapise in a behavior-driven way learn how to tie Rapise and Jasmine together.","title":"KB264 How to integrate Rapise with Jasmine BDD Framework"},{"location":"Manuals/kb/#kb263-how-to-fix-ie-11-recordingplayback-on-windows-64-bit","text":"Symptoms: When new recording is started Rapise always opens new IE window Spy does not show DOM tree During playback no object is found","title":"KB263 How to fix IE 11 recording/playback on Windows 64-bit"},{"location":"Manuals/kb/#kb262-debugging-rapise-dom-libraries-in-chrome-using-vs-code","text":"Rapise can be extended with DOM libraries to add support for custom UI controls used in modern web applications. Many of such applications work in Chrome browser. So there may be a need to debug Rapise code embedded into Chrome via Rapise Extension for Chrome. Most powerful and easy way to do this is to add VS Code into the equation. From this article you will learn how to tie Rapise, Chrome and VS Code together.","title":"KB262 Debugging Rapise DOM libraries in Chrome using VS Code"},{"location":"Manuals/kb/#kb260-handling-auth-prompt-in-rapise","text":"Some web site show Auth prompt when entering some area. The prompt is rendered differently by different browser. Here we show how to bypass the prompt in automation scripts.","title":"KB260 Handling Auth prompt in Rapise"},{"location":"Manuals/kb/#kb259-how-i-added-support-for-jpopupmenu-automation-in-1-hour","text":"Example of adding support for Java UI control in Rapise.","title":"KB259 How I added support for JPopupMenu automation in 1-hour"},{"location":"Manuals/kb/#kb257-using-rapise-visual-language-rvl-51-with-multiple-sheets","text":"With the release of the new Rapise Visual Language (RVL), there have been some questions about how to use it to organize tests, subtests and multiple sheets. For example: I see that I can create multiple sheets. How does Rapise handle multiple sheets? Does it run each in order or can they be run separately? Is it possible to call a test in RVL from another test in RVL? In other worlds, how can I create subtests and scenarios using RVL?","title":"KB257 Using Rapise Visual Language (RVL) 5.1 with Multiple Sheets"},{"location":"Manuals/kb/#kb249-resources-for-learning-javascript","text":"One of the most popular programming languages in the world is JavaScript. Initially conceived by Netscape as a web page scripting language, christened JavaScript to leverage the popularity of Java (which was fairly new and sexy at the time) and now used for servers (NodeJS), desktop apps (ReactNative) and for us at Inflectra, the core technology at the heart of our Rapise test automation system. This article provides some useful resources for those first learning the language.","title":"KB249 Resources for Learning JavaScript"},{"location":"Manuals/kb/#kb248-rapise-recordingplayback-throw-error-due-to-ansicon-application-conflict","text":"A customer of ours was using Rapise on a computer that was also running the ANSICON application. This changed some of the settings in the Windows registry that affected the Windows command-line parser. This article explains how to clean up the command-line to allow both applications to work correctly together.","title":"KB248 Rapise Recording/Playback Throw Error Due to ANSICON application conflict"},{"location":"Manuals/kb/#kb247-formatting-dates-in-javascript","text":"This is a short sample demonstrating how one can format a date","title":"KB247 Formatting dates in JavaScript"},{"location":"Manuals/kb/#kb243-changing-rest-headers-when-web-service-testing","text":"When performing web service testing using Rapise you may need to change the HTTP headers being sent with the request. This article provides suggestions on the different ways of doing this.","title":"KB243 Changing REST Headers When Web Service Testing"},{"location":"Manuals/kb/#kb242-how-to-execute-a-javascript-function-when-its-name-as-a-string","text":"Sometimes it is convenient to store function names in strings and use those strings to call actual functions. The article describes two ways of how you can do this in Rapise.","title":"KB242 How to execute a JavaScript function when its name as a string"},{"location":"Manuals/kb/#kb235-magic-tricks-of-the-triple-click","text":"This article shows how to select paragraph of text using various types of mouse activities. Also it demonstrates use of clipboard Global.DoTrim function. Working example is attached.","title":"KB235 Magic Tricks of the Triple Click"},{"location":"Manuals/kb/#kb233-suppressing-text-in-rapise-logs-for-sensitive-data","text":"A customer had a question - is there a way to suppress the DoSetText or DoSendkeys methods from sending their text to the logs. They didn't want users to see this text in the Rapise (and SpiraTest) logs because they contained sensitive information (e.g. passwords).","title":"KB233 Suppressing Text in Rapise Logs for Sensitive Data"},{"location":"Manuals/kb/#kb232-rapise-tip-how-to-handle-a-webpage-that-displays-an-alert-when-you-navigate-away","text":"One of our users had a webpage with a form. When it was submitted partially filled, the page came back (after being processed on the backend) with some errors about incomplete form. If the user tried to navigate away from this page via a link (or close the page/browser tab) he was prompted with browser's standard \"Are you sure you want to leave this page?\" dialog. He needed a way for Rapise to handle this popup when recording and playing back the web test.","title":"KB232 Rapise Tip - How to Handle a Webpage that Displays an Alert when You Navigate Away"},{"location":"Manuals/kb/#kb231-adobe-flash-flex-air-support-in-rapise","text":"Rapise 4.0 supports the testing of Adobe AIR Flex applications using the Adobe Integrated Runtime (AIR). Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.Rapise 4.0 supports the testing of Adobe Flex applications that are executed by the Adobe Flash Player inside the Internet Explorer, Mozilla Firefox or Google Chrome web browsers. Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.[We have depreciated support for testing Adobe Flex/Flash applications in Rapise 5.0 and later, so this article is provided for use by existing customers]","title":"KB231 Adobe Flash / Flex / AIR Support in Rapise"},{"location":"Manuals/kb/#kb230-unusual-case-where-rapise-cannot-click-on-hyperlinks-in-ie","text":"We have found an occasional situation where Rapise is not able to click on hyperlinks ( tags) when you playback a test on IE. The same test works fine on other computers and on other browsers on the same computer.","title":"KB230 Unusual case where Rapise Cannot Click on Hyperlinks in IE"},{"location":"Manuals/kb/#kb228-web-object-not-found-in-ie-when-object-has-0px-size","text":"We had a customer with a problem related to having elements with complex display styles applied inside an HTML anchor tag . The anchor tag was reporting back as having zero size (0px) in IE, so when Rapise tried to locate it to click on it, the browser was not able to find it.","title":"KB228 Web Object Not Found in IE when Object has 0px Size"},{"location":"Manuals/kb/#kb227-executing-a-windows-bat-batch-file-from-rapise","text":"Sometimes you need to run a Windows batch file (.BAT) from Rapise. Unlike an executable, you cannot simply use Global.DoLaunch() to execute it since it's not actually an application. This article provides the code you need to use.","title":"KB227 Executing a Windows .BAT Batch File from Rapise"},{"location":"Manuals/kb/#kb224-testing-popup-windows-using-internet-explorer","text":"When you are testing a web application that has popup windows (where the popup is a whole new browser window) you will need to make a slight change to the test script to enable it to playback successfully in Internet Explorer (no change is needed for Chrome or Firefox).","title":"KB224 Testing Popup Windows using Internet Explorer"},{"location":"Manuals/kb/#kb223-troubleshooting-java-swingawt-testing","text":"When you are testing a Java application using either Swing or AWT you may run into some issues due to the environment. This article collects some of these common cases and provides the recommended solutions.","title":"KB223 Troubleshooting Java Swing/AWT Testing"},{"location":"Manuals/kb/#kb221-where-do-i-get-the-microsoft-script-debugger","text":"When you install Rapise onto a computer that does not have Visual Studio or the Microsoft Script Debugger installed you will get a message to install the debugger. This article provides the download link to the necessary debugger.","title":"KB221 Where do I get the Microsoft Script Debugger"},{"location":"Manuals/kb/#kb218-testing-adobe-air-applications-on-mobile-devices","text":"We have had a couple of questions about whether Rapise can test Adobe AIR based applications running on mobile devices using platforms such as Android. This article provides some background and also describes the support Rapise has.","title":"KB218 Testing Adobe AIR Applications on Mobile Devices"},{"location":"Manuals/kb/#kb219-what-to-do-when-rapise-doesnt-display-the-web-page-dom","text":"Sometimes when testing certain web applications instead of the browser DOM tree appearing you will see strange results such as \"Node0\" appearing. This is caused by the application using nested frames with potentially different security origins. This article describes some of the common issues and describes the solution.","title":"KB219 What to do When Rapise Doesn't Display the Web Page DOM?"},{"location":"Manuals/kb/#kb217-rapise-cannot-find-alllibrariesjson-file-during-recordingplayback","text":"When recording or playing back a test script on a new PC you may get an error message that Rapise cannot find the path to \"AllLibraries.json\".This article provides instructions on how to fix the issue.","title":"KB217 Rapise - Cannot Find AllLibraries.json file during Recording/Playback"},{"location":"Manuals/kb/#kb216-testing-multiple-web-browser-tabs-at-once-in-chrome","text":"Sometimes you have a web test where you need to test the contents of two browser tabs at the same time in Google Chrome. For example you may have an application which opens up a second browser tab and you want to test that changes in the second tab show up correctly in the first tab. This article describes how to perform this kind of testing.","title":"KB216 Testing Multiple Web Browser Tabs at Once in Chrome"},{"location":"Manuals/kb/#kb215-fixing-the-method-not-found-error-when-using-appium-for-mobile-testing-in-rapise","text":"If you receive the following error message when performing Mobile device testing with Rapise, this article provides the necessary solution:Method not found:'OpenQA.Selenium.RemoteCommandInfoRepositoryOpenQA.Selenium.RemoteCommandInfoRepository.get_Instance()'.","title":"KB215 Fixing the 'Method Not Found' error when using Appium for Mobile Testing in Rapise"},{"location":"Manuals/kb/#kb209-testing-web-applications-that-use-svg","text":"One of the more challenging types of web application is that with uses embedded SVG (Scalable Vector Graphics) in additional to HTML DOM elements. This article describes how to use Rapise to write automated testing scripts for such applications.","title":"KB209 Testing Web Applications that use SVG"},{"location":"Manuals/kb/#kb205-rapise-3x-40-does-not-connect-to-chrome-x64-bit","text":"When you try and connect to the 64-bit version of the Google Chrome web browser using Rapise 4.0 (or earlier) you may get the error 'Connection to Chrome Failed!'. This issue has been fixed in the Rapise 4.1 release, but for those customers using Rapise 4.0 or earlier, this article provides two solutions.","title":"KB205 Rapise 3.x / 4.0 Does not Connect to Chrome x64 Bit"},{"location":"Manuals/kb/#kb204-working-with-wpf-and-uiautomation-structures","text":"It is a common situation that desktop applications written using Microsoft Windows Presentation Framework (WPF) will have complex layouts including tabs, splitters and panels having custom grids and tables inside. This article provides help in dealing with such situations, including how to dynamically find items.","title":"KB204 Working with WPF and UIAutomation Structures"},{"location":"Manuals/kb/#kb202-reading-the-details-of-files-on-the-windows-file-system","text":"In the KB62 article - Accessing Files using Rapise we explain how to access the names, versions and locations of files on the Windows file system. One customer asked - can we verify any file details other than version. This article provides sample code for accessing other information.","title":"KB202 Reading the Details of Files on the Windows File System"},{"location":"Manuals/kb/#kb203-accessing-the-windows-registry-using-rapise","text":"Sometimes when testing local/desktop applications you need to access the Windows registry to verify that keys exist or that keys have specific values. For example you may be testing that a DLL was successfully registered. This article provides information on the 'UsingRegistry' sample that comes with Rapise.","title":"KB203 Accessing the Windows Registry using Rapise"},{"location":"Manuals/kb/#kb201-error-attaching-to-excel-spreadsheet-when-using-rapise-40-with-ms-excel-64-bit","text":"When you are using the global Rapise Spreadsheet object on a system running the 64-bit version of MS-Office, you may get an error attaching to the spreadsheet. This article describes the cause of the issue and provides a solution and workaround.","title":"KB201 Error attaching to Excel spreadsheet when using Rapise 4.0 with MS-Excel 64-bit"},{"location":"Manuals/kb/#kb200-testing-ms-word-with-rapise","text":"We had some customers that were looking to record some tests against Microsoft Word 2010. When testing against MS-Word 2010 there are actually two parts to the application:There is the application ribbon (the menus, navigation, etc.)There is the MS-Word text window where your content is actually displayedThis article provides some strategies for dealing with both areas.","title":"KB200 Testing MS-Word With Rapise"},{"location":"Manuals/kb/#kb194-when-recording-with-chrome-rapise-does-not-record-actions-within-frames","text":"When creating web tests with Chrome, objects within cross-frames are not recognized by the Rapise Web Spy and recorder. This article gives a solution.","title":"KB194 When recording with Chrome, Rapise does not record actions within frames"},{"location":"Manuals/kb/#kb193-using-rapise-to-test-websites-that-contain-frames","text":"If the website under test contains frames, that presents some challenges to test automation. This article gives tips for success and explains the current limitations.","title":"KB193 Using Rapise to test websites that contain frames"},{"location":"Manuals/kb/#kb192-different-xpath-options-in-rapise-40","text":"When testing complex data-driven web applications using Rapise, it is helpful to understand the different ways that Rapise can automatically learn the objects. Rapise can learn an object using either XPATH or CSS. In the case of XPATH there are several strategies that Rapise can use to make the testing more robust. This article describes these strategies and provides some suggestions about which one is the best to use for different scenarios.","title":"KB192 Different XPath Options in Rapise 4.0"},{"location":"Manuals/kb/#kb191-webspy-attribute-filtering","text":"The v4.0 release of Rapise adds enhanced attribute filtering to the Web Spy as well as different options for creating XPath queries automatically. This article explains why you would want to use these features and how they can make the testing of complex data-driven web applications much easier.","title":"KB191 WebSpy Attribute Filtering"},{"location":"Manuals/kb/#kb185-using-globaldoloadobjects-to-use-rapise-objects-from-external-file","text":"One of the challenges using an automated testing tool is to organize things in a way that it is logical enough to find something quickly, structured enough to avoid duplication and simple enough to maintain and upgrade. This statement is also true for Rapise objects. A common requirement is to deal with the same objects within a flow of different test cases. For instance, if an application has \u201cLog In\u201d functionality then many, many tests will require logging-in and logging-out. Each test will have this object in its own object tree. However this causes trouble if a change in the application affects the recognition of the Log In object. All of the test cases will need to be updated. In such situations it is much more convenient to have the \u201cLog In\u201d objects placed into their own file and re-used by other tests.","title":"KB185 Using Global.DoLoadObjects to Use Rapise Objects from External File"},{"location":"Manuals/kb/#kb186-globaldowaitfor-vs-globaldowaitforproperty","text":"The most commonly used synchronization option to make Rapise wait until the application under test (AUT) is ready is the Global.DoSleep action. However having just a sleep may cause an unnecessary delay because we have to consider the maximum wait interval and it may be much less on average. Rapise includes some additional synchronization options for more fine grained control of the test case flow.","title":"KB186 Global.DoWaitFor vs Global.DoWaitForProperty"},{"location":"Manuals/kb/#kb187-using-checkobjectexistsxpathorobjid-to-see-if-web-object-exists-on-page","text":"This articles describes how you can use the Navigator.CheckObjectExists(...) action to see if an element exists on a web page and how it differs from the Global.DoWaitFor / DoWaitForProperty actions that are described in another article.","title":"KB187 Using CheckObjectExists(xpathOrObjId) to See if Web Object Exists on Page"},{"location":"Manuals/kb/#kb184-what-is-the-purpose-of-the-testerendtest-function","text":"The Tester.EndTest() function in Rapise is described as: Marks end of a currently executed test. Calculates test results and performs finalization of test execution. We have found that some of our customers have been confused as what the purpose of this function is.","title":"KB184 What is the purpose of the Tester.EndTest() Function?"},{"location":"Manuals/kb/#kb183-desktop-application-testing-choosing-the-right-library","text":"Suppose we have a situation that a thick-client (desktop) application under test (AUT) is based on a technology that is too old or not completely supported by Rapise. Rapise has a number of libraries for different types of apps. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails.","title":"KB183 Desktop Application Testing - Choosing the Right Library"},{"location":"Manuals/kb/#kb182-how-to-automate-the-testing-of-tinymce-rich-text-boxes-using-rapise","text":"DEPRECATED Method described in this article does not work any more because browser security has changed since 2015. Now it is not possible to directly access client side JavaScript model. We have a new article that explains how to automate TinyMCE https://www.inflectra.com/Support/KnowledgeBase/KB541.aspx When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. When you are using the popular TinyMCE rich text box you have more options to automate it by using its special client-side JavaScript API.","title":"KB182 How to automate the testing of TinyMCE Rich Text Boxes using Rapise"},{"location":"Manuals/kb/#kb181-dynamically-constructing-the-rest-file-urls-to-test-rest-apis","text":"Sometimes when using Rapise to test REST web services, you want to be able to dynamically change the base URL of the web service yet still use the same URL template and method information. This article describes a process for achieving this.","title":"KB181 Dynamically constructing the .rest file URLs to test REST APIs"},{"location":"Manuals/kb/#kb177-web-testing-dynamically-switching-the-browser-in-the-same-test","text":"Sometimes you have a test that you want to run on Chrome, Firefox, and IE in the same script. Normally you write a browser-agnostic test and then have SpiraTest simply call Rapise with different browser names as a parameter and then you have the same test executed multiple times. However suppose you want to have a single test that by itself can run on all the necessary browsers. This article addresses this case.","title":"KB177 Web testing - Dynamically Switching the Browser in the Same Test"},{"location":"Manuals/kb/#kb176-measuring-browser-performance-with-rapise","text":"How do you get the exact time that Rapise takes to load a page? Now, the reports summary shows the overall execution time but if you have pause times between steps then these times are added to the total time of that a page took to display. Customers have asked if Rapise has some kind of function that will allow them to see only the transaction time between pages without the pause times. Does Rapise have something like that? This article provides a solution to these cases.","title":"KB176 Measuring browser performance with Rapise"},{"location":"Manuals/kb/#kb175-using-rapise-to-populate-data-in-an-excel-spreadsheet","text":"The built-in Spreadsheet object in Rapise makes it easy to read data from an MS-Excel spreadsheet. What happens if you want to write data back to the Excel sheet?","title":"KB175 Using Rapise to populate data in an Excel Spreadsheet"},{"location":"Manuals/kb/#kb172-dynamically-changing-object-locators-for-web-applications","text":"Sometimes you want to dynamically change the XPATH or CSS used in a specific object from within the test script itself. This article explains the process for doing this.","title":"KB172 Dynamically changing object locators for Web applications"},{"location":"Manuals/kb/#kb168-customizing-the-rapise-reports","text":"By default, the reports displayed within Rapise report back each test activity and assert statement as a line in the report with all of the activities and events being displayed in a single flat list regardless of whether they happen inside the main Test() function or a sub-function. This articles explains how you can extend the reporting.","title":"KB168 Customizing the Rapise Reports"},{"location":"Manuals/kb/#kb166-using-rapise-31-to-test-a-web-page-with-a-multi-select-list","text":"When you have a multi-select list in a web application, you may need to check which items are selected, or to check whether or not a particular item is selected. This article illustrates how to do that.","title":"KB166 Using Rapise 3.1 to test a web page with a multi-select list"},{"location":"Manuals/kb/#kb164-calling-rapise-dox-functions-without-reporting-result","text":"When you use a DoX command in Rapise to perform a specific command (e.g. DoDOMChildrenCount() to get a number of object's DOM children), in the report an extra step -- assert -- is created during test execution. Sometimes you want to be able to call a function 'quietly' without it affecting the report.","title":"KB164 Calling Rapise DoX functions without reporting result"},{"location":"Manuals/kb/#kb163-accessing-the-computed-style-properties-of-an-html-dom-object","text":"A common question from our users is, is there a way to get object's style properties that are in effect at a certain point in time. (for example, it could have been inherited from higher level of hierarchy, or modified via JavaScript running on the page)? This article describes how to do this.","title":"KB163 Accessing the Computed Style Properties of an HTML DOM Object"},{"location":"Manuals/kb/#kb161-certain-hyperlinks-wont-click-during-playback-with-internet-explorer-ie","text":"Sometimes when you record a test script using IE and then play it back, some of the clicks on hyperlinks will not playback correctly. Rapise will list them as Passed, but the click won't actually be performed.","title":"KB161 Certain Hyperlinks won't click during playback with Internet Explorer (IE)"},{"location":"Manuals/kb/#kb160-rapise-cannot-connect-to-firefox-immediately-after-firefox-updates","text":"If you try and connect to Firefox with Rapise immediately after Firefox has updated, you may see the following error message: Microsoft JScript runtime error: 'Navigator.GetBrowserHWND()' is null or not an object","title":"KB160 Rapise cannot connect to Firefox immediately after Firefox updates"},{"location":"Manuals/kb/#kb159-fixing-unable-to-cast-object-of-type-systemdbnull-to-type-systemstring-errors-in-spira-v4x","text":"Sometimes when you are saving Rapise test scripts into some early versions of Spira v4.2.x.x (e.g. Spira v4.2.0.1 - v4.2.0.5) you can start getting these errors on the Test Case details page. You may also get the error for other reasons in earlier versions of Spira v4.x.","title":"KB159 Fixing 'Unable to cast object of type 'System.DBNull' to type 'System.String'' errors in Spira v4.x"},{"location":"Manuals/kb/#kb158-accessing-the-spira-v42-rest-api-to-get-test-cases-in-a-release","text":"This article describes the process and provides an example for accessing the Spira v4.2 REST API to get a filtered list of test cases in a release.","title":"KB158 Accessing the Spira v4.2 REST API to get test cases in a release"},{"location":"Manuals/kb/#kb146-how-to-use-sub-tests-and-common-objects-with-rest-web-service-tests","text":"It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. However due to the way REST web service tests are stored, there are some slight changes needed to handle REST services. This articles describes the process.","title":"KB146 How to Use Sub-Tests and Common Objects with REST Web Service Tests"},{"location":"Manuals/kb/#kb143-rapise-wont-record-steps-or-display-reports","text":"If you are running Rapise and you suddenly start to find that none of your recordings get saved and the reports are not displaying during execution it may be due to the fact that you have saved your Rapise test folder onto a Network Share.","title":"KB143 Rapise Won't Record Steps or Display Reports"},{"location":"Manuals/kb/#kb142-scripts-created-with-rapise-21-or-earlier-no-longer-playing-back-correctly-in-rapise-22-or-later","text":"In Rapise 2.2, \"DoClick\" behavior was changed, so we don't do a click but rather just position the mouse over the control and do API-level \"click\" event. However we provided a way to enable backward compatibility.","title":"KB142 Scripts created with Rapise 2.1 or earlier no longer playing back correctly in Rapise 2.2 or later"},{"location":"Manuals/kb/#kb141-testing-silverlight-applications","text":"When testing Silverlight applications, you may find that Rapise fails to recognize the objects in the Silverlight app using the UIAutomation library. When using the Rapise Spy Tool, the whole app is identified as a single window. The objects such as a dropdown, buttons etc. inside the silverlight app are not individually recognized.","title":"KB141 Testing Silverlight Applications"},{"location":"Manuals/kb/#kb544-how-to-use-rapise-cloud-on-aws","text":"With our Rapise cloud edition, you can take your automated software testing to the cloud. With Rapise cloud edition you can start testing immediately, no hardware or test lab needed, just sign up for Amazon Web Services (AWS) and rent our Rapise cloud AMIs on-demand, with no minimum usage and no annoying monthly or annual fees, just pay for what you use.","title":"KB544 How to Use Rapise Cloud on AWS"},{"location":"Manuals/kb/#kb139-disabling-the-generation-of-comments-during-recording","text":"By default Rapise records user actions with a line commented out for each action. This articles describes how you can disable this behavior if you just want the script lines recorded on their own.","title":"KB139 Disabling the generation of comments during Recording"},{"location":"Manuals/kb/#kb138-my-actions-are-not-recorded","text":"By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal (often several lower-level user actions are combined)Rapise uses a heuristics to distinguish meaningful activity from low level actions. In some cases this leads to a result that some user activity is not automatically recorded (for example, a mouse click before entering text in a box). There is a broad range of available UI platforms and libraries. The variety of graphical widgets makes user interface robust and beautiful. Rapise tries to recognize as much objects as possible. However this range is growing and there are always widgets that are not being recorded.","title":"KB138 My Actions are Not Recorded"},{"location":"Manuals/kb/#kb137-anti-virus-software-and-test-automation","text":"Anti-virus software is very sensitive to test automation tools. This is normal, because test automation tools usually do API, keyboard and mouse hooking to be able to record and playback user actions.","title":"KB137 Anti-Virus Software and Test Automation"},{"location":"Manuals/kb/#kb136-how-are-global-functions-stored-and-recalled","text":"We need to call many common functions from a common library frequently.","title":"KB136 How are Global Functions stored and recalled?"},{"location":"Manuals/kb/#kb134-why-is-my-flex-application-recorded-as-mouse-clicks","text":"A Flex application requires some instrumentation to be ready for testing. By default Flash player has security restrictions preventing Rapise from accessing the application contents. Please, check the this help topic to learn more about Adobe Flex testing.","title":"KB134 Why is My Flex application recorded as mouse clicks?"},{"location":"Manuals/kb/#kb133-the-recorder-asks-for-a-library-which-should-i-choose","text":"In most cases \"Auto\" is the best choice. Manual selection of libraries may be needed in more advanced scenarios and is intended for experienced users.","title":"KB133 The Recorder asks for a Library. Which should I choose?"},{"location":"Manuals/kb/#kb132-does-rapise-work-with-windows-uac","text":"If you are using Rapise on Windows Vista or Windows 7 it is not necessary to disable the Windows User Account Control (UAC) to use Rapise. Unlike some other automated testing tools on market, you can use Rapise with UAC enabled.","title":"KB132 Does Rapise work with Windows UAC?"},{"location":"Manuals/kb/#kb131-executing-under-a-vm-or-remote-desktop","text":"Sometimes you need to test an application running on a VM or remote computer using Remote Desktop (RDP) rather than a physical terminal. This guide explains how to ensure that Rapise is able to correctly fire events on the application under test.","title":"KB131 Executing Under a VM or Remote Desktop"},{"location":"Manuals/kb/#kb130-waiting-until-application-ready","text":"Sometimes you need to synchronize the test script so that it waits for a specific application event (change for status message or wait for some specific value). This guide explains how to ensure that Rapise waits for the appropriate condition.","title":"KB130 Waiting Until Application Ready"},{"location":"Manuals/kb/#kb124-reading-an-objects-state","text":"Sometimes it is necessary to examine the state of an object. For example, determine if Toggle Button is pressed or not, Radio/Check Button is checked or not, etc. This guide describes a couple of different ways of achieving this.","title":"KB124 Reading an Object's State"},{"location":"Manuals/kb/#kb123-about-highlighting-flash-command-rectangles","text":"Rapise has a choice of visual effects it can use when highlighting a control being learned during the recording process. This guide describes the different modes.","title":"KB123 About Highlighting (Flash Command) Rectangles"},{"location":"Manuals/kb/#kb121-choosing-object-type-manually","text":"Sometimes Rapise will incorrectly recognize a GUI component. This guide outlines how you can manually change the object type captured during recording.","title":"KB121 Choosing Object Type Manually"},{"location":"Manuals/kb/#kb120-capture-screenshots-during-playback","text":"When playing back a test it is useful to be able to capture the screen as its current state so that the cause of any test failures can be more easily deduced.","title":"KB120 Capture Screenshots During Playback"},{"location":"Manuals/kb/#kb119-working-with-right-click-context-menus","text":"The context menu control is not natively supported by Rapise, but one can use a simple workaround.","title":"KB119 Working with Right-Click Context Menus"},{"location":"Manuals/kb/#kb118-working-with-selectable-lists","text":"The behavior of list and combobox controls in GUI applications sometimes require additional attention. This guide explains the different types of combobox controls and best practices for testing them in Rapise.","title":"KB118 Working with Selectable Lists"},{"location":"Manuals/kb/#kb115-recording-web-menus","text":"Many web sites have dynamic site menus. This guide outlines the best practices for recording events associated with such dynamic site menus.","title":"KB115 Recording Web Menus"},{"location":"Manuals/kb/#kb114-my-actions-are-not-recorded","text":"By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal. However that sometimes means that certain actions that a user performs won't be automatically picked up. This guide explains ways to handle situations when a specific user activity is not recorded.","title":"KB114 My Actions are Not Recorded"},{"location":"Manuals/kb/#kb113-recording-mouse-activity","text":"This guide describes the different types of mouse events and how they are recorded in Rapise.","title":"KB113 Recording Mouse Activity"},{"location":"Manuals/kb/#kb112-re-using-test-logic","text":"It is common for test scenarios to share similar pieces of functionality. A good example of such sharing is login logic. This guide outlines ways in which you can share such logic to avoid having repeated code in your tests.","title":"KB112 Re-Using Test Logic"},{"location":"Manuals/kb/#kb116-working-with-html-xpath","text":"When testing web applications you will often need to use XPath to query the browser DOM for elements based on the scenario under test. This guide explains how you can use XPath queries with Rapise to make your browser testing more flexible and adaptive to changes on the screen.","title":"KB116 Working with HTML XPath"},{"location":"Manuals/kb/#kb117-working-with-html-tables-containing-dynamic-data","text":"Many web sites use HTML tables to display lists of tabular data. When testing such applications you will often need to dynamically search for items in the table to verify that the application under test performed correctly. This guide outlines best practices for accessing data held in HTML tables.","title":"KB117 Working with HTML Tables containing Dynamic Data"},{"location":"Manuals/kb/#kb122-change-object-value-or-text","text":"This guide describes the different ways that you can change the value of text label of an object.","title":"KB122 Change Object Value or Text"},{"location":"Manuals/kb/#kb125-analog-recording","text":"Sometimes the application under test doesn't contain any learnable objects. In that case you may need to use the fallback of Analog Recording. This guide describes how you perform analog recording.","title":"KB125 Analog Recording"},{"location":"Manuals/kb/#kb126-simulated-objects","text":"This guide describes what simulated objects are and when they should be used.","title":"KB126 Simulated Objects"},{"location":"Manuals/kb/#kb127-passing-test-parameters","text":"There are many different ways of passing test parameters to Rapise from an external system. This guide describes the different ways of passing parameter values to Rapise.","title":"KB127 Passing Test Parameters"},{"location":"Manuals/kb/#kb128-creating-a-set-of-tests-to-run-in-rapise","text":"This guide describes how you manage groups of Rapise tests together in situations where you are not using SpiraTest test sets.","title":"KB128 Creating a Set of Tests to Run in Rapise"},{"location":"Manuals/kb/#kb129-using-dynamic-linked-library-dlls-in-test-scripts","text":"Sometimes you need to call code libraries from your Rapise tests, for example when the built-in JavaScript scripting engine does not provide the necessary functionality. This guide explains how to call an external DLL from your Rapise test script.","title":"KB129 Using Dynamic Linked Library (DLLs) in Test Scripts"},{"location":"Manuals/kb/#kb135-how-does-rapise-detect-if-a-dialog-is-already-open","text":"There are several ways to find if something is already on the screen, this article explains some of the options.","title":"KB135 How does Rapise detect if a dialog is already open?"},{"location":"Manuals/kb/#kb111-analog-testing-when-the-machine-does-not-have-the-break-key","text":"When using Rapise for analog testing you need to use the key sequence CTRL+BREAK to start and stop the analog recorder. However some machines (particularly smaller laptops) do not have a BREAK or PAUSE (often the same function as BREAK) key. This article describes some solutions","title":"KB111 Analog Testing when the Machine does not have the Break Key"},{"location":"Manuals/kb/#kb109-using-dodomchildrencount-and-dodomqueryxpath-to-inspect-child-html-elements","text":"Often you want to be able to query for the child elements on a web page that are dynamically created and therefore not good candidates for LEARNing individually. This article explains how you can use the dynamic XPATH methods of Rapise to accomplish this task.","title":"KB109 Using DoDOMChildrenCount and DoDOMQueryXPath to inspect child HTML elements"},{"location":"Manuals/kb/#kb105-after-installing-windows-update-kb3025390-rapise-no-longer-connects-to-ie","text":"An old (December 9 th , 2014) security update for Microsoft Windows and Internet Explorer (KB3025390) broke the support in IE for 'out-of-process' code execution. This effectively prevented an automated testing application such as Rapise from automating Internet Explorer (IE) applications. This was subsequently fixed by Microsoft on February 10 th , 2015 with the KB 3021952 update.","title":"KB105 After installing Windows Update KB3025390 Rapise No Longer Connects to IE"},{"location":"Manuals/kb/#kb102-how-to-get-rapise-trace-logging-information","text":"When using Rapise, it is often useful to see how Rapise is identifying objects in the Application Under Test (AUT) and if necessary find out why Rapise is not able to locate a specific object. This article outlines how to increase the logging level in Rapise.","title":"KB102 How to Get Rapise Trace Logging Information"},{"location":"Manuals/kb/#kb101-automating-html-file-upload-boxes","text":"Sometimes you have to automate the uploading of files using an HTML file upload control. This article explains how to record and playback such a script.","title":"KB101 Automating HTML File Upload Boxes"},{"location":"Manuals/kb/#kb98-code-completion-of-native-javascript-objects","text":"Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However since JavaScript is fundamentally an un-typed language, for the code completion to work, there are some tips and tricks that you can use.","title":"KB98 Code Completion of Native JavaScript Objects"},{"location":"Manuals/kb/#kb97-recording-popup-javascript-confirmation-boxes","text":"When you are recording a test against a Web application you may have to deal with a popup JavaScript confirm or alert box. This article describes the process for dealing with them.","title":"KB97 Recording Popup JavaScript Confirmation Boxes"},{"location":"Manuals/kb/#kb96-how-to-automate-the-testing-of-rich-text-boxes-using-rapise","text":"When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. This is because the browser actually uses a separate IFRAME and HTML document for the editable rich text box. This article explains the process for recording/playing back such a test.","title":"KB96 How to automate the testing of Rich Text Boxes using Rapise"},{"location":"Manuals/kb/#kb89-adding-support-for-custom-flex-controls","text":"By default the Rapise Flex library supports a wide variety of Flex controls which will be capable of testing the majority of application. However sometimes there will be an unknown objects which will be learnt as a generic object with FlexObject flavor. The article describes support for such custom Flex controls:","title":"KB89 Adding Support for Custom Flex Controls"},{"location":"Manuals/kb/#kb87-using-rapise-to-validate-display-of-data-grid-data","text":"One common requirement is to run a query in an application being tested and verify that the data on the screen matches the data in the application. This article explains the recommended process for doing this.","title":"KB87 Using Rapise to Validate Display of Data Grid Data"},{"location":"Manuals/kb/#kb86-choosing-the-web-browser-in-rapise-from-spiratest-spirateam","text":"When writing a web test in Rapise you will often want to run the same test script in all three web browsers (IE, Firefox and Chrome). You will want to be able to choose the Test Script from within Rapise when debugging the test and then from a Test Set in SpiraTest when you move the test into production. This article explains the process.","title":"KB86 Choosing the Web Browser in Rapise from SpiraTest / SpiraTeam"},{"location":"Manuals/kb/#kb85-sending-special-keys-to-the-current-application","text":"You can use the Global.DoSendKeys('...'); command in Rapise to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. Page Down, or CTRL + Key). This article explains the way to do this.","title":"KB85 Sending Special Keys to the Current Application"},{"location":"Manuals/kb/#kb83-turning-off-chrome-and-firefox-auto-updating","text":"When you are testing a web application against different environments, it can be useful disable to default browser auto-updating policies so that you have a stable testing environment. This articles describes how to disable the auto-updating policies of Google Chrome and Firefox.","title":"KB83 Turning off Chrome and Firefox Auto-Updating"},{"location":"Manuals/kb/#kb79-a-dll-required-for-this-install-to-complete-could-not-be-run","text":"If you run one of our installation packages (.msi) and receive the following message: A DLL required for this install to complete could not be run","title":"KB79 A DLL required for this install to complete could not be run"},{"location":"Manuals/kb/#kb78-enabling-windows-installer-msi-trace-logging","text":"Sometimes when installing our products you get error messages during the installation and it's necessary to provide Inflectra support personnel with detailed trace/logging information so that they can better support you. This article describes the steps necessary to enable Windows Installer (.msi) trace logging.","title":"KB78 Enabling Windows Installer (.msi) Trace Logging"},{"location":"Manuals/kb/#kb77-how-to-resolve-wscriptcreateobject-could-not-connect-object-errors","text":"Sometimes when you install Rapise on a computer that had a previous version of Rapise installed, when you try to record and/or playback a test you get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Player.js WScript.CreateObject: Could not connect object. This article describes the steps to correct the error.","title":"KB77 How to resolve WScript.CreateObject: Could not connect object errors"},{"location":"Manuals/kb/#kb68-accessing-clipboard-in-rapise","text":"Sometimes when automating a test, you need to access the local Windows clipboard. This article describes how to access the Windows clipboard programmatically.","title":"KB68 Accessing Clipboard in Rapise"},{"location":"Manuals/kb/#kb65-testing-win32-applications-to-verify-that-controls-change-display-state","text":"Sometimes you may have a button (or other control) that can have a different appearance depending on the different focus statuses.For example, the default status without focus is a grey image, whereas when the mouse hovering over it becomes blue. Then when the mouse left button is held down on the button (and not released), the image changes to a red image.Finally, when the button is activated using the tab key to tab into the button and the mouse is somewhere else, it has a fourth color. This article discusses solutions for how to test these kinds of situation","title":"KB65 Testing Win32 applications to verify that controls change display state"},{"location":"Manuals/kb/#kb64-using-navigatorexecjs-to-execute-javascript-code-inside-a-browser","text":"Sometimes you need to execute JavaScript code at a browser side and get the result. You can do this with Navigator.ExecJS.","title":"KB64 Using Navigator.ExecJS to execute JavaScript code inside a browser"},{"location":"Manuals/kb/#kb63-getting-the-state-of-a-win32-object-using-rapise","text":"Sometimes you need to be able to test the state of a specific Win32 object in Rapise to see if it is enabled, disabled, is activated, etc. This sample illustrates how to get the numeric and textual value of the object's state.","title":"KB63 Getting the State of a Win32 object using Rapise"},{"location":"Manuals/kb/#kb62-accessing-files-and-io-functions-using-rapise","text":"Sometimes using Rapise you need to access files on the Windows filesystem, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file. This sample illustrates how you can access the File System using Rapise and the Windows FileSystemObject ( http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx ).","title":"KB62 Accessing Files and I/O functions using Rapise"},{"location":"Manuals/kb/#kb59-using-simulated-objects","text":"Simulated objects are found by looking at the parameters of the object (x number of pixels from the top of the window, y number of pixels from the left of the window, etc). One common question that has arisen is - during playback, does Rapise take into account screen resolution? If the resolution on the computer you run it on is different from the one it records on the location of the object will change relative to the number of pixels. So on the computer you record it on the top parameter might be 200 but on a different resolution it might be 180. Would Rapise recognize that the resolution is different and adjust for that?","title":"KB59 Using Simulated Objects"},{"location":"Manuals/kb/#kb58-javascript-js-not-associated-with-windows-scripting-host","text":"Sometimes if you have installed a program that associates itself with the .js file extension, you will see the following error when you try and record/play a Rapise test: Microsoft (R) Windows Script Host Version 5.8 Copyright (C) Microsoft Corporation. All rights reserved. Input Error: There is no script engine for file extension \".js\".","title":"KB58 Javascript .js not associated with Windows Scripting Host"},{"location":"Manuals/kb/#kb57-accessing-child-objects-in-a-java-awtswing-application","text":"This article describes how to access child objects of a Learned Java AWT/Swing object when using the Rapise Java library. Sometimes when you Learn a top-level object, you want to be able to programmatically query the object to locate the child objects that are visible in the Java SPY.","title":"KB57 Accessing Child Objects in a Java AWT/Swing application"},{"location":"Manuals/kb/#kb56-accessing-child-components-of-a-wpf-silverlight-listbox","text":"When you have a WPF or Silverlight application that has a list box (or other control that supports templates such as a Tree) that has an item template that contains sub-controls, you may need to access the individual controls rather than just the entire list item. This article outlines the approach for doing this.","title":"KB56 Accessing child components of a WPF / Silverlight ListBox"},{"location":"Manuals/kb/#kb50-dynamically-changing-object-locators-for-wpfsilverlight-applications","text":"Sometimes you will have controls in a WPF or Silverlight application which use dynamic lists. Depending on certain settings, the widgets in the list will appear in different places. This means that a Learned Rapise object which works fine if its in the original ListBox[0] location position is then played-back when it's displayed in another position, it will be ListBox[1] or [2]. Unlike the XPath option with web testing, Rapise doesn't currently allow regular expressions (Regex) in locators stored inside the objects.js file. This article describes a way around the problem:","title":"KB50 Dynamically changing object locators for WPF/Silverlight applications"},{"location":"Manuals/kb/#kb47-executing-a-process-and-checking-if-its-still-running","text":"If you use the Global.DoLaunch(...) command to launch a Windows console application, it will return a process ID. This article provides some sample code for executing a console application and checking to make sure that the process is not still running.","title":"KB47 Executing a process and checking if it's still running"},{"location":"Manuals/kb/#kb46-executing-javascript-commands-against-web-browser","text":"Sometimes you want to be able to open a browser window and execute JavaScript commands directly against the DOM objects rather than using the Rapise learned objects. This article explains the recommended way of doing this.","title":"KB46 Executing JavaScript commands against Web Browser"},{"location":"Manuals/kb/#kb40-extending-rapiselauncher-inactivity-timeout","text":"When executing Rapise scripts from SpiraTest using RapiseLauncher there is a 10-minute inactivity timeout. If your scripts have periods of inactivity that last longer than 10 minutes, you may need to extend the default timeout. This article describes the steps for doing this.","title":"KB40 Extending RapiseLauncher inactivity timeout"},{"location":"Manuals/kb/#kb39-executing-sql-database-queries-from-rapise","text":"Sometimes when you are running Rapise tests you need to run direct database queries to prepare the data in the test application, or you need to make queries against the database to verify that some user interactions left the data in a specific state. The sample script below illustrates how you can call database queries directly from the Rapise scripting editor:","title":"KB39 Executing SQL Database Queries from Rapise"},{"location":"Manuals/kb/#kb38-selecting-browser-for-test","text":"This article describes how to playback a test in a different browser from the one it was recorded in.","title":"KB38 Selecting Browser for Test"},{"location":"Manuals/kb/#kb32-unable-to-recordplay-a-java-applet-using-rapise-inside-a-web-browser","text":"Sometimes you have the situation where you can record/play a Java application using Rapise having correctly installed the Java bridge and set the JAVA_HOME environment variable correctly, but applets running inside a web browser do not work. This article provides some suggested solutions","title":"KB32 Unable to record/play a Java applet using Rapise inside a web browser"},{"location":"Manuals/kb/#kb28-detecting-the-presence-of-an-object-in-rapise","text":"Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this in Rapise 1.5.","title":"KB28 Detecting the presence of an object in Rapise"},{"location":"Manuals/kb/#kb27-using-rapise-to-extract-test-data-from-an-excel-sheet","text":"Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this.","title":"KB27 Using Rapise to extract test data from an Excel sheet"},{"location":"Manuals/kb/#kb26-passing-parameters-to-a-rapise-script-through-the-command-line","text":"This article describes the syntax for passing parameters from the Windows 32-bit command-line to a Rapise script. Note that you need to make sure that you're using the 32-bit command line on a 64-bit machine. I.e. follow the instructions in this KB article - https://www.inflectra.com/Support/KnowledgeBase/KB17.aspx","title":"KB26 Passing Parameters to a Rapise script through the command line"},{"location":"Manuals/kb/#kb25-using-globaldoinvoketest-to-pass-parameters-between-tests","text":"Sometimes you want a test script to be able to call another sub-test as part of its operation. You can do this using the Global.DoInvokeTest('path to test', [parameters]); function. This articles provides a more detailed example for doing this. The high-level information can be found on our website at: https://www.inflectra.com/Rapise/Guides.aspx?feature=Passing-Test-Parameters","title":"KB25 Using Global.DoInvokeTest() to pass parameters between tests"},{"location":"Manuals/kb/#kb24-how-to-handle-windowsobjects-that-have-names-that-change","text":"When using Rapise to record test scripts against Windows, Java, Flex, or other thick client applications that have windows or objects whose names may change in between test runs, you will usually need to make changes to either the test script or the learned objects so that they can match correctly. This article outlines some suggested techniques for recording/playing back scripts against such applications.","title":"KB24 How to handle Windows/Objects that have names that change"},{"location":"Manuals/kb/#kb18-how-do-i-ensure-no-other-browser-windows-open","text":"When running a test you will often want to make sure there are no other browser windows open. This is commonly done either at the start or end of the test. This article describes how you do this.","title":"KB18 How Do I Ensure No Other Browser Windows Open"},{"location":"Manuals/kb/#kb19-how-to-successfully-include-and-use-common-functions-and-objects","text":"It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. This article describes the process","title":"KB19 How to successfully include and use common functions and objects"},{"location":"Manuals/kb/#kb17-running-a-rapise-script-from-the-command-line-on-a-64-bit-machine","text":"If you try and run a Rapise script from the command-line on a 64-bit machine you may get an error message. Learn how to fix it from the article.","title":"KB17 Running a Rapise script from the command-line on a 64-bit machine"},{"location":"Manuals/kb/#kb13-test-scripts-suddenly-movingclicking-at-false-locations","text":"If you have your browser zoom set to a value that is not 100% when recording or playing back scripts it will affect the playback reliability. Specifically Rapise will click/move at/to false locations in the test browser.You need to set your browser zoom to 100% before doing any playback/recording activities.","title":"KB13 Test-Scripts suddenly moving/clicking at false locations"},{"location":"Manuals/kb/#kb11-how-do-i-change-the-url-of-the-website-being-tested-in-rapise","text":"We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address?","title":"KB11 How do I change the URL of the website being tested in Rapise."},{"location":"Manuals/kb/#kb8-recording-infragistics-applications-with-rapise-throws-error","text":"If you try and record a test script in Rapise using just the 'Infragistics' library you will get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Recorder.js(285, 3) Microsoft JScript runtime error: 'ManagedObjectSelectableBehavior_OnMouseEvent' is undefined","title":"KB8 Recording Infragistics Applications with Rapise Throws Error"},{"location":"New/6_2/","text":"New in Rapise 6.2 (September 2019) \u00b6 Summary Self-healing Web Locators Reconnect Mobile Session Reconnect WebDriver Session","title":"Release Notes for 6.2"},{"location":"New/6_2/#new-in-rapise-62-september-2019","text":"Summary Self-healing Web Locators Reconnect Mobile Session Reconnect WebDriver Session","title":"New in Rapise 6.2 (September 2019)"},{"location":"New/6_3/","text":"New in Rapise 6.3 (January 2020) \u00b6 Summary SAP UI 5 for SAP HANA Local Browser profiles Local Mobile profiles Add Assertions from Web Spy Support for custom Dropdowns in RVL via Dropdowns.xlsx Support for read/write enabled Config.xlsx Start at Logon option in RapiseLauncher Highlight TODO rows in reports RPA Monitor for RPA Agents Changelog \u00b6 Features \u00b6 Local Browser and Mobile profiles [IN:4916] Add Assertions from Web Spy [IN:4937] Start at Logon option in RapiseLauncher [IN:4901] Cookie handling to REST service testing module [IN:3262] Highlight TODO rows in reports [IN:4329] UIAutomation2 locator [IN:5289] RPA Monitor for RPA Agents [IN:5400] RVL Enhancements & Improvements \u00b6 Dropdowns.xlsx to define dropdown values for any action called from RVL [IN:5357] Password parameter type [IN:5326] RVL.DoPlayTest with custom parameters [IN:5299] Tester.GetParam to read parameters passed via RVL.DoPlayTest [IN:5312] Global.DoLoadObjects is now a part of preamble [IN:5339] Copy+Paste of cell region [IN:5324] Clear cell region [IN:5322] Show only non-global objects for param type - objectid [IN:4600] Make Find Object in Tree for row, not for Object cell only [IN:4990] Open as Spreadsheet in file context menu for RVL [IN:5323] Drag&Drop of *.rvl.xlsx into RVL should generate RVL.DoPlayScript [IN:5325] Drag&Drop Objects.js as Global.DoLoadObjects in JS and RVL [IN:5338] New Object API \u00b6 Navigator.NativeEvents [IN:5297] Navigator.DoWaitFor [IN:5298] Navigator.DoClickWhileOnScreen [IN:4602] Navigator.DoClickUntilOnScreen [IN:4602] Global.SetConfigPath [IN:5310] Global.GetRapiseVersion [IN:5300] HTMLObject.DoSelect now supports UL and OL lists [IN:5305] Improvements \u00b6 Ability to pass Firefox args and prefs from Selenium Settings dialog [IN:5266] Save As in Image Viewer [IN:5223] Show Warnings tab on test open and save only [IN:5235] Always show last report as just 'Report' instead of full name [IN:5236] Replace Source Modified Message Box with less annoying, non blocking notifier [IN:5237] Show error if we can not Flash/Highlight object because it's coordinates are null [IN:5359] Display error message if out.log is locked by another process [IN:5351] Support for Unicode symbols in Object IDs (Hebrew, Chinese, etc) [IN:5286] In WebSpy add context menu Learn for DOM elements in the tree [IN:5306] Bug Fixes \u00b6 HTMLObject.PageTitle returns recorded title instead of playback-time value [IN:4895] RapiseLauncher checks out files as modified [IN:4916] UIATreeWithButton recording is broken [IN:5389] UIAutomation Spy is slow on long lists [IN:5360] UIAutomation, FindByText does not take object_type into account [IN:5358] RapiseLauncher - fist time connecting to Spira - stays in Paused mode until restart [IN:5356] Locked idetasks.json prevents cmd/sesexecutor to run the tests [IN:5350] Test editor window closes after object re-learn [IN:5124] ExecJS does not have access to document and window if called without element [IN:5216] When sub-test is not found - Rapise stops loading test [IN:5232] Database.DoSequential skips first row [IN:5282] Screenshots fail when mobile test is executed for the first time [IN:5281] Old web service entries stay in the tree when switching between WS tests [IN:5291] Error message in create new test dialog when test case is created in Spira [IN:5317] Autocompletion in RVL may be annoying [IN:5337] RVL \"Params\" button keeps only 1 st param, and resets other [IN:5377] Error adding row to RVL [IN:4988]","title":"Release Notes for 6.3"},{"location":"New/6_3/#new-in-rapise-63-january-2020","text":"Summary SAP UI 5 for SAP HANA Local Browser profiles Local Mobile profiles Add Assertions from Web Spy Support for custom Dropdowns in RVL via Dropdowns.xlsx Support for read/write enabled Config.xlsx Start at Logon option in RapiseLauncher Highlight TODO rows in reports RPA Monitor for RPA Agents","title":"New in Rapise 6.3 (January 2020)"},{"location":"New/6_3/#changelog","text":"","title":"Changelog"},{"location":"New/6_3/#features","text":"Local Browser and Mobile profiles [IN:4916] Add Assertions from Web Spy [IN:4937] Start at Logon option in RapiseLauncher [IN:4901] Cookie handling to REST service testing module [IN:3262] Highlight TODO rows in reports [IN:4329] UIAutomation2 locator [IN:5289] RPA Monitor for RPA Agents [IN:5400]","title":"Features"},{"location":"New/6_3/#rvl-enhancements-improvements","text":"Dropdowns.xlsx to define dropdown values for any action called from RVL [IN:5357] Password parameter type [IN:5326] RVL.DoPlayTest with custom parameters [IN:5299] Tester.GetParam to read parameters passed via RVL.DoPlayTest [IN:5312] Global.DoLoadObjects is now a part of preamble [IN:5339] Copy+Paste of cell region [IN:5324] Clear cell region [IN:5322] Show only non-global objects for param type - objectid [IN:4600] Make Find Object in Tree for row, not for Object cell only [IN:4990] Open as Spreadsheet in file context menu for RVL [IN:5323] Drag&Drop of *.rvl.xlsx into RVL should generate RVL.DoPlayScript [IN:5325] Drag&Drop Objects.js as Global.DoLoadObjects in JS and RVL [IN:5338]","title":"RVL Enhancements &amp; Improvements"},{"location":"New/6_3/#new-object-api","text":"Navigator.NativeEvents [IN:5297] Navigator.DoWaitFor [IN:5298] Navigator.DoClickWhileOnScreen [IN:4602] Navigator.DoClickUntilOnScreen [IN:4602] Global.SetConfigPath [IN:5310] Global.GetRapiseVersion [IN:5300] HTMLObject.DoSelect now supports UL and OL lists [IN:5305]","title":"New Object API"},{"location":"New/6_3/#improvements","text":"Ability to pass Firefox args and prefs from Selenium Settings dialog [IN:5266] Save As in Image Viewer [IN:5223] Show Warnings tab on test open and save only [IN:5235] Always show last report as just 'Report' instead of full name [IN:5236] Replace Source Modified Message Box with less annoying, non blocking notifier [IN:5237] Show error if we can not Flash/Highlight object because it's coordinates are null [IN:5359] Display error message if out.log is locked by another process [IN:5351] Support for Unicode symbols in Object IDs (Hebrew, Chinese, etc) [IN:5286] In WebSpy add context menu Learn for DOM elements in the tree [IN:5306]","title":"Improvements"},{"location":"New/6_3/#bug-fixes","text":"HTMLObject.PageTitle returns recorded title instead of playback-time value [IN:4895] RapiseLauncher checks out files as modified [IN:4916] UIATreeWithButton recording is broken [IN:5389] UIAutomation Spy is slow on long lists [IN:5360] UIAutomation, FindByText does not take object_type into account [IN:5358] RapiseLauncher - fist time connecting to Spira - stays in Paused mode until restart [IN:5356] Locked idetasks.json prevents cmd/sesexecutor to run the tests [IN:5350] Test editor window closes after object re-learn [IN:5124] ExecJS does not have access to document and window if called without element [IN:5216] When sub-test is not found - Rapise stops loading test [IN:5232] Database.DoSequential skips first row [IN:5282] Screenshots fail when mobile test is executed for the first time [IN:5281] Old web service entries stay in the tree when switching between WS tests [IN:5291] Error message in create new test dialog when test case is created in Spira [IN:5317] Autocompletion in RVL may be annoying [IN:5337] RVL \"Params\" button keeps only 1 st param, and resets other [IN:5377] Error adding row to RVL [IN:4988]","title":"Bug Fixes"},{"location":"New/6_4/","text":"New in Rapise 6.4 (May 2020) \u00b6 Summary Rename.. sub-test in the Test Files view [IN:5446] Clone... sub-test in the Test Files view [IN:5447] New menu item: Tools -> Rapise Launcher [IN:5183] New menu item: Help -> Remote Assistance [IN:5567] RVL editor improvements (see RVL Enhancements & Improvements section below) WebAppProfile enhancements (see Features section below) Ability to set path for local Browser and Mobile profiles [IN:5405] IFRAME support in SAP UI5 applications [IN:5493] Improvements to Dynamics 365 for Sales support [IN:5574] Update support for Dynamics 365 for Operations [IN:5536] Changelog \u00b6 Features \u00b6 Support for Cookies in the REST client [IN:4845] Rename.. sub-test in the Test Files view [IN:5446] Clone... sub-test in the Test Files view [IN:5447] Add flag to control recording of URLs in Web tests [IN:5463] IFRAME support in SAP UI5 applications [IN:5493] Dynamics NAV, support for Show more/fewer fields in Fast Tabs [IN:5494] WebAppProfile, anchors pointing to specific elements [IN:5516] WebAppProfile, add configuration for clickable elements [IN:5522] WebAppProfile, add support for Text [IN:5569] WebAppProfile, add support for Handlers [IN:5570] Add Remote Assistance option to Help menu [IN:5567] Ability to set path for local Browser and Mobile profiles [IN:5405] RVL Enhancements & Improvements \u00b6 From,To params in Map Range made optional [IN:4701] Drag & Drop of *.rvl.xlsx into JS and RVL now generates DoPlayScript [IN:4757] RVL to suggest getter/setter optional parameters [IN:5342] RVL Assert == should output compared values to the report [IN:5372] Copy-Paste of a Map should not truncate columns after H [IN:5401] Do not wipe parameters if underscore added to action name in RVL (_Do) [IN:5406] RVL.DoPlayTest should suggest available sub-tests for pathToTest parameter [IN:5414] RVL quick access toolbar items changed [IN:5437] Recorder adds new line to Test function (RVL mode) [IN:5438] Insert lines in RVL should insert between lines [IN:5503] _Do actions in RVL should automatically use params from Do actions [IN:5509] Always add rows when doing Paste in RVL [IN:5529] RVL Shift+Enter should insert a line after [IN:5532] RVL Editor: automatically add defaultValue when variable type is selected as Global [IN:5533] Support boolean values in RVL map [IN:4646] New Object API \u00b6 Global.DoCmd [IN:4954] HTMLObject.DoDOMQueryValue [IN:4632] Navigator.DOMQueryValue [IN:4632] Navigator.KillBrowser [IN:5408] Navigator.SeSFind [IN:5504] Improvements \u00b6 Rapise Launcher now immediately polls Spira when launched [IN:3800] New menu item: Tools -> Rapise Launcher [IN:5183] Ctrl-Shift-T in Web Spy to save DOM snapshot + screenshot UIAList performance optimized [IN:5314] Save To Spira dialog must ignore Reports folder [IN:5420] Create Sub-Test should automatically inherit Browser profile from a parent test [IN:5423] JavaScript syntax checker improvements [IN:5425] [IN:5427] If object type is not known metadata - RVL should get it from parent object type [IN:5435] Spreadsheet editor - we need Format Cells functionality [IN:5436] Clicks on SELECT and OPTION should not be recorded [IN:5439] Add File... by relative path if it is in the same framework (parent test) [IN:5452] Allow to pass rule to SeSUIAutomationFindByAutomationId [IN:5468] Unmodified Main.rvl.xlsx should not be saved to disk when user Saves All [IN:5491] Enable JS type hints for SeS objects (i.e. HTMLObject) [IN:5507] Remove Manual Test icon from the toolbar [IN:5510] Global.DoLoadObjects should add warning to the report when an object already exists [IN:5515] In Self-Healing add option to skip capture of recording screenshots [IN:5524] Update support for Dynamics 365 for Operations [IN:5536] Show Error View if recording failed because of an error in JS [IN:5537] Open Test dialog should use current test's folder by default [IN:5538] Automatic screenshots for Web should capture just browser content [IN:5544] Make new web/mobile profiles 'Local' by default [IN:5551] Save to Spira improvements and bug fixes [IN:5492] Use Navigator.NativeEvents in DoSetCheck to do real clicks [IN:5573] Chrome: do EnsureVisible before Click if element is not visible or partially visible [IN:5571] Improvements to Dynamics 365 for Sales support [IN:5574] Convert UsingDatabase sample to RVL [IN:4882] Suppress onbeforeunload event prompt [IN:5576] Bug Fixes \u00b6 Incorrect RVL > JS generated for image compare checkpoint [IN:5210] Save in SOAP editor forces Main.js reload [IN:5292] Learn from Web Spy in Maintenance mode [IN:5316] When starting debugging - Find Results pane is shown[IN:5402] Sometimes highlighting disappears in RVL [IN:5410] WebSpy settings: ShowInternalID = false is ignored [IN:5422] Sub-test settings not reloaded if sub-test is modified in another copy of Rapise [IN:5424] After Flash we see Warnings tab activated, but expecting Output [IN:5428] Error trying to delete log file (Flash after Flash) [IN:5429] Clear Selection not working in RVL [IN:5466] Crash on recording when Global.SendKeys action is recorded [IN:5467] REST files save is not working with Ctrl-S and global save [IN:5490] Error connecting to project after switching between Spira instances [IN:5481] Objects.metadata contains garbage when all objects are removed from the object tree [IN:5498] Modified icon is not removed from the File view when a file is closed without saving [IN:5502] Tools->Libraries replaces %...% variables in lib names [IN:5514] RapiseLauncher - Entries.json - incorrect versions of files [IN:5523] RVL Wrap into loop takes more than selected [IN:5531] Rapise Launcher Error in Startup if Config is incorrect [IN:5534] RVL Del Row is not working when cell is in edit mode [IN:5535] \"Test\" not working in Firefox profiles [IN:5550] RVL.Return message is not assigned to LastResult [IN:5554] Not possible to change object name for Verify stmt in Recording Activity dialog [IN:5572]","title":"Release Notes for 6.4"},{"location":"New/6_4/#new-in-rapise-64-may-2020","text":"Summary Rename.. sub-test in the Test Files view [IN:5446] Clone... sub-test in the Test Files view [IN:5447] New menu item: Tools -> Rapise Launcher [IN:5183] New menu item: Help -> Remote Assistance [IN:5567] RVL editor improvements (see RVL Enhancements & Improvements section below) WebAppProfile enhancements (see Features section below) Ability to set path for local Browser and Mobile profiles [IN:5405] IFRAME support in SAP UI5 applications [IN:5493] Improvements to Dynamics 365 for Sales support [IN:5574] Update support for Dynamics 365 for Operations [IN:5536]","title":"New in Rapise 6.4 (May 2020)"},{"location":"New/6_4/#changelog","text":"","title":"Changelog"},{"location":"New/6_4/#features","text":"Support for Cookies in the REST client [IN:4845] Rename.. sub-test in the Test Files view [IN:5446] Clone... sub-test in the Test Files view [IN:5447] Add flag to control recording of URLs in Web tests [IN:5463] IFRAME support in SAP UI5 applications [IN:5493] Dynamics NAV, support for Show more/fewer fields in Fast Tabs [IN:5494] WebAppProfile, anchors pointing to specific elements [IN:5516] WebAppProfile, add configuration for clickable elements [IN:5522] WebAppProfile, add support for Text [IN:5569] WebAppProfile, add support for Handlers [IN:5570] Add Remote Assistance option to Help menu [IN:5567] Ability to set path for local Browser and Mobile profiles [IN:5405]","title":"Features"},{"location":"New/6_4/#rvl-enhancements-improvements","text":"From,To params in Map Range made optional [IN:4701] Drag & Drop of *.rvl.xlsx into JS and RVL now generates DoPlayScript [IN:4757] RVL to suggest getter/setter optional parameters [IN:5342] RVL Assert == should output compared values to the report [IN:5372] Copy-Paste of a Map should not truncate columns after H [IN:5401] Do not wipe parameters if underscore added to action name in RVL (_Do) [IN:5406] RVL.DoPlayTest should suggest available sub-tests for pathToTest parameter [IN:5414] RVL quick access toolbar items changed [IN:5437] Recorder adds new line to Test function (RVL mode) [IN:5438] Insert lines in RVL should insert between lines [IN:5503] _Do actions in RVL should automatically use params from Do actions [IN:5509] Always add rows when doing Paste in RVL [IN:5529] RVL Shift+Enter should insert a line after [IN:5532] RVL Editor: automatically add defaultValue when variable type is selected as Global [IN:5533] Support boolean values in RVL map [IN:4646]","title":"RVL Enhancements &amp; Improvements"},{"location":"New/6_4/#new-object-api","text":"Global.DoCmd [IN:4954] HTMLObject.DoDOMQueryValue [IN:4632] Navigator.DOMQueryValue [IN:4632] Navigator.KillBrowser [IN:5408] Navigator.SeSFind [IN:5504]","title":"New Object API"},{"location":"New/6_4/#improvements","text":"Rapise Launcher now immediately polls Spira when launched [IN:3800] New menu item: Tools -> Rapise Launcher [IN:5183] Ctrl-Shift-T in Web Spy to save DOM snapshot + screenshot UIAList performance optimized [IN:5314] Save To Spira dialog must ignore Reports folder [IN:5420] Create Sub-Test should automatically inherit Browser profile from a parent test [IN:5423] JavaScript syntax checker improvements [IN:5425] [IN:5427] If object type is not known metadata - RVL should get it from parent object type [IN:5435] Spreadsheet editor - we need Format Cells functionality [IN:5436] Clicks on SELECT and OPTION should not be recorded [IN:5439] Add File... by relative path if it is in the same framework (parent test) [IN:5452] Allow to pass rule to SeSUIAutomationFindByAutomationId [IN:5468] Unmodified Main.rvl.xlsx should not be saved to disk when user Saves All [IN:5491] Enable JS type hints for SeS objects (i.e. HTMLObject) [IN:5507] Remove Manual Test icon from the toolbar [IN:5510] Global.DoLoadObjects should add warning to the report when an object already exists [IN:5515] In Self-Healing add option to skip capture of recording screenshots [IN:5524] Update support for Dynamics 365 for Operations [IN:5536] Show Error View if recording failed because of an error in JS [IN:5537] Open Test dialog should use current test's folder by default [IN:5538] Automatic screenshots for Web should capture just browser content [IN:5544] Make new web/mobile profiles 'Local' by default [IN:5551] Save to Spira improvements and bug fixes [IN:5492] Use Navigator.NativeEvents in DoSetCheck to do real clicks [IN:5573] Chrome: do EnsureVisible before Click if element is not visible or partially visible [IN:5571] Improvements to Dynamics 365 for Sales support [IN:5574] Convert UsingDatabase sample to RVL [IN:4882] Suppress onbeforeunload event prompt [IN:5576]","title":"Improvements"},{"location":"New/6_4/#bug-fixes","text":"Incorrect RVL > JS generated for image compare checkpoint [IN:5210] Save in SOAP editor forces Main.js reload [IN:5292] Learn from Web Spy in Maintenance mode [IN:5316] When starting debugging - Find Results pane is shown[IN:5402] Sometimes highlighting disappears in RVL [IN:5410] WebSpy settings: ShowInternalID = false is ignored [IN:5422] Sub-test settings not reloaded if sub-test is modified in another copy of Rapise [IN:5424] After Flash we see Warnings tab activated, but expecting Output [IN:5428] Error trying to delete log file (Flash after Flash) [IN:5429] Clear Selection not working in RVL [IN:5466] Crash on recording when Global.SendKeys action is recorded [IN:5467] REST files save is not working with Ctrl-S and global save [IN:5490] Error connecting to project after switching between Spira instances [IN:5481] Objects.metadata contains garbage when all objects are removed from the object tree [IN:5498] Modified icon is not removed from the File view when a file is closed without saving [IN:5502] Tools->Libraries replaces %...% variables in lib names [IN:5514] RapiseLauncher - Entries.json - incorrect versions of files [IN:5523] RVL Wrap into loop takes more than selected [IN:5531] Rapise Launcher Error in Startup if Config is incorrect [IN:5534] RVL Del Row is not working when cell is in edit mode [IN:5535] \"Test\" not working in Firefox profiles [IN:5550] RVL.Return message is not assigned to LastResult [IN:5554] Not possible to change object name for Verify stmt in Recording Activity dialog [IN:5572]","title":"Bug Fixes"},{"location":"New/6_5/","text":"New in Rapise 6.5 (July 2020) \u00b6 Summary Window/Tab manipulation functionality in the Navigator object [IN:5608] Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630] It is now possible to record desktop actions into a Web test [IN:5654] Chrome extension updated to use the latest technology [IN:5610] Flash from RVL popup menu [IN:5657] Change Object Tree context menu - Rename instead of Remove [IN:5634] DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162] Support for SeeTest Mobile [IN:5757] Changelog \u00b6 Features \u00b6 Window/Tab manipulation functionality in the Navigator object [IN:5608] [IN:5712] Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630] [IN:5660] It is now possible to record desktop actions into a Web test [IN:5654] [IN:5705] Ability to access page script objects via Navigator.ExecPageJS [IN:5699] Support for SeeTest Mobile [IN:5757] RVL Enhancements & Improvements \u00b6 Map Range: Add dropdown for File Name [IN:5561] Map Range: Auto-read column names from attached Excel [IN:5562] Show real names of additional columns [IN:5563] Ctrl + P shortcut to act as click on Params button on the toolbar in RVL [IN:5589] In RVL automatically do Tab when selection is done in the dropdown [IN:5637] When choosing an action with 1 parameter, automatically jump to ParamValue [IN:5638] Flash from RVL popup menu [IN:5657] RVL - do recursive WORKDIR search to suggest .sstest and Object Repositories [IN:5674] For all path parameters in RVL offer to open in the popup menu [IN:5721] Show available sheets for RVL.DoPlaySheet / RVL.DoPlayScript [IN:5722] Show new row (scroll up) when adding a new row at line 2 [IN:5728] RVL call generator for Main.js should use Tester.GetParam for sheetName [IN:5762] New Object API \u00b6 Global.DoVerticalScroll [IN:5233] [IN:5736] Global.DoHorizontalScroll [IN:5233] [IN:5736] Global.DoSendText [IN:5737] Navigator.LaunchBrowser [IN:5743] Navigator.ExecPageJS [IN:5699] Window/Tab Manipulation \u00b6 Navigator.GetWindowsCount Navigator.GetWindowTitleAt Navigator.GetWindowUrlAt Navigator.GetWindowIdAt Navigator.GetActiveWindowTitle Navigator.GetActiveWindowUrl Navigator.GetActiveWindowId Navigator.DoCreateWindow Navigator.DoActivateWindow Navigator.DoCloseWindow Navigator.DoResizeWindow Navigator.DoMoveWindow Navigator.GetTabsCount Navigator.GetTabTitleAt Navigator.GetTabIndexById Navigator.GetActiveTabTitle Navigator.GetActiveTabUrl Navigator.GetActiveTabId Navigator.GetTabUrlAt Navigator.GetTabIdAt Navigator.DoSelectTab Navigator.DoCreateTab Navigator.DoCloseTab Improvements \u00b6 Chrome extension updated to use the latest technology [IN:5610] DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162] Self-healing locator should skip first attempts to find an object [IN:5629] [IN:5716] Change Object Tree context menu - Rename instead of Remove [IN:5634] Implement g_objectNameMaxLength . If name of a recorded object is greater than this value it is truncated. Default is 32. [IN:5650] Replace dashes in the meeting ID ( Help > Remote Assistance ) [IN:5653] If Object is not found error and we click on the link with the error line - reveal the object in the Object Tree [IN:5656] WebAppProfile - implement clickable handler [IN:5663] Show XPATH menuitem in RVL popup menu [IN:5667] Configurable timeout for DoFindElement . Affects Chrome and Firefox. Implemented as g_domFindElementTimeout . Default value is 2 seconds. [IN:5680] Enter non-breaking space in WebSpy using Shift + Space [IN:5713] HTMLObject.DoSetText in native events mode should allow to clear text [IN:5715] Rename Object in the Object Tree/RVL should also change objectId params [IN:5723] Enable Crash Dumps for Rapise.exe and RapiseLauncher.exe [IN:5724] Change default DOM tree loading timeout from 10 seconds to 60 seconds [IN:5725] Do<Type>Click , DoMouseMove - make x , y optional [IN:5726] Add basic authentication support for Web [IN:5732] HTMLObject.DoSetText in native mode should send text as is [IN:5738] Bug Fixes \u00b6 Undo in RVL sheet [IN:5530] Tester.FailTest does not set test status to false [IN:5592] RVL allows params without name [IN:5597] Chrome - sometimes y-coordinate calculated wrongly [IN:5609] Undo is inconsistent in RVL in some cases [IN:5636] RVL, Range Map parameter types are not highlighted [IN:5649] SAP combobox may not be recorded if it has no name (label) [IN:5668] SAP input with open button may not be recorded in some cases [IN:5669] Fix scaling in Navigator.DpiScaleX/DpiScaleY [IN:5679] HTMLObject.DoDOMQueryValue is not implemented in LibSelenium [IN:5696] Mobile Spy does not see Local Profiles [IN:5755] Test Clone works incorrectly on non-standard Main.js [IN:5761] RVL does not show an error when End tag is missing [IN:5763]","title":"Release Notes for 6.5"},{"location":"New/6_5/#new-in-rapise-65-july-2020","text":"Summary Window/Tab manipulation functionality in the Navigator object [IN:5608] Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630] It is now possible to record desktop actions into a Web test [IN:5654] Chrome extension updated to use the latest technology [IN:5610] Flash from RVL popup menu [IN:5657] Change Object Tree context menu - Rename instead of Remove [IN:5634] DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162] Support for SeeTest Mobile [IN:5757]","title":"New in Rapise 6.5 (July 2020)"},{"location":"New/6_5/#changelog","text":"","title":"Changelog"},{"location":"New/6_5/#features","text":"Window/Tab manipulation functionality in the Navigator object [IN:5608] [IN:5712] Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630] [IN:5660] It is now possible to record desktop actions into a Web test [IN:5654] [IN:5705] Ability to access page script objects via Navigator.ExecPageJS [IN:5699] Support for SeeTest Mobile [IN:5757]","title":"Features"},{"location":"New/6_5/#rvl-enhancements-improvements","text":"Map Range: Add dropdown for File Name [IN:5561] Map Range: Auto-read column names from attached Excel [IN:5562] Show real names of additional columns [IN:5563] Ctrl + P shortcut to act as click on Params button on the toolbar in RVL [IN:5589] In RVL automatically do Tab when selection is done in the dropdown [IN:5637] When choosing an action with 1 parameter, automatically jump to ParamValue [IN:5638] Flash from RVL popup menu [IN:5657] RVL - do recursive WORKDIR search to suggest .sstest and Object Repositories [IN:5674] For all path parameters in RVL offer to open in the popup menu [IN:5721] Show available sheets for RVL.DoPlaySheet / RVL.DoPlayScript [IN:5722] Show new row (scroll up) when adding a new row at line 2 [IN:5728] RVL call generator for Main.js should use Tester.GetParam for sheetName [IN:5762]","title":"RVL Enhancements &amp; Improvements"},{"location":"New/6_5/#new-object-api","text":"Global.DoVerticalScroll [IN:5233] [IN:5736] Global.DoHorizontalScroll [IN:5233] [IN:5736] Global.DoSendText [IN:5737] Navigator.LaunchBrowser [IN:5743] Navigator.ExecPageJS [IN:5699]","title":"New Object API"},{"location":"New/6_5/#windowtab-manipulation","text":"Navigator.GetWindowsCount Navigator.GetWindowTitleAt Navigator.GetWindowUrlAt Navigator.GetWindowIdAt Navigator.GetActiveWindowTitle Navigator.GetActiveWindowUrl Navigator.GetActiveWindowId Navigator.DoCreateWindow Navigator.DoActivateWindow Navigator.DoCloseWindow Navigator.DoResizeWindow Navigator.DoMoveWindow Navigator.GetTabsCount Navigator.GetTabTitleAt Navigator.GetTabIndexById Navigator.GetActiveTabTitle Navigator.GetActiveTabUrl Navigator.GetActiveTabId Navigator.GetTabUrlAt Navigator.GetTabIdAt Navigator.DoSelectTab Navigator.DoCreateTab Navigator.DoCloseTab","title":"Window/Tab Manipulation"},{"location":"New/6_5/#improvements","text":"Chrome extension updated to use the latest technology [IN:5610] DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162] Self-healing locator should skip first attempts to find an object [IN:5629] [IN:5716] Change Object Tree context menu - Rename instead of Remove [IN:5634] Implement g_objectNameMaxLength . If name of a recorded object is greater than this value it is truncated. Default is 32. [IN:5650] Replace dashes in the meeting ID ( Help > Remote Assistance ) [IN:5653] If Object is not found error and we click on the link with the error line - reveal the object in the Object Tree [IN:5656] WebAppProfile - implement clickable handler [IN:5663] Show XPATH menuitem in RVL popup menu [IN:5667] Configurable timeout for DoFindElement . Affects Chrome and Firefox. Implemented as g_domFindElementTimeout . Default value is 2 seconds. [IN:5680] Enter non-breaking space in WebSpy using Shift + Space [IN:5713] HTMLObject.DoSetText in native events mode should allow to clear text [IN:5715] Rename Object in the Object Tree/RVL should also change objectId params [IN:5723] Enable Crash Dumps for Rapise.exe and RapiseLauncher.exe [IN:5724] Change default DOM tree loading timeout from 10 seconds to 60 seconds [IN:5725] Do<Type>Click , DoMouseMove - make x , y optional [IN:5726] Add basic authentication support for Web [IN:5732] HTMLObject.DoSetText in native mode should send text as is [IN:5738]","title":"Improvements"},{"location":"New/6_5/#bug-fixes","text":"Undo in RVL sheet [IN:5530] Tester.FailTest does not set test status to false [IN:5592] RVL allows params without name [IN:5597] Chrome - sometimes y-coordinate calculated wrongly [IN:5609] Undo is inconsistent in RVL in some cases [IN:5636] RVL, Range Map parameter types are not highlighted [IN:5649] SAP combobox may not be recorded if it has no name (label) [IN:5668] SAP input with open button may not be recorded in some cases [IN:5669] Fix scaling in Navigator.DpiScaleX/DpiScaleY [IN:5679] HTMLObject.DoDOMQueryValue is not implemented in LibSelenium [IN:5696] Mobile Spy does not see Local Profiles [IN:5755] Test Clone works incorrectly on non-standard Main.js [IN:5761] RVL does not show an error when End tag is missing [IN:5763]","title":"Bug Fixes"},{"location":"New/6_6/","text":"New in Rapise 6.6 (November 2020) \u00b6 Summary RapiseLauncher - ability to store tests in Git [IN:5856] Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929] Add Report/Export as HTML [IN:5901] Ability to define Local to framework Global objects [IN:5353] Changelog \u00b6 Features \u00b6 Ability to define Local to framework Global objects [IN:5353] RapiseLauncher - ability to store tests in Git [IN:5856] Allow passing path to RepositoryConnection.xml to RapiseLauncher [IN:5858] Enable true Blocked status in RapiseLauncher [IN:5733] Azure DevOps pipeline that is able to install Rapise on Azure Hosted Windows VM [IN:5837] Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929] Exists property in Verify Object Properties dialog [IN:5347] Visible property in Verify Object Properties dialog [IN:5918] Enable quick switch between root and sub-tests in a framework [IN:5800] Create sub-sub test [IN:5881] Implement Report Export to support long reports with screenshots [IN:5834] Add Report/Export as HTML [IN:5901] Add Run Diagnostics button to About dialog [IN:5890] View Details Pressing Run Diagnostics button will generate the diagnostics file on the desktop and will prompt to open it in Notepad. Add option to name test file as Test.sstest [IN:5922] An option to record playback video in RapiseLauncher [IN:5953] RVL Enhancements & Improvements \u00b6 Ability to pass Sheet Name through RVL.DoPlayTest [IN:5682] Find in Object Tree for objectId params in RVL [IN:5720] Insert Row shortcut description is missing in the main Edit menu [IN:5854] Highlight preamble when sheet contains variables only [IN:5891] Add functionality of RVL button to main View menu [IN:5903] New Object API \u00b6 HTMLObject.GetVisible [IN:5918] UIAObject.GetVisible [IN:5918] UIAObject.DoFindElementByCondition [IN:5735] UIAObject.DoFindElementsByCondition [IN:5735] AndroidObject.DoFindByXPath [IN:5884] AndroidObject.GetParent [IN:5884] AndroidObject.GetNextSibling [IN:5884] AndroidObject.GetPrevSibling [IN:5884] iOSObject.DoFindByXPath [IN:5884] iOSObject.GetParent [IN:5884] iOSObject.GetNextSibling [IN:5884] iOSObject.GetPrevSibling [IN:5884] RESTService.DoRemoveRequestHeader [IN:5908] RESTService.DoRemoveParameter [IN:5908] SOAPService.DoRemoveRequestHeader [IN:5908] SOAPService.DoRemoveParameter [IN:5908] Session.DoRemoveRequestHeader [IN:5908] Session.DoRemoveParameter [IN:5908] Session.SetBaseUrl [IN:5764] Improvements \u00b6 Rename toolbar button Test to Main [IN:5902] Need New Test Case and New Folder in Save to Spira dialog [IN:4705] Add Show XPath item to Object popup menu in the Object Tree [IN:5798] Open sub-test in the same Rapise window [IN:5880] Screen Flow should generate styled HTML [IN:5835] View Details Default preamble for generated HTML is located at c:\\Program Files (x86)\\Inflectra\\Rapise\\Core\\Engine\\ScreenFlow.html . You may define your own style and place it into the root folder of your framework. The name of the file must be ScreenFlow.html . Increase Verify Object Properties dialog default size [IN:5838] Execute TestSet from Spira toolbar - show better error message if Automation Host does not exist [IN:5775] Update Rapise and RapiseLauncher .config files to support TLS 1.2 [IN:5818] Reduce delays in RapiseLauncher execution for Scheduled Tests [IN:5879] Show Comment field from Rapise report as Actual Result in Spira Test Run [IN:5932] Attach last.trp, summary.log and error.log to Spira Test Run [IN:5931] [IN:5942] [IN:5936] View Details We should use default WebAppProfile for recording if none is defined by user [IN:5776] Replace DoSendKeys with DoSendText in DynamicsAx > TextBox > SetText [IN:5831] We need a way to disable Execution Monitor for Parallel test runs [IN:5889] View Details Just set g_showExecutionMonitor to false . It can be done via test command line parameters. Quick Setup mode [IN:5886] Installation key that does not navigate to Welcome page and does not open Rapise and does not install local Help [IN:5882] Migrate to .NET 4.7.2 [IN:5885] Allow specifying ExpectedResult and SampleData for Spira report from Rapise [IN:5935] SyncToSpira.cmd hook [IN:5934] Bug Fixes \u00b6 Global.DoDecrypt throws OutOfMemory if input string is not encrypted [IN:5731] Global.DoTrim(true) does not work as described in the docs [IN:5769] DXGridControl - error in FindCell [IN:5781] Test case blocked in RapiseLauncher when Test Case name contains a quote (') [IN:5797] Fix event based Double Click in all browsers (should use low level events) [IN:5809] Relearn does not work after execution with self-healing locators [IN:5810] CSS support is broken in Rapise [IN:5813] DoEnsureVisible in Chrome returns wrong coordinates [IN:5824] Save To Spira should save updated version of .sstest file [IN:5825] Dynamics NAV - Verify Object Properties dialog closes itself for grid objects [IN:5836] VB2JS Converter fails with some input VBS [IN:5853] Register SeSHelper if it is not found in InvokeSeSHelper [IN:5861] SeSExecutor does not clear summary.log before execution [IN:5872] Encrypt password in rapise_launcher.log [IN:5876] Remove _genXPathConditions from LibDomDynamicsNAV recorder [IN:5613] Session.SetRequestHeader causes a failure if parameter is undefined [IN:5896] Library defined WebAppProfile is always overloaded with the default one [IN:5898] Double click on text node in Web Spy leads to Exception screen [IN:5926] Appium client should disable SSL3 on startup [IN:5756] Automatically reload Main.js when steps are recorded in JavaScript mode [IN:5549] RapiseLauncher can run Test Sets in parallel in some cases [IN:5954] Tester.CaptureDesktopImage does not work if used from a Web Test [IN:5941]","title":"Release Notes for 6.6"},{"location":"New/6_6/#new-in-rapise-66-november-2020","text":"Summary RapiseLauncher - ability to store tests in Git [IN:5856] Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929] Add Report/Export as HTML [IN:5901] Ability to define Local to framework Global objects [IN:5353]","title":"New in Rapise 6.6 (November 2020)"},{"location":"New/6_6/#changelog","text":"","title":"Changelog"},{"location":"New/6_6/#features","text":"Ability to define Local to framework Global objects [IN:5353] RapiseLauncher - ability to store tests in Git [IN:5856] Allow passing path to RepositoryConnection.xml to RapiseLauncher [IN:5858] Enable true Blocked status in RapiseLauncher [IN:5733] Azure DevOps pipeline that is able to install Rapise on Azure Hosted Windows VM [IN:5837] Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929] Exists property in Verify Object Properties dialog [IN:5347] Visible property in Verify Object Properties dialog [IN:5918] Enable quick switch between root and sub-tests in a framework [IN:5800] Create sub-sub test [IN:5881] Implement Report Export to support long reports with screenshots [IN:5834] Add Report/Export as HTML [IN:5901] Add Run Diagnostics button to About dialog [IN:5890] View Details Pressing Run Diagnostics button will generate the diagnostics file on the desktop and will prompt to open it in Notepad. Add option to name test file as Test.sstest [IN:5922] An option to record playback video in RapiseLauncher [IN:5953]","title":"Features"},{"location":"New/6_6/#rvl-enhancements-improvements","text":"Ability to pass Sheet Name through RVL.DoPlayTest [IN:5682] Find in Object Tree for objectId params in RVL [IN:5720] Insert Row shortcut description is missing in the main Edit menu [IN:5854] Highlight preamble when sheet contains variables only [IN:5891] Add functionality of RVL button to main View menu [IN:5903]","title":"RVL Enhancements &amp; Improvements"},{"location":"New/6_6/#new-object-api","text":"HTMLObject.GetVisible [IN:5918] UIAObject.GetVisible [IN:5918] UIAObject.DoFindElementByCondition [IN:5735] UIAObject.DoFindElementsByCondition [IN:5735] AndroidObject.DoFindByXPath [IN:5884] AndroidObject.GetParent [IN:5884] AndroidObject.GetNextSibling [IN:5884] AndroidObject.GetPrevSibling [IN:5884] iOSObject.DoFindByXPath [IN:5884] iOSObject.GetParent [IN:5884] iOSObject.GetNextSibling [IN:5884] iOSObject.GetPrevSibling [IN:5884] RESTService.DoRemoveRequestHeader [IN:5908] RESTService.DoRemoveParameter [IN:5908] SOAPService.DoRemoveRequestHeader [IN:5908] SOAPService.DoRemoveParameter [IN:5908] Session.DoRemoveRequestHeader [IN:5908] Session.DoRemoveParameter [IN:5908] Session.SetBaseUrl [IN:5764]","title":"New Object API"},{"location":"New/6_6/#improvements","text":"Rename toolbar button Test to Main [IN:5902] Need New Test Case and New Folder in Save to Spira dialog [IN:4705] Add Show XPath item to Object popup menu in the Object Tree [IN:5798] Open sub-test in the same Rapise window [IN:5880] Screen Flow should generate styled HTML [IN:5835] View Details Default preamble for generated HTML is located at c:\\Program Files (x86)\\Inflectra\\Rapise\\Core\\Engine\\ScreenFlow.html . You may define your own style and place it into the root folder of your framework. The name of the file must be ScreenFlow.html . Increase Verify Object Properties dialog default size [IN:5838] Execute TestSet from Spira toolbar - show better error message if Automation Host does not exist [IN:5775] Update Rapise and RapiseLauncher .config files to support TLS 1.2 [IN:5818] Reduce delays in RapiseLauncher execution for Scheduled Tests [IN:5879] Show Comment field from Rapise report as Actual Result in Spira Test Run [IN:5932] Attach last.trp, summary.log and error.log to Spira Test Run [IN:5931] [IN:5942] [IN:5936] View Details We should use default WebAppProfile for recording if none is defined by user [IN:5776] Replace DoSendKeys with DoSendText in DynamicsAx > TextBox > SetText [IN:5831] We need a way to disable Execution Monitor for Parallel test runs [IN:5889] View Details Just set g_showExecutionMonitor to false . It can be done via test command line parameters. Quick Setup mode [IN:5886] Installation key that does not navigate to Welcome page and does not open Rapise and does not install local Help [IN:5882] Migrate to .NET 4.7.2 [IN:5885] Allow specifying ExpectedResult and SampleData for Spira report from Rapise [IN:5935] SyncToSpira.cmd hook [IN:5934]","title":"Improvements"},{"location":"New/6_6/#bug-fixes","text":"Global.DoDecrypt throws OutOfMemory if input string is not encrypted [IN:5731] Global.DoTrim(true) does not work as described in the docs [IN:5769] DXGridControl - error in FindCell [IN:5781] Test case blocked in RapiseLauncher when Test Case name contains a quote (') [IN:5797] Fix event based Double Click in all browsers (should use low level events) [IN:5809] Relearn does not work after execution with self-healing locators [IN:5810] CSS support is broken in Rapise [IN:5813] DoEnsureVisible in Chrome returns wrong coordinates [IN:5824] Save To Spira should save updated version of .sstest file [IN:5825] Dynamics NAV - Verify Object Properties dialog closes itself for grid objects [IN:5836] VB2JS Converter fails with some input VBS [IN:5853] Register SeSHelper if it is not found in InvokeSeSHelper [IN:5861] SeSExecutor does not clear summary.log before execution [IN:5872] Encrypt password in rapise_launcher.log [IN:5876] Remove _genXPathConditions from LibDomDynamicsNAV recorder [IN:5613] Session.SetRequestHeader causes a failure if parameter is undefined [IN:5896] Library defined WebAppProfile is always overloaded with the default one [IN:5898] Double click on text node in Web Spy leads to Exception screen [IN:5926] Appium client should disable SSL3 on startup [IN:5756] Automatically reload Main.js when steps are recorded in JavaScript mode [IN:5549] RapiseLauncher can run Test Sets in parallel in some cases [IN:5954] Tester.CaptureDesktopImage does not work if used from a Web Test [IN:5941]","title":"Bug Fixes"},{"location":"New/6_7/","text":"New in Rapise 6.7 (February 2021) \u00b6 Summary Support for NodeJS as JavaScript execution engine in Rapise RapiseLauncher: Test Set attachments, CLI enhancements, RDP disconnect and screen resolution Mobile: SeeTest instrumented mode support and usability fixes REST: Bearer token, parameters in request headers and credentials, JS callbacks Amazon Web Services: support for AWS secrets and Amazon Device Farm (browser testing) Changelog \u00b6 Features \u00b6 Support for NodeJS as JavaScript execution engine in Rapise [IN:6187] RapiseLauncher: download Test Set attachments before execution and make them available in tests [IN:6059] RapiseLauncher: CLI - allow passing Test Execution parameters to test runs [IN:6028] RapiseLauncher: CLI - allow to run multiple test sets [IN:5848] RapiseLauncher: screen resolution settings for disconnected RDP session [IN:6183] RapiseLauncher: tray icon menu to disconnect RDP session for unattended UI tests execution [IN:6170] Azure DevOps: add extension for RapiseLauncher [IN:6188] Azure DevOps: add extension with Rapise Test Adapter Task [IN:6189] Mobile: support for SeeTest instrumented mode [IN:6163] Mobile: Clear button on the Spy toolbar [IN:6143] REST: parameters in request headers and credentials [IN:6118] REST: Add support for Bearer token for REST calls [IN:5675] REST: JavaScript callbacks in REST requests [IN:6038] Support for Amazon Device Farm [IN:6112] Support for AWS Secrets [IN:6113] RVL Toolbox to help learn Rapise [IN:6198] New Object API \u00b6 Global.DoSetScreenResolution [IN:6169] Session.SetIgnoreStatus [IN:6139] Session.GetNewRequest [IN:6139] Session.GetRESTRequest [IN:6139] RESTService.GetParameter [IN:6139] RESTService.SetParameter [IN:6139] RESTService.GetRequestHeader [IN:6139] RESTService.SetRequestHeader [IN:6139] RESTService.DoRemoveRequestHeader [IN:6139] RESTService.DoRemoveParameter [IN:6139] SOAPService.DoRemoveRequestHeader [IN:6139] SOAPService.DoRemoveParameter [IN:6139] Improvements \u00b6 Optimize Save to Spira for the case of thousands of files in Reports folder [IN:5976] When Reports folder contains many files - reloading of the files tree is slow [IN:5981] Use CEF (Chromium based web browser) to display Start Page, Spira Dashboard and Help [IN:6060] SeSObject > Behavior: Allow overriding properties [IN:6064] Allow Remove all from Disk for folders [IN:6103] Global.GetProperty should log an error if Config.json can not be parsed successfully [IN:6132] Allow recording REST actions a) including failed b) with short name c) without objects [IN:6138] Mobile: show wait cursor indicator immediately when a tool is pressed on the toolbar [IN:6142] Mobile: if app parameter is invalid the Spy should provide meaningful error report [IN:6144] Do not show functions marked with @private or @ignore in User Functions node of the Object Tree [IN:6140] Do not show Test , TestInit , TestPrepare , TestFinish in User Functions node of the Object Tree [IN:6154] Auto detect numbers and bools for REST parameters [IN:6159] Add support for FIPS compliant AES algorithm to RapiseLauncher/Rapise [IN:6199] Bug Fixes \u00b6 Mobile: fail to get snapshot if PageSource XML contains text nodes [IN:6049] Mobile: newCommandTimeout capability does not work with SeeTest [IN:6135] View Details To fix open the mobile profile in Rapise 6.7, change newCommandTimeout value and save the profile. TelerikGridView.DoClickCell is broken [IN:6133] DomDynamicsNAV library is incompatible with the latest Business Central version [IN:6115] DomDynamicsAXTabControl - tab selection not working because of MS update [IN:6096] DynamicsAXTable need fixes for the table with filters [IN:6043] DynamicsAXTable - grid column is not found by name if a cell is selected [IN:6040] DXComboBoxEdit - not able to read default value of a lookup [IN:5986] Tab navigation is not possible with DXDocumentHost [IN:5985] Out of memory if object is not found in a Sub-Test when StopOnError = false [IN:5993] RVL - optional params of action before If removed 1 st line of If [IN:5991]","title":"Release Notes for 6.7"},{"location":"New/6_7/#new-in-rapise-67-february-2021","text":"Summary Support for NodeJS as JavaScript execution engine in Rapise RapiseLauncher: Test Set attachments, CLI enhancements, RDP disconnect and screen resolution Mobile: SeeTest instrumented mode support and usability fixes REST: Bearer token, parameters in request headers and credentials, JS callbacks Amazon Web Services: support for AWS secrets and Amazon Device Farm (browser testing)","title":"New in Rapise 6.7 (February 2021)"},{"location":"New/6_7/#changelog","text":"","title":"Changelog"},{"location":"New/6_7/#features","text":"Support for NodeJS as JavaScript execution engine in Rapise [IN:6187] RapiseLauncher: download Test Set attachments before execution and make them available in tests [IN:6059] RapiseLauncher: CLI - allow passing Test Execution parameters to test runs [IN:6028] RapiseLauncher: CLI - allow to run multiple test sets [IN:5848] RapiseLauncher: screen resolution settings for disconnected RDP session [IN:6183] RapiseLauncher: tray icon menu to disconnect RDP session for unattended UI tests execution [IN:6170] Azure DevOps: add extension for RapiseLauncher [IN:6188] Azure DevOps: add extension with Rapise Test Adapter Task [IN:6189] Mobile: support for SeeTest instrumented mode [IN:6163] Mobile: Clear button on the Spy toolbar [IN:6143] REST: parameters in request headers and credentials [IN:6118] REST: Add support for Bearer token for REST calls [IN:5675] REST: JavaScript callbacks in REST requests [IN:6038] Support for Amazon Device Farm [IN:6112] Support for AWS Secrets [IN:6113] RVL Toolbox to help learn Rapise [IN:6198]","title":"Features"},{"location":"New/6_7/#new-object-api","text":"Global.DoSetScreenResolution [IN:6169] Session.SetIgnoreStatus [IN:6139] Session.GetNewRequest [IN:6139] Session.GetRESTRequest [IN:6139] RESTService.GetParameter [IN:6139] RESTService.SetParameter [IN:6139] RESTService.GetRequestHeader [IN:6139] RESTService.SetRequestHeader [IN:6139] RESTService.DoRemoveRequestHeader [IN:6139] RESTService.DoRemoveParameter [IN:6139] SOAPService.DoRemoveRequestHeader [IN:6139] SOAPService.DoRemoveParameter [IN:6139]","title":"New Object API"},{"location":"New/6_7/#improvements","text":"Optimize Save to Spira for the case of thousands of files in Reports folder [IN:5976] When Reports folder contains many files - reloading of the files tree is slow [IN:5981] Use CEF (Chromium based web browser) to display Start Page, Spira Dashboard and Help [IN:6060] SeSObject > Behavior: Allow overriding properties [IN:6064] Allow Remove all from Disk for folders [IN:6103] Global.GetProperty should log an error if Config.json can not be parsed successfully [IN:6132] Allow recording REST actions a) including failed b) with short name c) without objects [IN:6138] Mobile: show wait cursor indicator immediately when a tool is pressed on the toolbar [IN:6142] Mobile: if app parameter is invalid the Spy should provide meaningful error report [IN:6144] Do not show functions marked with @private or @ignore in User Functions node of the Object Tree [IN:6140] Do not show Test , TestInit , TestPrepare , TestFinish in User Functions node of the Object Tree [IN:6154] Auto detect numbers and bools for REST parameters [IN:6159] Add support for FIPS compliant AES algorithm to RapiseLauncher/Rapise [IN:6199]","title":"Improvements"},{"location":"New/6_7/#bug-fixes","text":"Mobile: fail to get snapshot if PageSource XML contains text nodes [IN:6049] Mobile: newCommandTimeout capability does not work with SeeTest [IN:6135] View Details To fix open the mobile profile in Rapise 6.7, change newCommandTimeout value and save the profile. TelerikGridView.DoClickCell is broken [IN:6133] DomDynamicsNAV library is incompatible with the latest Business Central version [IN:6115] DomDynamicsAXTabControl - tab selection not working because of MS update [IN:6096] DynamicsAXTable need fixes for the table with filters [IN:6043] DynamicsAXTable - grid column is not found by name if a cell is selected [IN:6040] DXComboBoxEdit - not able to read default value of a lookup [IN:5986] Tab navigation is not possible with DXDocumentHost [IN:5985] Out of memory if object is not found in a Sub-Test when StopOnError = false [IN:5993] RVL - optional params of action before If removed 1 st line of If [IN:5991]","title":"Bug Fixes"},{"location":"New/7_0/","text":"New in Rapise 7.0 (June 2021) \u00b6 Summary Spira Dashboard 2.0 New responsive UI Flaky tests support Automatic rerun Changelog \u00b6 Features \u00b6 Spira Dashboard 2.0 New responsive UI Flaky tests support Automatic rerun Upgrade Appium .NET to 4.1.1 and Selenium WebDriver to 3.141 [IN:6251] Remove Neoload integration [IN:6282] New Object API \u00b6 Tester.GetTestName [IN:6488] Tester.SoftAssert [IN:6322] Tester.SoftAssertAll [IN:6322] Tester.AddImageToReport [IN:6125] SeSReportFile to use with Tester.Message, Tester.Assert, Tester.AssertEqual [IN:6171] RESTService.GetResponseStatusCode [IN:6287] RESTService.GetResponseStatusText [IN:6287] Improvements \u00b6 Show Test saved successfully message after saving test to Spira [IN:5914] If Repository folder configured in Spira Settings is invalid - do not save settings [IN:5915] Trim Test Name and Folder in Create New Test dialog [IN:5970] RapiseLauncher - auto screenshots should do nothing for Mobile and API [IN:6137] Remember full screen state of Mobile Spy [IN:6166] Combine Discovery and Maintenance modes in Web and Mobile Spy [IN:6166] Pass g_spiraProjectName , g_spiraTestSetName , g_spiraTestCaseName , g_spiraReleaseName to executed test from RapiseLauncher [IN:6186] Reload list of project when switching between Spira instances [IN:6190] Include certain actions of the Global object into execution report [IN:6208] Make it easier to switch between sub-tests of a framework (via Spira Dashboard) [IN:6209] Improve RVL Toolbox search [IN:6247] Open KB & Help Topics on double click in RVL Toolbox [IN:6261] Go to Symbol: add shortcut and improve the functionality [IN:6460] Use \"+\" to add folder in Files/Show all files view [IN:6475] Make Browser Created message in the report more informative [IN:6485] Bug Fixes \u00b6 Rapise.CDM gets corrupted in some cases [IN:6219] Firefox recorder is broken in Node & custom g_browserExecutablePath [IN:6232] Chrome popup recording sticks for 10 seconds [IN:6233] Unlink from Spira should also reset repository type [IN:6244] RapiseLauncher may include error.log and video file from previous execution of the same test set [IN:6245] Rapise load hangs if .rest file is missing [IN:6257] RVL Toolbox should open links in the new browser tab [IN:6240] REST 'PATCH' is missing in the dropdown [IN:6272] SOAP CreateScript fails when Main.js points to a wrong location [IN:6274] WebSpy/MobileSpy are broken in Node mode [IN:6310] Global.DoLaunch does not work for .cmd files [IN:6448] Assert message expression is broken [IN:6451] Open document list is not saved when Rapise is closed [IN:6463] RVL.DoPlayTestParallel dropdown is empty [IN:6474] Ignore Object Name is Broken on Login/Logout in LIS [IN:6476] Allow making actual screenshot in browser mode [IN:6484] UI Automation Locator: record - flash not working in Unified Service Desk in some cases [IN:6516] Navigator.KillBrowser is not working after unsuccessful Navigator.Close [IN:6517]","title":"Release Notes for 7.0"},{"location":"New/7_0/#new-in-rapise-70-june-2021","text":"Summary Spira Dashboard 2.0 New responsive UI Flaky tests support Automatic rerun","title":"New in Rapise 7.0 (June 2021)"},{"location":"New/7_0/#changelog","text":"","title":"Changelog"},{"location":"New/7_0/#features","text":"Spira Dashboard 2.0 New responsive UI Flaky tests support Automatic rerun Upgrade Appium .NET to 4.1.1 and Selenium WebDriver to 3.141 [IN:6251] Remove Neoload integration [IN:6282]","title":"Features"},{"location":"New/7_0/#new-object-api","text":"Tester.GetTestName [IN:6488] Tester.SoftAssert [IN:6322] Tester.SoftAssertAll [IN:6322] Tester.AddImageToReport [IN:6125] SeSReportFile to use with Tester.Message, Tester.Assert, Tester.AssertEqual [IN:6171] RESTService.GetResponseStatusCode [IN:6287] RESTService.GetResponseStatusText [IN:6287]","title":"New Object API"},{"location":"New/7_0/#improvements","text":"Show Test saved successfully message after saving test to Spira [IN:5914] If Repository folder configured in Spira Settings is invalid - do not save settings [IN:5915] Trim Test Name and Folder in Create New Test dialog [IN:5970] RapiseLauncher - auto screenshots should do nothing for Mobile and API [IN:6137] Remember full screen state of Mobile Spy [IN:6166] Combine Discovery and Maintenance modes in Web and Mobile Spy [IN:6166] Pass g_spiraProjectName , g_spiraTestSetName , g_spiraTestCaseName , g_spiraReleaseName to executed test from RapiseLauncher [IN:6186] Reload list of project when switching between Spira instances [IN:6190] Include certain actions of the Global object into execution report [IN:6208] Make it easier to switch between sub-tests of a framework (via Spira Dashboard) [IN:6209] Improve RVL Toolbox search [IN:6247] Open KB & Help Topics on double click in RVL Toolbox [IN:6261] Go to Symbol: add shortcut and improve the functionality [IN:6460] Use \"+\" to add folder in Files/Show all files view [IN:6475] Make Browser Created message in the report more informative [IN:6485]","title":"Improvements"},{"location":"New/7_0/#bug-fixes","text":"Rapise.CDM gets corrupted in some cases [IN:6219] Firefox recorder is broken in Node & custom g_browserExecutablePath [IN:6232] Chrome popup recording sticks for 10 seconds [IN:6233] Unlink from Spira should also reset repository type [IN:6244] RapiseLauncher may include error.log and video file from previous execution of the same test set [IN:6245] Rapise load hangs if .rest file is missing [IN:6257] RVL Toolbox should open links in the new browser tab [IN:6240] REST 'PATCH' is missing in the dropdown [IN:6272] SOAP CreateScript fails when Main.js points to a wrong location [IN:6274] WebSpy/MobileSpy are broken in Node mode [IN:6310] Global.DoLaunch does not work for .cmd files [IN:6448] Assert message expression is broken [IN:6451] Open document list is not saved when Rapise is closed [IN:6463] RVL.DoPlayTestParallel dropdown is empty [IN:6474] Ignore Object Name is Broken on Login/Logout in LIS [IN:6476] Allow making actual screenshot in browser mode [IN:6484] UI Automation Locator: record - flash not working in Unified Service Desk in some cases [IN:6516] Navigator.KillBrowser is not working after unsuccessful Navigator.Close [IN:6517]","title":"Bug Fixes"},{"location":"New/7_1/","text":"New in Rapise 7.1 (September 2021) \u00b6 Summary Spira Dashboard: add support for Rerun test set if failed option [IN:6561] Parallel execution of Test Cases in RapiseLauncher [IN:6608] Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652] Add support for Oracle Forms [IN:6698] Enhance UFT converter [IN:6699] Add support for Spira managed floating licenses [IN:6729] Changelog \u00b6 Features \u00b6 Spira Dashboard: parameter editing for Test Cases and Test Sets [IN:6555] Spira Dashboard: add support for Rerun test set if failed option [IN:6561] Right-Click & Double-Click recording for ListView control (Managed) [IN:6563] Spira Dashboard: add support for editing Test Set Test Case parameters [IN:6582] Include npm into Rapise setup package [IN:6603] Parallel execution of Test Cases in RapiseLauncher [IN:6608] Spira Dashboard: Test Cases view - add Open This Test to Action items [IN:6623] Spira Dashboard: Main view - Execute, Execute on Host for linked tests [IN:6624] Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652] Add support for new AG grid in Dynamics 365 for Sales library [IN:6656] Spira Dashboard: auto update status of executed test sets [IN:6663] Spira Dashboard: tree view for the framework [IN:6666] Spira Dashboard:: automatically add tags to Test Runs in RapiseLauncher for filtering [IN:6673] OnTextSaved.cmd [IN:6694] Tools > Npm Console to install node modules for a test framework [IN:6697] Add support for Oracle Forms [IN:6698] Enhance UFT converter [IN:6699] Framework defined custom start page [IN:6700] Enable StartPage customization [IN:6701] SeSOnTestReportReady [IN:6702] ConfigPrompt [IN:6703] Add support for Spira managed floating licenses [IN:6729] New Object API \u00b6 Managed library: IsEnabled property for ManagedMenuStrip [IN:6564] UIAutomation library: ClickItem action for UIAList (with Right-Click and Double-Click) [IN:6565] Add more SoftAssert statements [IN:6637] Improvements \u00b6 RVL.DoPlaySheet and RVL.DoPlayScript should write a line into report [IN:5992] Automatically fix Spira Properties in sstest file if opened from a test case clone [IN:6546] Sign all possible executables [IN:6552] RapiseLauncher should report more specific error when we try to run a test on non-existent automation host [IN:6553] UIAutomation library: Improve recording speed when an object has many child items [IN:6566] Improve Telerik RadGridView recording [IN:6567] Update doc for Map.GetRowIndexByName [IN:6593] Spira dashboard should have spinner for long operations [IN:6617] Copy test set custom properties and parameters if running from Spira Dashboard (execute on host) [IN:6626] Improve formatting of code generated by recorder [IN:6627] Unlink from Spira - delete Repository and Entries jsons [IN:6635] REST editor column resize [IN:6639] Store Start Page and Spira Dashboard zoom level in Rapise settings [IN:6669] DXComboBoxEdit - improve GetSelectedText [IN:6670] Source Editor - save font size when file is saved [IN:6674] Add \"Text Editor\" section in the global settings [IN:6691] RVL - New Sheet - Cancel does not cancel [IN:6706] Pass spira config path the test from RapiseLauncher [IN:6753] Bug Fixes \u00b6 Web Spy - exit from tracking mode does not respect maximized Spy state [IN:6551] Spira Dashboard: Test Cases view: if no test cases, all folders shown opened [IN:6558] Save .LIC file to ProgramData [IN:6580] Spira Connection Settings not applied if new API Key is entered in Spira Settings [IN:6633] Link a test to Spira Test Case - .ssetst file is not saved for a sub-test [IN:6634] Spy is not opened in some cases [IN:6696] Flash broken for objects with ' in name (d'une Application) [IN:6705]","title":"Release Notes for 7.1"},{"location":"New/7_1/#new-in-rapise-71-september-2021","text":"Summary Spira Dashboard: add support for Rerun test set if failed option [IN:6561] Parallel execution of Test Cases in RapiseLauncher [IN:6608] Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652] Add support for Oracle Forms [IN:6698] Enhance UFT converter [IN:6699] Add support for Spira managed floating licenses [IN:6729]","title":"New in Rapise 7.1 (September 2021)"},{"location":"New/7_1/#changelog","text":"","title":"Changelog"},{"location":"New/7_1/#features","text":"Spira Dashboard: parameter editing for Test Cases and Test Sets [IN:6555] Spira Dashboard: add support for Rerun test set if failed option [IN:6561] Right-Click & Double-Click recording for ListView control (Managed) [IN:6563] Spira Dashboard: add support for editing Test Set Test Case parameters [IN:6582] Include npm into Rapise setup package [IN:6603] Parallel execution of Test Cases in RapiseLauncher [IN:6608] Spira Dashboard: Test Cases view - add Open This Test to Action items [IN:6623] Spira Dashboard: Main view - Execute, Execute on Host for linked tests [IN:6624] Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652] Add support for new AG grid in Dynamics 365 for Sales library [IN:6656] Spira Dashboard: auto update status of executed test sets [IN:6663] Spira Dashboard: tree view for the framework [IN:6666] Spira Dashboard:: automatically add tags to Test Runs in RapiseLauncher for filtering [IN:6673] OnTextSaved.cmd [IN:6694] Tools > Npm Console to install node modules for a test framework [IN:6697] Add support for Oracle Forms [IN:6698] Enhance UFT converter [IN:6699] Framework defined custom start page [IN:6700] Enable StartPage customization [IN:6701] SeSOnTestReportReady [IN:6702] ConfigPrompt [IN:6703] Add support for Spira managed floating licenses [IN:6729]","title":"Features"},{"location":"New/7_1/#new-object-api","text":"Managed library: IsEnabled property for ManagedMenuStrip [IN:6564] UIAutomation library: ClickItem action for UIAList (with Right-Click and Double-Click) [IN:6565] Add more SoftAssert statements [IN:6637]","title":"New Object API"},{"location":"New/7_1/#improvements","text":"RVL.DoPlaySheet and RVL.DoPlayScript should write a line into report [IN:5992] Automatically fix Spira Properties in sstest file if opened from a test case clone [IN:6546] Sign all possible executables [IN:6552] RapiseLauncher should report more specific error when we try to run a test on non-existent automation host [IN:6553] UIAutomation library: Improve recording speed when an object has many child items [IN:6566] Improve Telerik RadGridView recording [IN:6567] Update doc for Map.GetRowIndexByName [IN:6593] Spira dashboard should have spinner for long operations [IN:6617] Copy test set custom properties and parameters if running from Spira Dashboard (execute on host) [IN:6626] Improve formatting of code generated by recorder [IN:6627] Unlink from Spira - delete Repository and Entries jsons [IN:6635] REST editor column resize [IN:6639] Store Start Page and Spira Dashboard zoom level in Rapise settings [IN:6669] DXComboBoxEdit - improve GetSelectedText [IN:6670] Source Editor - save font size when file is saved [IN:6674] Add \"Text Editor\" section in the global settings [IN:6691] RVL - New Sheet - Cancel does not cancel [IN:6706] Pass spira config path the test from RapiseLauncher [IN:6753]","title":"Improvements"},{"location":"New/7_1/#bug-fixes","text":"Web Spy - exit from tracking mode does not respect maximized Spy state [IN:6551] Spira Dashboard: Test Cases view: if no test cases, all folders shown opened [IN:6558] Save .LIC file to ProgramData [IN:6580] Spira Connection Settings not applied if new API Key is entered in Spira Settings [IN:6633] Link a test to Spira Test Case - .ssetst file is not saved for a sub-test [IN:6634] Spy is not opened in some cases [IN:6696] Flash broken for objects with ' in name (d'une Application) [IN:6705]","title":"Bug Fixes"},{"location":"New/7_2/","text":"New in Rapise 7.2 (February 2022) \u00b6 Summary Add Generator global object [IN:6731] Add SpiraApi global object [IN:6763] Show Test Matrix from Test Runs in Spira Dashboard [IN:6785] Automatically download and load Selenium drivers from Rapise Data folder [IN:6877] Add Text global object [IN:6889] Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905] Changelog \u00b6 Features \u00b6 Option to take a screenshot on test failure [IN:5595] Add Generator global object [IN:6731] Add SpiraApi global object [IN:6763] Show Test Matrix from Test Runs in Spira Dashboard [IN:6785] Automatically download and load Selenium drivers from Rapise Data folder [IN:6877] Add Text global object [IN:6889] Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905] New Object API \u00b6 Global.DoWaitForWindow [IN:6454] Add support for Salesforce Lightning ComboBox [IN:6911] Add Enabled property to JavaObject [IN:6925] Global.DoMaximizeWindow [IN:6993] Global.DoMinimizeWindow [IN:6994] Global.DoRestoreWindow [IN:6995] WebDriver.DownloadDriver [IN:6996] Improvements \u00b6 Read column names for Excel binding in RVL [IN:6543] Select and execute several test cases from the main page of Spira Dashboard [IN:6768] Quick way to add tests from main page of Spira Dashboard to a test set [IN:6769] Show Release column for Test Sets and Test Runs in Spira Dashboard [IN:6771] Filters to view My Assigned Test Cases/Test Sets in Spira Dashboard [IN:6772] RapiseLauncher - add Open Log file button to Client Setup page [IN:6775] RapiseLauncher - indicate that Git clone or Spira repository download is in progress [IN:6776] Spira Dashboard - Test Set details - move Git custom properties to bottom [IN:6777] Show parameters on Test Run page in Spira Dashboard [IN:6784] Move Spira Dashboard. settings file to ProgramData [IN:6813] Dashboard - create Password type custom property for GitPassword [IN:6816] Remember list of selected columns for major tables in Spira Dashboard [IN:6823] Spira Dashboard - framework page - show RVL, User, Objects link for tests [IN:6836] Spira Settings - use machine name as automation token (default value) [IN:6843] Add Test Set Status graph on main page of Spira Dashboard [IN:6871] Create new test case right from the main page of Spira Dashboard [IN:6875] Usability improvements for Spira Dashboard [IN:6899] Flash in Selenium (when connected via debuggerAddress) [IN:6906] Remove Test Sets in Progress from main dashboard page [IN:6923] More flexible way to expand/collapse framework folders on the main page of the dashboard [IN:6924] Read pixel color in ImageWrapper [IN:6952] On multi monitor system Rapise should capture desktop that contains the object [IN:6967] Add Test Git Credentials button to Test Set details in Spira Dashboard [IN:7012] Bug Fixes \u00b6 Tab naming for Main.xlsx may be incorrect [IN:5955] List of SOAP endpoints clears on pressing Save [IN:6259] Web: detect situations when element is visible but overlapped with another one [IN:6750] Cancel Execution does not work in RapiseLauncher [IN:6762] Adding new sheet does not mark RVL as modified [IN:6766] col param name recorded for DoClickCell in Swing Table [IN:6774] Ctrl+F may not work in source editor in some cases [IN:6782] Close button in RVL Toolbox has no effect [IN:6810] Android - default XPath may be calculated incorrectly [IN:6820] Test Run details in Test Cases are always empty [IN:6825] Status indication is incorrect when updating test schedule in RapiseLauncher [IN:6846] RVL.DoPlaySheet does not offer just created sheet name in the dropdown [IN:6854] RapiseLauncher starts with not fully loaded form [IN:6855] Navigator.ExecJS 2 nd parameter missing in RVL [IN:6864] Problem adding a custom property if already defined properties are not sequential [IN:6868] License activation is broken for DMO codes [IN:6869] Java: javaUniqueObjectString should use hashCode [IN:6886] Error attaching to Chrome debug port via Selenium [IN:6888] RVL: Rapise does not highlight orphaned End statements [IN:6915] SoftAssertSet requires wrong number of parameters [IN:6918] JS debugger strange behavior if throw is last before else [IN:6927] Empty GitRoot custom parameter corrupts test case path [IN:6934] Test Connection broken in RapiseLauncher settings [IN:6946] REST recording corrupts Objects.js [IN:6970] UIAutomation may record two different objects as one [IN:6971] Access to 'web-service.log' is denied [IN:7003] Selenium driver executables stay running when CreateDriver fails [IN:7004]","title":"Release Notes for 7.2"},{"location":"New/7_2/#new-in-rapise-72-february-2022","text":"Summary Add Generator global object [IN:6731] Add SpiraApi global object [IN:6763] Show Test Matrix from Test Runs in Spira Dashboard [IN:6785] Automatically download and load Selenium drivers from Rapise Data folder [IN:6877] Add Text global object [IN:6889] Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905]","title":"New in Rapise 7.2 (February 2022)"},{"location":"New/7_2/#changelog","text":"","title":"Changelog"},{"location":"New/7_2/#features","text":"Option to take a screenshot on test failure [IN:5595] Add Generator global object [IN:6731] Add SpiraApi global object [IN:6763] Show Test Matrix from Test Runs in Spira Dashboard [IN:6785] Automatically download and load Selenium drivers from Rapise Data folder [IN:6877] Add Text global object [IN:6889] Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905]","title":"Features"},{"location":"New/7_2/#new-object-api","text":"Global.DoWaitForWindow [IN:6454] Add support for Salesforce Lightning ComboBox [IN:6911] Add Enabled property to JavaObject [IN:6925] Global.DoMaximizeWindow [IN:6993] Global.DoMinimizeWindow [IN:6994] Global.DoRestoreWindow [IN:6995] WebDriver.DownloadDriver [IN:6996]","title":"New Object API"},{"location":"New/7_2/#improvements","text":"Read column names for Excel binding in RVL [IN:6543] Select and execute several test cases from the main page of Spira Dashboard [IN:6768] Quick way to add tests from main page of Spira Dashboard to a test set [IN:6769] Show Release column for Test Sets and Test Runs in Spira Dashboard [IN:6771] Filters to view My Assigned Test Cases/Test Sets in Spira Dashboard [IN:6772] RapiseLauncher - add Open Log file button to Client Setup page [IN:6775] RapiseLauncher - indicate that Git clone or Spira repository download is in progress [IN:6776] Spira Dashboard - Test Set details - move Git custom properties to bottom [IN:6777] Show parameters on Test Run page in Spira Dashboard [IN:6784] Move Spira Dashboard. settings file to ProgramData [IN:6813] Dashboard - create Password type custom property for GitPassword [IN:6816] Remember list of selected columns for major tables in Spira Dashboard [IN:6823] Spira Dashboard - framework page - show RVL, User, Objects link for tests [IN:6836] Spira Settings - use machine name as automation token (default value) [IN:6843] Add Test Set Status graph on main page of Spira Dashboard [IN:6871] Create new test case right from the main page of Spira Dashboard [IN:6875] Usability improvements for Spira Dashboard [IN:6899] Flash in Selenium (when connected via debuggerAddress) [IN:6906] Remove Test Sets in Progress from main dashboard page [IN:6923] More flexible way to expand/collapse framework folders on the main page of the dashboard [IN:6924] Read pixel color in ImageWrapper [IN:6952] On multi monitor system Rapise should capture desktop that contains the object [IN:6967] Add Test Git Credentials button to Test Set details in Spira Dashboard [IN:7012]","title":"Improvements"},{"location":"New/7_2/#bug-fixes","text":"Tab naming for Main.xlsx may be incorrect [IN:5955] List of SOAP endpoints clears on pressing Save [IN:6259] Web: detect situations when element is visible but overlapped with another one [IN:6750] Cancel Execution does not work in RapiseLauncher [IN:6762] Adding new sheet does not mark RVL as modified [IN:6766] col param name recorded for DoClickCell in Swing Table [IN:6774] Ctrl+F may not work in source editor in some cases [IN:6782] Close button in RVL Toolbox has no effect [IN:6810] Android - default XPath may be calculated incorrectly [IN:6820] Test Run details in Test Cases are always empty [IN:6825] Status indication is incorrect when updating test schedule in RapiseLauncher [IN:6846] RVL.DoPlaySheet does not offer just created sheet name in the dropdown [IN:6854] RapiseLauncher starts with not fully loaded form [IN:6855] Navigator.ExecJS 2 nd parameter missing in RVL [IN:6864] Problem adding a custom property if already defined properties are not sequential [IN:6868] License activation is broken for DMO codes [IN:6869] Java: javaUniqueObjectString should use hashCode [IN:6886] Error attaching to Chrome debug port via Selenium [IN:6888] RVL: Rapise does not highlight orphaned End statements [IN:6915] SoftAssertSet requires wrong number of parameters [IN:6918] JS debugger strange behavior if throw is last before else [IN:6927] Empty GitRoot custom parameter corrupts test case path [IN:6934] Test Connection broken in RapiseLauncher settings [IN:6946] REST recording corrupts Objects.js [IN:6970] UIAutomation may record two different objects as one [IN:6971] Access to 'web-service.log' is denied [IN:7003] Selenium driver executables stay running when CreateDriver fails [IN:7004]","title":"Bug Fixes"},{"location":"New/Roadmap/","text":"Development Roadmap \u00b6 About This roadmap document outlines the functionality planned for the future releases of the version 6 platform of Rapise. We are responsive to feedback so the contents of each individual release will be subject to change. Releases will also include lower level enhancements and bug fixes. We do not provide a public list of open bugs or enhancement requests at this time. If you have any feedback or suggestions regarding this roadmap, please email us at support@inflectra.com . Version 7.2 (February 2022) \u00b6 Spira Global Object to communicate with Spira from Rapise tests (to create an incident, to run a test set, to support complex execution flows). Generator Global Object to generate sequences of values usable across test runs (e.g. unique incremented value for every test run). Spira Dashboard enhancements: Test Matrix, Test Set Status graph, create Test Set from Dashboard page. Version 7.3 (April 2022) \u00b6 PageObject pattern support. Allow sub-test to export global object, re-usable across other sub-tests. Backlog \u00b6 SpiraTest Integration Enhancements \u00b6 Flaky tests support : Auto detect that a test is flaky and mark the test case and test run details. Object Repository Management \u00b6 Hierarchical Object Repository : Multilevel object tree with ability to show objects from multiple tests and combine objects into user-defined groups. Remove unused objects : Option to remove objects that are not used explicitly in RVL or JavaScript modules. Run Tests on Linux/macOS \u00b6 NodeJS based Mobile execution : Run mobile tests on Non-Windows hosts. NodeJS based RapiseLauncher : Connect to Spira from Non-Windows hosts and execute tests. UX Enhancements \u00b6 FileCompare - add FileCompare UI to assist with adding file checkpoints on recording, updating checkpoints and analyzing differences after execution for files (txt, PDF, doc, JSON, csv) and text fields of runtime objects (Window text, Object Value). Recorder Dialog 2.0 : Ability to fine tune captured steps during recording. Simplified installation/upgrade : Do not require to uninstall Rapise before upgrade. Dark mode : Someday, really :) Custom Start Page . Allow test framework or test to have custom start page that may interact with test (re-build test structure, display graph, modify test) and show some application-specific information regarding test. Integrations \u00b6 Chrome Manifest V3 support. Reporter API : Callbacks to plug in third-party reporting engines. Jenkins plugin : Plugin to simplify running Rapise tests from Jenkins. Java 64-bit : Recording and running tests on 64-bit JVM. Visual Studio Code integration : Code helper for Rapise objects/actions. Start recording/playback from VS Code. Azure Test Plans integration : Linking to a test case in an Azure Test Plan.","title":"Development Roadmap"},{"location":"New/Roadmap/#development-roadmap","text":"About This roadmap document outlines the functionality planned for the future releases of the version 6 platform of Rapise. We are responsive to feedback so the contents of each individual release will be subject to change. Releases will also include lower level enhancements and bug fixes. We do not provide a public list of open bugs or enhancement requests at this time. If you have any feedback or suggestions regarding this roadmap, please email us at support@inflectra.com .","title":"Development Roadmap"},{"location":"New/Roadmap/#version-72-february-2022","text":"Spira Global Object to communicate with Spira from Rapise tests (to create an incident, to run a test set, to support complex execution flows). Generator Global Object to generate sequences of values usable across test runs (e.g. unique incremented value for every test run). Spira Dashboard enhancements: Test Matrix, Test Set Status graph, create Test Set from Dashboard page.","title":"Version 7.2 (February 2022)"},{"location":"New/Roadmap/#version-73-april-2022","text":"PageObject pattern support. Allow sub-test to export global object, re-usable across other sub-tests.","title":"Version 7.3 (April 2022)"},{"location":"New/Roadmap/#backlog","text":"","title":"Backlog"},{"location":"New/Roadmap/#spiratest-integration-enhancements","text":"Flaky tests support : Auto detect that a test is flaky and mark the test case and test run details.","title":"SpiraTest Integration Enhancements"},{"location":"New/Roadmap/#object-repository-management","text":"Hierarchical Object Repository : Multilevel object tree with ability to show objects from multiple tests and combine objects into user-defined groups. Remove unused objects : Option to remove objects that are not used explicitly in RVL or JavaScript modules.","title":"Object Repository Management"},{"location":"New/Roadmap/#run-tests-on-linuxmacos","text":"NodeJS based Mobile execution : Run mobile tests on Non-Windows hosts. NodeJS based RapiseLauncher : Connect to Spira from Non-Windows hosts and execute tests.","title":"Run Tests on Linux/macOS"},{"location":"New/Roadmap/#ux-enhancements","text":"FileCompare - add FileCompare UI to assist with adding file checkpoints on recording, updating checkpoints and analyzing differences after execution for files (txt, PDF, doc, JSON, csv) and text fields of runtime objects (Window text, Object Value). Recorder Dialog 2.0 : Ability to fine tune captured steps during recording. Simplified installation/upgrade : Do not require to uninstall Rapise before upgrade. Dark mode : Someday, really :) Custom Start Page . Allow test framework or test to have custom start page that may interact with test (re-build test structure, display graph, modify test) and show some application-specific information regarding test.","title":"UX Enhancements"},{"location":"New/Roadmap/#integrations","text":"Chrome Manifest V3 support. Reporter API : Callbacks to plug in third-party reporting engines. Jenkins plugin : Plugin to simplify running Rapise tests from Jenkins. Java 64-bit : Recording and running tests on 64-bit JVM. Visual Studio Code integration : Code helper for Rapise objects/actions. Start recording/playback from VS Code. Azure Test Plans integration : Linking to a test case in an Azure Test Plan.","title":"Integrations"},{"location":"RVL/Actions/","text":"Actions \u00b6 In RVL Action always refers to an operation performed with object. Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 If row type is Action then there must be Object and Action cells defined. Note : In this example we call an operation that would look in JavaScript as follows: SeS ( 'MyButton' ). DoClick ( 5 , 7 ); Object Actions \u00b6 Object is an ID of learned or Global object. Available objects may be found in the Object Tree : Object tree contains list of available objects, including: Local objects (1) learned recorded or learned from the application under test. Global object . Always available set of objects containing most common utility functions and operations. Functions . Represent global JavaScript functions. Each time you define a global function in .user.js file it becomes available for calling from RVL with special object ID Functions. Each Object has its own set of actions. You may also see them in the object tree: An Action may have any number of parameters. See Params for more info. Editing Action \u00b6 An Action may have both mandatory and optional params. When action is selected from the dropdown its params are displayed: By default RVL editor pre-fills only mandatory params for you when you select an action from the dropdown. In this example DoLaunch has one mandatory parameter cmdLine so here is what you get when you select it: However the situation is differs if you hold the Shift key while choosing an Action from the dropdown: You may see that all parameters are applied in this case. Note: if you you already have have the same action and select it with Shift key again, no optional params are applied. You need to clean the Action cell and re-select it with Shift if you want to achieve the desired effect. Examples \u00b6 Action without parameters Action with single parameter. In RVL each parameter takes one line with Action = Param . However for the 1 st param there is an exception. It may occupy the same line as Action itself: Action with many parameters:","title":"Actions"},{"location":"RVL/Actions/#actions","text":"In RVL Action always refers to an operation performed with object. Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 If row type is Action then there must be Object and Action cells defined. Note : In this example we call an operation that would look in JavaScript as follows: SeS ( 'MyButton' ). DoClick ( 5 , 7 );","title":"Actions"},{"location":"RVL/Actions/#object-actions","text":"Object is an ID of learned or Global object. Available objects may be found in the Object Tree : Object tree contains list of available objects, including: Local objects (1) learned recorded or learned from the application under test. Global object . Always available set of objects containing most common utility functions and operations. Functions . Represent global JavaScript functions. Each time you define a global function in .user.js file it becomes available for calling from RVL with special object ID Functions. Each Object has its own set of actions. You may also see them in the object tree: An Action may have any number of parameters. See Params for more info.","title":"Object Actions"},{"location":"RVL/Actions/#editing-action","text":"An Action may have both mandatory and optional params. When action is selected from the dropdown its params are displayed: By default RVL editor pre-fills only mandatory params for you when you select an action from the dropdown. In this example DoLaunch has one mandatory parameter cmdLine so here is what you get when you select it: However the situation is differs if you hold the Shift key while choosing an Action from the dropdown: You may see that all parameters are applied in this case. Note: if you you already have have the same action and select it with Shift key again, no optional params are applied. You need to clean the Action cell and re-select it with Shift if you want to achieve the desired effect.","title":"Editing Action"},{"location":"RVL/Actions/#examples","text":"Action without parameters Action with single parameter. In RVL each parameter takes one line with Action = Param . However for the 1 st param there is an exception. It may occupy the same line as Action itself: Action with many parameters:","title":"Examples"},{"location":"RVL/Assertions/","text":"Assertions \u00b6 Assert is an essential operation for testing and validation. RVL provides special structure for it to make it more readable. Assertion has 2 parts: 1 st row is Assert containing assertion message and then goes Condition : ... Type ... Action ParamName ... Assert message string Param param1 Condition condition statement Param param2 Assertion first line is always the same except the Param Value . In RVL Action always refers to an operation performed with object. ... Type Object Action ParamName ParamType ParamValue Assert message string Assertion text to be displayed in the report Param param1 string Text1 Condition param1!=param2 Param param2 string Text2 Examples \u00b6 Compare object property InnerText with expected value: Check if object exists on the screen: Check if variable Age has value '74':","title":"Assertions"},{"location":"RVL/Assertions/#assertions","text":"Assert is an essential operation for testing and validation. RVL provides special structure for it to make it more readable. Assertion has 2 parts: 1 st row is Assert containing assertion message and then goes Condition : ... Type ... Action ParamName ... Assert message string Param param1 Condition condition statement Param param2 Assertion first line is always the same except the Param Value . In RVL Action always refers to an operation performed with object. ... Type Object Action ParamName ParamType ParamValue Assert message string Assertion text to be displayed in the report Param param1 string Text1 Condition param1!=param2 Param param2 string Text2","title":"Assertions"},{"location":"RVL/Assertions/#examples","text":"Compare object property InnerText with expected value: Check if object exists on the screen: Check if variable Age has value '74':","title":"Examples"},{"location":"RVL/Columns/","text":"Columns \u00b6 RVL script is a spreadsheet containing set of 7 columns in fixed order: Default Columns \u00b6 1 - Flow This column is dedicated to specifying structural information such as blocks, branches (If-Else), loops. Also it contains information about single row and multi row comments. Possible values are limited by the list: \\# or // - single row comment /* - begin of multi row comment (comment is valid up to line starting with */ ) */ - end of multi row comment started earlier from /* If - conditional branch. Row type must be Condition . The row may be followed with one or more ElseIf statements, zero or one Else statement and then should end with End . 2 - Type Type of operation specified in this row. One of: Action - row defines an action. Action is a call for operation for one of the objects. Object is defined in the next column. See Actions . Param - signals that this row contains action parameter or condition parameter defined in last 3 columns ( ParamName , ParamType and ParamValue ). Output - this type of row must go after last Param for an action and defines a variable that should accept output value returned from the call to the Action. Variable - this row defines or assigns value to a local or global variable. See Variables . Assert - first row for the Assertion. See Assertions . Condition 3 - Object Id of the object to be used for an action. Rapise provides set of predefined global objects and objects recorded/learned from the AUT. 4 - Action One of the actions applicable to the object selected in the previous column: DoAction , DoClick , GetText etc. 5 - ParamName Name of a parameter to the action selected in the previous column. See Params for more details. 6 - ParamType The type of a parameter determines valid input for the next ParamValue column. bool - ParamValue should be true or false , string - ParamValue is a text string number - ParamValue is an integer or floating point number, variable - ParamValue is a variable name. Actual value is read from the variable. Map Name - ParamValue is a column name from the given Map . Usually this feature is used for data driven testing. 7 - ParamValue This columns defines actual values passed to actions. Depends on the ParamType . In addition to these columns there may be any number of other columns used for storing supplementary data, comments, calculations, thoughts etc. Additional columns may be utilized for script itself (i.e. contain expected values or reference data). Adding Custom Columns \u00b6 By default RVL always displays column H . It is sometimes useful (to store temp value, add a note etc). One may show more columns. To do this open the file (i.e. Main.rvl.xlsx ) in the spreadsheet editor or Excel and define some values in columns I , J etc respectively: Now if you re-open this document in RVL these columns will also be displayed: The usage of this columns is up to you. You may use them just for information or make them 'live' by assigning custom actions as will be described in the next section. Custom Column Actions \u00b6 RVL is flexible and one may use more columns to implement custom script logic. The script occupies first 7 columns of the spreadsheet ( A , B , C , D , E , F , G ). By default the script also displays the column H . It may also display as many additional columns as needed (see previous section ). It may have some value but has no side effects, i.e.: Provide links (to requirements, documentation) Mark Status (review) and notes. However the script may see this value and use it for own purpose, i.e.: Set report attribute Assign global variable Do Screenshot Do custom action. You may have one or more custom columns defined in the script to achieve necessary goals. This will require you to override OnRVLScriptStep function as described below. OnRVLScriptStep \u00b6 Note The information below requires some JavaScript knowledge. In most cases all you need is to copy relevant snippet from the documentation or KB to achieve desired behavior Custom column actions are processed in the OnRVLScriptStep function that should be defined in the User.js file or in the custom library . function OnRVLScriptStep ( item , place , status , ctx , stackItem ) The function is mostly intended for internal use. Here you need information about the following parameters: item - current RVL action item. We need to use the following property of this item: item.Startrow - First RVL row for given item (in RVL each statement takes one or more rows). item.Startrow.SheetRowIndex - Row index in the current sheet. item.Startrow.Ext - The structure, containing values for rows H , I and J , i.e.: item.Startrow.Ext.H - Cell H for the current action item.Startrow.Ext.I - Cell I for the current action item.Startrow.Ext.J - Cell J for the current action place - One of \"before\" - callback just before executing row action, \"after\" - callback called after action has just been done. See Also \u00b6 KB 433 Using Extra Columns in RVL to add Report Attributes","title":"Columns"},{"location":"RVL/Columns/#columns","text":"RVL script is a spreadsheet containing set of 7 columns in fixed order:","title":"Columns"},{"location":"RVL/Columns/#default-columns","text":"1 - Flow This column is dedicated to specifying structural information such as blocks, branches (If-Else), loops. Also it contains information about single row and multi row comments. Possible values are limited by the list: \\# or // - single row comment /* - begin of multi row comment (comment is valid up to line starting with */ ) */ - end of multi row comment started earlier from /* If - conditional branch. Row type must be Condition . The row may be followed with one or more ElseIf statements, zero or one Else statement and then should end with End . 2 - Type Type of operation specified in this row. One of: Action - row defines an action. Action is a call for operation for one of the objects. Object is defined in the next column. See Actions . Param - signals that this row contains action parameter or condition parameter defined in last 3 columns ( ParamName , ParamType and ParamValue ). Output - this type of row must go after last Param for an action and defines a variable that should accept output value returned from the call to the Action. Variable - this row defines or assigns value to a local or global variable. See Variables . Assert - first row for the Assertion. See Assertions . Condition 3 - Object Id of the object to be used for an action. Rapise provides set of predefined global objects and objects recorded/learned from the AUT. 4 - Action One of the actions applicable to the object selected in the previous column: DoAction , DoClick , GetText etc. 5 - ParamName Name of a parameter to the action selected in the previous column. See Params for more details. 6 - ParamType The type of a parameter determines valid input for the next ParamValue column. bool - ParamValue should be true or false , string - ParamValue is a text string number - ParamValue is an integer or floating point number, variable - ParamValue is a variable name. Actual value is read from the variable. Map Name - ParamValue is a column name from the given Map . Usually this feature is used for data driven testing. 7 - ParamValue This columns defines actual values passed to actions. Depends on the ParamType . In addition to these columns there may be any number of other columns used for storing supplementary data, comments, calculations, thoughts etc. Additional columns may be utilized for script itself (i.e. contain expected values or reference data).","title":"Default Columns"},{"location":"RVL/Columns/#adding-custom-columns","text":"By default RVL always displays column H . It is sometimes useful (to store temp value, add a note etc). One may show more columns. To do this open the file (i.e. Main.rvl.xlsx ) in the spreadsheet editor or Excel and define some values in columns I , J etc respectively: Now if you re-open this document in RVL these columns will also be displayed: The usage of this columns is up to you. You may use them just for information or make them 'live' by assigning custom actions as will be described in the next section.","title":"Adding Custom Columns"},{"location":"RVL/Columns/#custom-column-actions","text":"RVL is flexible and one may use more columns to implement custom script logic. The script occupies first 7 columns of the spreadsheet ( A , B , C , D , E , F , G ). By default the script also displays the column H . It may also display as many additional columns as needed (see previous section ). It may have some value but has no side effects, i.e.: Provide links (to requirements, documentation) Mark Status (review) and notes. However the script may see this value and use it for own purpose, i.e.: Set report attribute Assign global variable Do Screenshot Do custom action. You may have one or more custom columns defined in the script to achieve necessary goals. This will require you to override OnRVLScriptStep function as described below.","title":"Custom Column Actions"},{"location":"RVL/Columns/#onrvlscriptstep","text":"Note The information below requires some JavaScript knowledge. In most cases all you need is to copy relevant snippet from the documentation or KB to achieve desired behavior Custom column actions are processed in the OnRVLScriptStep function that should be defined in the User.js file or in the custom library . function OnRVLScriptStep ( item , place , status , ctx , stackItem ) The function is mostly intended for internal use. Here you need information about the following parameters: item - current RVL action item. We need to use the following property of this item: item.Startrow - First RVL row for given item (in RVL each statement takes one or more rows). item.Startrow.SheetRowIndex - Row index in the current sheet. item.Startrow.Ext - The structure, containing values for rows H , I and J , i.e.: item.Startrow.Ext.H - Cell H for the current action item.Startrow.Ext.I - Cell I for the current action item.Startrow.Ext.J - Cell J for the current action place - One of \"before\" - callback just before executing row action, \"after\" - callback called after action has just been done.","title":"OnRVLScriptStep"},{"location":"RVL/Columns/#see-also","text":"KB 433 Using Extra Columns in RVL to add Report Attributes","title":"See Also"},{"location":"RVL/Comments/","text":"Comments \u00b6 Single Row Comments \u00b6 RVL has two types of single line comments depending on the purpose. Sometimes comment is used to exclude line of code from execution. There is a special type of single row comments intended to put long text comments into the document. Single row comment is displayed as long text providing that: 1. Flow is set to # or // 2. Text is completely typed into the Type cell. 3. Other cells after Type are empty. In such case the text is displayed through the whole line: Multiple Row Comments \u00b6 Used to disable several rows of script:","title":"Comments"},{"location":"RVL/Comments/#comments","text":"","title":"Comments"},{"location":"RVL/Comments/#single-row-comments","text":"RVL has two types of single line comments depending on the purpose. Sometimes comment is used to exclude line of code from execution. There is a special type of single row comments intended to put long text comments into the document. Single row comment is displayed as long text providing that: 1. Flow is set to # or // 2. Text is completely typed into the Type cell. 3. Other cells after Type are empty. In such case the text is displayed through the whole line:","title":"Single Row Comments"},{"location":"RVL/Comments/#multiple-row-comments","text":"Used to disable several rows of script:","title":"Multiple Row Comments"},{"location":"RVL/Conditions/","text":"Conditions \u00b6 Conditions used in If and Assert statements. Types of Conditions \u00b6 Condition accepts one or two Params . There might be just one Param . Such condition is called unary , for example param1 is true or output1 is true . There might be second Param . Such condition is called binary , for example param1 == param2 . Condition parameter may be either Param or Action output. Param is some fixed value , variable or expression . Binary condition with two *Param*s named param1 and param2 : ... Type ... Action ParamName ... -- Param param1 -- Condition param1 == param2 -- Param param2 Binary condition with Action and Param named output1 and param2 : ... Type Object Action ParamName ... -- Action MyButton GetText -- Condition output1 == param2 -- Param param2 Binary condition with two *Action*s named output1 and output2 : ... Type Object Action ParamName ... -- Action MyButton1 GetText -- Condition output1 != output2 -- Action MyButton2 GetText Unary condition with Param param1 : ... Type ... Action ParamName ... -- Param param1 -- Condition param1 IsFalse Unary condition with Action output1 : ... Type Object Action ParamName ... - Action MyButton GetEnabled - Condition output1 IsTrue All Conditions \u00b6 Unary conditions with Param \u00b6 Caption Description param1 IsTrue Check if param1 is true param1 IsFalse Check if param1 is false param1 IsNull Check if param1 is null param1 IsNotNull Check if param1 is NOT null param1 IsSet Check if param1 is NOT null, false, 0, empty string or undefined param1 IsNotSet Check if param1 is null, 0, false, empty string or undefined Unary conditions with Action \u00b6 Caption Description output1 IsTrue Check if output1 is true output1 IsFalse Check if output1 is false output1 IsNull Check if output1 is null output1 IsNotNull Check if output1 is NOT null output1 IsSet Check if output1 is NOT null, false, 0, empty string or undefined output1 IsNotSet Check if output1 is null, 0, false, empty string or undefined Binary conditions with *Param*s \u00b6 Caption Description param1 == param2 Check if param1 equals to param2 param1 != param2 Check if param1 NOT equal to param2 param1 > param2 Check if param1 is more than param2 param1 >= param2 Check if param1 is more or equal to param2 param1 <= param2 Check if param1 is less or equal to param2 param1 < param2 Check if param1 is less than param2 param1 contains param2 Check if param1 contains param2 as substring CmpImage param1 , param2 Compare 1 st image and image represented by param2 Binary conditions with Action and Param \u00b6 Caption Description output1 == param2 Check if output1 equals to param2 output1 != param2 Check if output1 NOT equal to param2 output1 > param2 Check if output1 is more than param2 output1 >= param2 Check if output1 is more or equal to param2 output1 <= param2 Check if output1 is less or equal to param2 output1 < param2 Check if output1 is less than param2 output1 contains param2 Check if output1 contains param2 as substring CmpImage output1 , param2 Compare 1 st image and image represented by param2 Binary conditions with *Action*s \u00b6 Caption Description output1 == output2 Check if output1 equals to output2 output1 != output2 Check if output1 NOT equal to output2 output1 > output2 Check if output1 is more than output2 output1 >= output2 Check if output1 is more or equal to output2 output1 <= output2 Check if output1 is less or equal to output2 output1 < output2 Check if output1 is less than output2 output1 contains output2 Check if output1 contains output2 as substring CmpImage output1 , output2 Compare 1 st image and image represented by output2 And , Or Conditions \u00b6 It is possible to make more complex conditions by using And and Or keyword in the Flow column. Flow Type ... Action ParamName ParamType ParamValue If Param param1 variable Result1 - Condition param1 IsFalse And Param param1 variable Result2 - Condition param1 IsTrue ... ... ... ... ... ... This piece forms a condition checking that Result1 is false AND Result2 is true at the same time. Flow Type Object Action ParamName ParamType ParamValue If Action MyButton GetEnabled - Condition output1 IsFalse Or Param param1 variable Result1 - Condition param1 IsTrue - ... ... ... ... ... This piece forms a condition checking that MyButton is Enabled OR Result2 is true at the same time. Examples \u00b6 Condition is never used alone. You may find examples of conditions in chapters devoted to Assertions and If-Then-Else . Short Condition Syntax \u00b6 All binary conditions with param2 take 3 rows. Sometimes it is more convenient to use shorter 2 row syntax where param2 value is specified on the same row as the condition itself: ... Type ... Action ParamName ... -- Param param1 -- Condition param1 == param2 param2 Here is the same condition presented in 3 rows (default) and 2 rows (short) form: 2 rows condition syntax together with If-Else may be used to mimic a switch statement: If there is an Action result used instead of param then it is recommended to first save it to the Variable .","title":"Conditions"},{"location":"RVL/Conditions/#conditions","text":"Conditions used in If and Assert statements.","title":"Conditions"},{"location":"RVL/Conditions/#types-of-conditions","text":"Condition accepts one or two Params . There might be just one Param . Such condition is called unary , for example param1 is true or output1 is true . There might be second Param . Such condition is called binary , for example param1 == param2 . Condition parameter may be either Param or Action output. Param is some fixed value , variable or expression . Binary condition with two *Param*s named param1 and param2 : ... Type ... Action ParamName ... -- Param param1 -- Condition param1 == param2 -- Param param2 Binary condition with Action and Param named output1 and param2 : ... Type Object Action ParamName ... -- Action MyButton GetText -- Condition output1 == param2 -- Param param2 Binary condition with two *Action*s named output1 and output2 : ... Type Object Action ParamName ... -- Action MyButton1 GetText -- Condition output1 != output2 -- Action MyButton2 GetText Unary condition with Param param1 : ... Type ... Action ParamName ... -- Param param1 -- Condition param1 IsFalse Unary condition with Action output1 : ... Type Object Action ParamName ... - Action MyButton GetEnabled - Condition output1 IsTrue","title":"Types of Conditions"},{"location":"RVL/Conditions/#all-conditions","text":"","title":"All Conditions"},{"location":"RVL/Conditions/#unary-conditions-with-param","text":"Caption Description param1 IsTrue Check if param1 is true param1 IsFalse Check if param1 is false param1 IsNull Check if param1 is null param1 IsNotNull Check if param1 is NOT null param1 IsSet Check if param1 is NOT null, false, 0, empty string or undefined param1 IsNotSet Check if param1 is null, 0, false, empty string or undefined","title":"Unary conditions with Param"},{"location":"RVL/Conditions/#unary-conditions-with-action","text":"Caption Description output1 IsTrue Check if output1 is true output1 IsFalse Check if output1 is false output1 IsNull Check if output1 is null output1 IsNotNull Check if output1 is NOT null output1 IsSet Check if output1 is NOT null, false, 0, empty string or undefined output1 IsNotSet Check if output1 is null, 0, false, empty string or undefined","title":"Unary conditions with Action"},{"location":"RVL/Conditions/#binary-conditions-with-params","text":"Caption Description param1 == param2 Check if param1 equals to param2 param1 != param2 Check if param1 NOT equal to param2 param1 > param2 Check if param1 is more than param2 param1 >= param2 Check if param1 is more or equal to param2 param1 <= param2 Check if param1 is less or equal to param2 param1 < param2 Check if param1 is less than param2 param1 contains param2 Check if param1 contains param2 as substring CmpImage param1 , param2 Compare 1 st image and image represented by param2","title":"Binary conditions with *Param*s"},{"location":"RVL/Conditions/#binary-conditions-with-action-and-param","text":"Caption Description output1 == param2 Check if output1 equals to param2 output1 != param2 Check if output1 NOT equal to param2 output1 > param2 Check if output1 is more than param2 output1 >= param2 Check if output1 is more or equal to param2 output1 <= param2 Check if output1 is less or equal to param2 output1 < param2 Check if output1 is less than param2 output1 contains param2 Check if output1 contains param2 as substring CmpImage output1 , param2 Compare 1 st image and image represented by param2","title":"Binary conditions with Action and Param"},{"location":"RVL/Conditions/#binary-conditions-with-actions","text":"Caption Description output1 == output2 Check if output1 equals to output2 output1 != output2 Check if output1 NOT equal to output2 output1 > output2 Check if output1 is more than output2 output1 >= output2 Check if output1 is more or equal to output2 output1 <= output2 Check if output1 is less or equal to output2 output1 < output2 Check if output1 is less than output2 output1 contains output2 Check if output1 contains output2 as substring CmpImage output1 , output2 Compare 1 st image and image represented by output2","title":"Binary conditions with *Action*s"},{"location":"RVL/Conditions/#and-or-conditions","text":"It is possible to make more complex conditions by using And and Or keyword in the Flow column. Flow Type ... Action ParamName ParamType ParamValue If Param param1 variable Result1 - Condition param1 IsFalse And Param param1 variable Result2 - Condition param1 IsTrue ... ... ... ... ... ... This piece forms a condition checking that Result1 is false AND Result2 is true at the same time. Flow Type Object Action ParamName ParamType ParamValue If Action MyButton GetEnabled - Condition output1 IsFalse Or Param param1 variable Result1 - Condition param1 IsTrue - ... ... ... ... ... This piece forms a condition checking that MyButton is Enabled OR Result2 is true at the same time.","title":"And, Or Conditions"},{"location":"RVL/Conditions/#examples","text":"Condition is never used alone. You may find examples of conditions in chapters devoted to Assertions and If-Then-Else .","title":"Examples"},{"location":"RVL/Conditions/#short-condition-syntax","text":"All binary conditions with param2 take 3 rows. Sometimes it is more convenient to use shorter 2 row syntax where param2 value is specified on the same row as the condition itself: ... Type ... Action ParamName ... -- Param param1 -- Condition param1 == param2 param2 Here is the same condition presented in 3 rows (default) and 2 rows (short) form: 2 rows condition syntax together with If-Else may be used to mimic a switch statement: If there is an Action result used instead of param then it is recommended to first save it to the Variable .","title":"Short Condition Syntax"},{"location":"RVL/IfElse/","text":"If - Else \u00b6 If using for branching statements in RVL. Basic branch statement has 2 parts: 1 st row is If flow with Condition : If \u00b6 Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here End Actions after If condition and up to End statement are executed when condition is truth. If-Else \u00b6 If-Else statement is similar to If with one extension. It contains an alternative Else section that is executed when If condition is false: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here Else other actions go here End If-ElseIf \u00b6 ElseIf is a way to establish a chain of conditions. Each condition is evaluated with previous is false. If-Else statement is similar to If with one extension. It contains an alternative Else section that is executed when If condition is false: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here End There may be many ElseIf` blocks: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here End And there might also be an Else block in the end: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here Else other actions go here End Examples \u00b6 Check if Log In link available. If so, do login: Check if we use old version of OS and assign a variable OldWindows accordingly:","title":"If Else"},{"location":"RVL/IfElse/#if-else","text":"If using for branching statements in RVL. Basic branch statement has 2 parts: 1 st row is If flow with Condition :","title":"If - Else"},{"location":"RVL/IfElse/#if","text":"Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here End Actions after If condition and up to End statement are executed when condition is truth.","title":"If"},{"location":"RVL/IfElse/#if-else_1","text":"If-Else statement is similar to If with one extension. It contains an alternative Else section that is executed when If condition is false: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here Else other actions go here End","title":"If-Else"},{"location":"RVL/IfElse/#if-elseif","text":"ElseIf is a way to establish a chain of conditions. Each condition is evaluated with previous is false. If-Else statement is similar to If with one extension. It contains an alternative Else section that is executed when If condition is false: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here End There may be many ElseIf` blocks: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here End And there might also be an Else block in the end: Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here ElseIf Param param1 Condition condition statement Param param2 other actions go here Else other actions go here End","title":"If-ElseIf"},{"location":"RVL/IfElse/#examples","text":"Check if Log In link available. If so, do login: Check if we use old version of OS and assign a variable OldWindows accordingly:","title":"Examples"},{"location":"RVL/Loops/","text":"Loops \u00b6 Loops serve several needs in RVL: Iterate through Maps to make data-driven testing easier. Allows you to repeat a set of actions for a given number of iterations. Lets you repeat a loop body while some Condition is satisfied. Loop Map \u00b6 A Map allows both reading script data from the table defined in the same script or from external data source such as spreadsheet, file or database. Once a Map is defined, the loop is the simplest way of traversing it. Flow Type Object Action ParamName ParamType ParamValue Loop Map MapName ... ... ... ... ... End Where MapName should be name of the map declared earlier in the same script. The loop goes through either the map rows or through the map columns depending on the type of map: For Rows , Range or Database type of Map, the loop goes through rows. I.e. 1 st iteration points to 1 st Row, then 2 nd iteration points to 2 nd row etc. For Columns and Table types of Map, the iteration goes through the columns. Loop Variable \u00b6 Flow Type Object Action ParamName ParamType ParamValue Loop Variable VarName from number 1 Param to number 10 ... ... ... ... ... End Where: VarName is an optional name of variable. It may be avoided if the goal is just to do specified number of iterations. If VarName is set, then the corresponding variable is assigned with the from value and incremented up to the to value throughout the loop. If VarName refers to an existing local or global variable then it is used, otherwise a local variable named VarName is created. from initial value of the loop variable to final value of the loop variable step optional, default is 1. Loop step to increment in each iteration. Loop Condition \u00b6 Loop repeats while condition is satisfied (i.e. while(someCondition) ).","title":"Loops"},{"location":"RVL/Loops/#loops","text":"Loops serve several needs in RVL: Iterate through Maps to make data-driven testing easier. Allows you to repeat a set of actions for a given number of iterations. Lets you repeat a loop body while some Condition is satisfied.","title":"Loops"},{"location":"RVL/Loops/#loop-map","text":"A Map allows both reading script data from the table defined in the same script or from external data source such as spreadsheet, file or database. Once a Map is defined, the loop is the simplest way of traversing it. Flow Type Object Action ParamName ParamType ParamValue Loop Map MapName ... ... ... ... ... End Where MapName should be name of the map declared earlier in the same script. The loop goes through either the map rows or through the map columns depending on the type of map: For Rows , Range or Database type of Map, the loop goes through rows. I.e. 1 st iteration points to 1 st Row, then 2 nd iteration points to 2 nd row etc. For Columns and Table types of Map, the iteration goes through the columns.","title":"Loop Map"},{"location":"RVL/Loops/#loop-variable","text":"Flow Type Object Action ParamName ParamType ParamValue Loop Variable VarName from number 1 Param to number 10 ... ... ... ... ... End Where: VarName is an optional name of variable. It may be avoided if the goal is just to do specified number of iterations. If VarName is set, then the corresponding variable is assigned with the from value and incremented up to the to value throughout the loop. If VarName refers to an existing local or global variable then it is used, otherwise a local variable named VarName is created. from initial value of the loop variable to final value of the loop variable step optional, default is 1. Loop step to increment in each iteration.","title":"Loop Variable"},{"location":"RVL/Loops/#loop-condition","text":"Loop repeats while condition is satisfied (i.e. while(someCondition) ).","title":"Loop Condition"},{"location":"RVL/Maps/","text":"Maps \u00b6 A Map is designed to be an easy way to define tables of data. Items in the map may be accessed by name (if defined) or by index. The indexed dimensions in the map may also be iterated by the [Loop][Loops.md] function, thus making it useful feature for Data-Driven Testing. An RVL script has at least 7 columns . However the Map may take as many columns as needed. Map Definition \u00b6 Typical declaration of map looks like: Flow Type Object Action ParamName ParamType ParamValue Map MapType MapName ... ... ... End Where MapType is either inplace: Table , Rows , Columns , or external: Range or Database . In-place maps \u00b6 In-place map data is defined right in the RVL script. In-place map rows may be selected using This flow or skipped with a Comment . So in-place maps serve as a part of the executable script. Table Rows Columns External maps: \u00b6 Range Database External maps are defined in an external spreadsheet, file or a database. Using Maps \u00b6 Once map is defined it may be used as a regular Object . Reading in a Loop \u00b6 See Loops part for Map type of loops. Maps Types \u00b6 Rows Map \u00b6 A Rows Map is the most useful for data feeds. Each of the set of values is a row in a table that look like: Flow Type Object Action ParamName ParamType ParamValue Map Rows MapName Col1 Col2 Col3 Col4 val11 val12 val13 val14 ... ... End This and comments are specific features of the Rows Map. For example, only the 2 nd row of data will be executed in this case: Flow Type Object Action ParamName ParamType ParamValue Map Rows MapName Col1 Col2 Col3 Col4 ... This ... ... End Rows are designed to be iterated in a Loop In real example it looks like this: Comments may also be used to skip specific rows or row sets. Columns Map \u00b6 A Columns Map is a convenient way for representing data when you have many options combined in few sets. Flow Type Object Action ParamName ParamType ParamValue Map Columns MapName Row1 ... Row2 ... Row3 ... End The same may be represented as Rows but would require many columns and sometimes it is harder to read. So columns is ideal for storing configuration structures: When a Columns Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. the 1 st iteration chooses 1 st column, 2 nd goes to 2 nd column and so on. Table Map \u00b6 A Table map has both columns and rows named. Flow Type Object Action ParamName ParamType ParamValue Map Table MapName Col1 Col2 Col3 Col4 Row1 ... Row2 ... Row3 ... End When a Table Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. 1 st iteration chooses 1 st column, 2 nd goes to 2 nd column and so on. It is convenient to use a Table Map when you have several columns and many rows so it perfectly fits into the screen. For example you may have several alternative configuration sections and want to use them depending on the situation. In the example below we have several sites (Testing, QA, Prod) each having own Url, Login etc. So we want to quickly switch between sites when working with test. Range Map \u00b6 Range map contains no in-place data, but defines a region in the external spreadsheet to read information from. A Range map definition contains a number of required parameters: fileName Path to file containing data. It may point to .xls, .xlsx or .csv file. If when it is empty we assume that data is stored in the same .rvl.xls spreadsheet as the script. sheetName Excel Sheet name. May be empty for .csv spreadsheets. fromRow 0-based index of the first row containing data. Usually first row is assigned as a header containing column names. fromCol 0-based index of the first column containing data. toRow final row index. If set to -1 then final row is detected automatically (as last row containing some data in the 1 st column) toCol final column index. If set to -1 then final column is detected automatically as last column containing data in the 1 st row. Also there is a hidden parameter: hasColumnNames boolean. By default it is true meaning that 1 st rows is assumed to contain column names. Once it is false the columns will have no names and may only be accessed by 0-based index. Data in the Range map is assumed to be similar to Rows map, but defined externally. Looping is done by rows. Typical external file containing data may look like that: Database Map \u00b6 A Database map contains no in-place data, but defines a connection to the database result set. The Database map definition contains two parameters: connectionString ADO connection string. query usually it is an SQL query to execute. connectionString parameter allows accessing wide variety of different database sources. You may learn ore here: https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/connectionstring-property-ado . Some samples of typical ADO connection string values: Microsoft Access \u00b6 1 Provider=MSDASQL; Driver={Microsoft Access Driver (*.mdb)}; DBQ=C:\\path\\filename.mdb; Microsoft Excel \u00b6 1 Provider=MSDASQL; Driver={Microsoft Excel Driver (*.xls)}; DBQ=C:\\path\\filename.xls; Microsoft Text \u00b6 1 Provider=MSDASQL; Driver={Microsoft Text Driver (*.txt; *.csv)}; DBQ=C:\\path\\; An example below refers to ODBC Data Source defined as follows:","title":"Maps"},{"location":"RVL/Maps/#maps","text":"A Map is designed to be an easy way to define tables of data. Items in the map may be accessed by name (if defined) or by index. The indexed dimensions in the map may also be iterated by the [Loop][Loops.md] function, thus making it useful feature for Data-Driven Testing. An RVL script has at least 7 columns . However the Map may take as many columns as needed.","title":"Maps"},{"location":"RVL/Maps/#map-definition","text":"Typical declaration of map looks like: Flow Type Object Action ParamName ParamType ParamValue Map MapType MapName ... ... ... End Where MapType is either inplace: Table , Rows , Columns , or external: Range or Database .","title":"Map Definition"},{"location":"RVL/Maps/#in-place-maps","text":"In-place map data is defined right in the RVL script. In-place map rows may be selected using This flow or skipped with a Comment . So in-place maps serve as a part of the executable script. Table Rows Columns","title":"In-place maps"},{"location":"RVL/Maps/#external-maps","text":"Range Database External maps are defined in an external spreadsheet, file or a database.","title":"External maps:"},{"location":"RVL/Maps/#using-maps","text":"Once map is defined it may be used as a regular Object .","title":"Using Maps"},{"location":"RVL/Maps/#reading-in-a-loop","text":"See Loops part for Map type of loops.","title":"Reading in a Loop"},{"location":"RVL/Maps/#maps-types","text":"","title":"Maps Types"},{"location":"RVL/Maps/#rows-map","text":"A Rows Map is the most useful for data feeds. Each of the set of values is a row in a table that look like: Flow Type Object Action ParamName ParamType ParamValue Map Rows MapName Col1 Col2 Col3 Col4 val11 val12 val13 val14 ... ... End This and comments are specific features of the Rows Map. For example, only the 2 nd row of data will be executed in this case: Flow Type Object Action ParamName ParamType ParamValue Map Rows MapName Col1 Col2 Col3 Col4 ... This ... ... End Rows are designed to be iterated in a Loop In real example it looks like this: Comments may also be used to skip specific rows or row sets.","title":"Rows Map"},{"location":"RVL/Maps/#columns-map","text":"A Columns Map is a convenient way for representing data when you have many options combined in few sets. Flow Type Object Action ParamName ParamType ParamValue Map Columns MapName Row1 ... Row2 ... Row3 ... End The same may be represented as Rows but would require many columns and sometimes it is harder to read. So columns is ideal for storing configuration structures: When a Columns Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. the 1 st iteration chooses 1 st column, 2 nd goes to 2 nd column and so on.","title":"Columns Map"},{"location":"RVL/Maps/#table-map","text":"A Table map has both columns and rows named. Flow Type Object Action ParamName ParamType ParamValue Map Table MapName Col1 Col2 Col3 Col4 Row1 ... Row2 ... Row3 ... End When a Table Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. 1 st iteration chooses 1 st column, 2 nd goes to 2 nd column and so on. It is convenient to use a Table Map when you have several columns and many rows so it perfectly fits into the screen. For example you may have several alternative configuration sections and want to use them depending on the situation. In the example below we have several sites (Testing, QA, Prod) each having own Url, Login etc. So we want to quickly switch between sites when working with test.","title":"Table Map"},{"location":"RVL/Maps/#range-map","text":"Range map contains no in-place data, but defines a region in the external spreadsheet to read information from. A Range map definition contains a number of required parameters: fileName Path to file containing data. It may point to .xls, .xlsx or .csv file. If when it is empty we assume that data is stored in the same .rvl.xls spreadsheet as the script. sheetName Excel Sheet name. May be empty for .csv spreadsheets. fromRow 0-based index of the first row containing data. Usually first row is assigned as a header containing column names. fromCol 0-based index of the first column containing data. toRow final row index. If set to -1 then final row is detected automatically (as last row containing some data in the 1 st column) toCol final column index. If set to -1 then final column is detected automatically as last column containing data in the 1 st row. Also there is a hidden parameter: hasColumnNames boolean. By default it is true meaning that 1 st rows is assumed to contain column names. Once it is false the columns will have no names and may only be accessed by 0-based index. Data in the Range map is assumed to be similar to Rows map, but defined externally. Looping is done by rows. Typical external file containing data may look like that:","title":"Range Map"},{"location":"RVL/Maps/#database-map","text":"A Database map contains no in-place data, but defines a connection to the database result set. The Database map definition contains two parameters: connectionString ADO connection string. query usually it is an SQL query to execute. connectionString parameter allows accessing wide variety of different database sources. You may learn ore here: https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/connectionstring-property-ado . Some samples of typical ADO connection string values:","title":"Database Map"},{"location":"RVL/Maps/#microsoft-access","text":"1 Provider=MSDASQL; Driver={Microsoft Access Driver (*.mdb)}; DBQ=C:\\path\\filename.mdb;","title":"Microsoft Access"},{"location":"RVL/Maps/#microsoft-excel","text":"1 Provider=MSDASQL; Driver={Microsoft Excel Driver (*.xls)}; DBQ=C:\\path\\filename.xls;","title":"Microsoft Excel"},{"location":"RVL/Maps/#microsoft-text","text":"1 Provider=MSDASQL; Driver={Microsoft Text Driver (*.txt; *.csv)}; DBQ=C:\\path\\; An example below refers to ODBC Data Source defined as follows:","title":"Microsoft Text"},{"location":"RVL/Overview/","text":"Why RVL? \u00b6 RVL stands for Rapise Visual Language . It is inspired by well known software testing methodologies Keyword Driven Testing and Data Driven Testing . This section contains a review of current approaches and concepts to highlight the ideas behind RVL design. You don't need to read this section if you want to learn RVL. However you may need it if you want to understand how it compares to other approaches and why we believe it is not just yet another approach but the way forward to diminish struggling while building real live UI Automation. Keyword Driven Testing \u00b6 Keyword Driven Testing separates the documentation of test cases -including the data to use- from the prescription of the way the test cases are executed. As a result it separates the test creation process into two distinct stages: a design and development stage, and an execution stage. A B C D . First Name Last Name Age Enter Patient John Smith 45 Enter Patient Sarah Connor 32 Keyword Driven Testing : Column A contains a Keyword , columns B , C , D provide parameters for a Keyword . Data Driven Testing \u00b6 Data Driven Testing is the creation of test scripts to run together with their related data sets in a framework. The framework provides re-usable test logic to reduce maintenance and improve test coverage. Input and result (test criteria) data values can be stored in one or more central data sources or databases, the actual format and organization can be implementation specific. A B C First Name Last Name Age John Smith 45 Sarah Connor 32 Data Driven Testing : We have test input and expected output in data sources. Gherkin / Cucumber \u00b6 There are known approaches intended to make scripting more close to spoken languages. This is a very wise approach improving test readability. The test case is described in Gherkin - business readable, domain specific language. It describes behavior without detailing how that behavior is implemented. Essential part of this framework is implementation of Given-When-Then steps that should be done with one of the common programming languages. Here is the place where the need in scripting skills are still required. Why RVL? \u00b6 Initially Rapise has everything to build Data Driven and Keyword Driven test frameworks. Even without RVL. It is possible do define scenarios or keywords , connect to Spreadsheet or Database and build the test set. Framework based approaches require one to split data from test logic and maintain them separately. So: * When AUT or SUT changes (new theme, new widget, new layout) then test logic is updated and data stays the same * When test scenarios are enriched or updated then test logic is kept intact and only data sheets are updated. The reality of this approach leads to some challenges. These challenges are common for all test frameworks mentioned here. Design of test scripts require scripting and programming skills. That person is likely to be a programmer. Design of good test data requires knowledge in target domain. For example, if you application is for Blood Bank then one should have some medical skills. If it is some device control app, then you should have engineering knowledge about physical limitations of the device. So in ideal world there are two persons working as a team: UI Automation scripting expert and target domain specialist. In reality we see that due to real life limitations it is common that all scripting and test data is done by one person. It is either a programmer who gets familiar with target AUT domain or analyst who has some scripting skills. Reasons for struggling \u00b6 There are several reasons that make a learning curve longer and adoption harder. Syntax Sugar \u00b6 We found a reason why people get stuck while trying to implement a test case. Most of programming languages including JavaScript were designed by people with mathematical background. So this statement appears clear and simple for a programmer: Deposit ( 'John' , 'O\\'Connor' , 17.99 ); Programmer easily reads this as: 1 Deposit $17.99 to John O'Connor So what is the difference between these notations? We found that the first and most important difficulty lays in so called syntactical sugar . Symbols ' \" ; , . ( ) [ ] { } & $ % # @ do have meaning for language notation however are not important for understanding the matter. This is true even for programmers. When switching from similarly looking languages some differences easily cause frustration. For example, the same construct: $a = \"Number \" + 1; Means text concatenation in JavaScript , however the same is mathematical operation in PHP . Comparison like: if( value == \"OK\" ) Is good for JavaScript or C# world and leads false results in Java . So even if we have programming skills it is still a problem to switch from one language to another and may produce potential issues. Data Tables \u00b6 With Keyword Driven and Data Driven approach we get a table that represents a sequence. Sequence of patients to proceed, sequence of user logins etc. And sometimes we feel the lack of common debugging facilities: - run keyword for only one line, - start from specific row, - or stop before processing specific line. So here we get to a point where the table should better be a part of the script rather than just external data source. State of The Art \u00b6 RVL reflects a common trend in programming languages where computational power and flexibility are sacrificed towards clarity and readability. Some language is reduced to a reasonable subset in the sake of more concise and focused presentation. Just couple of examples. Jade template engine simplifies writing HTML pages by clearing syntax sugar ( < > / % ) so HTML code: <body> <p class=\"greeting\">Hello, World!</p> </body> Gets reduced to more textual view: body p.greeting Hello, World! Go language is promoted as Go is expressive, concise, clean, and efficient. . In fact its authors sacrificed many advanced features of common programming languages (classes, inheritance, templates) to get more clarity. This is extremely important because sophisticated features produce sophisticated problems that are hard to nail down. And if you deal with high-load distributed systems minor gain through use of unclear feature may lead to major unpredictable loss. RVL Concepts \u00b6 RVL's goal is to minimize the struggling. We assume that one should have minimal care about the syntax sugar and syntax rules. This means that we must avoid braces, quotes or any special symbols ' \" ; , . ( ) [ ] { } & $ % # @ and make it possible to maintain the script without them. We want script to be close to Keyword Driven and Data Driven testing concept. So test data and test results should be representable as data tables. This reduces the struggling of attaching the data feed to a test set. We still want to have a solid language. We seek for a balance between clarity and power of language. So we want the script to be implemented on the same language. Both keyword, scenarios and data feeds should be done in a same way. This means one RVL skill is required for everything. In many cases grids or tables are used to represent test data. So we want the script itself to be a grid. So all parts of it including data tables are debuggable as a part of the solid script. When we think about working with table data the most common format that comes to our mind is XLS, XLSX or CSV. These formats are supported by powerful tools that make it easier to prepare data for feeding into the test set. So RVL is itself an .xls spreadsheet so its logic is expressed right there. Even with Spreadsheet there is a question what may be entered into the particular cell. With RVL we have an editor where you start from left to right and each cell has limited number of options. So if you don't know language it will guide you.","title":"Why RVL?"},{"location":"RVL/Overview/#why-rvl","text":"RVL stands for Rapise Visual Language . It is inspired by well known software testing methodologies Keyword Driven Testing and Data Driven Testing . This section contains a review of current approaches and concepts to highlight the ideas behind RVL design. You don't need to read this section if you want to learn RVL. However you may need it if you want to understand how it compares to other approaches and why we believe it is not just yet another approach but the way forward to diminish struggling while building real live UI Automation.","title":"Why RVL?"},{"location":"RVL/Overview/#keyword-driven-testing","text":"Keyword Driven Testing separates the documentation of test cases -including the data to use- from the prescription of the way the test cases are executed. As a result it separates the test creation process into two distinct stages: a design and development stage, and an execution stage. A B C D . First Name Last Name Age Enter Patient John Smith 45 Enter Patient Sarah Connor 32 Keyword Driven Testing : Column A contains a Keyword , columns B , C , D provide parameters for a Keyword .","title":"Keyword Driven Testing"},{"location":"RVL/Overview/#data-driven-testing","text":"Data Driven Testing is the creation of test scripts to run together with their related data sets in a framework. The framework provides re-usable test logic to reduce maintenance and improve test coverage. Input and result (test criteria) data values can be stored in one or more central data sources or databases, the actual format and organization can be implementation specific. A B C First Name Last Name Age John Smith 45 Sarah Connor 32 Data Driven Testing : We have test input and expected output in data sources.","title":"Data Driven Testing"},{"location":"RVL/Overview/#gherkin-cucumber","text":"There are known approaches intended to make scripting more close to spoken languages. This is a very wise approach improving test readability. The test case is described in Gherkin - business readable, domain specific language. It describes behavior without detailing how that behavior is implemented. Essential part of this framework is implementation of Given-When-Then steps that should be done with one of the common programming languages. Here is the place where the need in scripting skills are still required.","title":"Gherkin / Cucumber"},{"location":"RVL/Overview/#why-rvl_1","text":"Initially Rapise has everything to build Data Driven and Keyword Driven test frameworks. Even without RVL. It is possible do define scenarios or keywords , connect to Spreadsheet or Database and build the test set. Framework based approaches require one to split data from test logic and maintain them separately. So: * When AUT or SUT changes (new theme, new widget, new layout) then test logic is updated and data stays the same * When test scenarios are enriched or updated then test logic is kept intact and only data sheets are updated. The reality of this approach leads to some challenges. These challenges are common for all test frameworks mentioned here. Design of test scripts require scripting and programming skills. That person is likely to be a programmer. Design of good test data requires knowledge in target domain. For example, if you application is for Blood Bank then one should have some medical skills. If it is some device control app, then you should have engineering knowledge about physical limitations of the device. So in ideal world there are two persons working as a team: UI Automation scripting expert and target domain specialist. In reality we see that due to real life limitations it is common that all scripting and test data is done by one person. It is either a programmer who gets familiar with target AUT domain or analyst who has some scripting skills.","title":"Why RVL?"},{"location":"RVL/Overview/#reasons-for-struggling","text":"There are several reasons that make a learning curve longer and adoption harder.","title":"Reasons for struggling"},{"location":"RVL/Overview/#syntax-sugar","text":"We found a reason why people get stuck while trying to implement a test case. Most of programming languages including JavaScript were designed by people with mathematical background. So this statement appears clear and simple for a programmer: Deposit ( 'John' , 'O\\'Connor' , 17.99 ); Programmer easily reads this as: 1 Deposit $17.99 to John O'Connor So what is the difference between these notations? We found that the first and most important difficulty lays in so called syntactical sugar . Symbols ' \" ; , . ( ) [ ] { } & $ % # @ do have meaning for language notation however are not important for understanding the matter. This is true even for programmers. When switching from similarly looking languages some differences easily cause frustration. For example, the same construct: $a = \"Number \" + 1; Means text concatenation in JavaScript , however the same is mathematical operation in PHP . Comparison like: if( value == \"OK\" ) Is good for JavaScript or C# world and leads false results in Java . So even if we have programming skills it is still a problem to switch from one language to another and may produce potential issues.","title":"Syntax Sugar"},{"location":"RVL/Overview/#data-tables","text":"With Keyword Driven and Data Driven approach we get a table that represents a sequence. Sequence of patients to proceed, sequence of user logins etc. And sometimes we feel the lack of common debugging facilities: - run keyword for only one line, - start from specific row, - or stop before processing specific line. So here we get to a point where the table should better be a part of the script rather than just external data source.","title":"Data Tables"},{"location":"RVL/Overview/#state-of-the-art","text":"RVL reflects a common trend in programming languages where computational power and flexibility are sacrificed towards clarity and readability. Some language is reduced to a reasonable subset in the sake of more concise and focused presentation. Just couple of examples. Jade template engine simplifies writing HTML pages by clearing syntax sugar ( < > / % ) so HTML code: <body> <p class=\"greeting\">Hello, World!</p> </body> Gets reduced to more textual view: body p.greeting Hello, World! Go language is promoted as Go is expressive, concise, clean, and efficient. . In fact its authors sacrificed many advanced features of common programming languages (classes, inheritance, templates) to get more clarity. This is extremely important because sophisticated features produce sophisticated problems that are hard to nail down. And if you deal with high-load distributed systems minor gain through use of unclear feature may lead to major unpredictable loss.","title":"State of The Art"},{"location":"RVL/Overview/#rvl-concepts","text":"RVL's goal is to minimize the struggling. We assume that one should have minimal care about the syntax sugar and syntax rules. This means that we must avoid braces, quotes or any special symbols ' \" ; , . ( ) [ ] { } & $ % # @ and make it possible to maintain the script without them. We want script to be close to Keyword Driven and Data Driven testing concept. So test data and test results should be representable as data tables. This reduces the struggling of attaching the data feed to a test set. We still want to have a solid language. We seek for a balance between clarity and power of language. So we want the script to be implemented on the same language. Both keyword, scenarios and data feeds should be done in a same way. This means one RVL skill is required for everything. In many cases grids or tables are used to represent test data. So we want the script itself to be a grid. So all parts of it including data tables are debuggable as a part of the solid script. When we think about working with table data the most common format that comes to our mind is XLS, XLSX or CSV. These formats are supported by powerful tools that make it easier to prepare data for feeding into the test set. So RVL is itself an .xls spreadsheet so its logic is expressed right there. Even with Spreadsheet there is a question what may be entered into the particular cell. With RVL we have an editor where you start from left to right and each cell has limited number of options. So if you don't know language it will guide you.","title":"RVL Concepts"},{"location":"RVL/Params/","text":"Params \u00b6 The last 3 columns in the RVL table are used for passing parameters: ... ParamName ParamType ParamValue ... text string John Smith ... x number 5 ... y number 7 ... forceEvent boolean true 5 th column - ParamName - name of the parameter. This column's intention is readability and it does not affect execution. However it names input parameters and makes it easier to understand each provided input option. 6 th column - ParamType - value type. This may be a basic scalar type ( number , string , boolean , object ) as well as one of the following additional 'special' types: expression - any valid JavaScript expression that may involve global variables and functions and local variables. variable - the parameter value is read from a variable. objectid - ID of one of the learned Objects. password - means that value is encrypted string that is decrypted in runtime. 7 th column - ParamValue - a value that is acceptable for the specified ParamType . For boolean it is true or false . For number is is any floating point number (i.e. 3.14 ). For string , any text without quotes or escape signs. Param Rows \u00b6 In RVL each parameter takes one row: ... Type ... ParamName ParamType ParamValue ... Param text string John Smith ... Param x number 5 ... Param y number 7 ... Param forceEvent boolean true Param Arrays \u00b6 Some methods accept arrays of values as input values. For example Tester.Message may take its 1 st message parameter as an array and prints them combined. Making an array is easy, several consequent parameters having the same name are combined into an array, i.e.: Flow Type Object Action ParamName ParamType ParamValue Action Tester Message message string MyVar1 value: Param message variable MyVar1 Param message string MyVar2 value: Param message variable MyVar2 Should report a message like: 1 MyVar1 value: 25 MyVar2 value: 33 Extra Parameters \u00b6 Several functions of the RVL Object support variable parameters ( RVL.DoPlaySheet , RVL.DoPlayScript , RVL.SetLocatorOpts , RVL.FormatString , RVL.DoPlayTest ) and RVL.DoPlayTestParallel ) support extra parameters. Custom parameters added by user manually, by specifying row type Param and assigning any required param name. There my be as many extra parameters as needed. Mixed Rows \u00b6 In some cases it is convenient to mix parameter cells with an Action or Condition . For example, the 1 st parameter of an Action may share the Action row: Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 And this is equivalent to putting it in the next row: Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick Param x number 5 Param y number 7 Or param2 of the condition may be on the same row: ... Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 param2 string Text2 Which is equivalent to: ... Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 Param param2 string Text2 This allows saving space while keeping same readability. See also short condition syntax for real live example of mixed rows usage. Map Params \u00b6 If map is defined in the script it may be used directly as a parameter. ParamType should be set to Map Name and ParamValue is a column (or row) name:","title":"Parameters"},{"location":"RVL/Params/#params","text":"The last 3 columns in the RVL table are used for passing parameters: ... ParamName ParamType ParamValue ... text string John Smith ... x number 5 ... y number 7 ... forceEvent boolean true 5 th column - ParamName - name of the parameter. This column's intention is readability and it does not affect execution. However it names input parameters and makes it easier to understand each provided input option. 6 th column - ParamType - value type. This may be a basic scalar type ( number , string , boolean , object ) as well as one of the following additional 'special' types: expression - any valid JavaScript expression that may involve global variables and functions and local variables. variable - the parameter value is read from a variable. objectid - ID of one of the learned Objects. password - means that value is encrypted string that is decrypted in runtime. 7 th column - ParamValue - a value that is acceptable for the specified ParamType . For boolean it is true or false . For number is is any floating point number (i.e. 3.14 ). For string , any text without quotes or escape signs.","title":"Params"},{"location":"RVL/Params/#param-rows","text":"In RVL each parameter takes one row: ... Type ... ParamName ParamType ParamValue ... Param text string John Smith ... Param x number 5 ... Param y number 7 ... Param forceEvent boolean true","title":"Param Rows"},{"location":"RVL/Params/#param-arrays","text":"Some methods accept arrays of values as input values. For example Tester.Message may take its 1 st message parameter as an array and prints them combined. Making an array is easy, several consequent parameters having the same name are combined into an array, i.e.: Flow Type Object Action ParamName ParamType ParamValue Action Tester Message message string MyVar1 value: Param message variable MyVar1 Param message string MyVar2 value: Param message variable MyVar2 Should report a message like: 1 MyVar1 value: 25 MyVar2 value: 33","title":"Param Arrays"},{"location":"RVL/Params/#extra-parameters","text":"Several functions of the RVL Object support variable parameters ( RVL.DoPlaySheet , RVL.DoPlayScript , RVL.SetLocatorOpts , RVL.FormatString , RVL.DoPlayTest ) and RVL.DoPlayTestParallel ) support extra parameters. Custom parameters added by user manually, by specifying row type Param and assigning any required param name. There my be as many extra parameters as needed.","title":"Extra Parameters"},{"location":"RVL/Params/#mixed-rows","text":"In some cases it is convenient to mix parameter cells with an Action or Condition . For example, the 1 st parameter of an Action may share the Action row: Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 And this is equivalent to putting it in the next row: Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick Param x number 5 Param y number 7 Or param2 of the condition may be on the same row: ... Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 param2 string Text2 Which is equivalent to: ... Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 Param param2 string Text2 This allows saving space while keeping same readability. See also short condition syntax for real live example of mixed rows usage.","title":"Mixed Rows"},{"location":"RVL/Params/#map-params","text":"If map is defined in the script it may be used directly as a parameter. ParamType should be set to Map Name and ParamValue is a column (or row) name:","title":"Map Params"},{"location":"RVL/Preamble/","text":"Sheet Preamble \u00b6 Preamble is a beginning of each RVL sheet containing common data definitions. Preamble is executed every time when one does Play Selection or Play From Here in RVL. So if the piece that you try to have executed refers Variables or Maps then executed statement will 'see' them as if they are part of the selection. The preamble is detected automatically. Everything before first Action , Assertion , Loop or Condition is a preamble. For example, Preamble here ends at the row 10 (because row 11 is Action )","title":"Preamble"},{"location":"RVL/Preamble/#sheet-preamble","text":"Preamble is a beginning of each RVL sheet containing common data definitions. Preamble is executed every time when one does Play Selection or Play From Here in RVL. So if the piece that you try to have executed refers Variables or Maps then executed statement will 'see' them as if they are part of the selection. The preamble is detected automatically. Everything before first Action , Assertion , Loop or Condition is a preamble. For example, Preamble here ends at the row 10 (because row 11 is Action )","title":"Sheet Preamble"},{"location":"RVL/RVL_DoPlay/","text":"RVL.DoPlaySheet and RVL.DoPlayScript \u00b6 DoPlayScript ( /**string*/ scriptPath , /**string*/ sheetName ) Play RVL sheet sheetName from workbook scriptPath . scriptPath : Path to script sheetName : Excel sheet containing the script [extraParams] : default variable values DoPlaySheet ( /**string*/ sheetName ) Play RVL sheet sheetName from current workbook. sheetName : Excel sheet containing the script [extraParams] : default variable values Passing Input Parameters \u00b6 Extra parameters [extraParams] used in these calls are default values for local variables defined in the destination scripts. So the following call: passes User=ExtUser , Password=ExtPassword , OtherVarName=somevalue to the destination script. It may now be used as follows: So local variable User is assigned to value ExtUser when called. However, if you play this sheet using Play Sheet then this variable would have value DefUser . This helps to make sheets more universal: it should be possible to execute the sheet or any statement in a sheet alone as well as call it from outside and pass parameters.","title":"Input Parameters"},{"location":"RVL/RVL_DoPlay/#rvldoplaysheet-and-rvldoplayscript","text":"DoPlayScript ( /**string*/ scriptPath , /**string*/ sheetName ) Play RVL sheet sheetName from workbook scriptPath . scriptPath : Path to script sheetName : Excel sheet containing the script [extraParams] : default variable values DoPlaySheet ( /**string*/ sheetName ) Play RVL sheet sheetName from current workbook. sheetName : Excel sheet containing the script [extraParams] : default variable values","title":"RVL.DoPlaySheet and RVL.DoPlayScript"},{"location":"RVL/RVL_DoPlay/#passing-input-parameters","text":"Extra parameters [extraParams] used in these calls are default values for local variables defined in the destination scripts. So the following call: passes User=ExtUser , Password=ExtPassword , OtherVarName=somevalue to the destination script. It may now be used as follows: So local variable User is assigned to value ExtUser when called. However, if you play this sheet using Play Sheet then this variable would have value DefUser . This helps to make sheets more universal: it should be possible to execute the sheet or any statement in a sheet alone as well as call it from outside and pass parameters.","title":"Passing Input Parameters"},{"location":"RVL/Sheets/","text":"RVL Sheets \u00b6 RVL script may contain one or more sheets distributed over one or more workbooks. Sheet is an atomic building block for implementing test frameworks and sharing logic. For example, there may be a Sheet called Login and it may be re-used by CreateNewBook , CreateExistingBook and other test scenarios that require Login logic. Default sheet name is RVL . You may rename it. You may add more sheets. RVL sheet is executable when it have 7 pre-defined Columns . The workbook may contain both executable and data sheets. Calling Sheets \u00b6 It is possible to do calls between scripts using RVL.DoPlayScript and RVL.DoPlaySheet . Passing Parameters \u00b6 It is possible to pass parameters between sheets. See Passing Input Parameters Passing Maps \u00b6 You may pass a Map between sheets as input parameters . For example, here we pass a map FullLoginData : as a value to override the map UserLogins on the Login sheet: RVL File \u00b6 Default file format for RVL scripts is an Excel workbook. It makes it easier to combine data with script logic. Any RVL file has extension .rvl.xlsx and may be open in MS Excel directly.","title":"Sheets"},{"location":"RVL/Sheets/#rvl-sheets","text":"RVL script may contain one or more sheets distributed over one or more workbooks. Sheet is an atomic building block for implementing test frameworks and sharing logic. For example, there may be a Sheet called Login and it may be re-used by CreateNewBook , CreateExistingBook and other test scenarios that require Login logic. Default sheet name is RVL . You may rename it. You may add more sheets. RVL sheet is executable when it have 7 pre-defined Columns . The workbook may contain both executable and data sheets.","title":"RVL Sheets"},{"location":"RVL/Sheets/#calling-sheets","text":"It is possible to do calls between scripts using RVL.DoPlayScript and RVL.DoPlaySheet .","title":"Calling Sheets"},{"location":"RVL/Sheets/#passing-parameters","text":"It is possible to pass parameters between sheets. See Passing Input Parameters","title":"Passing Parameters"},{"location":"RVL/Sheets/#passing-maps","text":"You may pass a Map between sheets as input parameters . For example, here we pass a map FullLoginData : as a value to override the map UserLogins on the Login sheet:","title":"Passing Maps"},{"location":"RVL/Sheets/#rvl-file","text":"Default file format for RVL scripts is an Excel workbook. It makes it easier to combine data with script logic. Any RVL file has extension .rvl.xlsx and may be open in MS Excel directly.","title":"RVL File"},{"location":"RVL/Variables/","text":"Variables \u00b6 In RVL, variables are useful for storing intermediate results as well as accessing and passing global values to external JavaScript functions. Variables may be used in Params to Conditions and in Actions . Declaring \u00b6 This line declares a variable without any values. Its value may be assigned later: Flow Type Object Action ParamName ParamType ParamValue Variable MyVar1 Local Variables \u00b6 By default declared variables are assumed to be local. Local variables may be used only within the current RVL script and not visible from other RVL scripts or JavaScript code. Global Variables \u00b6 You may have a JavaScript variable defined in the user Functions file ( *.user.js ), i.e.: // Piece from MyTest1.user.js var globalVar = \"Value\" ; Then in the RVL you may declare globalVar as global and access it (read or assign values). Declaring a variable as global is simple: Flow Type Object Action ParamName ParamType ParamValue Variable Global globalVar Global variables are useful for exchanging and/or sharing data between different RVL scripts or between RVL and JavaScript . Default Value for Global Variable \u00b6 Special parameter name defaultValue of the Global variable definition allows setting default value. This may be needed when you don't know if variable was set before calling this script. So the value will only be assigned is variable is currently undefined. Otherwise the Variable keeps its defined value. This helps to make sheets using global variables to be executable standalone. I.e. you may use Play This Sheet in RVL and be sure that Global variable will have a value. Assigning \u00b6 Assignment Expression \u00b6 This line declares and assigns value 5 to a variable MyVar2 : Flow Type Object Action ParamName ParamType ParamValue Variable MyVar2 number 5 If the variable is declared earlier, then assignment just changes its value. If the variable is not yet declared, then assignment is actually a declaration with assignment. Action Output \u00b6 If an action returns a value it can be assigned to a variable via Output . Flow Type Object Action ParamName ParamType ParamValue Variable OsVersion Action Global GetOsVersion Output variable OsVersion Auto Assignment \u00b6 There are two auto assigned variables in RVL: LastResult and LastObject . If an action returns some value then it is assigned to LastResult . LastObject is effectively an alias to the last used object in Object column. Flow Type Object Action ParamName ParamType ParamValue Action Global GetOsVersion Action Tester Message variable LastResult This snippet prints OS version to the report. Using \u00b6 Any Params value may accept a variable : ... Type ... ParamName ParamType ParamValue ... Param text variable MyVar1 Any Params value may accept an expression using variables: ... Type ... ParamName ParamType ParamValue ... Param text expression MyVar2 + 4 Any Action may write its return value to a variable using the Output statement: Flow Type Object Action ParamName ParamType ParamValue Action Global DoTrim str string text to trim Output variable MyVar1 The Output value may then be used as a param value in actions, conditions, assertions and expressions. Variable Actions \u00b6 One may use an expression to change the value of a variable. Here are several common variable operations that may be used to modify variable values: Increment is an operation where numeric value is increased by 1 or any other specified value. The variable must have a numeric value. Otherwise the result is NaN . If no param to Increment is specified then 1 is assumed: Flow Type Object Action ParamName ParamType ParamValue Variable Increment numVar Otherwise it is any value : Flow Type Object Action ParamName ParamType ParamValue Variable Increment numVar number value Decrement is the same as increment but the value is subtracted from the variable. Append adds the value as text to the specified variable. This operation is useful for constructing text messages: Flow Type Object Action ParamName ParamType ParamValue Variable Append textVar string Final value: Variable Append textVar variable numVar In this example if textVar was empty and numVar had value 5 then the final value of textVar is the following text: Final value: 5 Examples \u00b6 Variables may be declared as Local or Global . Declaration may or may not contain initial value Variables may accept output from the Action : Variables may be used as input to the Action :","title":"Variables"},{"location":"RVL/Variables/#variables","text":"In RVL, variables are useful for storing intermediate results as well as accessing and passing global values to external JavaScript functions. Variables may be used in Params to Conditions and in Actions .","title":"Variables"},{"location":"RVL/Variables/#declaring","text":"This line declares a variable without any values. Its value may be assigned later: Flow Type Object Action ParamName ParamType ParamValue Variable MyVar1","title":"Declaring"},{"location":"RVL/Variables/#local-variables","text":"By default declared variables are assumed to be local. Local variables may be used only within the current RVL script and not visible from other RVL scripts or JavaScript code.","title":"Local Variables"},{"location":"RVL/Variables/#global-variables","text":"You may have a JavaScript variable defined in the user Functions file ( *.user.js ), i.e.: // Piece from MyTest1.user.js var globalVar = \"Value\" ; Then in the RVL you may declare globalVar as global and access it (read or assign values). Declaring a variable as global is simple: Flow Type Object Action ParamName ParamType ParamValue Variable Global globalVar Global variables are useful for exchanging and/or sharing data between different RVL scripts or between RVL and JavaScript .","title":"Global Variables"},{"location":"RVL/Variables/#default-value-for-global-variable","text":"Special parameter name defaultValue of the Global variable definition allows setting default value. This may be needed when you don't know if variable was set before calling this script. So the value will only be assigned is variable is currently undefined. Otherwise the Variable keeps its defined value. This helps to make sheets using global variables to be executable standalone. I.e. you may use Play This Sheet in RVL and be sure that Global variable will have a value.","title":"Default Value for Global Variable"},{"location":"RVL/Variables/#assigning","text":"","title":"Assigning"},{"location":"RVL/Variables/#assignment-expression","text":"This line declares and assigns value 5 to a variable MyVar2 : Flow Type Object Action ParamName ParamType ParamValue Variable MyVar2 number 5 If the variable is declared earlier, then assignment just changes its value. If the variable is not yet declared, then assignment is actually a declaration with assignment.","title":"Assignment Expression"},{"location":"RVL/Variables/#action-output","text":"If an action returns a value it can be assigned to a variable via Output . Flow Type Object Action ParamName ParamType ParamValue Variable OsVersion Action Global GetOsVersion Output variable OsVersion","title":"Action Output"},{"location":"RVL/Variables/#auto-assignment","text":"There are two auto assigned variables in RVL: LastResult and LastObject . If an action returns some value then it is assigned to LastResult . LastObject is effectively an alias to the last used object in Object column. Flow Type Object Action ParamName ParamType ParamValue Action Global GetOsVersion Action Tester Message variable LastResult This snippet prints OS version to the report.","title":"Auto Assignment"},{"location":"RVL/Variables/#using","text":"Any Params value may accept a variable : ... Type ... ParamName ParamType ParamValue ... Param text variable MyVar1 Any Params value may accept an expression using variables: ... Type ... ParamName ParamType ParamValue ... Param text expression MyVar2 + 4 Any Action may write its return value to a variable using the Output statement: Flow Type Object Action ParamName ParamType ParamValue Action Global DoTrim str string text to trim Output variable MyVar1 The Output value may then be used as a param value in actions, conditions, assertions and expressions.","title":"Using"},{"location":"RVL/Variables/#variable-actions","text":"One may use an expression to change the value of a variable. Here are several common variable operations that may be used to modify variable values: Increment is an operation where numeric value is increased by 1 or any other specified value. The variable must have a numeric value. Otherwise the result is NaN . If no param to Increment is specified then 1 is assumed: Flow Type Object Action ParamName ParamType ParamValue Variable Increment numVar Otherwise it is any value : Flow Type Object Action ParamName ParamType ParamValue Variable Increment numVar number value Decrement is the same as increment but the value is subtracted from the variable. Append adds the value as text to the specified variable. This operation is useful for constructing text messages: Flow Type Object Action ParamName ParamType ParamValue Variable Append textVar string Final value: Variable Append textVar variable numVar In this example if textVar was empty and numVar had value 5 then the final value of textVar is the following text: Final value: 5","title":"Variable Actions"},{"location":"RVL/Variables/#examples","text":"Variables may be declared as Local or Global . Declaration may or may not contain initial value Variables may accept output from the Action : Variables may be used as input to the Action :","title":"Examples"}]}
{"config":{"lang":["en"],"separator":"[\\s\\(\\)\\,\\-]+","pipeline":["trimmer","stopWordFilter"]},"docs":[{"location":"","title":"Rapise Documentation","text":"Quick Links <ul> <li>Know Your Way Around</li> <li>Scriptless Testing</li> <li>AI in Rapise</li> <li>Frameworks</li> </ul> Platforms <ul> <li>Web Testing</li> <li>Desktop Testing</li> <li>Mobile Testing</li> <li>API Testing</li> </ul> ERP <ul> <li>Microsoft Dynamics Testing</li> <li>Salesforce Testing</li> <li>Oracle Forms</li> </ul> Webinars <ul> <li>Version Highlights Videos</li> <li>All Webinars</li> </ul>"},{"location":"#about-the-docs","title":"About the Docs","text":"<p>From this page you can reach different parts of the documentation. Use menu at the top and table of contents to the left.</p> Top Menu <ul> <li>User's Guide explains Rapise UI, features and technologies.</li> <li>RVL describes the Rapise Visual Language used for codeless test automation.</li> <li>Libraries contains Object API reference.</li> <li>Manuals features selected topics on how to prepare testing environments.</li> <li>KB is a list of knowledge base articles.</li> <li>Education is a collection of webinars and training related materials.</li> <li>Release Notes provides information about new features and improvements in Rapise releases.</li> </ul>"},{"location":"#ui-test-automation-playground","title":"UI Test Automation Playground","text":"<p>We've built a collection of puzzles you may use to sharpen test automation skills. </p> <p>Check it out.</p>"},{"location":"api/","title":"REST/SOAP API testing","text":"<p>Rapise can test REST/SOAP APIs. We recommend to start from the tutorials:</p> <ul> <li>Tutorial: REST Web Services</li> <li>Tutorial: SOAP Web Services</li> </ul> <p>In-depth documentation on Web Service testing:</p> <p>Web Service Testing</p>"},{"location":"api/#webinars","title":"Webinars","text":"<ul> <li>Overview: SOAP/REST API Testing</li> <li>Automating REST/SOAP API Testing</li> </ul>"},{"location":"api/#see-also","title":"See Also","text":"<ul> <li>Testing REST Web Services</li> <li>Testing SOAP Web Services</li> </ul>"},{"location":"assistance/","title":"Get Assistance","text":"<p>Hey! We can help making your first test with Rapise. Sign up using the link below and one of our automation experts will schedule a screen sharing session with you.</p> <p>Fill Request</p>"},{"location":"codeless/","title":"Scriptless/Codeless Testing","text":"<p>With Rapise you can record and playback a test without writing a single line of code. This is referred to as codeless test automation.</p> <p>In Rapise you achieve codeless automation via Rapise Visual Language (RVL).</p> <ul> <li>About RVL</li> <li>Why RVL?</li> <li>RVL Reference</li> </ul>"},{"location":"codeless/#webinars","title":"Webinars","text":"<ul> <li>Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools</li> <li>Introduction into Codeless Test Automation</li> </ul>"},{"location":"desktop/","title":"Desktop Testing","text":"<p>If you plan to record and playback the very first desktop test - check out the tutorials:</p> <ul> <li>Tutorial: Windows Testing</li> <li>Tutorial: Java Testing</li> </ul> <p>Learn more about testing desktop applications:</p> <ul> <li>Testing Windows Applications</li> <li>Testing Oracle Forms</li> </ul>"},{"location":"desktop/#webinars","title":"Webinars","text":"<ul> <li>Automating Desktop UI Testing</li> <li>Testing Microsoft Dynamics NAV desktop client</li> <li>Testing Microsoft Dynamics AX desktop client</li> </ul>"},{"location":"desktop/#see-also","title":"See Also","text":"<ul> <li>UIAutomation Spy</li> <li>UIAutomation Library</li> </ul>"},{"location":"dynamics/","title":"Microsoft Dynamics Testing","text":"<p>Rapise provides out of the box support for the following different versions of Microsoft Dynamics:</p> <ul> <li>Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter.</li> <li>Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central.</li> <li>Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids).</li> <li>Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components.</li> <li>Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface.</li> </ul>"},{"location":"dynamics/#which-one-do-you-have","title":"Which One Do you Have?","text":"<ul> <li>KB272 Microsoft Dynamics Solutions - Which One Do You Have?</li> </ul>"},{"location":"dynamics/#webinars","title":"Webinars","text":"<ul> <li>Testing MS Dynamics NAV</li> <li>Testing MS Dynamics AX</li> <li>Testing MS Dynamics 365 for Sales</li> <li>Testing MS Dynamics 365 for Finance &amp; Operations</li> </ul>"},{"location":"dynamics/#see-also","title":"See Also","text":"<p>Microsoft Dynamics Testing in Rapise</p>"},{"location":"manual/","title":"Manual Testing","text":"<p>If you plan to create the very first manual test - check out the tutorial:</p> <ul> <li>Tutorial: Manual Testing</li> </ul> <p>Learn more about manual testing with Rapise:</p> <ul> <li>Manual Testing</li> </ul>"},{"location":"mobile/","title":"Mobile Testing","text":"<ul> <li>Mobile Testing in Rapise</li> </ul>"},{"location":"mobile/#preparing-the-environment","title":"Preparing the Environment","text":"<ul> <li>Preparing Environment for Android Mobile Testing</li> <li>Preparing Environment for iOS Mobile Testing</li> </ul>"},{"location":"mobile/#tutorials","title":"Tutorials","text":"<ul> <li>Mobile Testing on Android</li> <li>Mobile Testing on iOS</li> </ul>"},{"location":"mobile/#webinars","title":"Webinars","text":"<ul> <li>Automating Mobile UI Testing</li> </ul>"},{"location":"mobile/#see-also","title":"See Also","text":"<ul> <li>Mobile Spy</li> </ul>"},{"location":"oninstall/","title":"Rapise Installed Successfully","text":""},{"location":"oninstall/#whats-next","title":"What's next?","text":"<p>Watch the webinar: Introduction to Test Automation with Rapise</p>"},{"location":"onuninstall/","title":"Rapise Uninstalled Successfully","text":""},{"location":"onuninstall/#whats-next","title":"What's next?","text":""},{"location":"onuninstall/#download-the-latest-version","title":"Download the Latest Version","text":"<p>To get the latest build of Rapise </p> <ul> <li>sign-in to your Customer Area</li> <li>scroll down to My Downloads section</li> <li>and click the link in Download URL column.</li> </ul>"},{"location":"onuninstall/#drop-us-a-message","title":"Drop Us a Message","text":"<p>Contact us with your questions, feedback, comments, or suggestions.</p>"},{"location":"web/","title":"Web Testing","text":"<p>If you plan to record and playback the very first web test - check out the tutorial:</p> <ul> <li>Tutorial: Web Testing</li> </ul> <p>To use Chrome or Firefox browser for recording you may need to install the plugins:</p> <ul> <li>Setting Up Web Browsers</li> </ul> <p>To improve default recording experience get familiar with</p> <ul> <li>Web Application Profiles</li> </ul> <p>In-depth documentation on web testing:</p> <ul> <li>Web Testing</li> </ul>"},{"location":"web/#webinars","title":"Webinars","text":"<ul> <li>Introduction To Powerful New Rapise 6.0</li> <li>Live Demo: Data-driven Codeless Test</li> <li>Automating Web UI Testing</li> </ul>"},{"location":"web/#see-also","title":"See Also","text":"<ul> <li>Web Spy</li> <li>Self-healing Web Locators</li> <li>HTMLObject</li> <li>Navigator</li> </ul>"},{"location":"Guide/about_this_guide/","title":"About this Guide","text":"<p>The Rapise User's Guide is divided into four sections: Getting Started; Features; Dialogs, Views, and Menus; HowTos.</p>"},{"location":"Guide/about_this_guide/#getting-started","title":"Getting Started","text":"<p>The Getting Started section is for new Rapise users. \u00a0It has the following subsections:</p> <ol> <li> <p>An Overview of Rapise: what it's for and how to use it.</p> </li> <li> <p>Rapise provides comprehensive support for Testing Frameworks, offering a holistic approach to test development.</p> </li> <li> <p>Samples Index, where the sample projects included with Rapise are described.</p> </li> <li> <p>Tutorial: Windows Testing, a step-by-step tutorial for creating your first test with Rapise using a Windows desktop application.</p> </li> <li> <p>Tutorial: Web Testing, a slightly more advanced tutorial in using Rapise to test a web page.</p> </li> <li> <p>Tutorial: REST Web Services, a tutorial in using Rapise to test a RESTful web service API.</p> </li> <li> <p>Tutorial: SOAP Web Services - a tutorial in using Rapise to test a SOAP web service API.</p> </li> <li> <p>Tutorial: Mobile Testing - a tutorial explaining how to use Rapise to test a mobile application (in this case using Android)</p> </li> <li> <p>Tutorial: Manual Testing - a tutorial explaining how to use Rapise to do exploratory / manual testing.</p> </li> <li> <p>Tutorial: Java Testing - a step-by-step tutorial for creating a Rapise test for Java AWT, Swing and SWT applications</p> </li> <li> <p>Tutorial: QtFramework - a step-by-step tutorial for creating a Rapise test for Qt Framework desktop applications.</p> </li> </ol>"},{"location":"Guide/about_this_guide/#features","title":"Features","text":"<p>The features of Rapise are many. \u00a0The features have been designed to make all aspects of test automation as easy as possible. Most of the features of Rapise fall into one of five categories:</p> <ol> <li>Building test scripts with little or no manual scripting.</li> <li>Reading and interpreting results and reports.</li> <li>Additional features and capabilities for sophisticated testing.</li> <li>Writing more involved or complicated tests using scripting.</li> <li>Extending Rapise to learn new or extended libraries of capabilities. Depending on the application set being tested, not all of these features are necessarily needed for every situation.</li> </ol> <p>For each feature, this document attempts to present:</p> <ol> <li>The reason you might use a given feature.</li> <li>A summary of the basic value of the feature.</li> <li>An overview of how the feature works from the perspective of using it.</li> <li>At least one useful sample that demonstrates how to use the feature.</li> </ol>"},{"location":"Guide/about_this_guide/#dialogs-views-and-menus","title":"Dialogs, Views, and Menus","text":"<p>This section details the Rapise GUI. \u00a0Each subsection describes the function of a particular Dialog, View, or Menu. \u00a0The purpose and consequences of all buttons, options, lists, and check boxes are listed.</p>"},{"location":"Guide/about_this_guide/#how-tos","title":"How-Tos","text":"<p>This section focuses on specific tasks that a Rapise user might want to accomplish.</p>"},{"location":"Guide/absolute_analog_learning/","title":"Absolute Analog Recording","text":""},{"location":"Guide/absolute_analog_learning/#purpose","title":"Purpose","text":"<p>Absolute analog recording is used to track mouse usage (movement and clicks) and keyboard events. \u00a0For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. \u00a0(In contrast, in relative analog, the events are recorded relative to the upper-left corner of the selected objects.) \u00a0The events are recorded in a file of type arf (Analog Recording File).</p> <p></p>"},{"location":"Guide/absolute_analog_learning/#value","title":"Value","text":"<p>Not all applications can be recorded by locating and learning objects being used. \u00a0A very good example of this is free-hand drawing in an application such as Microsoft Paint (<code>Start Menu &gt; Accessories &gt; Paint</code>). \u00a0There are several reasons why this application cannot be recorded using object tracking, learning and recording. \u00a0The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" \u00a0Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars.</p> <p>Absolute analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications.</p>"},{"location":"Guide/absolute_analog_learning/#see-also","title":"See Also","text":"<ul> <li>Do Absolute Analog Recording</li> <li>Relative Analog Recording</li> </ul>"},{"location":"Guide/accessing_files_and_i_o_functi/","title":"Accessing Files and I/O Functions","text":""},{"location":"Guide/accessing_files_and_i_o_functi/#overview","title":"Overview","text":"<p>Sometimes using Rapise you need to access files on the Windows file system, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file.</p>"},{"location":"Guide/accessing_files_and_i_o_functi/#file-global-object","title":"File Global Object","text":"<p>Normally file operations in Rapise are done with global File object.</p> <pre><code>function Test()\n{\n    var fn = \"TestFile.txt\";\n    var cnt = \"Hello world!\";\n\n    // Test exists/delete\n    if (File.Exists(fn))\n    {\n        File.Delete(fn);\n        Tester.Assert(\"File deleted\", !File.Exists(fn));\n    }\n\n    // Test read/write\n    File.Write(fn, cnt);\n    if (Tester.Assert(\"File exists\", File.Exists(fn)))\n    {\n        var text = File.Read(fn);\n        Tester.AssertEqual(\"File write/read\", text, cnt);\n    }\n\n    // Test append\n    File.Write(fn, \"C\");\n    File.Append(fn, \"C\");\n    var text = File.Read(fn);\n    Tester.AssertEqual(\"File append works\", \"CC\", text);\n\n    // Folder exists/create/delete\n    var folderExists = File.FolderExists(\".\");\n    Tester.Assert(\"Folder exists\", folderExists);\n    var testFolderPath = File.FolderInfo(\".\").Path;\n    Tester.Message(testFolderPath);\n    var subFolderPath = testFolderPath + \"\\\\SubFolder20170314\";\n    File.CreateFolder(subFolderPath);\n    Tester.Assert(\"Sub folder exists, CreateFolder works\", File.FolderExists(subFolderPath));\n    File.DeleteFolder(subFolderPath);\n    Tester.Assert(\"Sub folder does not exist, DeleteFolder works\", !File.FolderExists(subFolderPath));\n}\n</code></pre>"},{"location":"Guide/accessing_files_and_i_o_functi/#filesystemobject","title":"FileSystemObject","text":"<p>Alternatively you can can access the file system using the <code>FileSystemObject</code>.</p> <p>http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx</p> <pre><code>function Test()\n{\n    //IOMode constants\n    var IOMode_ForReading = 1;\n    var IOMode_ForWriting = 2;\n    var IOMode_ForAppending = 8;\n    //var Format constants\n    var IOFormat_ASCII = 0;\n    var IOFormat_Unicode = -1;\n    //This sample demonstrates how to manipulate the Windows file system using Rapise\n    //We shall open a text file for writing in this simple example\n    var fso = new ActiveXObject('Scripting.FileSystemObject');\n    var ts = fso.CreateTextFile('C:\\\\Temp\\\\MyTestFile.txt');\n    ts.Close();\n    var file = fso.GetFile('C:\\\\Temp\\\\MyTestFile.txt');\n    ts = file.OpenAsTextStream(IOMode_ForWriting, IOFormat_Unicode);\n    ts.WriteLine('Hello World!');\n    ts.Close();\n    Tester.Message('Wrote File');\n    //Now read this file back\n    file = fso.GetFile('C:\\\\Temp\\\\MyTestFile.txt');\n    ts = file.OpenAsTextStream(IOMode_ForReading, IOFormat_Unicode);\n    var text = ts.ReadLine();\n    Tester.Message(text);\n    ts.Close();\n}\n</code></pre>"},{"location":"Guide/accessing_files_and_i_o_functi/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/actions/","title":"Actions","text":""},{"location":"Guide/actions/#purpose","title":"Purpose","text":"<p>Actions are anything the user can do to a GUI control, such as click, select, fill with text, etc. You can override the behavior of an action, without creating or altering a Recording Library, using SeSOverrideAction(). Overriding an action affects Playback, but not Recording.</p>"},{"location":"Guide/actions/#usage","title":"Usage","text":"<p>SeSOverrideAction() is used to override an action handler or add a new DoAction handler:</p> <pre><code>/**\n * Overrides Behavior.\n * this may be used if some behavior should be tweaked. Default action handler\n * is passed to the callback as the first parameter.\n * https://www.inflectra.com/support/knowledgebase/kb354.aspx\n * @param objectType Either object_type of the rule or regexp pattern for object_type.\n * @param actionName action name. For example \"DoClick\".\n * @param callback new action handler for specified action.\n * @returns 'true' if object_type is found and replacement is successful, 'false' otherwise.\n */\nfunction SeSOverrideAction(/**string*/ objectType, /**string*/ actionName, callback)\n</code></pre> <p>In most cases SeSOverrideAction() should be called from within SeSOnTestInit() callback.</p>"},{"location":"Guide/actions/#calling-base-actions","title":"Calling Base Actions","text":"<p>The function you are overriding is called the base action. It is passed to the overriding action as first <code>defaultActionHandler</code> parameter. You can call the base action like this:</p> <pre><code>function MyHTMLObjectDoClick(defaultActionHandler, x, y, forceEvent)\n{\n    Tester.Message(\"Click on \" + this.object_name);\n    this.highlight();\n    Global.DoSleep(500);\n    return defaultActionHandler.apply(this, [x, y, forceEvent]); // calling the base action\n}\n</code></pre>"},{"location":"Guide/actions/#see-also","title":"See Also","text":"<ul> <li>KB354 How to override an action for an object type</li> </ul>"},{"location":"Guide/ado_integration/","title":"Azure DevOps Integration v2","text":"<p>Tip</p> <p>This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3.</p> <p>From this topic you will learn how to run Rapise tests with Node-Tap and Azure DevOps.</p>"},{"location":"Guide/ado_integration/#node-tap","title":"Node-Tap","text":""},{"location":"Guide/ado_integration/#prerequisites","title":"Prerequisites","text":"<p>Download and install Node.js. Open command prompt and run the following commands to make sure you have Node.js and npm installed:</p> <p><pre><code>C:\\Users\\inflectra&gt;node --version\nv10.16.3\n\nC:\\Users\\inflectra&gt;npm --version\n6.9.0\n</code></pre> Install <code>Node-Tap</code> package with <code>npm</code>:</p> <p><pre><code>npm install tap -g\n</code></pre> Discover the folder where Node-Tap is installed:</p> <p><pre><code>C:\\Users\\inflectra&gt;npm list tap -g\nC:\\Users\\inflectra\\AppData\\Roaming\\npm\n-- tap@14.6.9\n</code></pre> Configure system variable <code>NODE_PATH</code> and set it to <code>node_modules</code> subfolder. In our case it is:</p> <p><pre><code>C:\\Users\\inflectra\\AppData\\Roaming\\npm\\node_modules\n</code></pre> </p> <p>Relaunch Command Prompt and verify the system variable:</p> <pre><code>C:\\Users\\inflectra&gt;echo %NODE_PATH%\nC:\\Users\\inflectra\\AppData\\Roaming\\npm\\node_modules\n</code></pre>"},{"location":"Guide/ado_integration/#test-framework","title":"Test Framework","text":"<p>As a starting point you may use sample framework we published on GitHub.</p> <p>The root folder of the framework contains:</p> <ul> <li><code>rapise.js</code> - node.js module capable of running Rapise tests;</li> <li><code>runtest.cmd</code> - command file used by <code>rapise.js</code>, adjust <code>SES_ENGINE_HOME</code> variable in this file if needed;</li> <li><code>fixunit.js</code>, <code>tap2xunit.cmd</code> - these two files convert execution results from TAP format to XUnit format accepted by Azure DevOps.</li> </ul> <p>Each Rapise test in this framework is a direct subfolder of the root folder:</p> <pre><code>AzureDevOpsFriendlyArchitecture \n|\n|-CreateNewBook\n|-FailedLogin\n</code></pre> <p><code>test</code> folder contains entries for Node-Tap. These are files with predefined content and names equal to names of Rapise tests. </p> <pre><code>AzureDevOpsFriendlyArchitecture \n|\n|- test\n    |\n    |-CreateNewBook.js\n    |-FailedLogin.js\n</code></pre> <p>Predefined content of the files is:</p> <pre><code>var rapise = require('../rapise')\nvar tap = require('tap')\nvar path = require('path');\n\nvar testName = path.basename(__filename);\n\nrapise.run(testName, function(exit_code) {\n    tap.ok(exit_code == 0, testName);    \n})\n</code></pre> <p>There is also <code>tap-parallel-not-ok</code> in <code>tests</code> folder that instructs Node-Tap to run tests sequentially.</p>"},{"location":"Guide/ado_integration/#run-tests-with-tap","title":"Run Tests with Tap","text":"<p>To run tests on a local machine open command prompt in the root folder of the framework and execute:</p> <p><pre><code>tap\n</code></pre> You should see tests running: </p> <p>To pass parameters to a Rapise test specify <code>--test-arg</code>. The value is JSON stringified object. Every property of this object will be evaluated by Rapise as a global variable:</p> <pre><code>tap --test-arg=\"{'g_browserLibrary':'Selenium - Chrome'}\"\n</code></pre>"},{"location":"Guide/ado_integration/#azure-devops-pipeline-v1","title":"Azure DevOps Pipeline v1","text":"<p>To run tests in Azure DevOps you need to configure a pipeline. Here is the template to run Rapise tests:</p> <p>azure-pipelines.yml <pre><code># Starter pipeline\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\ntrigger:\n- master\n\npool:\n  name: 'default'\n\nsteps:\n\n- script: |\n    echo Running tests...\n    tap --test-arg=\"{'g_browserLibrary':'Selenium - Chrome'}\"\n  displayName: 'Execute Tests'\n  continueOnError: true\n\n- script: |\n    call tap2xunit.cmd\n  displayName: \"Convert TAP to XUnit\"\n\n- script: |\n    cscript.exe fixunit.js\n  displayName: 'Fix XUnit Reports'\n\n- task: CopyFiles@2\n  inputs:\n    contents: 'reports/**'\n    targetFolder: $(Build.ArtifactStagingDirectory)\n\n- task: PublishBuildArtifacts@1\n  inputs:\n    pathToPublish: $(Build.ArtifactStagingDirectory)\n    artifactName: TestRunReports  \n\n- task: PublishTestResults@2\n  inputs:\n    testResultsFormat: 'JUnit'\n    testResultsFiles: 'results/*.xml'\n    testRunTitle: 'Basic Tests'\n    failTaskOnFailedTests: true\n</code></pre></p> <p>The pipeline above assumes that <code>default</code> agent pool contains a Self-hosted Windows Agent installed on a machine with Rapise and Node-Tap (see Prerequisites).</p> <p>See the video to learn how to install and configure a self-hosted agent.</p> <p>The pipeline consists of the following steps:</p> <ol> <li>Run tests via <code>tap</code> command. You can pass parameters if needed.</li> <li>Convert TAP formatted execution results to XUnit formatted reports.</li> <li>Adjust XUnit reports for better processing by Azure DevOps.</li> <li>Gather logs and reports in TAP/TRP formats in <code>reports</code> folder for Publish Build Artifacts task.</li> <li>Upload test results to Azure with Publish Test Results task.</li> </ol> <p>After execution of the pipeline one can review test results:</p> <p></p> <p>and reports/logs (.tap, .trp, .log):</p> <p></p> <p>Note: TRP files are standard reports you can view with Rapise.</p>"},{"location":"Guide/ado_integration/#azure-devops-pipeline-v2","title":"Azure DevOps Pipeline v2","text":"<p>If you do not want each step of a Rapise test to be reported as test case in Azure DevOps use modified pipeline version:</p> <p>azure-pipelines-summary.yml <pre><code># Starter pipeline\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\ntrigger: none\n\npool:\n  name: 'default'\n\nsteps:\n\n- script: |\n    echo Running tests...\n    tap --no-coverage --test-arg=\"{'g_browserLibrary':'Chrome HTML'}\"\n  displayName: 'Execute Tests'\n  continueOnError: true\n\n- script: |\n    call tap2xunit.cmd\n  displayName: \"Convert TAP to XUnit\"\n\n- script: |\n\n    .exe summarize.js\n  displayName: 'Fix XUnit Reports'\n\n- task: CopyFiles@2\n  inputs:\n    contents: 'reports/**'\n    targetFolder: $(Build.ArtifactStagingDirectory)\n\n- task: PublishBuildArtifacts@1\n  inputs:\n    pathToPublish: $(Build.ArtifactStagingDirectory)\n    artifactName: TestRunReports\n\n- task: PublishTestResults@2\n  inputs:\n    testResultsFormat: 'JUnit'\n    testResultsFiles: 'results/*.xml'\n    testRunTitle: 'Basic Tests'\n    failTaskOnFailedTests: true\n</code></pre> It calls <code>summarize.js</code> to adjust XUnit reports. Azure DevOps report for this pipeline looks like:</p> <p></p> <p>Detailed logs and reports (.tap, .trp, .log files) are also available for download as a ZIP archive:</p> <p></p> <p>Note: TRP files are standard reports you can view with Rapise.</p>"},{"location":"Guide/ai_dashboard/","title":"AI in Rapise","text":""},{"location":"Guide/ai_dashboard/#overview","title":"Overview","text":"<p>We have integrated AI capabilities directly into Rapise, allowing users to harness the power of AI without needing to switch between applications. Everything can be managed within Rapise itself. Moreover, the AI in Rapise is well-versed with Rapise's Global Object API, the currently open testing framework, its modules, and object repositories. This knowledge enables the generation of precise and specialized responses. In its initial release, Rapise\u2019s AI features include RVL and JavaScript code generation, as well as data generation functionalities. Rapise 8.2 supports OpenAI and Azure OpenAI models, including multimodal ones that can accept image input. The AI workflow in Rapise also supports incremental improvements in code generation quality by allowing users to save positive and negative examples for use in subsequent prompts.</p> <p>A key feature of Rapise 8.2 is the AI Command, which translates human-readable test step descriptions into executable code using AI. Once the code is generated for an AI Command, it can be executed independently of AI. If the AI Command text is modified, the code is regenerated accordingly. When generating code for an AI Command, Rapise considers available Global Objects, as well as Modules/Page Objects and objects from the Object Repository associated with the test case containing the AI Command (including objects linked with Repository command).</p> <p>When using AI Commands, the recommended workflow for test creation is as follows: first, define Page Objects with high-level actions (e.g., Login, Logout, OpenModule, AddRecord, UpdateRecord, DeleteRecord). Then, learn and add test case-specific objects to the Object Repository, and finally, write your test case using AI Commands. The AI will translate these commands into executable JavaScript, which you can review and edit. Once all commands are translated into code, the test case is ready for execution.</p> <p>Rapise provides two primary interfaces for interacting with AI:</p> <ul> <li> <p>The AI Dashboard allows you to configure AI options, chat with the AI, and view your chat history.</p> </li> <li> <p>The AI Panel is linked to the active RVL document and is used to translate AI Commands into executable JavaScript code.</p> </li> </ul>"},{"location":"Guide/ai_dashboard/#ai-dashboard","title":"AI Dashboard","text":""},{"location":"Guide/ai_dashboard/#how-to-open","title":"How to Open","text":"<p>To open the AI Dashboard, go to the main menu and select <code>View &gt; AI Dashboard</code>.</p> <p>The dashboard comprises three pages:</p> Screenshot <p></p> Transcript <p>AI Dashboard tabs: Settings, Chats, Snapshots.</p> <ul> <li>Settings: Configure your AI API key, select the default model, and set framework-specific options here.</li> <li>Chats: This page displays the history of AI chats. You can open any chat and continue interacting with the AI.</li> <li>Snapshots: Starred chats will appear on this page.</li> </ul>"},{"location":"Guide/ai_dashboard/#settings","title":"Settings","text":"<p>In its initial release, Rapise supports both OpenAI and Azure OpenAI models. To use OpenAI models, you only need an OpenAI Api Key. For Azure OpenAI, you also need to specify the endpoint URL.</p> Screenshot <p></p> Transcript <p>Options</p> <p>Scope global - <code>global</code> (selected) - <code>local [create]</code></p> <p>Please select an agent workflow for AI Command: - <code>AI Command</code> (dropdown option)</p> <p>Enter parameters for the default model: - <code>gpt-4o-mini</code></p> <ul> <li>(Obscured text for input)</li> </ul> <p>Base URL: - (Empty field)</p> <p>Test Model (Button)</p> <p>You can create options that are local to the current testing framework. Simply click the <code>local[create]</code> button. If local options exist, Rapise will prioritize them over global ones. To delete local options, click <code>... &gt; Delete Local</code>.</p>"},{"location":"Guide/ai_dashboard/#chats","title":"Chats","text":"<p>On the Chats page, you can select a previous chat and continue interacting with the AI. You can also start a new chat. When creating a new chat, you\u2019ll be prompted to select a workflow. Supported workflows include:</p>"},{"location":"Guide/ai_dashboard/#ai-chat","title":"AI Chat","text":"<p>This is a general-purpose chat with an AI model. You can ask questions and receive answers. You can also enhance prompts by adding screenshots and files.</p> Screenshot <p></p> Transcript <p>USER: What are main features of a good UI testing framework?</p> <p>AI: A good UI testing framework should have several key features to ensure it is effective, efficient, and user-friendly. Here are the main features to consider:</p> <ol> <li> <p>Cross-Browser Compatibility: The framework should support testing across multiple browsers (e.g., Chrome, Firefox, Safari, Edge) to ensure consistent behavior of the application.</p> </li> <li> <p>Cross-Platform Support: It should be able to test applications on various platforms (e.g., web, mobile, desktop) to accommodate different user environments.</p> </li> <li> <p>Ease of Use: The framework should have a user-friendly interface and clear documentation, making it easy for testers and developers to write and maintain tests.</p> </li> </ol>"},{"location":"Guide/ai_dashboard/#ai-command","title":"AI Command","text":"<p>This chat type is typically generated by Rapise when processing an AI Command. The result of prompt processing is JavaScript code. In this chat, you can edit the generated code, copy it to a JavaScript file, or convert it to RVL and apply it to the active RVL sheet.</p> Screenshot <p></p> Transcript <p>USER: Open browser at https://libraryinformationsystem.org</p> <p>AI: </p> <pre><code>Navigator.Open(\"https://libraryinformationsystem.org\")\n</code></pre>"},{"location":"Guide/ai_dashboard/#generate-data-list","title":"Generate Data List","text":"<p>Generates a list of data values that can be directly inserted into an RVL sheet from the chat.</p> <ol> <li> <p>Prompt AI to generate a list of values. E.g.: <code>Generate 10 fake company names</code>.</p> Screenshot <p></p> Transcript <p>USER: Generate 10 fake company names</p> <p>AI:  <pre><code>Companies\nInnovaTech  \nEcoSphere  \nNexGen Solutions  \nQuantum Dynamics  \nAeroFusion  \nCrestWave  \nPixelForge  \nVitaNova  \nStratosphere Innovations  \nBluePeak Industries  \n</code></pre></p> </li> <li> <p>Open the RVL file and sheet where you want to insert the result.</p> </li> <li> <p>Return to the AI Dashboard and click Apply  . You can also edit   values before inserting them into the RVL.</p> <p></p> </li> <li> <p>The list will be inserted into the RVL.</p> Screenshot <p></p> Transcribe Flow Type Object Action ParamName ParamType ParamValue Map Rows Companies Companies Innovatech EcoSphere NexGen Solutions Quantum Dynamics AeroFusion CrestWave PixelForge VitaNova Stratosphere Innovations BluePeak Industries End </li> </ol>"},{"location":"Guide/ai_dashboard/#generate-data-table","title":"Generate Data Table","text":"<p>Generates a table with columns and rows. The result can be directly inserted into an RVL sheet as a Map. The workflow is similar to generating a Data List.</p> <ol> <li> <p>Prompt AI to generate a table of values. E.g.: <code>Generate a table with 10 records and columns: Zip, City, Street Address</code>.</p> Screenshot <p></p> Transcribe <p>USER: Generate a table with 10 records and columns: Zip, City, Street Address</p> <p>AI:  <pre><code>{  \n\"data\": [  \n    {  \n    \"Zip\": \"10001\",  \n    \"City\": \"New York\",  \n    \"Street Address\": \"123 Main St\"  \n    },  \n    {  \n    \"Zip\": \"20001\",  \n    \"City\": \"Washington\",  \n    \"Street Address\": \"456 Elm St\"  \n    },  \n    {  \n    \"Zip\": \"30301\",  \n    \"City\": \"Atlanta\",  \n    \"Street Address\": \"789 Pine St\"  \n    },  \n    {  \n    \"Zip\": \"60601\",  \n    \"City\": \"Chicago\",  \n    \"Street Address\": \"101 Maple St\"  \n    },  \n    {  \n    \"Zip\": \"70112\",  \n    \"City\": \"New Orleans\",  \n    \"Street Address\": \"202 Oak St\"  \n    },  \n    {  \n    \"Zip\": \"94105\",  \n    \"City\": \"San Francisco\",  \n    \"Street Address\": \"303 Cedar St\"  \n    },  \n    {  \n    \"Zip\": \"33101\",  \n    \"City\": \"Miami\",  \n    \"Street Address\": \"404 Birch St\"  \n    },  \n    {  \n    \"Zip\": \"80202\",  \n    \"City\": \"Denver\",  \n    \"Street Address\": \"505 Walnut St\"  \n    },  \n    {  \n    \"Zip\": \"98101\",  \n    \"City\": \"Seattle\",  \n    \"Street Address\": \"606 Spruce St\"  \n    },  \n    {  \n    \"Zip\": \"85001\",  \n    \"City\": \"Phoenix\",  \n    \"Street Address\": \"707 Palm St\"  \n    }  \n]  \n}  \n</code></pre></p> </li> <li> <p>Apply the AI response to get the result.</p> Screenshot <p></p> Transcribe Flow Type Object Action ParamName ParamType ParamValue Map Rows TBD Zip City Street Address 10001 New York 123 Main St 20001 Washington 456 Elm St 30301 Atlanta 789 Pine St 60601 Chicago 101 Maple St 70112 New Orleans 202 Oak St 94105 San Francisco 303 Cedar St 33101 Miami 404 Birch St 80202 Denver 505 Walnut St 98101 Seattle 606 Spruce St 85001 Phoenix 707 Palm St End </li> </ol>"},{"location":"Guide/ai_dashboard/#generate-more-rows","title":"Generate More Rows","text":"<p>Use this to generate additional data for an existing table.</p> <ol> <li> <p>Select a row in the current RVL table.</p> Screenshot <p></p> Transcribe Flow Type Object Action ParamName ParamType ParamValue Map Rows TBD Zip City Street Address 10001 New York 123 Main St 20001 Washington 456 Elm St 30301 Atlanta 789 Pine St 60601 Chicago 101 Maple St 70112 New Orleans 202 Oak St 94105 San Francisco 303 Cedar St 33101 Miami 404 Birch St 80202 Denver 505 Walnut St 98101 Seattle 606 Spruce St 85001 Phoenix 707 Palm St End </li> <li> <p>In the AI Dashboard, create a \"Generate More Rows\" chat and send a prompt to the AI. For example: <code>Generate 10 more records with cities from countries other than USA</code>.</p> Screenshot <p></p> Transcribe <p>USER: Generate 10 more records with cities from countries other than USA</p> <p>AI:  <pre><code>{  \n\"data\": [  \n    {  \n    \"Zip\": \"10115\",  \n    \"City\": \"Berlin\",  \n    \"Street Address\": \"Friedrichstra\u00dfe 123\"  \n    },  \n    {  \n    \"Zip\": \"M5A 1A1\",  \n    \"City\": \"Toronto\",  \n    \"Street Address\": \"Queen St E 456\"  \n    },  \n    {  \n    \"Zip\": \"SW1A 1AA\",  \n    \"City\": \"London\",  \n    \"Street Address\": \"Buckingham Palace Road 1\"  \n    },  \n    {  \n    \"Zip\": \"1000\",  \n    \"City\": \"Brussels\",  \n    \"Street Address\": \"Rue de la Loi 10\"  \n    },  \n    {  \n    \"Zip\": \"1010\",  \n    \"City\": \"Vienna\",  \n    \"Street Address\": \"Karntnerring 5\"  \n    },  \n    {  \n    \"Zip\": \"1100\",  \n    \"City\": \"Athens\",  \n    \"Street Address\": \"Syntagma Square 2\"  \n    },  \n    {  \n    \"Zip\": \"75001\",  \n    \"City\": \"Paris\",  \n    \"Street Address\": \"Rue de Rivoli 20\"  \n    },  \n    {  \n    \"Zip\": \"2000\",  \n    \"City\": \"Copenhagen\",  \n    \"Street Address\": \"K\u00f8bmagergade 30\"  \n    },  \n    {  \n    \"Zip\": \"1010\",  \n    \"City\": \"Amsterdam\",  \n    \"Street Address\": \"Damstraat 1\"  \n    },  \n    {  \n    \"Zip\": \"1010\",  \n    \"City\": \"Madrid\",  \n    \"Street Address\": \"Gran V\u00eda 45\"  \n    }  \n]  \n}  \n</code></pre></p> </li> <li> <p>Apply the generated values to see the result.</p> Screenshot <p></p> Transcribe Flow Type Object Action ParamName ParamType ParamValue Map Rows TBD Zip City Street Address 10001 New York 123 Main St 20001 Washington 456 Elm St 30301 Atlanta 789 Pine St 60601 Chicago 101 Maple St 70112 New Orleans 202 Oak St 94105 San Francisco 303 Cedar St 33101 Miami 404 Birch St 80202 Denver 505 Walnut St 98101 Seattle 606 Spruce St 85001 Phoenix 707 Palm St 10115 Berlin Friedrichstra\u00dfe 123 M5A 1A1 Toronto Queen St E 456 SW1A 1AA London Buckingham Palace R 1000 Brussels Rue de la Loi 10 1010 Vienna Karntnerring 5 1100 Athens Syntagma Square 2 75001 Paris Rue de Rivoli 20 2000 Copenhagen K\u00f8bmagergade 30 1010 Amsterdam Damstraat 1 1010 Madrid Gran V\u00eda 45 End </li> </ol>"},{"location":"Guide/ai_dashboard/#test-scenario-from-text","title":"Test Scenario from Text","text":"<p>Generates a sequence of AI Commands based on a text prompt.</p> <ol> <li> <p>Provide a high-level description of the scenario you want to implement. For example: <code>Generate an end-to-end scenario to create and delete a book in a web based Library Information System</code>. A step-by-step scenario will be generated.</p> Screenshot <p></p> Transcribe <p>USER: Generate an end-to-end scenario to create and delete a book in a web based Library Information System  </p> <p>AI: <pre><code>1. Open the web browser and navigate to the Library Information System URL {library_url}.  \n2. Click on the \"Login\" button.  \n3. Enter the username {username} in the username field.  \n4. Enter the password {password} in the password field.  \n5. Click on the \"Submit\" button to log in.  \n6. Once logged in, navigate to the \"Books\" section of the system.  \n7. Click on the \"Add New Book\" button.  \n8. Fill in the book title {book_title} in the title field.  \n9. Fill in the author name {author_name} in the author field.  \n10. Fill in the ISBN number {isbn_number} in the ISBN field.  \n11. Select the genre {genre} from the dropdown menu.  \n12. Click on the \"Save\" button to create the book entry.  \n13. Verify that the book {book_title} appears in the list of books.  \n14. Locate the newly created book {book_title} in the list.  \n15. Click on the \"Delete\" button next to the book {book_title}.  \n16. Confirm the deletion in the pop-up dialog.  \n17. Verify that the book {book_title} no longer appears in the list of books.  \n18. Log out of the Library Information System.\n</code></pre></p> </li> <li> <p>Select an RVL sheet for insertion, then return to the AI Dashboard and click the Apply icon. A sequence of AI commands will be inserted into the RVL sheet.</p> Screenshot <p></p> Transcribe <p> Flow Type Object Action ParamName ParamType ParamValue AI Open the web browser and navigate to the Library Information System URL Param library_url string library_url AI Click on the \"Login\" button. AI Enter the username {username} in the username field. Param username string username AI Enter the password {password} in the password field. Param password string password AI Click on the \"Submit\" button to log in. AI Once logged in, navigate to the \"Books\" section of the system. AI Click on the \"Add New Book\" button. AI Fill in the book title {book_title} in the title field. Param book_title string book_title AI Fill in the author name {author_name} in the author field. Param author_name string author_name AI Fill in the ISBN number {isbn_number} in the ISBN field. Param isbn_number string isbn_number AI Select the genre {genre} from the dropdown menu. Param genre string genre AI Click on the \"Save\" button to create the book entry. AI Verify that the book {book_title} appears in the list of books. Param book_title string book_title AI Locate the newly created book {book_title} in the list. Param book_title string book_title AI Click on the \"Delete\" button next to the book {book_title}. Param book_title string book_title AI Confirm the deletion in the pop-up dialog. AI Verify that the book {book_title} no longer appears in the list of books. Param book_title string book_title AI Log out of the Library Information System. </p> </li> </ol>"},{"location":"Guide/ai_dashboard/#test-scenario-from-image","title":"Test Scenario from Image","text":"<p>Generates a sequence of AI Commands from an image and a text prompt.</p> <ol> <li> <p>In the AUT, navigate to the screen/page you want to use.</p> Screenshot <p></p> Transcribe <p>Library Information System Logged in as Librarian, Logout</p> <p>Create New Book</p> <p>Name Enter book name (text input)</p> <p>Author A.A. Milne (dropdown selection)</p> <p>Genre Adventure (dropdown selection)</p> <p>Out of Print [ ] (checkbox)</p> <p>10/07/2020 (date picker)</p> <p>[Save Book] (button)</p> </li> <li> <p>In the AI Dashboard, create a \"Test Scenario from Image\" chat and provide the image along with a text prompt. For example: <code>Fill the form</code>.</p> Screenshot <p></p> Transcribe <p>USER: Fill the form (screenshot of the form is attached)</p> <p>AI: <pre><code>1. Enter {book_name} in the \"Name\" field.  \n2. Select {author_name} from the \"Author\" dropdown.  \n3. Select {genre} from the \"Genre\" dropdown.  \n4. Check the \"Out of Print\" checkbox if {out_of_print} is true.  \n5. Enter {date} in the date field.  \n6. Click the \"Save Book\" button. \n</code></pre></p> </li> <li> <p>Select an RVL sheet for insertion, then return to the AI Dashboard and click the Apply icon. A sequence of AI commands will be inserted into the RVL sheet.</p> Screenshot <p></p> Transcribe <p> Flow Type Object Action ParamName ParamType ParamValue AI Enter {book_name} in the \"Name\" field. Param book_name string book_name AI Select {author_name} from the \"Author\" dropdown. Param author_name string author_name AI Select {genre} from the \"Genre\" dropdown. Param genre string genre AI Check the \"Out of Print\" checkbox if {out_of_print} is true. Param out_of_print string out_of_print AI Enter {date} in the date field. Param date string date AI Click the \"Save Book\" button. </p> </li> </ol>"},{"location":"Guide/ai_dashboard/#snapshots","title":"Snapshots","text":"<p>On this page, find starred chats. To add a chat to Snapshots, locate it in history, and hover your mouse pointer over its top-right corner to reveal the <code>...</code> icon:</p> <p></p> <p>Click the icon to expand the popup menu and select <code>Snapshot</code>.</p> <p></p> <p>If you no longer need a chat on the Snapshots page, you can remove it.</p> <p></p>"},{"location":"Guide/ai_dashboard/#ai-panel","title":"AI Panel","text":"<p>AI panel is used to work with AI Commands. </p>"},{"location":"Guide/ai_dashboard/#how-to-open_1","title":"How to Open","text":"<p>To open the panel, double-click the line number of an AI Command or click the <code>Show AI Panel</code> button that appears when you hover your mouse over the corresponding cell.</p> <p></p> <p>It\u2019s also possible to work with multiple AI Commands simultaneously. Simply select a range of commands and click <code>Show AI Panel</code>.</p> <p></p> <p>There is also a toolbar button that shows all AI Commands on the active RVL sheet.</p> <p></p>"},{"location":"Guide/ai_dashboard/#command-menu","title":"Command Menu","text":"<p>You can perform various actions with each command.</p> <p></p> <ul> <li> - generate or regenerate code for the command.</li> <li>  - run the code for this command.</li> <li>  - copy the command ID to the clipboard.</li> <li>  - open the corresponding chat session in the AI Dashboard.</li> <li>  - like the result of code generation. This will be used as a positive example in subsequent AI Command prompts.</li> <li>  - dislike the result of code generation. This will be used as a negative example in subsequent AI Command prompts.</li> </ul>"},{"location":"Guide/ai_dashboard/#panel-menu","title":"Panel Menu","text":"<p>The panel also includes a top-level menu.</p> <p> </p> <ul> <li> - generate or regenerate code for all the commands opened in the AI Panel.</li> <li>  - run all the commands opened in the AI Panel sequentially.</li> <li>  - undock the panel.</li> <li>  - dock the panel to the right.</li> <li>  - dock the panel to the bottom.</li> <li>  - hide the panel.</li> <li>  - open the Workflow selection page.</li> </ul>"},{"location":"Guide/ai_dashboard/#framework-folders","title":"Framework Folders","text":"<p>When you work with AI in Rapise, it creates a set of folders in the root framework directory.</p> <ul> <li>Root Framework Folder<ul> <li>AI - root folder for AI-related files.<ul> <li>commands - cache for AI Commands, containing generated JavaScript code. This folder must be stored along with the framework; do not delete it.</li> <li>messages - archive of AI chat messages.</li> <li>sessions - high-level information about AI chat sessions (name, ID, timestamp).</li> <li>options.json - local options that override the global ones stored in <code>C:\\ProgramData\\Inflectra\\Rapise\\AI\\options.json</code>. </li> <li>screenshot.base64 - last screenshot taken in Chats.</li> <li>AIExamples.txt - the list of liked/disliked examples of generated code.</li> <li>AIPrompt.txt - text to add to each AI prompt for AI Command processing.</li> </ul> </li> </ul> </li> </ul> <p>Note</p> <p>When you put a framework under source control it is important to add </p> <ul> <li><code>options.json</code></li> <li><code>AIExamples.txt</code></li> <li><code>AIPrompt.txt</code></li> <li><code>commands</code> folder with all the files in it.</li> </ul> <p>The following folders are optional (this is just an archive of AI chats)</p> <ul> <li><code>messages</code></li> <li><code>sessions</code></li> </ul>"},{"location":"Guide/analog_recording/","title":"Analog Recording","text":""},{"location":"Guide/analog_recording/#concept","title":"Concept","text":"<p>Sometimes you have to automate the testing of an application that contains some controls or elements that are not standard objects that can be recognized by Rapise. For example you may have a drawing canvas inside an application that allows you to annotate a diagram. You can use the standard Rapise libraries for the rest of the controls but the actual drawing events cannot be captured that way. Analog recording is available to \u2018fill in the gaps\u2019 in such scenarios.</p> <p>During Analog Recording, Rapise records mouse movements, keyboard inputs, and clicks and stores them in a special .ARF (Analog Recording File) format file:</p> <p></p> <p>There are two types of Analog Recording: Absolute and Relative.</p> <ul> <li>Absolute: Mouse coordinates are recorded relative to the top left corner of the screen.</li> <li>Relative: \u00a0Mouse coordinates are recorded relative to the top left corner of the object beneath the mouse cursor.</li> </ul>"},{"location":"Guide/analog_recording/#usage","title":"Usage","text":"<p>When you are recording your test using the application you may come to a point where there are user actions that you need to record that don\u2019t have any identifiable objects (for example drawing a signature). You can click on the \u2018Analog\u2019 button on the recorder to engage Analog mode:</p> <p></p> <p>Now when you use the mouse and keyboard to test the application, Rapise is storing the coordinates of your mouse clicks and keyboard events and storing them in a separate .ARF file that is part of your test project.</p> <p></p> <p>Once completed, the entire analog section is included as one step within the complete test script so you can include an analog sequence within a test script that contains other non-analog events. This lets you have the robustness of true object-based recording for 95% of your test and analog when you need it for the remaining 5%. This is the best of both worlds.</p>"},{"location":"Guide/analog_recording/#see-also","title":"See Also","text":"<ul> <li>Recording Activity Dialog</li> </ul>"},{"location":"Guide/assertions/","title":"Assertions","text":""},{"location":"Guide/assertions/#purpose","title":"Purpose","text":"<p>An assert statement is a special Boolean condition that represents an assumption about program state at a particular point in test execution. \u00a0When an assert is encountered, the condition is evaluated. \u00a0A value of False indicates a program error. \u00a0In some languages, execution will halt if an assertion evaluates to False. \u00a0In Rapise, the result is logged to the report with failed status, and execution continues or not depending on <code>StopOnError</code> test option.</p> <p>There are explicit and implicit assertions (or checkpoints) generated during the script execution and reflected in the report. Each report line is produced by one of the following statements:</p> <ul> <li> <p>RVL Action - has an implicit assertion as a side-effect. Success means successful action execution.     </p> </li> <li> <p>JavaScript Action - has an implicit assertion as a side-effect. Success means successful action execution.     </p> </li> <li> <p>RVL Assertion - explicit comparison (checkpoint)     </p> </li> <li> <p>Code Assertion - explicit comparison (checkpoint)     </p> </li> <li> <p>Execution Error     </p> </li> <li> <p>Image Comparison (Checkpoint)     </p> </li> </ul>"},{"location":"Guide/assertions/#soft-assertions","title":"Soft Assertions","text":"<p>Default behavior of an Assertion statement is to stop test execution immediately (unless StopOnError set explicitly to <code>false</code>). Sometimes it is preferable to have more fine grained control over test execution - so it stops or not stops.</p> <p>This is when Soft assertion comes into play. Soft assertion has 2 features:</p> <ol> <li> <p>In case of failure it just reports it but does not stop the execution.</p> </li> <li> <p>It is possible to stop execution based on previous set of Soft assertions by calling Tester.SoftAssertAll.</p> </li> </ol> <p>Every <code>Assert*</code> method defined for the Tester has corresponding <code>SoftAssert*</code> counterpart (i.e. <code>Tester.AssertEquals</code> and <code>Tester.SoftAssertEquals</code> etc).</p>"},{"location":"Guide/assertions/#create-a-checkpoint","title":"Create a Checkpoint","text":"<p>To create a checkpoint using an assertion, you will have to manually alter the test script (another way is to use the Verify Object Properties dialog during Recording):</p> <ol> <li>Select a location in your script.</li> <li>Query for the application state. For object properties use Get&lt;..&gt; methods. \u00a0For example:</li> </ol> <pre><code>    var xx = SeS(\"OkButton\").GetX(); // X position of the object\n    var image = SeS('Customer').GetBitmap(); // Image of the object\n</code></pre> <ol> <li> <p>Save the state (optional). \u00a0If you are creating an image checkpoint, you may want to save the image to a file. \u00a0</p> </li> <li> <p>Compare. Use the ImageWrapper class to compare images.</p> </li> <li> <p>Write an Assert Statement. Make an appropriate call to one of Tester.Assert methods. Besides a Boolean condition, pass additional data to be placed in the Report. Read about Tester.Assert syntax in the Libraries documentation part.</p> </li> </ol>"},{"location":"Guide/assertions/#example-simple-property-checkpoint","title":"Example: Simple Property Checkpoint","text":"<p>JavaScript</p> <pre><code>Tester.AssertEqual(\"Verify that: ColumnCount=11\", SeS('DataGridView').GetColumnCount(), 11);\n</code></pre> <p>RVL</p> <p></p> <p>Failure Representation in Report</p> <p></p>"},{"location":"Guide/assertions/#example-bitmap-checkpoint","title":"Example: Bitmap Checkpoint","text":"<p>JavaScript</p> <pre><code>Tester.AssertImage(\"Compare Customer bitmap to Images\\\\Checkpoint0001.png\",\n    SeS('Customer').GetBitmap(), Global.GetFullPath(\"Images\\\\Checkpoint0001.png\"));\n</code></pre> <p>RVL</p> <p></p> <p>Failure Representation in Report</p> <p></p>"},{"location":"Guide/assertions/#see-also","title":"See Also","text":"<ul> <li>KB330 Compare two SpreadSheets in Rapise</li> <li>The test samples include a UsingImageCheckpoint test</li> <li>Verifying Object Properties</li> <li>Writing to the Report</li> </ul>"},{"location":"Guide/automated_reporting/","title":"Automated Reporting","text":""},{"location":"Guide/automated_reporting/#purpose","title":"Purpose","text":"<p>Each time you playback a test, Rapise automatically generates a report detailing the steps of the test, the data values used, and the outcome of each step.</p>"},{"location":"Guide/automated_reporting/#usage","title":"Usage","text":"<p>Execute your test using the instructions here. \u00a0When the test is complete a report file (ending in .trp) will open in the Content View. \u00a0It will look like this:</p> <p></p> <p>The first row (with a white background) is used for Report Filtering. \u00a0The rows below that each represent a step in the test. \u00a0The rows with green text represent success; the rows with red text represent failure. You can reposition the columns by dragging and dropping the column names.</p>"},{"location":"Guide/automated_reporting/#the-columns","title":"The Columns","text":"<ul> <li>#: For displaying icons.</li> <li>Name: The test name.</li> <li>Start: The time the test step began executing.</li> <li>Type: Can be one of the following values: Test; Assert; Message.</li> <li>Comment: Assertions and messages have associated comments. They are displayed here.</li> <li>Status: Whether the step passed, failed, or was merely informational.</li> </ul> <p>See also assertions for more information about possible type of report comparisons.</p>"},{"location":"Guide/automated_reporting/#spira-column-mapping","title":"Spira Column Mapping","text":"<p>Whenever the test is executed using the RapiseLauncher its results are uploaded to the SpiraTest. The set of columns displayed by the Test Run Details view differs from Rapise Report Viewer, so the following mapping occurs:</p> <p></p> <p>There is always a source <code>.trp</code> file attached to the test run, you may find it to in the test run Attachments tab:</p> <p></p> <p>So you may download it and open using Rapise to see the full featured automated test report.</p>"},{"location":"Guide/automated_reporting/#custom-spira-column-mapping","title":"Custom Spira Column Mapping","text":"<p>You may have more fine grained control over SpiraTest column display by applying <code>tags</code> parameter to the Tester.Assert function.</p> <p><pre><code>    Tester.Assert(\n        \"Assertion Message\",\n        true,\n        \"Comment goes to ActualResult\",\n        {\"expectedResult\":\"expected\", \"sampleData\":\"sampleData\"}\n    );\n</code></pre> In this case ReportViewer shows two additional columns - ExpectedResult and SampleData and uses them to fill corresponding columns in the Spira test report.</p> <p>Note: Assertion message, ActualResult or SampleData may contain a reference to the Manual Test Step in format <code>[TS:X]</code>, where <code>X</code> is the number representing the Test Step ID. This is useful when you migrating manual test cases to automated scripts and want to keep the trace to manual test steps in the report.</p>"},{"location":"Guide/automated_reporting/#report-formats","title":"Report Formats","text":"<p>Whenever one runs a test, the report will be stored in the following formats:</p> <ol> <li><code>.trp</code> - default Rapise test report format. Contains all information, status and images. Rapise displays it using built in Report Viewer.</li> <li><code>.tap</code> - pure text, Test Anything Protocol formatted output. Usually saved as <code>last.tap</code>. It is a simplest way for integrating the test into external/custom execution pipelines.</li> <li><code>index.html</code> and <code>imageNNN.png</code> - flow output. It is saved into <code>&lt;test folder&gt;\\Reports\\&lt;Date_Time&gt;\\</code> folder:      </li> </ol>"},{"location":"Guide/automated_reporting/#export-report","title":"Export Report","text":"<p>Report may be exported as <code>.xls</code>, <code>.pdf</code>, <code>.xps</code> or <code>.html</code> using the Report popup menu.</p>"},{"location":"Guide/automated_reporting/#export-as-html-dialog","title":"Export as HTML Dialog","text":"<p>HTML export supports a number of templates. So if you do <code>Report/Export as HTML</code> you then have to specify the export format using the following dialog:</p> <p></p> <p>Report File - source <code>.trp</code> to be used for export.</p> <p>Report Type - choose one of the following export templates:</p> <ul> <li>Full Execution Report (images embedded into html) - full report, combined in a single file.</li> <li>Full Execution Report (images saved as separate files) - same as previous, but all images are saved next to the main <code>.html</code> file.</li> <li>High level report (only test status) - short report containing only test-level status.</li> </ul> <p>Destination HTML - path to the target <code>.html</code> file.</p>"},{"location":"Guide/automated_reporting/#exporting-report-with-javascript","title":"Exporting Report With JavaScript","text":"<p>This type of export may also be done from JavaScript code.</p> <pre><code>    var ldr = new ActiveXObject(\"Rapise.LogLoader\");\n    ldr.LoadTrp(\"Reports\\\\ReportAssertions_2020-11-04_15-20.trp\");\n    ldr.ExportAsHtml(\"C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\TrpExporter\\\\FullReportImgTpl.tt\", \"FullReport.html\");\n</code></pre> <p>If you want to perform post-processing of the report for a specific test case, you can combine the code with the SeSOnTestReportReady event. This event allows you to execute custom code when the test report is ready for a given test case.</p>"},{"location":"Guide/automated_reporting/#column-grouping","title":"Column Grouping","text":"<p>Report viewer enables grouping rows by column values. Just drag the column header to this section:</p> <p></p> <p>Use to order by the values in the chosen column. \u00a0The result of dragging the Status column over looks like this:</p> <p></p> <p>You can expand each item to see the corresponding report rows:</p> <p></p> <p>Drag the Status icon back to undo the sort:</p> <p></p>"},{"location":"Guide/automated_reporting/#todo-rows","title":"TODO Rows","text":"<p>Whenever Name starts with <code>TODO</code> the viewer automatically does the following:</p> <ul> <li> <p>If report row Type is Info then it is highlighted in Yellow and TODO counter is incremented:</p> <p></p> </li> <li> <p>If report row Type is Assert then it stays green or red, but TODO counter is still incremented.</p> </li> </ul> <p>If you hover over last execution status in Rapise main window, the tooltip would contain then total number of TODO items found in the report (i.e. TODO counter):</p> <p></p>"},{"location":"Guide/automated_reporting/#see-also","title":"See Also","text":"<ul> <li>Report Filtering</li> <li>The report output file is specified in the Settings Dialog (Settings &gt; ReportPath).</li> </ul>"},{"location":"Guide/breakpoints/","title":"Breakpoints","text":""},{"location":"Guide/breakpoints/#purpose","title":"Purpose","text":"<p>Breakpoints stop execution of the test at a specific line in the script. They allow you to investigate program state, and trace execution flow.</p>"},{"location":"Guide/breakpoints/#usage","title":"Usage","text":"<p>To set a Breakpoint:</p> <ol> <li>Open the script you would like to debug in the Source Editor.</li> <li>Place the cursor at the line where you want a breakpoint.</li> <li>Press F9 or click on the gray strip to the left of line numbers.    </li> </ol>"},{"location":"Guide/breakpoints/#viewing-and-removing-breakpoints","title":"Viewing and Removing Breakpoints","text":"<p>Once you need to view all breakpoints, while in Source Editor, choose <code>Edit &gt; Show All Breakpoints</code>.</p> <p>If you need to get rid from all breakpoints, choose <code>Edit &gt; Remove All Breakpoints</code>.</p> <p></p>"},{"location":"Guide/breakpoints/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> <li>Debugger Toolbar</li> <li>Execution Control</li> </ul>"},{"location":"Guide/browser_settings/","title":"Browser Settings Dialog","text":""},{"location":"Guide/browser_settings/#web-browser-profile","title":"Web Browser Profile","text":"<p>Important</p> <p>Since Rapise 7.3 it is recommended to use Selenium WebDriver based profiles for all web tests. Web browser profiles are considered outdated and should only be used for legacy tests and backward compatibility.</p> <p>Use Browser Settings Dialog to configure <code>Web Browser Profiles</code>. A browser profile specifies</p> <ul> <li>type of a browser (IE, Chrome, Firefox),</li> <li>browser launch parameters</li> <li>and other profile options.</li> </ul> <p>Rapise uses currently active browser profile to do recording and playback.</p> <p>Note</p> <p>You may want to create additional browser profiles if you have several different versions of a web browser on the same machine (e.g. Firefox Latest vs. Firefox ESR, or different versions of Chrome portable) or if you want to be able to run a browser with different command-line options (e.g. Chrome normal, Chrome incognito mode, Chrome with specific screen size).</p> <p>Browser Settings Dialog box displays the list of native (not using Selenium) web browsers that have been configured for use by Rapise and lets you create a new browser profile, modify a profile or make a new profile based on an existing one.</p> <p></p>"},{"location":"Guide/browser_settings/#how-to-open","title":"How to Open","text":"<p>You can open this dialog box using main menu <code>Settings &gt; Browser</code> or by pressing <code>...</code> button in the top right corner of Rapise window.</p> <p></p>"},{"location":"Guide/browser_settings/#toolbar-controls","title":"Toolbar Controls","text":"<p>This dialog box has the following toolbar controls:</p> <ul> <li>Select Profile - This dropdown list lets you select a different web browser profile to be displayed in the dialog.</li> <li>Test - This button will test the connection from Rapise to the specified browser</li> <li>Duplicate - This button will create a new browser profile based on the currently viewed one.</li> <li>Create - This button will create a new empty browser profile that you can edit.</li> <li>Rename - This button will change the name of the current browser profile being edited.</li> <li>Delete - This button will delete the currently displayed browser profile. There is no undo, so be careful!</li> </ul>"},{"location":"Guide/browser_settings/#profile-options","title":"Profile Options","text":"<p>This section has various settings, each of which are described below:</p> <ul> <li>Browser Library - The type of browser being used, currently can be:<ul> <li>Internet Explorer HTML</li> <li>Chrome HTML</li> <li>Firefox HTML</li> </ul> </li> <li>Browser Path - The path to the location of the web browser executable (e.g. chrome.exe, iexplore.exe, firefox.exe) on the computer</li> <li>CMD Line Parameters - Any command-line parameters to pass to the web browser (e.g. -extoff for IE safe mode)</li> <li>Default Click Mode -Species the default 'click mode' for tests using this web browser profile<ul> <li>auto - This tries to locate an element on the screen, moves the mouse over it and then sends the appropriate DOM 'click' event (the default)</li> <li>event - Just sends the DOM click event to the element with no prior mouse-move</li> <li>click - Simulates an actual click on the element rather than sending a DOM click event</li> </ul> </li> </ul>"},{"location":"Guide/browser_settings/#local-browser-profiles","title":"Local Browser Profiles","text":"<p>Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host.</p> <p>To create a local profile just press Duplicate for one of global profiles and set Local checkbox before clicking OK button. Global and Local profile may have same name, in this case Local profile is used for execution.</p> <p></p> <p>If a test contains local browser profiles they can be seen in the dropdowns.</p> <p></p> <p></p> <p>Local profiles are stored inside <code>&lt;Test Root&gt;\\Profiles\\BrowserProfiles</code> and <code>&lt;Test Root&gt;\\Profiles\\SeleniumProfiles</code> folders.</p>"},{"location":"Guide/change_test_entry_point/","title":"Change Test Entry Point","text":"<p>Rapise assumes that the entry point of a test - Test() function is defined in a file specified in ScriptPath property of the Settings dialog. If you want to place Test() function in another file then do not forget to update ScriptPath property of the test.</p>"},{"location":"Guide/change_test_entry_point/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/change_the_libraries_being_use/","title":"Change the Libraries Being Used","text":"<p>Sometimes you are recording a test using a library (e.g. Cross Browser Web) and you realize that you need to add additional libraries to the test to make the recording more efficient.</p> <p>For example, you are recording using the web browser and you need to include the Microsoft Dynamics 365 libraries so that you can more easily record actions in Dynamics 365. The additional library will allow Rapise to recognize the grids and treeviews as Dynamics objects rather than just standard HTML tables or DIVs.</p>"},{"location":"Guide/change_the_libraries_being_use/#how-to-change-the-libraries","title":"How to Change the Libraries","text":"<p>To change the recording library being used select <code>Tools &gt; Libraries</code> in the main application menu.</p> <p>That will bring up the Select Libraries for Record and Playback dialog:</p> <p></p> <p>Now you can check the boxes of the additional libraries you want to use (or remove any existing ones that you no longer need).</p>"},{"location":"Guide/change_the_libraries_being_use/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>In addition, there are a couple of shortcuts that you may want to use:</p> <ul> <li>Record - clicking Record on its own will start Rapise recording using the current selected libraries (this is the default action)</li> <li>Shift + Record - This brings up the library selector (shown above), and is equivalent to clicking the <code>Tools &gt; Libraries</code> in the menu before starting recording.</li> <li> <p>Ctrl + Record - This brings up the application selector (see below) and lets you change the application and library being recorded:</p> <p></p> </li> </ul>"},{"location":"Guide/change_the_libraries_being_use/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/changing_the_url_of_website_be/","title":"Changing the URL of Website being Tested","text":""},{"location":"Guide/changing_the_url_of_website_be/#question","title":"Question","text":"<p>We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address?</p>"},{"location":"Guide/changing_the_url_of_website_be/#recommended-solution","title":"Recommended Solution","text":"<p>You do not need to convert scripts and objects. You can keep the script the same and just add the following code at the start of the test:</p> <pre><code>Navigator.Open('http://www.website.com');\n</code></pre> <p>or using a variable:</p> <pre><code>g_webSiteBaseUrl = 'http://www.website.com';\nNavigator.Open(g_webSiteBaseUrl);\n</code></pre> <p>The variable may be defined by external execution engine like SpiraTest.</p>"},{"location":"Guide/changing_the_url_of_website_be/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/cheatsheet/","title":"Rapise Cheat Sheet","text":""},{"location":"Guide/cheatsheet/#global-shortcuts","title":"Global Shortcuts","text":"<p>Ctrl+S - Save All: Save current test and all open documents</p> <p>Shift+Ctrl+F - Find in Files</p> <p>F1 - Show Help for the selected item (source token, selected object in Object tree, selected object in RVL editor)</p> <p>Ctrl+Z - Undo</p> <p>Ctrl+Y - Redo</p>"},{"location":"Guide/cheatsheet/#rvl-editor","title":"RVL Editor","text":"<p>Ctrl+I - Insert Row</p> <p>Ctrl+D- Delete Row</p> <p>Shift+Enter - Add Row After</p> <p>Ctrl+Down - Show dropdown for the current cell</p> <p>F2 - enter edit mode for the selected cell (So LEFT and RIGHT keys move the cursor in the editor field)</p> <p>Ctrl+P - show optional params for a selected action</p>"},{"location":"Guide/cheatsheet/#source-editor","title":"Source Editor","text":"<p>Ctrl+C - Copy</p> <p>Ctrl+V - Paste</p> <p>Ctrl+X - Cut</p> <p>Ctrl+A - Select All</p> <p>Ctrl + / - Comment/Uncomment selected block of JS code.</p> <p>Tab - Tabify Selection</p> <p>Shift+Tab - Untabify selection</p> <p>Ctrl+0 - Collapse all foldings</p> <p>Ctrl+1 - Collapse folding level 1</p> <p>Shift+Ctrl+1 - Expand folding level 1</p> <p>Ctrl+2 - Collapse folding level 2</p> <p>Shift+Ctrl+2 - Expand folding level 2</p> <p>Ctrl+3 - Collapse folding level 3</p> <p>Shift+Ctrl+3 - Expand folding level 3</p> <p>Ctrl+4 - Collapse folding level 4</p> <p>Shift+Ctrl+4 - Expand folding level 4</p> <p>F9 - Toggle breakpoint</p> <p>F12 - Find definition of the selected function/variable</p>"},{"location":"Guide/cheatsheet/#source-debugger","title":"Source Debugger","text":"<p>F5 - Continue executing script</p> <p>F11 - Step Into Function/Procedure</p> <p>Shift+F11 - Step out</p> <p>F10 - Step Over</p> <p>Shift+F5 - Terminate Script Execution</p>"},{"location":"Guide/cheatsheet/#recording-activity-dialog","title":"Recording Activity Dialog","text":"<p>Ctrl+1 - Verify element under cursor</p> <p>Ctrl+2 - Learn object under cursor</p> <p>Ctrl+3 - Finish</p> <p>Ctrl+5 - Show Spy</p>"},{"location":"Guide/cheatsheet/#execution-monitor","title":"Execution Monitor","text":"<p>Shift+Ctrl+F12 - Terminate Execution</p>"},{"location":"Guide/cheatsheet/#spy-uiautomation-java-accessible-managed","title":"Spy: UIAutomation, Java, Accessible, Managed","text":"<p>Ctrl+G - Start tracking / Stop tracking and show currently selected object properties</p>"},{"location":"Guide/cheatsheet/#web-spy","title":"Web Spy","text":"<p>Ctrl+G - Get snapshot Ctrl+T - Start/stop tracking</p>"},{"location":"Guide/cheatsheet/#special-shortcuts","title":"Special Shortcuts","text":"<p>Shift+Ctrl+E - Add Engine as a Sub-Test Shift+Ctrl+F5 - Generate Global Object Metadata: (shortcut only works in source editor with a file containing <code>SeSGlobalObject</code>).</p>"},{"location":"Guide/checkpoints/","title":"Checkpoints (aka Verification Points)","text":""},{"location":"Guide/checkpoints/#purpose","title":"Purpose","text":"<p>A Checkpoint is defined by two things:</p> <ol> <li>a location in the test execution path and</li> <li>a subset of AUT state. \u00a0</li> </ol> <p>Each time the checkpoint executes, the AUT state is compared to a predefined value. \u00a0Discrepancies are noted, and may show a regression in program behavior in the test execution report.</p>"},{"location":"Guide/checkpoints/#usage","title":"Usage","text":"<p>A checkpoint can be added in two ways:</p> <ol> <li>during recording, with the Verify Object Properties dialog, or</li> <li>by manually adding an Assertion to the test script.</li> </ol>"},{"location":"Guide/checkpoints/#see-also","title":"See Also","text":"<ul> <li>Recording</li> </ul>"},{"location":"Guide/client_performance_monitoring/","title":"Client Performance Monitoring","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p>"},{"location":"Guide/client_performance_monitoring/#concept-and-architecture","title":"Concept and Architecture","text":"<p>The purpose of this integration is to satisfy the following use case.</p> <p>The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level load test:</p> <ul> <li>How long does each transaction take whilst 1000 VUs are hitting the same system</li> <li>The user interface could be web, mobile or thick client (e.g. ERP system)</li> </ul> <p>The following describes the technical architecture that would need to be in place:</p> <p></p> <p>The process flow for the above architecture would be as follows:</p> <ol> <li>User schedules the performance test in SpiraTest.</li> <li>RemoteLaunch connected to the NeoLoad controller and SpiraTest initiates the start of the testing.</li> <li>The NeoLoad controller sends commands to the NeoLoad load generators to start the performance scenario.</li> <li>During the performance scenario, NeoLoad calls Rapise through its command-line to start a specific test</li> <li>At specific points in the Rapise function test (which is grouped into transactions), timing code in the Rapise script (see next section) will call the NeoLoad REST API to report back the timing for the transaction block.<ul> <li>The NeoLoad controller will need to correlate each of the blocks with the appropriate transaction in the performance scenario.</li> </ul> </li> <li>At the end of the performance test, RemoteLaunch will read the entire performance test and send back the results to SpiraTest.</li> </ol>"},{"location":"Guide/client_performance_monitoring/#neoload-global-object","title":"NeoLoad Global Object","text":"<p>Rapise has a global object named NeoLoad which is capable of sending client performance metrics to the NeoLoad controller.</p> <p></p> <p>NeoLoad will display the received data in a both tree and graph views.</p>"},{"location":"Guide/client_performance_monitoring/#neoload-tree-view","title":"NeoLoad Tree View","text":"<p>The root of the tree is the name of a script that was executed by Rapise. On the first level we have three groups:</p> <ul> <li>LG Performance \u2013 this is a folder of a load generator essential metrics captured by Rapise: CPU, Memory, Network Sent/Received bytes.</li> <li>Page Load \u2013 this folder contains nodes for each page and nested resource. Duration values are obtained using Window.performance structure. See also http://www.w3.org/TR/navigation-timing/#processing-model</li> <li>Transactions \u2013 this folder contains counters for transactions defined by a script.</li> </ul>"},{"location":"Guide/client_performance_monitoring/#graph-view","title":"Graph View","text":"<p>Each leaf node can be dragged to the graph view for visualization:</p> <p></p>"},{"location":"Guide/client_performance_monitoring/#performance-filters","title":"Performance Filters","text":"<p>Performance results obtained from different runs can be filtered using result filter on the toolbar.</p> <p></p> <p>You can open the Results Filter dialogs by pressing <code>\u2026</code> button.</p> <p></p> <ul> <li>Platform is a combination of hardware \u2013 OS. Hardware is passed by a user script, OS is determined by Rapise automatically. E.g. hardware1 \u2013 Microsoft Windows 8.1 Pro.</li> <li>Client Software is Rapise.</li> <li>Location is supplied by a script. E.g. location1.</li> <li>Script is a combination of script name and time stamp. E.g.</li> <li></li> </ul>"},{"location":"Guide/client_performance_monitoring/#neoload-object-api-reference","title":"NeoLoad Object API Reference","text":"<p>The methods of the global NeoLoad object are described on this page.</p>"},{"location":"Guide/client_performance_monitoring/#how-to-use","title":"How to Use","text":"<p>In order to send performance metrics to NeoLoad you need to add a sequence of calls to your script.</p> <p>First, connect to the NeoLoad. When this call is executed NeoLoad must be running a script, otherwise an error will be returned.</p> <pre><code>NeoLoad.CreateClient(\"hardware1\", \"location1\", \"Broadcom 802.11ac Network Adapter \\_2\");\n</code></pre> <p>Let\u2019s look at the following block:</p> <pre><code>NeoLoad.CaptureHostPerformance();\nNeoLoad.StartTransaction('T Home');\nNeoLoad.CaptureBrowserPerformance(SeS('Log\\_In').GetPageURL());\n//Click on Log In\nSeS('Log\\_In').DoClick();\nNeoLoad.CaptureBrowserPerformance(SeS('Username\\_').GetPageURL());\nNeoLoad.EndTransaction('T Home');\n</code></pre> <ul> <li>CaptureHostPerformance call sends immediate values of CPU, Memory and Network load to the NeoLoad controller.</li> <li>StartTransaction/EndTransaction calls define a transaction with name \u2018T Home\u2019. Upon EndTransaction call the duration of it is sent to the NeoLoad controller.</li> <li>CalculateBrowserPerformance call sends page load performance metrics to the NeoLoad controller.</li> </ul> <p>There is also a general call that can send any user-defined metric to the NeoLoad controller:</p> <pre><code>NeoLoad.CapturePerformanceValue(\"First Level Folder\", \"Transaction1|Duration\", \"milliseconds\", 120);\n</code></pre> <p>Components of the second parameters can be separated by |. It allows to add more levels to the tree.</p>"},{"location":"Guide/code_folding/","title":"Code Folding","text":""},{"location":"Guide/code_folding/#purpose","title":"Purpose","text":"<p>Code Folding allows you to hide or show blocks of code. These blocks have syntactic meaning, such as a function body, a class declaration, a loop, or a comment.</p>"},{"location":"Guide/code_folding/#usage","title":"Usage","text":"<p>Every javascript file opened in Rapise will display with hide and show buttons to the top left of their corresponding block. In the following screenshot, hide buttons are highlighted with green boxes; show buttons are highlighted with purple boxes:</p> <p></p>"},{"location":"Guide/code_folding/#see-also","title":"See Also","text":"<ul> <li>Source Editor</li> </ul>"},{"location":"Guide/code_helper/","title":"Code Completion","text":""},{"location":"Guide/code_helper/#purpose","title":"Purpose","text":"<p>Rapise provides Code Completion for class, method and field names.</p>"},{"location":"Guide/code_helper/#usage","title":"Usage","text":"<p>Begin typing a class, method, or field name. Press Ctrl+Space to open a list of possible completions.</p> <p></p>"},{"location":"Guide/code_helper/#advanced","title":"Advanced","text":"<p>Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However since JavaScript is fundamentally an un-typed language, for the code completion to work, there are some tips and tricks that you can use.</p> <p>Rapise scans for variable definitions when one saves the <code>.js</code> source file. So if anything goes wrong (no hints) then first thing is to save the file.</p> <p>One may define a variable as simple as:</p> <pre><code>var\u00a0p;\n</code></pre> <p>In this example <code>p</code> is just a variable with undefined type. It may be used as number, string or object. So Rapise has no idea of how to deal with it. So if you type a dot after \u00a0<code>p.</code> no code-completion window appears.</p> <p>There are several ways of giving Rapise a \"hint\" about the variable type:</p>"},{"location":"Guide/code_helper/#static-assignment","title":"Static Assignment","text":"<p>First, is static assignment. Suppose you specify some constant value when defining a variable:</p> <pre><code>var p = \"some string\";\n</code></pre> <p>In this case Rapise knows the type of <code>p</code>. So it would assist you when you type a dot <code>.</code> after <code>p</code>:</p> <p></p>"},{"location":"Guide/code_helper/#using-comments-to-suggest-the-type","title":"Using Comments to Suggest the Type","text":"<p>In some cases variable type is not clear from its definition or assignments is not static:</p> <pre><code>var\u00a0v1\u00a0=\u00a0input;\nvar\u00a0v2;\n</code></pre> <p>To deal with such cases the code should be instrumented. For example, if we know that input is string and v2 will be used as number then we may explain it to Rapise by placing variable type using special comment: <code>/**var_type*/</code> right together with var definition. It should be placed right either between <code>var</code> keyword and variable name or right after an assignment operation (<code>=</code>), if any. I.e.:</p> <pre><code>var\u00a0v1\u00a0=\u00a0/**string*/ input;\nvar\u00a0/**number*/ v2;\n</code></pre> <p>So now Rapise will be able to display the list of available methods and properties:</p> <p></p> <p>Another common case is a function parameter. If you have function that is defined:</p> <pre><code>function\u00a0my_func(patient_index,\u00a0patient_name)\n{\n}\n</code></pre> <p>The type of parameters <code>patient_index</code> and <code>patient_name</code> are not known, but may be explained in a similar way:</p> <pre><code>function\u00a0my_func(/**number*/ patient_index,\u00a0/**string*/ patient_name)\n</code></pre> <p>So it becomes known to Rapise:</p> <p></p> <p>Code completion for variable names is useful when you have multiple variables or function parameters and need to type them quickly. In this case Ctrl+Space key combination will bring up a list of variables and functions starting with just typed keyword.</p>"},{"location":"Guide/code_helper/#code-completion-for-objects","title":"Code Completion for Objects","text":"<p>If you type</p> <pre><code>SeS(\"&lt;object ID&gt;\").\n</code></pre> <p>A list of available actions and properties will be suggested for repository object with the given ID.</p> <p>Since Rapise 6.4 you may specify type of a dynamically created object as well.</p> <pre><code>var username = /**HTMLObject*/ Navigator.Find(\"//button[id='username']\");\n</code></pre> <p>Save the edited file to let Rapise re-parse it. Then you may type</p> <pre><code>username.\n</code></pre> <p>and Rapise will suggest actions and properties for the HTMLObject type.</p>"},{"location":"Guide/code_helper/#see-also","title":"See Also","text":"<ul> <li>Source Editor</li> </ul>"},{"location":"Guide/com_testing_support/","title":"COM Testing Support","text":""},{"location":"Guide/com_testing_support/#purpose","title":"Purpose","text":"<p>Microsoft's Component Object Model (COM) is a standard for communication between separately engineered software components (source). \u00a0Any object with a COM interface can be created and used remotely.</p>"},{"location":"Guide/com_testing_support/#usage","title":"Usage","text":""},{"location":"Guide/com_testing_support/#creating-a-com-object","title":"Creating a COM Object","text":"<p>You can create a COM object using Windows' ActiveXObject class. \u00a0Once the object is created, method invocation is the same as with any other object in your program. \u00a0The methods available will depend on the object's COM interface. \u00a0The following example shows how to create an instance of the Word application and open a file.</p> <pre><code>var doc = new ActiveXObject(\"Word.Application\");\ndoc.Documents.Open(wordFileName);\n</code></pre>"},{"location":"Guide/com_testing_support/#test-samples","title":"Test Samples","text":"<p>There are several test samples that show how to Unit Test application modules via COM interface:</p> <ul> <li>UsingMSWord</li> <li>UsingMSExcel</li> <li>UsingMSAccess</li> </ul>"},{"location":"Guide/com_testing_support/#see-also","title":"See Also","text":"<ul> <li>Learn more about COM.</li> <li>Learn more about ActiveXObject.</li> </ul>"},{"location":"Guide/command_line/","title":"Command Line","text":""},{"location":"Guide/command_line/#purpose","title":"Purpose","text":"<p>Rapise test scripts can be run from the command line.</p>"},{"location":"Guide/command_line/#usage","title":"Usage","text":""},{"location":"Guide/command_line/#using-playbat","title":"Using play.bat","text":"<p>Simplest way to run a test directly is:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\play.bat\" &lt;path_to_sstest_file&gt;\n</code></pre> <p>If you want to pass additional parameters as <code>JSON</code> then:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\play.bat\" &lt;path_to_sstest_file&gt; -config:LastConfig.json.user\n</code></pre> <p>In this case, the <code>LastConfig.json.user</code> file contains values from the last execution by Rapise itself, stored in the framework root. It contains the framework parameter values, such as:</p> <pre><code>{\n  \"Browser\": \"Selenium - Chrome\",\n  \"Mode\": \"Staging\"\n}\n</code></pre> <p>You may customize this <code>JSON</code> file and point to it, i.e.:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\play.bat\" &lt;path_to_sstest_file&gt; -config:CustomParams.json\n</code></pre> <p>It is also possible to point to a test case folder rather than to <code>Test.sstest</code>, i.e.:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\play.bat\" \"TestCases\\Author Management\\Create New Author\" -config:LastConfig.json.user\n</code></pre>"},{"location":"Guide/command_line/#using-sesexecutorjs","title":"Using SeSExecutor.js","text":"<p>The form of the command is:</p> <p><code>%windir%\\syswow64\\cscript.exe \"C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSExecutor.js\" &lt;path_to_sstest_file&gt; [evals*]</code></p> <p>where</p> <p>path_to_sstest_file is a path to sstest file, e.g. \u00a0\"C:\\Program Files\\Inflectra\\Rapise\\Samples\\SmarteATM\\SmarteATM.sstest\"</p> <p>evals (optional) is a statement like this:</p> <p>-eval:*<code>varname1</code>=*value1;<code>varname2</code>=value2;...</p> <p>varname is a global variable associated with an option in the Settings Dialog. \u00a0Global variables are prefixed with a g_. The global variables under the Execution and Recording headings can be found by clicking on the corresponding option in the Settings Dialog (see below):</p> <p></p> <p>Other variables include:</p> <ul> <li> <p><code>g_scriptPath</code></p> </li> <li> <p><code>g_reportPath</code></p> </li> <li> <p><code>g_objectsPath</code></p> </li> <li> <p><code>g_configPath</code></p> </li> <li> <p>any global variable defined in the JavaScript or RVL.</p> </li> </ul> <p>Exit Code: \u2022   0 indicates a pass \u2022   1 indicates failure</p>"},{"location":"Guide/command_line/#see-also","title":"See Also","text":"<ul> <li> <p>Settings Dialog</p> </li> <li> <p>KB17 Running a Rapise script from the command-line on a 64-bit machine</p> </li> </ul>"},{"location":"Guide/company__copyright/","title":"Company &amp; Copyright","text":"<p>This documentation and the software it describes is the proprietary and copyrighted intellectual property of Inflectra Corporation.</p> <p>\u00a9 All Rights Reserved. Rapise\u00ae, Inflectra\u00ae, SpiraTest\u00ae, SpiraTeam\u00ae and Spira\u2122 are either trademarks or registered trademarks of Inflectra Corporation.</p>"},{"location":"Guide/content_view/","title":"Content View","text":""},{"location":"Guide/content_view/#purpose","title":"Purpose","text":"<p>To view and edit files. \u00a0This includes the following file types:</p> <ul> <li> <p>RVL (<code>.rvl.xlsx</code>) files open in the RVL Editor</p> </li> <li> <p>JavaScript (<code>.js</code>) automated test script files.</p> </li> <li> <p>Report (<code>.trp</code>) files that open in the Report Viewer.</p> </li> <li> <p>Excel (<code>.xls</code>) files that can be displayed in the Spreadsheet Editor</p> </li> <li> <p>REST (<code>.rest</code>) web service definition files that open in the REST Editor.</p> </li> <li> <p>SOAP (<code>.soap</code>) web service definition files that open in the SOAP Editor.</p> </li> <li> <p>Analog Recording Files (<code>.arf</code>) that contain analog testing mouse clicks and coordinates.</p> </li> <li> <p>Manual test steps (<code>.rmt</code>) that open in the Manual Test Editor.</p> </li> </ul>"},{"location":"Guide/content_view/#how-to-open","title":"How to Open","text":"<p>Open a file using the Test Files View. \u00a0The file will open inside of the Content View.</p>"},{"location":"Guide/control_execution/","title":"Control Execution","text":""},{"location":"Guide/control_execution/#purpose","title":"Purpose","text":"<p>Execution Control allows you to manually direct the execution of the script.</p>"},{"location":"Guide/control_execution/#usage","title":"Usage","text":"<ol> <li>Set a Breakpoint where you want to take control of the execution.</li> <li>Use the buttons on the Debugger toolbar to step through the script.</li> </ol>"},{"location":"Guide/control_execution/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> <li>Debugger Toolbar</li> </ul>"},{"location":"Guide/convert_functional_to_load_tes/","title":"Convert Functional to Load Test","text":""},{"location":"Guide/convert_functional_to_load_tes/#jmeter","title":"JMeter","text":"<p>This section explains how to transform an existing test script written in Rapise into a performance scenario within the JMeter. Learn how to easily convert Rapise tests for HTTP/HTTPS applications into JMeter scripts based on the respective protocols. These scripts can then be executed by numerous virtual users (VUs) to simulate a significant load on the tested application.</p> <ul> <li>Video: Converting Rapise script into JMeter load scenario</li> </ul>"},{"location":"Guide/convert_functional_to_load_tes/#neoload","title":"NeoLoad","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p> <p>This aspect of the Rapise-NeoLoad integration describes the process for taking an existing test script written in Rapise and converting it seamlessly into a performance scenario in the NeoLoad load testing system. This feature allows you to convert Rapise tests for HTTP/HTTPS based applications into protocol-based NeoLoad scripts that can be executed by a large number of virtual users (VUs) that simulate a load on the application being tested.</p>"},{"location":"Guide/convert_functional_to_load_tes/#prerequisites","title":"Prerequisites","text":"<p>In order to use the integration with NeoLoad, you need to have the following:</p> <ul> <li>Rapise 5.0 or above</li> <li>NeoLoad 5.1 or above</li> </ul> <p>Both tools must be installed on the same Windows host. NeoLoad must have a license with Recording API enabled. The default trial version does not have this capability. The Rapise test needs to be testing an application that uses HTTP/HTTPs or other NeoLoad supported protocols.</p>"},{"location":"Guide/convert_functional_to_load_tes/#the-steps-for-converting-a-rapise-test","title":"The Steps for Converting a Rapise Test","text":""},{"location":"Guide/convert_functional_to_load_tes/#launch-neoload","title":"Launch NeoLoad","text":"<p>Open NeoLoad via the Start menu or using a command line:</p> <pre><code>c:\\Program Files (x86)\\NeoLoad 5.1\\bin\\NeoLoadGUI.exe\n</code></pre> <p></p>"},{"location":"Guide/convert_functional_to_load_tes/#create-or-open-existing-load-project","title":"Create or Open Existing Load Project","text":"<p>Use menu <code>File &gt; New</code> or <code>File &gt; Open</code>.</p> <p></p>"},{"location":"Guide/convert_functional_to_load_tes/#open-a-test-script-in-rapise-to-be-converted","title":"Open a Test Script in Rapise to be Converted","text":"<p>Inside Rapise, open the script you want to convert. Make sure the application it is testing is a web-based application using the HTTP/HTTPS protocols:</p> <p></p> <p>Ensure that the Internet Explorer HTML library is set in the test parameters.</p> <p></p>"},{"location":"Guide/convert_functional_to_load_tes/#open-conversion-dialog","title":"Open Conversion Dialog","text":"<p>From the main menu select <code>Tools &gt; Convert to NeoLoad</code>.</p> <p>This will display the NeoLoad convertor dialog. On this dialog box, set the following parameters:</p> <p></p> <p>Virtual User</p> <p>In this field, you need to enter the name of the virtual user to create in NeoLoad:</p> <ul> <li>The default value is \"VirtualUser\"</li> <li>If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented.</li> <li>If the name has invalid characters then they will be escaped as an underscore (_).</li> </ul> <p>Base Container</p> <p>This specifies the base container \u00a0where we want to start the recording (Init / Actions / End).</p> <ul> <li>The default value is Actions.</li> </ul> <p>Container/Business Transaction</p> <p>This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers.</p> <ul> <li>The default is no container.</li> <li>If the name is already used then it will be made unique by adding _1, _2, etc.</li> <li>If the name is empty then no container will be used.</li> </ul> <p>Detect Dynamic Parameters</p> <p>When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID).</p> <p>In the NeoLoad tree it looks this way:</p> <p></p>"},{"location":"Guide/convert_functional_to_load_tes/#press-convert-button","title":"Press Convert Button","text":"<p>After pressing Convert button Rapise will launch the test and NeoLoad will start capturing network traffic. When test playback is finished you\u2019ll see the dialog:</p> <p></p>"},{"location":"Guide/convert_functional_to_load_tes/#troubleshooting","title":"Troubleshooting","text":"<p>During conversion you may get a few error messages. This section provides a list of common messages and their solution.</p>"},{"location":"Guide/convert_functional_to_load_tes/#unable-to-connect-to-the-remote-server","title":"Unable to connect to the remote server","text":"<p>If you get this message, check that NeoLoad is running. Usually this message means that NeoLoad is not started or another application is using port 7400, preventing NeoLoad binding to it.</p>"},{"location":"Guide/convert_functional_to_load_tes/#no-project-is-open","title":"No project is open","text":"<p>If you get this message, check that a project is opened in NeoLoad.</p>"},{"location":"Guide/convert_functional_to_load_tes/#neoload-is-not-ready-for-recording","title":"NeoLoad is not ready for recording","text":"<p>If you get this message, it means that NeoLoad is in the recording state. To fix the issue, you need to stop the existing recording in NeoLoad.</p>"},{"location":"Guide/convert_functional_to_load_tes/#neoload-integration-settings","title":"NeoLoad Integration Settings","text":"<p>There are a few global options for the Rapise \u2013 NeoLoad integration. To reach them use menu <code>Settings &gt; NeoLoad Integration</code>.</p> <p></p> <p>This is the NeoLoad Settings dialog. Normally there is no any reason to change these settings, but for completeness they are described below:</p> <ul> <li>NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API</li> <li>NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy</li> <li>NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API</li> </ul>"},{"location":"Guide/create_a_new_test/","title":"Create a New Test","text":"<p>Creating a new Test may have three meanings.</p>"},{"location":"Guide/create_a_new_test/#create-a-new-test-case","title":"Create a New Test Case","text":"<p>Most common use case is adding a new test case to an existing testing framework.</p>"},{"location":"Guide/create_a_new_test/#create-a-new-testing-framework","title":"Create a New Testing Framework","text":"<p>Once you are about starting something big a new consider Creating a new testing framework.</p>"},{"location":"Guide/create_a_new_test/#or-creating-new-standalone-test","title":"Or Creating New Standalone Test","text":"<p>Select the <code>File &gt; Create New &gt; New Test</code> menu option. \u00a0The Create New Test dialog will appear. \u00a0Follow the instructions on this dialog.</p>"},{"location":"Guide/create_a_new_test/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> <li>Testing Framework</li> </ul>"},{"location":"Guide/create_new_test_dialog/","title":"Create New Test Dialog","text":""},{"location":"Guide/create_new_test_dialog/#purpose","title":"Purpose","text":"<p>The Create New Test Dialog allows you to create a new Rapise test case, testing framework, or standalone test. You can choose to connect to Spira and store the new test in the central test management system, or you can save the test locally.</p> <p>If the test is intended to be the root of a larger test framework, it is recommended to refer to KB 371. for further guidance.</p>"},{"location":"Guide/create_new_test_dialog/#framework-mode","title":"Framework Mode","text":""},{"location":"Guide/create_new_test_dialog/#starting-a-new-testing-framework","title":"Starting a New Testing Framework","text":"<p>Go to <code>File &gt; Create New &gt; Test Automation Framework</code> to create a new testing framework.</p>"},{"location":"Guide/create_new_test_dialog/#adding-a-test-case-to-a-testing-framework","title":"Adding a Test Case to a Testing Framework","text":"<p>Refer to the section on Creating a New Test Case.</p>"},{"location":"Guide/create_new_test_dialog/#single-test-mode","title":"Single Test Mode","text":"<p>In certain situations, such as quickly checking something or conducting proof of concept (POC) experiments, we often require individual tests. If your current test falls into this category, follow these steps to create a new test:</p> <p>Select <code>File &gt; Create New &gt; New Test</code>. This will initiate the creation process for a new test, as described below.</p>"},{"location":"Guide/create_new_test_dialog/#a-creating-in-spira","title":"(a) Creating in Spira","text":"<p>By default Rapise will ask you to save the new test into the Spira test management system:</p> <p></p> <p>If you do not plan on using Spira for managing your test scripts (or you are not able to connect when you want to create the test), you can click on the Create Locally... to just create the test case locally. You can always save to Spira later on.</p> <p>Assuming that you have already configured the connection to Spira, first you need to select the project in Spira. That will then display the test case folders and test cases in Spira:</p> <p></p> <p>If there is already a test case in Spira that has not already been linked to Rapise:</p> <p></p> <p>If you want to create a new test case in Spira to use, simply click New Test Case:</p> <p></p> <p>Then enter the name of the new test case and click OK. Once it has been created you can then select it in the test case list and click Create from Spira.</p> <p>Sometimes there is no existing folder inside Spira that makes sense to use. In which case you can first use the New Folder button to create an empty folder that new test cases can be created in:</p> <p></p> <p>Regardless of which option you choose, you need to select a kind of the test to proceed.</p>"},{"location":"Guide/create_new_test_dialog/#test-types","title":"Test Types","text":"<p>Rapise currently offers four types of tests:</p> <ul> <li>Basic: Use this type for testing desktop applications or any testing that does not involve web browsers or mobile devices.</li> <li>Manual: Select this type if you are creating or executing manual tests only.</li> <li>Mobile: Choose this type if you are testing applications running on mobile devices.</li> <li>Web: Opt for this type if you are testing web applications running in a web browser.</li> </ul>"},{"location":"Guide/create_new_test_dialog/#scripting-language","title":"Scripting Language","text":"<p>Once you have created the test, Rapise will ask you to choose the Scripting language (RVL or JavaScript).</p>"},{"location":"Guide/create_new_test_dialog/#b-creating-locally","title":"(b) Creating Locally","text":"<p>If you choose the option to Create Locally the following dialog box is displayed:</p> <p></p> <p>You need to enter the following information:</p> <ul> <li>The name of the new test - please enter the name of the new test that you wish to create.</li> <li>Folder - please choose the folder on your local computer that you wish to store the Rapise test in.</li> <li>What kind of test do you want to create? - there are currently four methodologies available in Rapise:<ul> <li>Basic - this should be used for testing desktop applications or any testing not involving web browsers or mobile devices.</li> <li>Manual - this should be selected if you are only going to be creating or executing manual tests</li> <li>Mobile - this should be selected if you are going to be testing apps running on mobile devices</li> <li>Web - this should be selected if you are going to be testing web applications running in a web browser.</li> </ul> </li> </ul> <p>Once you click on the kind of test, Rapise will ask you to choose the Scripting language (RVL or JavaScript). Once you have chosen the scripting language, the new test will be created and saved locally.</p>"},{"location":"Guide/create_sub_test_dialog/","title":"Create Sub-Test Dialog","text":""},{"location":"Guide/create_sub_test_dialog/#purpose","title":"Purpose","text":"<p>Create a sub-test.</p> <ul> <li> <p>New test should have own set of Objects: Uncheck it if you want to create a scenario re-using objects from parent test.</p> </li> <li> <p>New test should have own User-defined functions: Uncheck it if you want to create a scenario re-using utility functions from its parent test.The Sub-Test is always created inside the folder of its parent test. If parent test is saved to a new location then sub-test is also saved as a sub-folder of a new location.</p> </li> </ul>"},{"location":"Guide/create_sub_test_dialog/#how-to-open","title":"How to Open","text":"<p>Choose Create Sub-Test... in the context menu of a folder in Test Files view.</p>"},{"location":"Guide/cross_browser_testing/","title":"Cross Browser Testing","text":""},{"location":"Guide/cross_browser_testing/#choosing-the-browser-when-creating-a-test","title":"Choosing the Browser When Creating a Test","text":"<p>When you first create a Rapise test with the Methodology set to Web you will be asked to choose the initial web browser profile:</p> <p></p> <p>You can run your recording in a different browser than the one in which it was recorded.</p>"},{"location":"Guide/cross_browser_testing/#selecting-a-new-playback-browser","title":"Selecting a new Playback Browser","text":"<p>In the right top corner of Rapise window expand the dropdown with available browser.</p> <p></p> <p>Change the browser to either one of the Selenium WebDriver based browser profiles, or one of the native browsers such as Firefox, Internet Explorer or Chrome.</p> <p>Once you have changed this setting, Playback the script normally and it will playback in the selected browser.</p> <p>Changing this setting will effectively set the value of the <code>g_browserLibrary</code> global variable.</p> <p>Note</p> <p>In Rapise 6.3+ you may define local profiles.</p> <p>Important</p> <p>Since Rapise 7.3 it is recommended to use Selenium WebDriver based profiles for all web tests.</p>"},{"location":"Guide/cross_browser_testing/#playback-in-multiple-browsers","title":"Playback in Multiple Browsers","text":""},{"location":"Guide/cross_browser_testing/#using-framework-parameters","title":"Using Framework Parameters","text":"<p>Rapise 8</p> <p>In Rapise 8 and above the recommended way of multi-browser testing is via framework parameters.</p> <p>Check out the KB article: Rapise 8.0: how to run test cases on different browsers.</p>"},{"location":"Guide/cross_browser_testing/#using-input-data-table","title":"Using Input Data Table","text":"<p>Rapise 7</p> <p>In Rapise 7 the recommended way of multi-browser testing is via Input Data Table.</p> <p>Check out the webinar: Parallel Execution of Tests with Rapise &amp; SpiraTest.</p>"},{"location":"Guide/cross_browser_testing/#using-spiratest-and-test-case-parameters","title":"Using SpiraTest and Test Case Parameters","text":"<p>obsolete</p> <p>Executing a test in multiple browsers is slightly more complicated. We recommend that you use SpiraTest Test Sets where you may define multiple test cases pointing to the same Test with a different g_browserLibrary parameter value.</p> <p>See the SpiraTest Integration topic for detailed information.</p>"},{"location":"Guide/cross_browser_testing/#changing-browser-with-selectbrowserprofile","title":"Changing Browser with SelectBrowserProfile","text":"<p>obsolete</p> <p>You may use <code>Navigator.SelectBrowserProfile</code> as follows:</p> <pre><code>Navigator.SelectBrowserProfile(\"BROWSER PROFILE 1\");\nNavigator.Open('URL');\n...\nNavigator.Close();\n\nNavigator.SelectBrowserProfile(\"BROWSER PROFILE 2\");\nNavigator.Open('URL');\n...\nNavigator.Close();\n</code></pre> <p>Important</p> <p><code>Navigator.Close</code> is required to switch the browser.</p> <p>In RVL it will look like:</p> <p></p> <p>Or, the same using the Loop:</p> <p></p>"},{"location":"Guide/cross_browser_testing/#using-doinvoketest","title":"Using DoInvokeTest","text":"<p>obsolete</p> <p>To iterate through browsers in Rapise create a new test with Web methodology. </p> <p>Now add a reference to the Web test you want to run in different browsers. In the <code>Files</code> view right click the test node and choose <code>Add File(s)...</code>. Provide the path to <code>*.sstest</code> file. You will see the reference added to the <code>Files</code> view.</p> <p></p> <p>Drag the reference to the editor window. Rapise will generate <code>DoInvokeTest</code> call.</p> <p></p> <p>To execute a test with a given browser profile you need a pair of commands.</p> <pre><code>Navigator.SelectBrowserProfile(\"BROWSER PROFILE\");\nGlobal.DoInvokeTest('PATH TO THE TEST');\n</code></pre> <p>So to run the test in three different browsers we get the following content of the <code>Test.js</code>:</p> <pre><code>function Test(params)\n{\n    Navigator.SelectBrowserProfile(\"Selenium - Chrome\");\n    Global.DoInvokeTest('%WORKDIR%/../Web Testing 2/Web Testing 2.sstest');\n    Navigator.SelectBrowserProfile(\"Selenium - Edge\");\n    Global.DoInvokeTest('%WORKDIR%/../Web Testing 2/Web Testing 2.sstest');\n    Navigator.SelectBrowserProfile(\"Selenium - Firefox\");\n    Global.DoInvokeTest('%WORKDIR%/../Web Testing 2/Web Testing 2.sstest');\n}\n\ng_load_libraries=[\"Web\"];\n</code></pre> <p>In RVL it will look like:</p> <p></p>"},{"location":"Guide/css/","title":"Web Testing - Using CSS Selectors","text":""},{"location":"Guide/css/#purpose","title":"Purpose","text":"<p>When testing web applications you will often want to use Cascading Style Sheets (CSS) selectors to query the browser DOM for elements based on the scenario under test. This section explains how you can use CSS selectors with Rapise to make your browser testing more flexible and adaptive to changes on the screen.</p> <p>CSS is an alternative to XPath that is often better at selecting multiple elements from across different parts of the DOM Tree, unlike XPath which is strictly hierarchical. However since CSS is not always able to uniquely locate an object, when Rapise is used in recording mode, it will learn objects automatically using XPath.</p>"},{"location":"Guide/css/#css-fundamentals","title":"CSS Fundamentals","text":"<p>In CSS, selectors are patterns used to select the element(s) you want to style. Here are the different operators that you can use in CSS selectors:</p> <p>CSS Selector Reference</p> <p>One limitation (as compared to XPath) is that there is not a way to select an element based on its contents. So it would not be possible to locate a cell in a grid (for example) based on the contents of the cell. For that you would need to use XPath.</p>"},{"location":"Guide/css/#rapise-css-extensions","title":"Rapise CSS Extensions","text":""},{"location":"Guide/css/#prefix","title":"Prefix","text":"<p>Since Rapise uses XPath as its primary means of locating an HTML element, when you Learn an object using CSS, Rapise will prefix the Locator (listed under the XPath property for that object in the Object Tree) with <code>css=</code> to let Rapise know that the locator is actually using a CSS selector.</p> <pre><code>css=html\u00a0&gt;\u00a0body\u00a0&gt;\u00a0form#ctl01\u00a0&gt;\u00a0div:nth-of-type(3)\u00a0&gt;\u00a0div:first-of-type\n</code></pre>"},{"location":"Guide/css/#frames","title":"Frames","text":"<p>Web pages sometimes use HTML frames. The CSS works inside the frame contents. Rapise has a special syntax (that is not part of standard CSS) to combine multiple CSS statements into a single line:</p> <pre><code>css=frame[name='main']@@@css=a:nth-of-type(3)\n</code></pre> <p>The special statement <code>@@@</code> is used as a separator for CSS statements pointing to constituent frames.</p> <p>The top-level frame is found by name <code>main</code></p> <pre><code>frame[name='main']\n</code></pre> <p>Then the frame's contents is searched for the <code>&lt;a&gt;</code> element that is a 3d child of it's parent element.</p> <pre><code>a:nth-of-type(3)\n</code></pre> <p>Note</p> <p>Segments of a locator separated by <code>@@@</code> can be both xpath and css. For example the following locators are equivalent:</p> <pre><code>    css=frame[name='main']@@@css=a:nth-of-type(3)\n    //frame[@name='main']@@@//a[3]\n    //frame[@name='main']@@@css=a:nth-of-type(3)\n    css=frame[name='main']@@@//a[3]\n</code></pre>"},{"location":"Guide/css/#shadow-dom","title":"Shadow DOM","text":"<p>Another CSS extension is related to Shadow DOM. It's borders are typically closed for CSS. In such a case a locator for an element inside Shadow DOM has two parts separated by <code>@#@</code> delimiter. First part (can be XPATH or CSS) should point to the Shadow Root in the Light DOM. Second part (always CSS) should point to a child element of the Shadow Root. In the case of nested Shadow DOMs there will be multiple <code>@#@</code> delimiters.</p> <p>Example of a locator:</p> <p>automatically built by WebSpy <pre><code>/html/body[1]/section[1]/div/guid-generator[1]@#@css=input:first-of-type\n</code></pre> after manual editing <pre><code>//guid-generator@#@css=input\n</code></pre> or <pre><code>css=guid-generator@#@css=input\n</code></pre></p> <p>Find the example of a simple page with Shadow DOM on UI Testing Playground.</p>"},{"location":"Guide/css/#usage","title":"Usage","text":"<p>There are several different ways to use CSS selectors in Rapise.</p>"},{"location":"Guide/css/#in-web-spy","title":"In Web Spy","text":"<p>To most easily use CSS selectors in Rapise, we recommend using the Web Spy tool. Make sure that CSS edit is enabled:</p> <p></p> <p>If you enter in the CSS selector at the top, when you click Test </p> <p></p> <p>it will display all of the DOM elements that match the selector:</p> <p></p> <p>You can now refine the query to only find the items you want to test.</p>"},{"location":"Guide/css/#learning-objects","title":"Learning Objects","text":"<p>When you have created the query in the Web Spy that returns the HTML elements that you were expecting, you can click on the Learn button to learn that object. What this will do is create a new Rapise object in the Object Tree that maps to this specific CSS. That means that the \"object\" in Rapise is effectively a pointer to this specific CSS selector.</p> <p>For example, if you want to find a specific book in a grid of books by its CSS <code>class, style, ID</code> or other attribute, you can search using the appropriate CSS selector, then learn this object as Book_1 so that you can access it in your code as <code>SeS(\"Book_1\")</code>. Every time you call a function on Book_1, Rapise will use the learned CSS selector and use that to evaluate which HTML element in the web page to access.</p>"},{"location":"Guide/css/#dynamic-queries","title":"Dynamic Queries","text":"<p>In addition to learning objects based on specific CSS selector, there are a set of general functions that can be used to query for objects in the web page:</p> <pre><code>SeS('Book_Management').DoDOMQueryCss('tr td[data=book1]');\n</code></pre> <p>Will dynamically query for any HTML element that is a child of the learned Book Management object that matches the CSS selector. In this example it will look for any table cell in a table row that has the attribute <code>data=\"book1\"</code>.</p>"},{"location":"Guide/custom_libraries/","title":"Custom Libraries","text":""},{"location":"Guide/custom_libraries/#purpose","title":"Purpose","text":"<p>If your application doesn't work with the predefined Recording Libraries, you can create your own.</p>"},{"location":"Guide/custom_libraries/#usage","title":"Usage","text":"<p>Your library can provide Basic, Advanced or Full support for your application. \u00a0Basic support allows you to define a global object with common functionality. Advanced allows enables Learn of application-specific object types, write test scripts, and Playback your scripts. Full support allows you to Record as well.</p> <p>Create your library via <code>Create... &gt; User Lib...</code> menu.</p> <p></p>"},{"location":"Guide/custom_libraries/#basic-support","title":"Basic Support","text":"<p>Define one or many application-specific Global Objects.</p>"},{"location":"Guide/custom_libraries/#advanced-support","title":"Advanced Support","text":"<p>Add a Matcher Rule to the library for every object type in your application. The <code>SeSMatcherRule</code> includes information to identify the object and a set of behaviors.</p> <pre><code>var *yourApplicationRule* = new SeSMatcherRule(\n{\n \u00a0 \u00a0object_type: \"*yourAppObject*\",\n \u00a0 \u00a0classname: \"*yourAppFrame*\", //You can use a [regular expression](regular_expressions.md) here\n \u00a0 \u00a0behavior: [*yourAppBehavior*]\n})\n</code></pre> <p>Override Actions: Override actions in yourAppBehavior (above). The action definitions you provides will be used during Playback. Overriding actions does not affect recording.</p> <pre><code>var HTMLFirefoxBehavior =\n{\n    actions: [{\n \u00a0 \u00a0    actionName: \"Click\",\n \u00a0 \u00a0    DoAction: function(){}\n \u00a0 \u00a0},\n \u00a0 \u00a0{\n     \u00a0 \u00a0actionName: \"SetText\",\n \u00a0 \u00a0    DoAction: function(/**string*/ txt){}\n \u00a0 \u00a0}]\n }\n</code></pre>"},{"location":"Guide/custom_libraries/#full-support","title":"Full Support","text":"<p>Enable Recording: \u00a0You can enable recording in two ways. If your application notifies the Accessibility Events interface about application events, you can override events in the behavior section of SeSMatcherRules:</p> <pre><code>var newBehavior = {\n    actions: [{/*section deleted for brevity*/}],\n    events:\n    {\n     \u00a0 \u00a0OnSelect: function(/**SeSObject*/ param, /*boolean*/ badd)\n     \u00a0 \u00a0{\n            /*...*/\n \u00a0 \u00a0    },\n     \u00a0 \u00a0OnSelectAdd: function(/**SeSObject*/ param, /**boolean*/ badd)\n     \u00a0 \u00a0{\n            /*...*/\n     \u00a0 \u00a0}\n     }\n}\n\nvar newRule = new SeSMatcherRule({\n    object_type: \"someType\",\n \u00a0 \u00a0role: \"someRole\",\n \u00a0 \u00a0behavior: [newBehavior],\n })\n</code></pre> <p>Otherwise, you will have to implement Custom Recording.</p> <p>Custom Recording: With custom recording, it is the library's responsibility to:</p> <ul> <li>detect user actions in the application, and</li> <li>call RegisterAction() (which writes the action to the script).</li> </ul>"},{"location":"Guide/custom_libraries/#see-also","title":"See Also","text":"<ul> <li> <p>Tutorial: Custom Library</p> </li> <li> <p>Another Example of Creating a Custom Library</p> </li> <li> <p>To see what actions and events can be overridden, see SeSBehavior.js (in the Rapise Engine).</p> </li> <li> <p>Check the C:\\Program Files(x86)\\Inflectra\\Rapise\\Engine\\Lib directory as an example of rapise core libraries.</p> </li> <li> <p>You can alter the behavior of an action without creating an entire library. \u00a0See the Actions section for more details.</p> </li> </ul>"},{"location":"Guide/customizable_engine/","title":"Customizable Engine","text":""},{"location":"Guide/customizable_engine/#purpose","title":"Purpose","text":"<p>The source for most of the Rapise implementation is available for you to read and modify. \u00a0You may find it useful to look at if you decide to create a library customized for your application.</p>"},{"location":"Guide/customizable_engine/#usage","title":"Usage","text":"<p>Unless you specified otherwise, Rapise will be installed at</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\Rapise\\\n</code></pre> <p>The source code is in the Engine directory. \u00a0You'll find the recording/learning libraries in Engine\\Lib. \u00a0The core logic is in four files: SeSAction.js; SeSBehavior.js; SeSCommon.js; SeSConfig.js.</p> <p>Note: If you plan to make changes to the Rapise Engine, we recommend you use a version control system capable of reconciling code conflicts, as we do not support user customizations. \u00a0However, let us know if you feel that your customizations are generally useful; if we decide to integrate them into Rapise, we will support them.</p> <p>To add Engine to any of your tests use Ctrl+Shift+E shortcut.</p> <p></p> <p></p>"},{"location":"Guide/customizable_engine/#see-also","title":"See Also","text":"<p>\u2022   Custom Libraries \u2022   Scripting</p>"},{"location":"Guide/data_driven_testing/","title":"Data-Driven Testing (JavaScript)","text":""},{"location":"Guide/data_driven_testing/#purpose","title":"Purpose","text":"<p>Data Driven Testing is an automated testing technique in which test case data is separated from test case logic. \u00a0Each set of test case data consists of input values and a set of expected output values. \u00a0The actual output values are compared to the expected output values to determine whether the test passed.</p> <p>You can perform data-driven testing either using an MS-Excel spreadsheet as the datasource or a relational database.</p>"},{"location":"Guide/data_driven_testing/#using-an-ms-excel-spreadsheet","title":"Using an MS-Excel Spreadsheet","text":"<p>The Spreadsheet object is useful for implementing data-driven tests. It allows you to connect to, query, and read an excel spreadsheet from your test script. \u00a0To create a data-driven test, you will:</p>"},{"location":"Guide/data_driven_testing/#1-record-a-test","title":"1. Record a Test","text":"<p>The exact inputs you use for the recording will not matter as much as your interactions with the objects. \u00a0The following excerpt was recorded using www.google.com:</p> <p><pre><code>    function Test()\n    {\n        //Set Text Inflectra in q\n        SeS('Obj1').DoSetText(\"Inflectra\");\n        //Click on btnG\n        SeS('Obj2').DoClick();\n    }\n</code></pre> The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button.</p>"},{"location":"Guide/data_driven_testing/#2-parameterize-the-test-function","title":"2. Parameterize the Test() Function","text":"<p>The <code>Test()</code> function has all of the procedural logic for the test. \u00a0Replace input values with variables. \u00a0Encapsulate the logic in a nested function with one parameter for each variable you created. \u00a0As an example, we will parameterize the <code>Test()</code> function we created in step one:</p> <pre><code>function Test()\n{\n    function Logic(searchterm)\n    {\n        //our new function encapsulates the test logic\n        //Set Text using searchterm\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj1').DoSetText(searchterm) //here we changed a hard-coded value into a variable\n\u00a0 \u00a0 \u00a0 \u00a0 //Click on btnG\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj2').DoClick()\n\u00a0 \u00a0 }\n\u00a0 \u00a0 Logic(\"Inflectra\") //don't forget to call your new function\n}\n</code></pre>"},{"location":"Guide/data_driven_testing/#3-create-the-test-case-data","title":"3. Create the Test Case Data","text":"<p>Create a spreadsheet with name searchterms.xlsx. For this right click the test node and choose <code>Create &gt; Spreadsheet...</code>.</p> <p></p> <p>Enter the name and click <code>Create</code> button.</p> <p></p> <p>In the spreadsheet create a column for every variable in step two. \u00a0Add columns for any expected output values you wish to verify.\u00a0Each row is a test case. In our google example, we only have one input value (<code>searchterm</code>) and we're not comparing any expected output values, so we will only need one column in our spreadsheet.</p> <p></p>"},{"location":"Guide/data_driven_testing/#4-attach-spreadsheet-object-to-searchtermsxlsx","title":"4. Attach Spreadsheet Object to searchterms.xlsx","text":"<p>Drag the searchterms.xlsx from files tree into appropriate place in your test source:</p> <p></p>"},{"location":"Guide/data_driven_testing/#5-use-spreadsheet-to-access-the-test-case-data","title":"5. Use Spreadsheet to Access the Test Case Data","text":"<p>In our example, we use a Spreadsheet object and run the test logic once for every row.</p> <pre><code>function Test()\n{\n\u00a0 \u00a0 function Logic(searchterm)\n    {\n\u00a0 \u00a0 \u00a0 \u00a0 //Set Text searchterm in q\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj1').DoSetText(searchterm)\n\u00a0 \u00a0 \u00a0 \u00a0 //Click on btnG\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj2').DoClick()\n\u00a0 \u00a0 }\n\n    Spreadsheet.DoAttach('%WORKDIR%/searchterms.xlsx');\n\n\u00a0 \u00a0 // Go through all rows\n\u00a0 \u00a0 while(Spreadsheet.DoSequential())\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 // Read cell value from column 0\n\u00a0 \u00a0 \u00a0 \u00a0 var term = Spreadsheet.GetCell(0);\n\u00a0 \u00a0 \u00a0 \u00a0 // Pass it into Logic function\n  \u00a0 \u00a0 \u00a0 Logic(term);\n\u00a0 \u00a0 }\n}\n</code></pre>"},{"location":"Guide/data_driven_testing/#using-a-relational-database","title":"Using a Relational Database","text":"<p>Rapise comes with the Database query global object that allows you to send SQL queries to a database and then iterate through the results. The process for creating such a data-driven test is as follows:</p>"},{"location":"Guide/data_driven_testing/#1-record-a-test_1","title":"1. Record a Test","text":"<p>The exact inputs you use for the recording will not matter as much as your interactions with the objects. \u00a0The following excerpt was recorded using www.google.com:</p> <p><pre><code>    function Test()\n    {\n        //Set Text Inflectra in q\n        SeS('Obj1').DoSetText(\"Inflectra\");\n        //Click on btnG\n        SeS('Obj2').DoClick();\n    }\n</code></pre> The actions recorded were: (1) Type Inflectra into the search box. (2) Press the Google Search button.</p>"},{"location":"Guide/data_driven_testing/#2-parameterize-the-test-function_1","title":"2. Parameterize the Test() Function","text":"<p>The <code>Test()</code> function has all of the procedural logic for the test. \u00a0Replace input values with variables. \u00a0Encapsulate the logic in a nested function with one parameter for each variable you created. \u00a0As an example, we will parameterize \u00a0the <code>Test()</code> function we created in step one:</p> <pre><code>function Test()\n{\n    function Logic(searchterm)\n    {\n        //our new function encapsulates the test logic\n        //Set Text using searchterm\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj1').DoSetText(searchterm) //here we changed a hard-coded value into a variable\n\u00a0 \u00a0 \u00a0 \u00a0 //Click on btnG\n\u00a0 \u00a0 \u00a0 \u00a0 SeS('Obj2').DoClick()\n\u00a0 \u00a0 }\n\u00a0 \u00a0 Logic(\"Inflectra\") //don't forget to call your new function\n}\n</code></pre>"},{"location":"Guide/data_driven_testing/#3-use-database-to-connect-the-test-case-data","title":"3. Use Database to Connect the Test Case Data.","text":"<p>This assumes that you already have an ODBC or OLE DB compatible relational database that contains the necessary test data. You drag the <code>Database</code> global object into the script editor:</p> <p></p> <p>and then use:</p> <ul> <li>Database.DoAttach() - to make the database connection and specify the SQL query</li> <li>Database.GetRowCount() - to verify that there is data</li> <li>Database.DoSequential() - to loop through the data set row by row</li> <li>Database.GetValue() - to get that row's data</li> </ul> <p>Here is an example of the code needed to loop through a list of records (taken from the SpiraTest database as an example) and call our <code>Logic()</code> parameterized function with the appropriate test data:</p> <pre><code>var success = Database.DoAttach('Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=SpiraTest;Data Source=.' , 'SELECT * FROM TST_PROJECT' );\nTester.Assert('Successfully Connected', success);\n\nvar count = Database.GetRowCount();\nTester.Message(count);\n\n//Loop through the rows\nwhile(Database.DoSequential())\n{\n\u00a0   var projectId = Database.GetValue(\"PROJECT_ID\" );\n\u00a0   var name = Database.GetValue( \"NAME\");\n\u00a0   var description = Database.GetValue(\"DESCRIPTION\" );\n\u00a0   Logic(name);\n}\n</code></pre>"},{"location":"Guide/data_driven_testing/#see-also","title":"See Also","text":"<ul> <li>KB357 Data-driven testing with spreadsheets and RVL</li> <li>KB317 Read external Excel spreadsheet in RVL</li> <li>The Connection Strings Reference</li> </ul>"},{"location":"Guide/ddt/","title":"Data-Driven Testing","text":"<p>Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes.  You will also learn how to define data within a test and in an external spreadsheet.</p>"},{"location":"Guide/ddt/#ddt-in-rvl","title":"DDT in RVL","text":"<p>Let's start from RVL mode first. With RVL you can delegate low-level complex automation tasks to a developer team and focus on testing scenarios and data used to fill forms and tables.</p>"},{"location":"Guide/ddt/#embedded-data","title":"Embedded Data","text":"<p>First, define data schema. In the Flow column of RVL spreadsheet choose Map.</p> <p></p> <p>Then hit Tab on the keyboard and Rapise will generate a template for the data table.</p> <p></p> <p>Give this new map a name and define columns and initial set of rows with values.</p> <p></p> <p>In our example the map has name <code>Data</code> and it has three columns: <code>FirstName</code>, <code>LastName</code> and <code>Company</code>. It also has two rows with data values.</p> <p>Now in our test we can just use the map and refer to it's columns by name.</p> <p></p> <p>Data becomes one of parameter types.</p> <p></p> <p>And when Data is selected as a parameter type then column names are available in the drop down.</p> <p></p> <p>Now our RVL looks like this.</p> <p></p> <p>Execution of the test produces the report. The test simply prints first line of the data table.</p> <p></p> <p>The data table we just created is an object in Rapise object repository and it has actions. With actions one can manipulate active row and column index and read arbitrary data from the table.</p> <p></p> <p>For the detailed description of actions one can do upon data tables refer to Map Object reference.</p> <p>Let's advance to next row in our table before printing values.</p> <p></p> <p>After execution the report displays data from the second row.</p> <p></p>"},{"location":"Guide/ddt/#excel-data","title":"Excel Data","text":"<p>Now we are ready to put data into external spreadsheet. Let's create one. In the <code>Files</code> view right click <code>Scripts</code> folder and choose <code>Create &gt; Spreadsheet...</code></p> <p></p> <p>We'll go with default options.</p> <p></p> <p>Rapise has built-in spreadsheet editor and you do not need Excel to be installed on the machine.</p> <p></p> <p>Let's bind to this spreadsheet in RVL. Insert a line below <code>Data</code> map we created in previous section. In the <code>Flow</code> column choose <code>Map</code> and then set map type to <code>Range</code>.</p> <p></p> <p>Give the map same name Data and make sure that it references Data.xlsx which we just created.</p> <p></p> <p>Running the test. Now data is taken from the <code>Data.xlsx</code>. Notice that in <code>Data.xlsx</code> we named columns same way as in the previous section.</p> <p></p> <p>If we'll do a loop with Data map Rapise will iterate through all lines on execution.</p> <p></p> <p></p>"},{"location":"Guide/ddt/#ddt-in-javascript","title":"DDT in JavaScript","text":"<p>One can read data from a spreadsheet in JavaScript mode as well.  There is a global Spreadsheet object that is available in every test. Here is an example of Spreadsheet API usage.</p> <pre><code>Spreadsheet.DoAttach('Calc.xls', 'Calc Data');\nwhile(Spreadsheet.DoSequential())\n{\n    EnterNumber(Spreadsheet.GetCell(\"Item1\"));\n    Operation(Spreadsheet.GetCell(\"Operation\"));\n    EnterNumber(Spreadsheet.GetCell(\"Item2\"));\n\n    SeS('ResultButton').DoAction();\n\n    Tester.Assert( '' + Spreadsheet.GetCell(\"Item1\") + \n                   Spreadsheet.GetCell(\"Operation\") + \n                   Spreadsheet.GetCell(\"Item2\") + '=' +\n                   Spreadsheet.GetCell(\"Result\"),\n                   CheckResult(Spreadsheet.GetCell(\"Result\")));\n}\n</code></pre> <p>Description of all Spreadsheet actions and properties is available here.</p> <p>Open <code>UsingSpreadsheet</code> sample test from the start page to see a working example (scroll the list of samples down).</p> <p></p>"},{"location":"Guide/ddt/#see-also","title":"See Also","text":"<ul> <li>Data-Driven Testing (webinar)</li> <li>How To: Easily Attaching RVL Script to an External Spreadsheet in Rapise (watch video)</li> <li>KB432 Writing data to an Excel spreadsheet</li> <li>KB27 Using Rapise to extract test data from an Excel sheet </li> <li>Blog:  Data Driven Testing using the Spreadsheet object (JavaScript)</li> <li>Data-driven testing tutorial (JavaScript)</li> <li>Parameters and Configurations</li> </ul>"},{"location":"Guide/deal_with_a_simulated_object/","title":"Deal with a Simulated Object","text":""},{"location":"Guide/deal_with_a_simulated_object/#sample-application","title":"Sample Application","text":"<p>The color box of Microsoft's Paint utility is a compound object that contains color tiles surrounded by a containing box. To understand this completely, start <code>mspaint.exe</code> from the Rapise.</p> <p>Steps:</p> <ol> <li>Open a new test under Rapise.</li> <li>Press the <code>Record</code> button on the application bar.</li> <li> <p>When the Select an Application to Record dialog appears, select the Run Application tab. Enter <code>mspaint</code> in the Full path to application edit box. \u00a0Press the <code>Run</code> button.</p> <p>If you are unfamiliar with MS Paint, take a few minutes to play with it. In particular, notice the color selection box that appears on the upper-right of the application window.</p> <p></p> </li> <li> <p>Press <code>Ctrl+5</code> to spy on the UI. \u00a0Press Ctrl+G to spy on the Paint application. Notice several things about the behavior of the MS Paint application under the Object Spy.</p> <ol> <li>As you move the mouse inside the color box, the entire surrounding box will show a red highlight but the individual color tiles will not.</li> <li>Properties of the color box control have no clues on how to find a particular color.</li> </ol> </li> </ol> <p>This combination makes it impossible for Rapise to identify and learn the colors as integral objects.</p> <p>The way in which Rapise can be taught to deal with the color box is by \"simulating\" it.</p> <p>In fact, Rapise will recognize these non-objects without you having to take particular action. \u00a0Let's discover this and what it means:</p> <ol> <li>Open a new test under Rapise; call it <code>MSPaint</code>.</li> <li>Press the <code>Record</code> button on the application bar.</li> <li>When the Select an Application to Record dialog appears, clear all selection boxes in the library list box. \u00a0You will have to scroll that section of the dialog box to make sure all selections are clear. \u00a0We are choosing no loaded libraries so that Rapise will not be able to \"cheat\" and know about any objects on the screen.</li> <li>Select the Run Application tab. \u00a0Enter <code>mspaint</code> in the Full path to application edit box. \u00a0Press the <code>Run</code> button.     &gt; Note: Applications that reside in <code>C:\\windows\\system32</code> can be started by their names because <code>C:\\windows\\system32</code> must be in the system path.</li> <li>When the Recording Activity dialog is displayed, press Learn Ctrl+2</li> <li>Do a small amount of things in Paint. \u00a0For example:<ol> <li>Click on the red color in the palette.</li> <li>Click on the green color in the palette.</li> <li>Click on the blue color in the palette.</li> </ol> </li> <li> <p>Look at the Recording Activity dialog grid. \u00a0It will be something like this:</p> <p></p> <p>Notice that the three clicks in the color box were recorded as simulated objects.</p> </li> <li> <p>Press Ctrl+3 to end the recording.</p> </li> </ol>"},{"location":"Guide/deal_with_a_simulated_object/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/defining_functions/","title":"Defining Functions","text":""},{"location":"Guide/defining_functions/#purpose","title":"Purpose","text":"<p>The Rapise test script is in JavaScript. You may define as many JavaScript functions as you would like to call from your test script.</p>"},{"location":"Guide/defining_functions/#usage","title":"Usage","text":"<p>There are three ways to maintain additional functions: (1) In <code>Common.js</code> (2) Inside your test script and (3) in an external file.</p>"},{"location":"Guide/defining_functions/#inside-your-test-script","title":"Inside your Test Script","text":""},{"location":"Guide/defining_functions/#in-commonjs","title":"In Common.js","text":"<p>Preferred way is to have a testing framework and with shared file. Its default name <code>Common.js</code> although you may have other files marked with <code>shared</code> tag and thus being automatically loaded during playback and shown in the shared node.</p> <p></p>"},{"location":"Guide/defining_functions/#in-userjs","title":"In User.js","text":"<p>It is recommended to put test case specific functions into <code>User.js</code> file available in any test from its creation (in most cases it is not needed and <code>Common.js</code> is preferred:</p> <p></p> <p>This file is automatically attached into every script. All variables and functions defined in it may be used in the test. User-defined functions are also available under the Functions node in the Object Tree:</p> <p></p> <p>You may also open <code>User.js</code> from the Files Tree:</p> <p></p>"},{"location":"Guide/defining_functions/#in-an-external-file","title":"In an External File","text":"<p>You can define your function in another file and include it. Although more common is to include external files into <code>Common.js</code> or into <code>User.js</code>:</p> <p>For example:</p> <pre><code>External.js:\n\n// Withdraw is defined inside the \"Test\" function\nfunction Withdraw(amount)\n{\n    Log(\"Start Withdraw of:\"+amount);\n\u00a0 \u00a0 // Withdraw logic is here\n}\n\nMain.js:\n\nfunction Test()\n{\n\n    eval(File.Include('External.js'));\n\n\u00a0 \u00a0 Withdraw(12.34);\n\u00a0 \u00a0 // Deposit is defined in \"UtilityFunctions.js\"\n    Deposit(56.78);\n}\n</code></pre>"},{"location":"Guide/defining_functions/#see-also","title":"See Also","text":"<ul> <li>To learn more about what the Script Recorder will change in your test script, see Multiple Recordings.</li> </ul>"},{"location":"Guide/detecting_the_presence_of_an_o/","title":"Detecting the presence of an object","text":"<p>Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this.</p>"},{"location":"Guide/detecting_the_presence_of_an_o/#recommended-solution","title":"Recommended Solution","text":"<p>You can use the special <code>Global.DoWaitFor('object id')</code> command to perform the check:</p> <pre><code>if(Global.DoWaitFor('Object ID'))\n{\n    // Object is available\n}\nelse\n{\n    // Object is not available\n}\n</code></pre>"},{"location":"Guide/detecting_the_presence_of_an_o/#see-also","title":"See Also","text":"<ul> <li>Global.DoWaitFor</li> <li>How-Tos</li> </ul>"},{"location":"Guide/dialog_add_web_service/","title":"Add New Web Service Dialog","text":""},{"location":"Guide/dialog_add_web_service/#screenshot","title":"Screenshot","text":""},{"location":"Guide/dialog_add_web_service/#purpose","title":"Purpose","text":""},{"location":"Guide/dialog_add_web_service/#framework-mode","title":"Framework Mode","text":"<p>You have the option to add a REST or SOAP web service to the currently active Test Case or Module/Page Object in the editor. The term \"current\" refers to the item that is currently selected or being edited.</p> <p>Here are the corresponding images:</p> <p></p> <p>When you access Tools / Web Services, it will display the correct path:</p> <p></p> <p>Once the service is created, it will be available under the Services node:</p> <p></p> <p>Note</p> <p>If there is no currently active Test Case or Page Object, the endpoint will be added to the root of the framework. In such cases, it is recommended to make it shared for reusability.</p>"},{"location":"Guide/dialog_add_web_service/#single-test-mode","title":"Single Test Mode","text":"<p>Adds a new REST or SOAP web service to your Rapise test. It adds the web service as a <code>.rest</code> or <code>.soap</code> file that is added to the Services folder of the Files section:</p> <p></p>"},{"location":"Guide/dialog_add_web_service/#how-to-open","title":"How to Open","text":"<p>Click on the <code>Tools &gt; Web Services</code> menu item.</p> <p></p>"},{"location":"Guide/dialogs_views_menus/","title":"Dialogs, Views, and Menus","text":"<p>This section details the Rapise GUI. \u00a0Each subsection describes the function of a particular Dialog, View, or Menu. The purpose and consequences of all buttons, options, lists, and check boxes are listed.</p> <ul> <li>A - I:<ul> <li>Add Web Service Dialog</li> <li>Browser Settings Dialog</li> <li>Content View</li> <li>Create New Test Dialog</li> <li>Create Sub-Test Dialog</li> <li>Choose Test Case</li> <li>Choose Parameters</li> <li>Enter Filter Criteria For... Dialog</li> <li>Errors View</li> <li>Find and Replace Dialog</li> <li>Find Results View</li> <li>Find Text dialog</li> <li>Image Capture</li> </ul> </li> <li>M - R:<ul> <li>Manual Playback</li> <li>Manual Test Editor</li> <li>Main Menu</li> <li>Mobile Settings Dialog</li> <li>Mobile Test Locator Dialog</li> <li>NameValue Collection Editor Dialog</li> <li>Object Tree View</li> <li>Options Dialog</li> <li>Output View</li> <li>Properties Dialog</li> <li>Recording Activity Dialog</li> <li>Replace Text Dialog</li> <li>Report Viewer</li> <li>REST Definition Editor</li> <li>RVL Editor</li> </ul> </li> <li>S - Z:<ul> <li>Scripting Choice Dialog</li> <li>Select an Application to Record... Dialog</li> <li>Selenium Settings Dialog</li> <li>Test Settings Dialog</li> <li>SOAP Definition Editor</li> <li>Source Editor</li> <li>Spira Dashboard</li> <li>Spira Properties Dialog</li> <li>Spreadsheet Editor</li> <li>Spy Dialog</li> <li>Start Page</li> <li>Test Files View</li> <li>Toolbar: REST</li> <li>Toolbar: SOAP</li> <li>Toolbar: Spreadsheet</li> <li>Variable/Call Stack View</li> <li>Verify Object Properties Dialog</li> <li>Warning View</li> <li>Watch View</li> <li>Web Spy Settings</li> </ul> </li> </ul>"},{"location":"Guide/dll_testing/","title":"DLL Testing","text":""},{"location":"Guide/dll_testing/#purpose","title":"Purpose","text":"<p>You can create objects and invoke methods from both managed and unmanaged dlls.</p>"},{"location":"Guide/dll_testing/#usage","title":"Usage","text":"<p>Rapise provides API calls to work with managed DLLs. The Windows object WScript can be used with unmanaged DLLs.</p>"},{"location":"Guide/dll_testing/#managed-dlls","title":"Managed DLLs","text":"<ul> <li>Util.InvokeMember - Invoke a class method in a managed DLL.</li> <li>Util.CreateClassInstance - Creates an instance of a class in a managed DLL.</li> <li>Util.SetFieldValue - Sets a field value in an object created with CreateClassInstance.</li> </ul>"},{"location":"Guide/dll_testing/#unmanaged-dlls","title":"Unmanaged DLLs","text":"<ul> <li>WScript.CreateObject(\"DynamicWrapper\") - Create a DynamicWrapper object.</li> </ul> <p>The Register and ShellExecute methods of the DynamicWrapper object can be used to invoke DLL methods as in the following example:</p> <pre><code>var UserWrap = WScript.CreateObject(\"DynamicWrapper\");\nUserWrap.Register(\"shell32.dll\", \"ShellExecute\", \"I=hssssl\", \"f=s\", \"r=l\");\nUserWrap.Register(\"USER32.DLL\", \"MessageBoxA\", \"I=HsSu\", \"f=s\", \"R=l\");\nUserWrap.MessageBoxA( null, \"\" + elapsed, \"Time Elapsed:\", \u00a00x30 );\n</code></pre>"},{"location":"Guide/dll_testing/#test-samples","title":"Test Samples","text":"<p>There are two test samples that illustrate working with DLLs:</p> <ul> <li>UsingDLLHandlerManaged</li> <li>UsingDLLHandlerUnManaged</li> </ul>"},{"location":"Guide/dll_testing/#see-also","title":"See Also","text":"<ul> <li>More information on the WScript object</li> </ul>"},{"location":"Guide/do_absolute_analog_recording/","title":"Do Absolute Analog Recording","text":"<p>Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording.</p>"},{"location":"Guide/do_absolute_analog_recording/#run-the-twodialogs-sample-aut","title":"Run the TwoDialogs sample AUT","text":"<p>By default this will be located in the</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre> <p>location.</p>"},{"location":"Guide/do_absolute_analog_recording/#create-new-test","title":"Create New Test","text":"<p>Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute.</p>"},{"location":"Guide/do_absolute_analog_recording/#start-recording","title":"Start Recording","text":"<p>Press the <code>Record</code> button in the toolbar of Rapise.</p>"},{"location":"Guide/do_absolute_analog_recording/#select-an-application-to-record","title":"Select an Application to Record","text":"<p>When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. \u00a0Press the <code>Select</code> button.</p>"},{"location":"Guide/do_absolute_analog_recording/#the-recording-activity-dialog","title":"The Recording Activity Dialog","text":"<p>The Recording Activity Dialog will be displayed with an empty grid.</p> <p>This recording session is going o be a little different from previous sessions. \u00a0Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. \u00a0However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. \u00a0This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. \u00a0However, note also that screen contents are not recorded by Rapise.</p>"},{"location":"Guide/do_absolute_analog_recording/#bring-the-application-to-front","title":"Bring the Application To Front","text":"<p>If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording.</p>"},{"location":"Guide/do_absolute_analog_recording/#start-analog-recording","title":"Start Analog Recording","text":"<p>When you're ready to record the session, hit Ctrl+4 on the Recording Activity dialog. You will need to click on the <code>Advanced</code> button to display the <code>Analog</code> button.</p> <p></p> <p>Note: Pressing the Analog button on the Recording Activity dialog starts a relative analog recording session. \u00a0Use the Ctrl+4 key sequence to start the absolute analog recording session.</p> <p>Rapise will begin recording all mouse and keyboard activity until you stop the recording.</p> <p>Note also that the prompt in the notification/status area of the Recording Activity dialog is different from that for relative analog. It tells you that Your mouse and keyboard activity is now being recorded.</p> <p>Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording.</p> <p></p>"},{"location":"Guide/do_absolute_analog_recording/#do-analog-recording","title":"Do Analog Recording","text":"<p>Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording.</p> <p>Click the mouse on the empty \"Please enter your name\" text box.</p> <p>Type a name in the text box.</p> <p>Hit the <code>TAB</code> key or click the left mouse button to advance the input position to the second text box.</p> <p>Type another name.</p> <p>Move the mouse to the OK button and press the mouse left button.</p>"},{"location":"Guide/do_absolute_analog_recording/#stop-analog-recording","title":"Stop Analog Recording","text":"<p>When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl+Break.</p> <p>Note: If you use the <code>Close</code> button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the <code>Close</code> button will be recorded as part of the analog recording output. \u00a0This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. \u00a0For this reason, Ctrl+Break is probably a better option to terminate analog recording.</p> <p>Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid.</p> <p></p>"},{"location":"Guide/do_absolute_analog_recording/#optional-steps","title":"Optional Steps","text":"<ul> <li>You can now record additional analog sessions, if you wish.</li> <li>You can record normal object activity before and/or after the analog recording. </li> </ul>"},{"location":"Guide/do_absolute_analog_recording/#stop-recording","title":"Stop Recording","text":"<p>When you have finished all recording press the <code>Finish</code> button or hit Ctrl+3. \u00a0Notice that the Analog entry is added to the grid.</p> <p>The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with <code>TwoDialogsAnalogAbsolute.js</code> script displayed. You should see code something like the following:</p> <pre><code>//Plays recorded events from \"Analog\\\\Analog0003.arf\" file\nSeS('Simulated').DoAnalogPlay(\"Analog\\\\\\\\Analog0003.arf\");\n</code></pre>"},{"location":"Guide/do_absolute_analog_recording/#playback","title":"Playback","text":"<p>Press the <code>Play</code> button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back.</p> <p>Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. \u00a0The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog or at the last action before you pressed Ctrl+Break.</p> <p>When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. \u00a0Play the recording again, and watch the operation unfold. \u00a0The most important thing to realize is that the absolute analog recording will playback the recording wherever the application is positioned on the screen wherever the AUT was positioned when you made the recording. \u00a0Absolute analog recording records relative to the top-left corner of the system screen. Try this for yourself, but be sure to minimize all applications before starting.</p>"},{"location":"Guide/do_absolute_analog_recording/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/do_relative_analog_recording/","title":"Do Relative Analog Recording","text":"<p>Let's once again use our trusty over-simplified TwoDialogs sample application to learn how to use absolute analog recording and use it to discover the value as well as the dangers associated with absolute analog recording.</p>"},{"location":"Guide/do_relative_analog_recording/#run-the-twodialogs-sample-aut","title":"Run the TwoDialogs sample AUT","text":"<p>By default this will be located in the</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre> <p>location.</p>"},{"location":"Guide/do_relative_analog_recording/#create-new-test","title":"Create New Test","text":"<p>Start Rapise and create a new test and call it TwoDialogsAnalogAbsolute.</p>"},{"location":"Guide/do_relative_analog_recording/#start-recording","title":"Start Recording","text":"<p>Press the <code>Record</code> button in the toolbar of Rapise.</p>"},{"location":"Guide/do_relative_analog_recording/#select-an-application-to-record","title":"Select an Application to Record","text":"<p>When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and ignore the library list - we will not be using any library for analog recording. \u00a0Press the <code>Select</code> button.</p>"},{"location":"Guide/do_relative_analog_recording/#the-recording-activity-dialog","title":"The Recording Activity Dialog","text":"<p>The Recording Activity Dialog will be displayed with an empty grid.</p> <p>This recording session is going o be a little different from previous sessions. \u00a0Previously we could interrupt our object-related recording/learning with other activities and because Rapise was recording activity related only to the target application, our recording or object learning would be unaffected. \u00a0However, in analog recording, Rapise is monitoring the mouse and keyboard for the entire system - for all applications. \u00a0This means that if you answer an email in the middle of analog recording, or log in to a secure system, all the steps including mouse movement, keystrokes, etc., will all be recorded. \u00a0However, note also that screen contents are not recorded by Rapise.</p>"},{"location":"Guide/do_relative_analog_recording/#bring-the-application-to-front","title":"Bring the Application To Front","text":"<p>If the TwoDialogs UI has been occluded, bring it back to the front so you don't have to hunt for it when you start recording.</p>"},{"location":"Guide/do_relative_analog_recording/#start-analog-recording","title":"Start Analog Recording","text":"<p>When you're ready to record the session, hit the <code>Analog</code> button on the Recording Activity dialog.</p> <p>Note: The key sequence Ctrl+4 starts an absolute analog recording session. Press the <code>Analog</code> button to start the relative analog recording session.</p> <p>When you press the Analog button, two things will happen. Firstly, the status bar of the Recording Activity dialog will change to read, Click on object to start analog recording.</p> <p></p> <p>After the next mouse click, Rapise is recording all mouse and keyboard activity until you stop the recording. Secondly, Recording Activity dialog now indicates that analog recording is in progress and allowing you to stop the recording.</p> <p></p>"},{"location":"Guide/do_relative_analog_recording/#do-analog-recording","title":"Do Analog Recording","text":"<p>Go to the TwoDialogs AUT and click anywhere in the application's window to start the analog recording.</p> <p>Click the mouse on the empty \"Please enter your name\" text box.</p> <p>Type a name in the text box.</p> <p>Hit the Tab key or click the left mouse button to advance the input position to the second text box.</p> <p>Type another name.</p> <p>Move the mouse to the OK button and press the mouse left button.</p>"},{"location":"Guide/do_relative_analog_recording/#stop-analog-recording","title":"Stop Analog Recording","text":"<p>When you have recorded enough, switch to the Analog Recording dialog box and press the close button or hit the keys Ctrl+Break.</p> <p>Note: If you use the <code>Close</code> button on the Analog Recording dialog, the movement of the mouse to the Analog Recording dialog, and the mouse-click on the <code>Close</code> button will be recorded as part of the analog recording output. \u00a0This might not be a desirable outcome at playback time because the Analog Recording dialog will not be present and the mouse click will be played in a potentially random place on the screen. \u00a0For this reason, Ctrl+Break is probably a better option to terminate analog recording.</p> <p>Note: The grid will have no entry added until you end the analog recording with the Close button in the Analog Recording dialog. When you do, it will add an entry to the grid.</p> <p></p>"},{"location":"Guide/do_relative_analog_recording/#optional-steps","title":"Optional Steps","text":"<ul> <li>You can now record additional analog sessions, if you wish.</li> <li>You can record normal object activity before and/or after the analog recording.</li> </ul>"},{"location":"Guide/do_relative_analog_recording/#stop-recording","title":"Stop Recording","text":"<p>When you have finished all recording press the <code>Finish</code> button or hit Ctrl+3. \u00a0Notice that the Analog entry is added to the grid.</p> <p>The Rapise screen will now be restored and will have placed focus in the editor pane of the Rapise with <code>TwoDialogsAnalogAbsolute.js</code> script displayed. You should see code something like the following:</p> <pre><code>//Plays recorded events from \"Analog\\\\Analog0003.arf\" file\nSeS('Simulated').DoAnalogPlay(\"Analog\\\\\\\\Analog0003.arf\");\n</code></pre>"},{"location":"Guide/do_relative_analog_recording/#playback","title":"Playback","text":"<p>Press the <code>Play</code> button on the Rapise toolbar to playback the recording you made. Be sure not to interfere with the mouse or keyboard whilst the recording is playing back.</p> <p>Note: You will see all mouse and keyboard activity reproduced as the analog recording plays. \u00a0The recording will start from the point where you left-clicked the mouse to begin the recording and will end with clicking the close button in the Analog Recording dialog. If you used Ctrl+Break to end the recording then the last recorded activity will be the one that keystroke.</p> <p>When the analog playback is complete, use the mouse to move the TwoDialogs AUT to a different location on the screen. \u00a0Play the recording again, and watch the operation unfold. \u00a0The most important thing to realize is that the relative analog recording will playback the recording wherever the application is positioned on the screen. \u00a0This is because you used relative analog recording. \u00a0However, once the recording within the AUT is complete, all mouse motion and keyboard strokes are relative to the current position of the AUT. \u00a0Suppose that during analog recording, you click the OK button in TwoDialogs.exe, then move the mouse to terminate the recording using the analog recording <code>Close</code> button. \u00a0Now, prior to playback, you move the AUT to a different location on the screen and hit playback. \u00a0All the activity within the AUT will be faithfully reproduced. \u00a0However, the mouse motion outside the AUT will be relative to the position, so the following activities will not be accurately reproduced. \u00a0Try this for yourself, but be sure to minimize all applications before starting so you don't cause mouse events where they will do harm to other applications on the screen.</p>"},{"location":"Guide/do_relative_analog_recording/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/dynamics_365/","title":"Dynamics 365 for Finance and Operations","text":""},{"location":"Guide/dynamics_365/#overview","title":"Overview","text":"<p>Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365. This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations) and an updated Microsoft Dynamics CRM Online.</p> <p>This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based. There are two main modules that Rapise has specialized support for:</p> <ol> <li>Dynamics 365 for Finance and Operations \u2013 this is the subject of this section, please read on if you are testing these modules.</li> <li>Dynamics 365 for Sales \u2013 this is a rebrand of Dynamics CRM and is covered in corresponding section.</li> </ol> <p></p>"},{"location":"Guide/dynamics_365/#recording-a-test","title":"Recording a Test","text":"<p>Dynamics 365 for Finance and Operations is completely web-based (unlike Dynamics AX) and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests:</p> <ul> <li>Most of the Dynamics 365 user interface will be tested using the standard browser library for your web browser of choice (e.g.  Internet Explorer HTML, Firefox HTML, and Chrome HTML).</li> <li>In addition, there are special controls inside Dynamics 365 that Rapise has specialized support for. For that reason you'll also see the DomDynamicsAx library added to your test as well as the browser one. This DomDynamicsAx library adds additional rules that identify certain Dynamics 365 objects to make testing easier.</li> </ul> <p>When you record your first test, you'll see the following library selection code generated automatically by Rapise:</p> <pre><code>g_load_libraries=[\"Web\", \"DomDynamicsAx\"];\n</code></pre> <p>If you don\u2019t see the DomDynamicsAx library listed in your test, then you will need to manually add it.</p>"},{"location":"Guide/dynamics_365/#recording-and-learning-objects","title":"Recording and Learning Objects","text":"<p>During recording while you interact with Dynamics 365, Rapise captures objects and displays them in the object tree:</p> <p></p> <p>Some of these objects will be standard HTML DOM objects (e.g. button):</p> <p></p> <p>and others will be specific to Dynamics 365:</p> <p></p>"},{"location":"Guide/dynamics_365/#tips-for-interacting-with-objects","title":"Tips for Interacting with Objects","text":"<p>One of the most important UI elements inside Dynamics 365 is the multi-level menu bar:</p> <p></p> <p>The Dynamics 365 menu bar is used to quickly and easily navigate between different parts of the application and it is very common to need to interact with it in test scripts.</p> <p>Learn the menu using Ctrl+2 on the menu open button:</p> <p></p> <p>Rapise will learn the DomDynamicsAXMenuBar object:</p> <p></p> <p>In additional to the standard HTML object methods and properties, you have the special functions that you can perform on the menu:</p> <ul> <li>DoMenu(path, separator) \u2013 selects the menu entries in specified path, using the specified separator (or semicolon if none specified).</li> </ul> <p>Here is a sample test that was recorded using Dynamics 365 for Finance and Operations and Rapise.</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>function Test(params)\n{\n    Navigator.Open(\"https://d365oef0aab7797234d85aos.cloudax.dynamics.com/?cmp=DAT&amp;mi=DefaultDashboard\");\n    SeS('DAT').DoClick();\n    SeS('SysCompanyChooser_DataArea_id').DoOpen();\n    SeS('SysCompanyChooserLookup_Grid').DoClickCell(\"USPI\", 1);\n    SeS('NavigationSearchBox').DoClick();\n    SeS('NavigationSearchBox').DoClick();\n    SeS('NavigationSearchBox').DoSearch(\"purchase orders\");\n    SeS('_New').DoClick();\n    SeS('PurchCreateOrder_PurchTable_Orde').DoOpen();\n    SeS('VendTable_SysTL_Grid').DoClickCell(\"Contoso Chemicals Japan\", \"Name\");\n    SeS('PurchCreateOrder_PurchTable_Inve').DoEnsureVisible();\n    SeS('PurchCreateOrder_PurchTable_Inve').DoOpen();\n    SeS('InventLocationIdLookup_GridInven').DoClickCell(\"Ingredients - Cleaners\", \"Name\");\n    SeS('OK').DoClick();\n    SeS('purchtablelistpageopen_LineSpec').DoClickCell(0, \"Item number\");\n    SeS('InventItemIdLookupPurchase_Grid').DoClickCell(\"SodiumHydroxide\", \"Search name\");\n    SeS('purchtablelistpageopen_LineSpec').DoClickCell(0, \"Unit\");\n    SeS('UnitOfMeasureLookup_GridConverti').DoClickCell(\"kilogram\", \"Translated description\");\n    SeS('purchtablelistpageopen_LineSpec').DoClickCell(0, \"Quantity\");\n    SeS('purchtablelistpageopen_LineSpec').DoSetText(\"5\");\n    SeS('Add_line').DoEnsureVisible();\n    SeS('Add_line').DoClick();\n    SeS('purchtablelistpageopen_LineSpec').DoClickCell(1, \"Item number\");\n    SeS('InventItemIdLookupPurchase_Grid').DoClickCell(\"OleicAcid\", \"Search name\");\n    SeS('purchtablelistpageopen_LineSpec').DoClickCell(1, \"Quantity\");\n    SeS('purchtablelistpageopen_LineSpec').DoSetText(\"3\");\n    SeS('Save').DoClick();\n}\n\ng_load_libraries=[\"%g_browserLibrary:Chrome HTML%\", \"DomDynamicsAX\"];\n</code></pre>"},{"location":"Guide/dynamics_365/#see-also","title":"See Also","text":"<ul> <li>Microsoft Dynamics</li> <li>Get the framework for testing Dynamics 365 for Operations (github)</li> <li>Demo: How to Create a PO in Microsoft Dynamics 365 for Operations</li> <li>Webinar: Testing Microsoft Dynamics 365 for Operations with Rapise</li> </ul>"},{"location":"Guide/dynamics_ax/","title":"Dynamics AX","text":""},{"location":"Guide/dynamics_ax/#overview","title":"Overview","text":"<p>Microsoft Dynamics AX (usually referred to as just AX) - is an ERP system for mid-size to large enterprises. It is the most robust, scalable, and functionally rich enterprise resource planning system in the Microsoft Dynamics family of products. The system was originally known as Axapta, owned by the Danish software company Damgaard.</p> <p>Dynamics AX consists of a client-server architecture with a thick-client ERP interface for entering/adding data in the system:</p> <p></p> <p>Rapise includes specialized libraries for testing Dynamics AX applications that are built-upon the standard Microsoft Windows UIAutomation library with special extensions for handling unique AX controls such as tree views, the navigation explorer and the various grids used to edit data. In addition Rapise can test the following extensions to Dynamics AX:</p> <ul> <li>Dynamics AX Management Reporter - Rapise can test this extension using its Generic Windows library.</li> <li>Dynamics AX Web Portals - Rapise can test the various web portals using its web browser libraries.</li> </ul>"},{"location":"Guide/dynamics_ax/#start-recording-a-new-test","title":"Start Recording a New Test","text":"<p>First you need to create a new Basic test and start recording session. Choose Dynamics AX from the list of applications:</p> <p></p> <p>Then press <code>Select</code> button to start recording. Rapise will automatically plug the UIAutomation and DynamicsAX libraries.</p> <ul> <li> <p>Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. </p> </li> <li> <p>DynamicsAX library supports set of controls specific to Microsoft Dynamics AX 2012 application. </p> </li> </ul> <p>When recording is completed you can see attached libraries in the code of <code>Main.js</code> file:</p> <pre><code>g_load_libraries=[\"UIAutomation\", \"DynamicsAX\"];\n</code></pre>"},{"location":"Guide/dynamics_ax/#automatic-adjustment-of-window-title-object-property","title":"Automatic Adjustment of <code>Window Title</code> Object Property","text":"<p>Main window title of Dynamics AX is dynamic by nature.</p> <p></p> <p>It contains not only application name but also domain and AOS information and session Id. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression in object properties. Here it is:</p> <pre><code>    regex:.Microsoft Dynamics AX.*\n</code></pre> <p>So recorded object properties automatically adjusted as</p> <p></p> <p>Also Rapise automatically sets <code>Record Title</code> in test settings to the same regular expression so you do not need to choose the Dynamics AX main window during subsequent recording sessions.</p> <p></p>"},{"location":"Guide/dynamics_ax/#titles-of-child-windows","title":"Titles of Child Windows","text":"<p>Child windows of Dynamics AX also may have dynamic titles. Rapise does not know all the available patterns, so for child windows you need to write regular expressions yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the <code>window title</code> property automatically. In other words when Rapise learns a new object and it's <code>window title</code> is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression.</p>"},{"location":"Guide/dynamics_ax/#object-location","title":"Object Location","text":"<p>Object location property has the form of</p> <pre><code>    id1/id2/id3...\n</code></pre> <p>where ids refer to parent objects along the path to the top window object. Sometimes such ids also can be dynamic, e.g.:</p> <pre><code>    Dimensions display (1 - k13) - Sales order: S30014323, CE15P, Sales order: S30014323/InventDimParmFixed/Pane/View/Style\n</code></pre> <p>In this case change dynamic parts by corresponding regular expressions. In the above example updated location looks like:</p> <pre><code>    regex:Dimensions display.*/InventDimParmFixed/Pane/View/Style\n</code></pre> <p>Here is updated location in the property grid:</p> <p></p>"},{"location":"Guide/dynamics_ax/#how-to-launch-dynamics-ax-client","title":"How to Launch Dynamics AX Client","text":"<p>If in your test you want to check that Dynamics AX application is installed and running place this function into <code>User.js</code>:</p> <pre><code>function DynamicsAXLaunch()\n{\n    function _DaxIsRunning()\n    {\n        var windows = g_util.FindWindows(\"regex:.Microsoft Dynamics AX.*\", \"AxMainFrame\");\n        return windows.length &gt; 0;\n    }\n\n    if (_DaxIsRunning())\n    {\n        Tester.Message(\"Dynamics AX Client is already running\");\n        return true;\n    }\n\n    var fso = new ActiveXObject(\"Scripting.FileSystemObject\"); \n\n    var pfFolder = Global.GetSpecialFolderPath(\"ProgramFilesX86\");\n    var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics AX\\\\60\\\\Client\\\\Bin\\\\Ax32.exe\"\n    if(!fso.FileExists(dynamicsPath))\n    {\n        Tester.Message(\"Dynamics AX Client is not installed on this computer\");\n        return false;\n    }\n\n    Global.DoLaunch(dynamicsPath);\n\n    for(var i = 0; i &lt; 60; i++)\n    {\n        if (_DaxIsRunning())\n        {\n            Tester.Message(\"Dynamics AX Client started successfully\");\n            return true;\n        }\n        Global.DoSleep(1000);\n    }\n\n    Tester.Message(\"Dynamics AX Client did not start\");\n    return false;\n}\n</code></pre> <p>You can now use this function in RVL</p> <p></p> <p>and in JavaScript:</p> <pre><code>DynamicsAXLaunch();\n</code></pre>"},{"location":"Guide/dynamics_ax/#recording-actions-and-learning-objects","title":"Recording Actions and Learning Objects","text":"<p>During recording while you interact with Dynamics AX controls Rapise captures actions and displays them in the recording dialog.</p> <p></p> <p>When recording is finished Rapise automatically generates the test.</p> <p>In Rapise Visual Language(RVL) it looks like</p> <p></p> <p>In JavaScript:</p> <pre><code>function Test(params)\n{\n    DynamicsAXLaunch();\n    SeS('AddressBarContainer').DoSetText(\"DAT/Retail essentials/Area page\");\n    SeS('Tree').DoClickNode(\"Retail essentials;Customers\");\n    SeS('Tree').DoClickNode(\"Retail essentials;Customers;All customers\");\n    SeS('_New').DoMenu(\"Customer\");\n    SeS('Customer_account').DoClick();\n    SeS('Customer_account').DoSetText(\"Google\");\n    SeS('Name').DoClick();\n    SeS('Name').DoSetText(\"Google\");\n    SeS('Customer_group').DoClick();\n    SeS('Add').DoClick();\n    SeS('Customer_group').DoClick();\n    SeS('Customer_group_lookup_button').DoClick();\n    SeS('Grid').DoClickCell(\"SOFTWARE\", \"Customer group\");\n    SeS('Save_and_close').DoClick();\n    SeS('List').DoMenu(\"Refresh\");\n    SeS('ListPageGrid').DoClickCell(\"Google\", \"Name\");\n    SeS('Maintain').DoMenu(\"Delete\");\n    SeS('Yes').DoClick();\n    SeS('Tree').DoClickNode(\"Retail essentials;Area page\");\n    SeS('TabControl').DoSelectTab(\"Home\");\n}\n</code></pre> <p>If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl+2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. <code>Pause/Resume</code> button is located at the right side of the Recording Activity dialog.</p>"},{"location":"Guide/dynamics_ax/#tips-for-interacting-with-objects","title":"Tips for Interacting with Objects","text":""},{"location":"Guide/dynamics_ax/#text-box","title":"Text Box","text":"<p>To allow Rapise to capture the entered text interact with a text box in two steps:</p> <ol> <li>Click into the edit box</li> <li>Type text using keyboard</li> </ol>"},{"location":"Guide/dynamics_ax/#combobox","title":"ComboBox","text":"<p>Dynamics AX has several types of combo boxes.</p>"},{"location":"Guide/dynamics_ax/#standard-combo-box","title":"Standard Combo Box","text":"<p>Standard combo box like <code>Worker type</code> in the <code>Hire New Worker</code> form.</p> <p></p> <p>Rapise treats such combo boxes as atomic objects abd records them as DynamicsAXComboBox. To record interaction with the combo box</p> <ol> <li>Click on the combo box to expand the dropwdown with choices</li> <li>Select a value from the list</li> </ol> <p>Generated script step looks like:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('Worker_type').DoSelectItem(\"Employee\");\n</code></pre>"},{"location":"Guide/dynamics_ax/#table-filter-combo","title":"Table Filter Combo","text":"<p>Table filter combo is recognized as a pair of objects: <code>Scope</code> and <code>DropDown</code>. The <code>Scope</code> is of type DynamicsAXMenuItem and used to open the <code>DropDown</code> of type DynamicsAXMenuDropDownList.</p> <p></p> <p>Recorded steps look like:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>//User clicks 'Scope'\nSeS('Scope').DoClick();\n//DropDown item selected:'Search name'\nSeS('DropDown').DoSelectItem(\"Search name\");\n</code></pre>"},{"location":"Guide/dynamics_ax/#lookup-field","title":"Lookup Field","text":"<p>Lookup field consists of an edit box, open button and a dropdown table. Record lookup interactions in three steps:</p> <ol> <li>Click the edit field. Recorded as DynamicsAXTextBox.</li> <li>Click the open button. Recorded as UIAObject.</li> <li>Click the value in the dropdown grid. Recorded as DynamicsAXTable.</li> </ol> <p></p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>// Click on the edit box\nSeS('Customer_group').DoClick();\n// Click open button\nSeS('Customer_group_lookup_button').DoClick();\n// Select value from the dropdown grid using column name (Customer group) and value (SOFTWARE)\nSeS('Grid').DoClickCell(\"SOFTWARE\", \"Customer group\");\n</code></pre>"},{"location":"Guide/dynamics_ax/#address-bar","title":"Address Bar","text":"<p>Click in empty area of the address bar and enter the address where you want to navigate. Rapise will capture DynamicsAXAddressBar object and record <code>DoSetText</code> action.</p> <p></p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('AddressBarContainer').DoSetText('DAT/Retail essentials/Employees/Users');\n</code></pre>"},{"location":"Guide/dynamics_ax/#menu","title":"Menu","text":"<p>Rapise supports both recording and learning of the main menu. When recording make sure you click on every component along the path. E.g. you want to navigate to <code>File &gt; View &gt; Modules &gt; General ledger</code>. During recording click on <code>File</code>, <code>View</code>, <code>Modules</code> and <code>General ledger</code>. Captured menu object has type DynamicsAXMenu. Generated script looks like:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>//Menu item selected:'General ledger'\nSeS('File').DoMenu(\"File;View;Modules;General ledger\");\n</code></pre> <p>Rapise captures menu as top level object (<code>File</code> in the example above). Notice that menu path components are separated with <code>;</code>. If you want for example to open menu <code>File &gt; Tools &gt; Telephone list</code> then use <code>File;Tools;Telephone list</code> as <code>path</code> parameter.</p>"},{"location":"Guide/dynamics_ax/#table","title":"Table","text":"<p>Rapise recognizes Dynamics AX grids as DynamicsAXTable</p> <p></p> <p>When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('ListPageGrid').DoClickCell(\"Contoso Retail Chicago\", \"Name\");\n</code></pre> <p>Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check  DynamicsAXTable for more details.</p>"},{"location":"Guide/dynamics_ax/#infolog","title":"Infolog","text":"<p>In some case Dynamics AX can report an error using Infolog window.</p> <p></p> <p>To obtain text of the messages in this window learn the Tree object - place cursor over the error text and press Ctrl+2 shortcut. The object is learned as UIATree. In the case of infolog tree - all nodes are immediate children of the root. So in the example shown on the image above the tree contains two child nodes of the tree node. To get the number of messages and read individual messages use <code>GetChildrenCount</code> and <code>GetChildAt</code> actions of UIATree.</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>// Get the number of messages in the infolog.\n// For the presented example it returns 2.\nvar messageCount = SeS('InfologTree').GetChildrenCount();\n\n// Get second message text, returns \"Field 'User ID' must be filled in.\"\nvar messageText = SeS('Tree').GetChildAt(0, 1);\n</code></pre>"},{"location":"Guide/dynamics_ax/#type-to-filter-field","title":"Type to filter Field","text":"<p>Almost each standard grid in Dynamics AX has a text field for filtering grid data.</p> <p></p> <p>When you learn this field it has a name <code>Type to filter</code>.</p> <p></p> <p>However when this field gets focus it's name changes to <code>Text box</code>. To enable Rapise to find this field during playback set <code>Ignore Object Name</code> property of the object to <code>True</code>.</p> <p></p>"},{"location":"Guide/dynamics_ax/#dynamics-ax-cook-book","title":"Dynamics AX Cook Book","text":""},{"location":"Guide/dynamics_ax/#maximizeminimizerestore-window","title":"Maximize/Minimize/Restore Window","text":"<p>You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id <code>AddressBarContainer</code>.</p> <p>First place the following code into your <code>User.js</code>:</p> <pre><code>function MaximizeWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Maximized = true;\n}\n\nfunction MinimizeWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Maximized = false;\n}\n\nfunction RestoreWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Iconic = false;\n}\n</code></pre> <p>Now you can use these functions in RVL and JavaScript.</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>MaximizeWindow(\"AddressBarContainer\");\nRestoreWindow(\"AddressBarContainer\");\nMinimizeWindow(\"AddressBarContainer\");\n</code></pre>"},{"location":"Guide/dynamics_ax/#scroll-to-the-bottom-of-a-grid","title":"Scroll to the Bottom of a Grid","text":"<p>If your grid looks like this and you want to scroll to the last record of it learn the <code>Last Record</code> button and click on it during test playback.</p> <p></p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('Last_Record').DoClick();\n</code></pre>"},{"location":"Guide/dynamics_ax/#scroll-and-click-on-a-cell-in-a-grid","title":"Scroll and Click on a Cell in a Grid","text":"<p>If you know the value of a cell in a grid then Rapise will automatically scroll the grid before click.</p> <p> </p> <p>Assume that you want to click on a cell with value <code>Alen Shen</code> in a column <code>Search name</code>. This cell is not visible on the picture and requires scrolling to show up. The following script performs the click:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('CustomerGrid').DoClickCell(\"Alen Shen\", \"Search name\");\n</code></pre> <p>If you do not know the value of a cell you can get it this way</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>var cellValue = SeS('CustomerGrid').GetCell(9, \"Search name\");\nTester.Message(cellValue);\n</code></pre> <p>Where 9 is row number.</p>"},{"location":"Guide/dynamics_ax/#see-also","title":"See Also","text":"<ul> <li>Microsoft Dynamics</li> <li>Get the framework for testing Dynamics AX (github)</li> <li>KB: If recording of actions in Dynamics AX or Dynamics NAV does not work</li> <li>KB: Creating a Purchase Order in Dynamics AX</li> <li>KB: Rapise Tips, Tricks &amp; Workarounds when Testing Dynamics AX 2012</li> <li>KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX</li> <li>KB378 RPA - importing data into Dynamics AX</li> <li>Webinar: Testing Microsoft Dynamics AX with Rapise</li> <li>Webinar: Test Automation &amp; RPA for Dynamics AX with Rapise</li> <li>Dynamics AX Sample Tests with source and recording/playback video links</li> </ul>"},{"location":"Guide/dynamics_crm/","title":"Dynamics CRM/365 for Sales","text":""},{"location":"Guide/dynamics_crm/#overview","title":"Overview","text":"<p>Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online. Rapise can be used to test installations of Dynamics CRM both on-premise and online.</p> <p>Latest version of Dynamics CRM is called Dynamics 365 for Sales. It is also supported. Rapise can handle both Web and Unified Interface.</p>"},{"location":"Guide/dynamics_crm/#dynamics-365-for-sales-unified-interface","title":"Dynamics 365 for Sales - Unified Interface","text":""},{"location":"Guide/dynamics_crm/#legacy","title":"Legacy","text":""},{"location":"Guide/dynamics_crm/#dynamics-365-for-sales-web-interface","title":"Dynamics 365 for Sales - Web Interface","text":""},{"location":"Guide/dynamics_crm/#dynamics-crm-on-premise","title":"Dynamics CRM On-Premise","text":""},{"location":"Guide/dynamics_crm/#dynamics-crm-online","title":"Dynamics CRM Online","text":""},{"location":"Guide/dynamics_crm/#recording-a-test","title":"Recording a Test","text":"<p>All  versions of Dynamics CRM are completely web-based and use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests:</p> <ul> <li>Most of the Dynamics CRM user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML).</li> <li>In addition, there are special controls inside CRM that Rapise has specialized support for. For that reason you'll also see the DomDynamicsCrm library added to your test as well as the browser one. This DomDynamicsCrm library adds additional rules that identify certain CRM objects to make testing easier.</li> </ul> <p>When you record your first test, you'll get the following library selection code generated automatically by Rapise:</p> <pre><code>g_load_libraries=[\"Web\", \"DomDynamicsCrm\"];\n</code></pre> <p>If you don\u2019t see the DomDynamicsCrm library listed in your test, then you will need to manually add it.</p>"},{"location":"Guide/dynamics_crm/#recording-and-learning-objects","title":"Recording and Learning Objects","text":"<p>During recording while you interact with Dynamics CRM/365, Rapise captures objects and displays them in the object tree:</p> <p></p> <p>Some of these objects will be standard HTML DOM objects (e.g. text field):</p> <p></p> <p>and others will be specific to Dynamics CRM/365:</p> <p></p>"},{"location":"Guide/dynamics_crm/#tips-for-interacting-with-objects","title":"Tips for Interacting with Objects","text":"<p>The following unique objects are available within Dynamics CRM/365 that Rapise has special support for:</p>"},{"location":"Guide/dynamics_crm/#dynamics-crm365-grid","title":"Dynamics CRM/365 Grid","text":"<p>One of the the most important UI elements inside Dynamics CRM/365 is the sortable, filterable grid:</p> <p></p> <p>The Dynamics CRM/365 Grid is used in lots of different screens inside Dynamics CRM/365 (e.g. Leads, Accounts, etc.) and it is very common to need to interact with it in test scripts.</p> <p>When you record operations on such a grid or simply learn the entire grid using Ctrl+2 you will learn the DomDynamicsCrmGrid or DomDynamicsCrmUnifiedInterfaceGrid object:</p> <p></p>"},{"location":"Guide/dynamics_crm/#see-also","title":"See Also","text":"<ul> <li>Microsoft Dynamics</li> <li>Get the framework for testing Dynamics 365 for Sales (github)</li> <li>Tips &amp; Tricks for Rapise and Dynamics 365 for Sales (Web Interface)</li> <li>KB: How to automate testing of Unified Service Desk for Microsoft Dynamics 365</li> <li>Webinar: Testing Dynamics CRM &amp; 365 for Sales using Rapise</li> </ul>"},{"location":"Guide/dynamics_nav/","title":"Dynamics NAV","text":""},{"location":"Guide/dynamics_nav/#overview","title":"Overview","text":"<p>In this guide we describe how to master tests for Dynamics NAV desktop client using Rapise.</p> <p>Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries.</p>"},{"location":"Guide/dynamics_nav/#dynamics-nav-web-client-testing-note","title":"Dynamics NAV Web Client Testing Note","text":"<p>Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test.</p>"},{"location":"Guide/dynamics_nav/#start-recording-a-new-test","title":"Start Recording a New Test","text":"<p>First you need to create a new Basic test and start recording session. Choose Dynamics NAV from the list of applications:</p> <p></p> <p>Then press <code>Select</code> button to start recording. When recording is completed you will see that Rapise automatically attached necessary libraries in the code of <code>Main.js</code> file:</p> <pre><code>    g_load_libraries=[\"UIAutomation\", \"DynamicsNAV\"];\n</code></pre> <ul> <li> <p>Microsoft UI Automation is the new accessibility framework for Microsoft Windows, available on all operating systems that support Windows Presentation Foundation (WPF). UI Automation provides programmatic access to most user interface (UI) elements on the desktop, enabling assistive technology products such as screen readers to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI. </p> </li> <li> <p>DynamicsNAV library supports set of controls specific to Microsoft Dynamics NAV application.</p> </li> </ul>"},{"location":"Guide/dynamics_nav/#automatic-adjustment-of-window-title-object-property","title":"Automatic Adjustment of <code>Window Title</code> Object Property","text":"<p>Main window title of Dynamics NAV is dynamic by nature.</p> <p></p> <p>It may contain not only application name but also name of currently active page or information about currently opened record. So it can be different at the time of test recording and test playback. To cope with this problem Rapise automatically replaces actual window title with a regular expression. You can see it in the object tree and properties of captured objects.</p> <p></p> <p>Here it is:</p> <pre><code>    regex:.*Microsoft Dynamics NAV\n</code></pre> <p>Also Rapise adjusts <code>Record Title</code> in test settings to the same regular expression so you do not need to choose the Dynamics NAV main window during subsequent recording sessions.</p> <p></p>"},{"location":"Guide/dynamics_nav/#titles-of-child-windows","title":"Titles of Child Windows","text":"<p>Child windows of Dynamics NAV also may have dynamic titles.</p> <p></p> <p>Rapise tries to generate a regular expression for such titles as well. If it does not do so - write the expression yourself. But the good news is you need to do this for one object only in every such window. For further learned objects Rapise will change the <code>window title</code> property automatically. In other words when Rapise learns a new object and it's <code>window title</code> is matched by a regular expression of a previously learned object then the title property is automatically replaced by this regular expression.</p>"},{"location":"Guide/dynamics_nav/#how-to-launch-dynamics-nav-client","title":"How to Launch Dynamics NAV Client","text":"<p>If in your test you want to check that Dynamics NAV application is installed and running place this function into <code>User.js</code>:</p> <pre><code>function DynamicsNAVLaunch()\n{\n    function _NavIsRunning()\n    {\n        var windows = g_util.FindWindows(\"regex:.*Microsoft Dynamics NAV\", \"regex:WindowsForms10.*\");\n        return windows.length &gt; 0;\n    }\n\n    if (_NavIsRunning())\n    {\n        Tester.Message(\"Dynamics NAV Client is already running\");\n        return true;\n    }\n\n    var fso = new ActiveXObject(\"Scripting.FileSystemObject\"); \n\n    var pfFolder = Global.GetSpecialFolderPath(\"ProgramFilesX86\");\n    var dynamicsPath = pfFolder + \"\\\\Microsoft Dynamics NAV\\\\100\\\\RoleTailored Client\\\\Microsoft.Dynamics.Nav.Client.exe\"\n    if(!fso.FileExists(dynamicsPath))\n    {\n        Tester.Message(\"Dynamics NAV Client is not installed on this computer\");\n        return false;\n    }\n\n    Global.DoLaunch(dynamicsPath);\n\n    for(var i = 0; i &lt; 60; i++)\n    {\n        if (_NavIsRunning())\n        {\n            Tester.Message(\"Dynamics NAV Client started successfully\");\n            return true;\n        }\n        Global.DoSleep(1000);\n    }\n\n    Tester.Message(\"Dynamics NAV Client did not start\");\n    return false;\n}\n</code></pre> <p>You can now use this function in RVL</p> <p></p> <p>and in JavaScript:</p> <pre><code>DynamicsNAVLaunch();\n</code></pre>"},{"location":"Guide/dynamics_nav/#recording-actions-and-learning-objects","title":"Recording Actions and Learning Objects","text":"<p>During recording while you interact with Dynamics NAV controls Rapise captures actions and displays them in the recording dialog.</p> <p></p> <p>After this recording session corresponding UI area looks as follows:</p> <p></p> <p>When recording is finished Rapise automatically generates the test.</p> <p>In Rapise Visual Language(RVL) it looks like</p> <p></p> <p>In JavaScript:</p> <pre><code>function Test()\n{\n    SeS('_New').DoClick();\n    SeS('OK').DoAction();\n    SeS('Name').DoClick();\n    SeS('Name').DoSetText(\"CONTOSO\");\n    SeS('Address').DoClick();\n    SeS('Address').DoSetText(\"1200 Market St\");\n}\n</code></pre> <p>If Rapise does not capture any interaction or captures it wrongly then try to learn the object. In this case Rapise will add it to the object tree but will not capture the action and you'll add the code to the test manually later. To learn an object during recording session place mouse cursor over it and press Ctrl+2 shortcut. It makes sense to pause recording before learning objects. This will prevent Rapise from intersecting mouse and keyboard and attempting to record interactions you do. <code>Pause/Resume</code> button is located at the right side of the Recording Activity dialog.</p>"},{"location":"Guide/dynamics_nav/#tips-for-interacting-with-objects","title":"Tips for Interacting with Objects","text":""},{"location":"Guide/dynamics_nav/#text-box","title":"Text Box","text":"<p>To allow Rapise to capture the entered text interact with a text box in two steps:</p> <ol> <li>Click into the edit box</li> <li>Type text using keyboard</li> </ol>"},{"location":"Guide/dynamics_nav/#combobox","title":"ComboBox","text":"<p>Dynamics NAV combo box consists of three elements:</p> <ul> <li>edit box,</li> <li>open button</li> <li>and a dropdown table.</li> </ul> <p></p> <p>For reliable recording of combo box interactions follow these steps:</p> <ul> <li>click on the edit box,</li> <li>click on the open button,</li> <li>click on a cell in the table.</li> </ul> <p>Rapise will record this as:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>// Click on the edit box\nSeS('City').DoClick);\n// Click on the open button\nSeS('City1').DoAction();\n// Select city in the table, choose \"Gmunden\" value in the column \"City\"\nSeS('DataGridView').DoClickCell(\"Gmunden\", \"City\");\n</code></pre>"},{"location":"Guide/dynamics_nav/#table","title":"Table","text":"<p>Rapise has complete support for Dynamics NAV grids/tables. It recognizes Dynamics NAV grids as DynamicsNAVTable object. Rapise can record user clicks on cells and also provides API to get the number of rows, columns, get column name by index.</p> <p>When you click on a cell in a table Rapise records column name and value in the cell. The generated click step looks like:</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('DataGridView').DoClickCell(\"Gmunden\", \"City\");\n</code></pre> <p>Rapise can click cells based on column name and value as well as using column and row indexes. Also Rapise can read column names, column count and row count. Check  DynamicsNAVTable for more details.</p> <p>Here is an example of interacting with a grid.</p> <pre><code>var grid = SeS('DataGridView');\n\nvar cell = grid.GetCell(3, \"Name\");\nTester.Message(cell);\n\nvar colValues = grid.GetColumnValues(2, 10);\nTester.Message(colValues.join(','));\n\ngrid.DoClickCell(\"Bilabankinn\", \"Name\");\ngrid.DoClickColumn(1);\ngrid.DoClickColumn(\"Name\");\n\nvar rowCount = grid.GetRowCount();\nTester.Message(rowCount);\n\nvar colCount = grid.GetColumnCount();\nTester.Message(colCount);\nfor(var i = 0; i &lt; colCount; i++)\n{\n    var colName = grid.GetColumnName(i);\n    Tester.Message(\"\\\"\" + colName + \"\\\"\");\n    var colIndex = grid.GetColumnIndex(colName);\n    Tester.Message(colIndex);\n}\n</code></pre>"},{"location":"Guide/dynamics_nav/#dynamics-nav-cook-book","title":"Dynamics NAV Cook Book","text":""},{"location":"Guide/dynamics_nav/#maximizeminimizerestore-window","title":"Maximize/Minimize/Restore Window","text":"<p>You can maximize a window using any object inside it as a starting point. In the examples below we will use the object with id <code>ToolBar</code>.</p> <p>First place the following code into your <code>User.js</code>:</p> <pre><code>function MaximizeWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Maximized = true;\n}\n\nfunction MinimizeWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Maximized = false;\n}\n\nfunction RestoreWindow(/**objectId*/ objectId)\n{\n    SeS(objectId).getDesktopWindow().Iconic = false;\n}\n</code></pre> <p>Now you can use these functions in RVL and JavaScript.</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>MaximizeWindow(\"ToolBar\");\nRestoreWindow(\"ToolBar\");\nMinimizeWindow(\"ToolBar\");\n</code></pre>"},{"location":"Guide/dynamics_nav/#scroll-to-a-specific-row-of-a-grid","title":"Scroll to a Specific Row of a Grid","text":"<p>Generally Dynamics NAV grids do not allow accessing cells which are not currently visible on screen. Using scrolling it is possible to make a specific row/column of a grid visible. If you perform DoClickCell action Rapise will automatically ensure that the cell is visible on screen. There is also explicit scroll action DoScrollTo.</p> <p>RVL</p> <p></p> <p>JavaScript</p> <pre><code>SeS('CustomerGrid').DoClickCell(\"Francematic\", \"Name\");\nSeS('CustomerGrid').DoScrollTo(30, 7);\n</code></pre>"},{"location":"Guide/dynamics_nav/#see-also","title":"See Also","text":"<ul> <li>Microsoft Dynamics</li> <li>Get the framework for testing Dynamics NAV (github)</li> <li>KB: How to start Dynamics NAV client</li> <li>KB: If recording of actions in Dynamics AX or Dynamics NAV does not work</li> <li>KB: How to record entering of data into Dynamics NAV tables</li> <li>KB: How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV</li> <li>Webinar: Testing Microsoft Dynamics NAV with Rapise</li> <li>Webinar: Testing MS Dynamics NAV &amp; Robotic Process Automation with Rapise</li> </ul>"},{"location":"Guide/enter_filter_criteria_for____d/","title":"Enter filter criteria for... Dialog","text":""},{"location":"Guide/enter_filter_criteria_for____d/#purpose","title":"Purpose","text":"<p>Allow more than one filter criteria for the same column.</p>"},{"location":"Guide/enter_filter_criteria_for____d/#how-to-open","title":"How to Open","text":"<p>In the Report Viewer, open the drop-down menu for one of the filter cells; select the Custom option (see below):</p> <p></p>"},{"location":"Guide/enter_filter_criteria_for____d/#conditions","title":"Conditions","text":"<p>You may specify as many conditions as you like. \u00a0Each condition has two properties, a Matching Criteria on the left and a filter value on the right. \u00a0The filter value is a string, and the matching criteria specifies what constitutes a match. \u00a0 For more details, look HERE.</p>"},{"location":"Guide/enter_filter_criteria_for____d/#filter-aggregation","title":"Filter Aggregation","text":"<p>There are two ways you can aggregate / combine filter conditions:</p> <p></p> <ul> <li>All: \u00a0All conditions must be true to constitute a match.</li> <li>Any: At least one condition must be true to constitute a match.</li> </ul>"},{"location":"Guide/enter_filter_criteria_for____d/#buttons","title":"Buttons","text":"<ul> <li>Add: Add a extra condition row.</li> <li>Delete: Delete the selected condition.</li> </ul> <p>You can select a condition by clicking on the field name to the left of the matching criteria:</p> <p></p> <ul> <li>OK: Close the dialog and apply the filter.</li> <li>Cancel: Close the dialog. \u00a0Do not apply the filter.</li> </ul>"},{"location":"Guide/errors_view/","title":"Errors View","text":""},{"location":"Guide/errors_view/#purpose","title":"Purpose","text":"<p>The Errors View displays execution error details. \u00a0Execution errors are those that cause Recording or Playback to stop.</p>"},{"location":"Guide/errors_view/#how-to-open","title":"How to Open","text":"<p>The Errors View is hidden in the Default Layout. You may then show it using <code>View &gt; Show &gt; Output</code>.</p>"},{"location":"Guide/errors_view/#error-message","title":"Error Message","text":"<p>Double click on an error message to go to the corresponding source line.</p>"},{"location":"Guide/errors_view/#widgets","title":"Widgets","text":"<ul> <li>The text box is a search box.</li> <li>The icons from left to right are Find Next Entry  , Copy Selected  , Clear All Text .</li> <li>Right tool <code>Hide</code> used to collapse whole bottom panel. You may then show it using <code>View &gt; Show &gt; Output</code>.</li> </ul>"},{"location":"Guide/extensibility/","title":"Extensibility","text":"<p>The Extensibility section is for experienced Rapise users who want to extend capabilities of the tool.</p> <ul> <li>Tutorial: Custom Library</li> <li>Defining Global Objects</li> </ul>"},{"location":"Guide/extracting_test_data_from_an_e/","title":"Extracting Test Data From an Excel Spreadsheet","text":""},{"location":"Guide/extracting_test_data_from_an_e/#overview","title":"Overview","text":"<p>Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this.</p>"},{"location":"Guide/extracting_test_data_from_an_e/#recommended-solution","title":"Recommended Solution","text":""},{"location":"Guide/extracting_test_data_from_an_e/#rvl","title":"RVL","text":"<p>The most simple and straight-forward way to accomplish this is to use RVL Maps.</p> <p>Also, if your goal is to store Configuration data as <code>.xlsx</code> then we recommend to simply use Global.GetProperty.</p>"},{"location":"Guide/extracting_test_data_from_an_e/#javascript","title":"JavaScript","text":"<p>In this example we have a spreadsheet that contains some lookup data:</p> Test Test Data Test1 valuetest1 Test2 valuetest2 Test3 valuetest3 Test4 valuetest4 Test5 valuetest5 <p>We want to dynamically query this Excel sheet and find the test data associated with a specific case. For example if we query for <code>Test2</code> we want to return back the test data <code>valuetest2</code>.</p> <p>The function that will do this uses the built-in Spreadsheet object:</p> <pre><code>function\u00a0FindValueFromFile(filename,\u00a0valueToFind)\n{\n    //Open\u00a0the\u00a0spreadsheet\n    var\u00a0success\u00a0=\u00a0Spreadsheet.DoAttach(filename,\u00a0'Sheet1');\n    Tester.Assert('Open\u00a0Spreadsheet',\u00a0success);\n    //Now\u00a0loop\u00a0through\u00a0and\u00a0see\u00a0if\u00a0we\u00a0can\u00a0find\u00a0that\u00a0value\n    var\u00a0rowCount\u00a0=\u00a0Spreadsheet.GetRowCount();\n    Spreadsheet.SetRange(2,\u00a0rowCount\u00a0+\u00a01,\u00a01,\u00a02);\n    //Loop\u00a0through\u00a0all\u00a0the\u00a0rows\u00a0and\u00a0find\u00a0the\u00a0match\n    var\u00a0data\u00a0=\u00a0'';\n    while(Spreadsheet.DoSequential())\n    {\n        if\u00a0(Spreadsheet.GetCell(0)\u00a0==\u00a0valueToFind)\n        {\n            data\u00a0=\u00a0Spreadsheet.GetCell(1);\n        }\n    }\n    return\u00a0data;\n}\n</code></pre>"},{"location":"Guide/extracting_test_data_from_an_e/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/features/","title":"Features","text":"<p>Rapise is a feature-rich test automation system, however all the features have been designed to make test automation as easy as possible.</p> <p>Most of the features of Rapise fall into one of five categories:</p> <ol> <li>Building test scripts with little or no manual scripting.<ul> <li>Recording and Learning</li> <li>Rapise Visual Language (RVL)</li> <li>Recording Libraries</li> </ul> </li> <li>Reading and interpreting results and reports.<ul> <li>Taking Screenshots</li> <li>Automated Reporting</li> </ul> </li> <li>Building test frameworks.<ul> <li>Testing Frameworks</li> </ul> </li> <li>Additional features and capabilities for sophisticated testing.<ul> <li>Object Spy</li> <li>Tests and Sub-Tests</li> <li>Test Management</li> </ul> </li> <li>Writing more involved or complicated tests using scripting.<ul> <li>Scripting</li> <li>Understanding the Script</li> <li>JavaScript IDE</li> </ul> </li> <li>Extending Rapise to learn new or extended libraries of capabilities.<ul> <li>Custom Libraries</li> </ul> </li> </ol> <p>Depending on the application set being tested, not all of these features are necessarily needed for every situation. For each feature, the docs describe:</p> <ol> <li> <p>The reason you might use a given feature.</p> </li> <li> <p>A summary of the basic value of the feature.</p> </li> <li> <p>An overview of how the feature works from the perspective of using it.</p> </li> <li> <p>At least one useful sample that demonstrates how to use the feature.</p> </li> </ol>"},{"location":"Guide/find_and_replace_dialog/","title":"Find and Replace Dialog","text":""},{"location":"Guide/find_and_replace_dialog/#purpose","title":"Purpose","text":"<p>To find and replace text in files displayed in the Rapise Content View.</p>"},{"location":"Guide/find_and_replace_dialog/#how-to-open","title":"How to Open","text":"<p>Use main menu <code>Edit &gt; Find in Files</code> or click magnifier icon on the toolbar.</p>"},{"location":"Guide/find_and_replace_dialog/#find-in-files-tab","title":"Find in Files Tab","text":"<ul> <li>Find what: Place the string you would like to search for in the Find what text box.</li> <li>Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder.</li> <li>Directory path: Use the Directory Path text-box to specify the directory in which to search. \u00a0The Directory path text-box cannot be accessed (and is ignored) if the Test files checkbox is checked.</li> <li>Check the Include sub-folders option to search recursively from the directory specified in the Directory Path text-box. The Include sub-folders option cannot be accessed if the Test files checkbox is checked.</li> <li>Match case option: If unselected, case is ignored in the search.</li> <li>Match whole word option: \u00a0If set to true, parts of words will not count as matches.</li> <li>Look at these file types: Search only files with the specified file type(s).</li> </ul>"},{"location":"Guide/find_and_replace_dialog/#find-and-replace-tab","title":"Find and Replace Tab","text":"<p>There is only one significant difference between the Find in Files Tab and Find and Replace Tab: the Replace with text-box.</p> <ul> <li>Replace with text-box: All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.</li> </ul>"},{"location":"Guide/find_results_view/","title":"Find Results View","text":""},{"location":"Guide/find_results_view/#purpose","title":"Purpose","text":"<p>Displays results for the Find and Replace Dialog.</p>"},{"location":"Guide/find_results_view/#how-to-open","title":"How to Open","text":"<p>The Find Results view is part of the Default Layout.</p>"},{"location":"Guide/find_results_view/#messages","title":"Messages","text":"<p>Double click on a message to go to the corresponding source line.</p>"},{"location":"Guide/find_results_view/#widgets","title":"Widgets","text":"<p>From left to right:</p> <ul> <li>The text box is a search box.</li> <li>Find Next Entry</li> <li>Copy Selected</li> <li>Clear All Text</li> </ul>"},{"location":"Guide/find_text_dialog/","title":"Find Text dialog","text":""},{"location":"Guide/find_text_dialog/#purpose","title":"Purpose","text":"<p>Find occurrences of the Search Term text in the currently visible Source Editor.</p>"},{"location":"Guide/find_text_dialog/#how-to-open","title":"How to Open","text":"<p>Use main menu <code>Edit &gt; Find</code> or type Ctrl+F on the keyboard when the source editor is active.</p>"},{"location":"Guide/find_text_dialog/#find-tab","title":"Find Tab","text":"<ul> <li>Find what: Place the string you would like to search for in the Find what text box.</li> <li>Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder.</li> <li>Match case option: If unselected, case is ignored in the search.</li> <li>Match whole word option: \u00a0If set to true, parts of words will not count as matches.</li> </ul>"},{"location":"Guide/git_integration/","title":"Rapise and Git Integration","text":""},{"location":"Guide/git_integration/#purpose","title":"Purpose","text":"<p>Git has become the de-facto standard for code versioning.</p> <p>SpiraTest Integration built into Rapise meets basic needs of distributed development, source control and file versioning. However the growth of the team and increasing complexity of project as well as introduction of CI/CD and build pipelines making it more natural to use Git for the test source management.</p> <p>Also it is common practice to store test files together with source code and documentation, and this makes another vote for having it all in Git repository.</p>"},{"location":"Guide/git_integration/#when-to-use","title":"When to Use","text":"<p>You probably don't need Git support, if you are developing few or many tests alone or in a small team.</p> <p>And you will benefit from Git if it is already used in your project, or you have a large project containing many dependent tests, shared data and files.</p>"},{"location":"Guide/git_integration/#git-repository","title":"Git Repository","text":"<p>Having Git means having one more node on the diagram:</p> <p></p> <p>In addition to Rapise used for test development and SpiraTeam used for test management, we have a Git Repository used for source version control.</p> <p>When linking a test case to Spira, Rapise should know that test sources are managed by Git and don't need to be stored into the repository.</p>"},{"location":"Guide/git_integration/#usage","title":"Usage","text":""},{"location":"Guide/git_integration/#git-client","title":"Git Client","text":"<p>In the majority of cases when tests are managed by Git, the source repository contains additional information and files.</p> <p>You need to have a git client installed.</p> <p>All standard Git operations, such as commit, fetch, pull and push are done externally in the git client.</p>"},{"location":"Guide/git_integration/#linking-new-test-to-spira","title":"Linking New Test to Spira","text":"<p>When using Save to Spira button, Rapise checks if current test is stored within the Git repository folder structure. And, if existing repository has been identified, the following prompt is shown:</p> <p></p> <p>This means that Rapise detected that folder containing the test is within the <code>.git</code> repository structure. And it suggests to keep your test files in Git and only put a link into the Spira Test Case.</p>"},{"location":"Guide/git_integration/#how-it-is-stored-in-spira","title":"How It is Stored in Spira","text":"<p>When Test Case is Saved to Spira in a standard manner, it shows the folder that is created in Spira Documents:</p> <p></p> <p>After saving, the folder will contain test file versions:</p> <p></p> <p>And the test case will refer to an <code>.sstest</code> document within this folder:</p> <p></p> <p>Important</p> <p>Rapise 7 and lower mirrors folder structure of a test. If there are sub-tests then corresponding sub-folders are created in Documents of Spira.  </p> <p>Rapise 8.0+ creates plain structure. All files are stored within the main folder of a test. This type of repository increases saving/loading speed.</p> <p></p>"},{"location":"Guide/git_integration/#how-it-is-stored-in-git","title":"How It is Stored in Git","text":"<p>When the test stays in Git then a folder in Spira is also created (in pre Rapise 8.0 the root folder is used):</p> <p></p> <p>Spira Documents section contains only one item - a link to a local file starting with <code>%GITROOT%</code>:</p> <p></p> <p>And the Test Case uses that link:</p> <p></p> <p>This means that to access this file, there should be an environment variable <code>%GITROOT%</code> pointing to the root of the local repository containing the test.</p>"},{"location":"Guide/git_integration/#saving-existing-test-and-synctospiracmd","title":"Saving Existing Test and SyncToSpira.cmd","text":"<p>If Test stored in Git and linked to Spira then pressing on Save to Spira link again have no visual effect - the test is already linked to test case and file versioning should be done by user using the installed git client.</p> <p>Sometimes we want to sync test file with Git every time we press <code>Save to Spira</code>. It is common practice to do commit, pull and then push every time we press it. This may be achieved by defining a file <code>SyncToSpira.cmd</code>.</p> <p>This file may be stored either common folder:</p> <p><code>c:\\Users\\Public\\Documents\\Rapise\\SyncToSpira.cmd</code></p> <p>Or in the root of current test framework.</p> <p>It gets path to the framework root as a 1<sup>st</sup> parameter (%1) and path to <code>.sstest</code> as 2<sup>nd</sup> (%2).</p>"},{"location":"Guide/git_integration/#basic-synctospiracmd","title":"Basic SyncToSpira.cmd","text":"<p>Simplest, command line only implementation may look like that:</p> <pre><code>@echo Test is being saved to Spira %2\n@echo Framework Root: %1\npushd %1\n\ngit commit -m \"Auto-Save from Rapise\"\ngit pull\ngit push\n\npopd\n</code></pre>"},{"location":"Guide/git_integration/#interactive-synctospiracmd","title":"Interactive SyncToSpira.cmd","text":"<p>Depending on your preferred git client, you may specify different implementations of <code>Save to Spira</code>. For example, here is an interactive version of it using TortoiseGit:</p> <pre><code>@echo ===============================\n@echo Test is being saved to Spira %2\n@echo Framework Root: %1\n\n@set PATH=%PATH%;\"c:\\Program Files\\TortoiseGit\\bin\"\n\npushd %1\n\ntortoisegitproc /command:commit\ntortoisegitproc /command:pull\ntortoisegitproc /command:push\n\npopd\n\n@echo ===============================\n</code></pre>"},{"location":"Guide/git_integration/#executing-with-rapiselauncher","title":"Executing With RapiseLauncher","text":"<p>RapiseLauncher may execute scheduled test sets containing Test Cases linked to Git and having <code>%GITROOT%</code> in the file reference just like other test cases. Depending on how you want the source code to be checked out during execution there are two ways on specifying the <code>%GITROOT%</code>.</p>"},{"location":"Guide/git_integration/#checkout-by-rapiselauncher","title":"Checkout By RapiseLauncher","text":"<p>There are two ways on telling RapiseLauncher where the origin from which Git is supposed to do a checkout: using Spira custom properties or using system environment variables.</p>"},{"location":"Guide/git_integration/#using-git-credentials-in-spira-dashboard","title":"Using Git Credentials in Spira Dashboard","text":"<p>This is the recommended and most convenient way. It is described in Spira Dashboard section.</p>"},{"location":"Guide/git_integration/#using-test-set-custom-properties-in-spira","title":"Using Test Set Custom Properties in Spira","text":"<p>Rapise 8.0+</p> <p>If you have Rapise 8.0+ you may set Git properties for any test set without creating custom properties. You may do it in Spira Dashboard in Test Sets view:</p> <p></p> <p>In this case, you need to add custom fields to the Test Set definition in Spira:</p> <p></p> <ul> <li>GitUrl - Git remote repository URL. I.e. <code>https://github.com/Inflectra/rapise-samples</code>.</li> <li>GitUser - optional. Needed when repository is protected and requires an authentication.</li> <li>GitPassword - optional. Username for authentication.</li> <li>GitBranch - optional. You link test case to specific branch instead of default <code>master</code> branch.</li> <li>GitRoot - optional. Target folder for checkout. If empty or absent, default Rapise Launcher temp folder is used.</li> </ul>"},{"location":"Guide/git_integration/#using-system-environment-variables","title":"Using System Environment Variables","text":"<p>In this case you may have only one checkout source for all test sets executed by RapiseLauncher on the given host. It is fine if your host is dedicated to run tests from specific repository and is a bit easier to set up.</p> <p>In this case you need to define system variables named exactly the same as corresponding custom properties described in the previous block: GitUrl, GitUser, GitPassword, GitBranch, GitRoot. All but GitUrl are optional.</p> <p>When both Environment Variable and Spira Custom Property are defined and custom property value is non-empty, then Custom Property's value is used.</p>"},{"location":"Guide/git_integration/#checkout-externally","title":"Checkout Externally","text":"<p>In CI/CD systems it is typical that test sources are checked out before the pipeline execution and already present on the local drive. In this case no need to define custom properties for Test Set (or, if already defined, leave them empty). The only thing that is required is <code>GITROOT</code> variable that should point to the root of the local Git repository.</p> <p>For example, if the pipeline checks the sources to <code>c:\\Build</code> folder from the Url <code>https://github.com/Inflectra/rapise-samples</code> the <code>GITROOT</code> should be set to <code>C:\\Build</code> so that the test link <code>%GITROOT%\\CreateNewAuthor.sstest</code> gets correctly resolved to <code>c:\\Build\\rapise-samples\\CreateNewAuthor\\CreateNewAuthor.sstest</code>.</p>"},{"location":"Guide/git_integration/#see-also","title":"See Also","text":"<ul> <li>Demo of Git Integration (video)</li> <li>Frameworks</li> <li>Spira Integration</li> </ul>"},{"location":"Guide/global_objects/","title":"Defining Global Objects","text":"<p>Note</p> <p>This feature requires Rapise 6.6+</p>"},{"location":"Guide/global_objects/#why","title":"Why","text":"<p>If you are building a framework and write custom functions in JavaScript you may combine the functions and define a global object. It will make RVL more readable and easier to write.</p> <p>Compare variants A and B.</p> <p></p> <p>In variant A you choose <code>Functions</code> as an object and then select the custom function. In variant B you choose the global object and then it's action. The global object and it's actions can be seen in the Object Tree:</p> <p></p>"},{"location":"Guide/global_objects/#how","title":"How","text":"<p>Let's see how to define your own global object.</p> <p>First, you need a JavaScript file where you will define the actions of the object and declare the object itself. A good candidate for such a file is the main file of a user-defined library or simply <code>User.js</code>.</p> <p>We'll use an example to explain the format of object definition. Here is the definition of a global object <code>MyApp</code>.</p>"},{"location":"Guide/global_objects/#example","title":"Example","text":"<pre><code>// MyApp definition\n// to generate metadata press Ctrl-Shift-F5\n\nfunction MyApp_Launch()\n{\n\n}\n\nfunction MyApp_Close()\n{\n\n}\n\nfunction MyApp_Login(/**string*/ username, /**string*/ password)\n{\n    Tester.Message(\"Logging as \" + username + \"/\" + password);\n}\n\n_paramInfoMyApp_Login = {\n    _description: \"Logs into the application\",\n    _type: \"boolean\",\n    _returns: \"`true` if login is ok\",\n    username:\n    {\n        description: \"Name of the user\"\n    },\n    password:\n    {\n        description: \"Pwd of the user\"\n    }\n}\n\nSeSGlobalObject(\"MyApp\");\n</code></pre>"},{"location":"Guide/global_objects/#format","title":"Format","text":"<p>Every action of <code>MyApp</code> object is prefixed with <code>MyApp_</code>. We have three such actions: <code>Launch</code>,<code>Close</code> and <code>Login</code>.</p> <pre><code>function MyApp_Launch()\n{\n\n}\n\nfunction MyApp_Close()\n{\n\n}\n\nfunction MyApp_Login(/**string*/ username, /**string*/ password)\n{\n    Tester.Message(\"Logging as \" + username + \"/\" + password);\n}\n</code></pre> <p>To declare the object use <code>SeSGlobalObject</code> call. It must be placed after definitions of all the actions. </p> <pre><code>SeSGlobalObject(\"MyApp\");\n</code></pre> <p>You may specify action parameter types through comments <code>/**&lt;type&gt;*/</code>.</p> <pre><code>function MyApp_Login(/**string*/ username, /**string*/ password)\n</code></pre> <p>You may also describe actions and parameters using <code>paramInfo</code> objects (should have a name of format <code>_paramInfo&lt;action function name&gt;</code>).</p> <pre><code>_paramInfoMyApp_Login = {\n    _description: \"Logs into the application\",\n    _type: \"boolean\",\n    _returns: \"`true` if login is ok\",\n    username:\n    {\n        description: \"Name of the user\"\n    },\n    password:\n    {\n        description: \"Pwd of the user\"\n    }\n}\n</code></pre>"},{"location":"Guide/global_objects/#compile-metadata","title":"Compile Metadata","text":"<p>When the object is declared you need to compile the metadata for it. To do this open the file where you defined the object and press Ctrl+Shift+F5.</p>"},{"location":"Guide/global_objects/#object-icons","title":"Object Icons","text":"<p>If you want a specific icon for your object then create two <code>.png</code> files with dimensions <code>16x16</code> and <code>32x32</code>, name them as <code>&lt;object name&gt;16.png</code> and <code>&lt;object name&gt;32.png</code> and place them beside the file where you declared the object.</p>"},{"location":"Guide/global_objects/#global-object-vs-page-object","title":"Global Object vs Page Object","text":"<p>When comparing a Global Object and a Page Object, the following points should be noted:</p> <ol> <li>The structure of a Global Object is identical to that of a Page Object in JavaScript mode.</li> <li>However, a Page Object can have its own object repository and use objects from it.</li> <li>This includes widgets and API entry points that are available for a Page Object.</li> <li>A Global Object can be defined in a custom Library.</li> <li>A Page Object can only be defined as part of a testing framework.</li> <li>It is not possible to import or move a single Global Object, but it is possible to copy the entire Library that contains it.</li> <li>A Page Object can be imported from one testing framework to another.</li> </ol>"},{"location":"Guide/global_objects/#see-also","title":"See Also","text":"<ul> <li>How to define a global object (video)</li> </ul>"},{"location":"Guide/global_variables/","title":"Global Variables","text":""},{"location":"Guide/global_variables/#purpose","title":"Purpose","text":"<p>Global variables are variables that can be accessed anywhere in the script.</p> <p>A global variable may be declared one or more times. For example, you may declare it in RVL and in JavaScript to share the same value.</p> <p>Usually, global variables are defined in the RVL Sheet, <code>Common.js</code>, or in one of the <code>User.js</code> files.</p>"},{"location":"Guide/global_variables/#usage","title":"Usage","text":""},{"location":"Guide/global_variables/#using-rvl","title":"Using RVL","text":"<p>See Global Variables in RVL.</p>"},{"location":"Guide/global_variables/#using-userjs","title":"Using User.js","text":"<p>Any variable defined in the <code>User.js</code> is assumed to be a global variable.</p> <pre><code>// Note, the variable should be declared outside the scope of any function to be global\nvar g_myGlobalVar = 5;\n\nfunction SomeFunction()\n{\n}\n...\n</code></pre>"},{"location":"Guide/global_variables/#using-commonjs","title":"Using Common.js","text":"<p>You may want to have a common file with global variable re-used across different tests. In this case you need to include the <code>Common.js</code> in the root of the <code>User.js</code> (it is not recommended to do include from within the <code>Test()</code> function).</p> <p><code>Common.js</code>: <pre><code>// Global variable lazy declaration:\nvar g_myGlobalVar = 5;\n</code></pre></p>"},{"location":"Guide/global_variables/#using-sesontestinit","title":"Using SeSOnTestInit","text":"<p>Note: This is an older way of defining local variables. Since Rapise 3 new way is preferred.</p> <p>Define your global variables in SeSOnTestInit(). Because Rapise uses JavaScript, you can initialize global variables inside of functions. See the sample <code>SeSOnTestInit()</code> below.</p> <pre><code>SeSOnTestInit(function () {\n    global.number_of_visited_links = 0; // This variable becomes global\n \u00a0  var local_var = 5; // This variable is local for TestInit function\n});\n</code></pre> <p>The keyword var gives variables local scope.\u00a0A variable initialized <code>global.varname=...</code> automatically becomes a global.</p>"},{"location":"Guide/global_variables/#see-also","title":"See Also","text":"<ul> <li>See Making Multiple Recordings for details on what effect the script recorder will have on your test script.</li> <li>For details on the structure of the test script, see Understanding the Script.</li> </ul>"},{"location":"Guide/glossary/","title":"Glossary","text":"<p>This glossary provides definitions for terms used in this guide:</p> <ul> <li>API: Application Programming Interface</li> <li>AUT: Application Under Test</li> <li>DOM: Document Object Model</li> <li>Framework: A way to organize test cases, test sets, data, parameters, and configurations using a holistic approach.</li> <li>GIT: Global Information Tracker. Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</li> <li>GUI: Graphical User Interface</li> <li>IDE: Integrated Development Environment</li> <li>JSON: JavaScript Object Notation</li> <li>Page Object / Module: A user-defined global object with a repository and actions, which is part of a testing framework.</li> <li>REST: REpresentation State Transfer</li> <li>SOAP: Simple Object Access Protocol</li> <li>SPIRA: SpiraTest or SpiraTeam - the preferred test management tool for Rapise.</li> <li>UI: User Interface</li> <li>XML: eXtensible Markup Language</li> </ul>"},{"location":"Guide/howtos/","title":"How-Tos","text":"<p>This section focuses on specific tasks that a Rapise user might want to accomplish.</p> <ul> <li>Accessing Files and I/O Functions</li> <li>Change Test Entry Point</li> <li>Change the libraries being used</li> <li>Changing the URL of Website being Tested</li> <li>Create a New Test</li> <li>Deal with a Simulated Object</li> <li>Detecting the Presence of an Object</li> <li>Do Absolute Analog Recording</li> <li>Do Relative Analog Recording</li> <li>Extracting test data from an Excel spread sheet</li> <li>Learn an Object</li> <li>Object Not Found - How to Fix</li> <li>Open a Test</li> <li>Restoring the Default Layout</li> <li>Sending Special Keys to the Current Application</li> </ul>"},{"location":"Guide/image_capture/","title":"Image Capture","text":""},{"location":"Guide/image_capture/#purpose","title":"Purpose","text":"<p>The Drawing Tools image editor lets you capture a section of the current screen or application under test, add annotations to help document the \u00a0image and then attach the final result to the current test case, test step, or manual test result.</p>"},{"location":"Guide/image_capture/#how-to-open","title":"How to Open","text":"<p>You can open the Drawing Tools dialog box by clicking on the Image icon on the various rich text editors in Rapise. When you do that, Rapise will minimize itself and display the following screen:</p> <p></p> <p>You now need to draw a rectangle on your screen that tells Rapise which part of the screen you want to capture. Once that is done, the image editor will open with that part of the screen selected. If you click ESC on the keyboard, it will just open the editor with no initial image.</p>"},{"location":"Guide/image_capture/#image-editor-toolbar","title":"Image Editor Toolbar","text":"<p>The image editor provides the following tools:</p> <p></p> <ul> <li>Image Capture - this lets you discard the current image and capture a new screenshot instead</li> <li>Paste From Clipboard - this lets you paste in an image from the Windows clipboard</li> <li>Open - this lets you open an existing image saved on your local computer</li> <li>Save - this lets you save the current image to your local computer</li> <li>Pointer - this lets you select an annotation to edit (arrow, rectangle, ellipse, line, text, etc.)</li> <li>Arrow - this lets you draw an arrow in the current color on top of the current image</li> <li>Rectangle - this lets you draw square / rectangle in the current color on top of the current image</li> <li>Ellipse - this lets you draw a circle / ellipse in the current color on top of the current image</li> <li>Line - this lets you draw a straight line in the current color on top of the current image</li> <li>Pencil - this lets you draw freehand in the current color on top of the current image</li> <li>Text - this lets you add text in the current color and current font on top of the current image. You will need to draw a rectangle to mark the size of the text box before entering in the text.</li> <li>Undo - this will undo the last operation</li> <li>Redo - this will redo the last operation</li> <li> <p>Font Name - this will let you change the font family and size:</p> <p></p> </li> <li> <p>Color - This lets you change the current color (used in the various annotations):     </p> </li> <li> <p>Line Width - This lets you change the current line width (used in the various annotations)</p> </li> </ul>"},{"location":"Guide/image_capture/#image-editor-footer","title":"Image Editor Footer","text":"<p>The footer of the Drawing Tools provides the following options:</p> <p></p> <ul> <li>Scale - this changes the zoom of the current window, allowing you to more easily view small/large images</li> <li>Accept - this accepts the current image and inserts it into the test case, test step or test run that was being edited.</li> </ul>"},{"location":"Guide/incident_logging/","title":"Incident Logging","text":""},{"location":"Guide/incident_logging/#screenshot","title":"Screenshot","text":""},{"location":"Guide/incident_logging/#purpose","title":"Purpose","text":"<p>The New Incident logging dialog box lets you log a new incident (also known as a bug or defect) into a connected SpiraTest instance. If you logged the new incident during a manual test execution, it will be linked to the current test run.</p>"},{"location":"Guide/incident_logging/#how-to-open","title":"How to Open","text":"<p>You can open the New Incident using <code>Tools &gt; New Incident</code> menu, or by clicking the <code>Log Incident</code> button on the Manual Playback dialog box.</p>"},{"location":"Guide/incident_logging/#details-description","title":"Details / Description","text":"<p>The Details/Description section lets you enter the short name and long description of the new incident as well as the following fields:</p> <ul> <li>Type - the type of the incident (e.g. bug)</li> <li>Detected By - who found the bug (typically your user)</li> <li>Priority - how important the bug is</li> <li>Severity - how critical the bug is</li> <li>Owned By - who the bug should be assigned to (or left unassigned)</li> <li>Detected Release - which version of the system was the bug found in</li> <li>Resolved Release - which version of the system should the bug be fixed in</li> <li>Verified Release - which version of the system was the bug retested in</li> <li>Custom Fields - in addition any custom fields created in your Spira instance will be displayed</li> </ul>"},{"location":"Guide/incident_logging/#comments","title":"Comments","text":"<p>The Comments section lets you enter a comment that will be logged with the new incident. The field is a rich text field that can contain formatted text.</p>"},{"location":"Guide/incident_logging/#schedule","title":"Schedule","text":"<p>The Schedule section lets you enter in schedule/effort related information for the new incident:</p> <ul> <li>Start Date - This is the planned start date of the new incident</li> <li>End Date - This is the planned completion date of the new incident</li> <li>Estimated Effort - This is the number of hours the incident is expected to take</li> <li>Actual Effort - This is the number of hours that were actually expended</li> <li>Remaining Effort - This is the number of hours remaining to fix the incident In addition, the following calculated fields will be displayed:</li> <li>Percent Complete - This is the measure of much of the incident has been completed. It is calculated from 100% - (Remaining Effort / Estimated Effort)</li> <li>Projected Effort - This the current measure of how long the incident is expected to take based on current information. It is calculated from (Actual Effort + Remaining Effort)</li> </ul>"},{"location":"Guide/incident_logging/#attachments","title":"Attachments","text":"<p>This section displays the list of attachments associated with the new incident. Since Rapise already has a screenshot capture utility built-in, this section is typically not used.</p>"},{"location":"Guide/including_other_files/","title":"Including other Files","text":""},{"location":"Guide/including_other_files/#purpose","title":"Purpose","text":"<p>The eval keyword lets you use external functions and data structures in your test script; <code>eval</code> is a JavaScript reserved word.</p>"},{"location":"Guide/including_other_files/#usage","title":"Usage","text":"<p>See the example below:</p> <pre><code>eval(File.Include(\"myfunctions.js\"));\n\nfunction Test()\n{\n    // Use something from myfunction.js\n}\n</code></pre> <p>You may add an include statement by dragging a <code>.js</code> file from the Test Files tree and dropping it into <code>.js</code> script.</p> <p>It is recommended to put common functions and variables into Common.js file in your framework. However, if you have another .js file or files, you can add an include statement(s) directly into <code>Common.js</code>.</p> <p>Additionally, you have the option to tag your external <code>.js</code> file as <code>shared</code>, which will automatically load it for each test run. This eliminates the need for an include statement.</p> <p></p>"},{"location":"Guide/including_other_files/#see-also","title":"See Also","text":"<ul> <li>Understanding the Script</li> </ul>"},{"location":"Guide/internal_debugger/","title":"Internal Debugger","text":""},{"location":"Guide/internal_debugger/#purpose","title":"Purpose","text":"<p>The Internal Debugger provides:</p> <ul> <li>Persistent Breakpoints</li> <li>Execution Control</li> <li>Watch View</li> <li>Variable/Call Stack View</li> <li>Tooltips.</li> </ul>"},{"location":"Guide/internal_debugger/#usage","title":"Usage","text":"<p>To enable debugger for a test click  button on the toolbar or use menu <code>Tools &gt; Debugger</code>:</p> <p></p> <p>Set a breakpoint on the first line of the <code>Test</code> function and click <code>Play</code> button on the toolbar.</p> <p>If you start debugging for the first time Rapise may prompt you to install Microsoft Script Debugger:</p> <p></p> <p>Follow the prompts. When Microsoft Script Debugger is installed click <code>Play</code> once again.</p> <p>Rapise will stop execution at the first line of the test and show debugger controls and views.</p> <p></p> <p>In the screenshot above, you can see the Debugger buttons available on the toolbar at the top of the screen as well as the Variables and Watch sections in the lower pane. Next statement is highlighted in yellow color.</p>"},{"location":"Guide/java_awt_swing_testing/","title":"Java AWT/Swing Testing","text":""},{"location":"Guide/java_awt_swing_testing/#purpose","title":"Purpose","text":"<p>Rapise supports the testing of Java applications using either the Abstract Window Toolkit (AWT) or Swing graphic user interface toolkits. For maximum flexibility, Rapise can connect to your choice of JVM.</p>"},{"location":"Guide/java_awt_swing_testing/#supported-java-versions","title":"Supported Java Versions","text":"<p>The Rapise Java Bridge is currently compatible with any version of the JRE, from Java 3 to Java 18.</p> <p>For Java 9 and above, Rapise Java Bridge works in Windows Enterprise and non-Enterprise editions if the application is running with Java JDK. For applications running with Java JRE, Rapise Java Bridge works only in Windows editions other than Enterprise.</p>"},{"location":"Guide/java_awt_swing_testing/#java-bridge-installation","title":"Java Bridge Installation","text":"<p>The most flexible way to run a Java application with automation is to modify the command line. This can be done with a <code>.bat</code> file containing the necessary changes to the command line or to the environment variables.</p> <p>For versions of Java 8 or less it is also possible to automatically install Rapise Java Bridge as an extension. Installing the extension affects all applications launched by this Java instance.</p>"},{"location":"Guide/java_awt_swing_testing/#manual-installation-all-java-versions","title":"Manual Installation (all Java versions)","text":""},{"location":"Guide/java_awt_swing_testing/#changing-the-command-line","title":"Changing the Command Line","text":"<p>If you application is executed explicitly, i.e.:</p> <pre><code>java -cp . org.sample.MyButton\n</code></pre> <p>Then what you need is to add the following values:</p> <pre><code>set RAPISE_PATH=c:\\Program Files (x86)\\Inflectra\\Rapise\nset EXT_PATH=%RAPISE_PATH%\\Extensions\\JavaWrapper\nset EXT_JARS=%EXT_PATH%\\json.jar;%EXT_PATH%\\jaccess.jar;%EXT_PATH%\\smartestudio-bridge.jar\nset EXT_OPTS=-Djavax.accessibility.assistive_technologies=com.smartesoft.smartestudio.accessibility.AccessBridge\n\njava.exe \"%EXT_OPTS%\" -cp \"%EXT_JARS%\";. org.sample.MyButton\n</code></pre> <p>If your application is executed using the JAR file, i.e.:</p> <pre><code>java -jar applet.jar\n</code></pre> <p>Then you need to figure out <code>applet.jar</code>'s main class and pass it explicitly to the application while the JAR should be a part of the classpath i.e.:</p> <pre><code>set RAPISE_PATH=c:\\Program Files (x86)\\Inflectra\\Rapise\nset EXT_PATH=%RAPISE_PATH%\\Extensions\\JavaWrapper\nset EXT_JARS=%EXT_PATH%\\json.jar;%EXT_PATH%\\jaccess.jar;%EXT_PATH%\\smartestudio-bridge.jar\nset EXT_OPTS=-Djavax.accessibility.assistive_technologies=com.smartesoft.smartestudio.accessibility.AccessBridge\n\njava.exe \"%EXT_OPTS%\" -cp \"%EXT_JARS%\";applet.jar com.smartesoft.java.aut.AwtFrame\n</code></pre> <p>Note, that we removed the <code>-jar</code> switch and added <code>applet.jar</code> to the <code>-cp</code> input key.</p> <p>If have a <code>.jar</code> file and need to figure out main class then you may run <code>cmd.exe</code> in a folder with <code>.jar</code> and use a command like that (just replace <code>applet.jar</code> appropriately):</p> <pre><code>jar xf applet.jar META-INF/MANIFEST.MF &amp; type .\\META-INF\\MANIFEST.MF &amp; del /s/f/q META-INF &amp; rmdir META-INF\n</code></pre> <p>The output should contain Main-class (marked as yellow):</p> <p></p> <p>so you may copy it and use in the modified application launcher. </p> <p>Note: Sample Java shipped with Rapise contains <code>x86run.cmd</code> that is launching the <code>applet.jar</code> with Rapise Java Bridge enabled. You may use it as a reference.</p>"},{"location":"Guide/java_awt_swing_testing/#automatic-installation-java-3-8","title":"Automatic Installation (Java 3-8)","text":"<p>In order to use a particular Java Virtual Machine (JVM) with Rapise you need to install Java Bridge into it. Installation process consists of several simple steps:</p> <ol> <li> <p>Click on the <code>Settings &gt; Java</code> button. This will launch the Java Bridge installation dialog:</p> <p></p> </li> <li> <p>Choose target JVM in the list of available Java machines and press Install button</p> </li> <li> <p>Verify that the installation is successful</p> </li> </ol> <p>To verify that the bridge installed correctly, check that the following files have been installed inside your Java VM (typically found at <code>C:\\Program Files (x86)\\Java\\jre1.x.x_xxx</code>):</p> <ul> <li><code>lib\\accessibility.properties</code></li> <li><code>lib\\ext\\jaccess.jar</code></li> <li><code>lib\\ext\\smartestudio-bridge.jar</code></li> <li><code>lib\\ext\\json.jar</code></li> </ul> <p>If you don't see all three of these files then it means the bridge was not installed correctly.</p>"},{"location":"Guide/java_awt_swing_testing/#troubleshooting-the-configuration","title":"Troubleshooting the Configuration","text":"<p>To help you make sure that your environment is correctly setup and also to help you try out Rapise, we have a sample application called AUTJava (AUT = Application Under Test) that can be found in the folder:</p> <p><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA</code></p> <p>To run the application, right-click on the x86run.cmd file and choose Run as Administrator.</p> <p></p> <p>If the application doesn't appear correctly then you may need to set the <code>JAVA_HOME</code> environment variable.</p> <p>To do this, open up the Windows control panel and choose <code>System &gt; Advanced System Settings</code>:</p> <p></p> <p>Click on the Environment Variables button:</p> <p></p> <p>Click on the option to add a System Variable and then add the following:</p> <ul> <li>Variable = JAVA_HOME</li> <li>Value = C:\\Program Files (x86)\\Java\\jre1.x.x_xxx</li> </ul> <p>(you will need to match the location of your actual Java VM)</p> <p>Now you should be able to launch the AUTJava sample application. </p> <p>To verify that Rapise is configured correctly, click on the SPY menu in Rapise and choose Java.</p> <p>Then click on the main Spy icon and the Java Spy will start up: </p> <p>Click the Ctrl+G button combination to start tracking and then move the mouse over one of the buttons in the sample application and click Ctrl+G again. You should see the following:</p> <p></p> <p>Which shows that Rapise is able to see the AWT button (in this example) and its properties. However if you see the following instead:</p> <p></p> <p>it means that you didn't run the sample application using \"Run as Administrator\", close the application and try again using \"Run as Administrator\" and you will see:</p> <p></p> <p>You are now ready to start testing your real application. Make sure to also start it using \"Run as Administrator\".</p>"},{"location":"Guide/java_awt_swing_testing/#analyzing-the-java-application-using-the-java-spy","title":"Analyzing the Java Application using the Java Spy","text":"<p>With Spy you can walk along the tree of Java objects in your application.</p> <p></p>"},{"location":"Guide/java_awt_swing_testing/#save-to-file","title":"Save to File","text":"<p>You can save the Spy data for a particular node and all its descendants to a text file.</p> <p></p> <p></p>"},{"location":"Guide/java_awt_swing_testing/#reflection-information","title":"Reflection Information","text":"<p>You can save reflection information for a java class used to implement a GUI control.</p> <p></p> <p></p>"},{"location":"Guide/java_swt/","title":"Java SWT","text":""},{"location":"Guide/java_swt/#overview","title":"Overview","text":"<p>The Java SWT GUI library is an alternative to Swing developed by the Eclipse foundation and it provides Java applications the ability to access the native GUI libraries of the operating system using JNI (Java Native Interface) in a manner that is similar to those programs written using operating system-specific APIs. Programs that call SWT are portable, but the implementation of the toolkit, despite part of it being written in Java, is unique for each platform.</p> <p>Rapise supports the testing of applications written using Java Standard Widget Toolkit (SWT) using its JavaSWT extensions library (which is based on the UI Automation technology in Windows). </p> <p>Since SWT displays applications using native Windows controls it doesn\u2019t need the Java Access Bridge to be installed (unlike Java AWT/Swing applications).</p>"},{"location":"Guide/java_swt/#sample-application","title":"Sample Application","text":"<p>In the Samples section of the Rapise Start Page you should see our sample Java SWT AUT:</p> <p></p> <p>You can use this application with Rapise to try out the Java SWT testing capabilities:</p> <ul> <li> <p>You should record tests using the special SWT library</p> </li> <li> <p>You should use the UIAutomation Spy for inspecting objects.</p> </li> </ul>"},{"location":"Guide/javascript_ide/","title":"JavaScript IDE","text":""},{"location":"Guide/javascript_ide/#purpose","title":"Purpose","text":"<p>The JavaScript IDE includes an editor and a debugger.</p>"},{"location":"Guide/javascript_ide/#usage","title":"Usage","text":"<p>Simply open a script to view the editing features; create a breakpoint and play the script to view the debugging features.</p>"},{"location":"Guide/javascript_ide/#see-also","title":"See Also","text":"<ul> <li>Learn about MS JScript.</li> </ul>"},{"location":"Guide/jscript_language_reference/","title":"JScript Language Reference","text":"<p>Important</p> <p>Starting from Rapise 8.0, the default JavaScript engine used is NodeJS v14.15.3 runtime. Starting from Rapise 8.1, the default JavaScript engine used is NodeJS v18.18.0 runtime.</p> <p>In versions prior to 6.7, Rapise used Microsoft JScript with WScript as the only available JavaScript engine. This document provides a language reference for that older version.</p> <p>If you have existing tests or testing frameworks that are not compatible with NodeJS, you have the option to switch back to using WScript.</p> <p>You can set the desired engine in two locations:</p> <ol> <li> <p>In the Test Settings (choose from Default, Node, WScript). The Default option uses the engine defined in the Global Options.</p> </li> <li> <p>In the Global Options (choose from Default, Node, WScript). The Default option means Node.</p> </li> </ol>"},{"location":"Guide/jscript_language_reference/#nodejs-support-features-and-limitations","title":"NodeJS Support Features and Limitations","text":""},{"location":"Guide/jscript_language_reference/#features","title":"Features","text":"<ol> <li>NodeJS v14 contains most of latest features of JavaScript including EcmaScript2015 (ES6) and beyond. You may see more detailed list of features here.</li> <li>You may find the most complete and up to date language reference at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference.</li> <li>You may use most of available npm packages in your test scripts. You may include <code>node_modules</code> folders in the root of your testing framework (i.e. <code>%WORKDIR%\\node_modules</code>).</li> </ol>"},{"location":"Guide/jscript_language_reference/#limitations","title":"Limitations","text":"<ol> <li> <p>NodeJS engine now runs in 32 bit mode. This is required to keep compatibility with <code>ActiveXObject</code> support that is an essential part of WScript but has to be emulated in NodeJS.</p> </li> <li> <p>Rapise has own copy of node.exe installed. So if you have npm modules installed globally and need to use them in your test, you have to install them locally into the framework.</p> </li> </ol>"},{"location":"Guide/jscript_language_reference/#reference","title":"Reference","text":"<p>The language reference covers EcmaScript v2 supported by default JScript Engine. It is missing majority of latest features, properties and methods. For example, there is no <code>Array.join</code> or <code>String.trim</code>. </p> <li>Feature Information</li> <li>Microsoft JScript Features - ECMA</li> <li>Microsoft JScript Features - Non-ECMA</li> <li>Errors</li> <ul> <li>JScript Run-time Errors</li> <li>JScript Syntax Errors</li> </ul> <li>Functions</li> <ul> <li>GetObject Function</li> <li>ScriptEngine Function</li> <li>ScriptEngineBuildVersion Function</li> <li>ScriptEngineMajorVersion Function</li> <li>ScriptEngineMinorVersion Function</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-a-c","title":"Methods A-C","text":"<ul> <li>abs Method</li> <li>acos Method</li> <li>anchor Method</li> <li>apply Method</li> <li>asin Method</li> <li>atan Method</li> <li>atan2 Method</li> <li>atEnd Method</li> <li>big Method</li> <li>blink Method</li> <li>bold Method</li> <li>call Method</li> <li>ceil Method</li> <li>charAt Method</li> <li>charCodeAt Method</li> <li>compile Method</li> <li>concat Method (Array)</li> <li>concat Method (String)</li> <li>cos Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-d-f","title":"Methods D-F","text":"<ul> <li>decodeURI Method</li> <li>decodeURIComponent Method</li> <li>dimensions Method</li> <li>encodeURI Method</li> <li>encodeURIComponent Method</li> <li>escape Method</li> <li>eval Method</li> <li>exec Method</li> <li>exp Method</li> <li>fixed Method</li> <li>floor Method</li> <li>fontcolor Method</li> <li>fontsize Method</li> <li>fromCharCode Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-g","title":"Methods G","text":"<ul> <li>getDate Method</li> <li>getDay Method</li> <li>getFullYear Method</li> <li>getHours Method</li> <li>getItem Method</li> <li>getMilliseconds Method</li> <li>getMinutes Method</li> <li>getMonth Method</li> <li>getSeconds Method</li> <li>getTime Method</li> <li>getTimezoneOffset Method</li> <li>getUTCDate Method</li> <li>getUTCDay Method</li> <li>getUTCFullYear Method</li> <li>getUTCHours Method</li> <li>getUTCMilliseconds Method</li> <li>getUTCMinutes Method</li> <li>getUTCMonth Method</li> <li>getUTCSeconds Method</li> <li>getVarDate Method</li> <li>getYear Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-i-m","title":"Methods I-M","text":"<ul> <li>indexOf Method</li> <li>isFinite Method</li> <li>isNaN Method</li> <li>italics Method</li> <li>item Method</li> <li>join Method</li> <li>lastIndexOf Method</li> <li>lbound Method</li> <li>link Method</li> <li>localeCompare Method</li> <li>log Method</li> <li>match Method</li> <li>max Method</li> <li>min Method</li> <li>moveFirst Method</li> <li>moveNext Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-p-r","title":"Methods P-R","text":"<ul> <li>parse Method</li> <li>parseFloat Method</li> <li>parseInt Method</li> <li>pop Method</li> <li>pow Method</li> <li>push Method</li> <li>random Method</li> <li>replace Method</li> <li>reverse Method</li> <li>round Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-s","title":"Methods S","text":"<ul> <li>search Method</li> <li>setDate Method</li> <li>setFullYear Method</li> <li>setHours Method</li> <li>setMilliseconds Method</li> <li>setMinutes Method</li> <li>setMonth Method</li> <li>setSeconds Method</li> <li>setTime Method</li> <li>setUTCDate Method</li> <li>setUTCFullYear Method</li> <li>setUTCHours Method</li> <li>setUTCMilliseconds Method</li> <li>setUTCMinutes Method</li> <li>setUTCMonth Method</li> <li>setUTCSeconds Method</li> <li>setYear Method</li> <li>shift Method</li> <li>sin Method</li> <li>slice Method (Array)</li> <li>slice Method (String)</li> <li>small Method</li> <li>sort Method</li> <li>splice Method</li> <li>split Method</li> <li>sqrt Method</li> <li>strike Method</li> <li>sub Method</li> <li>substr Method</li> <li>substring Method</li> <li>sup Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#methods-t-v","title":"Methods T-V","text":"<ul> <li>tan Method</li> <li>test Method</li> <li>toArray Method</li> <li>toDateString Method</li> <li>toExponential Method</li> <li>toFixed Method</li> <li>toGMTString Method</li> <li>toLocaleDateString Method</li> <li>toLocaleLowerCase Method</li> <li>toLocaleString Method</li> <li>toLocaleTimeString Method</li> <li>toLocaleUpperCase Method</li> <li>toLowerCase Method</li> <li>toPrecision Method</li> <li>toString Method</li> <li>toTimeString Method</li> <li>toUpperCase Method</li> <li>toUTCString Method</li> <li>ubound Method</li> <li>unescape Method</li> <li>unshift Method</li> <li>UTC Method</li> <li>valueOf Method</li> </ul>"},{"location":"Guide/jscript_language_reference/#objects","title":"Objects","text":"<ul> <li>ActiveXObject Object</li> <li>Array Object</li> <li>arguments Object</li> <li>Boolean Object</li> <li>Date Object</li> <li>Enumerator Object</li> <li>Error Object</li> <li>Function Object</li> <li>Global Object</li> <li>Math Object</li> <li>Number Object</li> <li>Object Object</li> <li>RegExp Object</li> <li>Regular Expression Object</li> <li>String Object</li> <li>VBArray Object</li> </ul>"},{"location":"Guide/jscript_language_reference/#operators","title":"Operators","text":"<ul> <li>Addition Assignment Operator (+=)</li> <li>Addition Operator (+)</li> <li>Assignment Operator (=)</li> <li>Bitwise AND Assignment Operator (&amp;=)</li> <li>Bitwise AND Operator (&amp;)</li> <li>Bitwise Left Shift Operator (&lt;&lt;)</li> <li>Bitwise NOT Operator (~)</li> <li>Bitwise OR Assignment Operator (|=)</li> <li>Bitwise OR Operator (|)</li> <li>Bitwise Right Shift Operator (&gt;&gt;)</li> <li>Bitwise XOR Assignment Operator (^=)</li> <li>Bitwise XOR Operator (^)</li> <li>Comma Operator (,)</li> <li>Comparison Operators</li> <li>Compound Assignment Operators</li> <li>Conditional (Ternary) Operator (?:)</li> <li>delete Operator</li> <li>Division Assignment Operator (/=)</li> <li>Division Operator (/)</li> <li>in Operator</li> <li>Increment (++) and Decrement (--) Operators</li> <li>instanceof Operator</li> <li>Left Shift Assignment Operator (&lt;&lt;=)</li> <li>Logical AND Operator (&amp;&amp;)</li> <li>Logical NOT Operator (!)</li> <li>Logical OR Operator (||)</li> <li>Modulus Assignment Operator (%=)</li> <li>Modulus Operator (%)</li> <li>Multiplication Assignment Operator (*=)</li> <li>Multiplication Operator (*)</li> <li>new Operator</li> <li>Right Shift Assignment Operator (&gt;&gt;=)</li> <li>Subtraction Assignment Operator (-=)</li> <li>Subtraction Operator (-)</li> <li>typeof Operator</li> <li>Unsigned Right Shift Operator (&gt;&gt;&gt;)</li> <li>Unsigned Right Shift Assignment Operator (&gt;&gt;&gt;=)</li> <li>void Operator</li> </ul>"},{"location":"Guide/jscript_language_reference/#properties","title":"Properties","text":"<ul> <li>0...n Properties</li> <li>$1...$9 Properties</li> <li>arguments Property</li> <li>callee Property</li> <li>caller Property</li> <li>constructor Property</li> <li>description Property</li> <li>E Property</li> <li>global Property</li> <li>hasOwnProperty Method</li> <li>ignoreCase Property</li> <li>index Property</li> <li>Infinity Property</li> <li>input Property ($_)</li> <li>isPrototypeOf Method</li> <li>lastIndex Property</li> <li>leftContext Property ($`)</li> <li>length Property (arguments)</li> <li>length Property (Array)</li> <li>lastMatch Property ($&amp;)</li> <li>lastParen Property ($+)</li> <li>length Property (Function)</li> <li>length Property (String)</li> <li>LN10 Property</li> <li>LN2 Property</li> <li>LOG10E Property</li> <li>LOG2E Property</li> <li>MAX_VALUE Property</li> <li>message Property</li> <li>MIN_VALUE Property</li> <li>multiline Property</li> <li>name Property</li> <li>NaN Property</li> <li>NaN Property (Global)</li> <li>NEGATIVE_INFINITY Property</li> <li>number Property</li> <li>PI Property</li> <li>POSITIVE_INFINITY Property</li> <li>propertyIsEnumerable Property</li> <li>prototype Property</li> <li>rightContext Property ($')</li> <li>source Property</li> <li>SQRT1_2 Property</li> <li>SQRT2 Property</li> <li>undefined Property</li> </ul>"},{"location":"Guide/jscript_language_reference/#statements","title":"Statements","text":"<ul> <li>@cc_on Statement</li> <li>@if Statement</li> <li>@set Statement</li> <li>break Statement</li> <li>Comment Statements</li> <li>continue Statement</li> <li>do...while Statement</li> <li>for Statement</li> <li>for...in Statement</li> <li>function Statement</li> <li>if...else Statement</li> <li>Labeled Statement</li> <li>return Statement</li> <li>switch Statement</li> <li>this Statement</li> <li>throw Statement</li> <li>try...catch...finally Statement</li> <li>var Statement</li> <li>while Statement</li> <li>with Statement</li> </ul>"},{"location":"Guide/jscript_language_reference/#jscript-fundamentals","title":"JScript Fundamentals","text":"<ul> <li>What Is JScript?</li> <li>Writing JScript Code</li> <li>JScript Variables</li> <li>JScript Data Types</li> <li>JScript Operators</li> <li>Operator Precedence</li> <li>Controlling Program Flow</li> <li>JScript Functions</li> <li>JScript Objects</li> <li>Creating Your Own Objects</li> <li>Intrinsic Objects</li> <li>JScript Reserved Words</li> </ul>"},{"location":"Guide/jscript_language_reference/#advanced-jscript","title":"Advanced JScript","text":"<ul> <li>Advanced Object Creation</li> <li>Recursion</li> <li>Variable Scope</li> <li>Copying, Passing, and Comparing Data</li> <li>Using Arrays</li> <li>Special Characters</li> <li>Troubleshooting Your Scripts</li> <li>Conditional Compilation</li> <li>Conditional Compilation Variables</li> </ul>"},{"location":"Guide/jscript_language_reference/#introduction-to-regular-expressions","title":"Introduction to Regular Expressions","text":"<ul> <li>Regular Expressions</li> <li>Early Beginnings</li> <li>Uses for Regular Expressions</li> <li>Regular Expression Syntax</li> <li>Build a Regular Expression</li> <li>Order of Precedence</li> <li>Ordinary Characters</li> <li>Special Characters</li> <li>Non-Printable Characters</li> <li>Character Matching</li> <li>Quantifiers</li> <li>Anchors</li> <li>Alternation and Grouping</li> <li>Backreferences</li> </ul>"},{"location":"Guide/jscript_language_reference/#see-also","title":"See Also","text":"<ul> <li>The Modern JavaScript Tutorial</li> </ul>"},{"location":"Guide/learn_object/","title":"Learn an Object","text":"<p>To illustrate learning an object, we return to the TwoDialogs sample.</p> <p>First, let's learn the <code>OK</code> button using recording. \u00a0We have done this before in the TwoDialogs sample.</p>"},{"location":"Guide/learn_object/#record","title":"RECORD","text":""},{"location":"Guide/learn_object/#step-1-run-the-application","title":"Step 1. Run the Application","text":"<p>Run TwoDialogs sample application. \u00a0By default this will be located in</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre>"},{"location":"Guide/learn_object/#step-2-create-a-new-test","title":"Step 2. Create a New Test","text":"<p>Start Rapise and create a new test, choose the Basic methodology, and call it <code>TwoDialogsRecording</code>. Select <code>JavaScript</code> scripting mode when prompted.</p>"},{"location":"Guide/learn_object/#step-3-start-recording","title":"Step 3. Start Recording","text":"<p>Press the Record button in the toolbar of Rapise.</p>"},{"location":"Guide/learn_object/#step-4-select-an-application-to-record","title":"Step 4. Select an Application to Record","text":"<p>When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application and in the library list, select only the top library on the list - Auto. \u00a0Press the <code>Select</code> button.</p>"},{"location":"Guide/learn_object/#step-5-do-recording","title":"Step 5. Do Recording","text":"<p>In the TwoDialogs application, use the mouse to press the <code>OK</code> button. Dismiss the alert message box complaining about the empty name.</p>"},{"location":"Guide/learn_object/#step-6-observe","title":"Step 6. Observe","text":"<p>Notice that two things will happen. \u00a0Firstly, the <code>OK</code> button will be surrounded with a red marker, indicating that the OK button has been learned. \u00a0Secondly, the action of clicking the <code>OK</code> button is recorded in the Recording Activity dialog. \u00a0That recording has a single entry:</p> <p></p>"},{"location":"Guide/learn_object/#step-7-finish-recording","title":"Step 7. Finish Recording","text":"<p>Press the <code>Finish</code> button (or press Ctrl+3) to end the recording.</p>"},{"location":"Guide/learn_object/#step-8-observe","title":"Step 8. Observe","text":"<p>Rapise will return to be the foreground application, and it will have selected the <code>Main.js</code>. Notice that there is a single line or script that has been added to the script file:</p> <pre><code>SeS(\"OK\").DoAction();\n</code></pre> <p>This line of script has two interesting parts.</p> <p>The <code>SeS(\"OK\")</code> is the identity (not the locator or location) of the <code>OK</code> button. This is the object that was learned during recording.</p> <p>The <code>DoAction()</code> is the instruction to the running script to take the action associated with a button. \u00a0A normal button has only a single possible action - to be pressed.</p> <p>The Record/Learn process has taken both steps for you, and joined them together.</p> <p>Now, let's use (normal) object learning to learn the same OK button and to call a method for the object.</p>"},{"location":"Guide/learn_object/#learn","title":"LEARN","text":""},{"location":"Guide/learn_object/#step-1-run-the-application_1","title":"Step 1. Run the Application","text":"<p>Run TwoDialogs sample application. \u00a0By default this will be located in</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre>"},{"location":"Guide/learn_object/#step-2-create-a-new-test_1","title":"Step 2. Create a New Test","text":"<p>Start Rapise and create a new test, choose the Basic methodology, and call it <code>TwoDialogsLearn</code>. Select <code>JavaScript</code> scripting mode when prompted.</p>"},{"location":"Guide/learn_object/#step-3-start-recording_1","title":"Step 3. Start Recording","text":"<p>Press the Record button in the toolbar of Rapise.</p>"},{"location":"Guide/learn_object/#step-4-select-an-application-to-record_1","title":"Step 4. Select an Application to Record","text":"<p>When the Select an Application to Record dialog is displayed, choose the TwoDialogs.exe application. \u00a0Leave the library selection in its default state - we will not be using it this time. \u00a0Press <code>Select</code>. Wait for the Recording Activity dialog to appear in the lower-right corner of the screen.</p>"},{"location":"Guide/learn_object/#step-5-do-learn","title":"Step 5. Do Learn","text":"<p>Hover the mouse over the <code>OK</code> button of the TwoDialogs AUT but do not press the button.</p> <p>With the mouse positioned over the <code>OK</code> button, press Ctrl+2 ( the Learn command). \u00a0You will see the <code>OK</code> button surrounded with a red highlight. \u00a0You will also see that the Recording Activity dialog has been updated with a Learn event.</p> <p></p>"},{"location":"Guide/learn_object/#step-6-finish-recording","title":"Step 6. Finish Recording","text":"<p>Press the <code>Finish</code> button or Ctrl+3 to end the recording session. \u00a0</p>"},{"location":"Guide/learn_object/#step-7-observe","title":"Step 7. Observe","text":"<p>You will now see that Rapise has learned about the <code>OK</code> button, and the Object Tree in the upper left-hand pane of the Rapise has a new entry called <code>OK</code> (shown here expanded). \u00a0The list of items contained under the OK button entry in the Object Tree is the set of methods and properties available for the <code>OK</code> object.</p> <p>Actions and properties have different icons. The items are grouped by the library, so the DoAction() method is unique to the <code>OK</code> UIAButton object whereas the <code>DoClick()</code> method is generic and available for all Windows objects.</p> <p>Notice that the <code>DoAction</code> is listed and recall in the previous section when we recorded pressing the button, the <code>DoAction</code> method was chosen for the button-press action.</p> <p></p> <p>While we are looking at this <code>OK</code> object, let's make a few observations about it. \u00a0These observations will be useful for your later dealings with Rapise and will make the script more informational and relevant as you delve into Rapise. \u00a0First, look down at the Properties box that appears under the Object Tree in the bottom left corner of the Rapise screen. \u00a0The screenshot below has some of the tree nodes expanded.</p> <p></p> <p>First, notice that the <code>OK</code> button has a locator defined. \u00a0When you have Rapise learn an object. it must collect data about that object so that it can relocate it even if the application has moved on the screen, and even if the application is in a different state of execution. \u00a0In order to accomplish this, Rapise looks for all useful ways to uniquely identify the object. \u00a0As bad, or perhaps worse, than not being able to find an object would be to find the wrong object on the AUT. \u00a0Every time Rapise is required to locate this object, it will first try to use the first locator. \u00a0If it fails to positively and uniquely match with that locator, it will try the second (if defined), and so on. Rapise will not give up and declare failure until it has failed to identify with all available locators.</p> <p>Second, notice the <code>ID</code> entry in the Object section of the pane. \u00a0This is the name of the object from Rapise's perspective. \u00a0All Rapise objects are available through the <code>SeS()</code> function call. \u00a0Therefore, if we want to refer to the <code>OK</code> object, we will use <code>SeS(\"OK\")</code> to refer to it. \u00a0Once we have correctly identified the object, all valid methods and properties can be accessed by using that object as the basis.</p> <p>Thirdly, notice in the main editor window of the Rapise, that no code has been added. \u00a0When you identified the <code>OK</code> button, all Rapise did was add the new object to the Object Tree. \u00a0It did not write any code in the JavaScript file.</p>"},{"location":"Guide/learn_object/#step-8-use-learned-object","title":"Step 8. Use Learned Object","text":"<p>In the automated (recorded) section above, you saw that when you pressed the OK button on the dialog, Rapise recorded a function like this:</p> <pre><code>SeS(\"OK\").DoAction();\n</code></pre> <p>This time, you will use the established name of the <code>OK</code> button object, but do something a little more interesting than its default action to demonstrate how to use Rapise.</p> <p>Move the cursor into the editor part of the Rapise and make sure you are editing the file called <code>Main.js</code>. \u00a0At the moment, this file still looks something like this:</p> <pre><code>//########## Script Steps ##############\n\nfunction Test(params)\n{\n\n}\n\ng_load_libraries=[\"UIAutomation\"];\n</code></pre> <p>Between the open and close brace, add the following command:</p> <pre><code>SeS(\"OK\").DoClick();\n</code></pre> <p>Hit the <code>Play</code> button and watch what happens.</p> <p>The click will register as a command to the object and it will perform the action on the object.</p> <p>While we have the context of this situation, let's complicate it just a little more to illustrate the intricacy as well as the flexibility of Rapise.</p> <p>There is a method whose name looks interesting: <code>DoLButtonDown()</code>.</p> <p>If we were to invoke <code>DoLButtonDown()</code> on the <code>OK</code> object, we would expect this would be the same as DoClick().</p> <p>However, go back to the AUT for a moment. \u00a0Using the mouse, press the left mouse button over the <code>OK</code> button but don't take your finger off the left mouse button.</p> <p>What happens is that the button takes its pressed state in appearance, but the button is not clicked.</p> <p>The reason for this is that the <code>DoClick()</code> (or <code>DoAction()</code>) events cause the mouse button be clicked as well as released.</p> <p>Therefore, we would need to have a pair of events:</p> <pre><code>SeS(\"OK\").DoLButtonDown();\nSeS(\"OK\").DoLButtonUp();\n</code></pre> <p>in order to make the \"click\" happen.</p> <p>Try this in the test script you have created by adding those two lines of code in place of the <code>DoClick()</code> line.</p> <p>It doesn't work!</p> <p>Let's play a little with this problem.</p> <p>When you press the <code>Play</code> button, leave the mouse alone. \u00a0Just press the left mouse button on the Rapise <code>Play</code> button and take your hand away from the mouse.</p> <p>The script does not press the <code>OK</code> button in the TwoDialogs AUT.</p> <p>Now, press the <code>Play</code> button on the Rapise and quickly move the mouse to hover over the <code>OK</code> button in the TwoDialogs AUT.</p> <p>Now it works!</p> <p>What's going on here is that the <code>DoLButtonDown()</code> and <code>DoLButtonUp()</code> methods are pressing the mouse irrespective of where the mouse cursor is positioned.</p> <p>The other functions, <code>DoClick</code> and <code>DoAction</code> are methods that are applied to the button and so they are applied to the button.</p> <p>Before we can expect <code>DoLButtonDown()</code> and <code>DoLButtonUp()</code> methods to work, we have to first the mouse cursor to the button.</p> <pre><code>function Test(params)\n{\n    SeS(\"OK\").DoMouseMove(25, 15);\n    SeS(\"OK\").DoLButtonDown();\n    SeS(\"OK\").DoLButtonUp();\n}\n</code></pre> <p>will accomplish that.</p> <p>Notice that Rapise will actually move the mouse to the coordinates (25, 15)  within the <code>OK</code> button. \u00a0Also notice that if you move the mouse while the test is playing, you will make the test fail.</p> <p>As a last experiment in this arena, try moving the mouse outside the boundaries of the <code>OK</code> button object before calling the <code>DoLButtonDown()</code> function.</p> <pre><code>function Test(params)\n{\n    SeS(\"OK\").DoMouseMove(250, 150);\n    SeS(\"OK\").DoLButtonDown();\n    SeS(\"OK\").DoLButtonUp();\n}\n</code></pre> <p>Once again, the script will fail.</p>"},{"location":"Guide/learn_object/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/manual_playback/","title":"Manual Playback","text":""},{"location":"Guide/manual_playback/#purpose","title":"Purpose","text":"<p>The Manual Playback dialog box lets you execute a series of manual test cases (including those part of a test set) from within Rapise. The results from the manual test result will be reported back into your connected Spira instance. During the executing of the manual test, you can attach screenshots, files and log incidents related to the test result</p>"},{"location":"Guide/manual_playback/#how-to-open","title":"How to Open","text":"<p>You can open the Manual Playback dialog box by either doing <code>Test &gt; Execute Manual</code> or by playing the whole test via <code>Test &gt; Play</code>. </p>"},{"location":"Guide/manual_playback/#test-case-details-test-step-selector","title":"Test Case Details &amp; Test Step Selector","text":"<p>The top part of the manual playback screen lets you view the name and description of the test case, navigate between the test steps and click one of the result buttons to indicate how the application being tested behaved:</p> <ul> <li>Pass - The current test step was completed successfully and the expected result was observed.</li> <li>Pass All - All of the steps in the test case could be completed successfully and the expected results were observed in all steps.</li> <li>Blocked - The current test step could not be performed because something else prevented its completion.</li> <li>Caution - The current test step could be performed but the actual result only partially matched the expected result (there were minor differences).</li> <li>Fail - Either the current test step could not be performed successfully or the observed actual result did not match the expected result.</li> </ul>"},{"location":"Guide/manual_playback/#test-step-expected-actual-result","title":"Test Step Expected &amp; Actual Result","text":"<p>This section displays the details of the current test step and lets you enter in the observed actual result:</p> <ul> <li>Description - This displays the description of the action that the tester should carry out on the application being tested.</li> <li>Expected Result - This contains a description of the expected result if the application performs as expected</li> <li>Sample Data - This (optional) field contains any sample data that should be used during testing</li> <li>Actual Result - This is a formatted text box where the tester should enter in what actually happened during testing. It is required if you Fail, Block or Caution the test step, but is optional for steps that Pass. In addition, you can click on the picture icon to add a screenshot, or use one of the two buttons underneath:</li> <li>Add Attachment - this lets you choose a file from your local system and attach to the test result.</li> <li>Log Incident - this lets you log a bug/incident that is connected to the test step (e.g. if it failed) and will display the New Incident dialog box.</li> </ul>"},{"location":"Guide/manual_playback/#minimized-playback-dialog","title":"Minimized Playback Dialog","text":"<p>Sometimes you want to be able to reduce the amount of space taken up by the testing dialog box so that you can view the application and the test steps on the same screen at the same time. To make this easier, if you click on the Minimize ( &lt;| ) icon in the top-right of the dialog box it will change the manual playback dialog to the mini version show above. You can click on the icon again to switch back to the standard player.</p>"},{"location":"Guide/manual_test_editor/","title":"Manual Test Editor","text":""},{"location":"Guide/manual_test_editor/#purpose","title":"Purpose","text":"<p>The Manual Test Editor lets you create and edit manual test cases that are stored in Spira. These manual test cases contain a high level description of the test case as well a detailed set of steps and associated expected results that make up the manual test script. These manual tests can be executed manually in Rapise (or in Spira) as well as used as the basis for creating a related automated test script. Such automated test scripts may be linked to individual test steps by means of the test scenario approach.</p>"},{"location":"Guide/manual_test_editor/#how-to-open","title":"How to Open","text":"<p>You can open the Manual toolbar by either clicking on the Manual Steps icon on the main Main Toolbar or clicking on the ManualSteps.rmt file in the Files tab. The Manual Toolbar will be displayed whenever you have the Manual Test Editor open.</p>"},{"location":"Guide/manual_test_editor/#test-case-namedescription","title":"Test Case Name/Description","text":"<p>This section lets you edit the name and long formatted description of the test case. The rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists.</p> <p>In addition there is a button that lets you add screenshots.</p>"},{"location":"Guide/manual_test_editor/#test-step-editor","title":"Test Step Editor","text":"<p>This section lets you add, edit and delete test steps from the manual test case. Each of the test steps contains four fields:</p> <ul> <li> <p>Step ID - this contains the position number of the test step (e.g. step 1) as well as the ID of the test step as it exists in Spira. If you click on the [TS:xxx] label it will automatically copy this into the Windows clipboard. This allows you to easily paste the ID of the test step into your automated test scripts which allows Rapise to report back test results to Spira against specific test steps.</p> </li> <li> <p>Description - this is a description of the test procedure that the tester should perform.</p> </li> <li> <p>Expected Result - This is a description of the expected result that should be observed if the system being tested performs correctly.</p> </li> <li> <p>Sample Data - This is an optional field that contains any sample data that should be used in the test</p> </li> </ul> <p>Each of the fields provides a rich text editor lets you choose the font name, font size, text color, highlight color, style (bold, underline, italic) as well as provides easy ability to add links, bullets and numbered lists. In addition there is a button that lets you add screenshots to the test step.</p> <p>For ease of editing, you can navigate between the rows and columns using the ALT + Arrow keys on the keyboard.</p>"},{"location":"Guide/manual_test_editor/#automating-test-steps","title":"Automating Test Steps","text":"<p>Sometimes you have a primarily manual test case that you want to automate certain steps of. For example you may want to automate the setup of the test data or login to the application before carrying out manual testing. Such a test is called a semi-manual test.</p> <p>To do this, you enter the syntax @FunctionName(); in the Description box of the test step. Then when you run the test, that step will be executed automatically. The @FunctionName(); refers to a JavaScript user function called <code>function FunctionName()</code> in the <code>User.js</code> file.</p>"},{"location":"Guide/manual_test_editor/#example","title":"Example","text":""},{"location":"Guide/manual_testing/","title":"Manual Testing","text":""},{"location":"Guide/manual_testing/#purpose","title":"Purpose","text":"<p>Manual testing is used for situations where automated testing does not make sense. This may be due to technical reasons (the application being tested does not have an API that lets tools such as Rapise interact with them) or economic (this part of the application is rarely used and the user interface is changing in each release).</p> <p>However Rapise can help accelerate and optimize your manual testing as well. Rapise lets you rapidly create manual tests 5x faster than creating them by hand. It integrates with Spira for test management, so you still have a central repository of version-controlled test cases, but Rapise allows you to edit them offline when you have no connection to Spira and also to execute them from within Rapise.</p>"},{"location":"Guide/manual_testing/#usage","title":"Usage","text":"<p>To start manual testing, simply create your test as normal using the New Test dialog box.</p> <p>For pure manual test you need to select the manual test methodology:</p> <p></p> <p>Then once the test has been created, click on the <code>Tools &gt; Manual Steps</code> menu and then you will be taken to the Manual Editor with the Manual Test Toolbar visible:</p> <p></p> <p>Note</p> <p>There will be no steps in the fresh new test.</p> <p>From here you can start creating your new manual test using the Manual Recorder, then edit the created test steps in the Manual Editor. Finally you can save the test to Spira and then play it back using the Manual Playback screen.</p> <p>In addition to being used for manual testing, the test step editor lets you view the test steps that define the test scenario so that when you automate the test case, you can easily tie back specific verification points with test steps in Spira.</p> <p>Finally you can also have the best of manual and automated testing in the same test script, using semi-manual testing. That allows you to automate some of the repetitive tasks in a primarily manual test case.</p>"},{"location":"Guide/manual_testing/#example","title":"Example","text":"<p>For a full tutorial using the manual playback, refer to the Exploratory Testing tutorial.</p> <p>In addition, a working sample of manual testing is available from Spira, simply connect to the sample Library Information System project and open the Ability to Create New Book (TC2) test case in the Functional Tests folder of the project. That will then display the sample manual test within Rapise:</p> <p></p>"},{"location":"Guide/manual_testing/#see-also","title":"See Also","text":"<ul> <li>Manual Recording</li> <li>Manual Playback</li> <li>Exploratory Testing Tutorial</li> <li>Dialogs, Views and Menus<ul> <li>Manual Toolbar</li> <li>Manual Test Editor</li> <li>Manual Playback</li> </ul> </li> </ul>"},{"location":"Guide/manual_testing_playback/","title":"Manual Testing: Playback","text":""},{"location":"Guide/manual_testing_playback/#purpose","title":"Purpose","text":"<p>As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual testing tool that lets you execute manual test cases stored in SpiraTest.</p> <p>The advantage of using Rapise to execute the manual tests (instead of just using SpiraTest itself) is that Rapise can display the execution window as a small minimizable dialog box that gets rid of the need to have two screens (one to display the test and one to test the application). Also Rapise provides superior image manipulation tools over those available in a web application.</p>"},{"location":"Guide/manual_testing_playback/#step-1-open-the-manual-test","title":"Step 1 - Open the Manual Test","text":"<p>Using the MS-Paint example manual test that we created previously, open up the test in Rapise. Click on the <code>Tools &gt; Manual Steps</code> menu and you should see the list of test steps:</p> <p></p> <p>Now that we have the test opened, we can start the playback.</p>"},{"location":"Guide/manual_testing_playback/#step-2-executing-the-manual-test","title":"Step 2 - Executing the Manual Test","text":"<p>Choose the Release from the list of those available in the project:</p> <p></p> <p>Then click on the Execute icon to start manual test execution. That will bring up the manual playback screen:</p> <p></p> <p>On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the <code>Pass</code> button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the <code>&gt;|</code> button.</p> <p>Once you get to Step 6, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect:</p> <p></p> <p>Next we shall attach a screenshot of what actually happened and log a test failure.</p>"},{"location":"Guide/manual_testing_playback/#step-3-capturing-and-annotating-a-screenshot","title":"Step 3 - Capturing and Annotating a Screenshot","text":"<p>Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture:</p> <p></p> <p>If the MS Paint application is not in the foreground, just click Esc on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor:</p> <p></p> <p>You can now use the annotation tools to add labels, text and other items to explain the issue that you found:</p> <p></p> <p>In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result:</p> <p></p> <p>Finally, Fail the Step 6 and click on the Finish button.</p> <p></p> <p>The results will be posted to Spira.</p>"},{"location":"Guide/manual_testing_playback/#step-4-viewing-the-results","title":"Step 4 - Viewing the Results","text":"<p>Now to view the results in Spira, click on the View &gt; View Manual Test in Spira menu. That will bring up the test case in Spira. Now click on the <code>Failed</code> hyperlink in Spira and the new test run will be displayed:</p> <p></p> <p>If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot):</p> <p></p> <p>Congratulations! You have now successfully executed a manual test using Rapise.</p>"},{"location":"Guide/manual_testing_playback/#see-also","title":"See Also","text":"<ul> <li>Manual Testing</li> <li>Manual Recording</li> </ul>"},{"location":"Guide/manual_testing_recording/","title":"Manual Testing: Recording","text":""},{"location":"Guide/manual_testing_recording/#purpose","title":"Purpose","text":"<p>As described in the main Manual Testing topic, sometimes it is not possible to automate the testing of a specific application, however Rapise is also a powerful manual test generation system that can help you create test cases 5x faster than simply creating test cases by hand step by step.</p> <p>This section describes how you can record a set of steps automatically by simply using the application being tested. Unlike an automated test however, Rapise will store a human-readable description of what was performed along with a screenshot, rather than actual computer code that can be played back by a computer.</p>"},{"location":"Guide/manual_testing_recording/#step-1-creating-a-new-test","title":"Step 1 - Creating a New Test","text":"<p>To start manual testing, simply create your test as normal using the New Test dialog box. Then once the test has been created, click on the <code>Tools &gt; Manual Steps</code> menu and then you will be taken to the Manual Editor with the Manual Test Toolbar visible:</p> <p></p> <p>The test step list will initially be empty.</p>"},{"location":"Guide/manual_testing_recording/#step-2-recording-some-steps","title":"Step 2 - Recording Some Steps","text":"<p>Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test.</p> <p>To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options:</p> <p></p> <p>Now click the Record Manual button and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording.</p> <p>As you click through the application, the recording will display the list of steps and actions being captured:</p> <p></p> <p>In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold:</p> <p></p> <p>When you click Finish to complete the recording, Rapise will now display the list of populated manual test steps with the embedded screen captures:</p> <p></p> <p>Notice that each recorded test step already has a <code>Description</code> and an <code>Expected Result</code> with a screenshot of what the user was doing. In addition, the <code>Sample Data</code> contains the equivalent of Rapise automation code for reference. This can be useful later if you will decide to automate this test.</p>"},{"location":"Guide/manual_testing_recording/#step-3-editing-the-steps","title":"Step 3 - Editing the Steps","text":"<p>Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows:</p> <p></p> <p>Click Save to make sure the updates are all saved locally. Now before you can execute these tests, you will need to Save them to Spira (our web-based test management system).</p>"},{"location":"Guide/manual_testing_recording/#step-4-saving-to-spira","title":"Step 4 - Saving to Spira","text":"<p>Click on the option to Save to Spira, you will be asked to confirm the creation of the document folder in Spira that will hold the test files:</p> <p></p> <p>Click on Create and then click OK in the <code>Synchronize Files</code> dialog. The manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in <code>Tester.Assert</code> commands to relate specific verification points with test steps during automated testing.</p> <p></p> <p>Now that the test has been saved in Spira, you can click on the View Manual Test in Spira toolbar button to see how the test steps look inside Spira.</p> <p></p> <p></p> <p>Now this test case is ready for manual playback.</p>"},{"location":"Guide/manual_testing_recording/#see-also","title":"See Also","text":"<ul> <li>Manual Testing</li> <li>Manual Playback</li> </ul>"},{"location":"Guide/menu_and_toolbars/","title":"Main Menu and Toolbars","text":""},{"location":"Guide/menu_and_toolbars/#file","title":"File","text":"<p>Default:</p> <p></p> <p>Framework:</p> <p></p> <p>Manual:</p> <p></p> <p>The File menu provides quick access to all the File management functions in Rapise. Many of these are also available on the main toolbar.</p> <ul> <li>Create New<ul> <li>New Test - creates a new standalone Rapise test, it can be saved either to Spira or locally.</li> <li>Test Automation Framework - start new testing framework</li> </ul> </li> <li>Add To Framework - add something testing framework<ul> <li>Test Case - Add new Test Case.</li> <li>Module / Page Object - add new Module / Page Object</li> <li>Spreadsheet - add new shared spreadsheet</li> <li>Shared Script - add new shared JavaScript for common functions and variables</li> <li>Import External Test Case - import external Test Case or standalone test created earlier into current testing framework.</li> <li>Import External Module / Page Object - import external Module / Page Object from another testing framework into this one.</li> </ul> </li> <li>Open - opens an existing test (<code>.sstest</code>) that is already available locally.</li> <li>Open Test from Spira - opens a test from SpiraTest test management repository and downloads to the local repository</li> <li>Save to Spira - saves the current test to the Spira test management system so that it updates the version in your Spira test management repository</li> <li>Open File - opens a single file and shows it in editor. File is not added to the current test project.</li> <li>Recent Tests - open one of recently used tests projects</li> <li>Save All (Shortcut: CTRL+S) - saves the current test project and all open documents locally. To save to a different location, use the Save As option in the <code>File &gt; Save As</code>.</li> <li>Save As  - creates a new, differently named copy of the test project and all files explicitly included into it.</li> <li>Exit - exits Rapise.</li> </ul> <ul> <li>Save Manual Test to Spira<ul> <li>Manual: Upload all modified steps to the Spira Test Case.</li> </ul> </li> <li>Save Manual Test Locally<ul> <li>Manual: Save manual Test Case Steps as a local .rmt file.</li> </ul> </li> <li>Reload Manual Test from Spira<ul> <li>Manual: Reload test steps from the Spira Test Case overriding local changes.</li> </ul> </li> </ul>"},{"location":"Guide/menu_and_toolbars/#edit","title":"Edit","text":"<p>The Edit menu provides tools for editing currently open script file. Menu contents depend on the active editor currently open in the content view.</p> <p>Default:</p> <p></p> <p>JavaScript:</p> <p></p> <p>RVL:</p> <p></p> <p>Manual:</p> <p></p> <ul> <li>Find, Find in Files - search using the Find and Replace Dialog.</li> </ul> <ul> <li>Ins Row (Shortcut: Ctrl+I)<ul> <li>RVL: Insert RVL Row before active.</li> </ul> </li> <li>Del Row (Shortcut: Ctrl+D)<ul> <li>RVL: Delete active Row. If several rows selected then all of them are deleted.</li> </ul> </li> <li>Params (Shortcut: Ctrl+P)<ul> <li>RVL: Show all parameters (including optional) for the currently edited action.</li> </ul> </li> </ul> <ul> <li>Add Link<ul> <li>Manual: Insert link to other Manual step</li> </ul> </li> <li>Add Step (Shortcut: CTRL+Ins)<ul> <li>Manual: Append new manual step to the end</li> </ul> </li> <li>Remove Step<ul> <li>Manual: Delete selected step.</li> </ul> </li> <li>Up<ul> <li>Manual: Move selected step Up.</li> </ul> </li> <li>Down<ul> <li>Manual: Move selected step Down.</li> </ul> </li> </ul> <ul> <li>Select All<ul> <li>JavaScript: select all text in the text editor.</li> </ul> </li> <li>Copy (Shortcut: CTRL+C)<ul> <li>JavaScript: copies whatever text you have highlighted to the clipboard.</li> <li>RVL: copy selected Rows or Cells</li> </ul> </li> <li>Cut (Shortcut: CTRL+X)<ul> <li>JavaScript: erases whatever text you have highlighted, and copies it to the clipboard.</li> <li>RVL: copy rows to the Clipboard</li> </ul> </li> <li>Paste (Shortcut: CTRL+V)<ul> <li>JavaScript: pastes from the clipboard.</li> <li>RVL: paste cells form the clipboard.</li> </ul> </li> </ul> <ul> <li>Undo (CTRL+Z) reverses the last deletion or insertion made.</li> <li>Redo button (CTRL+Y) reverses the last undo action.</li> </ul> <ul> <li>Format Document format current JavaScript or JSON document.</li> </ul> <ul> <li>Toggle Breakpoint (Shortcut: F9) inserts or removes a breakpoint at the current cursor position.</li> <li>Show All Breakpoint Display all breakpoints in the Warnings window, where you can click them to go to their location. You may then click on them to open corresponding location.</li> <li> <p>Remove All Breakpoint remove all breakpoints in the current test project.</p> </li> <li> <p>Save File</p> <ul> <li>JavaScript: saves the script file you are editing.</li> </ul> </li> </ul> <ul> <li>Select All Rows<ul> <li>RVL: Select all rows in the currently visible Sheet.</li> </ul> </li> <li>Select Sheet <ul> <li>RVL: Switch an RVL Sheet</li> </ul> </li> <li>Add Sheet <ul> <li>RVL: Create a new RVL Sheet</li> </ul> </li> <li>Rename Sheet <ul> <li>RVL: Rename the current RVL Sheet</li> </ul> </li> <li>Remove Sheet <ul> <li>RVL: Remove the current RVL Sheet</li> </ul> </li> <li>Clear Sheet <ul> <li>RVL: Clear all rows in the current RVL Sheet</li> </ul> </li> <li>Play This Sheet <ul> <li>RVL: Execute the current sheet</li> </ul> </li> </ul>"},{"location":"Guide/menu_and_toolbars/#view","title":"View","text":"<p>The View menu contents depend on the active editor currently open in the content view.</p> <p>Default:</p> <p></p> <p>Manual:</p> <p></p> <ul> <li>Start Page - opens the Rapise Start Page.</li> <li>Spira Dashboard - opens Spira Dashboard.</li> <li>RVL - opens the RVL editor.</li> <li>Main - opens the primary test script file (normally <code>Main.js</code>).</li> <li>User - This opens the user functions script file containing any user-defined testing functions (called <code>User.js</code>).</li> <li> <p>Show</p> <p></p> <ul> <li>View &gt; Show &gt; Test Files - show and highlight Test files view</li> <li>View &gt; Show &gt; Objects - show and highlight Objects repository tree.</li> <li>View &gt; Show &gt; Output - show and highlight output view.</li> <li>View &gt; Show &gt; Properties - show and highlight properties view</li> </ul> </li> <li> <p>Manual Steps - open manual test steps for given step (if any). If no manual steps defined yet, create new.</p> </li> <li>REST - find and open SOAP definition file in the content view. If no <code>.soap</code> file is yet defined, nothing happens.</li> <li>SOAP - find and open REST definition file in the content view. If no <code>.rest</code> file is yet defined, nothing happens.</li> <li>View Manual Test in Spira<ul> <li>Manual: Open current test in Spira web interface. Don't forget to do <code>File &gt; Save to Spira</code> if you did any changes to manual steps locally.</li> </ul> </li> </ul>"},{"location":"Guide/menu_and_toolbars/#test","title":"Test","text":"<p>The Test menu contents depend on the active editor currently open in the content view.</p> <p>Default</p> <p></p> <p>Legacy/Sub-Tests:</p> <p></p> <p>Manual:</p> <p></p> <ul> <li>Play - this item executes the current test.</li> <li> <p>Record - this item is used for recording and learning, clicking it will open the Recording Activity Dialog.</p> <p>Note there are some additional options available when using the Record button:</p> <ul> <li>Record - clicking Record on its own will start Rapise recording using the currently selected libraries (this is the default action).</li> <li>Shift+Record - This brings up the library selector (shown above), and is equivalent to clicking the [] libraries button in the ribbon before starting recording.</li> <li>Ctrl+Record - This brings up the application selector (see below) and lets you change the application and library being recorded.</li> </ul> </li> <li> <p>Test Settings - display test settings.</p> </li> <li>Open Root ...... - Open the root of current test framework in this Rapise window. Only visible then we are in sub-test of any nesting level.</li> <li>Open Parent ...... - Open parent test containing this sub-test in this Rapise window. This item is only visible when parent is not yet a framework root (i.e. we have a deeply nested test case).</li> <li>Spira Properties - opens the Spira Properties dialog that allows you to see the name of the SpiraTest project and test case that the current Rapise test is linked to.</li> <li>Playback Settings - opens Test Execution Parameters dialog, that allows to change local playback parameters of the current framework, use it if you need to change parameters before executing RVL &gt; Play actions. </li> <li> <p>Record Manual</p> <ul> <li>Manual: start the Select Application to Record dialog box. This dialog box is the same one that you'll use for automated testing, however when you click through the application under test it will record manual test steps instead of automated script code.</li> </ul> </li> <li> <p>Execute Manual</p> <ul> <li>Manual: executes the current manual test. You will be asked to save the test case to Spira, then the latest version from Spira will be downloaded into the Rapise manual test execution wizard so that you can start manual testing.</li> </ul> </li> <li> <p>Screenshots</p> <ul> <li>Manual: option will tell Rapise to capture the current screenshot when performing manual recording and include the screenshot with the recorded test step. These are two sub-options:</li> </ul> </li> <li>Window<ul> <li>Manual: when checked, this will record the entire window. Warning, this may take up large amounts of disk space. Otherwise it will record just the object underneath the current cursor.</li> </ul> </li> <li>Cursor<ul> <li>Manual: when checked, this will record the location of the mouse pointer/cursor inside the image.</li> </ul> </li> </ul>"},{"location":"Guide/menu_and_toolbars/#tools","title":"Tools","text":"<p>The Tools menu contents depend on the active editor currently open in the content view.</p> <p>Default:</p> <p> </p> <p>Manual:</p> <p></p> <ul> <li>Spy - dropdown to select active Spy. You use the Spy to look at the running application and find specific objects that you want to perform an operation or verification on.</li> <li>Debugger - toggles debugger. </li> <li>Verbose Level- drop-down list controls the Verbosity Level.</li> <li>Libraries - this button opens the Select an Application Dialog so that you can add/change the libraries being used to record the current test.</li> <li>Npm Console - show an <code>npm console</code> for the current testing framework. This way you may quickly install new packages or initialize using existing <code>package.json</code>.</li> <li>Web Services - allows you to add a new web service definition to your Rapise test. Clicking on this displays the Add Web Service dialog box.</li> <li>Object Manager - open the Object Manager add-in; this add-in is used to copy recorded objects between test scripts.</li> <li>Chrome for Testing - open Chrome for Testing dialog.</li> <li>RPA Monitor - open RPA Monitor.</li> <li>Rapise Launcher - starts Rapise Launcher.</li> </ul>"},{"location":"Guide/menu_and_toolbars/#settings","title":"Settings","text":"<p>Provides access to all the global settings and options in Rapise. Settings relevant to just the current test are available as Test &gt; Test Settings...</p> <ul> <li>Global - This brings up the Global Settings dialog that lets you change any of the system-wide settings for Rapise.</li> <li>SpiraTest - takes you to a dialog box that lets you change how Rapise is integrated with the SpiraTest test management system. It will let you change the URL, username and password used to connect.</li> <li>Web Spy - displays the Web Spy Settings dialog box. This lets you change the settings.</li> <li>Selenium - displays the Selenium settings dialog box. This is used to edit the different Selenium web browser profiles that can be used by Rapise. related to using the Web Spy to inspect the DOM objects in web pages.</li> <li>Mobile - displays the Mobile Settings dialog box. This lets you configure the different mobile devices that are available for testing by Rapise.</li> <li>Java - displays the Install Java Access Bridge dialog box. Installing the Java Access Bridge lets Rapise connect to Java AWT/Swing applications so that they can be tested.</li> </ul>"},{"location":"Guide/menu_and_toolbars/#help","title":"Help","text":"<ul> <li>About - information about the running instance of Rapise, including the version number.</li> <li>Activation - opens the Rapise license activation screen. This can be used to deactivate the current license so that it can be used on a different machine.</li> <li>Help - provides access to the interactive help system. You can also bring up the help system by pressing F1 on the keyboard.</li> <li>Online Help - opens online version of the help system (updated regularly).</li> <li>Remote Assistance - launches GoToMeeting session with a given ID. Since Rapise 7.3 launches Zoom meeting.</li> </ul> <p>Read more about Remote Assistance.</p>"},{"location":"Guide/menu_and_toolbars/#report","title":"Report","text":"<p>The Report menu is available anytime you have a report (<code>.trp</code>) file visible in the Content View.</p> <ul> <li>Plain - view test steps, assertions, and messages aligned in a table.</li> <li>Hierarchical - switch to hierarchical display to more clearly see what assertions, messages, and data are associated with which test steps.</li> <li>Collapse - collapse the report to show only the top level. \u00a0What is visible will depend on how the report is sorted.</li> <li>Expand - expand all report rows.</li> <li>Images - toggle between hiding and revealing images.</li> <li>Export to HTML - save the report as HTML document.</li> <li>Export to Excel - save the report as an Excel file.</li> <li>Export to PDF - save the report as an Acrobat PDF file.</li> <li>Export to XPS - save the report as XML Paper Specification file.</li> <li>Choose Columns - to hide or reveal report columns.</li> <li>Merge Cells - merge identical consecutive cells.</li> <li>The drop-down combo lets you choose between previously saved layouts. Selected layout is loaded using next item Load Layout.</li> <li>Save Layout - press to keep your layout changes after closing Rapise.</li> <li>Reset Layout - undo any changes you've made.</li> </ul> <p>See Also:</p> <ul> <li>Automated Reporting</li> </ul>"},{"location":"Guide/menu_and_toolbars/#debugger","title":"Debugger","text":"<p>The Debugger menu and toolbar is available while the javascript debugger is being used. \u00a0To use the the Debugger, first enable it by toggling the the corresponding toolbar button:</p> <p></p> <p>then Play your script. \u00a0</p> <ul> <li>Continue F5 - continue executing the script.</li> <li>Step In F11 - step into a function/procedure.</li> <li>Step Out Shift+F11 - continue until the current procedure is exited.</li> <li>Step Over F10 - go to the next line in the current procedure/function.</li> <li>Stop Debugger Shift+F5 - stop executing the script and exit the debugger.</li> </ul>"},{"location":"Guide/menu_and_toolbars/#main-toolbar","title":"Main Toolbar","text":"<p>The Main is the primary toolbar providing tools to help with creating and executing tests. It is always visible:</p> <p></p>"},{"location":"Guide/menu_and_toolbars/#rvl-toolbar","title":"RVL Toolbar","text":"<p>The RVL toolbar is is shown for RVL editor:</p> <p></p>"},{"location":"Guide/menu_and_toolbars/#manual-toolbar","title":"Manual Toolbar","text":"<p>The Manual toolbar is shown for manual test editor:</p> <p></p> <ul> <li>Select Current Release dropdown list displays the list of releases in the current Spira project. You can then choose the appropriate release that the current test is being executed against.</li> </ul>"},{"location":"Guide/menu_and_toolbars/#report-viewer-toolbar","title":"Report Viewer Toolbar","text":"<p>The Report toolbar is shown for report viewer :</p> <p></p>"},{"location":"Guide/menu_and_toolbars/#debugger-toolbar","title":"Debugger Toolbar","text":"<p>The Report toolbar is shown while JavaScript debug session is active. It is a set of shortcuts for debugger menu:</p> <p></p>"},{"location":"Guide/microsoft_dynamics/","title":"Microsoft Dynamics","text":""},{"location":"Guide/microsoft_dynamics/#overview","title":"Overview","text":"<p>Microsoft Dynamics is a line of enterprise resource planning (ERP) and customer relationship management (CRM) software applications from Microsoft. The Microsoft Dynamics focus industries are retail, service, manufacturing, financial services, and the public sector. Microsoft Dynamics offers support for small, medium, and large businesses.</p> <p>Microsoft Dynamics ERP comprises a group of enterprise-resource-planning products primarily geared toward midsize organizations with simple corporate structures and low-to-moderately complex production models. Microsoft Dynamics ERP includes three primary products:</p> <ul> <li>Microsoft Dynamics AX (formerly Axapta) - multi-language, multi-currency enterprise resource planning (ERP) business software with global business management features for financial, human resources, and operations management as well as additional industry capabilities for retailers, professional service industries, financial service businesses, manufacturers, and public-sector organizations.</li> <li>Microsoft Dynamics GP (formerly Great Plains Software) - ERP software for small and midsize businesses: helps manage financials, supply chain, and employees.</li> <li>Microsoft Dynamics NAV (formerly Navision) - business management solution that helps small and mid-sized businesses manage their financials, supply chain, and people. It features multiple languages and multiple currencies.</li> </ul> <p>Microsoft Dynamics CRM is a customer relationship management application from Microsoft, that provides sales, service, and marketing capabilities. Microsoft sells Microsoft Dynamics CRM separately from the ERP products. CRM is available either as on-premises software or as a software-as-a-service offering called Microsoft Dynamics CRM Online.</p> <p>Starting in late 2016, Microsoft has created a new cloud-based SaaS-only combined ERP/CRM solution called Microsoft Dynamics 365. This provides a new web-based version of Dynamics AX (renamed Dynamics 365 for Finance and Operations), combined with a new web based version of Dynamics NAV (called Dynamics 365 Business Central) and an updated Microsoft Dynamics CRM Online (Dynamics 365 for Sales). This new integrated, ERP/CRM is provided solely through Microsoft Azure and is completely web-based.</p>"},{"location":"Guide/microsoft_dynamics/#rapise-support","title":"Rapise Support","text":"<p>Rapise provides out of the box support for the following different versions of Microsoft Dynamics:</p> <ul> <li>Dynamics AX - Rapise provides specialized support for the Dynamics AX core user interface plus add-ons such as the Management Reporter.</li> <li>Dynamics NAV - Rapise provides specialized support for the Dynamics NAV desktop and web core user interface including Dynamics 365 Business Central.</li> <li>Dynamics CRM/365 for Sales - Rapise uses its native web library support for Dynamics CRM, with Dynamics-CRM specific extensions included for unique CRM components (e.g. data grids).</li> <li>Dynamics 365 for Finance and Operations - Rapise includes built-in support for Dynamics 365 ERP components.</li> <li>Unified Service Desk - Hybrid application with IE browser components embedded into desktop interface.</li> </ul>"},{"location":"Guide/microsoft_dynamics/#see-also","title":"See Also","text":"<ul> <li>KB272 Microsoft Dynamics Solutions - Which One Do You Have?</li> </ul>"},{"location":"Guide/mobile_reconnect/","title":"Reconnect Mobile Session","text":"<p>Since version 6.2 Rapise is able to reconnect mobile sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the application and perform manual steps to reach desired application state.</p>"},{"location":"Guide/mobile_reconnect/#maintenance-scenario","title":"Maintenance Scenario","text":"<ol> <li>You run a test and it fails at some point because some object is not found on screen.</li> <li>You use the Mobile Spy to reconnect to the application and analyze the cause of the failure.</li> <li>You use the Mobile Spy to re-learn the object.</li> <li>You run the test exactly from the step where it stopped working to make sure the test is fixed.</li> </ol>"},{"location":"Guide/mobile_reconnect/#multi-session-recording-scenario","title":"Multi Session Recording Scenario","text":"<ol> <li>You record first steps of a test case.</li> <li>You run the test to make sure it works as expected (optional).</li> <li>You start next recording session and reconnect to the application. No time is wasted for launching the application and performing steps manually to prepare it for recording.</li> </ol>"},{"location":"Guide/mobile_reconnect/#reusing-session-to-run-multiple-tests","title":"Reusing Session to Run Multiple Tests","text":"<p>Since application launch is time consuming operation in mobile testing you may run multiple tests on the same application instance.</p> <ol> <li>You run a test and it leaves the application running.</li> <li>You run next test and so on.</li> </ol> <p>This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially.</p>"},{"location":"Guide/mobile_reconnect/#how-it-works","title":"How it Works","text":"<p>To leave application running and save session information use AppiumDriver.SaveSession call in TestFinish block of your test.</p> <p>Information</p> <p>In Rapise 8.0+ there is no need to explicitly call <code>AppiumDriver.SaveSession()</code>.</p> <pre><code>function TestFinish()\n{\n    AppiumDriver.SaveSession();\n}\n</code></pre> <p>To reconnect to the running application use AppiumDriver.ReconnectSession call in TestPrepare block of your test.</p> <pre><code>function TestPrepare()\n{\n    AppiumDriver.ReconnectSession();\n}\n</code></pre> <p>If you want Rapise to launch a new application session if there is no saved one pass <code>true</code> to AppiumDriver.ReconnectSession call.</p> <pre><code>function TestPrepare()\n{\n    AppiumDriver.ReconnectSession(true);\n}\n</code></pre> <p>Note: TestPrepare  block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL (Play Selection, Play From Here, etc.).</p>"},{"location":"Guide/mobile_reconnect/#active-session","title":"Active Session","text":"<p>When you launch a Mobile Spy from the main toolbar it first checks if Appium server has active sessions. If there are active sessions then the Spy connects to one of them. You may switch the session using the dropdown on the spy toolbar.</p> <p></p>"},{"location":"Guide/mobile_reconnect/#see-also","title":"See Also","text":"<ul> <li>Mobile Testing, for an overview of mobile testing with sub-sections on testing.</li> <li>Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.</li> </ul>"},{"location":"Guide/mobile_settings_dialog/","title":"Mobile Settings Dialog","text":""},{"location":"Guide/mobile_settings_dialog/#mobile-profiles","title":"Mobile Profiles","text":"<p>Use Mobile Settings Dialog to configure <code>Mobile Profiles</code>. A mobile profile specifies how to connect to a simulator or device via Appium. You may configure as many profiles as you need to run your tests on different devices.</p> <p>Mobile Settings Dialog box displays the list of mobile profiles that have been configured for use by Rapise and lets you create a new profile, modify a profile or make a new profile based on an existing one.</p> <p></p> <p>Global profiles are stored inside <code>c:\\ProgramData\\Inflectra\\Rapise\\MobileProfiles</code> folder.</p>"},{"location":"Guide/mobile_settings_dialog/#how-to-open","title":"How to Open","text":"<p>You can open this dialog box from two places:</p> <ul> <li>From the main Rapise menu <code>Settings &gt; Mobile</code>.</li> <li>From the Mobile Spy tool when you click on the <code>Edit Profiles</code> toolbar button.</li> <li> <p>Using ellipsis button in the top right corner of Rapise window:</p> <p></p> </li> </ul>"},{"location":"Guide/mobile_settings_dialog/#menu-options","title":"Menu Options","text":"<p>This dialog box has the following menu options:</p> <ul> <li>Select Profile - this dropdown list lets you select a different mobile profile to be displayed in the dialog.</li> <li>Save - this button will save the changes to the current mobile profile.</li> <li>Test URL - this button will test the Connection (URL) from Rapise to Appium (which is used to manage the devices).</li> <li>Duplicate - this button will create a new mobile profile based on the currently viewed one.</li> <li>Create - this button will create a new empty mobile profile that you can edit.</li> <li>Rename - this button will change the name of the current mobile profile being edited.</li> <li>Delete - this button will delete the currently displayed mobile profile. There is no undo, so be careful!</li> </ul>"},{"location":"Guide/mobile_settings_dialog/#local-mobile-profiles","title":"Local Mobile Profiles","text":"<p>Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside SpiraTest or Git repository) and eliminates the need to configure profiles manually on each execution host.</p> <p>To create a local profile just press <code>Duplicate</code> for one of global profiles and set <code>Local</code> checkbox before clicking <code>OK</code> button. Global and Local profile may have same name, in this case Local profile is used for execution.</p> <p></p> <p>If a test contains local mobile profiles they can be seen in the dropdowns.</p> <p></p> <p></p> <p>Local profiles are stored inside <code>&lt;Test Root&gt;\\Profiles\\MobileProfiles</code> folder.</p>"},{"location":"Guide/mobile_settings_dialog/#profile-options","title":"Profile Options","text":""},{"location":"Guide/mobile_settings_dialog/#connection","title":"Connection","text":"<p>This section lets you enter the URL used to connect to the Appium server which hosts the mobile devices being tested. It is typically of the form:</p> <pre><code>http://server:4723/wd/hub\n</code></pre> <p>Where the port number used by Appium is 4723 by default and the /ed/hub suffix is added.</p>"},{"location":"Guide/mobile_settings_dialog/#shared","title":"Shared","text":"<p>This section contains common capabilities.</p>"},{"location":"Guide/mobile_settings_dialog/#platform-specific","title":"Platform Specific","text":"<p>In this section set platform specific options (iOS and Android).</p>"},{"location":"Guide/mobile_settings_dialog/#device-cloud","title":"Device Cloud","text":"<p>In addition, there are some settings, unique to running Appium mobile device tests using different device clouds.</p>"},{"location":"Guide/mobile_settings_dialog/#browserstack","title":"BrowserStack","text":"<ul> <li>browserstack.appium_version - use this capability to set the Appium version in your test scripts.</li> <li>browserstack.key - this needs to be populated with your Browserstack cloud access key.</li> <li>browserstack.user - this needs to be populated with your Browserstack username.</li> <li>device - specifies a particular mobile device for the test environment.</li> <li>os_version - use this capability to specify the OS version of the device.</li> <li>realMobile - use this flag to test on a physical mobile device.</li> </ul>"},{"location":"Guide/mobile_settings_dialog/#kobiton","title":"Kobiton","text":"<ul> <li>accessKey - this needs to be populated with your Kobiton cloud access key.</li> <li>captureScreenshots - this can be set to determine if you want to capture screenshots or not.</li> <li>deviceGroup - the default value is group device belonged to. Group device value could be either: ORGANIZATION or KOBITON. System will filter device in any existing group if you set deviceGroup is empty.</li> <li>sessionDescription - the description of the session (e.g. \"This is an example for iOS web\").</li> <li>sessionName - the name of the session being performed (e.g. \"Automation test session on second device\").</li> <li>username - this needs to be populated with your Kobiton username.</li> </ul>"},{"location":"Guide/mobile_settings_dialog/#seetest","title":"SeeTest","text":"<ul> <li>appBuildVersion - used only when installing a cloud application. Specifies the application build version for installation.</li> <li>applicationClearData - clears the application data. When one of noReset or fullReset or both is set true, then applicationClearData will have no effect. </li> <li>appReleaseVersion - used only when installing a cloud application. Specifies the application release version for installation.</li> <li>deviceQuery - it is a special type of capability which describes one or more capabilities in a single query like input.</li> <li>dontGoHomeOnQuit - the device  will remain in last left state even after ending the test.</li> <li>installOnlyForUpdate - install the application only if the desired version is different from the application version on the device (or if the app does not exist on the device). Otherwise, keep the application on the device.</li> <li>instrumentApp - instrument the application.</li> <li>testName - name of the test.</li> </ul>"},{"location":"Guide/mobile_settings_dialog/#see-also","title":"See Also","text":"<ul> <li>For details check out Appium Desired Capabilities page.</li> </ul>"},{"location":"Guide/mobile_test_locator_dialog/","title":"Mobile Test Locator Dialog","text":""},{"location":"Guide/mobile_test_locator_dialog/#purpose","title":"Purpose","text":"<p>This dialog box lets you create a test locator for mobile applications using one of the supported methods (XPath, ID, etc.) and display the results of using that locator interactively.</p> <p></p>"},{"location":"Guide/mobile_test_locator_dialog/#how-to-open","title":"How to Open","text":"<p>You open this dialog from the Mobile Spy by clicking the Test Locator button on that dialog.</p>"},{"location":"Guide/mobile_test_locator_dialog/#how-to-use","title":"How to Use","text":"<p>To use this dialog, you simply choose which type of locator you wish to test (in the example above we are using XPath on an iOS device) and click the button. The properties discovered from using this locator on the device in question will be displayed in the right panel. The following locator types are available:</p> <ul> <li>XPath - this allows you to enter an XPath selector that uniquely locates a specific element in the mobile object hierarchy.</li> <li>Id - this allows you to enter the ID of a specific object and test to see if it can be found.</li> <li>CSS - for mobile website testing only, this lets you enter a CSS selector that can uniquely locate an object.</li> <li>Tag Name - this lets you find elements by their Tag Name field. For web testing this is the name of the DOM element.</li> <li>Class Name - this lets you find elements by their UI Component Type.</li> <li>Name - this lets you find elements by their Name field.</li> <li>Android - \u00a0this lets you enter a string corresponding to a recursive element search using the UiAutomator Api (Android-only).</li> <li>iOS - \u00a0this allows you to enter a string corresponding to a recursive element search using the UIAutomation library (iOS-only).</li> <li>Accessibility - this lets you enter a string corresponding to a recursive element search using the Id/Name that the native Accessibility options utilize.</li> <li>Link - based on the WebDriver standard, it lets you find hyperlinks using an exact match of the link anchor text.</li> <li>Partial Link - based on the WebDriver standard, it lets you find hyperlinks using a partial match of the link anchor text.</li> <li>Script - for iOS testing, this lets you enter raw script that will be sent to the iOS device to find the element.</li> </ul>"},{"location":"Guide/mobile_testing2/","title":"Mobile Testing","text":""},{"location":"Guide/mobile_testing2/#purpose","title":"Purpose","text":"<p>Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android. Rapise gives you the flexibility to test your applications on either real or simulated devices.</p>"},{"location":"Guide/mobile_testing2/#usage","title":"Usage","text":"<p>Since the process for testing mobile devices depends heavily on the platform being used, we have split the guide into four separate sections:</p> <ul> <li>Preparing Environment for iOS Mobile Testing</li> <li>Mobile Testing using iOS</li> <li>Preparing Environment for Android Mobile Testing</li> <li>Mobile Testing using Android</li> </ul>"},{"location":"Guide/mobile_testing2/#samples","title":"Samples","text":"<p>You can find the mobile sample tests and sample Applications (called AUTAndroid for Android and AUTiOS for Apple iOS) at the following locations:</p> <ul> <li>AUTAndroid Repository</li> <li>AUTiOS Repository</li> </ul>"},{"location":"Guide/mobile_testing2/#see-also","title":"See Also","text":"<ul> <li>Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing.</li> <li>Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.</li> <li>Reconnect Mobile Session - to learn how to save time when recording, fixing, and running tests.</li> </ul>"},{"location":"Guide/mobile_testing_android/","title":"Mobile Testing using Android","text":""},{"location":"Guide/mobile_testing_android/#purpose","title":"Purpose","text":"<p>Rapise lets you record and play automated tests against native applications on a variety of mobile devices using either Apple iOS or Android. Rapise gives you the flexibility to test your applications on either real or simulated devices.</p> <p>This tutorial is a simple example of using Rapise to record and playback a simple test against a sample Android application running on the Android Emulator on your local PC. It does not require any physical mobile devices and only uses the PC that you have already installed Rapise on. (There is other documentation that describes the full range of mobile testing options).</p>"},{"location":"Guide/mobile_testing_android/#setting-up-environment","title":"Setting up Environment","text":"<p>The first thing you need to do is install Appium and Android Studio.</p> <p>Launch Android Virtual Device Manager from the menu:</p> <p> </p> <p>Use the <code>Create Virtual Device...</code> button to create a Virtual Device. Learn more about how to create and manage virtual devices.</p> <p>You can then start the device and then connect to it using Rapise.</p>"},{"location":"Guide/mobile_testing_android/#configure-the-mobile-profile","title":"Configure the Mobile Profile","text":"<p>To begin the actual mobile testing, create a new test, using the <code>File &gt; Create New &gt; New Test</code> option in Rapise. Make sure you choose the mobile methodology option Mobile:</p> <p></p> <p>Once you have entered the name for the new test you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the Android App Simulator generic profile):</p> <p></p> <p>When you click the <code>OK</code> button, Rapise will ask you to choose the Scripting Language:</p> <p></p> <p>Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the Android App Simulator profile selected.</p> <p></p> <p>Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click <code>...</code> button in the top right corner of Rapise window</p> <p></p> <p>to bring up the Mobile Settings dialog box:</p> <p></p> <p>In the mobile profile screen, make sure you change the following:</p> <ul> <li><code>app</code> - this needs to the path to the Application being tested on the device. You can download one from AUTAndroid Repository.</li> <li><code>deviceName</code> - for emulator testing it must be <code>Android Emulator</code>.</li> <li><code>platformName</code> - this needs to be set to <code>Android</code>.</li> <li><code>platformVersion</code> - this needs to be set to the same version of Android that the virtual device is running.</li> <li><code>automationName</code> - must be <code>UIAutomator2</code> for Android testing.</li> </ul> <p>Once you have entered in the information and saved the profile, make sure that Appium is running on the PC and then click the <code>Test Url</code> button to verify the connection with Appium:</p> <p></p>"},{"location":"Guide/mobile_testing_android/#using-the-mobile-spy","title":"Using the Mobile Spy","text":"<p>The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface.</p> <p>If you do not see Mobile Spy button  on the toolbar then choose Mobile Spy from the main menu: <code>Tools &gt; Spy &gt; Mobile</code>. Click Mobile Spy button,  Mobile Spy will be displayed. Now click the <code>Get Snapshot</code> button to display the application specified in the mobile profile on the screen:</p> <p></p> <p>In the example above, we are displaying the sample Android application that is available in AUTAndroid Repository.</p> <p>If you click on one of objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object:</p> <p></p> <p>If you want to view the contents of the Spy as a text file, just click <code>Spy &gt; Page Source</code> menu and you will see the contents of the Spy properties window as a text file.</p> <p>If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons.</p> <p></p> <p>Now click on <code>Tap</code> and Rapise will send a tap event to the application, switching the application to the next page:</p> <p></p> <p>Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on <code>Spy &gt; Disconnect</code> menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script.</p>"},{"location":"Guide/mobile_testing_android/#recording-and-playing-a-test","title":"Recording and Playing a Test","text":"<p>With the new Rapise mobile test script open, click on the <code>Record</code> button on the toolbar and that will display the recording activity dialog:</p> <p></p> <p>Now click on the <code>Spy</code> button and in the Rapise Spy click <code>Get Snapshot</code> button on the toolbar:</p> <p></p> <p>We now want to record a click on one of the menu options, simply click on the <code>Login</code> button on the screenshot you see in Mobile Spy:</p> <p></p> <p>Now click the <code>Tap</code> button to move the sample app to the next screen; Rapise will  automatically reload the page in the Mobile Spy to get the updated screen:</p> <p></p> <p>Now highlight user name field, put text into the edit field on the toolbar and press <code>Send Keys</code> button. Do the same for password field and record tap action on the Login and Home (back arrow) buttons. You will see the events in the recording activity dialog:</p> <p></p> <p>Now click on the <code>Finish</code> button and you will be taken back to the test script. Click on <code>Append to End</code> button.</p> <p></p> <p>Find Android objects listed and actions displayed on the RVL sheet:</p> <p></p> <p>Now to playback the test simply click <code>Play</code> in the Rapise toolbar and the test will play back in the Android Emulator. This is the report of the test being executed.</p> <p></p>"},{"location":"Guide/mobile_testing_android/#sample-application-and-tests","title":"Sample Application and Tests","text":"<p>You can find the Android sample tests and sample Application in AUTAndroid Repository.</p>"},{"location":"Guide/mobile_testing_android/#see-also","title":"See Also","text":"<ul> <li>Mobile Testing, for an overview of mobile testing with sub-sections on testing.</li> <li>Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing.</li> <li>Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.</li> <li>KB382 Android Testing Hints</li> <li>KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI?</li> <li>KB278 How to run a cross-browser test on a mobile device?</li> </ul>"},{"location":"Guide/mobile_testing_ios/","title":"Mobile Testing using iOS","text":""},{"location":"Guide/mobile_testing_ios/#purpose","title":"Purpose","text":"<p>Rapise lets you record and play automated tests on real iOS devices (iPad and iPhone) as well as test applications using the iOS simulator that ships with Xcode. No jailbreaking needed! With Rapise you can record on one device and playback on multiple.</p>"},{"location":"Guide/mobile_testing_ios/#prerequisites","title":"Prerequisites","text":"<p>This section assumes that you have already installed and configured all of the necessary components. For details on this, please refer to the Preparing Environment for iOS Mobile Testing section.</p>"},{"location":"Guide/mobile_testing_ios/#configure-the-mobile-profile","title":"Configure the Mobile Profile","text":"<p>To begin the actual mobile testing, create a new test, using the <code>File &gt; Create New &gt; New Test</code> option in Rapise. Make sure you choose the mobile methodology option Mobile:</p> <p></p> <p>Once you have entered the name for the new test (with the mobile methodology selected) you will be asked to choose the mobile profile. Rapise ships with several default profiles, for now select the one that is closer to the device you want to test (we recommend the iOS App Simulator generic profile):</p> <p></p> <p>When you click the <code>OK</code> button, Rapise will ask you to choose the Scripting Language:</p> <p></p> <p>Please choose the Rapise Visual Language (RVL). Rapise will then create a new mobile test with the iOS App Simulator profile selected.</p> <p></p> <p>Now you need to modify the profile so that it correctly matches the type of device you are testing and also so that it correctly points to the Appium server that you are using to host the mobile devices. Click <code>...</code> button in the top right corner of Rapise window</p> <p></p> <p> The example screeenshot above is for an iPhone X simulator running iOS 11.4. For any iOS device (real or simulated) you will need to provide the following:</p> <ul> <li>Uri - this is the URL to your Appium server. We shall discuss this shortly.</li> <li>app - this needs to be the path (on the Mac running Appium) to the Application being tested on the device (e.g. <code>/Users/user.name/Library/Developer/Xcode/DerivedData/AUTiOS-gvdyymxgyzrfgqdfvfylapawjoyd/Build/Products/Debug-iphonesimulator/AUTiOS.app</code>)</li> <li>deviceName - this needs to match the name of the device being connected.</li> <li>platformName - this needs to be set to iOS.</li> <li>platformVersion - this needs to be set to the correct version of iOS that the device is running.</li> </ul> <p>In addition, for physical devices only, you need to specify:</p> <ul> <li>udid - the unique device identifier of the connected physical device (leave blank for simulated devices).</li> </ul> <p>Once you have entered in the information and saved the profile, make sure that Appium is running on the Mac and then click the <code>Test Url</code> button to verify the connection with Appium:</p> <p></p> <p>Now you can start testing your mobile iOS application.</p>"},{"location":"Guide/mobile_testing_ios/#using-the-mobile-spy","title":"Using the Mobile Spy","text":"<p>The Mobile Spy will let you view an application running on the mobile device, take a snapshot of its screen and then interactively inspect the objects in the application being tested. This is a useful first step to make sure that Rapise recognizes the application and has access to the objects in the user interface.</p> <p>If you do not see Mobile Spy button  on the toolbar then choose Mobile Spy from the main menu: <code>Tools &gt; Spy &gt; Mobile</code>. Click Mobile Spy button. Now click the <code>Get Snapshot</code> button to display the application specified in the mobile profile on the screen:</p> <p></p> <p>In the example above, we are displaying the sample iOS application that is available in AUTiOS Repository.</p> <p>If you click on one objects in the user interface, it will be highlighted in Red and the tree hierarchy on the left will expand to show the properties of that object:</p> <p></p> <p>If you want to view the contents of the Spy as a text file, just click <code>Spy &gt; Page Source</code> menu and you will see the contents of the Spy properties window as a text file.</p> <p>If you want to perform an action on the application (e.g. click on the selected item) use toolbar buttons.</p> <p></p> <p>Now click on <code>Tap</code> and Rapise will send a tap event to the application, switching the application to the next page:</p> <p></p> <p>Assuming that you can see your application in the Spy and that the objects can be inspected (similar to that shown above) you can now begin the process of testing your mobile application. Click on <code>Spy &gt; Disconnect</code> menu to end your Spy session and close the Rapise Spy dialog. You will now be returned back to your test script.</p>"},{"location":"Guide/mobile_testing_ios/#recording-and-playing-a-test","title":"Recording and Playing a Test","text":"<p>With the new Rapise mobile test script open, click on the <code>Record</code> button on the toolbar and that will display the recording activity dialog:</p> <p></p> <p>Now click on the <code>Spy</code> button and in the Rapise Spy click <code>Get Snapshot</code> button on the toolbar:</p> <p></p> <p>We now want to record a click on one of the menu options, simply click on the <code>Basic Controls</code> list item on the screenshot you see in Mobile Spy:</p> <p></p> <p>Now click the <code>Tap</code> button to move the sample app to the next screen; Rapise will  automatically reload the page in the Mobile Spy to get the updated screen. Now highlight user name field, put text into the edit field on the toolbar and press <code>Send Keys</code> button.</p> <p></p> <p>Do the same for password field and record <code>tap</code> action on the <code>Login</code> and <code>Home (back arrow)</code> buttons. You will see the events in the recording activity dialog:</p> <p></p> <p>Now click on the <code>Finish</code> button and you will be taken back to the test script. Click on <code>Append to End</code> button.</p> <p></p> <p>Find iOS objects listed and actions displayed on the RVL sheet:</p> <p></p> <p>Now to playback the test simply click <code>Play</code> in the Rapise toolbar and the test will play back in the iOS Simulator. This is the report of the test being executed.</p> <p></p>"},{"location":"Guide/mobile_testing_ios/#sample-application-and-tests","title":"Sample Application and Tests","text":"<p>You can find the Android sample tests and sample Application in AUTiOS Repository.</p>"},{"location":"Guide/mobile_testing_ios/#see-also","title":"See Also","text":"<ul> <li>Mobile Testing, for an overview of mobile testing with sub-sections on testing.</li> <li>Mobile Settings Dialog - for information on setting up the different mobile profiles for the mobile devices you will be testing.</li> <li>Mobile Object Spy - for information on how Rapise connects to the device and lets you view the objects in the tested application.</li> <li>KB381 iOS Testing Hints</li> <li>KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI?</li> <li>KB278 How to run a cross-browser test on a mobile device?</li> <li>KB418 Is it possible to automate an iOS Web App using Rapise?</li> </ul>"},{"location":"Guide/multiple_recordings/","title":"Multiple Recordings","text":""},{"location":"Guide/multiple_recordings/#purpose","title":"Purpose","text":"<p>Every time you record, the script recorder updates your test script.</p>"},{"location":"Guide/multiple_recordings/#usage","title":"Usage","text":""},{"location":"Guide/multiple_recordings/#recording-in-rvl-mode","title":"Recording in RVL Mode","text":"<p>During Recording, the Script Recorder:</p> <ol> <li>Appends newly recorded actions to the current sheet in <code>Main.rvl.xlsx</code></li> <li>Appends newly encountered objects to the repository stored in <code>Object.js</code></li> <li>Updates <code>g_load_libraries</code> to reflect the library selections you made in the Select an Application to Record... Dialog</li> </ol>"},{"location":"Guide/multiple_recordings/#recording-in-javascript-mode","title":"Recording in JavaScript Mode","text":"<p>During Recording, the Script Recorder:</p> <ol> <li>Appends newly recorded actions to the <code>Test()</code> function inside <code>Main.js</code> of the current test case</li> <li>Appends newly encountered objects to the repository stored in <code>Object.js</code></li> <li>Updates <code>g_load_libraries</code> to reflect the library selections you made in the Select an Application to Record... Dialog</li> </ol>"},{"location":"Guide/multiple_recordings/#see-also","title":"See Also","text":"<ul> <li>Settings Dialog</li> <li>Select an Application to Record... Dialog</li> <li>Recording</li> </ul>"},{"location":"Guide/namevalue_collection_editor_di/","title":"TestParam Collection Editor Dialog","text":""},{"location":"Guide/namevalue_collection_editor_di/#purpose","title":"Purpose","text":"<p>To specify Custom Strings and their values.</p>"},{"location":"Guide/namevalue_collection_editor_di/#how-to-open","title":"How to Open","text":"<p>Open from the Settings Dialog, TestParams option:</p> <p></p>"},{"location":"Guide/namevalue_collection_editor_di/#widgets","title":"Widgets","text":"<ul> <li>Add a custom string. \u00a0If you press Add, you'll see this:</li> </ul> <ul> <li>Remove: removes selected custom string.</li> <li>OK: Save changes and close dialog.</li> <li>Cancel: Close dialog without saving changes.</li> </ul>"},{"location":"Guide/naming_conventions/","title":"Naming Conventions","text":""},{"location":"Guide/naming_conventions/#purpose","title":"Purpose","text":"<p>The Rapise engine and API follow some simple naming conventions.</p>"},{"location":"Guide/naming_conventions/#usage","title":"Usage","text":"<p>You will find descriptions of the naming conventions below. \u00a0Note: italicized text represents placeholders.</p> <ul> <li>SeS*&lt;...&gt;* - public functions for user</li> <li>Do*&lt;Action&gt;* - action implementations</li> <li>_&lt;somevar&gt; and _&lt;somename&gt; - private functions and objects</li> <li>g_&lt;varname&gt; - system global variable.</li> </ul>"},{"location":"Guide/naming_conventions/#private-variables-and-functions-in-the-object-tree","title":"Private Variables and Functions in the Object Tree","text":"<p>Any custom function or variable that you define in <code>User.js</code>, <code>Common.js</code>, or any other <code>.js</code> file will be displayed in the corresponding node of the object tree.</p> <p>However, there are two exceptions that can help you hide internal functions or variables from the tree:</p> <ol> <li> <p>If you prefix a function name with an underscore, such as _myFunc, those functions will be automatically filtered and not displayed in the tree.</p> </li> <li> <p>You can use <code>/** @private */</code> and <code>/** @ignore */</code> comments to indicate that a function or variable should be treated as private or ignored, respectively.</p> </li> </ol> <p></p>"},{"location":"Guide/naming_conventions/#examples","title":"Examples","text":"<p>Here are some examples to clarify the above conventions:</p> <pre><code>SeS(\"object\") // gets the object named \"object\"\nDoClick()     // public action function to click on something\n_mydata       // private variable called mydata\ng_publicdata  // global variable called publicdata\n</code></pre>"},{"location":"Guide/neoload_convertor_dialog/","title":"NeoLoad Convertor Dialog","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p> <p></p>"},{"location":"Guide/neoload_convertor_dialog/#purpose","title":"Purpose","text":"<p>The purpose of this dialog is to allow you to convert a functional test script from Rapise into a protocol-based performance script that can be executed using the NeoLoad performance testing tool from Neotys.</p>"},{"location":"Guide/neoload_convertor_dialog/#how-to-open","title":"How to Open","text":"<p>Use menu <code>Tools &gt; Convert to Neoload</code>.</p>"},{"location":"Guide/neoload_convertor_dialog/#virtual-user","title":"Virtual User","text":"<p>In this field, you need to enter the name of the virtual user to create in NeoLoad:</p> <ul> <li>The default value is \"VirtualUser\"</li> <li>If the name is already used, then it is automatically renamed using \u201c_X\u201d suffix, with X an integer incremented.</li> <li>If the name has invalid characters then they will be escaped as an underscore (_).</li> </ul>"},{"location":"Guide/neoload_convertor_dialog/#base-container","title":"Base Container","text":"<p>This specifies the base container \u00a0where we want to start the recording (Init / Actions / End)</p> <ul> <li>The default value is Actions.</li> </ul>"},{"location":"Guide/neoload_convertor_dialog/#containerbusiness-transaction","title":"Container/Business Transaction","text":"<p>This is used to specify the current recording container in NeoLoad. It is just based on a single level. There is no way to specify a tree of containers.</p> <ul> <li>The default is no container.</li> <li>If the name is already used then it will be made unique by adding _1, _2, etc.</li> <li>If the name is empty then no container will be used.</li> </ul>"},{"location":"Guide/neoload_convertor_dialog/#detect-dynamic-parameters","title":"Detect Dynamic Parameters","text":"<p>When you check this box, Rapise tells NeoLoad to scan the protocol traffic to look for known dynamic parameters (e.g. Session IDs, ASP.NET ViewState) that change on each HTTP request and need to be parameterized by NeoLoad to ensure the performance scripts are robust and well-defined (v.s. having a hardcoded Session ID).</p>"},{"location":"Guide/neoload_convertor_dialog/#actions","title":"Actions","text":"<ul> <li>Convert will start the Rapise &gt; NeoLoad test conversion process</li> <li>Cancel will abort the conversion and return you to Rapise</li> </ul>"},{"location":"Guide/neoload_integration/","title":"NeoLoad Integration","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p> <p>This section describes the integration between Inflectra\u2019s Rapise functional testing tool and Neotys\u2019 NeoLoad performance testing tool.</p> <p>The purpose of this integration is to satisfy the following two use cases:</p> <ol> <li>The tester has written a test script in Rapise that tests the user interface of the application (by clicking on buttons and performing other UI tasks) but now wants to load test the server behind the user interface to make sure it can withstand the load of 10,000+ similar users making requests.<ul> <li>The existing Rapise test is not suitable because it would mean launching 10,000+ instances of the application or web browser on a single client machine, or having 10,000 instances of the application run on different machines at the same time.</li> <li>The solution is to use a protocol-based load testing tool such as NeoLoad that sends the HTTP/HTTPS requests directly to the server.</li> <li>However it is laborious and time consuming to manually record the entire script in NeoLoad from scratch.</li> <li>The solution is to automatically convert the Rapise script to NeoLoad by playing the Rapise script at the same time as NeoLoad records the generated HTTP/HTTPS traffic.</li> </ul> </li> <li>The tester wants to measure the speed of the user interface that a user would experience whilst performing a protocol-level level load test.<ul> <li>How long does each transaction take whilst 1000 VUs are hitting the same system.</li> <li>The user interface could be web, mobile or thick client (e.g. ERP system).</li> </ul> </li> </ol>"},{"location":"Guide/neoload_settings_dialog/","title":"NeoLoad Settings Dialog","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p> <p></p>"},{"location":"Guide/neoload_settings_dialog/#purpose","title":"Purpose","text":"<p>The purpose of this dialog is to allow you to specify the global options for integrating Rapise with NeoLoad, the performance testing tool from Neotys.</p>"},{"location":"Guide/neoload_settings_dialog/#how-to-open","title":"How to Open","text":"<p>Use menu <code>Settings &gt; NeoLoad Integration</code>.</p> <p>Normally there is no any reason to change these settings, but for completeness they are described below:</p> <ul> <li>NeoLoad Data Exchange URL - this is the URL to the NeoLoad data exchange API</li> <li>NeoLoad Proxy Address - this is the IP address and prt of the NeoLoad HTTP proxy</li> <li>NeoLoad REST Service URL - this is the URL to the NeoLoad recording service REST API</li> </ul>"},{"location":"Guide/nunit/","title":"NUnit","text":""},{"location":"Guide/nunit/#about-nunit-integration","title":"About NUnit Integration","text":"<p>SeSNUnit is a sample of using NUnit. We provide special attribute to help executing Rapise GUI tests from within NUnit tests.</p> <p>Standard NUnit test looks like this:</p> <pre><code>using System;\nusing NUnit.Framework;\n\n[TestFixture]\npublic class MyTests\n{\n    [Test] /* \u2013 THIS IS AN ATTRIBUTE FOR STANDARD NUnit Test */\n    public void MyTest1()\n    {\n        Assert.AreEqual(1, 2, \"Check equality\");\n    }\n}\n</code></pre> <p>Each test case is a function with a special attribute [Test]. NUnit uses it to find test cases, then collects cases in sets and so on.</p> <p>Rapise integration makes execution of Rapise tests as simple as execution of normal NUnit tests:</p> <pre><code>using System;\nusing NUnit.Framework;\nusing SeSNUnit; // We include Rapise helper class\n\n[TestFixture]\npublic class PlayerTesting\n{\n    // Next line means: this is an NUnit test that executes Cross Browser.sstest with Rapise\n    [SeSNUnitTest(@\"T:\\Samples\\Cross Browser\\CrossBrowser.sstest\")]\n    public void TestIEandFirefox()\n    {\n        int exitCode = SeSNUnitHelper.TestExecute();\n        Assert.AreEqual(0, exitCode);\n    }\n}\n</code></pre> <p>Now we use another attribute to mark the test:</p> <pre><code>[SeSNUnitTest(@\"&lt;path to .sstest&gt;\")]\n</code></pre> <p>We just mark this test as a wrapper for concrete Rapise test instance.</p>"},{"location":"Guide/nunit/#installing-nunit","title":"Installing NUnit","text":"<p>To run this sample you need NUnit. You can download NUnit from this site http://www.nunit.org/index.php?p=download.</p> <p>Download and install NUnit package (for example, NUnit-2.4.8-net-2.0.msi).</p> <p>It is installation package file, so only thing that you need to do after download is to double click on that file.</p> <p>Run NUnit from the start menu:</p> <p></p> <p>Select \u201cOpenProject\u2026\u201d from \u201cFile\u201d menu:</p> <p></p> <p>In opened window find and select</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit\\SeSSamplesNUnit\\bin\\Release\\SeSSamplesNUnit.dll\n</code></pre> <p>Press \u201cRun\u201d to start the test</p> <p></p> <p>After the test ended NUnit GUI must look like:</p> <p></p>"},{"location":"Guide/nunit/#tree-display","title":"Tree Display","text":"<p>There is a test tree in the left part of a window, it contains tests of current NUnit project.</p> <p>From this tree you can easily determine the test status. Successful tests are colored green, with a check mark. If any tests had failed, they would be marked red, with an X symbol.</p>"},{"location":"Guide/nunit/#progress-bar","title":"Progress Bar","text":"<p>The progress bar shows the progress of the test. It is colored according to the \"worst\" result obtained: red if there were any failures, yellow if some tests were ignored and green for success.</p>"},{"location":"Guide/nunit/#result-tabs","title":"Result Tabs","text":"<p>The tabs in the right-hand part of the display show the results of running a test. The Errors and Failures tab displays the error message and stack trace for both unexpected exceptions and assertion failures. The Tests Not Run tab provides a list of all tests that were selected for running but were not run, together with the reason. The Console.Out, Console.Error and Trace Output tabs display text output from the tests.</p>"},{"location":"Guide/nunit/#visual-studio-templates","title":"Visual Studio Templates","text":"<p>Templates are available to help you creating tests in Visual Studio. To install them use run installer file: </p> <pre><code>C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\NUnit\\SeSNUnit.vsi\n</code></pre> <p>and follow the installation process</p> <p></p> <p>This will add code snippets and project templates described below.</p>"},{"location":"Guide/nunit/#creating-sesnunit-test","title":"Creating SeSNUnit test","text":"<p>Maybe you will want to write your own SeSNUnit test. \u00a0We have special template which will help you to do that. In this part we\u2019ll explain how to use it.</p> <p>The only thing you need to do is just to create SeSNUnitTests type project. For that open VS2005, on Start Page click on <code>Project...</code> (in the right side of <code>Create:</code>) and in opened window from <code>My Templates</code> part select <code>SeSNUnitTests</code>. If you want you can change name of dll. By default it is <code>SeSNUnitTests1</code>:</p> <p></p> <p>In the created project Open <code>Fixture1.cs</code> file. \u00a0All necessary references are already added:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Diagnostics;\nusing NUnit.Framework;\nusing SeSNUnit;\n</code></pre> <p>File also contains <code>Fixture1class</code> with <code>[TestFixture]</code> attribute:</p> <pre><code>[TestFixture]\npublic class Fixture1\n{\n    ...\n}\n</code></pre> <p>This is the attribute that marks a class that contains tests and, optionally, setup or teardown methods.</p> <p>There are a few restrictions on a class that is used as a test fixture.</p> <ul> <li>It must be a publicly exported type.</li> <li>It must not be abstract.</li> <li>It must have a default constructor</li> <li>It must have no more than one of each of the following method types: <code>SetUp</code>, <code>TearDown</code>, <code>TestFixtureSetUp</code> and <code>TestFixtureTearDown</code>.</li> </ul> <p>If any of these restrictions are violated the class will be shown as a non-runnable test fixture and will turn yellow in the NUnit GUI if you attempt to run it.</p> <p>In addition it is advisable that the constructor not have any side effects since NUnit may construct the object multiple times in the course of a session.</p> <p>In class we have <code>SetUp()</code> and <code>TearDown()</code> methods, and one more test method:</p> <pre><code>[SetUp()]\npublic void SetUp()\n{\n    //TODO - Setup your test objects here\n}\n\n[TearDown()]\npublic void TearDown()\n{\n    //TODO - Tidy up your test objects here\n}\n\n[SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)]\npublic void TestSeS()\n{\n    int exitCode = SeSNUnitHelper.TestExecute();\n    Assert.AreEqual(0, exitCode);\n}\n</code></pre> <p>Now you also have a snippet, by which you can easily add <code>TestSeS</code> method with <code>[SeSNUnitTest(@\"&lt;path to .sstest&gt;\")]</code> attribute. Right click in class body and from opened context menu select <code>Insert Snippet\u2026</code>:</p> <p></p> <p>From it select My Code Snippets (if your snippets are in My Code Snippets folder, otherwise select proper folder), and then SeSNUnitTest:</p> <p></p> <p>This code will be added:</p> <pre><code>[SeSNUnitTest(/*Insert path to .sstest file which must be run.*/)]\npublic void TestSeS()\n{\n    int exitCode = SeSNUnitHelper.TestExecute();\n    Assert.AreEqual(0, exitCode);\n}\n</code></pre> <p>You just need to add path of <code>.sstest</code> \u00a0file to <code>SeSNUnitTest</code> attribute. If you add code via snippet in standard SeSNUnit Test project you will have two <code>TestSeS</code> methods, so don\u2019t forget to change the name of one of them.</p>"},{"location":"Guide/object_learning/","title":"Learning","text":""},{"location":"Guide/object_learning/#purpose","title":"Purpose","text":"<p>Objects are the controls and items on the screen of the AUT. \u00a0Learning an object refers to the process of Rapise collecting enough information about the on-screen item to be able to reference the item when the test script is run without ambiguity and regardless of its location on the UI.</p> <p>When Rapise learns an object, it records the object's type, its name and how to find the object again (locator). \u00a0It saves everything it learns to the script so that the object can be identified when the test is run. \u00a0Rapise gives the object a simple name so that you can easily refer to it later if you decide to modify the script.</p>"},{"location":"Guide/object_learning/#usage","title":"Usage","text":"<p>Objects are learned in three ways: (1) automatically during recording, (2) manually using Learn button, (3) using the Spy tool.</p>"},{"location":"Guide/object_learning/#1-automatic-learn","title":"1. Automatic Learn","text":"<p>During a Recording session, Rapise learns about each object with which you interact. \u00a0For details, see Recording.</p>"},{"location":"Guide/object_learning/#2-manual-learn","title":"2. Manual Learn","text":"<ol> <li>Open the Recording Activity Dialog. Instructions are HERE.</li> <li>Place your mouse over the object you wish to learn. \u00a0It should become surrounded by a purple box.</li> <li>Press Ctrl+2.</li> <li>You will see a new entry in the Recording Activity Dialog, signifying that the object was learned.</li> </ol>"},{"location":"Guide/object_learning/#3-spy-tool","title":"3. Spy Tool","text":"<p>During a Recording session, you can also click on the Spy button inspect the object hierarchy of the application you are testing. The Spy lets you pick specific objects that might not be visible on the screen, or may be parent/child objects of the one highlighted. When you have found the correct object in the Spy, you can use the Learn Object button inside the Spy to add it to Rapise's learned object list.</p>"},{"location":"Guide/object_learning/#the-object-tree","title":"The Object Tree","text":"<p>Regardless of how you learn the object, it will be displayed in the Object tree:</p> <p></p> <p>Each object has various properties and actions that can be performed on it. Expanding the object name lets you see the available actions and properties:</p> <p></p> <p>Everything Rapise learns about an object is saved in saved_script_objects array. You can see this variable defined in the <code>Objects.js</code> file that will be listed in the Files tab of the Rapise. The following shows what Rapise saved about the \"Please enter your name\" text box in the Tutorial: Windows Testing:</p> <pre><code>\"Please_enter_your_name_\": {\n    \"locations\": [\n        {\n            \"locator_name\": \"UIAutomation\",\n            \"location\": {\n                \"location\": \"param:location\",\n                \"window_name\": \"param:window_name\",\n                \"window_class\": \"param:window_class\"\n            }\n        }\n    ],\n    \"window_class\": \"#32770\",\n    \"object_text\": \"\",\n    \"object_role\": \"param:object_class\",\n    \"object_class\": \"Edit\",\n    \"version\": 0,\n    \"object_type\": \"UIATextBox\",\n    \"object_flavor\": \"Text\",\n    \"object_name\": \"Please enter your name:\",\n    \"object_library\": \"UIAutomation\",\n    \"window_name\": \"Inflectra Rapise Two Dialogs Sample\",\n    \"location\": \"Inflectra Rapise Two Dialogs Sample/Please enter your name:[1]\"\n}\n</code></pre>"},{"location":"Guide/object_learning/#see-also","title":"See Also","text":"<ul> <li>Recording</li> <li>Learning invisible \u00a0and Simulated Objects is slightly more complicated. \u00a0You can find information on both in the Recording Activity Dialog section.</li> <li>Learn Object</li> </ul>"},{"location":"Guide/object_locator/","title":"Object Locator","text":""},{"location":"Guide/object_locator/#purpose","title":"Purpose","text":"<p>Object locators are created during Recording/Learning and used during Playback to identify learned objects and simulated objects. There are many types of locators.</p> <p>In most libraries (Web, Desktop, Mobile) only one locator is generated when you record or learn an object.</p> <p>Legacy Generic library supports 4 different locators added each time you learn or record object:</p> <ul> <li>Location: This locator uses the object's index relative to encapsulating objects for identification. The location is stored as a period separated list of indexes. For instance, 1.2.3 would be \"the third object in the second object in the first object.\" \u00a0The name, class, and role of the object are also stored.</li> <li>LocationPath: This locator remembers name, class, and role property information for the object and all of its encapsulating objects.</li> <li>LocationRect: This locator stores screen coordinates.</li> <li>Ordinal: This locator creates an array of object name/object class combinations. \u00a0Each object is assigned an index in \u00a0the array.</li> </ul>"},{"location":"Guide/object_locator/#usage","title":"Usage","text":"<p>The locator for the selected object is shown in the Properties view:</p> <p></p>"},{"location":"Guide/object_locator/#how-locators-are-stored","title":"How Locators are Stored","text":"<p>The locator for each object is specified in <code>saved_script_objects</code> array in Objects.js of a test. Locator information is stored in <code>locations</code> array of each object.</p> <pre><code>\"Simulated\": {\n    \"locations\": [\n        {\n            \"locator_name\": \"Location\",\n            \"location\": {\n                \"location\": \"4.3.4.1.4.1.4.1.4.1.4.10.1.1.7.3\",\n                \"window_name\": \"param:window_name\",\n                \"window_class\": \"param:window_class\"\n            }\n        },\n        {\n            \"locator_name\": \"LocationPath\",\n            \"location\": {\n                // ...\n            }\n        },\n        {\n            \"locator_name\": \"LocationRect\",\n            \"location\": {\n                \"window_name\": \"param:window_name\",\n                \"window_class\": \"param:window_class\",\n                \"rect\": {\n                    \"object_name\": \"\",\n                    \"object_class\": \"param:object_class\",\n                    \"object_role\": \"param:object_role\",\n                    \"x\": 573,\n                    \"y\": 59,\n                    \"w\": 220,\n                    \"h\": 66\n                }\n            }\n        }\n    ],\n    \"window_class\": \"MSPaintApp\",\n    \"object_text\": \"\",\n    \"object_role\": \"ROLE_SYSTEM_GROUPING\",\n    \"object_class\": \"NetUIHWND\",\n    \"version\": 0,\n    \"object_type\": \"SeSSimulated\",\n    \"object_flavor\": \"Simulated\",\n    \"object_name\": \"Simulated\",\n    \"ignore_object_name\": true,\n    \"window_name\": \"Untitled - Paint\"\n}\n</code></pre>"},{"location":"Guide/object_locator/#locator-parameters","title":"Locator Parameters","text":"<p>If a piece of information in the locator matches a piece of object info (<code>object_name</code>, <code>object_class</code>, <code>object_role</code>, <code>object_text</code>) then it is stored in the locator as <code>param:object_info</code>. \u00a0For example:</p> <pre><code>\"object_name\": \"param:object_name\",\n\"object_class\": \"param:object_class\",\n\"object_role\": \"param:object_role\"\n</code></pre>"},{"location":"Guide/object_locator/#over-riding-locator-parameters-rvl","title":"Over-riding Locator Parameters (RVL)","text":"<p>See also RVL.SetLocatorOpts and this KB Article for more detailed explanation and example of overriding locator parameters in RVL.</p>"},{"location":"Guide/object_locator/#over-riding-locator-parameters-js","title":"Over-riding Locator Parameters (JS)","text":"<p>You can over-ride the information used to locate your object at runtime. \u00a0Normally, to refer to an object, you use the SeS function:</p> <pre><code>SeS('Username')\n</code></pre> <p>To override locator parameters, specify the new value in the function call. In the following example, we over-ride the object_name parameter for object <code>Username</code>:</p> <pre><code>SeS('Username',\u00a0{object_name:\"regex:.*\"})\n</code></pre> <p>You may want to change a parameter value for every locator/object in the program. \u00a0For instance, perhaps the url of the webpage has changed. \u00a0Use the global variable g_locatorparams as in the following example:</p> <pre><code>function Test()\n{\n    // Here we use direct parameter overriding\n    SeS('Obj1', {url:\"http://newaddr/\"}).DoAction();\n    SeS('Obj2', {url:\"http://newaddr/\"}).DoAction();\n\n    // And this is equivalent to above\n    g_locatorparams[\"url\"] = \"http://newaddr/\";\n    SeS(\"Obj1\").DoAction();\n    SeS(\"Obj2\").DoAction();\n\n    // ...\n}\n</code></pre>"},{"location":"Guide/object_locator/#see-also","title":"See Also","text":"<ul> <li>Object Learning</li> <li>Playback</li> </ul>"},{"location":"Guide/object_manager/","title":"Object Manager","text":""},{"location":"Guide/object_manager/#purpose","title":"Purpose","text":"<p>The Object Manager allows you to merge the object trees of two different Rapise tests. This can be useful when you have a new test that needs some of the objects from a test that you have already written.</p> <p></p>"},{"location":"Guide/object_manager/#how-to-open","title":"How to Open","text":"<p>Use menu <code>Tools &gt; Object Manager</code>.</p> <p>In testing framework mode you may open an Object Manager from the context menu of the corresponding object repository:</p> <p></p>"},{"location":"Guide/object_manager/#choosing-files-to-merge","title":"Choosing Files to Merge","text":"<p>In the example above we have opened up a test case that has some objects. Now we need to open up another test that also has some objects. To do this, click on the dropdown button to the right of the Dst (destination) text box to open up a Rapise test object file (<code>Objects.js</code>):</p> <p></p> <p>Once you have selected the file, the Object Manager dialog will display the list of objects to be merged (see next section).</p> <p>If you click on the dropdown button in left hand side of the dialog box, marked Src (Source), you will be able to select a different Rapise test object file (<code>Objects.js</code>) that you want to copy the objects from.</p> <p>If you want to make the current test the Destination rather than the Source (i.e. you want to add objects to the current test rather than exporting from the current test), simply click the switch sides <code>&lt;--&gt;</code> icon and the current test will be moved to the destination:</p> <p></p>"},{"location":"Guide/object_manager/#viewing-the-objects-to-merge","title":"Viewing the Objects to Merge","text":"<p>Once you have selected both the source and destination object files, the system will display the dialog that lets you see all the objects defined the source and destination tests. You can now choose which objects to add/delete to/from the destination test:</p> <p></p> <p>For each object in the object manager you will see an <code>&gt;</code> expand icon in the left-hand side. When you click on this icon it will expand the object to display its properties. If the same object is in both the source and destination, you will see the properties of both versions on the left and right hand sides respectively. If it only exists in the source or destination, then it will only show the properties on the appropriate side:</p> <p></p> <p>Each object in the source object list will be displayed with one of two icons:</p> <ul> <li>equals (=) - this means that the same object exists in both the source and destination test object files.</li> <li>not-equals (\u2260) - this means that the object only exists in the source file and not in the destination or vice-versa</li> </ul> <p>You can see which file(s) an objects is defined in (source, destination or both) by looking for the <code>...</code> icon. If you see this on the left hand side only, this object only exists in the source file, if you see it in the right-hand side, it only exists in the destination.</p> <p>If you see it on both sides then it exists in both the source and destination:</p> <p></p>"},{"location":"Guide/object_manager/#merging-the-objects","title":"Merging the Objects","text":"<p>To add an object from the source &gt; destination test (for example the 'Name' object in this example) select the row in question:</p> <p></p> <p>Then click on the 'Copy Object to the Right (F5)' icon in the toolbar. This will copy the object from the source to the destination:</p> <p></p> <p>You can tell that the object has been copied because the not-equals (\u2260) sign changes to the equals option (=).</p> <p>Conversely, to remove an object (e.g. Username) from the destination, simply select the row:</p> <p></p> <p>Then click on the 'Remove from Destination (Ctrl+D)':</p> <p></p> <p>The object will now have been removed from the destination object tree.</p> <p>Warning: All of the changes you make to the objects file are committed immediately, so only delete objects in the destination test that you no longer want to be part of the test.</p>"},{"location":"Guide/object_not_found/","title":"Object Is Not Found - How to Fix","text":"<p>We recommend to follow this algorithm. Some nodes are clickable. Click them to get more information.</p>"},{"location":"Guide/object_not_found/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> <li>Automation Tips: Object is Not Found</li> </ul>"},{"location":"Guide/object_spy/","title":"Object Spy","text":""},{"location":"Guide/object_spy/#purpose","title":"Purpose","text":"<p>The Object Spy allows you to inspect an object's properties and state.</p> <p>Many controls on User Interfaces are compound objects or there may be many instances of a similar object. \u00a0To be sure to select precisely the correct object, or to select the correct object from a collection of similar objects, the object's properties can be used to further identify the correct instance.</p>"},{"location":"Guide/object_spy/#usage","title":"Usage","text":""},{"location":"Guide/object_spy/#select-spy","title":"Select Spy","text":"<p>To spy on an object choose the type of Object Spy that you want to use. This can be done by using the menu <code>Tools &gt; Spy &gt; ...</code> or by clicking the down-arrow next to the Spy icon in the toolbar:</p> <p></p> <p>There are 6 types of Spy available:</p> <ol> <li>Accessible - This is used to inspect applications that expose their properties using the Microsoft Active Accessibility (MSAA) technology. This is typically used by applications written in MFC, ATL, Qt, C++ and Visual Basic.</li> <li>Java - This is used to inspect applications written using the Java AWT and Swing UI frameworks.</li> <li>Managed - This is used to inspect applications written in .NET 1.1, .NET 2.0, .NET 4.0 using Microsoft Windows Forms.</li> <li>Mobile - This is used to inspect mobile applications running on iOS or Android devices as well as the iOS or Android simulator.</li> <li>UIAutomation - This is used to inspect applications that expose their properties using the Microsoft's newer UIAutomation technology. This is typically used by applications written in WPF, Silverlight and Java SWT.</li> <li>Web - This is used to inspect Web application running in browsers: Internet Explorer, Chrome, Firefox or any browser accessible via Selenium.</li> </ol> <p>For more details on each Spy type, refer to specific topic above.</p>"},{"location":"Guide/object_spy/#object-tracking","title":"Object Tracking","text":"<p>Open the Spy Dialog. \u00a0This can be done directly using the Spy button in the main Rapise toolbar, or by pressing the Spy button in the Recording Activity dialog during recording or learning.</p> <ol> <li>Click the Start Tracking button (or press Ctrl+G (or Ctrl+T in Web Spy).</li> <li>As your mouse moves over different objects, you will see the contents of the Object Spy dialog change as it collects information about the object.</li> <li>Mouse over the object you wish to spy on and press Ctrl+G. \u00a0The reduced-size tracking dialog will be expanded into the the larger Object Spy Dialog, presenting all the available information for the object.</li> </ol>"},{"location":"Guide/object_spy/#see-also","title":"See Also","text":"<ul> <li>See the Object Spy Dialog for more details.</li> </ul>"},{"location":"Guide/object_spy_accessible/","title":"Accessible (MSAA) Spy","text":""},{"location":"Guide/object_spy_accessible/#purpose","title":"Purpose","text":"<p>The Accessible Spy is used to inspect applications that contain Microsoft Active Accessible (MSAA) objects.</p> <p></p>"},{"location":"Guide/object_spy_accessible/#features","title":"Features","text":"<p>The Accessible Spy has the following features:</p> <ul> <li>The Tree pane lets you view the hierarchy of MSAA objects available in the application</li> <li>The Properties pane lets you view the exposed properties of the highlighted MSAA object</li> <li>The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn.</li> </ul>"},{"location":"Guide/object_spy_accessible/#commands","title":"Commands","text":"<p>In addition to viewing the object hierarchy and object properties, you can perform the following tasks:</p> <ul> <li>Parent - This selects the parent object of the one displayed</li> <li>Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy.</li> <li>Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application.</li> <li>Default Action - this will perform the default action on the selected object in the Spy</li> <li>Mouse Click - \u00a0this will perform a simple mouse click on the selected object in the Spy</li> <li>Save to File\u00a0- this will save the properties of the currently selected object to a text file.</li> </ul> <p></p>"},{"location":"Guide/object_spy_accessible/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> <li>Microsoft Active Accessibility</li> <li>HWND</li> </ul>"},{"location":"Guide/object_spy_java/","title":"Java Spy","text":""},{"location":"Guide/object_spy_java/#purpose","title":"Purpose","text":"<p>The Java Spy is used to inspect applications that contain Java (Swing / AWT) objects. </p> <p></p>"},{"location":"Guide/object_spy_java/#features","title":"Features","text":"<p>The Java Spy has the following features:</p> <ul> <li>The Tree pane lets you view the hierarchy of Java objects available in the application</li> <li>The Properties pane lets you view the exposed properties of the highlighted Java object</li> <li>The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn.</li> </ul>"},{"location":"Guide/object_spy_java/#commands","title":"Commands","text":"<p>In addition to viewing the object hierarchy and object properties, you can perform the following tasks:</p> <ul> <li>Parent - This selects the parent object of the one displayed</li> <li>Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy.</li> <li>Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application.</li> <li>Save to File\u00a0- this will save the properties of the currently selected object to a text file.</li> <li>Save Type Information - this will save Java object class information to a text file.</li> </ul> <p></p>"},{"location":"Guide/object_spy_java/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> </ul>"},{"location":"Guide/object_spy_managed/","title":"Managed (.NET) Spy","text":""},{"location":"Guide/object_spy_managed/#purpose","title":"Purpose","text":"<p>The Managed Spy is used to inspect Microsoft .NET applications that contain .NET framework objects (e.g. using Windows Forms).</p> <p></p>"},{"location":"Guide/object_spy_managed/#features","title":"Features","text":"<p>The Managed Spy has the following features:</p> <ul> <li>The Tree pane lets you view the hierarchy of .NET objects available in the application</li> <li>The Properties pane lets you view the exposed properties of the highlighted .NET object</li> <li>The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn.</li> </ul>"},{"location":"Guide/object_spy_managed/#commands","title":"Commands","text":"<p>In addition to viewing the object hierarchy and object properties, you can perform the following tasks:</p> <ul> <li>Parent - This selects the parent object of the one displayed</li> <li>Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy.</li> <li>Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application.</li> <li>Save to File\u00a0- this will save the properties of the currently selected object to a text file.</li> <li>Save Type Information - this will save object class type information to a text file.</li> </ul> <p></p>"},{"location":"Guide/object_spy_managed/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> </ul>"},{"location":"Guide/object_spy_mobile/","title":"Mobile Spy","text":""},{"location":"Guide/object_spy_mobile/#purpose","title":"Purpose","text":"<p>The Mobile Spy is used to inspect applications running on connected Mobile Devices (e.g. Apple iOS and Android devices).</p> <p></p> <p>The Mobile Spy dialog shows a snapshot of the screen displayed on the connected Mobile device as well as the properties of the currently selected object. You can selected the object either by clicking on the screen snapshot or the control hierarchy displayed to the left. The properties displayed will depend on the type of mobile device being tested (iOS vs. Android).</p>"},{"location":"Guide/object_spy_mobile/#tree-pane","title":"Tree Pane","text":"<p>The spied upon object and its children are displayed here. When you click on an object it will also be highlighted in the snapshot pane to the right.</p>"},{"location":"Guide/object_spy_mobile/#properties-pane","title":"Properties Pane","text":"<p>Object fields and field values are displayed here.</p>"},{"location":"Guide/object_spy_mobile/#snapshot-pane","title":"Snapshot Pane","text":"<p>This displays a snapshot of what is displayed on the mobile device  being tested. The objects in the snapshot are clickable, which allows you to visually select objects from the hierarchy.</p>"},{"location":"Guide/object_spy_mobile/#toolbar-first-row","title":"Toolbar First Row","text":"<ul> <li>Get Snapshot (Ctrl+G) - This will connect to the mobile device and get the latest snapshot from the mobile device and display in the right-hand window.</li> <li>Spy &gt; Disconnect - This option disconnects the Spy from the mobile device and ends the connection.</li> <li>Learn Object - This option is only displayed in Recording mode and lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test.</li> <li>Spy &gt; Page Source - This lets you view the source of the mobile device in a text editor such as Notepad. It will show the objects in the treeview represented as an XML document.</li> <li>Spy &gt; Go to Url - This will instruct the mobile device to navigate its built in web browser to a specific URL.</li> <li>Test Locator - This will display the Mobile Test Locator dialog box that lets you try different locators to resolve specific objects in the object hierarchy. It will include options such as using XPath and IDs.</li> <li>Profile - This lets you change the profile of the mobile device you are testing while the Spy dialog is open.</li> <li>Edit Profiles - This will open up the Mobile Settings dialog box. You cannot be connected to do this.</li> <li>Context - This will display either 'Maintenance Mode' or 'Recording Mode'.</li> </ul>"},{"location":"Guide/object_spy_mobile/#toolbar-second-row","title":"Toolbar Second Row","text":"<p>The Mobile Spy also includes toolbar controls that let you send events to mobile device from Rapise, as if you were actually performing them on the device:</p> <p></p> <p>This dialog lets you perform the following events on the device:</p> <ul> <li>Tap - this will simulate tapping the currently selected object on the device.</li> <li>Press - this will simulate long tap of 1 second for the currently selected object.</li> <li>Long Press - performs long press on the currently selected object.</li> <li>Swipe - you specify the start and end points of the swipe operation. This is useful for simulating a real swipe on the device in a specific direction at a specific location (e.g. on a progress selector).</li> </ul> <p></p> <ul> <li>Shake - for devices that support it (e.g. iOS) this simulates shaking the device physically.</li> <li>Precise Tap - you specific the specific location on the screen within the bounds of the current object that you will be simulating a tap. </li> </ul> <p></p> <ul> <li>Scroll To - simulates scrolling to the selected object in the device object tree (which may not be visible).</li> <li>Text / Send Keys - to use this, enter in text in the text box and click 'Send Keys', this sends text to the currently selected object as if you were using the virtual keyboard on the device.</li> <li>Clear - select a text box and use Clear to erase text displayed in it.</li> <li>Accept Alert - if you have a popup alert on the device, this simulates accepting it.</li> <li>Dismiss Alert - if you have a popup alert on the device, this simulates dismissing it.</li> <li>Change Orientation - for devices that support it, this simulates changing the orientation of the device from landscape to portrait (or vice-versa).</li> <li>Execute Script - this is not currently supported and is for future functionality.</li> </ul>"},{"location":"Guide/object_spy_mobile/#maintenance-mode","title":"Maintenance Mode","text":"<p>Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy it will show the object tree in the right side panel. You may toggle visibility for the object tree using <code>Show/Hide Objects</code> button in the top right corner of the spy.</p> <p></p> <p>To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon.</p> <p></p> <p>If an object is found it will be highlighted on the screenshot and selected in the tree of application objects (left pane).</p> <p>To fix a locator for object that is not found do the following:</p> <ol> <li>Select the object in the object tree (right pane)</li> <li>Select the element on the screenshot or in the application tree (left pane)</li> <li>Press relearn button on the toolbar.</li> </ol> <p></p>"},{"location":"Guide/object_spy_mobile/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> </ul>"},{"location":"Guide/object_spy_uiautomation/","title":"UI Automation Spy","text":""},{"location":"Guide/object_spy_uiautomation/#purpose","title":"Purpose","text":"<p>The UIAutomation Spy is used to inspect applications that contain Microsoft UIAutomation objects (e.g. Windows Presentation Framework, Silverlight or Java's Standard Widget Toolkit running on Windows).</p> <p></p>"},{"location":"Guide/object_spy_uiautomation/#how-to-open","title":"How to Open","text":"<p>In the main menu select <code>Tools &gt; Spy &gt; UIAutomation</code>. Then on the toolbar click <code>UIAutomation Spy</code> button.</p>"},{"location":"Guide/object_spy_uiautomation/#features","title":"Features","text":"<p>The UIAutomation Spy has the following features:</p> <ul> <li>The Tree pane lets you view the hierarchy of UIAutomation objects available in the application</li> <li>The Properties pane lets you view the exposed properties of the highlighted UIAutomation object</li> <li>The Learn Object option is displayed when you use the Spy during recording and lets you pick specific objects to learn.</li> </ul>"},{"location":"Guide/object_spy_uiautomation/#commands","title":"Commands","text":"<p>In addition to viewing the object hierarchy and object properties, you can perform the following tasks:</p> <ul> <li>Parent - This selects the parent object of the one displayed</li> <li>Highlight - This will attempt to Flash (highlight with a red rectangle) the object selected in the Spy.</li> <li>Refresh - this simply refreshes the Spy view to reflect any changes that might have occurred in the application.</li> <li>Save to File\u00a0- this will save the properties of the currently selected object to a text file.</li> <li>Save Type Information - this will save information about UI Automation object properties and patterns to a text file.</li> </ul> <p></p>"},{"location":"Guide/object_spy_uiautomation/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> <li>Microsoft UIAutomation</li> </ul>"},{"location":"Guide/object_tree/","title":"Object Tree View","text":""},{"location":"Guide/object_tree/#purpose","title":"Purpose","text":"<p>The purpose of the Object Tree View varies depending on whether the current context is a standalone test or a testing framework.</p>"},{"location":"Guide/object_tree/#how-to-open","title":"How to Open","text":"<p>The Object Tree View is always visible by default, unless you have explicitly switched to a different view. If you want to display the Object Tree View again, go to <code>View &gt; Show &gt; Objects</code>.</p> <p>The Objects dialog is a component of the Default Layout.</p>"},{"location":"Guide/object_tree/#filtering","title":"Filtering","text":"<p>Object Tree has build in filtering and display mode switches.</p> <p></p> <ul> <li>Filter - quick filter to narrow down range displayed in the object tree. Updates the tree while you type. If you want to cancel the filtering then simply remove everything from this input box.</li> <li>Display modes switch:<ul> <li><code>id</code> - show object IDs in the tree.</li> <li><code>n</code> - show object names in the tree.</li> <li><code>id[n]</code> - show each object in format <code>object_id [ object_name ]</code> in the tree.</li> </ul> </li> </ul>"},{"location":"Guide/object_tree/#testing-framework-mode","title":"Testing Framework Mode","text":"<p>When a Testing Framework is currently open, the Tree View includes additional nodes.</p>"},{"location":"Guide/object_tree/#test-cases-node","title":"Test Cases Node","text":"<p>The node represents framework test cases.</p>"},{"location":"Guide/object_tree/#test-cases-root-context-menu","title":"Test Cases Root Context Menu","text":"<ul> <li>Create Test Case - Add new test case to the root.</li> <li>Import Test Case - Import Test Case to the root.</li> <li>Play All - Run all root test cases except those marked with <code>template</code> or <code>skip</code> tags.</li> <li>Play All (Recursive) - Run all test cases except those marked with <code>template</code> or <code>skip</code> tags.</li> <li>Reveal in Explorer - Open <code>TestCases</code> folder in file explorer.</li> <li>Reload - Reload all test cases (may be needed if test were synchronized with remote repository).</li> </ul>"},{"location":"Guide/object_tree/#test-cases-group-context-menu","title":"Test Cases Group Context Menu","text":"<ul> <li>Create Test Case - Add new test case to this group.</li> <li>Import Test Case - Import Test Case to this group.</li> <li>Play All - Run all test cases from this folder except those marked with <code>template</code> or <code>skip</code> tags.</li> <li>Play All (Recursive) - Run all test cases in this folder and its subfolders except those marked with <code>template</code> or <code>skip</code> tags.</li> <li>Reveal in Explorer - Open <code>TestCases</code> folder in file explorer.</li> </ul>"},{"location":"Guide/object_tree/#test-case-context-menu","title":"Test Case Context Menu","text":"<ul> <li>Play - Execute this test case.</li> <li>Record - Start recorder for this test case.</li> <li>Reload - Re-read information about this test case.</li> <li>Last Report - Open last execution report for this test case (if any).</li> <li>Clone - Make a Clone of the test case</li> <li>Move - Move this Test Case into new or existing Folder (Re-Group)</li> <li>Rename - Change Alias name (folder name will stay the same)</li> <li>Delete - Remove a test case</li> </ul>"},{"location":"Guide/object_tree/#test-case-tags","title":"Test Case Tags","text":"<p>When you right-click with the Shift key pressed, the context menu will have two additional options:</p> <p></p> <ul> <li>draft: Toggles the <code>draft</code> state of the test case. This is useful for marking a test case as incomplete.</li> <li>template: Marks the test case as a template. Template test cases are not displayed in the Spira Dashboard. It is assumed that templates will be used to create test cases using the Clone functionality.</li> <li>skip: Ignore this test case when using Play All or Play All (Recursive)</li> </ul> <p>The <code>draft</code> and <code>template</code> states affect the display of the context menu:</p> <p>Default:</p> <p></p> <p>Draft:</p> <p></p> <p>Template:</p> <p></p>"},{"location":"Guide/object_tree/#test-case-object-repository-context-menu","title":"Test Case Object Repository Context Menu","text":"<ul> <li>Collapse All - Collapse all object windows.</li> <li>Expand All - Expand all object windows.</li> <li>Reload - Re-read information from this Object Repository.</li> <li>Object Manager - Opens the Object Manager.</li> </ul>"},{"location":"Guide/object_tree/#test-case-rvl-sheet-context-menu","title":"Test Case RVL Sheet Context Menu","text":"<ul> <li>Play this Sheet - Execute given RVL Sheet.</li> </ul>"},{"location":"Guide/object_tree/#user-functions-and-variables","title":"User Functions and Variables","text":"<p>Rapise scans available shared JavaScript files and extracts information about global user defined functions and variables into these nodes.</p>"},{"location":"Guide/object_tree/#user-functionsvariables-context-menu","title":"User Functions/Variables Context Menu","text":"<ul> <li>Reload - Re-read information about known Functions/Variables.</li> </ul>"},{"location":"Guide/object_tree/#shared-node","title":"Shared Node","text":"<p>The node displays shared assets, including common JavaScript files (<code>*.js</code>), Object Repositories (<code>Objects.js</code>), Spreadsheets (<code>*.xlsx</code>, <code>*.xls</code>, <code>*.csv</code>), WebService definitions  (<code>*.rest</code>, <code>*.soap</code>) and other file types (<code>*.json</code>, <code>*.txt</code>, etc.).</p>"},{"location":"Guide/object_tree/#shared-node-context-menu","title":"Shared Node Context Menu","text":"<ul> <li>New JavaScript File... - create and add a <code>.js</code> file.</li> <li>New Spreadsheet... - create and add a <code>.xlsx</code> file.</li> <li>New Text File... - create and add a <code>.txt</code> file.</li> <li>New JSON File... - create and add a <code>.json</code> file.</li> <li>New File... - create and add other type of file.</li> <li>New Dropdowns.xlsx - create Dropdowns.xlsx. This item is only visible if there is no <code>Dropdowns.xlsx</code> yet.</li> <li>Reveal In Explorer - open <code>Shared</code> folder in file explorer.</li> <li>Import File - Import a file (usually spreadsheet or text)</li> <li>Reload - Update a shared files view.</li> </ul>"},{"location":"Guide/object_tree/#shared-file-context-menu","title":"Shared File Context Menu","text":"<ul> <li>Rename - change the name of a file.</li> <li>Make a Copy - create a duplicate shared file with identical contents.</li> <li>Remove from Disk - deletes the file from Test as well as from the disk.</li> <li>Reveal in Explorer - opens the file explorer and highlights this particular file.</li> </ul>"},{"location":"Guide/object_tree/#modules-page-objects-node","title":"Modules / Page Objects Node","text":"<p>The node contains Module / Page Objects defined in this testing framework.</p>"},{"location":"Guide/object_tree/#page-objects-context-menu","title":"Page Objects Context Menu","text":"<ul> <li>Create Module / Page Object - add new Module / Page Object.</li> <li>Import Module / Page Object - import existing Module / Page Object from another testing framework.</li> </ul> <ul> <li>Reload - refresh information about this module.</li> <li>Delete - remove this module.</li> </ul> <ul> <li>Invoke &lt;Some Action&gt; - play this action alone.</li> </ul>"},{"location":"Guide/object_tree/#single-test-mode","title":"Single Test Mode","text":""},{"location":"Guide/object_tree/#context-menu-root-node","title":"Context Menu (root node)","text":"<p>Right click the Object Tree node to see:</p> <p></p> <ul> <li>Reload - checks for new objects to display.</li> <li>Object Manager - run an Object Manager.</li> </ul>"},{"location":"Guide/object_tree/#context-menu-window","title":"Context Menu (window)","text":"<p>Right click the Window node to see:</p> <p></p> <ul> <li>Remove remove window and all contained objects.</li> </ul>"},{"location":"Guide/object_tree/#context-menu-object","title":"Context Menu (object)","text":"<p>Right click on an object in the Object Tree dialog to see:</p> <p></p> <ul> <li>Flash opens the application/url where the object is located. \u00a0A frame will blink around the object to show you where it is on the page.</li> <li>Re-Learn will open up the Recorder, allowing you to re-learn the object. This is useful if the AUT has changed and the object definition will no longer correctly locate the object.</li> <li>Rename opens Rename dialog for the object.</li> <li>Clone makes a copy of the object definition and adds the cloned version into the tree. You can then make changes to the cloned copy.</li> <li>Add Parameter opens up a dialog box that lets you add a custom parameter to the learned object definition (stored in the <code>Objects.js</code> file).</li> <li>Delete simply removes the selected object from the tree.</li> </ul>"},{"location":"Guide/object_types/","title":"Recording and Learning","text":""},{"location":"Guide/object_types/#purpose","title":"Purpose","text":"<p>To understand what different objects might be found on a UI screen, and how to recognize them, record their characteristics and interact with them using Rapise.</p>"},{"location":"Guide/object_types/#value","title":"Value","text":"<p>A UI screen entity (object) may consist of many different parts and components. \u00a0Actions on these objects, and usage of these controls, must be captured in different ways, depending on the properties of the object. \u00a0Rapise provides five fundamental methods for capturing objects and corresponding user actions:</p> <ol> <li> <p>Recording - Rapise is able to track user interactions with AUT and automatically capture affected objects and corresponding user actions. \u00a0See Recording for more information.</p> </li> <li> <p>Learning - there are cases when it is not necessary or is not possible to track user interactions with AUT. In this case user can manually point to an object that should be captured by Rapise. See Learning for more information.</p> </li> <li> <p>Analog Recording (Absolute/Relative) - this is for objects that are not standard in some important way, and so activity on them cannot be captured using recording or cannot be specified after learning. Absolute Analog Recording is used to track mouse usage (movement and clicks) and keyboard events. \u00a0For absolute analog recording, the positions these events are recorded relative to the top-left corner of the system screen. \u00a0(In contrast, in Relative Analog Recording, the events are recorded relative to the upper-left corner of the selected objects.) \u00a0The events are recorded in a file of type arf (Analog Recording File).</p> </li> <li>Simulated Object Recording - a Rapise user can use simulated objects when some objects are not natively supported by Rapise (e.g. their internal structure, properties and actions are unknown). \u00a0In this case, what is recorded are mouse clicks and keyboard activity. \u00a0Compare \u00a0to Analog Recording when all mouse and keyboard actions are recorded, including mouse up/down, mouse move events. See Simulated Objects for more information.</li> <li>Manual Recording - In addition to providing automated testing functionality, Rapise enables you to create manual tests (ones that will be carried out by a human tester) rapidly without having to laboriously enter in test steps and screenshots by hand. It does this by using the same recording mechanism used for automated testing to create a manual test case that contains a list of the tester's interactions and screenshots of what was performed. This is useful for exploratory testing and is a huge time saver.</li> </ol>"},{"location":"Guide/object_types/#usage","title":"Usage","text":"<p>Before an operation (press, enter text, select, click, etc.) can be performed on an object automatically, Rapise must be able to identify the object. \u00a0That identification must be able to locate the object definitively, and it must be able to duplicate the action or operation precisely. \u00a0This carries several implications. \u00a0Firstly, if the AUT is in a different position on the screen when it is started, Rapise must still be able to find the objects in the AUT window. \u00a0Secondly, if the positioning of objects on the AUT window is proportional or relative to the screen size of shape, Rapise must still be able to locate the object.</p> <p>A secondary set of considerations relates to the fact that the AUT UI layout maybe sensitive to the context of the state of the application. \u00a0For example, consider the case of a word processor. \u00a0Pressing the \"bold\" button doesn't predict what the result will be unless it is known whether the text highlighted is currently bold or not. \u00a0A far more illustrative example is that of the Microsoft Paint utility. \u00a0The Microsoft Paint utility is the subject of a Inflectra sample, Simulated Object.</p> <p>The most instructive way to identify the objects to Rapise is to practice with the tool and different types of objects. \u00a0The best methodology to use is as follows:</p> <ol> <li> <p>First, try to use Record/Learn to learn the object and record actions in a single step.</p> </li> <li> <p>If learning.recording fails to record actions in the grid, use the Object Spy to observe the object carefully and discover what libraries and classes are being used by the AUT.</p> </li> <li> <p>Use Verify (++ctrl+1+) from the Recording Activity dialog to get summary information about the object.</p> </li> <li> <p>Use a more appropriate set of libraries when selecting the AUT prior to recording.</p> </li> <li> <p>Use Analog Recording with absolute positioning to identify and locate the object.</p> </li> <li> <p>Use Analog Recording with relative positioning to identify and locate the object.</p> </li> <li> <p>Use Simulated Object Recording to track the actions required and at the positions required.</p> </li> <li> <p>Look for custom libraries that support the technology being used by the AUT.</p> </li> <li> <p>Build your own custom library to support the technology in use by the AUT.</p> </li> <li> <p>Finally if it will not be worth developing automated tests for this AUT, use the manual recording feature to speed up your manual test writing.</p> </li> </ol>"},{"location":"Guide/object_types/#see-also","title":"See Also:","text":"<ul> <li>KB 289 How Object Recognition Works in Rapise</li> </ul>"},{"location":"Guide/open_a_test/","title":"Open a Test","text":"<p>You can open a test from the main menu.</p> <p></p> <p>The main menu has an Open option, and a list of Recent Tests from which you may choose:</p> <p></p> <p>You can also open a test that is stored in SpiraTest (our web-based test management system) instead of the local filesystem. This is done by clicking on the Open Test from Spira option instead. More details on using Rapise with SpiraTest can be found in the SpiraTest Integration section.</p>"},{"location":"Guide/open_a_test/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/options_dialog/","title":"Rapise Settings Dialog","text":""},{"location":"Guide/options_dialog/#purpose","title":"Purpose","text":"<p>Use the Rapise Settings dialog to change the global options. Your changes will apply to all tests.</p>"},{"location":"Guide/options_dialog/#how-to-open","title":"How to Open","text":"<p>User <code>Settings &gt; Global</code> menu item.</p>"},{"location":"Guide/options_dialog/#global-settings","title":"Global Settings","text":""},{"location":"Guide/options_dialog/#misc","title":"Misc","text":"<ul> <li>SplashScreen: A splash screen is the image that appears while a program initializes. \u00a0The Rapise splash screen looks like this:</li> </ul> <p>Set SplashScreen to False to prevent the splash screen from appearing.</p>"},{"location":"Guide/options_dialog/#api","title":"API","text":"<ul> <li>API Callback Timeout: Defaults to 10000. Number of milliseconds to wait when doing Before-Request and After-Response REST Callbacks. The timeout applies to each callback call individually.</li> <li>Generate Full Name: If 'Record REST Objects' is <code>true</code>, then<ul> <li><code>true</code>: Generate long name for objects and variables, i.e. 'Libraryinformationsystem_Login'</li> <li><code>false</code>: Generate short name, i.e. 'Login'</li> </ul> </li> <li>Generate Short REST Path: If 'Record REST Objects' is <code>false</code>, then<ul> <li><code>true</code>: Generate short path, i.e. 'RESTDef.rest'</li> <li><code>false</code>: Generate full path, i.e. '%WORKDIR%/SubTest/RESTDef.rest'. May be needed when you have .rest definition files with the same name in your framework.</li> </ul> </li> <li>Record Failed REST Actions: <code>true</code> means: If recorded REST action is failed, generate <code>.DoExecute(...,true)</code> that ignores the response code so generated test is passing.</li> <li>Record REST Objects: Generate Object for Each REST request.<ul> <li><code>true</code>: An object added to the Object Repository for each request. Then it is initialized using <code>var &lt;request_object_id&gt; = SeS(&lt;request_object_id&gt;)</code>.</li> <li><code>false</code>: Don't add anything to the object tree. Each request is initialized as <code>var &lt;request_object_id&gt; = /**RESTRequest*/Session.GetRESTRequest('&lt;definition&gt;.rest', '&lt;request_id&gt;')</code>. This approach makes it easier to generate re-usable functions doing REST calls without need to load objects. See Session.GetRESTRequest.</li> </ul> </li> </ul>"},{"location":"Guide/options_dialog/#api-proxy-settings","title":"API Proxy Settings","text":"<ul> <li>Proxy Enabled: Activates proxy settings listed below. By default it is <code>false</code>.</li> <li>Proxy Host: Host name or IP address of a proxy server.</li> <li>Proxy Port: Proxy port number.</li> <li>Proxy User Name: Name of a user to log into the proxy server.</li> <li>Proxy User Password: Password of a user to log into the proxy server.</li> </ul> <p>If no proxy is specified then Rapise uses OS settings. There is also a way to set proxy on session or REST / SOAP request level.</p>"},{"location":"Guide/options_dialog/#debugger","title":"Debugger","text":"<ul> <li> <p>Optimize Call Stack: If True, removes redundant information from the call stack view. See also Call Stack View Optimization.</p> </li> <li> <p>Remember Debugger Layout: If True, Rapise will remember the window layout for debug mode separately. For example, this may be useful if you want to work full screen while authoring the Test and half-screen to debug. This way the AUT and the Rapise debugger fit on the screen.</p> </li> </ul>"},{"location":"Guide/options_dialog/#execution","title":"Execution","text":"<ul> <li>JSEngineType: Set preferred  JavaScript Engine (one of Default, Node, WScript). Where Default means Node.</li> </ul>"},{"location":"Guide/options_dialog/#settings","title":"Settings","text":"<ul> <li>Always use Test.sstest: Defaults to False. If set to True, the test file name is set to <code>Test.sstest</code> rather than <code>&lt;test folder name&gt;.sstest</code>. This may be useful in rare cases when your testing framework has deep nested structure, you have very long file names and need to fit into 260 chars of Windows <code>MAX_PATH</code> limit.</li> <li>AutoReloadModifiedFiles: If set to True, any files you modify outside of Rapise are automatically reloaded in Rapise.</li> <li>Confirm Object Removal: Ask when deleting object form the Object Tree.</li> <li>DefaultFolder specifies \u00a0where new tests are kept before you explicitly save them. \u00a0The location is relative to the Rapise executable.</li> <li>Default Scripting Language: JavaScript, RVL or Ask. </li> <li>LoadLastTestOnStartup: If set to True, Rapise will open the last test you worked on and saved. \u00a0If set to False, Rapise will create a new test named MyTest&lt;#&gt; where &lt;#&gt; is an integer. \u00a0A folder for MyTest&lt;#&gt; is created in the folder specified by the DefaultFolder option.</li> <li>NormalizeFileName: If set to True, files are referred to (in the <code>*.sstest</code> file) using a a path relative to the <code>*.sstest</code> file. \u00a0Otherwise, their absolute path is used.</li> <li> <p>RecentTests: The maximum number of recent files displayed in the Recent Tests list. \u00a0To see the Recent Tests list, open the Application Menu:</p> <p></p> </li> <li> <p>ShowCommonFileAliases: Legacy, not needed since Rapise 6.0.</p> </li> <li>Enable Execution Monitor: specifies whether the execution monitor dialog box will be displayed during playback.</li> <li>ShowDashboardOnStartUp: If True, the Spira Dashboard will open automatically when Rapise is opened.</li> <li>ShowStartPageOnStartUp: If True, the Start Page will open automatically when Rapise is opened.</li> <li>Spira Integration: Enables all dialogs and menus for SpiraTest Integration.</li> <li>Temp Folder:  default folder for temporary tests.</li> <li>Test Auto Upgrade: if set to True each opened <code>.sstest</code> file is automatically upgraded to the latest format.</li> </ul>"},{"location":"Guide/options_dialog/#recorder","title":"Recorder","text":"<ul> <li> <p>FrameStyle: Specifies which frame to draw around objects when you Record, Learn, and Spy.</p> <p>The Basic frame is on the left and the Modern frame is on the right:</p> <p> </p> </li> <li> <p>DefaultSpy specifies which of the various types of Object Spy will be displayed by default.</p> </li> <li>GenerateComments: True to automatically generate JavaScript or RVL comment for each recorded action.</li> </ul>"},{"location":"Guide/options_dialog/#text-editor","title":"Text Editor","text":"<ul> <li>Convert Tabs to Spaces: True to force tabs to spaces conversion for the text editor.</li> <li>Tab Size: Editor Tab Size</li> </ul>"},{"location":"Guide/options_dialog/#utilities","title":"Utilities","text":"<p>Utility functions</p> <ul> <li>Set of Open buttons:</li> <li>Open Web Profiles Folder</li> <li>Open Selenium Profiles Folder</li> <li>Open Mobile Profiles Folder</li> <li>Open Samples Folder</li> <li>Open User Libraries Folder</li> <li> <p>Open Application Log Folder</p> </li> <li> <p>Reset Layout - Pressing the Reset Layout button restores the default layout. \u00a0Rapise will restart.</p> </li> </ul>"},{"location":"Guide/oracleforms_testing/","title":"Oracle Forms Support","text":""},{"location":"Guide/oracleforms_testing/#overview","title":"Overview","text":"<p>Rapise Oracle Forms Library enables recording, learning and playback of various Oracle Forms controls. </p> <p></p>"},{"location":"Guide/oracleforms_testing/#supported-oracle-forms-versions","title":"Supported Oracle Forms Versions","text":"<p>Rapise 7.1 has support for Oracle Forms version 10 and higher.</p>"},{"location":"Guide/oracleforms_testing/#supported-java-versions","title":"Supported Java Versions","text":"<p>Integration should work with other versions of Java (5 and higher). </p>"},{"location":"Guide/oracleforms_testing/#preparing-environment","title":"Preparing Environment","text":""},{"location":"Guide/oracleforms_testing/#1-java-support","title":"1. Java Support","text":"<p>Don't forget to deploy Rapise Java bridge as described here.</p>"},{"location":"Guide/oracleforms_testing/#2-_java_options","title":"2. _JAVA_OPTIONS","text":"<p>You need to set environment variable <code>_JAVA_OPTIONS</code>.</p> <pre><code>\"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\"\n</code></pre> <p></p> <p>It may be set it through system or user Environment variables. Also, if your application is launched through the .bat file, you may assign <code>_JAVA_OPTIONS</code> there:</p> <pre><code>...\nset _JAVA_OPTIONS=\"-javaagent:C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\PreMainAgent.jar\" \"-Djava.security.policy=C:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\JavaWrapper\\Agents\\file.policy\"\n...\nrem &lt;launch of the application.jar&gt;\n</code></pre> <p>Setting <code>_JAVA_OPTIONS</code> globally may affect other software or tools, so, in case of any problems you may remove this variable or rename it to something else.</p>"},{"location":"Guide/oracleforms_testing/#3-change-the-launch-url","title":"3. Change the Launch URL","text":"<p>See Launching Oracle Forms Application to learn more about the changes to the launch process that needs to be done to enable testing</p>"},{"location":"Guide/oracleforms_testing/#launching-oracle-forms-application","title":"Launching Oracle Forms Application","text":"<p>There are two major ways on how your application may be started: using Internet Explorer or using Java Web Start (<code>.jnlp</code> file).</p> <p>In either case, you need to make sure that the URL to the application contains the following parameters:</p>"},{"location":"Guide/oracleforms_testing/#from-internet-explorer","title":"From Internet Explorer","text":"<p>You need to append the following parameter to the URL: <code>...&amp;record=names</code></p> <p>In case of Internet Explorer this means that URL contains this part:</p> <p></p>"},{"location":"Guide/oracleforms_testing/#from-java-web-start-jnlp-file","title":"From Java Web Start .jnlp File","text":"<p><code>`...&amp;38;record=names</code></p> <p></p>"},{"location":"Guide/oracleforms_testing/#global-object","title":"Global Object","text":"<p>Rapise Oracle Forms Library  includes OracleForms global object. It mostly used to deal with main menu, notifications and status bar.</p>"},{"location":"Guide/output_view/","title":"Output View","text":""},{"location":"Guide/output_view/#purpose","title":"Purpose","text":"<p>The Output View displays Rapise output. \u00a0The amount of output depends on the Verbosity Level.</p>"},{"location":"Guide/output_view/#how-to-open","title":"How to Open","text":"<p>The Errors View is hidden in the Default Layout. You may then show it using <code>View &gt; Show &gt; Output</code>.</p>"},{"location":"Guide/output_view/#writing-to-the-output-view","title":"Writing to the Output View","text":"<p>Use the global <code>Log()</code> function to write to the Output View.</p>"},{"location":"Guide/output_view/#widgets","title":"Widgets","text":"<ul> <li>The text box is a search box.</li> <li>The icons from left to right are Find Next Entry  , Copy Selected  , Clear All Text .</li> <li>Right tool <code>Hide</code> used to collapse whole bottom panel. You may then show it using <code>View &gt; Show &gt; Output</code>.</li> </ul>"},{"location":"Guide/overview/","title":"Overview","text":""},{"location":"Guide/overview/#why-use-rapise","title":"Why Use Rapise?","text":"<p>Rapise was created to make software testing easy and manageable without being prohibitively expensive.</p> <p>Rapise was made easy for software test professionals, developers and professionals concerned with quality assurance to simply and quickly write a test to cover an application, a web page, or a single bug to prevent regression.</p>"},{"location":"Guide/overview/#make-testing-fast-and-repeatable","title":"Make Testing Fast and Repeatable","text":"<p>Consider for a moment what it is you do to test your software today. Most likely it has some user interface (UI), probably a graphic user interface (GUI). \u00a0So you will run the application, click around, perhaps in some way that gives you complete coverage of all the features (but probably not if it's a large application or web). Then you will login, if appropriate, and you will fetch some data and modify some data, test some more controls - edit boxes, buttons, drop-down lists, links, etc. \u00a0If you have just fixed a bug then you will focus on the area of the application where the bug occurred. \u00a0You will enter data that causes the bug, or go through the control sequence that causes the bug.</p> <p>Next time you come to fix a bug in this application, you will do the same thing again.. \u00a0Once again, you will focus on the area where the bug was.</p> <p>Rapise presents you with two methods for capturing specific tests, and it will keep the test as a solo test or as part of a suite of tests that help you to qualify the application for release or a more formal QA process. \u00a0Rapise is designed to allow the developer or the test professional to add new tests quickly and so to build up a library of tests.</p> <p>There are two methods for capturing tests:</p> <ol> <li>Record and playback. \u00a0In this type of test creation, you turn on the recorder and perform the actions needed to execute the test. \u00a0Each test is saved to its own directory. \u00a0A test consists of a javascript test script (.js), a meta-data file (*.sstest), and any number of additional supplementary scripts and data files. \u00a0 The test script is automatically generated after recording; simple modifications are required to make the test data driven. Checkpoints can be added during recording, or manually into the script.\\</li> <li>Object-driven learning. \u00a0 Rapise considers each item on the page or within the application window to be an object. \u00a0Examples are buttons, edit boxes, links, etc. \u00a0To create a test using this technique, you have Rapise \"learn\" each control, and it will keep a miniature database of all the controls you \"teach\" it. \u00a0To create a test, you write a script to instruct Rapise to perform a particular action on each object in the prescribed order. \u00a0As any point along the way, the script you write can instruct Rapise to look inside an object and read its data and compare that value or content with what you expect it to be.</li> </ol> <p>There are many methodologies with their own recommended approaches for designing testing strategies to ensure that application coverage is complete and meets the business requirements specification of the work being accomplished. \u00a0Inflectra in general, recommends that you create a new test for each software requirement (to track progress) and for each issue in your issue tracking system (to test for regressions).</p>"},{"location":"Guide/overview/#choice-of-scripting-or-scriptless-rapise-visual-language-rvl","title":"Choice of Scripting or Scriptless Rapise Visual Language (RVL)","text":"<p>Rapise gives you the choice of recording/writing your tests in a full scripting language - JavaScript, or the Rapise Visual Language (RVL) which provides a completely scriptless approach to writing tests (based on a simple table-based format). The RVL option is simpler for users that are not programmers but it has less flexibility than using JavaScript.</p> <p>You can have the best of both worlds, putting the more sophisticated steps into JavaScript scenarios and then including in the main RVL file.</p>"},{"location":"Guide/overview/#integration-with-test-management","title":"Integration with Test Management","text":"<p>To help you manage the requirements and issue tracking processes and to ensure that you have adequate test coverage, Inflectra recommend that you use Rapise with a test management system such as SpiraTest. That way you can maintain all your requirements, test cases and defects in a single place.</p> <p>Once you have created the test, you can playback your test from within Rapise, run it from the command-line or execute it remotely using RapiseLauncher in conjunction with SpiraTest. \u00a0A report detailing the outcome of each step of the test will be automatically generated.</p> <p>Recording, playback, the report, and the Rapise engine are all customizable.</p>"},{"location":"Guide/playback/","title":"Playback","text":""},{"location":"Guide/playback/#purpose","title":"Purpose","text":"<p>When you record a test, Rapise translates your actions into a script When you playback the test, the script is executed.</p>"},{"location":"Guide/playback/#usage","title":"Usage","text":"<p>You can either run your script from the Command Line, or you can play it back while Rapise is open (described below):</p> <ol> <li> <p>You will first need to open your test or framework. \u00a0There is no need to have the AUT (Application Under Test) open. Rapise will open the AUT before it begins execution of the test.</p> </li> <li> <p>Now, press the play button at the top of the Rapise toolbar. </p> </li> <li> <p>In testing framework mode you may be prompted to select test case to executed:</p> <p></p> </li> <li> <p>Alternatively, you have the option to select a specific test case from the beginning by clicking on the <code>Play</code> button next to it in the object tree:</p> <p></p> </li> <li> <p>During test execution, Rapise displays an execution monitor dialog box that lets the user see the progress of testing playback. The dialog is only shown during test execution and can be turned off in the Options dialog. \u00a0The following is a screenshot of the test execution monitor.</p> <p></p> <p>The user can pause or stop the test execution by clicking either the <code>Pause</code> or <code>Stop</code> button.</p> </li> <li> <p>When Rapise is done executing the test, results will be displayed in a table. \u00a0The rows with green text are steps that passed; the rows with red text are steps that failed. \u00a0The following is a screenshot of test results where every step passed:</p> <p></p> </li> </ol>"},{"location":"Guide/playback/#test-execution-monitor","title":"Test Execution Monitor","text":"<p>Shows test execution status during playback.</p> <p></p> <ul> <li>Progress bar shows test execution progress. This is just an estimate (number of actions executed compared to previous number of actions)</li> <li><code>Passed:</code>, <code>Failed:</code>, <code>Unresolved:</code> - number of actions with corresponding execution status.</li> <li>Stop (Ctrl+Shift+F12) - terminate execution.</li> <li>Pause - hold test execution until another press of the same button.</li> <li>Hide - hide execution monitor itself. The monitor can be turned off at all in the Options dialog.</li> </ul>"},{"location":"Guide/playback/#see-also","title":"See Also","text":"<ul> <li>For more information about the report, see Automated Reporting.</li> <li>For information about recording a test, see Recording.</li> <li>For instructions on using the Command Line, look HERE.</li> </ul>"},{"location":"Guide/properties/","title":"Properties View","text":""},{"location":"Guide/properties/#purpose","title":"Purpose","text":"<p>To display the properties of the object, file, or folder you last clicked on. \u00a0Objects are in the Object Tree View and files/folders are in the Test Files View.</p> <p>Some properties are longer than fit into the editor field. So you may use <code>...</code> button:</p> <p></p> <p>to show Value Editor:</p> <p></p>"},{"location":"Guide/properties/#how-to-open","title":"How to Open","text":"<p>The Properties Dialog is part of the Default Layout.</p>"},{"location":"Guide/qt_framework_testing/","title":"Qt Framework","text":""},{"location":"Guide/qt_framework_testing/#purpose","title":"Purpose","text":"<p>Rapise includes support for testing applications written using the Qt Framework written using QWidget controls.</p>"},{"location":"Guide/qt_framework_testing/#usage","title":"Usage","text":"<p>Rapise fully supports the test automation of Qt based applications. To ensure that Rapise can access the UI elements and properties in the Qt application, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled. This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below).</p> <p>Loading Accessible Plug-in for your Qt application:</p> <ol> <li> <p>Copy the \"accessible\" directory (and all its contents) from the Qt SDK (used to build the application under test) installation folder to the folder of the automated application (e.g. \u201cProgram Files/Your-Application/plugins\u201d). If you do not have access to the Qt SDK which the Qt application is developed with, please contact the developer of the application and request the \"accessible\" directory from him.</p> </li> <li> <p>Create a file called \"qt.conf\" (or append if the file already exists) in the root directory of the automated application (e.g. \"Program Files/Your-Application\") with following content (copy and paste the following two lines):</p> </li> </ol> <pre><code>[Paths]\nPlugins = plugins\n</code></pre>"},{"location":"Guide/qt_framework_testing/#sample","title":"Sample","text":"<p>In the Samples section of the Rapise Start Page you should see our sample Qt Framework AUT:</p> <p></p> <p>You can use this application with Rapise to try out the Qt Framework testing capabilities:</p> <ul> <li> <p>You should record tests using the special Qt Framework library</p> </li> <li> <p>You should use the Accessible Spy for inspecting objects.</p> </li> </ul>"},{"location":"Guide/recording/","title":"Recording","text":""},{"location":"Guide/recording/#purpose","title":"Purpose","text":"<p>Recording is the name given to having Rapise track your interactions with an application.</p> <p>The actions you take in using the AUT are observed by Rapise and are transformed into a script (RVL or JavaScript), which you can execute using the <code>Play</code> button. The script can be extended and modified to suit special purposes.</p>"},{"location":"Guide/recording/#usage","title":"Usage","text":"<p>The Recording Activity (RA) Dialog is opened when you start recording using the <code>Record</code> toolbar button. In Testing Framework mode you also need to select destination test case for new recording.\u00a0When the Recording Activity dialog appears, Rapise has connected to your AUT and is ready to monitor and record your interactions. You'll find instructions here or look at one of the examples:</p> <ul> <li>Tutorial: Windows Testing</li> <li>Tutorial: Web Testing</li> <li>Tutorial: Mobile Testing.</li> </ul> <p></p> <p>Rapise may do recording across multiple applications. I.e. you may do some steps in a web browser and then proceed with desktop client. The quality of recording results depend on selected libraries. For example, if your application includes some Managed, and some Java then you need to have both Managed and Java libraries selecting in the library chooser.</p> <p>You'll notice that the RA dialog has a grid. As you interact with the AUT, your actions will be listed in the grid.</p> <p>If you record an incorrect action, you can right-click on the action and delete it.</p> <p>To ensure you successfully record your interaction with the AUT, navigate slowly through the AUT. \u00a0Wait a second or two between each action to make sure Rapise has time to interpret and record your action. Once your interaction is updated in the RA dialog grid, you are free to continue with the next action.</p> <p>When you are done recording, press the <code>Finish</code> button on the RA dialog or type Ctrl+3. \u00a0The RA dialog will disappear, and you will see an automatically generated script opened in Rapise.</p> <p>For Mobile Testing, you will need to use the <code>Spy</code> button which then allows you to pick a specific object from the Mobile Spy:</p> <p></p>"},{"location":"Guide/recording/#see-also","title":"See also","text":"<ul> <li>If you have already recorded a script and want to record additional interactions in the same test, be sure to read Making Multiple Recordings.</li> <li>The RA dialog is described more thoroughly in Recording Activity &gt; Dialog.</li> <li>To learn how to run the script, see Playback. To learn how to modify the script, see Scripting.</li> <li>For a detailed tutorial, see Tutorial: Record and Playback in the Getting Started section.</li> <li>For more information on the Spy capability, see Object &gt; Spy.</li> </ul>"},{"location":"Guide/recording_activity_dialog/","title":"Recording Activity Dialog","text":""},{"location":"Guide/recording_activity_dialog/#purpose","title":"Purpose","text":"<p>The Recording Activity Dialog is used for Recording, Analog recording (absolute and relative), Object Learning, and creating Simulated Objects.</p>"},{"location":"Guide/recording_activity_dialog/#how-to-open","title":"How to Open","text":"<p>This dialog is opened slightly differently depending on the type of test being recorded:</p> <ul> <li> <p>Web Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed.</p> </li> <li> <p>Mobile Testing - When you click on the Record / Learn button in the Test ribbon, this dialog will be displayed.</p> </li> <li> <p>Other Testing - After selecting the application to be recorded in the Select an Application to Record dialog, this dialog is displayed.</p> </li> </ul>"},{"location":"Guide/recording_activity_dialog/#advanced-mode-vs-standard-mode","title":"Advanced Mode vs. Standard Mode","text":"<p>When you first open the dialog, it will be displayed in Standard mode:</p> <p></p> <p>This mode shows the most widely used options and is normally sufficient for most recording needs.</p> <p>However if you need to do analog recording or you want more control over the type of object being recorded, you can click on the <code>Adv.&gt;&gt;</code> link to switch to Advanced mode:</p> <p></p> <p>Clicking on the Advanced link will switch it back to Standard mode.</p>"},{"location":"Guide/recording_activity_dialog/#the-grid","title":"The Grid","text":"<p>As you interact with the AUT (A**pplication **U**nder **T**est), your actions are recorded in the grid of the **Recording Activity dialog. \u00a0The following screenshot shows the Recording Activity dialog after two interactions with www.google.com: (1) first, Inflectra was entered into the query text box and (2) the Google Search button was then pressed.</p> <p></p>"},{"location":"Guide/recording_activity_dialog/#context-menu","title":"Context Menu","text":"<p>If you right click in the grid, you'll see a context menu with three options:</p> <p></p> <ul> <li>Delete Action removes the selected row.</li> <li>Edit Action opens the Action Editor Dialog. \u00a0This is also opened by double-clicking a grid entry.</li> </ul> <p></p> <ul> <li>Press Try Action and Rapise will execute the action.</li> </ul>"},{"location":"Guide/recording_activity_dialog/#standard-mode-features","title":"Standard Mode Features","text":"<p>The following options are available in the dialog in both modes:</p> <ul> <li> <p>Verify Ctrl+1 - Press to open the Verify Object Properties dialog.</p> </li> <li> <p>Learn Ctrl+2 - Use to learn an object. Place the mouse cursor over the object you wish to learn. \u00a0It should become highlighted with a purple box. \u00a0Press Ctrl+2 while the object is highlighted. \u00a0You will see a line added to the Recording Activity dialog, signifying that the object was learned.</p> </li> <li> <p>SPY Ctrl+5 - The Spy Button opens the Object Spy dialog. The Object Spy dialog allows you to view the state of the objects in your program. \u00a0Viewing object state is called Object Spying. \u00a0The Object Spy dialog is described here. You can also use the SPY button to learn an object that is not visible or covered by another object.</p> <p>If you are doing cross-application recording then you may need different type of Spy. Here you may switch between available Spy modes:</p> <p></p> </li> <li> <p>Pause - The Pause Button temporarily stops Recording. \u00a0Any interacting you d* with the AUT is ignored. \u00a0When you press the Pause Button, the title of the button changes to Resume. \u00a0Press the Resume button to continue recording.</p> </li> <li> <p>Finish Ctrl+3 - The Finish button ends the Recording session. The dialog is closed, and the information collected during Recording is used to create a script. \u00a0The script is displayed.</p> </li> <li> <p>Cancel - The Cancel button stops Recording, closes the dialog, and discards any actions recorded or objects learned during the Recording session.</p> </li> </ul>"},{"location":"Guide/recording_activity_dialog/#advanced-mode-features","title":"Advanced Mode Features","text":"<p>The following additional features are available in Advanced mode:</p> <ul> <li> <p>Analog Ctrl+4 - The Analog button begins Analog Recording. \u00a0Analog Recording tracks mouse movements, keyboard inputs, and clicks. \u00a0To end Analog Recording, press Ctrl+Break</p> </li> <li> <p>Simulated Drop-Down Menu - An object can be learned if it matches a rule specified in the Recording/Learning libraries available. The drop-down menu lists the possible rules for learning objects in the current application:</p> <p></p> </li> </ul> <p>If you cannot learn an object with one library rule, try another in the list.\u00a0Create a Simulated Object only if the other, more flexible alternatives have been exhausted.</p> <p>To learn an object using a specific library</p> <ol> <li> <p>Double click on a rule in the drop down list. \u00a0The button text should change to the text that you selected.</p> </li> <li> <p>Press the button.</p> </li> <li> <p>Select an object on the screen and make sure it is highlighted with a rectangle.</p> </li> <li> <p>Press Ctrl+2 to learn the object.</p> </li> </ol>"},{"location":"Guide/recording_activity_dialog/#transparent-option","title":"Transparent Option","text":"<p>While the Recording Activity (RA) dialog is open, it is always on top. The Transparent checkbox makes the RA Dialog transparent so that you can interact with objects behind it. \u00a0The image below illustrates the difference:</p> <p></p> <p>When you click the Transparent option, it will look like the following:</p> <p></p> <p>The main advantage of this mode is that you can click in the area where the RA dialog is displayed and the clicks will be sent through to the AUT.</p>"},{"location":"Guide/recording_library/","title":"Object Libraries","text":""},{"location":"Guide/recording_library/#purpose","title":"Purpose","text":"<p>Object libraries define what objects and interactions Rapise understands during Recording and Learning. \u00a0Most Object Libraries are specific to an application or a set of applications.</p>"},{"location":"Guide/recording_library/#usage","title":"Usage","text":"<p>Rapise comes with many different object libraries. See the list of libraries and supported control types below.</p> <p>Note: Selecting Auto as the application recording library will cause Rapise to select the one that it deems is most appropriate.</p> <p>Note: You can add your own Recording library - one that understands the objects in your application.</p>"},{"location":"Guide/recording_library/#libraries","title":"Libraries","text":"<ul> <li>Auto</li> <li>Desktop<ul> <li>Generic</li> <li>UIAutomation</li> <li>Managed</li> <li>DevExpress</li> <li>Infragistics</li> <li>Syncfusion</li> <li>Telerik</li> <li>Advanced Accessibility</li> <li>ActiveX</li> <li>ActiveXC1</li> <li>ActiveXSft</li> <li>FarPoint</li> <li>VSFlexGrid</li> <li>Java</li> <li>SWT</li> <li>Qt</li> </ul> </li> <li>Web<ul> <li>Web</li> <li>Selenium</li> <li>jQuery</li> <li>AgGrid</li> <li>GWT</li> <li>GWTExt</li> <li>DomSmartGwt</li> <li>YUI</li> </ul> </li> <li>API<ul> <li>Web Services</li> </ul> </li> <li>Mobile<ul> <li>Mobile</li> </ul> </li> <li>Enterprise Applications<ul> <li>DynamicsAX</li> <li>DynamicsNAV</li> <li>NavPOSControls</li> <li>DomDynamicsNAV</li> <li>DomDynamicsAX</li> <li>DomDynamicsCrm</li> <li>DomSalesforce</li> <li>DomSap</li> </ul> </li> </ul>"},{"location":"Guide/recording_library/#see-also","title":"See Also","text":"<ul> <li>Recording</li> <li>To write an Object library specific to your application, see Custom Libraries.</li> <li>Cross Browser Testing</li> <li>If you interact with an object that is not defined in your chosen recording library, it will be treated as a Simulated Object.</li> </ul>"},{"location":"Guide/regular_expressions/","title":"Regular Expressions","text":""},{"location":"Guide/regular_expressions/#purpose","title":"Purpose","text":"<p>A regular expression is a sequence of characters that describes how to construct a set of strings. \u00a0It is composed of character literals and special characters. Each character literal represents one single character (such as \"a\", \"b\", \"C\", \"1\"). \u00a0The special characters can represent a character, many characters, or a choice about how to select characters.</p>"},{"location":"Guide/regular_expressions/#usage","title":"Usage","text":"<p>In Rapise, you must prepend regular expressions with the string regex:. \u00a0So the regular expression describing all strings would be: regex:.*</p> <p>There are three uses for regular expressions in Rapise: (1) in Object Locators, (2) in action overriding code, (3) in Custom Libraries.</p>"},{"location":"Guide/regular_expressions/#examples","title":"Examples","text":"<p>In Object Locator to match a dynamic Window Title:</p> <p></p> <p><code>regex:.*Microsoft Dynamics NAV</code> matches any Window Title ending with <code>Microsoft Dynamics NAV</code>, e.g.</p> <pre><code>Posted Sales Shipments - Microsoft Dynamics NAV\n</code></pre> <p>or</p> <pre><code>Sales Invoices - Microsoft Dynamics NAV\n</code></pre>"},{"location":"Guide/relative_analog_learning/","title":"Relative Analog Recording","text":""},{"location":"Guide/relative_analog_learning/#purpose","title":"Purpose","text":"<p>Relative analog recording is used to track mouse usage (movement and clicks) and keyboard events. \u00a0For relative analog recording, events are recorded in relation to the top-left corner of the application's window. \u00a0The events are recorded in a file of type arf (Analog Recording File).</p> <p></p>"},{"location":"Guide/relative_analog_learning/#value","title":"Value","text":"<p>Not all applications can be recorded by locating and learning objects being used. \u00a0A very good example of this is free-hand drawing in an application such as Microsoft Paint (<code>Start Menu &gt; Accessories &gt; Paint</code>). \u00a0There are several reasons why this application cannot be recorded using object tracking, learning and recording. \u00a0The most important is that when the mouse is moved free-hand, it is operating on the same object the whole time - the blank \"canvas.\" \u00a0Another reason is that the application changes behaviour and the positions of the canvas change depending on the size of the canvas and the positions of floating toolbars.</p> <p>Relative analog recording is provided by Rapise to make it possible to make it possible to design and implement tests for these types of applications.</p>"},{"location":"Guide/relative_analog_learning/#see-also","title":"See Also","text":"<ul> <li>Do Relative Analog Recording</li> <li>Absolute Analog Recording</li> </ul>"},{"location":"Guide/replace_text_dialog/","title":"Replace Text Dialog","text":""},{"location":"Guide/replace_text_dialog/#purpose","title":"Purpose","text":"<p>Replace occurrences of the Search Term text with the Replacement Text in the currently visible Source Editor.</p>"},{"location":"Guide/replace_text_dialog/#how-to-open","title":"How to Open","text":"<p>Use main menu <code>Edit &gt; Find</code>.</p>"},{"location":"Guide/replace_text_dialog/#replace-tab","title":"Replace Tab","text":"<ul> <li>Find what: Place the string you would like to search for in the Find what text box.</li> <li>Look In: this option specifies where the search will take place. You can limit the search to: current document, current selection, current test, the entire test and subtests, or a specific folder.</li> <li>Match case option: If unselected, case is ignored in the search.</li> <li>Match whole word option: \u00a0If set to true, parts of words will not count as matches.</li> <li>Replace with text-box: All occurrences of the string in the Find what text-box will be replaced with the string in the Replace with text-box when you press the Replace button.</li> </ul>"},{"location":"Guide/report_filtering/","title":"Report Filtering","text":""},{"location":"Guide/report_filtering/#purpose","title":"Purpose","text":"<p>Report Filtering lets you specify criteria to filter your view of the test execution report. Rows that do not match your criteria are hidden.</p>"},{"location":"Guide/report_filtering/#usage","title":"Usage","text":"<p>You can filter the report view while the file is open. \u00a0Directly above the first row of the report, there is a row of filter cells. \u00a0Each one has a matching criteria button , a text-box to specify a filter value, a drop-down menu with predefined filter values, and a clear button :</p> <p></p>"},{"location":"Guide/report_filtering/#matching-criteria","title":"Matching Criteria","text":"<p>Matching criteria determine how to compare the filter string value you input with the values in the report. \u00a0You can select from 16 matching criteria. \u00a0Press the button marked A above the column you are filtering to see the possible criteria:</p> <p></p>"},{"location":"Guide/report_filtering/#predefined-filter-values","title":"Predefined Filter Values","text":"<p>If we expand the filter cell's drop-down menu, we will see a list of predefined filtering options:</p> <p></p> <ul> <li>(Custom): This option has to do with the next section Custom Filter Options.</li> <li>(Blanks): Matches all rows where the value for this column is blank.</li> <li>(NonBlanks): Matches all rows there the value for this column is not blank.</li> <li>All other predefined values are copied from cells in the column you are filtering.</li> </ul>"},{"location":"Guide/report_filtering/#custom-filter-option","title":"Custom Filter Option","text":"<p>To create a filter with multiple matching criteria and filter values, select (Custom) from the filter cell's drop-down menu. \u00a0The Enter filter criteria for... Dialog will open. \u00a0Instructions for how to use it are here.</p> <p></p>"},{"location":"Guide/report_filtering/#undo-filtering","title":"Undo Filtering","text":"<p>To undo filtering for a particular column, press the clear button for that column:</p> <p></p>"},{"location":"Guide/report_filtering/#see-also","title":"See Also","text":"<ul> <li>Automated Reporting</li> <li>Enter filter criteria for... Dialog</li> </ul>"},{"location":"Guide/report_viewer/","title":"Report Viewer","text":""},{"location":"Guide/report_viewer/#purpose","title":"Purpose","text":"<p>The Report Viewer displays test result (<code>.trp</code>) files.</p>"},{"location":"Guide/report_viewer/#how-to-open","title":"How to Open","text":"<p>Use the Test Files View to open a report (trp) file. \u00a0The report file will be opened in a Report Viewer in the Content View. \u00a0The report toolbar and report menu will also open.</p> <p>Or, you can Playback the test script. \u00a0The report file will display in a Report Viewer after the test completes.</p>"},{"location":"Guide/report_viewer/#see-also","title":"See Also","text":"<ul> <li>For more info on Reports, see Automated Reporting.</li> </ul>"},{"location":"Guide/rest_definition_editor/","title":"REST Definition Editor","text":""},{"location":"Guide/rest_definition_editor/#purpose","title":"Purpose","text":"<p>The REST Definition Editor allows you to edit REST web service definition files (<code>.rest</code>).</p>"},{"location":"Guide/rest_definition_editor/#how-to-open","title":"How to Open","text":"<p>Use the Add Web Service Dialog to create a new REST definition (<code>.rest</code>) file. \u00a0The definition file will be opened in a REST Editor in the Content View.</p> <p>Or, you can double-click on an existing <code>.rest</code> file in the Test Files View explorer window.\u00a0The definition file will be opened in a REST Editor in the Content View. \u00a0The REST Toolbar is also open on the top of the editor.</p>"},{"location":"Guide/rest_definition_editor/#request","title":"Request","text":"<p>The request form has several sections that you need to populate:</p> <ul> <li>Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.)</li> <li>URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above)</li> <li>Credentials - Any HTTP Basic Authentication Headers</li> <li>Headers - Any other HTTP headers (both standard and custom)</li> <li>Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script.</li> <li>Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON.</li> </ul>"},{"location":"Guide/rest_definition_editor/#response","title":"Response","text":"<p>The HTTP Response Headers are displayed:</p> <p></p> <p>The HTTP Response in XML format is formatted and displayed:</p> <p></p> <p>The HTTP Response in JSON format is formatted and displayed:</p> <p></p> <p>This displays the output from the last web service request. It has several tabs:</p> <ul> <li>Response Header - Displays a list of the HTTP response headers (name and value). If the request received a <code>200 OK</code> code back, it's displayed in green, if it receives an error code back, it's displayed in red.</li> <li>Response Body</li> <li> <ul> <li>Raw - Displays the raw text of the HTTP response body received from the server.</li> </ul> </li> <li> <ul> <li>XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body.</li> </ul> </li> <li> <ul> <li>JSON - If the received body content is identified as JSON, this tab displays nicely formatted, indented JSON that is easier to read than the raw response body.</li> </ul> </li> </ul>"},{"location":"Guide/rest_definition_editor/#operation-explorer","title":"Operation Explorer","text":"<p>This section lets you add, open, delete and clone REST requests in the definition file.</p> <ul> <li> <p><code>Add request</code> - Adds a new REST operation to the current <code>.rest</code> definition file.</p> <p></p> </li> <li> <p><code>Clone request</code> - Makes a copy of the currently selected REST operation and allows you to give the copy a new name.</p> <p></p> </li> <li> <p><code>Delete request</code> - Deletes the currently selected REST operation from the current REST definition file.</p> <p></p> </li> </ul>"},{"location":"Guide/rest_definition_editor/#script-steps","title":"Script Steps","text":"<p>The REST Script Steps tab in the bottom view lets you see the list of recorded REST operations and use them to create your test script in the main test file.</p> <ul> <li> <p><code>Create Script</code> - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script.</p> </li> <li> <p><code>Remote Step</code> - This removes the recorded step from the script box</p> </li> <li> <p><code>Clean</code> - This removes all of the recorded steps from the script box.</p> </li> </ul> <p>Each of the steps displayed in the script box will contain the name of the REST operation along with its HTTP method (GET, POST, PUT, DELETE, etc.). Steps displayed in bold* with an asterisk also have a verification point recorded. That means when the script is generated, it will include a <code>Tester.Assert</code> function to verify the results.</p>"},{"location":"Guide/rest_definition_editor/#see-also","title":"See Also","text":"<ul> <li>For more info on REST Web Services, see REST Web Services.</li> <li>For a tutorial on creating a REST web service test, see the Web Services REST Tutorial.</li> </ul>"},{"location":"Guide/rest_web_service/","title":"Testing REST Web Services","text":""},{"location":"Guide/rest_web_service/#what-is-rest-and-what-is-a-restful-web-service","title":"What is REST and what is a RESTful web service?","text":"<p>RE**presentational **S**tate **T**ransfer (**REST) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC.</p> <p>A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol.</p>"},{"location":"Guide/rest_web_service/#how-does-rapise-test-rest-web-services","title":"How does Rapise test REST web services?","text":"<p>Creating a REST web service test in Rapise consists of the following steps:</p> <ol> <li> <p>Using the REST definition builder to create the various REST web service requests and verify that they return the expected data in the expected format.</p> </li> <li> <p>Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects.</p> </li> <li> <p>Generating the test script in Javascript that uses the learned Rapise web service objects.</p> </li> </ol>"},{"location":"Guide/rest_web_service/#rapise-rest-definition-builder","title":"Rapise REST Definition Builder","text":"<p>When you add a web service to your Rapise test project, you get a new REST definition file (<code>.rest</code>) that will store all of your prototyped requests against a specific REST web service. The various REST requests are then created in the REST definition builder:</p> <p></p> <p>Each REST request can then include the following items:</p> <ul> <li> <p>Method - the type of HTTP request being made (GET, POST, PUT, DELETE, etc.)</p> </li> <li> <p>URL - the URL of the web service request with any parameter tokens included (e.g. {session_id} in our example above)</p> </li> <li> <p>Credentials - Any HTTP Basic Authentication Headers</p> </li> <li> <p>Headers - Any other HTTP headers (both standard and custom)</p> </li> <li> <p>Parameters - Any parameters that have been defined in the URL that will be called from the Rapise test script.</p> </li> <li> <p>Body - The body of the request (for POST and PUT requests). This can be in any text-serialized format such as XML or JSON.</p> </li> </ul> <p>When you execute the request, it will return back the HTTP response headers and if it recognizes the MIME content-type as either XML or JSON, it will format it to make it more readable by the tester:</p> <p></p> <p>Once you have finished with your prototyping of the web service test operations, you can then save the request definitions and use the <code>Update Object Tree</code> option to populate the main Rapise Object Tree.</p>"},{"location":"Guide/rest_web_service/#web-service-object-recognition","title":"Web Service Object Recognition","text":"<p>When Record REST Objects API Recording option is set to <code>true</code>, each of the REST web service requests that has been prototyped in the REST definition editor is converted by Rapise into a scriptable object:</p> <p></p> <p>Each of the REST service objects in the tree has operations designed to let you call the method and access the returned body either in its raw text format, or if it's a web service that returns data in JSON format, it will be able to send/receive data as native JavaScript objects.</p> <p>Rapise provides you with access to the following attributes of the HTTP request before/after the request has been executed:</p> <ul> <li> <p>Request:</p> </li> <li> <ul> <li>Method</li> </ul> </li> <li> <ul> <li>Url</li> </ul> </li> <li> <ul> <li>Headers (inc. authentication)</li> </ul> </li> <li> <ul> <li>Body</li> </ul> </li> <li> <p>Response:</p> </li> <li> <ul> <li>Headers</li> </ul> </li> <li> <ul> <li>Body</li> </ul> </li> </ul>"},{"location":"Guide/rest_web_service/#generating-rapise-rest-test-scripts","title":"Generating Rapise REST Test Scripts","text":"<p>Once all the REST operations have been defined and saved as Rapise learned objects, you can call the REST operations from within your Rapise test scripts.</p> <p>The easiest way to do this is to click on the <code>Record</code> button in the REST definition editor (next to the <code>Send</code> button) which will add the request to list of recorded steps:</p> <p></p> <p>Usually you need to verify the data returned as well as call the REST method. To do this, go to the Verify text box underneath the Body section:</p> <p></p> <p>If you select the overall array response[14] and click the main <code>Verify</code> button next to the Record button, the system will automatically add a verification step that verifies all of the values. To try this, click the <code>Verify</code> button. This will add a bold verification step to the recorded script:</p> <p></p> <p>You will see a script step recorded with a verification test added (it's shown in bold with an asterisk*).</p> <p>However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name. To do this, right-click on the response[14] entry to display the verification content menu:</p> <p></p> <p>Choose the option Verify Response length=14. This adds the following step to the recorded script:</p> <p></p> <p>Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned:</p> <p></p> <p>Choose the option to Verify Response[0].Name = Hound of the Baskervilles. This will add a verification step for this specific property: </p> <p></p> <p>Once you are ready, click the <code>Create Script</code> and the test script will be created for you:</p> <p></p> <p>The script is always generated within the <code>Test()</code> function of the current <code>Main.js</code> file. The term current refers to the <code>Main.js</code> file of the test, test case, or Page Object / Module to which this <code>.soap</code> definition belongs.</p> <p>In the case of a Page Object, you would need to cut the generated code from <code>Test()</code> and paste it into the corresponding <code>&lt;PageObject&gt;_DoAction</code> function.</p> <p>As well as simply calling the <code>DoExecute()</code> method of each REST web service object to call the previously defined operation, you can use the various properties on the REST service object to send through specific parameter values, add/remove headers, change the authenticated user, change the request body as well as inspect all of the attributes in the request and response.</p> <p>This allows you unparalleled control over the web service request, with the ability to debug and diagnose web service issues in addition to being able to quickly call the learned operations.</p> <p>Since the REST objects are just like any other Rapise object, you can have hybrid test scripts that call web service methods and also test GUI objects. This is very useful when you want to test how the user interface changes in response to specific web service API interactions, or when you have a user interface that connects to the sever using a web service (for example with a JSON-based AJAX web user interface).</p> <p></p> <p>Once you have created your REST web service test, you can use the standard Playback functionality in Rapise to execute your test and display the report:</p> <p></p>"},{"location":"Guide/rest_web_service/#handling-request-timeout","title":"Handling Request Timeout","text":"<p>Special request or Session parameter named <code>RequestTimeoutMs</code> allows changing the timeout for the request. Otherwise default timeout (100000 = 100 seconds) is used.</p> <p></p>"},{"location":"Guide/rest_web_service/#handling-binary-downloads","title":"Handling Binary Downloads","text":"<p>Special parameter value <code>WriteResponseTo</code> allows defining a path to the file where full binary version of the server response is saved.</p> <p>It should be a full path. It may contain environment variable reference (<code>%WORKDIR%</code>, <code>%ROOT%</code> etc).</p> <p></p>"},{"location":"Guide/rest_web_service/#handling-file-uploads-and-multipart-requests","title":"Handling File Uploads and Multipart Requests","text":"<p>Each Request with Content-Type set to <code>multipart/form-data</code> is assumed to be a special request and handled in a special way.</p> <p>The Body part should be a valid <code>JSON</code> with the following structure:</p> <pre><code>{\n    \"multipart\":\n    [\n        {\n            \"Name\": \"name_of_text_field\",\n            \"ContentType\": \"text/plain\",\n            \"Value\": \"value\"\n        },\n        {\n            \"Name\": \"uploadfile\",\n            \"ContentType\": \"image/png\",\n            \"FileName\": \"image.png\",\n            \"FilePath\": \"path_to_file_for_upload\"\n        }\n    ]\n}\n</code></pre> <p></p> <p>For the text fields ContentType is optional. By default it is set to <code>text/plain</code>.</p> <p>For file upload fields ContentType and FileName are optional. By default content-type and FileName are auto-detected from the FilePath.</p> <p>So here is an example of the minimal multipart request with one text field and one file upload:</p> <pre><code>{\n    \"multipart\":\n    [\n        {\n            \"Name\": \"name_of_text_field\",\n            \"Value\": \"value\"\n        },\n        {\n            \"Name\": \"uploadfile\",\n            \"FullPath\": \"c:\\\\some\\\\path\\\\to\\\\image.png\"\n        }\n    ]\n}\n</code></pre>"},{"location":"Guide/rest_web_service/#json-as-field-value","title":"JSON as Field Value","text":"<p>Here is how you can pass JSON value of the field:</p> <pre><code>{\n    {\n      \"Name\": \"jsonText\",\n      \"ContentType\":\"text/json\",\n      \"Value\": {\n        \"One\":\"Value1\",\n        \"Two\":123\n      }\n    },\n    ...\n}\n</code></pre>"},{"location":"Guide/rest_web_service/#params-in-multipart-request","title":"Params in Multipart Request","text":"<p>It is typical that you want to parameterize text value or file path. It is important to make sure that you properly quote custom value. I.e.</p> <p>If we have a parameterized JSON Body:</p> <pre><code>{\n  \"multipart\": [\n    {\n      \"Name\": \"jsonText\",\n      \"ContentType\":\"text/json\",\n      \"Value\": {StringParam}\n    },\n    {\n      \"Name\": \"uploadfile\",\n      \"FilePath\": {FilePathParam}\n    }\n  ]\n}\n</code></pre> <p></p> <p>Once parameters are defined for the <code>multipart</code> request, you should make sure that they are properly escaped. Consider using <code>JSON.stringify</code> appropriately, i.e.:</p> <pre><code>RestMultipart_UploadFileParams.SetParameter('StringParam', JSON.stringify(\"Some Value\"));\nRestMultipart_UploadFileParams.SetParameter('FilePathParam', JSON.stringify( Global.GetFullPath('NewAvatarImage.png') ));\n</code></pre>"},{"location":"Guide/rest_web_service/#passing-data-between-api-calls","title":"Passing Data Between API Calls","text":"<p>There are certain scenarios when it is convenient to pass dynamic data into a REST call or between consequent REST calls, i.e.:</p> <ol> <li>We want to use credential from external configuration file to avoid hard-coding them as REST headers or REST parameters.</li> <li>One call returns values that are needed by subsequent calls. Good example is a bearer token returned by authorization calls that should then be used as a header in all subsequent calls. The token has short life range and should be requested again and again between testing sessions.</li> <li>We want to test service in exploratory mode. I.e. do some sequence of calls manually. Maybe then checking something via the UI or getting some value that is easier to get via the API and then needed elsewhere.</li> </ol> <p>So we enabled pre- and post- request callbacks that work both in REST editor and in runtime when tests executes API calls. We call them **Before**Request and **After**Response.</p>"},{"location":"Guide/rest_web_service/#before-request-and-after-response-rest-callbacks","title":"Before-Request and After-Response REST Callbacks.","text":"<p>Callbacks are defined in the REST editor. </p> <p>Request-specific callback may be defined in the properties editor when action is  selected:</p> <p></p> <p>When callback is required, it may be either selected from the dropdown or generated using <code>&lt;Add New...&gt;</code> option:</p> <p></p> <p>Callback function always created in the <code>User.js</code> of the current test.</p>"},{"location":"Guide/rest_web_service/#beforerequest-rest-callback","title":"BeforeRequest REST Callback","text":"<p>BeforeRequest callback has a signature:</p> <pre><code>function Before_&lt;Rest_FileName&gt;_&lt;Entry_Name&gt;(/**RESTRequest*/request)\n</code></pre> <p>i.e.:</p> <pre><code>function Before_LibraryInformationSystem_Get_Session(/**RESTRequest*/request)\n{\n    request.SetHeader('Accept', 'application/json');\n    request.SetHeader('Content-Type', 'application/json');\n    request.SetCredential('librarian', 'librarian');\n}\n</code></pre> <p>It is executed right before the action. It may access pre-defined Headers, Properties and URL of given request and alter them. All this may be done by accessing <code>Session</code> global object and <code>request</code> object passed as a parameter. Parameter type is RESTRequest.</p>"},{"location":"Guide/rest_web_service/#afterresponse-rest-callback","title":"AfterResponse REST Callback","text":"<p>AfterResponse callback has a signature:</p> <pre><code>function After_&lt;Rest_FileName&gt;_&lt;Entry_Name&gt;(/**RESTResponse*/response)\n</code></pre> <p>i.e.</p> <pre><code>function After_LibraryInformationSystem_Get_Session(/**RESTResponse*/response)\n{\n    var sessionid = response.GetResponseBodyObject();\n    Session.SetParameter('session_id', sessionid);\n}\n</code></pre> <p>It is executed right after the action.  It may access <code>response</code> object passed as a parameter. Parameter type is RESTResponse.</p>"},{"location":"Guide/rest_web_service/#common-rest-callbacks","title":"Common REST Callbacks","text":"<p>Sometimes it is more convenient to define one common callback that will be executed for all request inside a given endpoint. </p> <p>Common callbacks are defined in the property window for the whole endpoint.</p> <p></p> <p>When both common callback and entry callback are defined, both are executed in the following order:</p> <ol> <li>Common Before_Rest_FileName</li> <li>Before_Rest_FileName_Entry_Name</li> <li>Send request and get response</li> <li>After_Rest_FileName_Entry_Name</li> <li>Common After_Rest_FileName</li> </ol>"},{"location":"Guide/rest_web_service/#rest-callback-limitations","title":"REST Callback Limitations","text":"<p>If given request has no explicit callback defined and no common callback defined then in REST Editor mode values of Session will be ignored. If you have important parameters or headers stored in the session, then it is recommended to define one common 'Before' callback.</p>"},{"location":"Guide/rest_web_service/#rest-callback-session","title":"REST Callback Session","text":"<p>Once request has a callback and it is executed from the Editor, debugger session starts and keeps running. You may see it by presence of debugger panel:</p> <p></p> <p>All variables and session parameters assigned in the callbacks stay active while debugger panel is running.</p> <p>If you want to modify something in the callback code, then you need to use Stop Debugger or Reset button first to be able to save the modifications. In this case variables, session parameters and collected cookies get lost.</p>"},{"location":"Guide/rest_web_service/#rest-callback-breakpoints","title":"REST Callback Breakpoints","text":"<p>You may set a breakpoint in any REST callback function, and Rapise will stop when doing a call. If you function is long and debugging implies many steps, the request may proceed while you are debugging. To avoid this you may change the value of global option API Callback Timeout </p>"},{"location":"Guide/rest_web_service/#recording","title":"Recording","text":"<p>The way Rapise records captured REST actions may differs depending on the API recording options. </p> <p>Record REST Objects is <code>true</code>, each step creates an object in the object tree:</p> <p></p> <p>and it is used by the produced script:</p> <pre><code>    var LibraryInformationSystem_Get_Session=SeS('LibraryInformationSystem_Get_Session');\n    LibraryInformationSystem_Get_Session.DoExecute();\n</code></pre> <p>When Record REST Objects is <code>false</code> then nothing is added to the object tree and generated script uses REST definition file directly by means of Session.GetRESTRequest:</p> <pre><code>    var LibraryInformationSystem_Get_Session =/**RESTService*/Session.GetRESTRequest(\"LibraryInformationSystem.rest\", \"Get_Session\");\n    LibraryInformationSystem_Get_Session.DoExecute();\n</code></pre> <p>When Generate Full Name is <code>false</code> then shorter object name is used, both when Record REST Objects is <code>true</code>:</p> <pre><code>    var Get_Session=SeS('Get_Session');\n    Get_Session.DoExecute();\n</code></pre> <p>and when Record REST Objects is <code>false</code>:</p> <pre><code>    var Get_Session =/**RESTService*/Session.GetRESTRequest(\"LibraryInformationSystem.rest\", \"Get_Session\");\n    Get_Session.DoExecute();\n</code></pre> <p>The way how <code>Session.GetRESTRequest</code> is recorded depends on Generate Short REST Path. In short mode the 1<sup>st</sup> parameter is just <code>&lt;filename&gt;.rest</code>, i.e.:</p> <pre><code>Session.GetRESTRequest(\"LibraryInformationSystem.rest\", \"Get_Session\");\n</code></pre> <p>While in long mode it is:</p> <pre><code>Session.GetRESTRequest(\"%WORKDIR%\\\\LibraryInformationSystem.rest\", \"Get_Session\");\n</code></pre>"},{"location":"Guide/rest_web_service/#negative-rest-tests","title":"Negative REST Tests","text":"<p>Some actions are expected to return failure and we need to work with them to produce negative tests. There are two ways of doing it. First is global, so failures of all actions ignored. It is active when you choose Session.SetIgnoreStatus. I.e.:</p> <pre><code>Session.SetIgnoreStatus(true);\nFailingEndpoint1.DoExecute();\nPassingEndpoint.DoExecute();\nFailingEndpoint2.DoExecute();\nSession.SetIgnoreStatus(false);\n</code></pre> <p>If automatic status verification is disabled you expected to explicitly check the response returned from <code>DoExecute</code>.</p> <p>Record Failed REST Actions controls what to record when action returns status other than 200. If it is <code>true</code> then recorded step has additional parameter <code>ignoreStatus=true</code>. This flag is only added then action has also failed during recording.</p> <pre><code>FailingEndpoint1.DoExecute({}, true);\nPassingEndpoint.DoExecute();\nFailingEndpoint2.DoExecute({}, true);\n</code></pre>"},{"location":"Guide/restoring_the_default_layout/","title":"Restoring the Default Layout","text":"<p>There are two ways to restore the default layout of Rapise panes: (1) On Startup, and (2) In the Global Settings.</p>"},{"location":"Guide/restoring_the_default_layout/#on-startup","title":"On Startup","text":"<p>Press the Shift key while you open Rapise. \u00a0Keep the Shift key down until Rapise is done initializing.</p>"},{"location":"Guide/restoring_the_default_layout/#global-settings-dialog","title":"Global Settings Dialog","text":"<ol> <li>Click menu <code>Settings &gt; Global</code>. The Rapise Settings dialog will appear.</li> <li>Navigate to the Utilities tab of the dialog.</li> <li>Click on the Reset Layout button.</li> </ol> <p>Rapise will restart and the layout will be returned to the default.</p>"},{"location":"Guide/restoring_the_default_layout/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/rvl_editor/","title":"RVL Editor","text":""},{"location":"Guide/rvl_editor/#purpose","title":"Purpose","text":"<p>Rapise Visual Language Editor</p>"},{"location":"Guide/rvl_editor/#how-to-open","title":"How to Open","text":"<p>Use the RVL button on the main toolbar to open an RVL (<code>.rvl.xlsx</code>) file.\u00a0The file will be opened by the RVL Editor in the Content View.</p>"},{"location":"Guide/rvl_editor/#features","title":"Features","text":"<p>Editor has support for all RVL statements including</p> <ul> <li>Variables,</li> <li>Actions,</li> <li>Assertions,</li> <li>Maps,</li> <li>If-Else,</li> <li>Loops</li> </ul> <p>statements.</p> <p>RVL is a recordable language. Rapise recorder is translates captured actions to objects stored in the object repository and a set of actions. Each recorded chunk may be inserted into desired place in the selected sheet:</p> <p></p> <p>Usually recording is with together with scripting and, maybe, some JavaScript for advanced tasks.</p>"},{"location":"Guide/rvl_editor/#rvl-scripting","title":"RVL Scripting","text":"<p>In addition to recording one may use RVL editor for authoring scripts. You may drag&amp;drop actions from the Object Tree into the RVL. Also RVL editor is both keyboard and mouse friendly. You may either type whole or parts of commands and rely on auto-completion OR simply select a dropdown in each cell of the row.</p> <p>When writing or modifying a script it is recommended to go left-to-right for script creation.</p>"},{"location":"Guide/rvl_editor/#auto-completion","title":"Auto Completion","text":"<p>RVL Editor supports Auto completions. For example, if you type <code>I</code> in the flow column:</p> <p></p> <p>And hit Tab key the whole If statement is created:</p> <p></p> <p>Note: Tab is a trigger for auto-completion. If you use cursor keys or mouse to leave the cell then auto completion will not be executed.</p> <p>If you go to last line and change End with ElseIf</p> <p></p> <p>then alternative branch is appended:</p> <p></p> <p>Similar logic works for Params, Conditions, Maps, Loops, Assertions and so on.</p>"},{"location":"Guide/rvl_editor/#disabling-cell-auto-correction","title":"Disabling Cell Auto Correction","text":"<p>Sometimes autocompletion prevents one from entering a desired value. For example, you have a global object <code>navigator</code> and typing it into the Object columns automatically changes it to <code>Navigator</code>.</p> <p>The solution is to enter the cell for editing text and pressing <code>F2</code>. It will disable all autocompletion for this cell and then you may type any value.</p>"},{"location":"Guide/rvl_editor/#action-params","title":"Action Params","text":"<p>When you select an action from the list RVL Editor automatically fills default action params. For example, if we choose: </p> <p></p> <p>And press Tab after <code>DoLaunch</code> RVL Editor fills default param:</p> <p></p> <p><code>DoLaunch</code> has one required parameter <code>cmdLine</code>. Also it has a number of optional parameters. They are not added by default to make script more concise. However, you may need all or some of them. So you may add them by pressing <code>Params</code> button on RVL Toolbar:</p> <p></p> <p>It is also possible to add params one-by-one using the dropdown in the ParamName column:</p> <p></p>"},{"location":"Guide/rvl_editor/#password-param-value","title":"Password Param Value","text":"<p>Once column ParamType set to <code>password</code>, ParamValue should be an encrypted string. Setting encrypted value is simple:</p> <ol> <li> <p>Change ParamType to <code>string</code>.</p> </li> <li> <p>Type plain value to be encrypted into ParamValue.</p> </li> <li> <p>Switch ParamType to <code>password</code> - plain value becomes encrypted.</p> </li> </ol>"},{"location":"Guide/rvl_editor/#param-dropdowns","title":"Param Dropdowns","text":"<p>It is possible to define own list of dropdown values for any parameter. In most cases it is defined for custom functions.</p> <p>For example, we may have function <code>SetState(stateCode)</code> where we expect pre-defined limited set of state code values.</p> <pre><code>function SetState(/**string*/stateName)\n</code></pre> <p>We may define dropdown for <code>stateName</code> parameter, so that RVL editor suggest the following list:</p> <p></p> <p>The values for this dropdown are defined in the spreadsheet:</p> <p></p> <p>Moreover, we define a code for each state name, so it may be re-mapped in the implementation of the <code>SetState</code> function using </p> <p></p> <p>Dropdown values are defined in file <code>Dropdowns.xlsx</code>, that may be added to the test using theCreate/Spreadsheet... menu item.</p> <p>The full key to find matching dropdown is <code>objectid</code>.<code>method</code>.<code>paramName</code>. If not found, it will check <code>method.paramNam</code> and <code>paramName</code> columns:</p> Key Example <code>objectid.method.paramName</code> <code>Global.DoLaunch.cmdLine</code> <code>Functions.SetState.stateName</code> <code>MyButton.DoClick.clickType</code> <code>object_type.method.paramName</code> <code>VSFlexGrid.DoClickCell.row</code> <code>method</code>.<code>paramName</code> <code>SetState.stateName</code> <code>paramName</code> <code>stateName</code> <p>The dropdown may be defined in the current (next to <code>Main.rvl.xlsx</code>), in parent test and so on up to the framework root (the folder pointed by the <code>%WORKDIR%</code>).</p> <p></p> <p>RVL Editor always tries to find best match for dropdown column starting from nearest <code>Dropdowns.xlsx</code> and climbing up to the framework root.</p> <p>Dropdowns may also be mapped to other values. I.e. human-readable menu area names to learned object IDs, state names to state codes, element names to XPath statements and so on. This mapping is done by adjacent columns in <code>Dropdowns.xlsx</code>. The mapping may be one to many, so we may define both state code, state order number, state capital for the same state name by adding corresponding columns.</p>"},{"location":"Guide/rvl_editor/#full-line-comments","title":"Full Line Comments","text":"<p>Anything typed into the Type cell of the commented line is expanded to as many cells as needed to show the text. This is similar to the way Excel extends cell text across sibling empty cells:</p> <p></p>"},{"location":"Guide/rvl_editor/#context-menu","title":"Context Menu","text":"<ul> <li>Find '<code>&lt;object&gt;</code>' in Object Tree - this menu item is only available when you click on the cell from the Object column.</li> <li>Flash '<code>&lt;object&gt;</code>' - flash the object.</li> <li>Show XPath/Location for '<code>&lt;object&gt;</code>' - show the location string for the object.</li> <li>Rename '<code>&lt;object&gt;</code>'... - rename object in the object repository and fix all references in the current sheet.</li> <li>Play This Sheet - execute actions from the active sheet.</li> <li>Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately.</li> <li>Play From Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped.</li> <li>Ins Row - insert new row before the active one.</li> <li>Del Row - delete all selected rows.</li> <li>Cut, Copy, Paste - standard clipboard operations.</li> <li>Clear in Selection - clears cell values in selected region.</li> <li>Select All Rows - select full sheet.</li> <li>Insert Selected Rows Here - clone rows at the current location.</li> <li>Move Selected Rows Here - move rows to the current location.</li> <li>Copy Selection as JavaScript - translate selected range to the equivalent JavaScript and put its text to the clipboard.</li> <li>Copy Selection as Text - put selected range as tab-separated text to the clipboard.</li> <li>Wrap Selection Info If - enclose selected range into branch.</li> <li>Wrap Selection Into Loop - enclose selected range into loop.</li> <li>Extract Selection as new Sheet - make new sheet and move selected range into it.</li> </ul>"},{"location":"Guide/rvl_editor/#sheet-tab-context-menu","title":"Sheet Tab Context Menu","text":"<ul> <li>Play this Sheet - execute given sheet.</li> <li>Rename... - change sheet tab name.</li> <li>Remove Sheet '<code>&lt;sheet name&gt;</code>' - delete sheet form the workbook.</li> <li>Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL sheet in the same workbook.</li> <li>Copy RVL DoPlaySheet - copy call statement for the selected sheet for inserting into the other RVL workbook.</li> <li>Copy RVL.DoPlayScript(...) - copy JavaScript code to execute this sheet (call sheet from JavaScript).</li> </ul>"},{"location":"Guide/rvl_editor/#functions-object","title":"Functions Object","text":"<p>Suppose we have some functions defined in the <code>User.js</code> file:</p> <p></p> <p>Calling JavaScript from RVL is done via the <code>Functions</code> Object. It is not available in the object repository and is only shown in RVL Objects dropdown:</p> <p></p> <p>Once selected it shows all user defined functions from the <code>User.js</code> file:</p> <p></p>"},{"location":"Guide/rvl_editor/#file-extensions","title":"File Extensions","text":"<p>RVL has following file extensions:</p> <ul> <li><code>rvl.xlsx</code></li> <li><code>rvl.xls</code></li> </ul> <p>RVL is designed to be a simple grid language and it may be edited in any spreadsheet editor supporting <code>.xls</code> or <code>.xlsx</code> files (i.e. Microsoft Excel)</p>"},{"location":"Guide/rvl_editor/#rvl-editor-shortcuts","title":"RVL Editor Shortcuts","text":"<ul> <li>Shift+Enter - inserts an empty line after the selected cell.</li> <li>Ctrl+D - deletes the line of the selected cell.</li> <li>Ctrl+P - reveals optional parameters for an action in the current line, acts as click on <code>Params</code> button on the RVL toolbar.</li> </ul>"},{"location":"Guide/rvl_editor/#rvl-toolbox","title":"RVL Toolbox","text":"<p>Since Rapise 6.7 you may use RVL Toolbox to quickly find RVL snippets, KB articles and documentation links. The toolbox is located on the right side of the RVL editor.</p> <p></p> <p>The toolbox consists of three parts.</p> <ol> <li>Search field. Enter text here to filter the list of items.</li> <li>List of items. Select an item to preview. Some of the items can be dragged right into RVL area.</li> <li>Preview pane. It has description of selected item. Click links to get more information.</li> </ol> <p></p> <p>If you select an item in the toolbox and see a yellow box with text <code>Drag selected item to insert into RVL</code> you may drag the item to RVL area.</p> <p></p> <p>There is also and advanced way of using the toolbox:</p> <ol> <li>Start typing what you want to do in Actions column (the line must be empty),</li> <li>then hit Enter and choose an item from the list using arrow keys,</li> <li>then hit Enter again to insert the snippet into RVL.</li> </ol> <p>If you want to keep the toolbox hidden then unpin it.</p> <p></p> <p>Move mouse over the Toolbox label to reveal the list of items.</p> <p></p>"},{"location":"Guide/rvl_editor/#navigate-to-definition-f12","title":"Navigate to Definition (F12)","text":"<p>To quickly navigate to the location where a specific function or Page Object action is defined, follow these steps:</p> <ol> <li>Click on the function name or action.</li> <li>Press the F12 key.</li> <li>Rapise will attempt to locate and open the corresponding definition.</li> </ol> <p></p> <p></p>"},{"location":"Guide/rvl_editor/#define-a-map-by-dragdrop","title":"Define a Map by Drag&amp;Drop","text":"<p>When you drag and drop a spreadsheet (<code>.xlsx</code>) into RVL, a map is created. This map refers to the data file using an absolute path, starting from the framework root represented by <code>%WORKDIR%</code>.</p> <p></p> <p>However, if you hold the Shift key while performing the same action, the map is created with a relative path instead. This relative path is based on the current <code>rvl.xlsx</code> file.</p> <p></p>"},{"location":"Guide/rvl_editor/#doplaytest-via-dragdrop","title":"DoPlayTest via Drag&amp;Drop","text":"<p>When you drag and drop a test case into RVL, a <code>RVL.DoPlayTest</code> call is created. The call refers to the test case using an absolute path, starting from the framework root represented by <code>%WORKDIR%</code>.</p> <p></p> <p>However, if you hold the Shift key while performing the same action, the map is created with the test alias name (short name) instead:</p> <p></p> <p>Short names are useful when all test cases have unique names. Usually it means longer naming, i.e. instead of <code>Invoices/Create</code> test case should be named <code>Invoices/Create new Invoice</code> so it does not collide with <code>Orders/Create</code>.</p>"},{"location":"Guide/rvl_editor/#dragdrop-for-doplaytest","title":"Drag&amp;Drop for DoPlayTest","text":"<p>When you drag and drop a test case into RVL, it generates a <code>RVL.DoPlayTest</code> call. This call references the test case using an absolute path starting from the framework root, represented by <code>%WORKDIR%</code>.</p> <p></p> <p>However, if you hold the Shift key while performing the same action, the same call is created with the test alias name (short name) instead:</p> <p></p> <p>Short names are particularly useful when each test case has a unique name. In such cases, longer naming conventions can be used to differentiate test cases, for example, using <code>Invoices/Create new Invoice</code> instead of <code>Invoices/Create</code> to avoid collisions with other test cases like <code>Orders/Create</code>.</p>"},{"location":"Guide/rvl_editor/#see-also","title":"See Also","text":"<ul> <li>About RVL</li> <li>Why RVL?</li> <li>KB 357 Data-driven testing with spreadsheets and RVL</li> <li>KB 340 How to Do a Nested Loop with Rapise Visual Language (RVL)</li> <li>KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library</li> </ul>"},{"location":"Guide/salesforce_com/","title":"Salesforce.com","text":""},{"location":"Guide/salesforce_com/#overview","title":"Overview","text":"<p>Salesforce.com is a cloud-based Customer Relationship Management (CRM) and Sales Force Automation (SFA) platform that is delivered as a Software as a Service (CRM) solution. It provides companies with an interface for case management and task management, and a system for automatically routing and escalating important events.</p> <p></p> <p>Rapise provides out of the box support for testing Salesforce.com and provides additional libraries for making the testing even easier and more productive.</p>"},{"location":"Guide/salesforce_com/#recording-a-salesforcecom-test","title":"Recording a Salesforce.com Test","text":"<p>Salesforce.com is completely web-based and you use a web browser to access the user interface. Therefore when recording a test using Rapise, you use the same web browser libraries that you use to record other web tests:</p> <ul> <li>Most of the Salesforce.com user interface will be tested using the standard browser library for your web browser of choice (e.g. Internet Explorer HTML, Firefox HTML, and Chrome HTML).</li> <li>In addition, there are special controls inside Salesforce.com that Rapise has specialized support for. For that reason you'll also see the DomSalesforce library added to your test as well as the browser one. This DomSalesforce library adds additional rules that identify certain Salesforce.com objects (e.g. the main Grid) to make testing easier.</li> </ul> <p>When you record your first test, you'll see the following library selection code generated automatically by Rapise:</p> <pre><code>g_load_libraries=[\"Web\", \"DomSalesforce\"];\n</code></pre> <p>If you don\u2019t see the DomSalesforce library listed in your test, then you will need to manually change it using the <code>[ ] Libraries</code> button on the tool menu.</p>"},{"location":"Guide/salesforce_com/#tips-for-interacting-with-objects","title":"Tips for Interacting with Objects","text":"<p>Many of the screens in Salesforce.com use simple HTML form fields such as text boxes, dropdown lists, etc.:</p> <p></p> <p>Rapise will recognize these objects using the standard web browser HTML libraries.</p> <p>Salesforce.com Grid One of the the most important UI elements inside Salesforce.com is the sortable, filterable grid:</p> <p></p> <p>The Salesforce.com Grid is used in lots of different screens inside Salesforce.com (e.g. leads, quotes, etc.) and it is very common to need to interact with it in test scripts.</p> <p>When you record operations on such a grid or simply learn the entire grid using Ctrl+2 you will learn the SalesforceGrid object In additional to the standard HTML object methods and properties, you have the following special functions that you can perform on the grid:</p> <ul> <li>DoClickCell() - Clicks the specified cell when you specify the x-index, y-index, the type of click (left-click, right-click, etc.).</li> <li>DoClickText() - Clicks on a specific text inside the grid.</li> <li>GetCell - Gets the text of the specified cell.</li> <li>GetColumnCount - Gets the number of columns in grid.</li> <li>GetColumnName - Gets the caption of a column.</li> <li>GetRowCount - Gets the number of rows in grid.</li> </ul>"},{"location":"Guide/salesforce_com/#see-also","title":"See Also","text":"<ul> <li>Get the framework for testing Salesforce (github)</li> <li>KB: Testing Visualforce components in Salesforce</li> <li>Webinar: Testing Salesforce.com with Rapise</li> <li>Webinar: Testing Salesforce Lightning with Rapise</li> </ul>"},{"location":"Guide/sample_tests/","title":"Samples Index","text":"<p>Rapise includes several sample tests that you are free to read, modify, copy and use. \u00a0You can open the tests from the Start Page.</p> <p>Sample tests are located in:</p> <pre><code>RapiseDataDirectory\\Samples\n</code></pre> <p>Unless otherwise specified, the RapiseDataDirectory will be:</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\n</code></pre> <p>The sample tests are described below.</p>"},{"location":"Guide/sample_tests/#activex","title":"ActiveX","text":"<p>These samples demonstrate the testing of Microsoft ActiveX / COM controls used in Visual Basic applications including the MSComCtl library. The samples include the Microsoft FlexGrid Control, MS Common Toolbar Control, Microsoft Tabbed Dialog Control, TabStrip, and Microsoft Windows Common Controls 6.0 [MSCOMCTL.OCX].</p>"},{"location":"Guide/sample_tests/#analogrecorder","title":"AnalogRecorder","text":"<p>This sample demonstrates Analog Recording.</p>"},{"location":"Guide/sample_tests/#crossbrowser","title":"CrossBrowser","text":"<p>Simple web test you can run on any browser.</p>"},{"location":"Guide/sample_tests/#dynamics-ax","title":"Dynamics AX","text":"<p>This sample demonstrates using Rapise to test an installation of Microsoft Dynamics AX 2012 to perform some basic ERP functions.</p>"},{"location":"Guide/sample_tests/#dynamics-crm","title":"Dynamics CRM","text":"<p>This sample demonstrates using Rapise to test an installation of Microsoft Dynamics CRM to perform some basic contact management functions.</p>"},{"location":"Guide/sample_tests/#farpoint","title":"FarPoint","text":"<p>This sample script demonstrates using the FarPoint library to test the FarPoint SpreadSheet Control.</p>"},{"location":"Guide/sample_tests/#java","title":"Java","text":"<p>This sample tests a Java AWT/SWING application. This sample demonstrates the capabilities of the Java library. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.</p>"},{"location":"Guide/sample_tests/#java-swt","title":"Java SWT","text":"<p>This sample tests a Java SWT/RCP application. This sample demonstrates the capabilities of the SWT and UIAutomation libraries. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.</p>"},{"location":"Guide/sample_tests/#jquery-ui","title":"jQuery-UI","text":"<p>This sample illustrates using the jQuery HTML DOM extension library that allows you to record/playback test scripts against web applications using widgets from the jQuery Javascript library framework.</p>"},{"location":"Guide/sample_tests/#library-information-system","title":"Library Information System","text":""},{"location":"Guide/sample_tests/#createnewbook-editexistingbook-createnewauthor-editexistingauthor","title":"CreateNewBook, EditExistingBook, CreateNewAuthor, EditExistingAuthor","text":"<p>These tests can be used to test the sample library information system web application hosted at http://www.libraryinformationsystem.org. This is the same sample application used by SpiraTest and illustrates how you can use SpiraTest to manage and execute automated Rapise tests. A copy of these tests is also available in new installations of SpiraTest v3.2+.</p> <p>To see these tests on the Start Page press the Fetch button at the top of the samples list.</p>"},{"location":"Guide/sample_tests/#managed","title":"Managed","text":"<p>This sample tests a .NET 2.0 application. This sample demonstrates the capabilities of the Managed library. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, grid, listbox, listview, menu, etc.</p>"},{"location":"Guide/sample_tests/#qtframework","title":"QtFramework","text":"<p>TThis sample tests a sample QT Framework cross-platform application. This sample demonstrates the capabilities of the QtFramework library. The application under test contains various standard Qt widgets, such as: button, edit, tree, combo box, etc.</p>"},{"location":"Guide/sample_tests/#silverlight","title":"Silverlight","text":"<p>This sample tests a Silverlight web application. This sample demonstrates the capabilities of the UIAutomation library. The application under test contains various standard GUI controls, such as: button, edit, tree, combo box, menu, etc.</p>"},{"location":"Guide/sample_tests/#simulatedobject","title":"SimulatedObject","text":"<p>This sample opens MS Paint and draws on its canvas. It uses Simulated Objects and several related methods: DoMouseMove(X,Y), DoLButtonDown(), DoLButtonUp(), and DoSendKeys(text).</p>"},{"location":"Guide/sample_tests/#sampleatm","title":"SampleATM","text":"<p>This sample tests an MFC application. You will also learn how to organize your test script in modular form, how to launch the AUT from your test script and how to execute various actions on GUI controls.</p>"},{"location":"Guide/sample_tests/#usingdatabase","title":"UsingDatabase","text":"<p>This example shows how you can use a relational (SQL) database to create Data-Driven tests. \u00a0This script reads test case data from a spreadsheet ADO datasource to test Calculator.</p>"},{"location":"Guide/sample_tests/#usingdllhandlermanaged","title":"UsingDLLHandlerManaged","text":"<p>This sample shows how to unit test managed DLLs. You'll see how to use methods CreateClassInstance() and InvokeMember().</p>"},{"location":"Guide/sample_tests/#usingdllhandlerunmanaged","title":"UsingDLLHandlerUnManaged","text":"<p>This sample shows how to unit test unmanaged DLL code. You'll learn how to register (UserWrap.Register) and execute (UserWrap.ShellExecute) a function.</p>"},{"location":"Guide/sample_tests/#usingimagecheckpoint","title":"UsingImageCheckPoint","text":"<p>This example shows how to create image checkpoints.</p>"},{"location":"Guide/sample_tests/#usinginclude","title":"UsingInclude","text":"<p>This sample demonstrates two ways to include external files/functions:</p> <ol> <li>eval(File.Include(...)): include a file with utility functions.</li> <li>SeSRunJSScript(...): include and execute external function with its own object map.</li> </ol>"},{"location":"Guide/sample_tests/#usingmsaccess-usingmsexcel-usingmsword","title":"UsingMSAccess, UsingMSExcel, UsingMSWord","text":"<p>These samples demonstrate how you can work with Microsoft Word, Excel, and Access from scripts. You'll learn how to test applications that expose a COM interface.</p>"},{"location":"Guide/sample_tests/#usingmobile","title":"UsingMobile","text":"<p>These samples demonstrate how to do the testing of mobile devices running either Apple iOS or Android.</p>"},{"location":"Guide/sample_tests/#usingregistry","title":"UsingRegistry","text":"<p>This sample demonstrates usage of the Windows registry. The registry is queried to determine the OS (XP/2003/Vista, etc) and owner.</p>"},{"location":"Guide/sample_tests/#usingreporting","title":"UsingReporting","text":"<p>This sample illustrates various reporting features:</p> <ol> <li>Regular reporting (Tester.Assert, Tester.Message)</li> <li>Custom attributes (Tester.SetReportAttribute, Tester.ResetReportAttribute)</li> <li>Stacked attributes (Tester.PushReportAttribute, Tester.PopReportAttribute)</li> <li>Nested Tests (Tester.BeginTest, Tester.EndTest)</li> <li>Inserting Links, Text and Images into the report (tags parameter, SeSReportText, SeSReportLink, SeSReportImage)</li> </ol>"},{"location":"Guide/sample_tests/#usingselenium","title":"UsingSelenium","text":"<p>This sample how you can use Rapise to write Selenium WebDriver based web application tests using the raw Selenium WebDriver API.</p>"},{"location":"Guide/sample_tests/#usingspreadsheet","title":"UsingSpreadSheet","text":"<p>This example shows how you can use Excel spreadsheets to create Data-Driven tests. \u00a0This script reads test case data from an XLS spreadsheet to test Calculator.</p>"},{"location":"Guide/sample_tests/#usingxml","title":"UsingXML","text":"<p>This sample demonstrates how to read, modify and write XML files.</p>"},{"location":"Guide/sample_tests/#webservicesrest","title":"WebServicesREST","text":"<p>This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an HTTP RESTful web service.</p>"},{"location":"Guide/sample_tests/#webservicessoap","title":"WebServicesSOAP","text":"<p>This sample demonstrates how you can use the Rapise Web-Services module to write and execute automated web service tests against an SOAP web service.</p>"},{"location":"Guide/scenarios/","title":"Scenarios","text":""},{"location":"Guide/scenarios/#purpose","title":"Purpose","text":"<p>Note: Starting from Rapise 8.0, it is recommended to utilize Test Cases and Modules / Page Objects for creating scenarios and maintaining reusable building blocks respectively.</p> <p>Scenarios serve as reusable building blocks that can be incorporated into your test scripts. They offer a way to structure and organize your tests, making them more modular and maintainable. Scenarios can be included in both fully automated test scripts and predominantly manual test script.</p> <p>Another valuable application of scenarios is in Web Service test recording. When you record script steps for a Web Service test and click on Create Script, the recorded steps in JavaScript form are appended to the <code>Test()</code> function. At this point, you can wrap them into separate scenarios using the method described in this chapter.</p>"},{"location":"Guide/scenarios/#creating-scenarios","title":"Creating Scenarios","text":"<p>Let's say for example that you have the following Rapise test that was recorded from our sample library information web application:</p> <pre><code>function Test()\n{\n    //Click on Log In\n    SeS('Log_In').DoClick(); \u00a0 \u00a0 \u00a0 \u00a0\n    //Set Text librarian in Username:\n    SeS('Username_').DoSetText(\"librarian\");\n    //Set Text librarian in Password:\n    SeS('Password_').DoSetText(\"librarian\");\n    //Click on ctl00$MainContent$LoginUser$LoginButton\n    SeS('ctl00$MainContent$LoginUser$Logi').DoClick();\n    //Click on Book Management\n    SeS('Book_Management').DoClick();\n    //Click on (Create new book)\n    SeS('_Create_new_book__').DoClick();\n    //Set Name:\n    SeS('Name_').DoSetText(g_book_name);\n    //Select Author:\n    SeS('Author_').DoSelect(g_book_author);\n    //Select Genre:\n    SeS('Genre_').DoSelect(g_book_genre);\n    //Click on ctl00$MainContent$btnSubmit\n    SeS('ctl00$MainContent$btnSubmit').DoClick();\n    //Click on Log Out\n    SeS('Log_Out').DoClick();\n}\n</code></pre> <p>If we want to break up this monolithic test into individual functions (called scenarios), simply highlight the test you want to extract (for example the Login steps):</p> <p></p> <p>Then right-click on the section and choose the option to Extract User Scenario:</p> <p></p> <p>Now in the dialog box that appears, give the scenario a name (e.g. Login):</p> <p></p> <p>This will extract the highlighted section into its own scenario.</p> <p>In <code>Main.js</code> we get</p> <pre><code>function Test()\n{\n    //Call scenario Login\n    Login();\n\n    //Click on Book Management\n    SeS('Book_Management').DoClick();\n    //Click on (Create new book)\n    SeS('_Create_new_book__').DoClick();\n    //Set Name:\n    SeS('Name_').DoSetText(g_book_name);\n    //Select Author:\n    SeS('Author_').DoSelect(g_book_author);\n    //Select Genre:\n    SeS('Genre_').DoSelect(g_book_genre);\n    //Click on ctl00$MainContent$btnSubmit\n    SeS('ctl00$MainContent$btnSubmit').DoClick();\n    //Click on Log Out\n    SeS('Log_Out').DoClick();\n}\n</code></pre> <p>In <code>User.js</code> we get</p> <pre><code>/** @scenario Login */\nfunction Login()\n{\n    //Click on Log In\n    SeS('Log_In').DoClick(); \u00a0 \u00a0 \u00a0 \u00a0\n    //Set Text librarian in Username:\n    SeS('Username_').DoSetText(\"librarian\");\n    //Set Text librarian in Password:\n    SeS('Password_').DoSetText(\"librarian\");\n    //Click on ctl00$MainContent$LoginUser$LoginButton\n    SeS('ctl00$MainContent$LoginUser$Logi').DoClick();\n}\n</code></pre>"},{"location":"Guide/scenarios/#usage-in-automated-tests","title":"Usage in Automated Tests","text":"<p>When you create a new test in Rapise it will contain a <code>Main.js</code> file that contains the main test code and a <code>User</code>.js file that contains any user-defined functions (called Scenarios). For example in the following test:</p> <pre><code>function Test()\n{\n    Login();\n    CreateBook(g_book_name, g_book_author, g_book_genre);\n    Logout();\n}\n</code></pre> <p>The test function calls three scenarios that comprise the main test. The scenarios themselves are JavaScript functions:</p> <pre><code>/** @scenario Login */\nfunction Login()\n{\n    //Click on Log In\n    SeS('Log_In').DoClick(); \u00a0 \u00a0 \u00a0 \u00a0\n    //Set Text librarian in Username:\n    SeS('Username_').DoSetText(\"librarian\");\n    //Set Text librarian in Password:\n    SeS('Password_').DoSetText(\"librarian\");\n    //Click on ctl00$MainContent$LoginUser$LoginButton\n    SeS('ctl00$MainContent$LoginUser$Logi').DoClick();\n}\n\n/** @scenario Logout */\nfunction Logout()\n{\n    //Click on Log Out\n    SeS('Log_Out').DoClick();\n}\n\n/** @scenario CreateBook */\nfunction CreateBook(name, author, genre)\n{\n    //Click on Book Management\n    SeS('Book_Management').DoClick();\n    //Click on (Create new book)\n    SeS('_Create_new_book__').DoClick();\n    //Set Name:\n    SeS('Name_').DoSetText(name);\n    //Select Author:\n    SeS('Author_').DoSelect(author);\n    //Select Genre:\n    SeS('Genre_').DoSelect(genre);\n    //Click on ctl00$MainContent$btnSubmit\n    SeS('ctl00$MainContent$btnSubmit').DoClick();\n\n    //Verify that the Book is added to the grid\n    //We need to xpath query the grid to see if any\n    //added rows match the item added\n    var tr = FindRowByName(name);\n    Tester.Assert('Book was added successfully [TS:5]', tr.length != 0);\n}\n</code></pre> <p>If you go to the Object Tree you will see these user functions/scenarios displayed:</p> <p></p> <p>You can then drag and drop those into the test script editor to include in the main test script.</p>"},{"location":"Guide/scenarios/#usage-in-manual-tests","title":"Usage in Manual Tests","text":"<p>When you create a new test in Rapise it will contain a <code>Main.js</code> file that contains the main test code and a <code>User.js</code> file that contains any user-defined functions (called Scenarios). For example you may have the following scenario defined in the <code>User.js</code> file:</p> <pre><code>/** @scenario Login */\nfunction Login()\n{\n    //Click on Log In\n    SeS('Log_In').DoClick(); \u00a0 \u00a0 \u00a0 \u00a0\n    //Set Text librarian in Username:\n    SeS('Username_').DoSetText(\"librarian\");\n    //Set Text librarian in Password:\n    SeS('Password_').DoSetText(\"librarian\");\n    //Click on ctl00$MainContent$LoginUser$LoginButton\n    SeS('ctl00$MainContent$LoginUser$Logi').DoClick();\n}\n</code></pre> <p>You can now include that in a manual test step, by simply making the test step description start with an \"@\" symbol to denote that it is a scenario:</p> <pre><code>@Login();\n</code></pre> <p>Then when the manual test is executed, that one step will be passed to the scripting engine for automated execution.</p>"},{"location":"Guide/scenarios/#example","title":"Example","text":"<p>If you open the CreateNewBook sample (located in <code>C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\CreateNewBook</code>) you will see a test that has multiple scenarios.</p>"},{"location":"Guide/scenarios/#see-also","title":"See Also","text":"<ul> <li>Semi-Manual Testing</li> <li>Object Tree</li> </ul>"},{"location":"Guide/screenshots/","title":"Taking Screenshots","text":"<p>Taking screenshots during test playback may serve various purposes:</p> <ol> <li>Provide clues for test failure analysis</li> <li>Document test execution. It may be required by a company policy.</li> <li>Screenshots can be used to generate test documentation and even user's guides.</li> </ol> <p>Rapise can make screenshots automatically after every action or on-demand at specific points of test execution.</p>"},{"location":"Guide/screenshots/#automatic-screenshots","title":"Automatic Screenshots","text":"<p>To enable automatic screenshots after every action use Screen Capture test settings.</p> <p>Note: Automatic screenshots are supported for Desktop and Web applications and not supported for Mobile.</p>"},{"location":"Guide/screenshots/#screenshots-in-framework-mode","title":"Screenshots in Framework Mode","text":"<p>Simplest way to enable screenshots is to use <code>Parameters...</code> section in the <code>Choose Test Case</code> dialog:</p> <p></p> <p>Then choose <code>Capture Execution</code>:</p> <p></p> <p>Pres OK, and set a value:</p> <p></p>"},{"location":"Guide/screenshots/#taking-screenshot-when-test-fails","title":"Taking Screenshot when Test Fails","text":"<p>By default the option is enabled to take screenshot whenever test fails:</p> <p></p>"},{"location":"Guide/screenshots/#playback","title":"Playback","text":"<p>If before execution you will set in Screen Capture</p> <ul> <li><code>Capture Cursor = True</code></li> <li><code>Capture Execution = True</code></li> <li><code>Widget Only = True</code></li> </ul> <p>then after playback Rapise will generate the screen flow document</p> <p></p> <p>Link to the document is also available in the report</p> <p></p> <p>Content of the document looks like</p> <p></p> <p>Note: If an object is not available on screen after action on it then Rapise takes screenshot of the whole desktop window. You can see it in step #5 above, login button disappeared after clicking it.</p> <p>Note: Also Rapise always takes additional screenshot of the whole desktop window at the end of test execution. Even if the test was terminated because of a failed assertion. See step #7 below.</p> <p></p>"},{"location":"Guide/screenshots/#embed-screenshots-into-report","title":"Embed Screenshots Into Report","text":"<p>Execution screenshots described above are stored in the local file system and if a test report is uploaded to SpiraTest then these screenshots are not uploaded.</p> <p>To embed screenshots into execution reports and make them available in SpiraTest, set</p> <ul> <li><code>Include in Report = True</code></li> </ul> <p>in Screen Capture settings.</p> <p>In Rapise screenshots are embedded before each action</p> <p></p> <p>Screenshots in SpiraTest</p> <p></p>"},{"location":"Guide/screenshots/#suppressing-screenshots","title":"Suppressing Screenshots","text":"<p>Sometimes it makes sense to temporarily disable screenshot capturing. Learn how to do this in</p> <ul> <li>KB291 How to Enable/Disable screenshots during script execution</li> </ul>"},{"location":"Guide/screenshots/#on-demand-screenshots","title":"On-Demand Screenshots","text":"<p>It is also possible to take screenshots at specific points of test execution. The way of doing it depends on the test target.</p>"},{"location":"Guide/screenshots/#desktop","title":"Desktop","text":"<p>This method works both for desktop applications and web applications running on the same machine as Rapise.</p> <p>Use global Tester object and it's action to take screenshot of an object, specific window or whole desktop.</p> <ul> <li>Tester.CaptureObjectImage</li> <li>Tester.CaptureWindowImage</li> <li>Tester.CaptureDesktopImage</li> </ul>"},{"location":"Guide/screenshots/#web","title":"Web","text":"<p>This method works well if you plan to run a web test on remote machines via Selenium WebDriver.</p> <p>Use global Navigator object and it's Navigator.DoScreenshot action.</p>"},{"location":"Guide/screenshots/#mobile","title":"Mobile","text":"<p>To make a screenshot on mobile target use</p> <ul> <li>Android.DoScreenshot</li> <li>iOS.DoScreenshot</li> </ul>"},{"location":"Guide/screenshots/#recording","title":"Recording","text":"<p>If before recording session you will set in Screen Capture</p> <ul> <li><code>Capture Cursor = True</code></li> <li><code>Capture Recording = True</code></li> <li><code>Widget Only = True</code></li> </ul> <p>then after recording Rapise will generate the screen flow HTML document</p> <p></p> <p>with content like</p> <p></p> <p>Note: We recorded <code>Login/Logout</code> scenario on Library Information System sample application, see web testing tutorial for more details.</p>"},{"location":"Guide/screenshots/#see-also","title":"See Also","text":"<ul> <li>KB291 How to Enable/Disable screenshots during script execution</li> </ul>"},{"location":"Guide/scripting/","title":"Scripting","text":""},{"location":"Guide/scripting/#purpose","title":"Purpose","text":"<p>There are three reasons to script with Rapise:</p> <ol> <li>To modify a recorded test to increase coverage, add assert statements, or make the test data-driven.</li> <li>To extend recording functionality by defining your own objects, actions, and libraries.</li> <li>To customize the Rapise Engine.</li> </ol>"},{"location":"Guide/scripting/#usage","title":"Usage","text":"<p>Rapise scripts are written in JavaScript (NodeJS or Microsoft JScript, depending on settings). You can run and debug your script using the full featured Internal Debugger. Rapise includes a testing API, with methods for manipulating images, spreadsheets, common GUI widgets, and more. </p>"},{"location":"Guide/scripting/#see-also","title":"See Also","text":"<p>JScript Language Reference</p>"},{"location":"Guide/scripting_choice_dialog/","title":"Scripting Choice Dialog","text":""},{"location":"Guide/scripting_choice_dialog/#purpose","title":"Purpose","text":"<p>You use the Choose Scripting Language dialog to choose between writing your tests in the Rapise Visual Language (RVL) scriptless table language, or in the JavaScript script editor.</p>"},{"location":"Guide/scripting_choice_dialog/#how-to-open","title":"How to Open","text":"<p>This dialog is automatically opened after you click Create in the Create New Test dialog.</p>"},{"location":"Guide/scripting_choice_dialog/#misc","title":"Misc","text":"<p>If you click the \"Don't Ask\" checkbox, Rapise will default to your last selection automatically when you create a test. You can change this options in the main Global Settings dialog.</p>"},{"location":"Guide/select_an_application_to_record_dialog/","title":"Select an Application to Record... Dialog","text":""},{"location":"Guide/select_an_application_to_record_dialog/#purpose","title":"Purpose","text":"<p>The Select an Application to Record... dialog appears before Recording when testing desktop applications.</p> <p>It queries the user for which program to record, as well as what Recording Library to use. If you are recording the same application for the second time then the dialog is not shown. The recording proceeds to last used application if it is still available on the screen.</p>"},{"location":"Guide/select_an_application_to_record_dialog/#how-to-open","title":"How To Open","text":"<p>To open the dialog, press the Record button on the toolbar.</p>"},{"location":"Guide/select_an_application_to_record_dialog/#available-applications","title":"Available Applications","text":"<p>The Available Applications table lists all of the processes running at the time you open the the dialog. \u00a0If the process you would like to record is already open, you can select if from the table.</p> <p>If you do not see the application to record in the list you may</p> <ol> <li>Click Refresh button at the bottom of the dialog. It should help if you launched the application after opening the dialog.</li> <li>Use Finder Tool to manually point to the application window. It should help if the window is not shown in the Windows taskbar.</li> </ol> <p></p>"},{"location":"Guide/select_an_application_to_record_dialog/#libraries","title":"Libraries","text":"<p>The Library table lists the available Recording Libraries. \u00a0Select the one appropriate to the process/program you will record. \u00a0If you select Auto, Rapise will attempt to choose the correct recording library for you. \u00a0See the Recording Library section for more information.</p>"},{"location":"Guide/select_an_application_to_record_dialog/#dialog-buttons","title":"Dialog Buttons","text":"<ul> <li>The Cancel button closes the dialog.</li> <li>Refresh button: Press to refresh the Available Applications table. \u00a0After refreshing, you will see processes that began after the dialog was opened.</li> <li>Select button: To record a process from the Available Applications table, select the process and then press the <code>Select</code> button.</li> </ul>"},{"location":"Guide/select_an_application_to_record_dialog/#run-application-tab","title":"Run Application Tab","text":"<ul> <li>Full path to application: If the program you would like to record is not already open, you can specify its path here. \u00a0If the program is already running, you can select it from the Available Applications table.</li> <li>Browse button: Browse for an application to open and record.</li> <li>Use working directory: To set a specific working directory when launching the application, check the box and enter in a value for the working directory.</li> <li>Run button: To record a program that is not currently open, fill in the Path text-box and press the Run button.</li> <li>The Cancel button closes the dialog.</li> </ul>"},{"location":"Guide/selenium_reconnect/","title":"Reconnect WebDriver Session","text":"<p>Since version 6.2 Rapise is able to reconnect WebDriver sessions. It makes possible many usage scenarios that save a lot of time because you do not need to relaunch the browser and perform manual steps to reach desired application state.</p> <p>This feature is especially handy when you use it with mobile browsers.</p>"},{"location":"Guide/selenium_reconnect/#maintenance-scenario","title":"Maintenance Scenario","text":"<ol> <li>You run a test and it fails at some point because some object is not found on screen.</li> <li>You use the Web Spy to reconnect to the application and analyze the cause of the failure.</li> <li>You use the Web Spy to re-learn the object.</li> <li>You run the test exactly from the step where it stopped working to make sure the test is fixed.</li> </ol>"},{"location":"Guide/selenium_reconnect/#reusing-session-to-run-multiple-tests","title":"Reusing Session to Run Multiple Tests","text":"<p>Since application launch is time consuming operation in mobile testing you may run multiple tests on the same browser instance.</p> <ol> <li>You run a test and it leaves the browser running.</li> <li>You run next test and so on.</li> </ol> <p>This approach has pros and cons. We do not recommend to use it for completely independent test cases. It makes sense, however, to use it to break down a long test into separate modules and run them sequentially.</p>"},{"location":"Guide/selenium_reconnect/#how-it-works","title":"How it Works","text":"<p>Important</p> <p>Rapise 7.0 handles browser session automatically. Until you do <code>Navigator.Close()</code> the session is kept alive and Rapise can reconnect to it.</p>"},{"location":"Guide/selenium_reconnect/#rapise-6x","title":"Rapise 6.x","text":"<p>To leave application running and save session information use WebDriver.SaveSession call in TestFinish block of your test.</p> <pre><code>function TestFinish()\n{\n    WebDriver.SaveSession();\n}\n</code></pre> <p>To reconnect to the running application use WebDriver.ReconnectSession call in TestPrepare block of your test.</p> <pre><code>function TestPrepare()\n{\n    WebDriver.ReconnectSession();\n}\n</code></pre> <p>If you want Rapise to launch a new browser session if there is no saved one pass <code>true</code> to WebDriver.ReconnectSession call.</p> <pre><code>function TestPrepare()\n{\n    WebDriver.ReconnectSession(true);\n}\n</code></pre> <p>Note: TestPrepare  block is executed when you do recording or execution of a test. It is also executed if you do selective execution of RVL (Play Selection, Play From Here, etc.).</p>"},{"location":"Guide/selenium_reconnect/#see-also","title":"See Also","text":"<ul> <li>Selenium WebDriver, for an overview of Selenium based testing in Rapise.</li> <li>Web Spy, for information on how to inspect state of an application loaded into a browser.</li> </ul>"},{"location":"Guide/selenium_settings_dialog/","title":"Selenium Settings Dialog","text":""},{"location":"Guide/selenium_settings_dialog/#selenium-profiles","title":"Selenium Profiles","text":"<p>Rapise can playback web tests on Selenium nodes. Configure each Selenium node you need for testing in a separate profile using <code>Selenium Settings Dialog</code>.</p> <p>This dialog box displays the list of <code>Selenium Profiles</code> and lets you create a new profile, modify a profile or make a new profile based on an existing one.</p> <p></p>"},{"location":"Guide/selenium_settings_dialog/#how-to-open","title":"How to Open","text":"<p>You can open this dialog box from the Rapise <code>Settings &gt; Selenium</code> menu.</p>"},{"location":"Guide/selenium_settings_dialog/#menu-options","title":"Menu Options","text":"<p>This dialog box has the following menu options:</p> <ul> <li>Select Profile - This dropdown list lets you select a different Selenium profile to be displayed in the dialog.</li> <li>Save - This button will save the changes to the current Selenium profile.</li> <li>Test - This button will test the Connection (URL) from Rapise to Selenium WebDriver (which is used to connect to the web browsers) and the connection from Selenium to the web browser.</li> <li>Duplicate - This button will create a new Selenium profile based on the currently viewed one.</li> <li>Create - This button will create a new empty Selenium profile that you can edit.</li> <li>Rename - This button will change the name of the current Selenium profile being edited.</li> <li>Delete - This button will delete the currently displayed Selenium profile. There is no undo, so be careful!</li> </ul>"},{"location":"Guide/selenium_settings_dialog/#local-selenium-profiles","title":"Local Selenium Profiles","text":"<p>Rapise version 6.3+ enables creation of profiles local to a test. It allows storing profiles together with tests (inside <code>SpiraTest</code> or <code>Git</code> repository) and eliminates the need to configure profiles manually on each execution host.</p> <p>To create a local profile just press <code>Duplicate</code> for one of global profiles and set <code>Local</code> checkbox before clicking <code>OK</code> button. Global and Local profile may have same name, in this case Local profile is used for execution.</p> <p></p> <p>If a test contains local Selenium profiles they can be seen in the dropdowns.</p> <p></p> <p></p> <p>Local Selenium profiles are stored inside <code>&lt;Test Root&gt;\\Profiles\\SeleniumProfiles</code> folder.</p>"},{"location":"Guide/selenium_settings_dialog/#profile-options","title":"Profile Options","text":""},{"location":"Guide/selenium_settings_dialog/#connection","title":"Connection","text":"<p>This section lets you enter the URI used to connect to the Selenium WebDriver server which hosts the web browsers being tested. It is typically of the form: </p> <p><pre><code>http://server:4444/wd/hub\n</code></pre> Where the port number used by Selenium is <code>4444</code> (default) and the <code>/wd/hub</code> suffix is added.</p> <p>Important</p> <p>If you are using web browsers on the local machine (that is running Rapise) you don't need to enter in a URI and can leave the entire field blank.</p>"},{"location":"Guide/selenium_settings_dialog/#shared","title":"Shared","text":"<p>This section contains common capabilities.</p>"},{"location":"Guide/selenium_settings_dialog/#browser-specific","title":"Browser Specific","text":"<p>In this section set browser specific options. Use <code>Chrome Specific</code> section for configuring both <code>Chrome</code> and <code>Edge</code> browsers.</p>"},{"location":"Guide/selenium_settings_dialog/#browserstack-settings","title":"BrowserStack Settings","text":"<p>In addition, there are some settings, unique to running Selenium WebDriver tests through the BrowserStack cloud platform:</p> <p></p> <ul> <li>BrowserStack<ul> <li>browserstack.key - This needs to be populated with your Browserstack cloud access key.</li> <li>browserstack.user - This needs to be populated with your Browserstack username.</li> <li>device - Specifies a particular mobile device for the test environment (mobile web only).</li> <li>os_version - Use this capability to specify the OS version of the device.</li> <li>realMobile - Use this flag to test mobile websites on a physical mobile device.</li> </ul> </li> </ul>"},{"location":"Guide/selenium_settings_dialog/#see-also","title":"See Also","text":"<ul> <li>For the list of standard capabilities please refer to Selenium repository.</li> </ul>"},{"location":"Guide/selenium_webdriver/","title":"Selenium WebDriver","text":"<p>When developing and testing a web application you naturally need to test it with different web browsers and multiple version of each web browser. With Rapise natively you can record a test script using one browser and then play it back using Google Chrome, Microsoft Edge, Mozilla Firefox or Microsoft Internet Explorer.</p> <p>In addition, you can use Rapise with the open-source Selenium WebDriver framework to play back the same tests against other browsers such as Apple Safari and Opera (as well as Chrome, Edge, Firefox, IE). You can also use Rapise to write native Selenium code for cases where you want to use existing Selenium WebDriver logic.</p>"},{"location":"Guide/selenium_webdriver/#playing-recording-tests","title":"Playing &amp; Recording Tests","text":"<p>Once you have installed and configured the integration between Rapise and Selenium, we shall discuss how to use Selenium with Rapise to record and play tests.</p> <p>Now one of the important points is that there are some limitations as to the operations that can be performed using Selenium-based web browsers as opposed to the native browsers supported by Rapise.</p>"},{"location":"Guide/selenium_webdriver/#rapise-73","title":"Rapise 7.3+","text":"<p>In Rapise 7.3 we introduced new Selenium-based recorder. Read more about it in this blog post.</p> Feature Rapise Native Browser Selenium Browser Learn HTML Objects Yes Chrome, Edge or WebSpy for any browser Record HTML Events Yes Chrome, Edge Playback HTML Events Yes Yes Web Spy Yes Yes Learn Java Applets Yes No Manual Testing Yes No"},{"location":"Guide/selenium_webdriver/#legacy","title":"Legacy","text":"Feature Rapise Native Browser Selenium Browser Learn HTML Objects Yes (Only in Web Spy) Record HTML Events Yes No Playback HTML Events Yes Yes Web Spy Yes Yes Learn Java Applets Yes No Manual Testing Yes No <p>So if you are planning on using Rapise to record a test script by clicking HTML objects and having Rapise create the script using the learned objects and adding the events (DoClick, SetText, etc.) then you will need to use one of the native browsers (Chrome, IE, Firefox) or Selenium browsers (Chrome, Edge - requires Rapise 7.3+) to create the test script. You can then playback the same test in either the native or Selenium browsers.</p> <p>If you are planning on using Rapise to learn objects using the Web Spy, and then create the test script from those objects by either dragging the object methods and properties from the Object Tree into the test script or just using Intellisense to type the methods (DoClick, SetText, etc.) then you can use either a native or Selenium web browser just as easily.</p> <p>For most users, the primary reason for using the Selenium web browsers will be to playback their tests on a greater number of browsers or to leverage existing Selenium WebDriver scripts created outside of Rapise.</p>"},{"location":"Guide/selenium_webdriver/#managing-the-selenium-profiles","title":"Managing the Selenium Profiles","text":"<p>Rapise allows you to maintain different profiles for your different installed Selenium web browsers (both on the same machine as Rapise and also those running on a remote Selenium WebDriver server), To see the different Selenium profiles, in the main menu select <code>Settings &gt; Selenium</code>. It will bring up the Selenium profile manager:</p> <p></p> <p>By default there is one profile for each of the Selenium WebDriver supported web browsers (Chrome, Edge, Firefox, Internet Explorer, Opera, Safari). However you can clone and change the profiles if you want to have different versions of the browsers (e.g. a local instance of Firefox and one running on a remote Selenium server).</p> <p>Most users will only need to change the Uri field of the Safari web browser since the defaults are typically sufficient for most testing needs.</p>"},{"location":"Guide/selenium_webdriver/#recording-using-selenium","title":"Recording using Selenium","text":""},{"location":"Guide/selenium_webdriver/#rapise-73_1","title":"Rapise 7.3+","text":"<p>Select Chrome-based or Edge-based Selenium profile.</p> <p></p> <p>Then click <code>Record</code> button and do the recording like you do it with native browsers.</p>"},{"location":"Guide/selenium_webdriver/#legacy_1","title":"Legacy","text":"<p>To start recording a web test using a Selenium WebDriver based browser, make sure you change the test\u2019s web browser parameter to one of the Selenium profiles:</p> <p></p> <p>When you click the <code>Record</code> button on the main toolbar you will see the following Recording Activity Dialog:</p> <p></p> <p>You will notice that the <code>Verify</code> and <code>Learn</code> options are not available. If you want to use these tools you will need to use a native browser (non-Selenium) instead.</p> <p>When using a Selenium profile for recording, you will need to use the Spy (Ctrl+5) tool to do the learning of objects on the web page. This brings up the Web Spy:</p> <p></p> <p>When using the Web Spy with a Selenium profile you will notice that the web browser icon / name shows \u201cSelenium\u201d rather than the browser name and the option to Track an item Ctrl+T is not present. That means you need to select the HTML DOM object in the DOM Tree and learn it from there (rather than clicking on the web page itself which is possible when using a native browser profile).</p> <p>When you choose to Learn an object in the DOM tree it will be displayed in the Recording Activity Dialog as a new Learned Object:</p> <p></p> <p>Objects Learned using a Selenium profile will be added to the Rapise Object Tree in the usual way and as is typical with Learning, you have the option to specify an Action in the Recording Activity Grid (e.g. change Learn to Click) in which case test script code is also generated.</p> <p>Tip (applies to Rapise 7.2 and older versions): Due to the inherent limitations in recording using a Selenium browser profile (vs. a native browser profile) most users will record their scripts using a native browser and then use Selenium primarily for debugging using the Web Spy and playback.</p>"},{"location":"Guide/selenium_webdriver/#playback-using-selenium","title":"Playback using Selenium","text":"<p>To playback a web test using a Selenium web browser profile, simply choose the appropriate profile in the dropdown located in the top right corner of the main Rapise window:</p> <p></p> <p>Then click the <code>Play</code> button on the main toolbar. The test will now start execution. Unlike recording there is nothing different in the way Rapise handles the playback of a Selenium test. The only difference will be that if the test uses non-HTML technologies such as Java, etc. those parts of the test will fail.</p> <p></p>"},{"location":"Guide/selenium_webdriver/#shadow-dom","title":"Shadow DOM","text":"<p>Since Rapise 7.3 it is possible to view Shadow DOM elements in the Web Spy (works with Selenium Browsers only).  </p> <p></p> <p>Shadow root elements are marked with the bold label Shadow Root. Use the Web Spy to build a locator for Shadow DOM element and Learn it to add into the object repository.</p> <p>Info</p> <p>Locator for a Shadow DOM element has special syntax.</p>"},{"location":"Guide/selenium_webdriver/#see-also","title":"See Also","text":"<ul> <li>Selenium-based Recorder</li> <li>Setting Up Selenium</li> <li>Using Native Selenium Code</li> <li>Reconnect WebDriver Session</li> </ul>"},{"location":"Guide/semi_manual_testing/","title":"Semi-Manual Testing","text":""},{"location":"Guide/semi_manual_testing/#purpose","title":"Purpose","text":"<p>This is a useful technique when you want to have a predominantly manual test (executed by a tester) that has some steps that are automated by Rapise. These could be some of the initial setup tasks (e.g. logging in, starting the application) or just tasks that are well suited to automation.</p>"},{"location":"Guide/semi_manual_testing/#usage","title":"Usage","text":"<p>Create your manual test either using the recorder or the manual test editor. You can also just open up a test already created in Spira.</p> <p>Next, inside Rapise, create a test scenario (function) that contains the necessary login. In this example we shall simply automate the launching of MS-Paint.</p> <p>Create a function in the User.js file with the following code:</p> <pre><code>function LaunchMsPaint()\n{\n    Global.DoLaunch('C:\\\\Windows\\\\system32\\\\mspaint.exe');\n}\n</code></pre> <p>Now go to the Manual Steps section of Rapise by clicking on the <code>Tools &gt; Manual Steps</code> menu.</p> <p>Inside the first test step (for example), change the Description to the following:</p> <pre><code>@LaunchMsPaint();\n//User\u00a0starts\u00a0up\u00a0the\u00a0MS-Paint\u00a0Application\n</code></pre> <p>This will be contained within the actual test step itself:</p> <p></p> <p>Now, when you execute the test (using the normal Execute button on the main Test toolbar (not the Execute Manual icon on the Manual Toolbar ) what happens is that Rapise will execute the main <code>Test()</code> function that contains:</p> <pre><code>function Test(params)\n{\n    Global.DoPlayManual('ManualSteps.rmt');\n}\n\ng_load_libraries = [\"UIAutomation\"];\n</code></pre> <p>this instructs Rapise to use the manual playback system. However when it gets to the first step, it will see the ampersand symbol (@) that denotes that this is actually an automated scenario and then call the following code:</p> <pre><code>//User\u00a0starts\u00a0up\u00a0the\u00a0MS-Paint\u00a0Application\nLaunchMsPaint();\n</code></pre> <p>Once the scenario has completed, Rapise will then return back to the manual test playback.</p>"},{"location":"Guide/semi_manual_testing/#see-also","title":"See Also","text":"<ul> <li>Manual Playback</li> <li>Test Scenarios</li> <li>Inflectra Webinar: From Manual to Automated UI Testing With Rapise</li> </ul>"},{"location":"Guide/sending_special_keys_to_the_c/","title":"Sending Special Keys to the Current Application","text":""},{"location":"Guide/sending_special_keys_to_the_c/#overview","title":"Overview","text":"<p>You can use the Global.DoSendKeys action to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. <code>Page Down</code>, or <code>CTRL + Key</code>). This article explains the way to do this.</p> <p>Important</p> <p>For Web applications, use Navigator.DoSendKeys and HTMLObject.DoSendKeys which accept the same patterns listed below.</p> <p></p>"},{"location":"Guide/sending_special_keys_to_the_c/#special-characters","title":"Special Characters","text":"<p>To send special characters, you just use the list available in the Windows API <code>SendKeys.Send</code> function:</p> <p>http://msdn.microsoft.com/en-us/library/system.windows.forms.sendkeys.send(v=vs.110).aspx</p> <p>To specify characters that aren't displayed when you press a key, such as <code>ENTER</code> or <code>TAB</code>, and keys that represent actions rather than characters, use the codes in the following table:</p> Key Code BACKSPACE {BACKSPACE}, {BS}, or {BKSP} BREAK {BREAK} CAPS LOCK {CAPSLOCK} DEL or DELETE {DELETE} or DOWN ARROW {DOWN} END {END} ENTER {ENTER} or ~ ESC {ESC} HELP {HELP} HOME {HOME} INS or INSERT {INSERT} or LEFT ARROW {LEFT} NUM LOCK {NUMLOCK} PAGE DOWN {PGDN} PAGE UP {PGUP} PRINT SCREEN {PRTSC} (reserved for future use) RIGHT ARROW {RIGHT} SCROLL LOCK {SCROLLLOCK} TAB {TAB} UP ARROW {UP} F1 {F1} F2 {F2} F3 {F3} F4 {F4} F5 {F5} F6 {F6} F7 {F7} F8 {F8} F9 {F9} F10 {F10} F11 {F11} F12 {F12} F13 {F13} F14 {F14} F15 {F15} F16 {F16} Keypad add {ADD} Keypad subtract {SUBTRACT} Keypad multiply {MULTIPLY} Keypad divide {DIVIDE} <p>The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\".</p>"},{"location":"Guide/sending_special_keys_to_the_c/#shift-ctrl-and-alt","title":"SHIFT, CTRL and ALT","text":"<p>To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes:</p> Key Code SHIFT + CTRL ^ ALT %"},{"location":"Guide/sending_special_keys_to_the_c/#example","title":"Example","text":"<p>In this example Rapise sends various key combinations to Windows Notepad.</p> <p>Note: Global.DoSleep is used to slow down test execution and make test steps visible.</p> <p>RVL version</p> <p></p> <p>JavaScript version</p> <pre><code>// Launch notepad\nGlobal.DoLaunch(\"notepad.exe\");\n// Set focus to notepad\nActivateNotepad();\nGlobal.DoSleep(1000);\n// Send text to the application\nGlobal.DoSendKeys(\"Hello World!\");\nGlobal.DoSleep(1000);\n// Select all text by passing CTRL+a key combination\nGlobal.DoSendKeys(\"^a\");\nGlobal.DoSleep(1000);\n// Send DELETE key\nGlobal.DoSendKeys(\"{DEL}\");\nGlobal.DoSleep(1000);\n// Send two lines of text\nGlobal.DoSendKeys(\"First line{ENTER}Second line{ENTER}\");\nGlobal.DoSleep(1000);\n// Send a series of characters with SHIFT key pressed\nGlobal.DoSendKeys(\"+(abcdefg)\");\nGlobal.DoSleep(1000);\n// Close notepad\nGlobal.DoKillByPid();\n</code></pre> <p>To run RVL or JavaScript version of this example place the following function to User.js.</p> <pre><code>function ActivateNotepad()\n{\n    var wnd = g_util.FindWindow(\"regex:.*\", \"Untitled - Notepad\");\n    if (wnd)\n    {\n        wnd.SetFocus();\n    }\n}\n</code></pre>"},{"location":"Guide/sending_special_keys_to_the_c/#see-also","title":"See Also","text":"<ul> <li>How-Tos</li> </ul>"},{"location":"Guide/ses_spy_dialog/","title":"Object Spy Dialog","text":""},{"location":"Guide/ses_spy_dialog/#purpose","title":"Purpose","text":"<p>The Spy dialog is used to investigate hierarchy of UI elements in the application under test.</p>"},{"location":"Guide/ses_spy_dialog/#how-to-open","title":"How to Open","text":"<p>There are three ways to open the Spy dialog:</p> <ol> <li> <p>Click the Spy button on the toolbar</p> <p></p> </li> <li> <p>Select <code>Tools &gt; Spy</code> from the main menu</p> </li> <li> <p>Click the Spy button on the Recording Activity Dialog</p> <p>Note: If you use this method, the dialog has an extra Learn Object button.</p> </li> </ol>"},{"location":"Guide/ses_spy_dialog/#choosing-the-type-of-spy","title":"Choosing the type of Spy","text":"<p>You can change the type of Spy that will be launched by clicking on the down arrow to the right of the Spy icon in the main application toolbar:</p> <p></p> <p>There are six types of Spy available.</p>"},{"location":"Guide/ses_spy_dialog/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> </ul>"},{"location":"Guide/setting_up_selenium/","title":"Setting Up Selenium","text":"<p>This section describes the process for setting up Rapise to work with Selenium. Since Rapise is a Windows\u00ae application, you can use a single computer running Rapise to use the following web browsers:</p> <ul> <li>Google Chrome</li> <li>Microsoft Edge</li> <li>Internet Explorer</li> <li>Mozilla Firefox</li> </ul> <p>However because Safari only runs on Apple Mac computers, you will need to use two computers (a Mac running Safari) and a PC running Rapise to test using the Apple Safari web browser:</p> <p></p>"},{"location":"Guide/setting_up_selenium/#configuring-selenium-on-a-pc","title":"Configuring Selenium on a PC","text":"<p>Once you have installed Rapise on your local computer, you need to perform the following steps to configure each of the web browsers to use Selenium and Rapise:</p>"},{"location":"Guide/setting_up_selenium/#rapise-73","title":"Rapise 7.3+","text":"<p>The process of configuring Rapise for interaction with browsers via Selenium WebDriver is now fully automatic.</p> <p>Rapise downloads WebDriver executables (chromedriver.exe, geckodriver.exe, etc.) when needed, it automatically detects version of required driver executable both for standalone browsers and embedded ones (e.g. Chrome in Microsoft Teams, Skype, Microsoft Unified Service Desk, etc.). Every downloaded driver executable is saved with version information in its name. Rapise automatically switches executables based on the executed test.</p> <p>Here is an example of</p> <pre><code>c:\\ProgramData\\Inflectra\\Rapise\\SeleniumDrivers \n</code></pre> <p>folder on a machine with Rapise:</p> <p></p>"},{"location":"Guide/setting_up_selenium/#rapise-72","title":"Rapise 7.2","text":"<p>This method is applicable to all browsers except Safari.</p> <ol> <li>Open Selenium Settings Dialog</li> <li>Select the profile you need</li> <li>Configure profile settings</li> <li>Press <code>Test</code> button on the toolbar</li> </ol> <p>If Selenium driver for selected browser is not installed yet or it is not compatible with the current version of the browser then Rapise will ask you a question. If your answer is <code>Yes</code> then Rapise will download the driver executable and place it into</p> <pre><code>c:\\ProgramData\\Inflectra\\Rapise\\SeleniumDrivers \n</code></pre> <p>This is the default folder where Rapise searches for Selenium drivers.</p> <p>To run tests that use Selenium profiles on machines that do not have Selenium drivers downloaded you may add the following into <code>TestInit</code> function:</p> <pre><code>WebDriver.DownloadDriver();\n</code></pre>"},{"location":"Guide/setting_up_selenium/#see-also","title":"See Also","text":"<ul> <li>WebDriver.DownloadDriver</li> </ul>"},{"location":"Guide/setting_up_selenium/#legacy","title":"Legacy","text":""},{"location":"Guide/setting_up_selenium/#chrome","title":"Chrome","text":"<p>To use Selenium with Google Chrome, you will need to download the latest version of the Chrome Driver:</p> <p>http://chromedriver.storage.googleapis.com/index.html</p> <p>The list of versions at time of writing was:</p> <p></p> <p>When you click on the folder for the latest version you will see the various files that can be downloaded:</p> <p></p> <p>Download the chromedriver_win32.zip to your local PC.</p> <p>The file inside the zip archive is called chromedriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).</p>"},{"location":"Guide/setting_up_selenium/#firefox","title":"Firefox","text":"<p>To use Selenium with Mozilla Firefox, you will need to download the latest version of the Gecko Driver:</p> <p>https://github.com/mozilla/geckodriver/releases</p> <p>Download geckodriver-vx.xx.x-win32.zip  to your local PC.</p> <p></p> <p>The file inside the zip archive is called geckodriver.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).</p>"},{"location":"Guide/setting_up_selenium/#microsoft-edge","title":"Microsoft Edge","text":"<p>To use Selenium with Microsoft Edge, you will need to download the latest version of the Edge Driver from the Microsoft website:</p> <p>https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads</p> <p></p> <p>Create a new folder on your local PC called:</p> <p>C:\\Program Files (x86)\\Microsoft Web Driver</p> <p>Download the MicrosoftWebDriver.exe to this local folder you just created:</p> <p></p>"},{"location":"Guide/setting_up_selenium/#internet-explorer","title":"Internet Explorer","text":"<p>To use Selenium with Internet Explorer, you will need to download the latest version of the Internet Explorer IE Driver:</p> <p>http://selenium-release.storage.googleapis.com/index.html</p> <p>The list of versions at time of writing was:</p> <p></p> <p>When you click on the folder for the latest version you will see the various files that can be downloaded:</p> <p></p> <p>Download the IEDriverServer_XXXX_X.X.X.zip to your local PC:</p> <ul> <li>IEDriverServer_Win32_X.X.X.zip (for 32-bit Internet Explorer)</li> <li>IEDriverServer_x64_X.X.X.zip (for 64-bit Internet Explorer)</li> </ul> <p>The file inside the zip archive is called IEDriverServer.exe and you need to copy it into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise).</p>"},{"location":"Guide/setting_up_selenium/#chrome-for-testing","title":"Chrome for Testing","text":"<p>In 2023 Google introduced <code>Chrome for Testing</code> - a new Chrome flavor that specifically targets web app testing and automation use cases. It addresses <code>auto-update: great for users, painful for developers</code> problem. In Rapise we implemented an easy way of managing <code>Chrome for Testing</code> binaries. It allows downloading Chrome binaries as well as automatic creation of browser profiles.</p>"},{"location":"Guide/setting_up_selenium/#chrome-for-testing-dialog","title":"Chrome for Testing Dialog","text":"<p>To open <code>Chrome for Testing</code> dialog use main menu <code>Tools &gt; Chrome for Testing</code>. It will show the list of available Chrome versions. </p> <p></p> <p>The list is taken from</p> <pre><code>https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json\n</code></pre>"},{"location":"Guide/setting_up_selenium/#filters","title":"Filters","text":"<p>You may filter the list, use search tokens separated by space and Rapise will do search in text of Version and Status columns. Space serves as an AND logical operator. Let's see a few filter examples:</p> <ul> <li><code>available</code> - displays all downloaded Chrome versions,</li> <li><code>121 win64</code> - finds all 64-bit versions of Chrome with a version number that contains 121.</li> </ul>"},{"location":"Guide/setting_up_selenium/#actions","title":"Actions","text":"<ul> <li>When a <code>Not loaded</code> version is selected use <code>Download</code> button to download the binaries and create a profile. </li> <li>When an <code>Available</code> version is selected the button name changes to <code>Create Profile</code>, use it to create a profile referencing the selected Chrome version.</li> </ul>"},{"location":"Guide/setting_up_selenium/#binaries-location","title":"Binaries Location","text":"<p>Chrome binaries are downloaded into </p> <pre><code>c:\\ProgramData\\Inflectra\\Rapise\\SeleniumChrome\n</code></pre>"},{"location":"Guide/setting_up_selenium/#updating-webdriver-dlls-in-rapise","title":"Updating WebDriver DLLs in Rapise","text":"<p>If the version of WebDriver DLLs shipped with Rapise is not compatible with your browser you may update the corresponding DLLs. Just go to the main Selenium website: http://www.seleniumhq.org/download/ and then download the C# WebDriver Bindings:</p> <p></p> <p>Download the Selenium-dotnet-x.x.x.zip file from the website. Proceed to unzip the archive and then look in the net40 subfolder and extract the following two files and copy into the C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin folder (or wherever you installed Rapise):</p> <ul> <li>WebDriver.dll</li> <li>WebDriver.Support.dll</li> </ul> <p>Note: You will need to close Rapise before copying these files into the Bin folder.</p>"},{"location":"Guide/setting_up_selenium/#installing-selenium-on-a-mac","title":"Installing Selenium on a Mac","text":"<p>The reason for using Selenium running on a Mac is to be able to execute tests against the Safari web browser. So although you can also use the Mac to test with Firefox, Opera and Chrome, we do not recommend this as it adds needless complexity.</p>"},{"location":"Guide/setting_up_selenium/#safari","title":"Safari","text":"<p>The first thing you need to do is download the latest version of the Selenium server for Apple Mac computers:</p> <p>http://selenium-release.storage.googleapis.com/index.html</p> <p>The list of versions at time of writing was:</p> <p></p> <p>When you click on the folder for the latest version you will see the various files that can be downloaded:</p> <p></p> <p>Download the selenium-server-standalone-X.XX.X.jar to the Mac.</p> <p>Run this Java application by double clicking the downloaded .JAR file in Finder. This will startup the Selenium server.</p> <p>Note: You will need to have the Java (ideally the latest version) installed on the Mac first.</p> <p>You are now ready to test web applications running on Safari. The final step is to tell Rapise where it can find that instance of Selenium. To do that, open up Rapise (on your PC) and click on <code>Settings &gt; Selenium</code> and then choose Safari profile:</p> <p></p> <p>Now you need to change the Uri field to point to your Mac. The format of the URI will be:</p> <ul> <li>http://&lt;IP or DNS name of MAC computer&gt;:4444/wd/hub</li> </ul> <p>(for example it could be <code>http://test-mac01.local:4444/wd/hub</code> or <code>http://192.168.0.52:4444/wd/hub</code>)</p>"},{"location":"Guide/setting_up_selenium/#see-also_1","title":"See Also","text":"<ul> <li>Testing with WebDriver in Safari</li> </ul>"},{"location":"Guide/setting_up_web_browsers/","title":"Setting Up Web Browsers","text":"<p>Before you can use Rapise with certain web browsers to do web testing, you will need to install plugins so that Rapise can communicate with them.</p> <p>Important</p> <p>Since Rapise 7.3 it is recommended to use Selenium WebDriver based browser connectors for all web tests. Native Rapise plugins are considered outdated and should only be used for legacy tests and backward compatibility.</p>"},{"location":"Guide/setting_up_web_browsers/#internet-explorer","title":"Internet Explorer","text":"<p>Unlike the other web browsers, there are actually no steps needed to configure IE. Once Rapise is installed, it is ready to connect to IE for recording, playback and learning without any configuration steps.</p>"},{"location":"Guide/setting_up_web_browsers/#firefox","title":"Firefox","text":"<p>In order to test web applications using the Firefox web browser, you will need to install an extension for Firefox that allows Rapise to interact with it:</p> <ol> <li> <p>Click the following URL to open the extension page in a new tab: https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/</p> </li> <li> <p>Click on the <code>Add to Firefox</code> button to install the Add-On into your instance of Firefox.</p> <p></p> </li> <li> <p>When installation is complete restart Firefox.</p> </li> <li> <p>Firefox is ready to be used with Rapise for automated testing.</p> </li> </ol> <p>Note: Rapise requires localhost port 4247 to be accessible for correct operation. Please, make sure that this port is unblocked in your Firewall.</p>"},{"location":"Guide/setting_up_web_browsers/#firefox-for-rapise-65","title":"Firefox For Rapise 6.5","text":"<p>Rapise 6.5 and higher requires you to update RapiseFirefox extension. Simply click the link below and update extension to the latest version.</p> <p>https://addons.mozilla.org/en-US/firefox/addon/rapisefirefox/</p>"},{"location":"Guide/setting_up_web_browsers/#chrome","title":"Chrome","text":"<p>Important</p> <p>Chrome extension and <code>Chrome HTML</code> browser profile have been deprecated. The reason is that Google is going to remove MV2 extensions from the store . At Inflectra we decided not to migrate to MV3 extension format because it is unlikely possible due to security changes (primary reason of appearance of MV3). To make Chrome based testing possible we implemented Selenium Based Recorder . So please consider switching to Selenium - Chrome browser profile.</p> <p>In order to test web applications using the Google Chrome browser, you will need to install an extension for Chrome that allows Rapise to interact with it:</p> <ol> <li> <p>Click the following URL to open the extension page in a new tab: https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc</p> <p></p> </li> <li> <p>Click on the \u2018Add to Chrome\u2019 button to install the Add-On into your instance of Chrome.</p> </li> <li> <p>It is recommended to set the Allow access to file URLs and Allow in incognito checkboxes so that web pages opened from the local folder (using the file:// protocol) and in incognito Chrome windows can be also accessed by Rapise when running automated browser tests. To do this right click this link chrome://extensions/?id=ibngcigigdlhaekbaknfbpcbgilmhahc and choose <code>Copy link address</code>, then paste the value to a new tab in Chrome:</p> <p></p> </li> <li> <p>When installation is complete restart Chrome.</p> </li> </ol>"},{"location":"Guide/setting_up_web_browsers/#chrome-for-rapise-65","title":"Chrome For Rapise 6.5","text":"<p>Rapise 6.5 and higher requires you to update RapiseChrome extension. Simply click the link below and update extension to the latest version.</p> <p>https://chrome.google.com/webstore/detail/rapisechromeextension/ibngcigigdlhaekbaknfbpcbgilmhahc</p>"},{"location":"Guide/setting_up_web_browsers/#chromium-applications","title":"Chromium Applications","text":"<p>The Rapise extension installation procedure differs in the case of testing Chromium applications. Below are the recommended steps to enable automation for such applications:</p> <ol> <li> <p>Refer this http://www.chromium.org/administrators/pre-installed-extensions to install an extension for a Chromium application. Getting the ID of current version of the Chrome Extension is easy. Install it into a regular Chrome browser following the instructions above, and then check the information in Chrome by following this URL: chrome://settings/extensionSettings</p> </li> <li> <p>Choose the Chrome HTML library in the Select an Application for Record dialog in Rapise when recording tests rather than Auto. The Rapise library auto-detection logic may fail because the executable name is not <code>chrome.exe</code>.</p> </li> <li> <p>After following the steps below to modify the Windows registry, Rapise should be able to record and learn the application correctly.</p> <p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\path\\</p> <p>TYPE: REG_SZ</p> <p>VALUE: \"C:\\path\\to\\your\\RapiseChrome.crx\"</p> <p>HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb\\version\\</p> <p>TYPE: REG_SZ</p> <p>VALUE: \"1.6.0\"</p> </li> <li> <p>For the playback to execute correctly you need to set the following line in the beginning of your <code>User.js</code> file:</p> </li> </ol> <pre><code>    g_browserExecutablePath='C:\\\\the\\\\path\\\\to\\\\chromium-based\\\\app.exe';\n</code></pre> <p>With that change in place, the recorded test should be able to play.</p>"},{"location":"Guide/setting_up_web_browsers/#chrome-frame-applications","title":"Chrome Frame Applications","text":"<p>The following configuration enables testing of Chrome Frame applications by Rapise:</p> <ol> <li> <p>A \u2018packed\u2019 copy of the RapiseChrome.crx extension is provided with the Rapise installation. It can be located in the </p> <p><code>C:\\\\Program Files (x86)\\\\Inflectra\\\\Rapise\\\\Extensions\\\\Chrome</code></p> <p>folder of your installation.</p> </li> <li> <p>Enter the following data to the Windows registry:</p> <p>[HKEY_CURRENT_USER\\Software\\Google\\ChromeFrame]</p> <p>\"EnableGCFProtocol\"=dword:00000001</p> <p>\"IsDefaultRenderer\"=dword:00000001</p> <p>\"AllowUnsafeURLs\"=dword:00000001</p> <p>[HKEY_LOCAL_MACHINE\\SOFTWARE\\Google\\Chrome\\Extensions\\malnpehoofemabajdignefgdoppndaeb]</p> <p>\"path\"=\"c:\\\\path\\\\to\\\\RapiseChrome.crx\"</p> <p>\"version\"=\"1.6.0\"</p> </li> <li> <p>In the Rapise Select Application to Record dialog box, explicitly choose the Chrome HTML library rather than using Auto.</p> </li> <li> <p>Record the test script as you would normally. Note that there should be no Chrome browser or any Chrome applications running when IE with Chrome Frame is started and recording is being performed.</p> </li> </ol> <p>You will need to make some changes to the recorded test to ensure that it plays correctly. Insert this line in the beginning of the <code>User.js</code> file:</p> <pre><code>g_browserExecutablePath=\"iexplore.exe\";\n</code></pre> <p>Check to make sure you have Internet Explorer browser executable available at the specified path on your PC and correct it if necessary.</p>"},{"location":"Guide/setting_up_web_browsers/#edge","title":"Edge","text":"<p>In order to test web applications using the Microsoft Edge browser, you will need to install an extension for Edge that allows Rapise to interact with it:</p> <ol> <li> <p>Right click the following URL and choose <code>Open link in new tab</code> to open the extension page: https://microsoftedge.microsoft.com/addons/detail/rapisemsedgeextension/ohghmiancfhdndeciiojhgalcfhllblh</p> </li> <li> <p>Click on the \u2018Get\u2019 button to install the Add-On into your instance of Edge.</p> </li> <li> <p>It is recommended to set the Allow in InPrivate and Allow access to file URLs checkboxes so that web pages opened from the local folder (using the file:// protocol) and in InPrivate Edge windows can be also accessed by Rapise when running automated browser tests. To do this right click this link edge://extensions/?id=ohghmiancfhdndeciiojhgalcfhllblh and choose <code>Copy link</code>, then paste the value to a new tab in Edge.</p> </li> <li> <p>When installation is complete restart Edge.</p> </li> </ol>"},{"location":"Guide/setting_up_web_browsers/#using-other-browsers-with-rapise","title":"Using Other Browsers with Rapise","text":"<p>If you would like to test your applications using other web browsers (Safari or Opera) you can use the Selenium WebDriver libraries that are provided with Rapise. To setup the Selenium web browser libraries, please refer to this topic.</p>"},{"location":"Guide/settings_dialog/","title":"Test Settings View","text":""},{"location":"Guide/settings_dialog/#purpose","title":"Purpose","text":"<p>Use the Settings Dialog to change Test-specific settings.</p>"},{"location":"Guide/settings_dialog/#how-to-open","title":"How to Open","text":"<p>Use <code>Test &gt; Test Settings</code> menu item to open settings in the expandable dialog window.</p> <p>Another way is to choose root node in the file view to see test settings in the property view.</p>"},{"location":"Guide/settings_dialog/#advanced","title":"Advanced","text":"<ul> <li> <p>CommandLine is a freeform text box. \u00a0Use it to specify values for global variables (beginning in g_) to pass the recorder and player. \u00a0You can view which global variables are available in the source files (such as Player.js, SeSCommon.js, etc).</p> </li> <li> <p>EntryPoint JavaScript function name (<code>g_entryPointName</code> variable) used as a test entry point. Normally <code>Test</code>, however it may be changed to execute a single scenario, i.e.: <code>MyScenario</code>.</p> </li> <li> <p>WorkDir Defines test root directory (<code>%WORKDIR%</code> environment variable) relative to this test's folder.</p> <p>Usually it is equal to <code>.</code> (root test). In the sub-test it is <code>../.</code>, in sub-sub-test it is <code>../../.</code>. This way if you have common scenario used across tests and it refers to a data file using <code>%WORKDIR%\\Data.xlsx</code> then all sub-tests will be able to find it. This feature together with a concept of sub-tests help to build test frameworks.</p> </li> <li> <p>CommandLine is a freeform text box. \u00a0Use it to specify values for global variables (beginning in g_) to pass the recorder and player. \u00a0You can view which global variables are available in the source files (such as Player.js, SeSCommon.js, etc).</p> </li> </ul>"},{"location":"Guide/settings_dialog/#testparams","title":"TestParams","text":"<p>The TestParams section includes various custom test parameters:</p> <p>Click to open the TestParams Collection Editor Dialog.</p> <p>There is a build-in set of test parameters for cross-browser testing. When you open up a test that uses one of the HTML libraries it will display the following built-in test parameter that you can use to change the playback browser:</p> <p></p>"},{"location":"Guide/settings_dialog/#execution","title":"Execution","text":"<ul> <li>CacheObjects: Remember object locations and try to reuse them for speed. \u00a0This is helpful with dialog based applications.</li> <li>CommandInterval: Time interval (in milliseconds) between script commands during script execution.</li> </ul> <ul> <li>IterationsCount: Your test script will be executed this many times consecutively during Playback.</li> <li>JS Engine: one of Default, Node, WScript. Where Default means use JSEngineType defined in the Global Options. Otherwise use nodejs or JScript/WScript engine correspondingly.</li> <li>ObjectLookupAttemptInterval: This is the time Rapise will wait between attempts to locate an object.</li> <li>ObjectLookupAttempts: This is the number of times Rapise will attempt to locate an object.</li> <li>Show Report: Display report after execution. Default is True.</li> <li>StopOnError: Terminate script execution after the first error. So failing test cases fail quicker. Default is True.</li> </ul>"},{"location":"Guide/settings_dialog/#recording","title":"Recording","text":"<ul> <li> <p>BeautifySavedObjects affects how the Script Recorder writes object information to your test script. \u00a0If False, the object definition will be written as a single line, if True, the object definition will be written in a manner that takes more space, but is easier to read and change.</p> <p>Objects that were learned in previous recordings are affected by the value of BeautifySavedObjects.</p> </li> </ul>"},{"location":"Guide/settings_dialog/#screen-capture","title":"Screen Capture","text":"<ul> <li>Capture Cursor: Set this to True if you want to include cursor position marker on the captured screenshot.</li> <li>Capture Execution: Set this to True if you want to save screen images after each <code>Do&lt;Action&gt;</code> during playback.</li> <li>Capture Recording: Set this to True if you want to save screen images after each recorded action during recording.</li> <li>Include in Report: Set this to True to include the saved images in the execution report during playback.</li> <li>Screenshot on Failure: Capture desktop image if a test has just failed.</li> <li>Widget Only: Set this to True to only save the widget area in the screenshot, as opposed to the whole window.</li> </ul>"},{"location":"Guide/settings_dialog/#settings","title":"Settings","text":"<ul> <li>UserFunctionsPath: Path (relative to the test directory) to the file with user-defined functions utilized in this test. \u00a0Normally this file has name in form <code>User.js</code>.</li> <li>ObjectsPath: Path (relative to the test directory) to file containing object tree information. This file contains <code>saved_script_objects</code> structure with all object locators gathered during recording and learning. Normally this file has name in form <code>Objects.js</code>.</li> <li>ReportPath: Path (relative to the test directory) to the test's report file. Normally this file has extension form <code>.trp</code> which stands for **T**est **R**eport.</li> <li>ScriptPath: Path (relative to the test directory) to the test script.</li> <li>TestPath: Path to the test definition file (<code>*.sstest</code>).</li> </ul>"},{"location":"Guide/simulated_objects/","title":"Simulated Objects","text":""},{"location":"Guide/simulated_objects/#purpose","title":"Purpose","text":"<p>During normal recording, Rapise Learns about the Objects you interact with. \u00a0If, for some reason, Rapise cannot learn an object, you can create a Simulated Object. \u00a0Rapise identifies a simulated object by its location in the Window or Dialog and can perform certain generic actions on it, such as <code>Click</code> and <code>SendKeys</code>. \u00a0This works in the reverse sense also. \u00a0That is, if Rapise cannot identify an object, or, for example, you click outside any defined object in the AUT's UI, Rapise will create a simulated object to represent the action.</p>"},{"location":"Guide/simulated_objects/#value","title":"Value","text":"<p>Not all objects on a screen are standard or can be recognized by the libraries loaded. \u00a0Some are compound objects, consisting of two or more individual objects that work together to deliver a UI effect or behaviour. \u00a0Simulated objects fill in the blanks to allow Rapise to cause an event outside the normal set of objects.</p>"},{"location":"Guide/simulated_objects/#see-also","title":"See Also","text":"<ul> <li>Recording Activity Dialog</li> <li>Sample Tests: The SimulatedObject sample.</li> <li>Deal with a Simulated Object</li> </ul>"},{"location":"Guide/soap_definition_editor/","title":"SOAP Definition Editor","text":""},{"location":"Guide/soap_definition_editor/#purpose","title":"Purpose","text":"<p>The SOAP Definition Editor allows you to edit SOAP web service definition files (<code>.soap</code>) that contain data downloaded from SOAP Web Service Definition Language (WSDL) URLs.</p>"},{"location":"Guide/soap_definition_editor/#how-to-open","title":"How to Open","text":"<p>Use the Add Web Service Dialog to create a new SOAP definition (<code>.soap</code>) file. \u00a0The definition file will be opened in a SOAP Editor in the Content View.</p> <p>Or, you can double-click on an existing .soap file in the Test Files View explorer window. \u00a0The definition file will be opened in a SOAP Editor in the Content View. \u00a0The SOAP Toolbar will also open.</p>"},{"location":"Guide/soap_definition_editor/#invoke","title":"Invoke","text":"<p>The invoke tab lets you visually choose a specific SOAP operation and execute it. It has the following sections:</p> <ul> <li> <p>Input - You can expand the various SOAP operations and see the input headers and body parameters that need to be sent to the function. You can click on each parameter and supply a value on the right-hand pane.</p> </li> <li> <p>Output - You can expand the various SOAP operations and see the output headers and result that should be returned from the operation (if successful). You can click on each header or the body and see the type of data returned.</p> </li> <li> <p><code>Invoke</code> - Once you have supplied the appropriate values, click the Invoke button send the SOAP request and get the data back from the request.</p> </li> <li> <p><code>Record</code> - Clicking this button after a successful invoke of the operation will add it to the list of recorded test scripts shown in the SOAP Script Steps output tab.</p> </li> <li> <p><code>Verify</code> - Clicking this button after the Record will add a <code>Tester.Assert(...)</code> verification checkpoint to the recorded test script. This will make Rapise automatically verify all of the returned values.</p> </li> </ul>"},{"location":"Guide/soap_definition_editor/#request-response","title":"Request / Response","text":"<p>This tab displays the raw SOAP XML request and response. When a SOAP operation fails, this is useful when debugging since it lets you see the raw data being sent to the web service:</p> <p></p> <p>Typically you will want to view this information in either Raw or XML modes since SOAP doesn't support JSON as a serialization format.</p> <p></p>"},{"location":"Guide/soap_definition_editor/#response","title":"Response","text":"<p>The HTTP Response in SOAP XML format is formatted and displayed in the bottom section:</p> <p></p> <p>This displays the output from the last web service request. It has several tabs:</p> <ul> <li>Response Header</li> <li>Response Body</li> <li>SOAP Script Steps</li> </ul>"},{"location":"Guide/soap_definition_editor/#response-header","title":"Response Header","text":"<p>Displays a list of the HTTP response headers (name and value). If the request received a 200 OK code back, it's displayed in green, if it receives an error code back, it's displayed in red.</p> <p></p>"},{"location":"Guide/soap_definition_editor/#response-body","title":"Response Body","text":"<ul> <li> <p>Raw - Displays the raw text of the HTTP response body received from the server.</p> </li> <li> <p>XML - If the received body content is identified as XML, this tab displays nicely formatted XML that is easier to read than the raw response body.</p> </li> </ul>"},{"location":"Guide/soap_definition_editor/#soap-script-steps","title":"SOAP Script Steps","text":"<p>The Script Steps tab lets you see the list of recorded SOAP operations and use them to create your test script in the main test file.</p> <ul> <li> <p>Create Script - This takes all of the recorded steps and automatically creates the matching JavaScript code in your test script.</p> </li> <li> <p>Remove Step - This removes the recorded step from the script box</p> </li> <li> <p>Clean - This removes all of the recorded steps from the script box.</p> </li> </ul> <p>Each of the steps displayed in the script box will contain the name of the SOAP operation along with the specified parameters in JSON format. Steps displayed in bold with an asterisk also have a verification point recorded. That means when the script is generated, it will include <code>Tester.Assert</code> functions to verify the results.</p>"},{"location":"Guide/soap_definition_editor/#operation-explorer","title":"Operation Explorer","text":"<p>This section lets you see all of the SOAP web service endpoints in the current WSDL file and view the individual operations.</p>"},{"location":"Guide/soap_definition_editor/#see-also","title":"See Also","text":"<ul> <li> <p>For more info on SOAP Web Services, see SOAP Web Services.</p> </li> <li> <p>For a tutorial on creating a SOAP web service test, see the Web Services SOAP Tutorial.</p> </li> </ul>"},{"location":"Guide/soap_web_services/","title":"Testing SOAP Web Services","text":""},{"location":"Guide/soap_web_services/#what-is-soap-and-what-is-a-soap-web-service","title":"What is SOAP and what is a SOAP web service?","text":"<p>SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL.</p> <p>SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent.</p>"},{"location":"Guide/soap_web_services/#how-does-rapise-test-soap-web-services","title":"How does Rapise test SOAP web services?","text":"<p>Creating a SOAP web service test in Rapise consists of the following steps:</p> <ol> <li> <p>Using the SOAP test studio to create the various SOAP web service test actions and verify that they return the expected data in the expected format.</p> </li> <li> <p>Saving each of these SOAP API functions as Rapise learned objects.</p> </li> <li> <p>Generating the test script in Javascript that uses the learned Rapise web service objects.</p> </li> </ol>"},{"location":"Guide/soap_web_services/#rapise-soap-testing-studio","title":"Rapise SOAP Testing Studio","text":"<p>When you add a SOAP web service to your Rapise test project, you get a new SOAP definition file (<code>.soap</code>) that will store all of the test invocations against a specific SOAP web service:</p> <p></p> <p>The SOAP test studio (illustrated above) works by connecting to the WSDL location that you specify in the Endpoint part of the Toolbar:</p> <p></p> <p>When you enter in the URL to your SOAP Web Service WSDL file and click <code>Get WSDL</code>, Rapise will download the WSDL file and display the list of available methods in the SOAP explorer:</p> <p></p> <p>Clicking on one of the available methods (e.g. \"Connection_Authenticate\") will display that method in the main SOAP editor. Normally you will start using the Invoke tab of the SOAP editor:</p> <p></p> <p>This is where you can tell Rapise to invoke the method, pass any expected parameters and view the response from the service.</p> <p>If the SOAP method expects input parameters, they will be displayed in the \"Body\" section of the Input in a treeview. You can expand the tree and fill in the various values. In the example above, we have passed the login and password as parameters.</p> <p></p> <p>When you click the <code>Invoke</code> button, Rapise will send the SOAP request to the API and display the returned output in the Output section. In this case we get the value \"True\" back, indicating that our authentication request was successful.</p> <p></p> <p>You can also click on the Request/Response tab to view the raw SOAP XML that was sent to and from the server. This is very useful when debugging a service that does not work as expected.</p> <p></p>"},{"location":"Guide/soap_web_services/#web-service-object-recognition","title":"Web Service Object Recognition","text":"<p>Unlike the REST web service testing editor, each SOAP endpoint will generate a single Rapise SOAP object in the object tree: </p> <p>The object WebServicesSOAP maps to a corresponding <code>.soap</code> file in the Rapise project. Such an object can be used for all of the web service requests in that file:</p> <pre><code>var WebServicesSOAP=SeS('WebServicesSOAP');\nWebServicesSOAP.DoExecute('Connection_Authenticate', { \"userName\": \"librarian\", \"password\": \"librarian\"}, {} );\nWebServicesSOAP.DoExecute('Book_Retrieve');\nWebServicesSOAP.DoVerify('\"Body.result.length\" Response', \"Body.result.length\", 14);\nWebServicesSOAP.DoExecute('Book_Insert', { \"book\": { \u00a0 \"Author\": {\"Name\": \"\"}, \"AuthorId\": 2, \"AuthorIdSpecified\": true, \"DateAddedIso\": \"2016-10-02T20:00:00\", \"Genre\": {\"Name\": \"\" }, \"GenreId\": 3, \"GenreIdSpecified\": true, \u00a0 \"Id\": 0, \u00a0 \"IdSpecified\": false, \u00a0 \"IsOutOfPrint\": false, \u00a0 \"IsOutOfPrintSpecified\": false, \u00a0 \"Name\": \"A Christmas Carol\" }} );\nLog(\"Resp: \"+WebServicesSOAP.RequestProperties.requestPayLoad);\n</code></pre> <p>In the example above, the same object \"WebServicesSOAP\" is being used with <code>DoExecute</code> with different SOAP methods passed as the first parameter (\"Connection_Authenticate\", \"Book_Retrieve\", \"Book_Insert\").</p>"},{"location":"Guide/soap_web_services/#generating-rapise-soap-test-scripts","title":"Generating Rapise SOAP Test Scripts","text":"<p>To save time, Rapise can generate the test scripts code automatically for you (instead of having to write it by hand). To do that, after you have verified that a particular method works as expected, when you click the Invoke command, then click the <code>Record</code> button to record the step, and if you want to verify the data returned, also click on the <code>Verify</code> button. That will generate the following:</p> <p></p> <p>The steps recorded will be in bold type if they include a verification step, and will be in normal type if they are simply invoked with no verification. When you click the <code>Create Script</code> button, the following will be generated:</p> <pre><code>WebServicesSOAP.DoExecute('Connection_Authenticate', {\"userName\":\"librarian\",\"password\":\"librarian\"});\nTester.Assert('Connection_Authenticate Response', WebServicesSOAP.GetResponseObject(), {\"Body\":{\"Connection_AuthenticateResult\":true,\"Connection_AuthenticateResultSpecified\":true},\"Headers\":{}});\nWebServicesSOAP.DoExecute('Book\\_Retrieve', {});\nTester.Assert('Book_Retrieve Response', WebServicesSOAP.GetResponseObject(), { ... });\nWebServicesSOAP.DoExecute('Connection_Disconnect', {});\n</code></pre> <p>The script is always generated within the <code>Test()</code> function of the current <code>Main.js</code> file. The term current refers to the <code>Main.js</code> file of the test, test case, or Page Object / Module to which this <code>.soap</code> definition belongs.</p> <p>In the case of a Page Object, you would need to cut the generated code from <code>Test()</code> and paste it into the corresponding <code>&lt;PageObject&gt;_DoAction</code> function.</p>"},{"location":"Guide/soap_web_services/#playback-of-soap-tests","title":"Playback of SOAP Tests","text":"<p>Once you have created your SOAP web service tests, you can use the standard Playback functionality in Rapise to execute your test and display the report: </p>"},{"location":"Guide/source_editor/","title":"Source Editor","text":""},{"location":"Guide/source_editor/#purpose","title":"Purpose","text":"<p>To display and edit javascript files. \u00a0The editor supports Syntax Highlighting, Syntax Checking, Code Folding and Code Completion.</p>"},{"location":"Guide/source_editor/#how-to-open","title":"How to Open","text":"<p>Use the Test Files View to open a javascript file. \u00a0The javascript file will be opened in a Source Editor, in the Content View. \u00a0The Edit Popup of the Main Menu will also be populated with text editor-specific options.</p>"},{"location":"Guide/source_editor/#code-formatting","title":"Code Formatting","text":"<p>Since Rapise 8.1 it is possible to automatically format a JavaScript document:</p> <ol> <li>Make the document active.</li> <li>Use menu <code>Edit &gt; Format Document</code>.</li> </ol> <p>The formatting is performed via js-beaitify. The default configuration is taken from the built-in file <code>C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\InstrumentJS\\jsbeautify.config.json</code>.</p> <p>You can apply custom formatting rules by saving a configuration into a file <code>jsbeautify.config.json</code>. To override formatting rules, you can either store jsbeautify.config.json in the root folder of your testing framework and save it together with your framework, or save it as <code>c:\\Users\\Public\\Documents\\Rapise\\jsbeautify.config.json</code>. If you save it in this location, it will be applied for any formatted document (except those that have per-framework configuration).</p>"},{"location":"Guide/source_editor/#ontextsavedcmd","title":"OnTextSaved.cmd","text":"<p>This feature enables post-processing of the saved text files. This may be achieved by defining a file <code>OnTextSaved.cmd</code>.</p> <p>This file may be stored either common folder:</p> <p><code>c:\\Users\\Public\\Documents\\Rapise\\OnTextSaved.cmd</code></p> <p>Or in the root of current test framework.</p> <p>The cmd file receives the following inputs</p> <ul> <li><code>%1</code> - file path (c:\\Path\\To\\Test\\File.js)</li> <li><code>%2</code> - test working directory (c:\\Path\\To\\Test)</li> </ul> <p>Also Rapise sets two environment variables:</p> <ul> <li><code>%SHIFT_PRESSED%</code> is <code>yes</code> when user presses Shift key</li> <li><code>%CONTROL_PRESSED%</code> is <code>yes</code> when user presses Ctrl key</li> </ul> <p>You may find an example of configured <code>OnTextSaved.cmd</code> used to beautify a JavaScript file. </p> <p>If <code>.cmd</code> modifies the file, Rapise editor would immediately reload it.</p> <p>If <code>.cmd</code> produces any output, it would be reflected in the Rapise output view.</p> <p>If <code>.cmd</code> file produces any errors, these are reflected in the warnings view.</p> <p>You may find real live example of <code>OnTextSaved.cmd</code> at https://github.com/Inflectra/rapise-powerpack/tree/master/JSBeautify.</p> <pre><code>if \"%SHIFT_PRESSED%\"==\"yes\" (\n    if \"%~x1\"==\".js\" (\n        @call \"%~dp0node_modules\\.bin\\js-beautify.cmd\" -r --config \"%~dp0jsbeautify.config.json\" %1 &gt;OnTextSaved.log 2&gt;&amp;1\n    )\n)\n</code></pre>"},{"location":"Guide/source_editor/#onsavecmd","title":"OnSave.cmd","text":"<p>This file enables additional post-processing of the saved text files. It follows same rules as <code>OnTextSaved.cmd</code>. For example, you may use it to add new files to Git and commit changes on save:</p> <pre><code>git add * &gt;&gt;gitadd.log\ngit commit -a -m \"Autosave\" &gt;&gt;gitcommit.log\n</code></pre>"},{"location":"Guide/spira_dashboard/","title":"Spira Dashboard","text":"<p>Important</p> <p>In Rapise 7 we've updated the dashboard. It now has all new look and features. Learn more.</p>"},{"location":"Guide/spira_dashboard/#purpose","title":"Purpose","text":"<p>This page displays information from the SpiraTest or SpiraTeam server that this instance of Rapise is connected to. More details on using Rapise with either SpiraTest or SpiraTeam can be found in the separate Using Rapise with SpiraTest Guide. A copy of this guide should be in the <code>Start &gt; Programs</code> menu created by the Rapise installer.</p> <p>The dashboard displays information about the current Spira project, including the associated test cases, test sets and automation hosts:</p> <p>A typical Spira dashboard will look like the following:</p> <p></p> <p>Each of the sections is explained separately below:</p>"},{"location":"Guide/spira_dashboard/#spira-loginsign-up","title":"Spira Login/Sign-Up","text":"<p>This section will display the name of the currently configured Spira user (if there is one) together with the option to either login to an existing Spira instance or to sign-up for a new one:</p> <p></p> <ul> <li>Login: this will log you into the instance of Spira listed in the Connection Info section</li> <li>Sign Up: this link will take you to the Inflectra website where you can sign up for a Spira account.</li> <li>Auto Login: if you select this option, Rapise will automatically login to Spira when it first starts up.</li> </ul> <p>Once you login to the instance of Spira, the widget will change to the following:</p> <p></p> <ul> <li>Logout: this will log you out of the instance of Spira listed in the Connection Info section</li> </ul>"},{"location":"Guide/spira_dashboard/#connection-info","title":"Connection Info","text":"<p>This section will display the URL, login and corresponding local repository folder for the current Spira instance (if one has been set).</p> <p></p> <p>To change the current connection (or to set one up if this is a new installation of Rapise), click on the [Edit Connection Settings] button. That will display the Connection Settings dialog box:</p> <p></p> <p>You can then change the current Spira connection using this dialog box. See the topic on Spira Integration for more details.</p>"},{"location":"Guide/spira_dashboard/#automation-hosts","title":"Automation Hosts","text":"<p>This section will display a list of the automation hosts available in the currently selected Spira project:</p> <p></p> <p>An automation host is a notional computer that Spira uses to assign specific test sets to specific computers running Rapise. This allows you to schedule tests to run on different computers remotely. When you first connect to Spira, it will not know which automation host the current machine matches.</p> <p>Using the dropdown list you can select one of the displayed automation hosts:</p> <p></p> <p>That will tell Rapise that this local computer is in fact this Spira automation host. Any test sets scheduled in Spira for this automation host will now be executed on this computer running Rapise.</p> <p>If you don't see the current automation host listed, you can click on the Create Host for this Machine button to create a new automation host entry for the current computer:</p> <p></p> <p>This screen lets you enter a display name (Name), system name (Token) and long description for a new automation host that Rapise will create in the current Spira project. Click [OK] to confirm the new automation host.</p>"},{"location":"Guide/spira_dashboard/#test-cases","title":"Test Cases","text":"<p>This section displays a list of test cases that are either created by the current Spira user or are assigned to the current Spira user:</p> <p></p> <p>Each test cases will be displayed with the ID, name and long description of the test case together with an icon that indicates the type of test case:</p> <ol> <li> - Manual test case that has no automation script attached.</li> <li> - Test case that has an existing Rapise test attached.</li> <li> - Test case that has a non-Rapise automation script attached.</li> </ol> <p>Clicking on the hyperlink ID will open up the test case inside Spira in your web browser. For test cases that have a linked Rapise test, there will be an Open button available. Clicking on this button will open the test in Rapise. For test cases that do not have a linked Rapise test, there is the Save As... option that lets you save the current Rapise script against the test case.</p> <p>In addition there are two other options available:</p> <ul> <li> <p>Create Test Set: Clicking on this button will allow you to create a new test set inside Spira. It will display the following dialog box when you select at least one test case and click the button:</p> <p></p> <p>Enter in the name of the test set you want to create and click [OK].</p> </li> <li> <p>Add to Test Set: When you select at least one test case and one test set, then click this button it will add the selected test cases to a specific test set.</p> </li> </ul>"},{"location":"Guide/spira_dashboard/#test-sets","title":"Test Sets","text":"<p>This section displays a list of test set that are either created by the current Spira user, are assigned to the current Spira user, or are assigned to the automation host that this instance of Rapise is installed on:</p> <p></p> <p>Each test set will be displayed with the ID, name and long description of the test set. Clicking on the hyperlink ID will open up the test set inside Spira in your web browser. For test sets that are marked as automated, there will be an Execute button available. Clicking on this button will execute the test in RapiseLauncher. This is described in more detail in the SpiraTest Integration topic.</p>"},{"location":"Guide/spira_dashboard_2/","title":"Spira Dashboard","text":"<p>In Rapise 7 we completely reworked the Spira Dashboard. It has all new look and features. New dashboard reduces the need to open Spira in a browser window and also adds support for Flaky test handling, Rerun features and ability to run a test case/whole test set/or just failed test cases on a selected automation host.</p> <p></p> <p>In Rapise 8 we added the Framework mode that has a different set of pages in the dashboard:</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#features","title":"Features","text":"<p>If you are not familiar with the dashboard and it's basic features it is recommended to review Navigation and Tasks sections first.</p>"},{"location":"Guide/spira_dashboard_2/#flaky-tests","title":"Flaky Tests","text":"<p>Important</p> <p>To enable this feature setup custom properties as described below.</p> <p>If you see that some test may pass or fail randomly there is a way to mark it as Flaky. Simply find it in Test Cases View and use Actions menu to set the flag. Flaky test case is decorated with an icon (red flag):</p> <p> </p> <p>When a test case marked as Flaky is executed - it's test run is marked as Flaky too.</p> <p></p> <p>Note</p> <p>Flaky flag makes it easier to distinguish random and important test run failures.</p>"},{"location":"Guide/spira_dashboard_2/#automatic-rerun","title":"Automatic Rerun","text":"<p>Important</p> <p>To enable this feature setup custom properties as described below.</p> <p>To instruct RapiseLauncher to rerun a failed test case use Max rerun attempts test set custom property. If a test case keeps failing it will be additionally executed specified number of times (by default it is zero). To stop rerunning tests if many of them finally failed use Do not rerun if N tests failed property. By default this property is zero and it means rerun all the tests in a test set if Max rerun attempts is set.</p> <p></p> <p>Test runs that correspond to reruns are decorated with icons. Number in a circle designates rerun attempt. </p> <p></p>"},{"location":"Guide/spira_dashboard_2/#parallel-execution","title":"Parallel Execution","text":"<p>Important</p> <p>To enable this feature setup custom properties as described below.</p> <p>Since Rapise 7.1 - RapiseLauncher is able to perform parallel run for these types of tests:</p> <ol> <li>Web tests configured to run with Selenium WebDriver,</li> <li>Mobile tests,</li> <li>REST/SOAP API tests.</li> </ol> <p>In order to mark a test case ready for parallel run set the custom property Ready for parallel run in test case details.</p> <p></p> <p>If all test cases included into a test set have this property, the test set is configured for parallel run - RapiseLauncher will execute the test cases in parallel.</p> <p>To configure the test set use the custom properties Run tests in parallel and Max parallel tests (0 - no limit).</p> <p>Since Rapise 7.2 - RapiseLauncher can run configurations (see Input Data Table section below) in parallel. This feature is controlled via Unroll input data for parallel execution custom property of a test set. See the Parallel Execution Webinar for more details.</p>"},{"location":"Guide/spira_dashboard_2/#input-data-table","title":"Input Data Table","text":"<p>Important</p> <p>To enable this feature setup custom properties as described below.</p> <p>Since Rapise 7.1 you may define a table with parameter values to automatically run same test set with different input data. It is an alternative to test configurations.</p> <ol> <li> <p>Create a CSV or TXT file with parameter names and values. You may do it right from the dashboard (navigate to test set details and use Create New popup menu in the Attachments section). Example of the data file:</p> Data.csv<pre><code>UserName,Password\nlibrarian,librarian\nborrower,borrower\n</code></pre> </li> <li> <p>Choose this attachment in the Input data custom property.</p> </li> </ol> <p>RapiseLauncher will run the test set same number of times as data rows in the input file. Every column name will become a global parameter passed to a test case.</p> <p>Note</p> <p>Besides attachments there is an option to use a file stored in the same Git repository as the testing framework. You may type a path to it in the <code>Input data</code> custom property. The path should contain <code>%GITROOT%</code> placeholder, e.g.:</p> <pre><code>%GITROOT%\\Data\\Logins.xlsx\n</code></pre>"},{"location":"Guide/spira_dashboard_2/#test-matrix","title":"Test Matrix","text":"<p>If a Test Set is configured to run same Test Cases several times (each time with different input parameters) then one may view the Test Matrix based on produced Test Runs. Let's look at the example. Assume that we have a test set of 5 test cases that we want to run on 2 different browsers. Browser type is specified via an input parameter (see Input Data Table section above for more details). Execution of the test set produces 4 x 2 = 10 test runs. After execution we find one of these test runs on the Test Runs page, right click it and choose <code>Test Matrix</code> menu item. Then we see the matrix:</p> <p></p> <p>If there are more than one input parameter - it is possible to select the one you need from the dropdown. Clicking on a test case reveals the history of test runs for it (clickable).</p>"},{"location":"Guide/spira_dashboard_2/#test-set-execution-plan","title":"Test Set Execution Plan","text":"<p>Since Rapise 7.3 you may view an execution plan for any test set. Navigate to Test Sets page in the dashboard, find the test set you need, expand Action menu for it (last column) and choose <code>Show Execution Plan...</code> menu item. Rapise will open a dialog with the execution plan for selected test set. In the execution plan you may see:</p> <ul> <li>Sequence of execution of test cases included into the test set</li> <li>Parameter values that will be passed to a test case by RapiseLauncher (all columns to the right of <code>Test Case</code> column)</li> <li>Parallelism level:<ul> <li>Sequential - all test cases are executed sequentially, all configurations are executed sequentially too.</li> <li>Parallel - all test cases are executed in parallel for each configuration, configurations are executed sequentially. In this case second column || is colored with green.</li> <li>Parallel configurations - all test cases and configurations are executed in parallel. In this case first column ||| is colored with green.</li> </ul> </li> </ul> <p></p>"},{"location":"Guide/spira_dashboard_2/#test-set-scheduling","title":"Test Set Scheduling","text":"<p>Since Rapise 7.4 you may schedule a test set directly from the dashboard. Navigate to Test Sets page in the dashboard, find the test set you need, expand Action menu for it (last column) and choose <code>Schedule...</code> menu item. Rapise will open a dialog with scheduling options for selected test set. In the dialog you may specify:</p> <ul> <li>Date/time of execution</li> <li>Recurrence (One Time, Daily, etc.)</li> <li>Automation Host</li> </ul> <p></p>"},{"location":"Guide/spira_dashboard_2/#csv-editor","title":"CSV Editor","text":"<p>Since Rapise 7.3 you may use convenient CSV editor to create and change Test Set attachments, especially those used as Input Data Table.</p> <p></p> <p>To view a CSV attachment there is no need to open it, just place mouse pointer over the attachment name:</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#git-credentials-storage","title":"Git Credentials Storage","text":"<p>Since Rapise 7.3 it is possible to share Git credentials between test sets. If you used Rapise, SpiraTest and Git together then you know that it was necessary to provide Git credentials for each test set. Now you can create Git credentials records via the dashboard and reference them in test sets.</p> <p>On the <code>Test Sets</code> page find <code>Git Credentials</code> button at the top and click on it.</p> <p>Note</p> <p>In Rapise versions lower than 8.0 find <code>Git Credentials</code> button at the bottom of the main dashboard page. </p> <p>You will see the dialog with configured Git credentials. If you are doing it for the first time - the dialog will be empty.</p> <p></p> <p>In the dialog one can add, edit and remove credentials. A set of credentials looks like this:</p> <p></p> <p>When credentials are tested and saved it is time to navigate to a test set and choose the credentials in the Git Credentials dropdown.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#how-to-open","title":"How to Open","text":"<p>To open the dashboard use main menu View &gt; Spira Dashboard. If you wish Rapise to open the dashboard automatically on startup - open the Rapise Settings dialog and set <code>ShowDashboardOnStartup</code> flag to <code>true</code>.</p>"},{"location":"Guide/spira_dashboard_2/#navigation","title":"Navigation","text":"<p>The dashboard contains top level menu to switch between views and a dropdown to switch between products/projects. There is also a button to refresh data and search field to filter data in the current view. Filtering is applied to a column with orange caption (usually <code>Name</code>).</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#data-tables","title":"Data Tables","text":"<p>In many cases first column of a data table contains ID of an item in Spira. You may click an ID to expand the corresponding item.</p> <p>Note</p> <p>In Rapise 7.3 and older clicking on ID opens corresponding item in a browser. To open an item in Rapise 7.4+ use Action column menu (Open in Spira).  </p> <p></p> <p>Each data table has a menu opener (hamburger) located in the top right corner. The menu contains some predefined filters and also allows to reveal filter row and choose what columns to show (since Rapise 7.2 the list of columns to show is stored in the dashboard settings). Clicking a column caption turns on sorting.</p>"},{"location":"Guide/spira_dashboard_2/#hierarchical-tables","title":"Hierarchical Tables","text":"<p>Many tables in the dashboard are hierarchical, clicking on item icon or item ID expands corresponding row and reveals nested items or item details.</p> <p>Note</p> <p>If you have Rapise 7.3 or older use <code>plus</code>/<code>minus</code> icons to expand/collapse.</p> <p></p> <p>Note</p> <p>Since Rapise 7.1 you may use double click to expand/collapse row details. Double click anywhere on the row you want to expand/collapse.</p>"},{"location":"Guide/spira_dashboard_2/#tree-view","title":"Tree View","text":"<p>Test cases and test sets may be placed into folders in Spira. The dashboard loads folder hierarchy. To navigate it click on folder icons.</p> <p></p> <p>Note</p> <p>Since Rapise 7.1 you may use double click to expand/collapse folders. Double click anywhere on the row with folder you want to expand/collapse.</p>"},{"location":"Guide/spira_dashboard_2/#actions","title":"Actions","text":"<p>Some tables include <code>Action</code> column. It allows the user to perform certain actions on an item displayed in the row where <code>Action</code> menu is expanded.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#tasks","title":"Tasks","text":"<p>Here is the list of tasks you may accomplish with the dashboard.</p>"},{"location":"Guide/spira_dashboard_2/#connect-to-spira","title":"Connect To Spira","text":"<p>If you did not connect Rapise to Spira yet, you will be prompted to enter the connection info.</p> <p></p> <p>To get your API Key follow these steps.</p>"},{"location":"Guide/spira_dashboard_2/#assign-automation-host-token","title":"Assign Automation Host Token","text":"<p>If you did not assign an automation host token to the machine where Rapise is running you may do it in Automation Hosts view. You may even create a new host there.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#framework-view-rapise-80","title":"Framework View (Rapise 8.0+)","text":"<p>The Framework mode was introduced in Rapise 8.0 to simplify test case and test set management, as well as the management of parameters, page objects/modules, object repositories, and shared code. The legacy Single Test mode required dealing with <code>Sub-Tests</code> and linking tests to <code>SpiraTest</code> on a per test case basis, whereas in the <code>Framework mode</code>, there is a single button labeled Sync with Spira that handles everything. When this button is pressed, test cases and test sets are automatically synchronized with <code>SpiraTest</code>, and files are uploaded/downloaded.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#manage-test-sets","title":"Manage Test Sets","text":"<p>The <code>Framework view</code> has a dropdown with test sets defined in the current framework.</p> <p></p> <p>Use <code>New Test Set</code> button (highlighted above) to create new test set. Below the test set dropdown find the controls related to the active/selected test set.</p> <p></p> <ul> <li>1 - dropdown with the names of defined test set configurations,</li> <li>2 - test set description,</li> <li>3 - <code>Action</code> menu,</li> <li>4 - ID of the corresponding test set in <code>SpiraTest</code>.</li> </ul> <p><code>Action</code> dropdown allows to</p> <p></p> <ul> <li>Immediately <code>Execute</code> the test set on the local machine via RapiseLauncher.</li> <li><code>Schedule</code> the test set for later execution (one time or recurrent).</li> <li><code>Rename</code> the test set.</li> <li><code>Delete</code> the test set.</li> <li><code>Open</code> the test set <code>in Spira</code> (in the default browser).</li> </ul>"},{"location":"Guide/spira_dashboard_2/#manage-test-cases","title":"Manage Test Cases","text":"<p>Below the test set controls find the list of test cases in the current framework. You may switch between viewing all test cases</p> <p></p> <p>or just included into the active test set.</p> <p></p> <p>In <code>All Test Cases</code> view use checkboxes to include/remove a test case. In <code>Included Test Cases</code> view use hamburger icons to reorder test cases.</p> <p>For every test case there is also <code>Action</code> dropdown that allows to <code>Open in Spira</code> corresponding test case. IDs on the right side of the test cases table are IDs of corresponding test cases in <code>SpiraTest</code>.</p>"},{"location":"Guide/spira_dashboard_2/#sync-with-spira","title":"Sync with Spira","text":"<p>When making changes such as creating, renaming, or deleting a test set, including or removing test cases, or reordering test cases, these actions are performed locally, and to update the <code>SpiraTest</code> side, use the <code>Sync with Spira</code> button.</p> <p></p> <p>Additionally, ensure to use this button after creating a new test case in the framework to make it available for inclusion in a test set.</p> <p>Important</p> <p>The <code>Sync with Spira</code> button is a powerful tool that manages various tasks, including creating test cases and test sets in SpiraTest, establishing links to Rapise tests, and facilitating file upload and download operations.</p> <p>Explore these knowledge base topics to discover common usage scenarios:</p> <ul> <li>Rapise 8.0: development flow for Test Automation Framework in Single User Mode</li> <li>Rapise 8.0: development flow for Test Automation Framework in Team Mode</li> <li>Rapise 8.0: how to make a copy of a test automation framework</li> </ul>"},{"location":"Guide/spira_dashboard_2/#execute-active-test-set","title":"Execute Active Test Set","text":"<p>Use <code>Execute</code> button to launch selected test set on a local machine via RapiseLauncher.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#parameters-view-rapise-80","title":"Parameters View (Rapise 8.0+)","text":"<p>Just like Framework View this view is available in new frameworks created with Rapise 8.0+. It is used to manage framework parameters and configurations, and described here.</p> <p></p>"},{"location":"Guide/spira_dashboard_2/#dashboard-view-legacy","title":"Dashboard View (legacy)","text":"<p>Important</p> <p>This view is enabled for legacy tests and frameworks and is not available in the new Framework mode. If you are dealing with a new framework created with Rapise 8.0+, a Framework View is displayed.</p>"},{"location":"Guide/spira_dashboard_2/#browse-framework-tests","title":"Browse Framework Tests","text":"<p>The dashboard view shows tests included in the currently opened test framework (parent test and it's sub-tests).</p> <p>Note</p> <p>Since Rapise 7.1 you may double click a test in this table to open it in Rapise.</p> <p>Note</p> <p>Since Rapise 7.2 you may select tests using checkboxes in the first column and perform additional actions: </p> <ul> <li>create a test set from selected test cases, </li> <li>append selected test cases to existing test set</li> <li>execute selected test cases on the local host</li> <li>execute selected test cases on another automation host</li> </ul> <p>A test has a checkbox near it if it is linked to a test cases belonging to selected project.</p>"},{"location":"Guide/spira_dashboard_2/#view-test-set-status-graph","title":"View Test Set Status Graph","text":"<p>Requires Rapise 7.2. The Test Set Status graph shows the aggregated count of test cases in each execution status for each test set in the product. If you have the same test cases in multiple test sets they are all counted separately to make sure you can tell that tests have passed successfully across test sets. This is helpful when testing across different environments.</p>"},{"location":"Guide/spira_dashboard_2/#setup-custom-properties","title":"Setup Custom Properties","text":"<p>Important</p> <p>Since Rapise 8.0 custom properties are created from the Test Runs view, because Rapise needs to create the properties for Test Runs only. Test Cases and Test Sets since Rapise 8.0 store the properties in it's description.</p> <p>Some features of the dashboard require additional custom properties to exist in Test Cases, Test Sets and Test Runs. Click <code>Create Custom Properties for Rapise</code> button to add the following custom properties in the selected project:</p> <ul> <li>Test Runs<ul> <li>Flaky (boolean, default is false)</li> <li>Run attempt (integer, default is 1)</li> <li>Tag (string, empty by default, requires Rapise 7.1+)</li> </ul> </li> <li>Test Cases<ul> <li>Flaky (boolean, default is false)</li> <li>Ready for parallel run (boolean, default is false, requires Rapise 7.1+)</li> </ul> </li> <li>Test Sets<ul> <li>Max rerun attempts (integer, default is 0)</li> <li>Do not rerun if N tests failed (integer, default is 0)</li> <li>Rerun test set if failed (boolean, default is false, requires Rapise 7.1+)</li> <li>Run tests in parallel (boolean, default is false, requires Rapise 7.1+)</li> <li>Max parallel tests (integer, default is 0 (no limit), requires Rapise 7.1+)</li> <li>Unroll input data for parallel execution (boolean, default is false, requires Rapise 7.2+)</li> <li>Input data (string, empty by default, requires Rapise 7.1+)</li> <li>Record videos (boolean, default is false)</li> <li>Verbose level (integer, default is 1)</li> <li>GitUrl, GitUser, GitPassword, GitBranch, GitRoot (string, empty by default)</li> <li>Git Credentials (dropdown value choice, requires Rapise 7.3)</li> </ul> </li> </ul> <p>Clicking the button more than once is safe. If a custom property exists - Rapise won't create a duplicate. To create the custom properties you will need to enter administrator credentials (user name and API Key).</p>"},{"location":"Guide/spira_dashboard_2/#perform-test-actions","title":"Perform Test Actions","text":"<p>Action menu for a test allows to</p> <ol> <li>Open the test in Rapise</li> <li>Link the test to a test case in Spira</li> <li>Unlink the test from a test case in Spira </li> <li>Execute the test (if linked to a test case) via RapiseLauncher on the local machine or a selected automation host. Requires Rapise 7.1+.</li> </ol>"},{"location":"Guide/spira_dashboard_2/#test-cases-view","title":"Test Cases View","text":""},{"location":"Guide/spira_dashboard_2/#browse-test-cases","title":"Browse Test Cases","text":"<p>In the test cases view one may see the tree of test cases for a project, discover when a test case was last executed and status of execution.</p> <p>Since Rapise 7.2 one may change global Test Case filter from <code>All</code> to <code>My Assigned</code>. Rapise 8.0 adds one more filter - <code>Framework</code>.</p>"},{"location":"Guide/spira_dashboard_2/#view-test-case-details","title":"View Test Case Details","text":"<p>Expanding a test case reveals last 10 runs of it. The details pane also shows test case parameters (editable, requires Rapise 7.1+) and custom properties (editable).</p>"},{"location":"Guide/spira_dashboard_2/#perform-test-case-actions","title":"Perform Test Case Actions","text":"<p>Action menu for a test case allows to</p> <ol> <li>Immediately <code>Execute</code> the test case on the local host.</li> <li><code>Execute</code> the test case on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready.</li> <li>Mark the test case as <code>Flaky</code> or remove the flag. </li> <li>Add default parameters to the test case  (legacy, use Test Set level custom properties to control verbose and video recording). The list of default parameters includes:<ul> <li>g_verboseLevel = 1</li> <li>g_enableVideoRecording = false</li> </ul> </li> <li><code>Open This Test</code> in Rapise. It is a shortcut for Open a test from SpiraTest.</li> <li><code>Rename</code> a test case or a test case folder.</li> <li><code>Delete</code> a test case.</li> <li><code>Open in Spira</code> - open current item in a browser window.</li> </ol> <p>Note</p> <p>For execution of a test case on a selected automation host (#2) - Rapise will use a special test set with the name of the automation host.</p>"},{"location":"Guide/spira_dashboard_2/#create-new-test-case","title":"Create New Test Case","text":"<p>If you want to create a test case in a specific folder - select corresponding row in the table, otherwise the test case will be created in the root folder. Click the <code>New Test Case</code> button at the bottom of the view and provide necessary details in the opened modal dialog.</p>"},{"location":"Guide/spira_dashboard_2/#test-sets-view","title":"Test Sets View","text":""},{"location":"Guide/spira_dashboard_2/#browse-test-sets","title":"Browse Test Sets","text":"<p>In the test sets view one may see the tree of test sets for a project, discover when a test set was last executed and status of execution.</p> <p>Since Rapise 7.2 one may change global Test Set filter from <code>All</code> to <code>My Assigned</code>.  Rapise 8.0 adds one more filter - <code>Framework</code>.</p> <p>Since Rapise 7.3 it is possible to change the way of calculating test set execution status. If you are using rerun features or include same test case multiple times into the same test set then it is recommended to set <code>Calculate Test Set Status from Test Runs</code> option:</p> <p></p> <p>If this option is not set then test set status is calculated based on the latest run for each included test case.</p>"},{"location":"Guide/spira_dashboard_2/#view-test-set-details","title":"View Test Set Details","text":"<p>Expanding a test set reveals the list of included test cases. The details pane also shows test set parameters (editable, requires Rapise 7.1+) and custom properties (editable).</p>"},{"location":"Guide/spira_dashboard_2/#add-test-cases","title":"Add Test Cases","text":"<p>Press <code>Add Test Cases</code> to open the test cases tree, select test cases and append them to the test set.</p>"},{"location":"Guide/spira_dashboard_2/#reorder-test-cases","title":"Reorder Test Cases","text":"<p>Using hamburger icon next to a test case ID one may reorder test cases in a test set.</p>"},{"location":"Guide/spira_dashboard_2/#test-case-actions","title":"Test Case Actions","text":"<p>Use Action menu to </p> <ol> <li>Remove a test case from the test</li> <li>Open a dialog to edit <code>Test Set Test Case</code> parameters (requires Rapise 7.1+)</li> </ol>"},{"location":"Guide/spira_dashboard_2/#perform-test-set-actions","title":"Perform Test Set Actions","text":"<p>Action menu for a test set allows to</p> <ol> <li>Immediately <code>Execute</code> the test set on the local host.</li> <li><code>Execute</code> the test set on a selected Automation Host. It will run as soon as RapiseLauncher on that host is ready.</li> <li><code>Rerun</code> just failed test cases on a selected Automation Host.</li> <li>Schedule the test set.</li> <li>Show Execution Plan for the test set.</li> <li><code>Rename</code> a test case or a test case folder.</li> <li><code>Delete</code> a test case.</li> <li><code>Open in Spira</code> - open current item in a browser window.</li> </ol> <p>Note</p> <p>For execution of a test set on a selected automation host (#2,#3) Rapise will use a special test set with the name of the automation host. Since Rapise 8.1 there is a checkbox to allow execution of the original test set.</p>"},{"location":"Guide/spira_dashboard_2/#create-new-test-set","title":"Create New Test Set","text":"<p>If you want to create a test set in a specific folder - select corresponding row in the table, otherwise the test set will be created in the root folder. Click the <code>New Test Set</code> button at the bottom of the view and provide necessary details in the opened modal dialog.</p>"},{"location":"Guide/spira_dashboard_2/#test-runs-view","title":"Test Runs View","text":""},{"location":"Guide/spira_dashboard_2/#browse-test-runs","title":"Browse Test Runs","text":"<p>This view shows most recent test run reports. One may see test run status and execution time and duration. If a test run is failed - Details column displays the first error message.</p> <p>Since Rapise 7.1 to view just test runs of a specific test set run use <code>Tag</code> column popup menu <code>Filter by Tag</code>. If you run the test set with different configurations then configuration number is reflected in the tag name, e.g. QZH_<code>Config3</code>. If a test run corresponds to automatic rerun of a failed test set it has suffix <code>Rerun</code>, e.g. DCB_<code>Rerun</code>. First three letters of the tag name is a random string. generated for test set run by RapiseLauncher.</p> <p>Important</p> <p>To enable <code>Filter by Tag</code> feature setup custom properties as described below.</p>"},{"location":"Guide/spira_dashboard_2/#view-test-run-details","title":"View Test Run Details","text":"<p>Expanding a test run reveals the report with execution status for every test step. The details pane also contains links to download test run attachments and execution log.</p>"},{"location":"Guide/spira_dashboard_2/#test-matrix-view","title":"Test Matrix View","text":"<p>Direct navigation to this page produces empty result. To see the Test Matrix navigate to the Test Runs view, right click Test Run tag and choose <code>Test Matrix</code> from popup menu.</p>"},{"location":"Guide/spira_dashboard_2/#automation-hosts-view","title":"Automation Hosts View","text":"<p>This view displays automation hosts configured in selected project. You may create a new one using the form on this page.</p>"},{"location":"Guide/spira_dashboard_2/#incidents-view","title":"Incidents View","text":"<p>This view displays last 500 incidents and allows to create new ones.</p>"},{"location":"Guide/spira_properties_dialog/","title":"Spira Properties Dialog","text":""},{"location":"Guide/spira_properties_dialog/#purpose","title":"Purpose","text":"<p>The purpose of this dialog is to allow you to show you the SpiraTest / SpiraTeam test case that the current Rapise test script is associated with.</p>"},{"location":"Guide/spira_properties_dialog/#how-to-open","title":"How to Open","text":"<p>Use the menu 'Test &gt; Spira Properties'.</p> <p>The dialog box will list the following:</p> <ul> <li>Spira Project - this displays the name of the project in SpiraTest that the test script is saved in</li> <li>Test Folder - this displays the name of the folder that the linked SpiraTest test case is contained in</li> <li>Test Case - this displays the name of the test case in SpiraTest that the test script is linked to</li> </ul> <p>If you want to unlink the current test script from SpiraTest (for example to save to a different SpiraTest project), click on the Unlink from Test Case button.</p> <p>If you have a test framework with sub-tests and you want to unlink all from SpiraTest, click on the Unlink Test and Sub-Tests from Test Cases button.</p>"},{"location":"Guide/spiratest_integration/","title":"SpiraTest Integration","text":""},{"location":"Guide/spiratest_integration/#overview","title":"Overview","text":"<p>SpiraTest is a web-based quality assurance and test management system with integrated release scheduling and defect tracking. SpiraTest includes the ability to handle manual, exploratory and automated tests, record the results and log any associated defects.</p> <p>When you use SpiraTest with Rapise you get the ability to store your Rapise automated tests inside the central SpiraTest document repository with full version control and test scheduling capabilities:</p> <p></p> <p>You can record and create your test cases using Rapise, upload them to SpiraTest and then schedule the tests to be executed on multiple remote computers to execute the tests immediately or according to a predefined schedule. The results are then reported back to SpiraTest where they are archived as part of the project. Also the test results can be used to update requirements' test coverage and other key metrics in real-time.</p> <p>In addition, you can also create exploratory manual tests, save them to SpiraTest and then execute them from within Rapise. This gives you access to more powerful screen capture and annotation functionality than is possible solely using SpiraTest.</p> <p>Note</p> <p>SpiraTeam and SpiraPlan include SpiraTest as part of its functionality, so wherever you see references to SpiraTest in this section, it applies equally to SpiraTeam and SpiraPlan.</p>"},{"location":"Guide/spiratest_integration/#configuring-spiratest","title":"Configuring SpiraTest","text":"<p>Before you can use SpiraTest to manage your Rapise automated tests you need to perform some initial configuration. This section assumes that you already have a working installation of SpiraTest or SpiraTeam v4.2 or later. If not, please refer to the SpiraTest Installation and Administration Guide for details on how to install SpiraTest.</p>"},{"location":"Guide/spiratest_integration/#configuring-the-rapise-automation-engine","title":"Configuring the Rapise Automation Engine","text":"<p>Log in to SpiraTest as a system administrator and go into SpiraTest main Administration page</p> <p></p> <p>and click on the <code>Test Automation</code> link under Integration.</p> <p></p> <p>Important</p> <p>Depending on when you first installed SpiraTest, you may already have an entry for Rapise, since versions 3.2 and later of SpiraTest automatically ship with a default entry for Rapise.</p> <p>If Rapise is missing in the list of automation engines, click the <code>Add</code> button to enter the new test automation engine details page. The fields required are as follows:</p> <p></p> <ul> <li>Name: This is the short display name of the automation engine. It can be anything that is meaningful to your users.</li> <li>Description: This is the long description of the automation engine. It can be anything that is meaningful to your users. (Optional)</li> <li>Active: If checked, the engine is active and able to be used for any project.</li> <li>Token: This needs to be the assigned unique token for the automation engine and is used to tell SpiraTest which engine to actually use for a given test case. For Rapise this should always be set to Rapise.</li> </ul> <p>Once you have finished, click the <code>Insert</code> button and you will be taken back to the Automation Engine list page, with Rapise listed as an available automation engine:</p> <p></p>"},{"location":"Guide/spiratest_integration/#connecting-to-spiratest","title":"Connecting to SpiraTest","text":"<p>Important</p> <p>SpiraTest connection settings are shared between Rapise and RapiseLauncher.</p> <p>The first thing you need to do is to configure the connection to SpiraTest. Click <code>Settings &gt; SpiraTest</code> menu:</p> <p></p> <p>This brings up the dialog box that lets you configure the connection to SpiraTest:</p> <p></p>"},{"location":"Guide/spiratest_integration/#credentials","title":"Credentials","text":"<p>Enter the </p> <ul> <li>SpiraTest URL,  e.g. https://my-company.spiraservice.net/</li> <li>User Name, login name you use to access SpiraTest or dedicated account for running Rapise tests.</li> <li>API Key </li> </ul> <p>and then click the <code>Test</code> button to verify that the connection information is correct.</p> <p>Note</p> <p>If you are with Rapise 6 or older then use password instead of the API key. </p>"},{"location":"Guide/spiratest_integration/#repository-and-token","title":"Repository and Token","text":"<p>Additionally enter</p> <ul> <li> <p>Default Repository Path, a folder to use for local copies of SpiraTest repositories.</p> </li> <li> <p>Token, the identifier of the current machine that Rapise is installed on. It needs to match the <code>Token</code> name of the corresponding Automation Host in SpiraTest.</p> </li> </ul> <p>Note</p> <p>You need to be running SpiraTest / SpiraTeam v4.0 or later to use the integration with Rapise.</p>"},{"location":"Guide/spiratest_integration/#using-the-spira-dashboard","title":"Using the Spira Dashboard","text":"<p>Important</p> <p>If you are reading this guide for the first time we recommend to proceed to the next section and after learning the basics return here. This section comes to play when you are planning to create a real big set of tests for your application.</p> <p>You can interact with SpiraTest using the Spira Dashboard that is available from the <code>View &gt; Spira Dashboard</code> menu. This provides a convenient way of working with SpiraTest, allowing you to quickly create, save and open test cases from SpiraTest.</p>"},{"location":"Guide/spiratest_integration/#frameworks","title":"Frameworks","text":"<p>If you are just starting your test automation project and have Rapise 8.0+ we highly recommend to use new Framework mode and use new Sync with Spira button that handles everything: creation of test sets and test cases as well as file uploading/downloading. The framework mode also has simplified way of handling parameters and configurations.</p>"},{"location":"Guide/spiratest_integration/#creating-a-rapise-test-from-a-spiratest-test-case","title":"Creating a Rapise Test From a SpiraTest Test Case","text":"<p>Important</p> <p>In this section we describe a simplified process to give a basic understanding of SpiraTest integration. Once you are ready to start implementing a set of tests for your application we recommend to review the Frameworks section. </p> <p>To create a new Rapise test linked to a SpiraTest test case, go to <code>File &gt; Create New &gt; New Test</code>. This will bring up the following dialog box:</p> <p></p> <ol> <li> <p>Select the project that contains the test case. The list of test case folders will be displayed.</p> </li> <li> <p>You can create a new folder by clicking the <code>New Folder</code> button</p> </li> <li> <p>Expand the folders until you can see the desired test case:</p> <p></p> </li> </ol> <p>Now either create a new test case by using the <code>New Test Case</code> button or simply click on a test case that you previously created in SpiraTest.</p> <p></p> <p>Once you are satisfied that this is the correct test case, choose the desired methodology (Basic, Manual-only, Mobile or Web), choose browser profile if it is a Web test and choose scripting mode (RVL or JavaScript). Rapise will now create a local test folder and files inside Default Repository Path based on this Spira test case.</p> <p>Important</p> <p>At this point the new test is stored locally only. To put it's files into SpiraTest you need to save it, see next section.</p>"},{"location":"Guide/spiratest_integration/#saving-a-test-to-spiratest","title":"Saving a Test to SpiraTest","text":"<p>Important</p> <p>In this section we describe a simplified process to give a basic understanding of SpiraTest integration. Once you are ready to start implementing a set of tests for your application we recommend to review the Frameworks section first. </p> <p>You may need to save a test into SpiraTest in 3 cases:</p> <ol> <li>You just created the test like described in the previous section.</li> <li>You made changes to the test you saved into SpiraTest earlier.</li> <li>You want to link existing Rapise test (not saved into SpiraTest and not linked to a SpiraTest test case) to a test case in SpiraTest.</li> </ol> <p>To save a Rapise test into SpiraTest you need to make sure that the following has been setup first:</p> <ol> <li>You have a project created in SpiraTest to store the Rapise tests in. The Rapise tests will be stored in a repository located inside the Planning &gt; Documents section of the project.</li> <li>The user you will be connecting to SpiraTest with has the permissions to create new document folders.</li> <li>You have created the Test Case in SpiraTest that the Rapise test will be associated with. This is important because without being associated to a SpiraTest Test Case, you will not be able to schedule and execute the tests using SpiraTest and RapiseLauncher.</li> <li>You have created an AutomationEngine in SpiraTest that has the token name Rapise. This will be used to identify Rapise automation scripts inside SpiraTest.</li> </ol> <p>Once you have setup SpiraTest accordingly, click <code>File &gt; Sync with Spira</code>.</p> <p>If the test is not linked to a SpiraTest Test Case, it will bring up the <code>Save Test to Spira</code> dialog box:</p> <p></p> <p>The first thing you will need to do is choose the SpiraTest project from the dropdown list. This will then update the list of test case folders displayed in the top pane of the dialog box.</p> <p>Once you have chosen the desired project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to attach the Rapise test to:</p> <p></p> <p>You can also create a new folder by clicking the <code>New Folder</code> button.</p> <p>When you expand the folders to display the list of contained test cases, it will display the Name and ID of each test case together with an icon that indicates the type of a test case:</p> <ol> <li> - Manual test case that has no automation script attached. (Repository Path will also be blank)</li> <li> - Test case that has an existing Rapise test attached.</li> <li> - Test case that has a non-Rapise automation script attached.</li> </ol> <p>You can create a new test case by using the <code>New Test Case</code> button or simply click on a test case that you previously created in Spira. Choose a test case that has icon (1) and doesn't have an associated Repository path.</p> <p>Note</p> <p>Test cases with icon type (3) cannot be used with Rapise for adding or updating scripts.</p> <p>Once you have chosen the appropriate test case, click the <code>Save</code> button. That will bring up the Create File Repository in Spira dialog box:</p> <p></p> <p>This dialog box will let you know where the Rapise script will be stored in SpiraTest and also the location of the repository local directory used to store the <code>working copy</code> of the Rapise test. Click <code>Create</code> to confirm.</p> <p></p> <p>A dialog box will be displayed that lists all the files in the local working directory and shows which ones will be checked-in to SpiraTest. The system will filter out result and report files that shouldn't be uploaded. You can change which files are filtered out and also selectively include/exclude files. Once you are happy with the list of files being checked-in, click the <code>OK</code> button:</p> <p>Rapise will display the progress dialog while the files are being uploaded to the server:</p> <p></p> <p>If an error occurs during the save, a message box will be displayed, otherwise the dialog box will simply close and the confirmation appear.</p> <p></p>"},{"location":"Guide/spiratest_integration/#loading-a-test-from-spiratest","title":"Loading a Test from SpiraTest","text":"<p>Important</p> <p>In this section we describe a simplified process to give a basic understanding of SpiraTest integration. Once you are ready to start implementing a set of tests for your application we recommend to review the Frameworks section first. </p> <p>Important</p> <p>If you already loaded the test from SpiraTest earlier and wish to update the local copy with changes saved into SpiraTest by a team member then proceed to Synchronizing section.</p> <p>To load a Rapise test from SpiraTest you need to make sure that the following has been setup first:</p> <ol> <li>You have already configured the connection to the SpiraTest service.</li> <li>The user you will be connecting to SpiraTest with has the permission to view the project that the tests are being stored in.</li> </ol> <p>Once you have setup SpiraTest accordingly, click on the <code>File &gt; Load from Spira</code> menu.</p> <p>That will bring up the <code>Load Test from Spira</code> dialog box:</p> <p></p> <p>The first thing you will need to do is choose the SpiraTest project from the dropdown list. Once you have done that, the system will display the list of test case folders in this project.</p> <p>Once you have chosen the project, you need to expand the test case folders in SpiraTest and choose the existing Test Case that you want to load:</p> <p></p> <p>When you expand the folders to display the list of contained test cases, it will display the Name, ID and Repository Path for each test case that has associated Rapise test.</p> <p>Note</p> <p>Only test cases that have an attached/linked Rapise test script will be displayed in this view.</p> <p>Notice <code>To Folder</code> edit field. By default a test is loaded into Default Repository Path, but you may load a test into any folder (requires Rapise 8.0+).</p> <p>Once you have chosen the appropriate test case, click the <code>Load</code> button to load the test case:</p> <p></p> <p>A dialog box will be displayed that lists all the files on the server which will be downloaded from SpiraTest. You can change which files are to be downloaded. Once you are happy with the list of files being checked-out, click the <code>OK</code> button:</p> <p>The system will display the progress dialog while the files are being downloaded from the server.</p> <p></p> <p>If an error occurs during the download, a message box will be displayed, otherwise the dialog box will simply close and Rapise will open the loaded test.</p>"},{"location":"Guide/spiratest_integration/#synchronizing","title":"Synchronizing","text":"<p>Important</p> <p>In this section we describe a simplified process to give a basic understanding of SpiraTest integration. Once you are ready to start implementing a set of tests for your application we recommend to review the Frameworks section first. </p> <p>When you have a Rapise test previously loaded from SpiraTest or saved to SpiraTest then continue to use <code>File &gt; Sync with Spira</code> to upload local changes and/or download changes made by other team members. Suppose for example, you have some files modified locally and want to update them in the SpiraTest repository. When you initiate <code>Sync with Spira</code>, Rapise will show you which files have been modified locally and which have been modified in the SpiraTest repository. The synchronization dialog allows you to choose a desired action for each file: upload, download or keep intact the local version (uncheck the file).</p> <p></p> <p>Since Rapise 8.0 it is possible to view differences between server and local file versions, notice <code>Diff...</code> buttons.</p>"},{"location":"Guide/spiratest_integration/#viewing-the-spiratest-properties-of-a-test","title":"Viewing the SpiraTest Properties of a Test","text":"<p>To see which SpiraTest project and test case \u00a0the current Rapise test is associated with, chose <code>Test &gt; Spira Properties</code> menu item. This will bring up the Spira Properties dialog box:</p> <p></p> <p>This will display the name of the current Rapise test together with the name of the SpiraTest project, test folder and test case that this test is associated with.</p> <p>If you would to save the current Rapise test into a new SpiraTest project or if you want to save it against a new test case in the same project, you must first unlink the test. To do this click on the <code>Unlink from Test Case</code> button. This will tell Rapise to remove the stored SpiraTest information from the <code>.sstest</code> file so that it can be associated with a new project and/or test case in SpiraTest.</p> <p>Warning</p> <p>This operation cannot be undone so please make sure you really want to unlink the current test.</p>"},{"location":"Guide/spiratest_integration/#viewing-the-spiratest-repository","title":"Viewing the SpiraTest Repository","text":"<p>If you open up the project in SpiraTest and click on the <code>Planning &gt; Documents</code> link, you will be taken to the central document repository that now includes your new Rapise test folders. Rapise tests are saved into <code>Root Folder &gt; Rapise Tests</code>.</p> <p></p> <p>To see the different revisions of a file, simply click on the hyperlink for a repository item and a preview of the file is displayed:</p> <p></p> <p>If you click on the <code>Versions</code> tab, the list of previous revisions will be displayed:</p> <p></p> <p>If you click on the <code>Testing &gt; Test Cases</code> tab and then click on the test case that was previously created, you will see that it has its Automation information populated:</p> <p></p> <p>This shows you that the <code>Login to Application</code> test case is linked to the corresponding Rapise test stored in the SpiraTest document repository (in the <code>LoginToApplication</code> folder). You can click on the <code>LoginToApplication.sstest</code> hyperlink and it will automatically take you to the corresponding <code>.sstest</code> file in the SpiraTest document repository:</p> <p></p>"},{"location":"Guide/spiratest_integration/#using-parameterized-test-cases","title":"Using Parameterized Test Cases","text":"<p>Important</p> <p>This is a legacy approach to parameters passing. If you are just starting with Rapise please follow this guide.</p> <p>Often you will have an automated test script that you want to run several times using:</p> <ul> <li>Different browsers (e.g. Chrome, Edge and Safari)</li> <li>Different test data</li> </ul> <p>You can define the various test parameters for both these cases and have SpiraTest pass the values through to the Rapise automated test. For example, in the Automation (or Test Steps) section of a test case (you may learn how to create one from this tutorial), click the <code>Edit Parameters</code> link </p> <p></p> <p>and enter the following information:</p> <p></p> <p>We have defined four input parameters for this test case:</p> <ul> <li>g_book_author - the name of the author for the new book being created.</li> <li>g_book_genre - the name of the genre for the new book being created.</li> <li>g_book_name - the title/name of the new book being created.</li> <li>g_browserLibrary - the name of the browser profile we should use to run the test. The name of this parameter is reserved, while the first three may be different.</li> </ul> <p>Now for these parameters to actually affect the Rapise test, you need to make sure that the Rapise test is expecting these variables and knows how to handle them. Conventionally in Rapise, all global variables are prefixed with <code>g_</code> which is why we have similarly named the SpiraTest parameter names.</p> <p>If your test is implemented in RVL, you may define these variables right in RVL sheet using Global Variables. No need to define <code>g_browserLibrary</code> because it is built-in. Note, that to print this parameter value we use <code>g_browserProfile</code>.</p> <p></p> <p>In JavaScript mode declare parameters in <code>Main.js</code> like this.</p> <pre><code>function TestInit()\n{\n    // Input variables - allows to configure parameters in SpiraTest.\n    // Provide backup values if not defined.\n    if ('undefined' == typeof(g_book_name))\n    {\n        g_book_name = 'The Restaurant at the end of the Universe';\n    }\n\n    if ('undefined' == typeof(g_book_author))\n    {\n        g_book_author = 'Agatha Christie';\n    }\n\n    if ('undefined' == typeof(g_book_genre))\n    {\n        g_book_genre = 'Science Fiction';\n    }\n}\n\nfunction Test(params)\n{\n    Tester.Message(g_book_name);\n    Tester.Message(g_book_author);\n    Tester.Message(g_book_genre);\n    Tester.Message(g_browserProfile);\n\n    // test steps\n}\n\ng_load_libraries=[\"Web\"]\n</code></pre> <p>This code will check to see if the variables are provided by SpiraTest and if not, it will use some defaults. This is useful when you want to be able to run the test directly from Rapise and from SpiraTest without having to make changes to the test script.</p> <p>These global variables (<code>g_book_name</code>, <code>g_book_author</code>, <code>g_book_genre</code>) can now be used in the Rapise test script at the appropriate points in the playback.</p> <p>Note</p> <p>Parameters in Rapise and SpiraTest are case-sensitive, so make sure that your parameter names in SpiraTest match those in Rapise exactly, including the specific case.</p>"},{"location":"Guide/spiratest_integration/#scheduling-the-tests","title":"Scheduling the Tests","text":"<p>Now that we have our Rapise automated test uploaded to SpiraTest and associated with a test case, we can now schedule the test to be executed. The first thing we need to do is setup the list of automation hosts.</p>"},{"location":"Guide/spiratest_integration/#configuring-the-automation-hosts","title":"Configuring the Automation Hosts","text":"<p>When you execute Rapise automated tests from SpiraTest, you have the ability to specify which computer(s) it will be executed on. We call those different computers, the automated hosts. Each automation host needs to have a copy of Rapise installed on it.</p> <p>Go to <code>Testing &gt; Automation Hosts</code> in SpiraTest to display the list of automation hosts:</p> <p></p> <p>Make sure that you have created an Automation Host for each computer that is going to run an automated test case. The name and description can be set to anything you like, but the Token field must be set to a unique name for each computer.</p> <p>Once you have at least one Automation Host configured, we need to next create the test sets that will be scheduled to execute on these hosts.</p>"},{"location":"Guide/spiratest_integration/#creating-and-scheduling-the-test-sets","title":"Creating and Scheduling the Test Sets","text":"<p>Inside SpiraTest, click on <code>Testing &gt; Test Sets</code> to display the list of existing test sets:</p> <p></p> <p>Now click on New Test Set to create a new test set that will contain our automated test case:</p> <p></p> <p>Note</p> <p>Unlike manual test cases, automated test cases must be executed within a test set -- they cannot be executed directly from the test case.</p> <p>Now click on the hyperlink of our new test set to display the test set details page:</p> <p></p> <p>Scroll down to the Test Cases section:</p> <p></p> <p>First, click on the <code>Add</code> button in the Test Cases tab to bring up the dialog box that lets us add new test cases to the set:</p> <p></p> <p>Click on <code>Root</code> to expand the tree of folders and choose a folder:</p> <p></p> <p>Choose the parameterized test case and click the <code>Save</code> button.</p> <p></p> <p>The test case will now be added to the set. Perform the same action again so that we have the separate instances of our parameterized test case:</p> <p></p> <p>Since in this example we have parameterized test cases inside the automated test set, we need to set their values by right-clicking on each test case in turn and choose <code>Edit Parameters</code>:</p> <p></p> <p>Enter the parameter values and click <code>Save</code> to commit the change. This allows you to have the same test case in the test set multiple times with different data for each instance of the test case.</p> <p></p> <p>Now that we have the test case added to the set, we need schedule the test set for execution by filling in the following fields:</p> <p></p> <ul> <li>Automation Host - the name of the automation host that will be running the automated test set.</li> <li>Planned Date - the date and time that you want the scenario to begin. Note that multiple test sets scheduled at the exact same time will be scheduled by Test Set ID order.</li> <li>Status - this needs to be set to Not Started for RapiseLauncher to pick up the scheduled test set. When you change the Planned Date, the status automatically switches back to Not Started.</li> <li>Type - this needs to be set to Automated for automated testing.</li> </ul>"},{"location":"Guide/spiratest_integration/#executing-the-test-sets","title":"Executing the Test Sets","text":"<p>Once you have set the various test set fields (as described above), the RapiseLauncher instance running on the assigned automation host will periodically poll SpiraTest for new test sets. Once it retrieves the new test set, it will add it to its list of test sets to be executed. Once execution begins it will change the status of the test set to In Progress, and once test execution is done, the status of the test set will change to either Completed (the automation engine has been  launched and the test has completed) -- or Blocked (RapiseLauncher was not able to execute the automated test).</p> <p>If you want to immediately execute the test case on your local computer, instead of setting the Automation Host, Status and Planned Date fields, you can click the <code>Execute</code> icon on the test set itself. This will cause RapiseLauncher on the local computer to immediately start executing the current test set.</p> <p>In either case, once all the test cases in the test set have been completed, the status of the test set will switch to Completed and the individual test cases in the set will display a status based on the results of the Rapise test:</p> <ul> <li>Passed - the Rapise automated test ran successfully and all the test conditions in the test script passed.</li> <li>Failed - the Rapise automated test ran successfully, but at least one test condition in the test script failed.</li> <li>Blocked - the Rapise automated test did not run successfully.</li> </ul> <p>If you receive the Blocked status for either the test set or the test cases you should look into the test run details in SpiraTest to find out the reason.</p> <p>Note</p> <p>While the tests are executing you may see browser or application windows launch as Rapise executes the appropriate tests.</p> <p>Once the tests have completed, you can log back into SpiraTest and see the execution status of your test sets:</p> <p></p> <p>If you click on a Test Run in that test set, you will see the following information:</p> <p></p> <p>If you have configured RapiseLauncher to capture screenshots during execution, they will be embedded into the report:</p> <p></p> <p>So, you now have a complete record of the automated test execution in SpiraTest, with the execution status of the appropriate test case and test steps updated, and a complete log of the testing activities.</p> <p>The Attachments tab of a test run contains all the screenshots, the original report and log files:</p> <p></p>"},{"location":"Guide/spiratest_integration/#block-execution","title":"Block Execution","text":"<p>Note</p> <p>This feature requires Rapise 6.6+.</p> <p>If you have a test set that contains several test cases and failure of some test case makes further execution of the test set unwanted you may do this by returning exit code <code>-99</code> from the failed test. It can be done via <code>WScript.Quit(-99)</code> statement.</p>"},{"location":"Guide/spiratest_integration/#using-rapiselauncher","title":"Using RapiseLauncher","text":"<p>RapiseLauncher is a separate application that installs with Rapise. It allows you to remotely schedule the automated tests in SpiraTest and have RapiseLauncher automatically invoke the tests according to the schedule.</p>"},{"location":"Guide/spiratest_integration/#configuring-rapiselauncher","title":"Configuring RapiseLauncher","text":"<p>RapiseLauncher installs along with the main Rapise application. You may launch it from Rapise using main menu <code>Tools &gt; Rapise Launcher</code>.</p> <p>It can also be found in the <code>Start &gt; Programs &gt; Inflectra</code> program folder:</p> <p></p>"},{"location":"Guide/spiratest_integration/#basic-unattended-operation","title":"Basic Unattended Operation","text":"<p>When run, the program will start minimized to the system tray and will start its polling of the server. Polling will occur every 'x' minutes (5 by default) for any automated test sets that are scheduled to be run. When time comes for a test to be launched, it will start Rapise to execute the test. Rapise will then perform the test activities and report the results back to SpiraTest.</p> <p>At the end of the test, the program will go back and resume scanning for tests that need to be executed. Typically (unless there is a bug in the test or application being tested) no user input is ever needed from the application itself.</p>"},{"location":"Guide/spiratest_integration/#client-configuration","title":"Client Configuration","text":"<p>Important</p> <p>SpiraTest connection settings are shared between Rapise and RapiseLauncher.</p> <p>By right clicking on the system tray icon and selecting <code>Configuration</code>, the application's window will open to the configuration panel.</p> <p></p> <p>The panel has the following options:</p>"},{"location":"Guide/spiratest_integration/#spiratest-server-connection","title":"SpiraTest Server Connection","text":"<ul> <li>URL - the URL of the SpiraTest installation. Be sure to not put <code>/Login.aspx</code> or any other page in the string, this should be just the root URL of the application's install.</li> <li>User Name - the SpiraTest login id of the user that you want the tests reported as. Note that while the application is polling and updating test results, if the user is logged into a web browser session, they will get kicked out.</li> <li>API Key-  the API Key for the User Name above.</li> <li>Test - clicking this will test the login to make sure the application can connect to the server properly.</li> <li>Repository - this is the Windows folder to store local copies of tests to execute.It is applicable when the next option is unchecked.</li> <li>Use Temp Folder for Test Execution - this is the default and recommended option, the Temp folder is located in <code>C:\\ProgramData\\Inflectra\\Rapise\\Temp</code>.</li> </ul>"},{"location":"Guide/spiratest_integration/#server-polling","title":"Server Polling","text":"<ul> <li> <p>Automation Host Token - this field is required, and uniquely identifies the local testing machine. Any scheduled tests assigned to the Automation Host on SpiraTest will get polled for this machine. Except in special circumstances, this ID should be unique among all testing machines.</p> <p>Important</p> <p>This field must match the string that is entered into the Automation Host Details screen in the Token field, or scheduled tests will not be recognized.</p> </li> <li> <p>Polling Frequency - how often in minutes the application will poll the SpiraTest server for updates to the automation host's schedule. The default is 5 minutes, and should be fine for most installations. Note that tests will still be executed on their scheduled time, this is simply how often the program will talk to the SpiraTest server to detect schedule changes. Updating the polling frequency will reset the currently running timers.</p> </li> <li>Read Ahead - how far ahead in minutes the program should read the schedule for the Automation host. Tests that are scheduled further in advance will not show up as a pending test on the status screen.</li> <li>Connection Timeout - Consider a request to Spira failed after specified time. Requires Rapise 8.1+. \u00b6</li> <li>Automatically run tests that are overdue - when this is checked, any tests that are pulled from the SpiraTest server that has a scheduled date in the past will be marked as Overdue. Normally, overdue tests will not be executed. With this check, they will be executed as soon as the poll is finished.</li> </ul>"},{"location":"Guide/spiratest_integration/#options","title":"Options","text":"<ul> <li>Capture screenshots during playback - selecting this option will instruct RapiseLauncher to capture screenshots of the objects being recognized during testing and upload them to SpiraTest at the end of the execution. The screenshots will then be linked to the test run inside SpiraTest.</li> <li>Continue test set execution if test case returns Blocked status - by default Blocked test case stops execution of a test set, set this checkbox to run all test cases no matter what. This option requires Rapise 7.3+</li> <li>Do not upload Test Run attachments - if this option is set, RapiseLauncher does not upload screenshots and log files to SpiraTest to save database space. Use this option in exceptional cases if your SpiraTest instance is running out of space. Requires Rapise 8.0+.</li> <li>RDP screen width &amp; height - when RDP session is disconnected via RapiseLauncher tray icon menu set screen resolution to specified width and height.</li> <li>Start at logon -- set this checkbox to let Windows automatically launch Rapise Launcher at user logon. Useful when your server is rebooted regularly. This option requires Rapise 6.3+</li> </ul> <p>Since Rapise 7.2 one may use <code>Open Log</code> button to quickly open the RapiseLauncher log in the default text viewer.</p>"},{"location":"Guide/spiratest_integration/#status-screen","title":"Status Screen","text":"<p>The status screen is usually hidden, but can be brought up for display by double-clicking on the system tray icon:</p> <p></p> <p>The top of the screen shows the current status, whether it's running a test or waiting to poll the server for an update. It will also show any errors present on the application, like a registration error or configuration issue. Under the status bar is a list of any pending or executing tests that are scheduled for this testing machine. The list will get cleared at every poll, so tests that have executed since the previous poll will still be on the list, and will show their execution status:</p> <ul> <li>Green Arrow - a green arrow indicates that the test is still running, or RapiseLauncher is waiting for a reply from Rapise.</li> <li>Blue Checkbox - a blue checkbox indicates that the test is completed, regardless of status of the individual test steps in the scheduled test set.</li> <li>Red Error - a red error indicator indicates that Rapise ran into an issue (outside of test results). In this case, any further tests will be marked as blocked, as the issue needs to be corrected within Rapise or the Rapise test script.</li> <li>No Indication - no indication means that the test is currently awaiting for its scheduled date to start. Note that only one test will be launched at a time, so that if two tests are scheduled at the same time, the one with the lower TestSet ID will be executed first, then as soon as it's finished, the second scheduled test will be run.</li> </ul>"},{"location":"Guide/spiratest_integration/#buttons","title":"Buttons","text":"<p>By highlighting a test that has not been executed yet, you can click the <code>Force Execute</code> button. This will cause the selected test to have its scheduled date to the current time, causing it to be immediately executed (or, if another test is already running, next in line for execution).</p> <p>At any time the <code>Force Poll</code> button can be clicked, causing RapiseLauncher to initiate an immediate poll of the SpiraTest server to check for pending runs. The timers for the next server poll will be reset when the button is clicked.</p> <p>To stop of execution of a running Test Set, select it in the list and click <code>Cancel Execution</code> button.</p>"},{"location":"Guide/spiratest_integration/#tray-icon-menu","title":"Tray Icon Menu","text":"<p>Instead of operating from the application window, all functions exist on the tray icon menu as well, as well as some additional commands:</p> <p></p> <ul> <li>Pause / Resume - the Pause/Resume option pauses or resumes the timers for polling and executing tests. If a test or server poll is already in progress, it will not cancel these. However, after the are finished, no further polls or tests will be run.</li> <li>Poll Now - this will force a server poll for upcoming tests, and reset the poll timer.</li> <li>Disconnect RDP Session - this will disconnect current RDP session and will leave the system in a state ready for execution of UI tests. After disconnect RapiseLauncher will set screen resolution according to configuration (width/height options). This feature is a convenient way to perform steps described in KB325.</li> <li>Configuration - opens the main window to the Configuration page.</li> <li>Help &gt; About - opens the About window, which displays information about Rapise Launcher.</li> <li>Help &gt; View Help - opens this help page.</li> <li>Exit - will completely exit the program. Doing this will cancel any tests currently running and shut down the program. Any tests that were waiting to be executed will not execute until the program is restarted and the polling is resumed.</li> </ul> <p>You can double-click the tray icon to bring up the main window on the Status page.</p>"},{"location":"Guide/spiratest_integration/#running-rapiselauncher-from-a-build-script","title":"Running RapiseLauncher from a Build Script","text":"<p>Normally you schedule tests in SpiraTest using the Planned Date field of the test sets and let the various instances of RapiseLauncher poll SpiraTest for upcoming tests. In addition (as described in the SpiraTest User Manual) you can execute a test set on the local machine immediately by clicking the Execute button within SpiraTeam.</p> <p>However there are situations where you want to be able to launch an automated Rapise test script from an external batch file or build script (e.g. as part of a continuous integration environment) and have those tests report their results back into SpiraTest. You can achieve this by using the special command-line argument <code>--testset</code> which is passed to RapiseLauncher. For more details on this parameter see the next section.</p>"},{"location":"Guide/spiratest_integration/#command-line-arguments","title":"Command line arguments","text":"<p>For debugging and additional options when running the program, the following command-line arguments are available:</p> <ul> <li>-config:[Path to RepositoryConnection.xml] allows defining path to custom RapiseLauncher configuration. It may be used when RapiseLauncher is executed in remote pipeline. You may create <code>RepositoryConnection.xml</code> on you dev host (by setting the configuration using standard settings dialog), and then copy the configured file from <code>C:\\ProgramData\\Inflectra\\Rapise\\RepositoryConnection.xml</code> to your source tree and pass it using this parameter.</li> <li>-minimized starts the application in minimized mode. Normal action is to show the list of pending runs.</li> <li>-paused starts the application with timers Paused instead of active.</li> <li> <p>-param:[name]=[value] sets a global variable for every executed test. For example:</p> <pre><code>-param:g_enableVideoRecording=true\n</code></pre> <p>Param argument can be used multiple times:</p> <pre><code>-param:g_verboseLevel=3 -param:g_enableVideoRecording=true\n</code></pre> </li> <li> <p>-poll forces the program to do an initial poll upon startup. Normal action is to wait the pending time before doing the initial poll.</p> </li> <li>-project:[Project ID] allows you to tell RapiseLauncher which project the test set specified with the -testset argument lives in. This speeds up the time it takes Rapise to locate and retrieve the test set (optional).</li> <li>-testset:[Test Set ID] allows you to tell RapiseLauncher to execute a specific test set on the remote computer (e.g. -testset:45 runs test set <code>TX00045</code>). Since Rapise 6.7 one may pass a comma separated list of test set Ids (e.g. -testset:45,46,47). Listed test sets are executed sequentially.</li> <li>-trace enables tracelogging to the EventLog for debugging and watching tests execute.</li> <li> <p>-width:[width] -height:[height] sets the screen resolution. Width must be in the range <code>[1024, 7680]</code>, height - <code>[768, 4320]</code>. Allowed width/height combinations are determined by the operating system where you run RapiseLauncher. Most typical resolutions are </p> <pre><code>[1024, 768], [1280, 720], [1920, 1080]\n</code></pre> </li> <li> <p>filename must be the last item on the command line. This is a <code>TST</code> file downloaded from SpiraTest to start immediate execution on. Optional.</p> </li> </ul>"},{"location":"Guide/spiratest_integration/#record-playback-videos","title":"Record Playback Videos","text":"<p>Note</p> <p>This feature requires Rapise 6.6+.</p> <p>RapiseLauncher can record video of test playback. To enable video capture pass <code>g_enableVideoRecording=true</code> via a Test Case parameter. For video recording RapiseLauncher uses <code>Microsoft.TestPlatform</code> NuGet package.When this feature is used for the first time RapiseLauncher downloads <code>Microsoft.TestPlatform</code> using <code>nuget.exe</code> and puts it into <code>&lt;Public Documents&gt;\\Rapise\\VideoRecorder</code> folder.</p> <p>By default the video recorder is executed with these parameters:</p> <pre><code>-noaudio -bitRate 512 -frameRate 2\n</code></pre> <p>You may change them by defining a Test Case parameter with name <code>g_videoRecorderArguments</code>.</p> <p>Recorded video is attached to the test run as ScreenCapture.wmv.</p>"},{"location":"Guide/spiratest_integration/#using-test-set-attachments","title":"Using Test Set Attachments","text":"<p>You may attach some data to Test Set and use it during test execution. It is a convenient way to pass configuration and data files for the test set. It may be used as an alternative to defining Spira Configurations.</p> <p>You may open test attachment using the <code>%ARTIFACTS%</code> environment variable. If this is a standalone test then <code>ARTIFACTS</code> resolves to <code>WORKDIR</code> (framework root). When executed from Spira it will be a separate temp folder where RapiseLauncher downloaded everything attached to the Test Set.</p> <p>Example Usage:</p> <pre><code>    Global.GetProperty(\"Url\", \"http://default/url\", \"%ARTIFACTS%/Config.xlsx\");\n</code></pre> <p>So by default it would load <code>Config.xlsx</code>  from the test framework root, but in the RapiseLauncher mode it will open the config file from the temp location where everything is downloaded. And if Test Set has file <code>Config.xlsx</code> attached then will be used to read the <code>Url</code> property.</p>"},{"location":"Guide/spiratest_integration/#parameters-passed-from-rapiselauncher-to-rapise","title":"Parameters Passed from RapiseLauncher to Rapise","text":"<p>When RapiseLauncher runs a test it passes a bunch of global variables to it. Those variables describe project, test set, test case and release scope of the test.</p> <p>See this KB article for details.</p>"},{"location":"Guide/spiratest_integration/#git-for-windows","title":"Git for Windows","text":"<p>This feature requires Rapise 7.3+. By default Rapise is using LibGit2Sharp library to clone Git repositories. It is a great library and it works in 99% of cases. However if you are behind a proxy you may need to configure RapiseLauncher to use Git for Windows instead of LibGit2Sharp. Configuration is simple. Just create  a file <code>c:\\Users\\Public\\Documents\\Rapise\\GitClone.cmd</code> with the following content:</p> <pre><code>echo %GitUrlWithoutProtocol%\n@echo off\ngit clone https://%GitUser%:%GitPassword%@%GitUrlWithoutProtocol% %GitTargetPath%\n</code></pre> <p>RapiseLauncher is using this CMD file to clone a Git repository. Environment variables <code>GitUrl</code>, <code>GitUrlWithoutProtocol</code>, <code>GitUser</code>, <code>GitPassword</code>, <code>GitBranch</code>, <code>GitTargetPath</code> are set by RapiseLauncher automatically and can be used inside the CMD file. <code>GitTargetPath</code> points to the folder where a repository must be cloned.</p>"},{"location":"Guide/spiratest_integration/#see-also","title":"See Also","text":"<ul> <li>Using Spira Dashboard </li> <li>Using Rapise with SpiraTest (video)</li> <li>Data Driven Testing with Test Configurations</li> <li>RapiseLauncher extension for Azure DevOps.</li> <li>How test files are stored in SpiraTest</li> </ul>"},{"location":"Guide/spreadsheet_editor/","title":"Spreadsheet Editor","text":""},{"location":"Guide/spreadsheet_editor/#purpose","title":"Purpose","text":"<p>The Spreadsheet editor lets you view and edit Microsoft Excel spreadsheet files (.xls or .xlsx). This very convenient when you are doing data-driven testing and need to create or edit the test data directly inside Rapise.</p>"},{"location":"Guide/spreadsheet_editor/#how-to-open","title":"How to Open","text":"<p>Use the Test Files View to open an Excel file. \u00a0The Excel file will be opened in a Spreadsheet Viewer, in the Content View. \u00a0The Spreadsheet tab of the Ribbon will also open.</p>"},{"location":"Guide/spreadsheet_editor/#formula-bar","title":"Formula Bar","text":"<p>The formula bar lets you see/edit the contents of the currently selected cell as well as enter more complex Excel calculations/formulas:</p> <p></p>"},{"location":"Guide/spreadsheet_editor/#encrypting-a-cell","title":"Encrypting a Cell","text":"<p>There might be occasions when you need your XLS files to hold sensitive information (like passwords). In such scenarios, you have the convenience of encrypting these values. Later, you can decrypt them using Global.DoDecrypt prior to using them as function parameters.</p> <p></p>"},{"location":"Guide/spreadsheet_editor/#spreadsheet-grid","title":"Spreadsheet Grid","text":"<p>The main spreadsheet grid lets you see the cells in the spreadsheet, select a range and use the Spreadsheet ribbon to change the format:</p> <p></p>"},{"location":"Guide/spreadsheet_editor/#cell-formatting","title":"Cell Formatting","text":"<p>By default all cells have General format. It means that format of a cell value is determined automatically during read operation. It may lead to undesired effects. For example, if a cell contains date <code>5/1/2020</code>, the value read will be <code>43952</code>. If you want to get cell value in text format you may change the format to Text using Format Cells dialog.</p> <p></p> <p>Then you need to re-enter the date. After that Rapise will read the date exactly as <code>5/1/2020</code>.</p>"},{"location":"Guide/start_page/","title":"Start Page","text":""},{"location":"Guide/start_page/#purpose","title":"Purpose","text":"<p>The Start Page is intended to be a convenient entry point for Rapise beginners.</p> <p>The Start Page provides:</p> <ol> <li>Links to tutorials and webinars.</li> <li>Links to sample tests. This displays a list of available Rapise samples. Some samples are shipped with Rapise while others are provided from the online public repository.<ul> <li>The Fetch Samples button is used to download/update additional samples from online public repository.</li> </ul> </li> </ol>"},{"location":"Guide/start_page/#how-to-open","title":"How to Open","text":"<p>The Start Page opens automatically with Rapise. This behavior can be modified in the Options dialog using the ShowStartPageOnStartup setting.</p>"},{"location":"Guide/syntax_checking/","title":"Syntax Checking","text":""},{"location":"Guide/syntax_checking/#purpose","title":"Purpose","text":"<p>An editor performs Syntax Checking and notifies the user of syntax errors in their program/script.</p>"},{"location":"Guide/syntax_checking/#usage","title":"Usage","text":"<p>Rapise performs Syntax Checking as you type into the Source Editor. Messages regarding syntax errors can be found in the Warning View.</p> <p>For example, you begin writing a function:</p> <p></p> <p>We have a typo here. We used <code>}</code> instead of <code>)</code>. Once the error is corrected, the warning view clears automatically:</p> <p></p>"},{"location":"Guide/syntax_checking/#custom-js-validation-and-formatting","title":"Custom JS Validation and Formatting","text":"<p>To enforce your own rules for JavaScript validation and formatting, you can utilize linters or JS beautifiers. This can be achieved by applying the OnTextSaved callback for your framework or for the entire PC.</p> <p>For an example of a customizable JS beautifier and formatter, you can refer to here resource. It provides a starting point that can be further customized and configured according to your specific needs.</p>"},{"location":"Guide/syntax_checking/#see-also","title":"See Also","text":"<ul> <li>Source Editor</li> <li>JS Beautifier and Formatter</li> </ul>"},{"location":"Guide/syntax_highlighting/","title":"Syntax Highlighting","text":""},{"location":"Guide/syntax_highlighting/#purpose","title":"Purpose","text":"<p>With Syntax Highlighting, words in a program are displayed so as to immediately indicate their function. Reserved words, variables, literals, and comments may be differentiated by color, boldness, underline etc. Syntax Highlighting makes programs easier to read and modify.</p>"},{"location":"Guide/syntax_highlighting/#usage","title":"Usage","text":"<p>Every javascript file opened in Rapise will display with Syntax Highlighting:</p> <p></p>"},{"location":"Guide/syntax_highlighting/#see-also","title":"See Also","text":"<ul> <li>Source Editor</li> </ul>"},{"location":"Guide/tap/","title":"TAP Results","text":""},{"location":"Guide/tap/#purpose","title":"Purpose","text":"<p>Rapise supports the Test Anything Protocol (TAP). TAP specifies communication between unit tests and testing frameworks, such as Visual Studio MS-Test or NUnit.</p>"},{"location":"Guide/tap/#usage","title":"Usage","text":"<p>The results of a Rapise test are saved to a TAP file in the same directory as the test. Tap files have a .tap extension.</p> <p>TAP\u2019s general format is:</p> <pre><code>1..N\nok\u00a01\u00a0Description\u00a0#\u00a0Directive\n#\u00a0Diagnostic\n....\nok\u00a047\u00a0Description\nok\u00a048\u00a0Description\nmore\u00a0tests....\n</code></pre> <p>For example, a test file\u2019s output might look like:</p> <pre><code>1..4\nok\u00a01\u00a0-\u00a0Input\u00a0file\u00a0opened\nnot\u00a0ok\u00a02\u00a0-\u00a0First\u00a0line\u00a0of\u00a0the\u00a0input\u00a0valid\nok\u00a03\u00a0-\u00a0Read\u00a0the\u00a0rest\u00a0of\u00a0the\u00a0file\nnot\u00a0ok\u00a04\u00a0-\u00a0Summarized\u00a0correctly\u00a0#\u00a0TODO\u00a0Not\u00a0written\u00a0yet\n</code></pre>"},{"location":"Guide/tap/#example","title":"Example","text":"<p>An example Rapise .TAP file looks like the following:</p> <pre><code>#\u00a0Simple\u00a0IE\u00a0Popup\u00a0Example\n#\u00a0Starting\u00a0scenario:\u00a0Test\nok\u00a01\u00a0-\u00a0Open\u00a0popup.DoClick([])\nok\u00a02\u00a0-\u00a0Click\u00a0me.DoClick([])\nok\u00a03\u00a0-\u00a0Close\u00a0me.DoClick([])\nok\u00a04\u00a0-\u00a0Simple\u00a0IE\u00a0Popup\u00a0Example\n</code></pre>"},{"location":"Guide/tap/#see-also","title":"See Also","text":"<ul> <li>More information about tap is available at the TAP wiki: www.testanything.org</li> <li>Visual Studio Unit Testing (MS-Test)</li> <li>NUnit</li> </ul>"},{"location":"Guide/technologies/","title":"Technologies","text":"<p>This section focuses on specific technologies supported by Rapise.</p> <ul> <li>Web Testing</li> <li>Desktop Testing</li> <li>Mobile Testing</li> <li>Web Service Testing</li> <li>Microsoft Dynamics Testing</li> <li>Salesforce Testing</li> <li>Manual Testing</li> <li>Unit Testing</li> <li>Load Testing</li> </ul>"},{"location":"Guide/test_files_dialog/","title":"Test Files View","text":""},{"location":"Guide/test_files_dialog/#purpose","title":"Purpose","text":"<p>The Test Files dialog allows you to navigate and alter the Test hierarchy, including the following:</p> <ul> <li>The main JavaScript script files (<code>*.js</code>)</li> <li>RVL Files (<code>*.rvl.xlsx</code>)</li> <li>The report files (<code>*.trp</code>)</li> <li>Images captured during execution using Checkpoints</li> <li>REST web services (<code>*.rest</code>)</li> <li>SOAP web services (<code>*.soap</code>)</li> <li>Analog recording files (<code>*.arf</code>)</li> <li>Excel spreadsheets (<code>*.xls</code> and <code>*.xlsx</code>)</li> <li>Applications to launch (<code>*.exe</code> or <code>*.bat</code>)</li> <li>Other data files (<code>*.txt</code>)</li> </ul>"},{"location":"Guide/test_files_dialog/#how-to-open","title":"How to Open","text":"<p>Click <code>View &gt; Show &gt; Test Files</code> menu.</p>"},{"location":"Guide/test_files_dialog/#root-node","title":"Root Node","text":"<p>Framework root (for framework mode) or test root (for single test mode).</p>"},{"location":"Guide/test_files_dialog/#show-files-and-folders","title":"Show Files and Folders","text":"<p>Root node features special button that facilitates adding files from disk:</p> <p></p> <p>See Adding Files for Test Folder.</p>"},{"location":"Guide/test_files_dialog/#root-context-menu","title":"Root Context Menu","text":"<ul> <li>Reload: Refreshes objects and test cases.</li> <li>... same as context menu for Folder Node</li> <li>Rebuild Framework Metadata...: Forces the regeneration of metadata for the entire framework.</li> </ul>"},{"location":"Guide/test_files_dialog/#folder-node","title":"Folder Node","text":"<p>Shows contents of the Folder or Filter Group.</p>"},{"location":"Guide/test_files_dialog/#folder-context-menu","title":"Folder Context Menu","text":"<p>Right click on a folder to see:</p> <p></p> <ul> <li>Reload: Refresh group contents. Use it for filter groups \u00a0('IsFilterGroup' is set to 'True' in group properties), e.g. for Report group.</li> <li>Add File(s): Add an existing file to the test.</li> <li>Create<ul> <li>Text File: Create <code>.txt</code> file and add it to the test.</li> <li>JavaScript File: Create <code>.js</code> file and add it to the test.</li> <li>JSON File: Create <code>.json</code> file and add it to the test.</li> <li>Spreadsheet: Create new <code>.xlsx</code> or <code>.xls</code> file and add it to the test.</li> <li>File: Aks for name and extension and create an empty file.</li> <li>WebAppProfile.json: Add new <code>WebAppProfile.json</code> to this test project.</li> <li>User Lib: Create shared user library for this test and sub-tests.</li> </ul> </li> <li>New Group: \u00a0Create a logical grouping of files in the test. This will not add a folder to the file system.</li> <li>New Folder: \u00a0Create a real folder in the test. This will add a folder to the file system.</li> <li>New Sub-Test: Launch Create Sub-Test dialog.</li> <li>Remove from Test: Remove the selected grouping from the test. \u00a0This does not delete included files from your hard disk.</li> <li>Remove All from Disk: Remove all files included into the selected grouping from your hard disk.</li> </ul>"},{"location":"Guide/test_files_dialog/#file-node","title":"File Node","text":"<p>Shows all files actually added to the test / framework.</p>"},{"location":"Guide/test_files_dialog/#context-menu-file","title":"Context Menu (File)","text":"<p>Right click on a file to see:</p> <p></p> <ul> <li>Open: Open the file in Rapise.</li> <li>Open as Spreadsheet: Open this file using built in Spreadsheet editor. May be used to open <code>.rvl.xlsx</code> in spreadsheet editor if you, for example, need to add columns.</li> <li>Open as Text: Open this file using built in Text Editor. May be used to open <code>.csv</code> in source editor if you, for example, need to add columns.</li> <li>Open Externally: Open the file using associated program. E.g. if a Notepad is registered in Windows to open TXT files, then TXT file will be opened by Notepad.</li> <li>Reveal in Explorer: Open Windows File Explorer and show this file in it.</li> <li>Remove from Test: Remove the file from your test. \u00a0This does not delete the file from your hard disk.</li> <li>Remove from Disk: Remove the file from your test and hard drive.</li> <li>Create Data Object: Only available for <code>.xls</code> and <code>.xlsx</code> files. Create Spreadsheet Data Object in the object tree.</li> </ul>"},{"location":"Guide/test_files_dialog/#rvl-sheet","title":"RVL Sheet","text":"<p><code>rvl.xlsx</code> file node automatically expands to show available sheets and their contents.</p>"},{"location":"Guide/test_files_dialog/#context-menu-for-rvl-sheet","title":"Context Menu for RVL Sheet","text":"<ul> <li>Play this Sheet: execute given RVL sheet.</li> </ul>"},{"location":"Guide/test_files_dialog/#sub-test-node","title":"Sub-Test Node","text":"<p>Sub-test nodes represent various types of sub-tests such as Test Cases, Page Objects, and other supplementary sub-tests.</p>"},{"location":"Guide/test_files_dialog/#context-menu-for-sub-test","title":"Context Menu for Sub-Test","text":"<p>Right click on a sub-test to see:</p> <p></p> <p>See menu item descriptions</p>"},{"location":"Guide/test_files_dialog/#folders-and-filter-groups","title":"Folders and Filter Groups","text":"<p>A Group is a virtual folder that may or may not have a physical representation on disk. Filter groups retrieve their contents from disk based on a specified path and wildcard. A RealFolder is an actual folder that has the same name as the group and its path matches the FilterPath of the group.</p>"},{"location":"Guide/test_files_dialog/#folder-properties","title":"Folder Properties","text":"<p>You can configure a filter group or real folder by editing the group properties:</p> <p></p> <ul> <li>FilterPath: The root path used to locate files based on the wildcard (only valid if IsFilterGroup is <code>True</code> or if it is a RealFolder).</li> <li>FilterWildcard: The wildcard filter used to match files (only valid if IsFilterGroup is <code>True</code>).</li> <li>IsFilterGroup: Set to <code>True</code> if the directory should display a list of files that match the FilterWildcard within the FilterPath, or if it is a RealFolder.</li> <li>Name: The name of the group/folder.</li> <li>RealFolder: Represents a physical folder that actually exists on the disk.</li> </ul>"},{"location":"Guide/test_files_dialog/#adding-files-from-test-folder","title":"Adding Files from Test Folder","text":"<ol> <li> <p>Show files in folder: This option enables a combined view where you can see both the files and folders inside the test folder, including those that have already been added to the test project and those that have not yet been added.</p> </li> <li> <p>If a folder has not been added to the project, a <code>+</code> icon is displayed. Clicking on it adds a filter group for that folder.</p> </li> <li> <p>If a file has not been added to the project, a <code>+</code> icon is displayed. Clicking on it adds the file to the test project.</p> </li> </ol>"},{"location":"Guide/test_files_dialog/#see-also","title":"See Also","text":"<ul> <li>Data Driven Testing</li> <li>KB 371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library.</li> <li>KB 363 How to define a profile for Web Application in Rapise.</li> </ul>"},{"location":"Guide/test_param_chooser/","title":"Choose Parameters","text":"<p>The parameter selection dialog is used to choose built-in test parameters when running a test case. It allows you to select the specific parameters required for the test execution.</p> <p>The parameters displayed in the dialog are a subset of those defined for the overall test configuration.</p> <p></p>"},{"location":"Guide/test_param_chooser/#usage","title":"Usage","text":"<p>The Parameters... button in the Choose Test Case Dialog opens up this dialog.</p>"},{"location":"Guide/test_param_chooser/#see-also","title":"See Also","text":"<ul> <li>Testing Frameworks</li> <li>Playback</li> </ul>"},{"location":"Guide/test_to_play_selector/","title":"Choose Test Case Dialog","text":""},{"location":"Guide/test_to_play_selector/#usage","title":"Usage","text":""},{"location":"Guide/test_to_play_selector/#recording-and-playback","title":"Recording and Playback","text":"<p>To perform playback or recording within the testing framework, you must have a test case or a Module / Page Object as the target for execution or recording, respectively. If Rapise detects an active test case or Page Object, it will be automatically selected, and you just need to click the OK button.</p> <p>Since Rapise 8.1 it is possible to select multiple test cases for playback. After execution Rapise displays a combined report. Status of each test case execution is reflected with icon colors in the Object Tree view. Also you may use <code>Last Report</code> menu item of the popup menu for a test case to view individual reports. \u00b6</p>"},{"location":"Guide/test_to_play_selector/#test-execution-parameters","title":"Test Execution Parameters","text":"<p>This section may be also displayed standalone by choosing <code>Test &gt; Playback Settings</code> menu item (requires Rapise 8.2+).</p> <p></p>"},{"location":"Guide/test_to_play_selector/#parameters","title":"Parameters","text":"<p>The bottom section of the dialog allows you to set test parameters. If you need to modify standard parameters related to test execution, you can add missing ones by clicking the Parameters... button, which opens the Choose Parameters dialog.</p> <p>If you want to specify additional framework-specific parameters, you can do so in the Spira Dashboard Parameters Editor.</p>"},{"location":"Guide/test_to_play_selector/#configurations","title":"Configurations","text":"<p>Expand Configurations... to apply one of defined Configurations. Requires Rapise 8.1+.</p>"},{"location":"Guide/test_to_play_selector/#see-also","title":"See Also","text":"<ul> <li>Testing Frameworks</li> <li>Playback</li> <li>Recording</li> <li>Spira Dashboard</li> </ul>"},{"location":"Guide/tests_and_sub_tests/","title":"Tests and Sub-Tests","text":"<p>Please note that the concept of Sub-Tests has been deprecated since Rapise 8. We recommend using Testing Frameworks as a seamless and natural approach to organizing your tests.</p> <p>The concept of Sub-Test provides a flexible and organized approach to working with tests. By utilizing sub-tests, you can achieve the following objectives:</p> <ol> <li>Create multiple test scenarios that operate on the same set of objects and functions.</li> <li>Organize different test scenarios within a single workspace.</li> <li>Utilize sub-tests for conducting cross-browser tests.</li> </ol> <p>We will consider each of described goals separately. The test containing the sub-test(s) we will call base or parent test.</p>"},{"location":"Guide/tests_and_sub_tests/#shared-object-repository-and-shared-functions","title":"Shared Object Repository and Shared Functions","text":"<p>In this case parent test contains all learned objects and user-defined functions.</p> <p></p> <p>For example, the parent test may have objects <code>User Name</code>, <code>Password</code>, <code>Sign On</code>. And function</p> <pre><code>function Login(username, password)\n{\n \u00a0 ...\n}\n</code></pre> <p>SubTest1 may be used to check login with valid credentials, <code>Main.js</code> from SubTest1 looks like:</p> <pre><code>function Test(params)\n{\n \u00a0 Login(\"validuser\", \"validpassword\");\n\n \u00a0 // Now check that login is successful\n \u00a0 Tester.Assert(\"Login leads to welcome message: \", Global.DoWaitFor('Welcome_User'));\n}\n</code></pre> <p>SubTest2 may be used to check login with invalid Credentials (i.e. it is a fail-test). <code>Main.js</code> from SubTest2 looks like:</p> <pre><code>function Test(params)\n{\n \u00a0 Login(\"invaliduser\", \"invvalidpassword\");\n\n \u00a0 // Now check that login is successful\n \u00a0 Tester.Assert(\"Login leads to invalid user object: \", Global.DoWaitFor('Invalid_User'));\n}\n</code></pre> <p>Function <code>Login</code> and objects <code>Welcome_User</code> and <code>Invalid_User</code> are defined in the parent test. The sub-tests are just implementing various scenarios for the same set of objects.</p>"},{"location":"Guide/tests_and_sub_tests/#local-object-repository-and-local-functions","title":"Local Object Repository and Local Functions","text":"<p>Each test has its own objects, functions and scenarios.</p> <p></p> <p>The usage of such an approach is well demonstrated by example. We created a test called SampleMaster and put all Rapise samples into it by using Add File context menu in the the Test Tree dialog. Finally the Files tree looks like:</p> <p></p> <p>All tests in this tree are independent. We use the Sample Master to manage all the tests from a single environment.</p>"},{"location":"Guide/tests_and_sub_tests/#nested-sub-tests","title":"Nested Sub-Tests","text":"<p>Sub-test may have its own nested sub-tests. In this example the parent test contains reference to <code>CreateNewBook</code> sub-test having <code>Login</code> and <code>Logout</code> sub-tests inside:</p> <p></p>"},{"location":"Guide/tests_and_sub_tests/#sub-test-properties","title":"Sub-Test Properties","text":"<p>Sub-test properties are available from the <code>Tag</code> property in the Properties pane:</p> <p></p>"},{"location":"Guide/tests_and_sub_tests/#sub-test-context-menu","title":"Sub-Test Context Menu","text":"<p>The following options are available in the context menu for each of the sub-tests:</p> <p></p> <ul> <li>Play: Execute selected sub-test</li> <li>Record: Start recording into selected sub-test</li> <li>Save: Save options of a sub-test</li> <li>Show Objects: Show objects form a sub-test in the Object Tree</li> <li>Rename: Rename this sub-test</li> <li>Clone: Make a copy of the sub-test</li> <li>Delete: Remove reference to a sub-test from its parent test </li> <li>Create Sub-Test...: Create nested sub-test. It is typical for larger frameworks to have several nested levels of tests for convenience.</li> <li>Open in New Rapise Window...: By default double-click on the sub-test opens it in the current Rapise window. In the case that you need to have both current test and sub-test open simultaneously you may use this option.</li> </ul>"},{"location":"Guide/tests_and_sub_tests/#workdir-and-frameworks","title":"%WORKDIR% and Frameworks","text":"<p>Test and sub-tests is a recommended way to set up test frameworks with Rapise. <code>%WORKDIR%</code> is set to the root test path and it is recommended to use it to refer to other tests or data files.</p> <p>See sample framework https://github.com/Inflectra/rapise-framework-examples/tree/master/SpiraFriendlyWithRvlAndUserLib</p>"},{"location":"Guide/toolbar_rest/","title":"Toolbar: REST","text":""},{"location":"Guide/toolbar_rest/#purpose","title":"Purpose","text":"<p>The REST toolbar is for use with editing REST web service definition files.</p>"},{"location":"Guide/toolbar_rest/#how-to-open","title":"How to Open","text":"<p>The REST toolbar is available anytime you have a REST definition file (<code>.rest</code>) file visible in the Content View.</p>"},{"location":"Guide/toolbar_rest/#toolbar-buttons","title":"Toolbar Buttons","text":"<ul> <li> <p><code>Save Requests</code> - Saves the current REST request definitions to the <code>.rest</code> file.</p> <p></p> </li> <li> <p><code>Update Object Tree</code> - Updates the main Rapise Object Tree with the current REST definitions. This turns each of your REST requests into Rapise learned objects that can be scripted against.</p> </li> <li> <p><code>Add Header</code> - Allows you to add a standard or custom HTTP header to the current REST request:</p> <p></p> </li> <li> <p><code>Add Parameter</code> - Allows you to add a parameter name/value to the current REST request. This is useful when you want your test script to be able to pass through different values (e.g. get book #1 vs. book #2):</p> <p></p> </li> <li> <p><code>Add Credentials</code> - Allows you to add an HTTP basic authentication credential (username and password) to the request. Saves you having to add the header manually (which would require base64 encoding the username and password):</p> <p></p> </li> </ul>"},{"location":"Guide/toolbar_soap/","title":"Toolbar: SOAP","text":""},{"location":"Guide/toolbar_soap/#purpose","title":"Purpose","text":"<p>The SOAP tab is for use with editing SOAP web service definition files (also known as **W**eb **S**ervice **D**efinition **L**anguage (WSDL) files).</p>"},{"location":"Guide/toolbar_soap/#how-to-open","title":"How to Open","text":"<p>The SOAP tab is available anytime you have a SOAP definition file (<code>.soap</code>) file visible in the Content View.</p> <p>You may also open it from the <code>View &gt; SOAP</code> menu items. This will open 1<sup>st</sup> <code>.soap</code> file in the project (if any). Otherwise it does nothing.</p> <p>If there is no <code>.soap</code> file yet in the project, you should use the Add Web Service Dialog.</p>"},{"location":"Guide/toolbar_soap/#toolbar-controls","title":"Toolbar Controls","text":"<ul> <li> <p><code>Save</code>  - Saves the current set of SOAP operations to the <code>.soap</code> file being edited.</p> <p></p> </li> <li> <p><code>Endpoint</code> The Endpoint section lets you enter in the URL to the SOAP Web Service Definition Language (WSDL) file that contains a definition of all the SOAP operations exposed by the web service.</p> <p>You enter in the URL in the top box and then click the <code>Get WSDL</code> button.</p> <p></p> </li> <li> <p><code>Get WSDL</code> - Update service definition based on the current <code>Endpoint</code> value. </p> </li> <li> <p><code>Custom Endpoint</code> - you can click on this button to toggle the display of the custom endpoint text box. This lets you override the default URL returned by the WSDL file and can be useful if you want to use the WSDL from one instance and invoke the operations against a different instance.</p> <p></p> </li> <li> <p><code>Add Credentials</code> - Allows you to add an HTTP basic authentication credential (username and password) to the SOAP operation. This is useful for SOAP operations that use HTTP basic authentication.</p> <p></p> <p></p> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/","title":"Toolbar: SpreadSheet Editor","text":""},{"location":"Guide/toolbar_spreadsheet/#ribbon-tab-spreadsheet","title":"Ribbon Tab: Spreadsheet","text":""},{"location":"Guide/toolbar_spreadsheet/#purpose","title":"Purpose","text":"<p>The Spreadsheet tab lets you edit Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing.</p>"},{"location":"Guide/toolbar_spreadsheet/#how-to-open","title":"How to Open","text":"<p>The Spreadsheet tab is available anytime you have an excel (xls or xlsx) file visible in the Content View.</p>"},{"location":"Guide/toolbar_spreadsheet/#clipboard","title":"Clipboard","text":"<p>The Clipboard section provides the following options:</p> <ul> <li> <p>Paste - this will paste the spreadsheet cells from the clipboard to the current selection</p> </li> <li> <p>Cut - this will cut the current selection and put into the clipboard for pasting</p> </li> <li> <p>Copy - this will copy the current selection and put into the clipboard for pasting</p> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#font","title":"Font","text":"<p>The Font section provides the following options:</p> <ul> <li> <p>Font Name - this lets you change the font typeface used in the selected cells</p> </li> <li> <p>Font Size - this lets you specify the exact font size to use</p> </li> <li> <p>Increase Font Size - this lets you increase the current font size by 1pt</p> </li> <li> <p>Decrease Font Size - this lets you decrease the current font size by 1pt</p> </li> <li> <p>Bold - this lets you make the selected text bold</p> </li> <li> <p>Italic - this lets you make the selected text italics</p> </li> <li> <p>Strikethrough - this lets you mark the text as deleted (strikethrough)</p> </li> <li> <p>Borders - this lets you change the borders for the selected cells</p> </li> <li> <p>Fill Color - this lets you change the background color of the selected cells</p> </li> <li> <p>Text Color - this lets you change the foreground color of the selected cells</p> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#alignment","title":"Alignment","text":"<p>The Alignment section provides the following options:</p> <ul> <li> <p>Top Align - This aligns the cell text vertically to the top</p> </li> <li> <p>Middle Align - This aligns the cell text vertically to the middle</p> </li> <li> <p>Bottom Align - This aligns the cell text vertically to the bottom</p> </li> <li> <p>Left Align - This aligns the cell text horizontally to the left</p> </li> <li> <p>Center Align -This aligns the cell text horizontally to the center</p> </li> <li> <p>Right Align -This aligns the cell text horizontally to the right</p> </li> <li> <p>Outdent - This reduces the indentation of the text by one position</p> </li> <li> <p>Indent - This increases the indentation of the text by one position</p> </li> <li> <p>Wrap Text - This turns on/off the wrapping of text inside the selected cells</p> </li> <li> <p>Merge &amp; Center - This gives you options to merge and center multiple cells:</p> <p></p> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#style","title":"Style","text":"<p>The Style section provides the following options:</p> <ul> <li> <p>Format as Table - this lets you automatically format a range of cells as a predefined table style:</p> <p></p> </li> <li> <p>Prebuilt Styles - this option displays a list of predefined styles that you can apply to the selected cells:</p> <p></p> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#cells","title":"Cells","text":"<p>The Cells section provides the following options:</p> <ul> <li> <p>Insert - this menu option lets you insert new cells, rows, columns, or even a whole sheet.</p> </li> <li> <p>Delete -this menu option lets you delete specific cells, rows, columns, or even a whole sheet.</p> </li> <li> <p>Format:</p> </li> <li> <ul> <li>Cell Size - this option lets you specify the row height and/or column width</li> </ul> </li> <li> <ul> <li>Visibility - this option lets you show/hide specific rows or columns (they are not removed, unlike delete, just hidden)</li> </ul> </li> <li> <ul> <li>Organize Sheets - this option lets you rename the name of the sheet.</li> </ul> </li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#ribbon-tab-view","title":"Ribbon Tab: View","text":""},{"location":"Guide/toolbar_spreadsheet/#purpose_1","title":"Purpose","text":"<p>The View tab lets you change the display of Microsoft Excel spreadsheet files from within Rapise. This is useful when you want to be able to edit the test data used in data-driven automated testing.</p>"},{"location":"Guide/toolbar_spreadsheet/#how-to-open_1","title":"How to Open","text":"<p>The View tab is available anytime you have an excel (xls or xlsx) file visible in the Content View.</p>"},{"location":"Guide/toolbar_spreadsheet/#show","title":"Show","text":"<p>This section lets you choose whether to display the grid lines, formula bar and/or the headings in the spreadsheet editor.</p>"},{"location":"Guide/toolbar_spreadsheet/#zoom","title":"Zoom","text":"<p>This section contains the following options: *   Zoom - This lets you change the display zoom level: </p> <ul> <li>100% - This quickly resets the zoom back to 100%</li> <li>Zoom to Selection - This auto-zooms to display the current selection</li> </ul>"},{"location":"Guide/toolbar_spreadsheet/#window","title":"Window","text":"<p>This section contains the following options: *   Freeze Panes - this lets you freeze specific rows/columns so that they don't scroll: </p> <ul> <li>Split - this lets you split the display into multiple windows</li> </ul>"},{"location":"Guide/tooltips/","title":"Tooltips","text":""},{"location":"Guide/tooltips/#purpose","title":"Purpose","text":"<p>Tooltips let you view a variable's value during debugging.</p>"},{"location":"Guide/tooltips/#usage","title":"Usage","text":"<ol> <li>Put a breakpoint in the script at or near where you wish to investigate</li> <li>Mouse over variables as you advance through the script. \u00a0 A small box will popup, displaying the variables' values:</li> </ol>"},{"location":"Guide/tooltips/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> <li>Breakpoints</li> </ul>"},{"location":"Guide/tutorial_custom_library/","title":"Tutorial: Custom Library","text":"<p>In this section, you will learn how to create a Custom Library and add support for a third-party GUI control to Rapise. \u00a0We will be using a demo application called CustomControlApp. Our Custom Library \u00a0will be simple. \u00a0It will allow to \u00a0Record and Learn objects of CustomListboxControl type and also playback actions for this type of objects. This tutorial is complemented by a ready test CustomControlTest which you'll be able to examine and run.</p>"},{"location":"Guide/tutorial_custom_library/#tutorial-data","title":"Tutorial Data","text":"<p>CustomControlApp Folder</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlApp\n</code></pre> <p>You may build this application yourself in Microsoft Visual Studio (C++) or use ready executable:</p> <pre><code>&lt;CustomControlApp folder&gt;\\Release\\CustomControlApp.exe\n</code></pre> <p>CustomControlTest Folder</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest\n</code></pre> <p>Custom Library File</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest\\Lib\\LibUser\\LibUser.js\n</code></pre> <p>If you prefer active experimentation learning style you may first skip to subsection 8 and after playing with the ready test and library start reading from the beginning.</p>"},{"location":"Guide/tutorial_custom_library/#1-application-under-test","title":"1. Application Under Test","text":"<p>CustomControlApp contains an object of type CustomListboxControl. The control is similar to a single-select listbox, but each line item has a corresponding progress bar indicator indicating a current value. Using the left/right cursor keys you can change the value of the currently focused item.</p> <p></p> <p>If you will try to record a test for CustomControlApp using just Generic library you'll see that CustomListboxControl is treated as Simulated Object and all interactions with it are recorded as mouse clicks and key presses. For some tests such functionality is sufficient, but if you want to be able to recognize CustomListboxControl as a list, get its items, select an item by name, set value for a particular item you need to create a Custom Library.</p> <p></p>"},{"location":"Guide/tutorial_custom_library/#2-libuser","title":"2. LibUser","text":"<p>In <code>Files</code> view right click the test node and choose <code>Create &gt; User Lib...</code></p> <p></p> <p>Specify name of your library (<code>User</code>) and click <code>OK</code> button.</p> <p></p> <p>LibUser library consists of two files:</p> <ol> <li>LibUser.jslib which is a library declaration file.</li> <li>LibUser.js which is a library definition file.</li> </ol> <p></p> <p>Double-click <code>LibUser.js</code> file to open it in the editor.</p>"},{"location":"Guide/tutorial_custom_library/#3-analyze-customlistboxcontrol-in-spy","title":"3. Analyze CustomListboxControl in Spy","text":"<p>Launch CustomControlApp and open Spy. Using the Accessible option in the Spy tool, spy on the CustomListboxControl. It is easy to see that CustomListboxControl has the following accessibility tree: <code>ROLE_SYSTEM_WINDOW</code> top node contains <code>ROLE_SYSTEM_LIST</code> child that in its turn may contain zero to many <code>ROLE_SYSTEM_SLIDER</code> nodes.</p> <p></p>"},{"location":"Guide/tutorial_custom_library/#4-create-matcher-rule-for-customlistboxcontrol","title":"4. Create Matcher Rule for CustomListboxControl","text":"<p>With knowledge of CustomListboxControl accessibility tree we can create a matcher rule that will make CustomListboxControl recognizable by Rapise. Write the following code into <code>LibUser.js</code>:</p> <pre><code>/**\n    ROLE_SYSTEM_WINDOW\n        ROLE_SYSTEM_LIST (CustomListboxControl)\n        ROLE_SYSTEM_SLIDER*\n*/\nnew SeSMatcherRule(\n{\n    object_type: \"CustomListboxControl\",\n    object_flavor: \"List\",\n    behavior: [Win32ItemSelectable, Win32CustomListboxControl],\n    role: \"ROLE_SYSTEM_WINDOW\",\n    or_rules: [\n        {\n            role: \"regex:ROLE_SYSTEM_LIST\",\n            save_to: \"list\",\n            or_rules: [\n                {\n                    role: \"ROLE_SYSTEM_SLIDER\",\n                    zero_to_many: true,\n                    save_to: \"items\"\n                }\n            ]\n        }\n    ]\n});\n</code></pre> <p>Each matcher rule (instance of <code>SeSMatcherRule</code>) is a tree like structure that describes a particular GUI control type. Each node in this tree is a rule object that is defined by the following simplified grammar:</p> <pre><code>or_rules: (rule)+\nand_rules: (rule)+\n\nrule:\n\u00a0 \u00a0 role\n\u00a0 \u00a0 [save_to]\n\u00a0 \u00a0 [zero_to_many]\n\u00a0 \u00a0 [or_rules]\n\u00a0 \u00a0 [and_rules]\n</code></pre> <ul> <li>object_type - the string that uniquely identifies this matcher rule and designates type of the control.</li> <li>object_flavor - visual type of the control, it is used to show an appropriate icon in the Object Tree and to filter actions and properties in composite behavior patterns.</li> <li>behavior - array of behavior patterns that define object actions, properties and events.</li> <li>role - accessibility role of the corresponding node in the accessibility tree of the control. The role equals to a Role of the accessible element as displayed in the Spy.</li> <li>or_rules - array of rules (defining child nodes) joined with logical OR. Any OR rule can be satisfied to consider child nodes matched.</li> <li>and_rules - array of rules (defining child nodes) joined with logical AND. All AND rules must be satisfied to consider child nodes matched.</li> <li>save_to - <code>SeSObject</code> created for accessibility tree node corresponding to this rule is assigned to the field with <code>save_to</code> name of the top level <code>SeSObject</code>. I.e. if rule has save_to: <code>items</code> element then you can access learned element using <code>SeS('ObjID').items</code>. In many cases such named fields are used in behavior patterns.</li> <li>zero_to_many - if this property is present in the rule and set to 'true' then it means that parent rule may contain from zero to many of child nodes that match this rule.</li> </ul>"},{"location":"Guide/tutorial_custom_library/#5-customlistboxcontrol-behavior","title":"5. CustomListboxControl Behavior","text":"<p>After defining the matcher rule we can proceed to behavior patterns. Behavior patterns operate with <code>SeSObject</code> contents, so they should not be aware about accessibility tree of the underlying GUI control and thus the same behavior pattern can be assigned to different matcher rules. There are a plenty of behavior patterns defined in</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\SeSBehavior.js\n</code></pre> <p>After looking at those patterns it is possible to notice that <code>Win32ItemSelectable</code> pattern is the one that perfectly suites for capturing selection accessibility events and for selecting list items. This pattern contains <code>OnSelect</code> event that is called during recording when an item is selected in list and <code>DoSelectItem</code> action used to select desired item during playback.</p> <p>But using just <code>Win32ItemSelectable</code> behavior pattern is not sufficient. It does not support recording of progress bar value change events and it does not support setting progress bar value during playback. That is why we need to define new behavior pattern: <code>Win32CustomListboxControl</code>. Look at its code:</p> <pre><code>var Win32CustomListboxControl =\n{\n    actions: [\n        {\n            actionName: \"SetItemValue\",\n            DoAction: function(/**string*/ itemName, /**number*/ value)\n            {\n                var item = this.findItemByName(itemName);\n                if(null!=item)\n                {\n                    item.getTopObject().instance.HWND.SetForegroundWindow();\n                    item.instance.Value = value;\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            actionName: \"GetItemValue\",\n            DoAction: function(/**string*/ itemName)\n            {\n                var item = this.findItemByName(itemName);\n                if(null!=item)\n                {\n                    return parseInt(item.instance.Value);\n                }\n                return null;\n            }\n        }\n    ],\n    events:\n    {\n        OnValueChange: function(/**SeSObject*/ param)\n        {\n            var itemName = param.name;\n            if(l2)Log2(\"OnValueChange:\"+itemName);\n            var item = this.findItemByName(itemName);\n            if(null!=item)\n            {\n                var value = item.instance.Value;\n                RegisterAction(this, param.name, \"SetItemValue\", parseInt(value),\n                    \"Set item:'\"+param.name+\"' to \"+value+\" in '\"+this.name+\"'\");\n            }\n            return;\n        }\n    }\n};\n</code></pre> <p>During recording process <code>OnValueChange</code> function captures progress bar change events and calls <code>RegisterAction</code> function that adds <code>SetItemValue</code> action to the test.</p> <p>Put this code into <code>LibUser.js</code> before the rule created in the previous step.</p>"},{"location":"Guide/tutorial_custom_library/#6-customlistboxcontrol-specific-accessibility-events","title":"6. CustomListboxControl Specific Accessibility Events","text":"<p>What accessibility events are fired when a user changes the progress bar value? You can use Accessible Event Watcher to find out. Launch CustomControlApp and start Accessible Event Watcher. Make sure that mode is set to <code>WinEvents (In Context)</code></p> <p></p> <p>Select an item in CustomControlApp and advance its progress bar using right key. Accessible Event Watcher will show you captured events:</p> <p></p> <p>You can see that changing progress bar leads to generation of <code>OBJ_VALUECHANGE</code> events. To get event name to use with Rapise open Event Constants page and search for relevant value.</p> <p></p> <p>Not all accessibility events are processed and propagated by Rapise engine. <code>EVENT_OBJECT_VALUECHANGE</code> is one of such events. To consume this event and make an appropriate call to <code>OnValueChange</code> of <code>Win32CustomListboxControl</code> you need to add and register custom accessibility event handler:</p> <pre><code>/**\n * Custom handler for EVENT_OBJECT_VALUECHANGE event\n */\nfunction CustomRegisterAccessibleEvent(evt, etxt)\n{\n    if(etxt.indexOf(\"EVENT_OBJECT_VALUECHANGE\")&gt;=0)\n    {\n        var ao;\n        try\n        {\n            ao = evt.AccessibleObject;\n            if(!_SeSIsValidObject(ao)) return false;\n        }\n        catch(e)\n        {\n            Log(\"Error getting event object:\"+e.Description+\"/\"+etxt);\n            return false;\n        }\n\n        var ro = SeSCacheAccessibleObject(ao);\n        if (l3 &amp;&amp; ro) Log3(\"CustomListboxControl: \" + ro.toString());\n\n        if (ro != null &amp;&amp; (\"OnValueChange\" in ro))\n        {\n            ro.OnValueChange();\n        }\n\n        return true;\n    }\n    return false;\n}\n\ng_customEventHandlers.push(CustomRegisterAccessibleEvent);\n</code></pre>"},{"location":"Guide/tutorial_custom_library/#7-record-and-playback","title":"7. Record and Playback","text":"<p>Update <code>LibUser.jslib</code> library definition for automatic loading.</p> <p></p> <p>Now you are ready to record and playback a test. Just remember that in Select an Application to Record dialog you need to uncheck Auto library and select Generic library.</p> <p></p> <p>Notice Action names in Recording Activity dialog, they correspond to <code>Win32ItemSelectable</code> and <code>Win32CustomListboxControl</code> behaviors.</p> <p></p>"},{"location":"Guide/tutorial_custom_library/#8-customcontroltest","title":"8. CustomControlTest","text":"<p>This tutorial is complemented by a ready test CustomControlTest which you can examine and run. Open CustomControlTest in Rapise from</p> <p><pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Extensibility\\CustomLibrary\\CustomControlTest\n</code></pre> </p> <p>Tip: It is possible to launch CustomControlApp right from Rapise, just double click on CustomControlApp.exe in the file tree.</p>"},{"location":"Guide/tutorial_custom_library/#9-wrap-up-implementation-sequence","title":"9. Wrap-up: Implementation Sequence","text":"<p>Full support for a custom object requires support for Recording, Learn and Playback. Let's go over created library and specify the purpose of each component in it.</p> <ul> <li>Matcher Rule - it is used to recognize the object inside an application, required for Recording, Learn and Playback.</li> <li>Events in Behavior Patterns - handling events is required for Recording.</li> <li>Actions in Behavior Patterns - actions are used to examine or change state of the control, required for Playback.</li> <li>Custom Accessibility Event Handler - required for Recording if some important events are not processed by Rapise engine by default.</li> </ul>"},{"location":"Guide/tutorial_exploratory_testing/","title":"Tutorial: Manual Testing","text":""},{"location":"Guide/tutorial_exploratory_testing/#purpose","title":"Purpose","text":"<p>Exploratory manual testing is used for situations where you have a new or changing application and the user interface is still evolving. Traditional manual testing, where you create a test case ahead of time, define the prescriptive test steps and then assign it to the tester does not make sense in such cases. The solution is to perform exploratory testing, where you explore using the application at the same time as creating the test script. The created test script can then be published to your test management system (i.e. SpiraTest) for future regression testing.</p> <p>Rapise can help accelerate and optimize exploratory manual testing. Rapise lets you walk through the application, capturing your interactions as you use it, recording screenshots of the objects and screens you interact with. From this, Rapise will create a fully formed test script ready to use.</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-1-creating-a-new-test","title":"Step 1 - Creating a New Test","text":"<p>To start manual testing, simply create your test as normal using the New Test dialog box and choose Manual methodology: </p> <p></p> <p>Then once the test has been created, click on the <code>Tools &gt; Manual Steps</code> menu item and then you will be taken to the Manual Editor with the Manual Toolbar visible.</p> <p>The test step list will initially be empty:</p> <p></p>"},{"location":"Guide/tutorial_exploratory_testing/#step-2-recording-some-steps","title":"Step 2 - Recording Some Steps","text":"<p>Now you should open up the application you want to record from. In this example we shall be testing the built-in Microsoft Paint application. This is a good candidate for manual testing as a lot of the functionality is hard to test automatically since there is a simple drawing canvas rather than discrete buttons and data elements to test.</p> <p>To make sure that we have screenshots recorded, whilst keeping the size of the screenshots reasonable, use the following recording options:</p> <p></p> <p>Now click the Record Manual button (or menu <code>Test &gt; Record Manual</code>) and choose MS-Paint from the list of running applications in Select Application to Record dialog and then click 'Select' to start recording.</p> <p>As you click through the application, the recording will display the list of steps and actions being captured:</p> <p></p> <p>In this example, we created a new canvas, chose the Pencil tool, created a drawing using the pencil, entered some text and then made it bold:</p> <p></p> <p>When you click Finish to complete the recording, Rapise will display the list of populated manual test steps with the embedded screen captures:</p> <p></p> <p>Notice that each recorded test step already has a <code>Description</code> and an <code>Expected Result</code> with a screenshot of what the user was doing. In addition, the <code>Sample Data</code> contains the equivalent of Rapise automation code for reference. This can be useful later if you will decide to automate this test.</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-3-editing-the-steps","title":"Step 3 - Editing the Steps","text":"<p>Typically you may want to add some additional steps (e.g. we added a line to describe the process of starting up MS Paint), delete any duplicate/unnecessary steps and reword them so that they make the most sense to the tester. In our example we used the manual editing screen to update the steps as follows:</p> <p></p> <p>Click Save to make sure the updates are all saved locally. Now before you can execute these tests, you will need to Save them to Spira (our web-based test management system).</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-4-saving-to-spira","title":"Step 4 - Saving to Spira","text":"<p>Click on the option to Save to Spira, you will be asked to confirm the creation of the document folder in Spira that will hold the test files:</p> <p></p> <p>Click on Create and then click OK in the <code>Synchronize Files</code> dialog. The manual test will be saved to Spira. You will see that this process adds the unique Spira test step IDs to each step. They are displayed using the format [TS:xxx]. This special token [TS:xxx] can be used in <code>Tester.Assert</code> commands to relate specific verification points with test steps during automated testing.</p> <p></p> <p>Now that the test has been saved in Spira, you can click on the View Manual Test in Spira toolbar button to see how the test steps look inside Spira.</p> <p></p> <p></p> <p>Now that we have finished the recording, we can now play back this manual test.</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-5-executing-the-manual-test","title":"Step 5 - Executing the Manual Test","text":"<p>Choose the Release from the list of those available in the project:</p> <p></p> <p>Then click on the Execute icon to start manual test execution. That will bring up the manual playback screen:</p> <p></p> <p>On this screen, we shall follow through the steps listed in the test case. This involves opening up MS Paint, creating a new canvas, adding some lines using the pencil and then adding some text using the text tool. As you perform these steps, click on the <code>Pass</code> button to indicate that each step has passed. You can also minimize the manual playback screen by clicking the <code>&gt;|</code> button.</p> <p>Once you get to Step 6, we shall pretend that MS Paint failed to display the text correctly. Enter in the Actual Result a message to that effect:</p> <p></p> <p>Next we shall attach a screenshot of what actually happened and log a test failure.</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-6-capturing-and-annotating-a-screenshot","title":"Step 6 - Capturing and Annotating a Screenshot","text":"<p>Click on the Image icon in the rich text editor associated with the Actual Result text box. That will bring up the Drawing Tools screen that asks you to draw a rectangle to select a portion of the current screen to capture:</p> <p></p> <p>If the MS Paint application is not in the foreground, just click Esc on your keyboard to abort, rearrange your windows and then try again. Once you have selected the rectangle, the drawing tools will display your selected image in the image editor:</p> <p></p> <p>You can now use the annotation tools to add labels, text and other items to explain the issue that you found:</p> <p></p> <p>In the example above, we added a red ellipse, arrow and text to mark the issue that was seen in MS-Paint. Once you are happy with your image, click Accept and the image will be included in the test Actual Result:</p> <p></p> <p>Finally, Fail the Step 6 and click on the Finish button.</p> <p></p> <p>The results will be posted to Spira.</p>"},{"location":"Guide/tutorial_exploratory_testing/#step-7-viewing-the-results","title":"Step 7 - Viewing the Results","text":"<p>Now to view the results in Spira, click on the View &gt; View Manual Test in Spira menu. That will bring up the test case in Spira. Now click on the <code>Failed</code> hyperlink in Spira and the new test run will be displayed:</p> <p></p> <p>If you scroll down, you can see the individual test steps that were executed, with the associated actual result (including the captured screenshot):</p> <p></p> <p>Congratulations! You have now successfully executed a manual test using Rapise.</p>"},{"location":"Guide/tutorial_exploratory_testing/#see-also","title":"See Also","text":"<ul> <li>Manual Testing</li> <li>Manual Recording</li> <li>Manual Playback</li> </ul>"},{"location":"Guide/tutorial_java_testing/","title":"Tutorial: Java Testing (RVL)","text":"<p>In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application:</p> <ul> <li>Java AWT Apps</li> <li>Java Swing Apps</li> <li>Java SWT Apps</li> </ul> <p>This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version, we have a separate tutorial.</p>"},{"location":"Guide/tutorial_java_testing/#example-1-launching-the-sample-awtswing-application","title":"Example 1 - Launching the Sample AWT/Swing Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA\n</code></pre> <p>and right-click on the <code>x86run.cmd</code> file and choose Run as Administrator.</p> <p>If you have Java configured correctly, you will see:</p> <p></p> <p>If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing.</p> <p>Once the application is started, open up Rapise and click <code>File &gt; New Test</code>:</p> <p></p> <p>Enter the name <code>Java Test 1</code> as the name and choose Basic: Windows Desktop Application as the methodology.</p> <p>On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language:</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the \"Select an Application to Record\" dialog:</p> <p></p> <p>Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select.</p> <p>Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, Rapise will prompt you to confirm where you want the recorded test steps to be placed:</p> <p></p> <p>Select the first row in the test grid and click Insert Here. You will see the recorded test script and learned objects in Rapise:</p> <p></p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example:</p> <ul> <li>Type = Action</li> <li>Object = button1</li> <li>Action = DoAction</li> </ul> <p>This process is illustrated below:</p> <p></p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy:</p> <p></p> <p>You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_java_testing/#example-2-launching-the-sample-swt-application","title":"Example 2 - Launching the Sample SWT Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT\n</code></pre> <p>and double-click on the <code>JavaSWTAUT.bat</code> file to start the sample application.</p> <p>If you have Java configured correctly, you will see:</p> <p></p> <p>If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing.</p> <p>Once the application is started, open up Rapise and click the menu <code>FIle &gt; New Test</code>:</p> <p></p> <p>Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language:</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the Select an Application to Record dialog:</p> <p></p> <p>Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select.</p> <p>Now in the sample application click on some of the SWT controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, Rapise will prompt you to confirm where you want the recorded test steps to be placed:</p> <p></p> <p>Select the first row in the test grid and click Insert Here. You will see the recorded test script and learned objects in Rapise:</p> <p></p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>You can add steps to your script using any of the learned objects from the left-hand page (or any of the standard Global utility objects). To do this, click on the blank row at the end of the recording and choose the following options from the dropdown lists in that row, for example:</p> <ul> <li>Type = Action</li> <li>Object = Image_Button</li> <li>Action = DoAction</li> </ul> <p>This process is illustrated below:</p> <p></p> <p>You can drag and drop any of the learned objects from the left-hand pane into the main test script.</p> <p>When you click Play, Rapise will play back your test script against the application.</p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy:</p> <p></p> <p>You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_java_testing/#see-also","title":"See Also","text":"<ul> <li>Java AWT/Swing Testing</li> <li>Java SWT Testing</li> <li>Testing Oracle Forms</li> </ul>"},{"location":"Guide/tutorial_java_using_javascript/","title":"Tutorial: Java Testing (JavaScript)","text":"<p>In this section, you will learn how to record and execute a Rapise script against a Java applications. We will show you have to test the following three different types of Java application:</p> <ul> <li>Java AWT Apps</li> <li>Java Swing Apps</li> <li>Java SWT Apps</li> </ul> <p>This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL), please go to the main Tutorial instead.</p>"},{"location":"Guide/tutorial_java_using_javascript/#example-1-launching-the-sample-awtswing-application","title":"Example 1 - Launching the Sample AWT/Swing Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\Java\\AUTJAVA\n</code></pre> <p>and right-click on the <code>x86run.cmd</code> file and choose Run as Administrator.</p> <p>If you have Java configured correctly, you will see:</p> <p></p> <p>If the application doesn't start correctly, make sure you have Java SE and the Rapise Java Bridge installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java AWT/Swing Testing.</p> <p>Once the application is started, open up Rapise and click <code>File &gt; New Test</code>:</p> <p></p> <p>Enter the name <code>Java Test 1</code> as the name and choose Basic: Windows Desktop Application as the methodology.</p> <p>Choose the JavaScript option during test creation instead of RVL.</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the \"Select an Application to Record\" dialog:</p> <p></p> <p>Choose the AUT JAVA process from the list of running applications, change the library selection from Auto to Java and click Select.</p> <p>Now in the sample application click on some of the AWT and/or Swing controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, you will see the recorded test script and learned objects:</p> <p></p> <p>You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"button1\") (for example) and Rapise will display the list of available functions.</p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the Java Spy:</p> <p></p> <p>You can then use the Java Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_java_using_javascript/#example-2-launching-the-sample-swt-application","title":"Example 2 - Launching the Sample SWT Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\JavaSWT\\AUTJavaSWT\n</code></pre> <p>and double-click on the <code>JavaSWTAUT.bat</code> file to start the sample application.</p> <p>If you have Java configured correctly, you will see:</p> <p></p> <p>If the application doesn't start correctly, make sure you have Java SE installed and the JAVA_HOME environment variable correctly set to your Java Runtime (JRE). For more details on this, please refer to: Java SWT Testing.</p> <p>Once the application is started, open up Rapise and click the menu <code>FIle &gt; New Test</code>:</p> <p></p> <p>Enter the name \"Java Test 2\" as the name and choose Basic: Windows Desktop Application as the methodology.</p> <p>Choose the JavaScript option during test creation instead of RVL.</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the Select an Application to Record dialog:</p> <p></p> <p>Choose the Test Java SWT Application from the list of running applications, change the library selection from Auto to UI Automation and SWT and click Select.</p> <p>Now in the sample application click on some of the SWT controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, you will see the recorded test script and learned objects:</p> <p></p> <p>You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK\") (for example) and Rapise will display the list of available functions.</p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn. When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy:</p> <p></p> <p>You can then use the UIAutomation Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_java_using_javascript/#see-also","title":"See Also","text":"<ul> <li>Java AWT/Swing Testing</li> <li>Java SWT Testing</li> </ul>"},{"location":"Guide/tutorial_qt_framework/","title":"Tutorial: Qt Framework (RVL)","text":"<p>Rapise includes support for testing applications written using the Qt Framework and QWidget controls.</p> <p>To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled. This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below).</p> <p>This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added.</p> <p>This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version, we have a separate tutorial.</p>"},{"location":"Guide/tutorial_qt_framework/#testing-the-sample-qt-application","title":"Testing the Sample Qt Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework\n</code></pre> <p>and double-click on the <code>QtWidgetApp.exe</code> file to start the sample application.</p> <p>If you have everything configured correctly, you will see:</p> <p></p> <p>Once the application is started, open up Rapise and click menu <code>File &gt; New Test</code>:</p> <p></p> <p>Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. On the next page, choose Rapise Visual Language (RVL) as the choice of Scripting language:</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the \"Select an Application to Record\" dialog:</p> <p></p> <p>Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click <code>Select</code>.</p> <p>Now in the sample application click on some of the Qt controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, Rapise will prompt you to confirm where you want the recorded test steps to be placed:</p> <p></p> <p>Select the first row in the test grid and click Insert Here. You will see the recorded test script and learned objects in Rapise:</p> <p></p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool.</p> <p>The Spy tool lets you see the objects in the application in a hierarchy that you can learn.</p> <p>When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy:</p> <p></p> <p>You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_qt_framework/#see-also","title":"See Also","text":"<ul> <li>Testing Qt Framework Applications</li> </ul>"},{"location":"Guide/tutorial_qt_using_javascript/","title":"Using JavaScript","text":"<p>Rapise includes support for testing applications written using the Qt Framework and QWidget controls.</p> <p>To ensure that Rapise can access the UI elements and properties in the Qt application being tested, MSAA (Microsoft Active Accessibility) support for your Qt application must be enabled. This provides additional information on Qt UI elements to automation software like Rapise and can be accomplished by shipping and loading the \"Accessible Plug-in\" included in the Qt SDK (Software Development Kit) with the Qt application under test (see below).</p> <p>This tutorial illustrates the ability of Rapise to test such Qt applications using a sample application that already has the MSAA support added.</p> <p>This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL), please go to the main Tutorial instead.</p>"},{"location":"Guide/tutorial_qt_using_javascript/#testing-the-sample-qt-application","title":"Testing the Sample Qt Application","text":"<p>On the Start Page of Rapise, click on the Fetch Samples button to make sure you have all of the latest samples available.</p> <p>Then go to</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\QtFramework\n</code></pre> <p>and double-click on the <code>QtWidgetApp.exe</code> file to start the sample application.</p> <p>If you have everything configured correctly, you will see:</p> <p></p> <p>Once the application is started, open up Rapise and click menu <code>FIle &gt; New Test</code>:</p> <p></p> <p>Enter the name Qt Sample Test as the name and choose Basic: Windows Desktop Application as the methodology. Then choose JavaScript as the scripting choice:</p> <p></p> <p>Once the test is created, you will see:</p> <p></p> <p>Click on the Record button to display the \"Select an Application to Record\" dialog:</p> <p></p> <p>Choose the Sample QtWidget Application from the list of running applications, change the library selection from Auto to Qt Framework and click <code>Select</code>.</p> <p>Now in the sample application click on some of the Qt controls. Rapise will record the actions:</p> <p></p> <p>When you click Finish, you will see the recorded test script and learned objects:</p> <p></p> <p>You can drag and drop any of the learned objects from the left-hand pane into the main test script. You can also just type SeS(\"OK_\") (for example) and Rapise will display the list of available functions.</p> <p>When you click Play, Rapise will play back your test script against the application:</p> <p></p> <p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool.</p> <p>The Spy tool lets you see the objects in the application in a hierarchy that you can learn.</p> <p>When you are in the middle of recording, click on the Spy button and Rapise will display the Accessible Spy:</p> <p></p> <p>You can then use the Accessible Spy to track and find objects in the application hierarchy. You can navigate to parent objects by right-clicking on them and choosing Parent. Once you have found the desired object, click on the Learn Object in the Spy toolbar and Rapise will add the object in the Spy to the list of learned objects that you can test against.</p>"},{"location":"Guide/tutorial_qt_using_javascript/#see-also","title":"See Also","text":"<ul> <li>Testing Qt Framework Applications</li> </ul>"},{"location":"Guide/tutorial_record_and_playback/","title":"Tutorial: Web Testing (RVL)","text":"<p>In this section, you will learn how to record and execute a Rapise script against a web application. \u00a0We will be using a demo application called Library Information System. \u00a0Our test will be simple. \u00a0It will log on to the library catalog, navigate to the main menu, and click on all of the menu options to make sure the links are working.</p> <p>You are viewing the codeless version of the tutorial. It demonstrates usage of Rapise Visual Language. To view JavaScript-based tutorial click here.</p>"},{"location":"Guide/tutorial_record_and_playback/#open-rapise-and-create-new-test","title":"Open Rapise and Create New Test","text":"<p>Go to Start &gt; All Programs &gt; Inflectra &gt; Rapise. \u00a0The following window should appear.</p> <p></p> <p>Select <code>File &gt; Create New &gt; New Test</code> in the main menu.</p> <p></p> <p>If this is your first time using Rapise on this computer, you may see the following dialog box:</p> <p></p> <p>If you see this, it means that Rapise is trying to connect to a SpiraTest server. SpiraTest is our web based test management system. It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the [Cancel] button and you will see the new test dialog:</p> <p></p> <p>Now enter the name of your new test \u2018Web Testing 1\u2019, and click Web. Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later):</p> <p></p> <p>Choose Selenium - Chrome from the list of options.</p> <p>Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the RVL scriptless approach. If you\u2019re interested in creating the test using JavaScript instead, please refer to the section - Tutorial: Web Testing (JavaScript).</p> <p></p> <p>Rapise will create the new test and you will see the empty recording grid:</p> <p></p> <p>You are now ready to record your first test.</p>"},{"location":"Guide/tutorial_record_and_playback/#record-test-steps","title":"Record Test Steps","text":"<p>In the Rapise window, press the Record button on the toolbar.</p> <p></p> <p>The <code>Browser URL</code> dialog will appear. Type in the initial URL https://www.libraryinformationsystem.org and click <code>OK</code>.</p> <p></p> <p>The browser will navigate to</p> <p></p> <p>The Recording Activity Dialog (RA dialog) will appear:</p> <p></p> <p>The RA dialog has a grid. \u00a0As you interact with the sample Library Information System program, the grid will automatically populate with your actions.</p> <p>Let's begin creating the test. \u00a0On the library information system login page, click on the Log In link in the top-right of the screen.</p> <p></p> <p>In the Username text box, type librarian</p> <p>Click on the Password text box next. \u00a0You'll notice that the RA dialog has changed. \u00a0Your actions, clicking Log-In and entering a username, are listed in the grid:</p> <p></p> <p>The password for user librarian is also librarian. \u00a0Type the password in and then press the Log-In button.</p> <p>Three more rows should appear in the RA dialog: two rows to represent click on the password field and the password entry, and one to represent the button click:</p> <p></p> <p>You should now be on the main menu of the <code>Library Information System</code> with the user's name listed in the top-right:</p> <p></p> <p>Hover the mouse over the \"Welcome librarian\" username label on the top-right and press Ctrl+1 to bring up the Verify dialog box:</p> <p></p> <p>This box lets you add a checkpoint to verify the properties of an object on the screen.</p> <p>Select the <code>Inner Text</code> option and click <code>OK</code> button to close the dialog. That will add the verification check to your list of recorded actions:</p> <p></p> <p>Click the Book Management button. \u00a0It is highlighted in the next screenshot:</p> <p></p> <p>You should now be on the Book Management page (see the below image).</p> <p></p> <p>Click the Create new book link:</p> <p></p> <p>You should now be on the Create New Book page (see image below). \u00a0Click the HOME button to go back to the main menu.</p> <p></p> <p>Now, click the Author Management button:</p> <p></p> <p>You should now be on the Author Management page (see image below):</p> <p></p> <p>Click the Create New Author link:</p> <p></p> <p>You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu.</p> <p></p> <p>At this point, there should be 14 rows in the RA dialog grid.</p> <p>You are now back on the Main Menu. \u00a0Click Log Out (top-right) and close the browser.</p> <p>To end the recording session either press <code>CTRL+3</code> or click <code>Finish</code> button on the RA dialog.</p> <p>Rapise will ask you whether you want to use this recording or discard it:</p> <p></p> <p>Click on the <code>Append to End</code> button and Rapise will insert the recorded steps into the test grid:</p> <p></p> <p>Let's save our test. \u00a0Press the <code>Save</code> button at the top left of the Rapise window.</p> <p></p>"},{"location":"Guide/tutorial_record_and_playback/#playback","title":"Playback","text":"<p>To execute the script, press the <code>Play</code> button on the toolbar.</p> <p></p> <p>Rapise will open a new instance of Chrome to the correct url (https://libraryinformationsystem.org) when the test begins.</p> <p>After execution, a screen like the one below will appear. \u00a0Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed.</p> <p></p> <p>For more information on the report, see Automated Reporting.</p>"},{"location":"Guide/tutorial_record_and_playback/#playback-in-other-browsers","title":"Playback in Other Browsers","text":"<p>Now that we have recorded our test in Chrome, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Selenium - Edge, Selenium - Firefox, etc.) and click the <code>Play</code> button.</p> <p></p>"},{"location":"Guide/tutorial_record_and_playback/#track-and-learn-object-using-the-web-spy","title":"Track and Learn Object Using the Web Spy","text":"<p>This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing. This is useful in cases where you have more complex applications to test and you need to pick specific objects. For example you may want to select one of the books in the grid based on its name rather than its row number (which may change if you add books).</p> <p>On the toolbar expand the dropdown list for the Spy tool and make sure that <code>Web</code> is selected:</p> <p></p> <p>Now, click on the main <code>Spy</code> tool icon and Rapise will start the Web Spy:</p> <p></p> <p>Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the <code>Book Management</code> menu item so that the list of books is displayed:</p> <p></p> <p>Now back in the Web Spy, click on the <code>Get Snapshot</code> button to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page:</p> <p></p> <p>Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books.</p> <p>In addition, you can use the <code>Track (Ctrl+T)</code> tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title <code>Amsterdam</code>, simply press Ctrl+T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl+T again. Rapise will now highlight that item in the DOM Tree automatically:</p> <p></p> <p>You can see all of the properties of this HTML element displayed on the right, specifically:</p> <ul> <li>tagName of the element (td),</li> <li>text of the element (Amsterdam),</li> <li>HTML attributes in the Properties section,</li> <li>CSS and XPath expressions for locating this element in Selectors section.</li> </ul> <p>If you want to use this object in a Rapise test script, you can simply double click it in the DOM tree, this action will populate the edit field on the toolbar, then click the <code>Learn</code> button and the HTML element will be added to the Recording Activity Dialog:</p> <p></p> <p>Click <code>Finish</code> and the object will have been added to your test\u2019s Object Tree:</p> <p></p> <p>To use this new object in our test script, we can simply use the test editor to add the appropriate command. For example, if you wanted to get the textual value of the cell in your test, you should click on the row in the grid after the Book Management \u2013 DoClick:</p> <p></p> <p>Now click on the <code>Insert Row Before</code> button in the main Test ribbon to add a new row:</p> <p></p> <p>This will insert a new row into the test. In this new row, left-click on each of the cells (as illustrated below) and pick the following values from the dropdown lists:</p> <p></p> <p>Then choose the following:</p> <ul> <li>Type = Action</li> <li>Object = Amsterdam</li> <li>Action = GetInnerText</li> </ul> <p>You should now have the following:</p> <p></p>"},{"location":"Guide/tutorial_record_and_playback/#test-xpath-and-learn-object-using-the-web-spy","title":"Test XPATH and Learn Object Using the Web Spy","text":"<p>In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test.</p> <p>For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink.</p> <p>Open up the Web Spy as before:</p> <p></p> <p>One the toolbar enter in the following to locate the table:</p> <pre><code>//table[@id='MainContent_grdBooks']\n</code></pre> <p></p> <p>Now click on the <code>Test</code> button to display the matching results:</p> <p></p> <p>Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing <code>Amsterdam</code> and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH:</p> <pre><code>//table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a\n</code></pre> <p>This XPath consists of the following elements:</p> <ol> <li>Find the table with the specified ID.</li> <li>Find any row inside that table that contains a cell with the text <code>Amsterdam</code>.</li> <li>For any matching cell, get its parent row and inside the fifth cell, get any hyperlink.</li> </ol> <p>In this case that will correctly locate the Edit link for the book <code>Amsterdam</code>. Now that we have the correct item identified, click on the <code>Learn</code> button to the right of the <code>Test</code> button. That will now learn a new object that corresponds to the <code>Edit Amsterdam</code> object:</p> <p></p> <p>Click <code>Finish</code> and the object will have been added to the Object Tree of the current test:</p> <p></p>"},{"location":"Guide/tutorial_record_and_playback/#modify-the-test","title":"Modify the Test","text":"<p>To click on this object, simply click on the row in the grid where you want this action to occur and choose Insert Row Before from the toolbar:</p> <p></p> <p>In this new row, right-click on each of the cells, and pick the following values from the dropdown lists:</p> <ul> <li>Type = Action</li> <li>Object = Edit</li> <li>Action = DoClick</li> </ul> <p>So your test will now look like:</p> <p></p> <p>Since clicking on the Edit link will take you to a different page than where the <code>Create New Book</code> link is available, we need to add another row and add:</p> <ul> <li>Type = Action</li> <li>Object = Book_Management</li> <li>Action = DoClick</li> </ul> <p>so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed.</p> <p>This means the test will now look like:</p> <p></p> <p>Now the line:</p> <p></p> <p>by itself does not do anything, it just gets the text.</p> <p>So, to make the test more useful, we can use the Assert command to turn this into a test for the correct value. To make the change, simply delete this entire row using the Delete Current Row option on the toolbar and add a new blank row in its place.</p> <p>Now choose the Type as Assert and press TAB on the keyboard. You will now have the following:</p> <p></p> <p>This is a generic placeholder for any type of assertion. We need to first change the value of the message <code>TBD</code> to something meaningful (e.g. <code>Check that the name matches</code>):</p> <p></p> <p>This is the message that will be displayed in the report.</p> <p>Now we need to replace the first parameter with the output from the result of the <code>Amsterdam</code> checking. To do this, change the Condition on the second row from: param1 == param2 to output1 == param2 and press TAB to move away from the condition cell:</p> <p></p> <p>Notice how Rapise automatically changed the second row from Param to Action.</p> <p>Now in the TBD cell next to the Action type, choose the Amsterdam object name and the GetInnerText action from the dropdown lists. Finally change the param2 string from <code>TBD</code> to the expected value <code>Amsterdam</code>.</p> <p>You will now have:</p> <p></p> <p>Now close the browser and click Play to playback the new test:</p> <p></p> <p>The test should now pass successfully.</p>"},{"location":"Guide/tutorial_record_and_playback/#see-also","title":"See Also","text":"<ul> <li>Tutorial: Web Testing (JavaScript)</li> <li>Browser Profiles</li> </ul>"},{"location":"Guide/tutorial_soap_web_services/","title":"Tutorial: SOAP Web Services","text":"<p>In this section you shall learn how to test a SOAP web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy SOAP web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org, and its SOAP web service API can be found at:</p> <p>http://www.libraryinformationsystem.org/Services/SoapService.aspx</p>"},{"location":"Guide/tutorial_soap_web_services/#what-is-soap-and-what-is-a-soap-web-service","title":"What is SOAP and what is a SOAP web service?","text":"<p>SOAP is the **S**imple **O**bject **A**ccess **P**rotocol, and allows you to make API calls over HTTP/HTTPS using specially formatted XML. SOAP web servicesmake use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL.</p> <p>SOAP web services are fully self-descripting, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service. However when these SOAP calls fail you need a way of testing them that includes being able to inspect the raw SOAP XML that is actually being sent.</p>"},{"location":"Guide/tutorial_soap_web_services/#overview","title":"Overview","text":"<p>Creating a SOAP web service test in Rapise consists of the following steps:</p> <ol> <li> <p>Using the SOAP web services studio to inspect the SOAP WSDL</p> </li> <li> <p>Invoke the various SOAP operations and verify that they return the expected data in the expected format.</p> </li> <li> <p>Generating the test script in JavaScript that uses the learned Rapise web service objects based on the WSDL.</p> </li> </ol> <p>We shall discuss each of these steps in turn.</p>"},{"location":"Guide/tutorial_soap_web_services/#1-inspecting-the-soap-wsdl-endpoint","title":"1. Inspecting the SOAP WSDL Endpoint","text":"<p>Create a new test in Rapise called <code>MySoapTest1.sstest</code>. For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project.</p> <p></p> <p>Language selection prompt is shown. For Web Services it is recommended to use <code>JavaScript</code>. </p> <p></p> <p>Once you have created it, choose  <code>Tools &gt; Web Services</code> menu to add a new web service definition to your test project:</p> <p></p> <p>This will display the Add New Web Service dialog box:</p> <p></p> <p>Choose SOAP as the type of web service you want to create.</p> <p>Then, enter the name of the web service that you're going to add, in this case enter \"LibraryInformationSystem.soap\" and click <code>Create</code>.</p> <p>This will add the SOAP web services definition file to your test project:</p> <p></p> <p>In the Endpoint section of the SOAP toolbar, enter the following URL to the sample application's WSDL file:</p> <pre><code>http://www.libraryinformationsystem.org/Services/SoapService.svc?wsdl\n</code></pre> <p>then click the <code>Get WSDL</code> to load the list of SOAP operations:</p> <p></p> <p>Now click on the Connection_Authenticate operation in the SOAP explorer:</p> <p></p> <p>This is the first operation we will need to invoke since it is used to authenticate with the online library system before calling the other functions.</p> <p>You can click on each of the different SOAP operations (e.g. for inserting, retrieving, deleting or updating a book) and the SOAP studio will display the expected input and output parameters as well as any headers.</p> <p>In the next section we shall be performing the following actions:</p> <ul> <li> <p>Authenticating as a specific user</p> </li> <li> <p>Viewing the list of books</p> </li> <li> <p>Inserting a new book</p> </li> <li> <p>Viewing the updated list of books</p> </li> <li> <p>Disconnecting</p> </li> </ul> <p>Each one will involve calling a specific SOAP operation with some input parameters, viewing the data returned and adding a verification step if appropriate.</p>"},{"location":"Guide/tutorial_soap_web_services/#2-invoking-the-soap-actions","title":"2. Invoking the SOAP Actions","text":"<p>Starting with the Connection_Authenticate operation that we had selected, click on the two Input parameters in turn and enter values:</p> <ul> <li>userName = librarian</li> <li>password = librarian</li> </ul> <p>Then click the <code>Invoke</code> button underneath:</p> <p></p> <p>You can see that the response to our Invoked operation as a simple boolean value of True returned. That indicated that we authenticated correctly. If you try putting in an incorrect login/password, you'll get back False instead.</p> <p>If you have a SOAP web service that doesn't behave as expected, you may want to view the raw SOAP XML that is being sent to/from the web service. To view this, click on the Request/Response tab of the SOAP studio editor and the following will be displayed:</p> <p></p> <p>This view lets you see the Request and Response HTTP headers body, with the body displayed in a friendly, easy to read color-coded XML format. That way you can easily invoke the SOAP operations using the Rapise SOAP studio GUI and view the raw SOAP XML being sent to/from the server. This is invaluable when debugging a failing SOAP web service.</p> <p>In the case of our test of Connection_Authenticate, we can now click the <code>Record</code> button (next to <code>Send</code>) to add this operation to our list of recorded test steps:</p> <p></p> <p>Once you have added the operation to the list of recorded steps, you can go one step further and ask Rapise to verify the data returned. To do that, click on the <code>Verify</code> button that is displayed next to the <code>Record</code> button. The step will now switch to bold to indicate that a verification step is also included.</p> <p></p> <p>Now we need to repeat this process for the following additional operations:</p> <ul> <li> <p>Book_Retrieve</p> </li> <li> <ul> <li>No Input Parameters</li> </ul> </li> <li> <ul> <li>Press <code>Invoke</code> to test the retrieve</li> </ul> </li> <li> <ul> <li>Press <code>Record</code> to record the test script</li> </ul> </li> <li> <ul> <li>Click <code>Verify</code> to add a verification step</li> </ul> </li> <li> <p>Book_Insert</p> </li> <li> <ul> <li>Populate the Book input object with these values:</li> </ul> </li> <li> <ul> <li>AuthorId = 2</li> </ul> </li> <li> <ul> <li>AuthorIdSpecified = True</li> </ul> </li> <li> <ul> <li>GenreId = 3</li> </ul> </li> <li> <ul> <li>GenreIdSpecified = True</li> </ul> </li> <li> <ul> <li>Name = <code>A Christmas Carol</code></li> </ul> </li> <li> <ul> <li>DateAdded = (pick a date using the date picker)</li> </ul> </li> <li> <ul> <li>DateAddedSpecified = True</li> </ul> </li> <li> <ul> <li>DateAddedIso = 2017-01-04T07:46:36</li> </ul> </li> <li> <ul> <li>Press <code>Invoke</code> to test the insert</li> </ul> </li> <li> <ul> <li>Press <code>Record</code> to record the test script</li> </ul> <p></p> </li> <li> <p>Book_Retrieve</p> </li> <li> <ul> <li>No Input Parameters</li> </ul> </li> <li> <ul> <li>Press <code>Invoke</code> to test the retrieve</li> </ul> </li> <li> <ul> <li>Press <code>Record</code> to record the test script</li> </ul> </li> <li> <ul> <li>Click <code>Verify</code> to add a verification step</li> </ul> </li> <li> <p>Connection_Disconnect</p> </li> <li> <ul> <li>No Input Parameters</li> </ul> </li> <li> <ul> <li>Press <code>Invoke</code> to test the retrieve</li> </ul> </li> <li> <ul> <li>Press <code>Record</code> to record the test script</li> </ul> </li> </ul> <p>Once you have completed all these steps, you will see the following recorded in the SOAP Script Steps box:</p> <p></p> <p>Now that we have recorded the operations and verifications, we can proceed to generate the test script in Rapise that will regression test the web service.</p>"},{"location":"Guide/tutorial_soap_web_services/#3-generating-the-rapise-test-script","title":"3. Generating the Rapise Test Script","text":"<p>In the SOAP Script Steps toolbar, click on the <code>Create Script</code> button to generate the initial test script:</p> <p></p> <p>Click on the <code>Test</code> shortcut in the main toolbar, and Rapise will display the <code>Main.js</code> file.</p> <p>In the main Rapise test script file, you will see the following generated:</p> <pre><code>function Test()\n{\n    var LibraryInformationSystem=SeS('LibraryInformationSystem');\n\n    LibraryInformationSystem.DoExecute('Connection_Authenticate',{\"userName\":\"librarian\",\"password\":\"librarian\"});\n\n    Tester.Assert('Connection_Authenticate Response', LibraryInformationSystem.GetResponseObject(), {\"Body\":{\"Connection_AuthenticateResult\":true,\"Connection_AuthenticateResultSpecified\":true},\"Headers\":{}});\n\n    LibraryInformationSystem.DoExecute('Book_Retrieve', {});\n\n    Tester.Assert('Book_Retrieve Response', LibraryInformationSystem.GetResponseObject(), {...}\\]},\"Headers\":{}});\n\n    LibraryInformationSystem.DoExecute('Book_Insert', {\"book\":{\"Author\":{\"Name\":\"\"},\"DateAdded\":\"2017-01-04T07:46:36\",\"DateAddedSpecified\":true,\"DateAddedIso\":\"2017-01-04T07:46:36\",\"Genre\":{\"Name\":\"\"},\"Name\":\"A Christmas Carol\"}});\n\n    LibraryInformationSystem.DoExecute('Book_Retrieve', {});\n\n    Tester.Assert('Book_Retrieve Response',LibraryInformationSystem.GetResponseObject(), {...},\"Headers\":{}});\n\n    LibraryInformationSystem.DoExecute('Connection_Disconnect', {});\n\n}\n</code></pre> <p>You will see each of the SOAP functions called in turn, with verification code automatically added.</p> <p>We can add some comments to make it easier to read:</p> <pre><code>    //Authenticate\n\n    var LibraryInformationSystem=SeS('LibraryInformationSystem');\n\n    LibraryInformationSystem.DoExecute('Connection_Authenticate',{\"userName\":\"librarian\",\"password\":\"librarian\"});\n\n    Tester.Assert('Connection_Authenticate Response',LibraryInformationSystem.GetResponseObject(), {\"Body\":{\"Connection_AuthenticateResult\":true,\"Connection_AuthenticateResultSpecified\":true},\"Headers\":{}});\n\n\n    //Verify the initial list of books\n\n    LibraryInformationSystem.DoExecute('Book_Retrieve', {});\n\n    Tester.Assert('Book_Retrieve Response', LibraryInformationSystem.GetResponseObject(), {...}\\]},\"Headers\":{}});\n\n    LibraryInformationSystem.DoExecute('Book_Insert', {\"book\":{\"Author\":{\"Name\":\"\"},\"DateAdded\":\"2017-01-04T07:46:36\",\"DateAddedSpecified\":true,\"DateAddedIso\":\"2017-01-04T07:46:36\",\"Genre\":{\"Name\":\"\"},\"Name\":\"A Christmas Carol\"}});\n\n\n    //Verify the updated list of books and disconnect\n\n    LibraryInformationSystem.DoExecute('Book_Retrieve', {});\n\n    Tester.Assert('Book_Retrieve Response',LibraryInformationSystem.GetResponseObject(), {...},\"Headers\":{}});\n\n    LibraryInformationSystem.DoExecute('Connection_Disconnect', {});\n</code></pre> <p>When you click the <code>Play</code> button in the main toolbar, you will see the following result:</p> <p></p> <p>Congratulations! You have recorded and executed a SOAP web service test.</p>"},{"location":"Guide/tutorial_web_services_rest/","title":"Tutorial: REST Web Services","text":"<p>In this section you shall learn how to test a RESTful web services API using Rapise. We shall be using a demo application called Library Information System that has a dummy RESTful web service API available for learning purposes. You can access this sample application at http://www.libraryinformationsystem.org, and its RESTful web service API can be found at: www.libraryinformationsystem.org/Services/RestService.aspx.</p>"},{"location":"Guide/tutorial_web_services_rest/#what-is-rest-and-what-is-a-restful-web-service","title":"What is REST and what is a RESTful web service?","text":"<p>RE**presentational **S**tate **T**ransfer (**REST) is a style of software architecture for distributed systems such as the World Wide Web. REST has emerged as a web API design model that offers greater simplicity over other web service protocols such as SOAP and XML-RPC.</p> <p>A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol.</p>"},{"location":"Guide/tutorial_web_services_rest/#overview","title":"Overview","text":"<p>Creating a REST web service test in Rapise consists of the following steps:</p> <ol> <li> <p>Using the REST query builder to create the various REST web service requests and verify that they return the expected data in the expected format.</p> </li> <li> <p>Parameterizing these REST web service requests into reusable templates and saving as Rapise learned objects.</p> </li> <li> <p>Generating the test script in Javascript that uses the learned Rapise web service objects.</p> </li> </ol> <p>We shall discuss each of these steps in turn.</p>"},{"location":"Guide/tutorial_web_services_rest/#1-using-the-rest-query-builder","title":"1. Using the REST Query Builder","text":"<p>Create a new test in Rapise called <code>MyRestTest1.sstest</code>. For methodology, choose Basic: Windows Desktop Application (Windows Native, .NET, Java, WPF etc) and Rapise will create a new blank test project.</p> <p></p> <p>Language selection prompt is shown. For Web Services it is recommended to use <code>JavaScript</code>. </p> <p></p> <p>Once you have created it, choose  <code>Tools &gt; Web Services</code> menu to add a new web service definition to your test project:</p> <p></p> <p>This will display the Add New Web Service dialog box:</p> <p></p> <p>Choose <code>REST</code> as the type of web service you want to create.</p> <p>Then, enter the name of the web service that you're going to add, in this case enter <code>LibraryInformationSystem.rest</code> and click <code>Create</code>.</p> <p>This will add the REST web services definition file to your test project:</p> <p></p> <p>You will see on the right hand side, there is a new document editor for the <code>.rest</code> file. This is the REST web services query form. It lets you send test HTTP requests to the web service under test and inspect the output being returned.</p> <p>If you open up API documentation for our sample application (www.libraryinformationsystem.org/Services/RestService.aspx) you will see that it exposes several operations for retrieving, adding, updating and deleting books and authors in the system. For this tutorial we shall perform the following operations:</p> <ol> <li> <p>Get the special SessionID to identify our test session</p> </li> <li> <p>Get a list of books in the system</p> </li> <li> <p>Add a new book to the system and verify that it was added</p> </li> </ol> <p>According to the documentation that means we will need to send the following requests:</p> <ul> <li> </li> <li> <ul> <li>URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session</li> </ul> </li> <li> <ul> <li>Method: GET</li> </ul> </li> <li> <ul> <li>Returns: Unique session ID that is passed to other requests to keep data separate for different demo users</li> </ul> </li> <li> </li> <li> <ul> <li>URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id}</li> </ul> </li> <li> <ul> <li>Method: GET</li> </ul> </li> <li> <ul> <li>Returns: Array of book objects</li> </ul> </li> <li> </li> <li> <ul> <li>URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id}</li> </ul> </li> <li> <ul> <li>Method: POST</li> </ul> </li> <li> <ul> <li>Body: Pass a populated book object: <pre><code>    {\n        \"Name\":\u00a0\"Book\u00a0Name\",\n        \"AuthorId\":\u00a01,\n        \"GenreId\":\u00a01\n    }\n</code></pre></li> </ul> </li> <li> <ul> <li>Returns: Single book object that has its BookId populated</li> </ul> </li> </ul> <p>The first request will be to get the unique session ID that we will need to pass to the other requests. This is needed by our sample application to prevent testing by different users interfering with each other. To create this request, simply enter the following information on the REST Request form:</p> <ul> <li> <p>Name: Get_Session</p> </li> <li> <p>Method: GET</p> </li> <li> <p>URL: http://www.libraryinformationsystem.org/Services/RestService.svc/session</p> </li> </ul> <p>You should now have it populated as illustrated below:</p> <p></p> <p>This web service request requires that we pass credentials by means of HTTP Basic authentication. So click on the <code>Add Credentials</code> button in the toolbar.</p> <p></p> <p>This will display the <code>Add Credentials</code> dialog box:</p> <p></p> <p>Enter librarian as both the username and password and click <code>Add</code>.</p> <p>Now click the <code>Send</code> button and the request will get sent to the web service:</p> <p></p> <p>The <code>Response Header</code> tab will display the headers coming back from the web service. The Status Code 200 OK means that the request succeeded and that data was returned. If you click on the \"Response Body - XML\" tab, you will see the XML serialized data returned from the web service:</p> <p></p> <p>Since Rapise uses JavaScript as its scripting language, it is usually easier to work with JSON (**J**ava**S**cript **O**bject **N**otation) serialized data rather than XML. In the case of the sample Library Information System web service, you can change the format that it accepts and retrieves by sending two special HTTP headers:</p> <ul> <li> <p>Content-Type: <code>application/json</code></p> </li> <li> <p>Accept: <code>application/json</code></p> </li> </ul> <p>To add these headers to the request, simply click on the <code>Add Header</code> button in toolbar:</p> <p></p> <p>This will display the following dialog box:</p> <p></p> <p>Choose the HTTP Header \"Accept\" from the list and enter <code>application/json</code> as the value. Repeat for the \"Content-Type\" header. You should now have the following populated request:</p> <p></p> <p>Now click the <code>Send</code> button and the request will get sent to the web service:</p> <p></p> <p>The Response Header tab will display the headers coming back from the web service. Note that the returned Content-Type is listed as <code>application/json</code> as requested. If you click on <code>Response Body - JSON</code> tab, you will see the JSON serialized data returned from the web service:</p> <p></p> <p>We have now completed the creation of our first test operation. Click on the \"Save Requests\" button in the Rapise REST Ribbon to make sure our changes have been saved.</p> <p>Now click on the <code>Clone request</code> icon in the REST request explorer in the left-hand side of the screen:</p> <p></p> <p>This will display the Clone Request dialog box. This lets us create a new REST request that contains the headers and authentication already defined on our existing request. This will save time over creating a new REST request from scratch:</p> <p></p> <p>Enter the name \"Get_Books\" in the dialog box and click the <code>Clone</code> button. This will create a new REST request with this name:</p> <p></p> <p>For this request we need to pass through the SessionID in the query string. Rather than hardcoding it in the URL, we can make use of the parameterization feature of Rapise. Click on the <code>Add Parameter</code> button in the toolbar. This will display the <code>Add Request Parameter</code> dialog box:</p> <p></p> <p>Enter in the following:</p> <ul> <li> <p>Name: <code>session_id</code></p> </li> <li> <p>Value: <code>7404f584-7200-4c37-b813-d5994eb45d12</code> (you can also copy and paste the value returned by the <code>Get_Session</code> command)</p> </li> </ul> <p>Click the <code>Add</code> button and the parameter will be added to the request. Now change the URL to:</p> <ul> <li>URL: http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id=</li> </ul> <p>Then position the caret at the end of this URL and click the <code>Insert in URL</code> button. This will insert the parameter token in the URL at the specified point:</p> <p></p> <p>Now click the <code>Send</code> button and the request will get sent to the web service. This will return the list of books serialized as a JSON array of objects:</p> <p></p> <p>We have now completed the creation of our second test operation. Click on the <code>Save Requests</code> toolbar button to make sure our changes have been saved:</p> <p></p> <p>Now click on the <code>Clone request</code> icon in the REST request explorer in the right-hand side of the screen. Enter the name \"Add_Book\" in the dialog box and click the <code>Clone</code> button. This will create a new REST request with this name:</p> <p></p> <p>This operation will add a new book to the system, so it's a POST request. Change the Method type in the dropdown list from \"GET\" to \"POST\".</p> <p>Expand the \"Body\" field on the form. This is where you can enter in an XML or JSON serialized Book record that will get added to the system. For now we'll leave this blank and let Rapise serialize the body for us later on when we actually write our test script. So we should now have:</p> <p></p> <p>We have now completed the creation of our third test operation. Click on the <code>Save Requests</code> toolbar button.</p>"},{"location":"Guide/tutorial_web_services_rest/#i-get-a-unique-session","title":"(i) Get a Unique Session","text":""},{"location":"Guide/tutorial_web_services_rest/#ii-get-this-list-of-books","title":"(ii) Get this list of books","text":""},{"location":"Guide/tutorial_web_services_rest/#iii-add-a-new-book-to-the-list","title":"(iii) Add a new book to the list","text":""},{"location":"Guide/tutorial_web_services_rest/#2-saving-the-rest-requests-as-objects","title":"2. Saving the REST Requests as Objects","text":"<p>Now that we have created our three REST requests, the next step is to actually create the Rapise objects that we can use in our JavaScript test scripts. Click on the <code>Update Object Tree</code> button in the toolbar to update the Object Tree with our new requests:</p> <p></p> <p>Rapise will now take you REST requests and use that to update the main Object tree. Click on the <code>Object</code> tab of the main Rapise explorer, click the <code>Refresh</code> icon and you will see the \"LibraryInformationSystem\" heading displayed, with the three saved REST request listed underneath:</p> <p></p> <p>If you expand one of the REST requests (e.g. <code>Add_Book</code>), you'll see that it has a single operation \"DoExecute\" that executes the web services and a series of properties available for inspecting or updating any part of the REST request prior to it being sent to the server.</p> <p>In the next section we shall illustrate how you can write a test script using these learned objects.</p> <p>a. You can either have Rapise generate test scripts and verification points automatically (described in section 3a), or</p> <p>b. You can manually write the test scripts using the objects and the Rapise code editor (described in section 3b)</p>"},{"location":"Guide/tutorial_web_services_rest/#3a-generating-rest-test-scripts","title":"3a. Generating REST Test Scripts","text":"<p>Inside the REST request explorer, double-click on the Get_Session function to open up the request:</p> <p></p> <p>Click on the Send button to send the sample request. Once that has succeeded, you will see the Record button appear to the right:</p> <p></p> <p>Click that button and the request will get added to the list of recorded steps:</p> <p></p> <p>Now open up the Get_Book request and follow the same procedure:</p> <ol> <li> <p>Click on the <code>Send</code> button to execute the request</p> </li> <li> <p>Click on the <code>Record</code> button to record the action as a script step</p> </li> </ol> <p>This time we also want to verify the result. You will see a list of books returned in the Verify box underneath the Body section:</p> <p></p> <p>If you select the overall array response[14] and click the main <code>Verify</code> button next to the <code>Record</code> button, the system will automatically add a verification step that verifies all of the values. To try this, click the <code>Verify</code> button. This will add a bold verification step to the recorded script:</p> <p></p> <p>You will see a script step recorded with a verification test added (it's shown in bold with an asterisk <code>*</code>):</p> <p>However, in many cases you only want to verify certain properties. For example, we might want to just verify that 14 books are returned, and that the first book has the right name.</p> <p>To do this, right-click on the response[14] entry to display the verification content menu:</p> <p></p> <p>Choose the option \u2018Verify Response length=14\u2019. This adds the following step to the recorded script:</p> <p></p> <p>Now we want to verify the name of the first book returned. To do that, expand the \u201c0\u201d index entry and then right-click on the \u201cName\u201d property returned:</p> <p></p> <p>Choose the option to Verify Response[0].Name = Hound of the Baskervilles. This will add a verification step for this specific property:</p> <p></p> <p>Now we add the last two requests - adding a book and verifying that it was added. To do that open up the two requests and click <code>Send</code> then <code>Record</code>:</p> <ul> <li> <p>Add_Book (POST)</p> </li> <li> <p>Get_Book (GET)</p> </li> </ul> <p>The Add_Book won't actually work at this point because we've not populated the body, but it will be good enough to create the test script. For the second instance of Get_Book don't use the Verify option since we will want to code that by hand to match the book we actually added.</p> <p>Once you are done, you should have:</p> <p></p> <p>Now click on the <code>Create Script</code> button and Rapise will generate the following code for you:</p> <pre><code>function Test()\n{\n    var LibraryInformationSystem_Get_Session=SeS('LibraryInformationSystem_Get_Session');\n    LibraryInformationSystem_Get_Session.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Session.DoExecute();\n\n    var LibraryInformationSystem_Get_Book=SeS('LibraryInformationSystem_Get_Book');\n    LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Book.DoExecute();\n\n    Tester.AssertEqual('http://www.libraryinformationsystem.org/Services/RestService.svc/book?session_id={session_id} Response Body Text Comparison Result', LibraryInformationSystem_Get_Book.GetResponseBodyText(), \"...long response body...\");\n    LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"length\", 14);\n    LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"[0].Name\", \"Hound of the Baskervilles\");\n    var LibraryInformationSystem_Add_Book=SeS('LibraryInformationSystem_Add_Book');\n    LibraryInformationSystem_Add_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Add_Book.DoExecute();\n\n    LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Book.DoExecute();\n}\n</code></pre> <p>If you click <code>Play</code> on this script as written, you will see that the tests to retrieve the books work correctly, but the test of adding a new book fails:</p> <p></p> <p>This is as we'd expect since we've not populated the new book yet!</p> <p>To make the template test script more useful, we should make the following changes:</p> <ul> <li> <p>Add comments to each of the sections to describe the purpose</p> </li> <li> <p>Add code to get the session ID from the first call and pass to the subsequent calls</p> </li> <li> <p>Create a JavaScript object to contain the new book information, and pass that to the Add Book function</p> </li> <li> <p>Get the new book ID from the result of the Add Book function and use it later on.</p> </li> <li> <p>Change the <code>Tester.Assert</code> code to check just specific properties rather than the entire object list.</p> </li> </ul> <p>The complete updated test script looks like the following. We have highlighted the new/changed lines in yellow:</p> <pre><code>function Test(params)\n{\n    //First get the session\n    var LibraryInformationSystem_Get_Session=SeS('LibraryInformationSystem_Get_Session');\n    LibraryInformationSystem_Get_Session.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Session.DoExecute();\n\n//  CODE: READ SESSIONID\n    var sessionId = LibraryInformationSystem_Get_Session.GetResponseBodyObject();\n    Tester.Message('Session ID: ' + sessionId);\n//  /CODE\n\n    var LibraryInformationSystem_Get_Book=SeS('LibraryInformationSystem_Get_Book');\n    LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Book.DoExecute({ \"session_id\": sessionId });\n//  CODE/                                         ^^^^^^^^^^^^^^^^^^^^^^^\n\n    LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"length\", 14);\n    LibraryInformationSystem_Get_Book.DoVerify('LibraryInformationSystem_Get_Book Response', \"[0].Name\", \"Hound of the Baskervilles\");\n\n// CODE: Define new book\n    //Add a book\n    var newBook = {\n        Name: \"A Christmas Carol\",\n        AuthorId: 2,\n        GenreId: 3\n    };\n// /CODE\n\n    var LibraryInformationSystem_Add_Book=SeS('LibraryInformationSystem_Add_Book');\n    LibraryInformationSystem_Add_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n\n// CODE: Supply newBook as a POST method body\n    LibraryInformationSystem_Add_Book.SetRequestBodyObject(newBook)\n// /CODE\n    LibraryInformationSystem_Add_Book.DoExecute({ \"session_id\": sessionId });\n//  CODE/                                         ^^^^^^^^^^^^^^^^^^^^^^^\n\n// CODE: Read added book\n    //Get the ID of the new book\n    newBook = LibraryInformationSystem_Add_Book.GetResponseBodyObject();\n    Tester.Message(\"New Book ID: \" + newBook.Id);\n// /CODE\n\n    LibraryInformationSystem_Get_Book.SetRequestHeaders([{\"Name\":\"Accept\",\"Value\":\"application/json\"},{\"Name\":\"Content-Type\",\"Value\":\"application/json\"}]);\n    LibraryInformationSystem_Get_Book.DoExecute({ \"session_id\": sessionId });\n//  CODE/                                         ^^^^^^^^^^^^^^^^^^^^^^^\n// CODE: Check book count increased\n    Tester.AssertEqual(\"Book Count\", 15, LibraryInformationSystem_Get_Book.GetResponseBodyObject().length);\n// /CODE\n}\n</code></pre>"},{"location":"Guide/tutorial_web_services_rest/#3b-writing-rest-test-scripts","title":"3b. Writing REST Test Scripts","text":"<p>Open up the main <code>Main.js</code> file in the Rapise editor. It will initially consist of a single empty function <code>Test()</code>:</p> <p></p> <p>The first task is to get a new SessionId from the server using the Get_Session operation. To do this, drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Session\" object into the script editor, in between the opening and closing braces of the <code>Test()</code> function:</p> <p></p> <p>This will execute the web serviced and return the SessionId. To actually access the retrieved value, you need to drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then add the JavaScript code </p> <pre><code>var sessionId =\n</code></pre> <p>to actually store the value. We will also add a </p> <pre><code>Tester.Message(sessionId);\n</code></pre> <p>line afterwards to write out the value of the sessionId to the test report. This will help us make sure we are getting back a valid response from the web service. You should now have the following code:</p> <p></p> <p>Save this test and click <code>Play</code> to execute the test. You should now see a report similar to the following:</p> <p></p> <p>Now we need to add the code to get the list of books. To do that, simply drag the \"DoExecute\" operation from under the \"LibraryInformationSystem_Get_Book\" object into the script editor. Then change the (<code>null</code>) argument to instead provide the session id as a JavaScript dictionary:</p> <pre><code>SeS('LibraryInformationSystem_Get_Book').DoExecute({\"session_id\":sessionId});\n</code></pre> <p>To get the list of books as a JavaScript array, drag the \"GetResponseBodyObject\" property to the script editor, under the previous line. Then assign the value of this property to a variable such as \"books\":</p> <pre><code>var\u00a0books\u00a0=\u00a0SeS('LibraryInformationSystem_Get_Book').GetResponseBodyObject();\n</code></pre> <p>Now we can add code to test that the number of books returned matches the expected value. Type in the following code:</p> <pre><code>Tester.AssertEqual('Book\u00a0count\u00a0matches',\u00a014,\u00a0books.length);\n</code></pre> <p>You should now have the following code:</p> <p></p> <p>Finally we need to add the code to add a new book to the system. To do that, simply drag the \"DoExecute\" operation from under the \"Add_Book\" object into the script editor. Then change the (<code>null</code>) argument to instead provide the session id as a Javascript dictionary:</p> <pre><code>SeS('LibraryInformationSystem_Add_Book').DoExecute({\"session_id\":sessionId});\n</code></pre> <p>To provide the data for a new book, we will need to drag the \"SetRequestBodyObject\" property of the \"Add_Book\" object to the line above the DoExecute and pass in a populated JavaScript object:</p> <pre><code>var\u00a0newBook\u00a0=\u00a0{};\nnewBook.Name\u00a0=\u00a0'A\u00a0Christmas\u00a0Carol';\nnewBook.AuthorId\u00a0=\u00a02;\nnewBook.GenreId\u00a0=\u00a03;\n\nSeS('LibraryInformationSystem_Add_Book').SetRequestBodyObject(newBook);\n</code></pre> <p>Finally Add code to test that our new book was added correctly and the count has increased by one:</p> <pre><code>SeS('LibraryInformationSystem_Get_Books').DoExecute({\"session_id\":sessionId});\nbooks\u00a0=\u00a0SeS('LibraryInformationSystem_Get_Books').GetResponseBodyObject();\nTester.AssertEqual('Book\u00a0count\u00a0matches',\u00a015,\u00a0books.length);\n</code></pre> <p>You should now have the following code:</p> <p></p> <p>Save this test and click \"Play\" to execute the test. You should now see a report similar to the following:</p> <p></p> <p>Congratulations! You have just created your first test script that tests a RESTful web service.</p>"},{"location":"Guide/tutorial_web_using_javascript/","title":"Tutorial: Web Testing (JavaScript)","text":"<p>This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing using the JavaScript test script language instead of the Rapise Visual Language (RVL) that was illustrated in the main Tutorial: Web Testing (RVL).</p> <p>This is useful in cases where you have more complex applications to test and you want to be able to use the power of a full programming language such as JavaScript to process data, perform calculations and implement complex flow of control.</p>"},{"location":"Guide/tutorial_web_using_javascript/#open-rapise-and-create-new-test","title":"Open Rapise and Create New Test","text":"<p>Go to Start &gt; All Programs &gt; Inflectra &gt; Rapise. \u00a0The following window should appear.</p> <p></p> <p>Select <code>File &gt; Create New &gt; New Test</code> in the main menu.</p> <p></p> <p>If this is your first time using Rapise on this computer, you may see the following dialog box:</p> <p></p> <p>If you see this, it means that Rapise is trying to connect to a SpiraTest server. SpiraTest is our web based test management system. It is a powerful tool that can store your Rapise tests and deploy them onto remote machines for automated regression testing. However, for now just click on the <code>Cancel</code> button and you will see the new test dialog:</p> <p></p> <p>Now enter the name of your new test \u2018Web Testing 1\u2019, and click Web. Since you chose a web test, you will now need to choose the initial web browser profile (don\u2019t worry you can easily change it later):</p> <p></p> <p>Choose Selenium - Chrome from the list of options.</p> <p>Next you will be asked if you want to create your tests using the scriptless Rapise Visual Language (RVL) technology or using JavaScript. For this example we will use the JavaScript approach. If you\u2019re interested in creating the test using RVL instead, please refer to the section - Tutorial: Web Testing (RVL).</p> <p></p> <p>Rapise will create the new test and you will see the main function of the test:</p> <p></p> <p>You are now ready to record your first test.</p>"},{"location":"Guide/tutorial_web_using_javascript/#record-test-steps","title":"Record Test Steps","text":"<p>In the Rapise window, press the Record button on the toolbar.</p> <p></p> <p>The <code>Browser URL</code> dialog will appear. Type in the initial URL https://www.libraryinformationsystem.org and click <code>OK</code>.</p> <p></p> <p>The browser will navigate to</p> <p></p> <p>The Recording Activity Dialog (RA dialog) will appear:</p> <p></p> <p>The RA dialog has a grid. \u00a0As you interact with the sample Library Information System program, the grid will automatically populate with your actions.</p> <p>Let's begin creating the test. \u00a0On the library information system login page, click on the Log In link in the top-right of the screen.</p> <p></p> <p>In the Username text box, type librarian</p> <p>Click on the Password text box next. \u00a0You'll notice that the RA dialog has changed. \u00a0Your actions, clicking Log-In and entering a username, are listed in the grid:</p> <p></p> <p>The password for user librarian is also librarian. \u00a0Type the password in and then press the Log-In button.</p> <p>Three more rows should appear in the RA dialog: two rows to represent click on the password field and the password entry, and one to represent the button click:</p> <p></p> <p>You should now be on the main menu of the <code>Library Information System</code> with the user's name listed in the top-right:</p> <p></p> <p>Hover the mouse over the \"Welcome librarian\" username label on the top-right and press Ctrl+1 to bring up the Verify dialog box:</p> <p></p> <p>This box lets you add a checkpoint to verify the properties of an object on the screen.</p> <p>Select the <code>Inner Text</code> option and click <code>OK</code> button to close the dialog. That will add the verification check to your list of recorded actions:</p> <p></p> <p>Click the Book Management button. \u00a0It is highlighted in the next screenshot:</p> <p></p> <p>You should now be on the Book Management page (see the below image).</p> <p></p> <p>Click the Create new book link:</p> <p></p> <p>You should now be on the Create New Book page (see image below). \u00a0Click the HOME button to go back to the main menu.</p> <p></p> <p>Now, click the Author Management button:</p> <p></p> <p>You should now be on the Author Management page (see image below):</p> <p></p> <p>Click the Create New Author link:</p> <p></p> <p>You should now be on the Create New Author page (see below). Click the Home button to go back to the main menu.</p> <p></p> <p>At this point, there should be 14 rows in the RA dialog grid.</p> <p>You are now back on the Main Menu. \u00a0Click Log Out (top-right) and close the browser.</p> <p>To end the recording session either press <code>CTRL+3</code> or click <code>Finish</code> button on the RA dialog.</p> <p>Rapise will generate the code.</p> <p></p> <p>Let's save our test. \u00a0Press the <code>Save</code> button at the top left of the Rapise window.</p> <p></p>"},{"location":"Guide/tutorial_web_using_javascript/#playback","title":"Playback","text":"<p>To execute the script, press the <code>Play</code> button on the toolbar.</p> <p></p> <p>Rapise will open a new instance of Chrome to the correct url (https://libraryinformationsystem.org) when the test begins.</p> <p>After execution, a screen like the one below will appear. \u00a0Each row represents a step in the test. The rows with green text are steps which passed, whereas the rows with red text are the steps which failed.</p> <p></p> <p>For more information on the report, see Automated Reporting.</p>"},{"location":"Guide/tutorial_web_using_javascript/#playback-in-other-browsers","title":"Playback in Other Browsers","text":"<p>Now that we have recorded our test in Chrome, we want to play the same script back in other browsers. That is very easy to do. Find web browser dropdown in the top right corner of the Rapise window and select a different browser (e.g. Selenium - Edge, Selenium - Firefox, etc.) and click the <code>Play</code> button.</p> <p></p>"},{"location":"Guide/tutorial_web_using_javascript/#track-and-learn-object-using-the-web-spy","title":"Track and Learn Object Using the Web Spy","text":"<p>This section will demonstrate how you can use Rapise to inspect the objects in a web page and Learn them for testing. This is useful in cases where you have more complex applications to test and you need to pick specific objects. For example you may want to select one of the books in the grid based on its name rather than its row number (which may change if you add books).</p> <p>On the toolbar expand the dropdown list for the Spy tool and make sure that <code>Web</code> is selected:</p> <p></p> <p>Now, click on the main <code>Spy</code> tool icon and Rapise will start the Web Spy:</p> <p></p> <p>Go back to the web page and login to the library information system with the same login/password (librarian/librarian) and click on the <code>Book Management</code> menu item so that the list of books is displayed:</p> <p></p> <p>Now back in the Web Spy, click on the <code>Get Snapshot</code> button to refresh the Web Spy and display the HTML elements (called the DOM tree) that make up this page:</p> <p></p> <p>Once it has loaded the DOM tree, you can expand/collapse the elements to see how the web page is constructed. This is useful when testing an application since many of the HTML elements on a page may be used for layout purposes and will not be visible in the browser. In the example page, we have expanded some of the nodes to display the main section of the page and the table that contains the list of books.</p> <p>In addition, you can use the <code>Track (Ctrl+T)</code> tool to select an item in the web page and then have it be highlighted in the DOM tree. For example if we want to find the cell that contains the book title <code>Amsterdam</code>, simply press Ctrl+T on the keyboard, move the mouse over the cell in the webpage**, wait until the red highlighting rectangle appears** and then click Ctrl+T again. Rapise will now highlight that item in the DOM Tree automatically:</p> <p></p> <p>You can see all of the properties of this HTML element displayed on the right, specifically:</p> <ul> <li>tagName of the element (td),</li> <li>text of the element (Amsterdam),</li> <li>HTML attributes in the Properties section,</li> <li>CSS and XPath expressions for locating this element in Selectors section.</li> </ul> <p>If you want to use this object in a Rapise test script, you can simply double click it in the DOM tree, this action will populate the edit field on the toolbar, then click the <code>Learn</code> button and the HTML element will be added to the Recording Activity Dialog:</p> <p></p> <p>Click <code>Finish</code> and the object will have been added to your test\u2019s Object Tree:</p> <p></p> <p>You can now expand this object and drag a test function to your test script. For example if you wanted to get the textual value of the cell in your test, drag the <code>GetInnerText</code> function into your test script:</p> <p></p>"},{"location":"Guide/tutorial_web_using_javascript/#test-xpath-and-learn-object-using-the-web-spy","title":"Test XPATH and Learn Object Using the Web Spy","text":"<p>In addition to letting Rapise automatically learn the object from the Web Spy, you can manually enter in XPATH or CSS queries to find matching elements on the page and then learn those for use in your test.</p> <p>For example, suppose we want to dynamically find the row that has the cell containing Amsterdam and then click on its Edit hyperlink.</p> <p>Open up the Web Spy as before:</p> <p></p> <p>One the toolbar enter in the following to locate the table:</p> <pre><code>//table[@id='MainContent_grdBooks']\n</code></pre> <p></p> <p>Now click on the <code>Test</code> button to display the matching results:</p> <p></p> <p>Now that we have matched the table, we need to add dynamic XPath to find any row that has the cell containing <code>Amsterdam</code> and find the edit link. You can expand the table and see the rows and cells visually and that will help us create the XPATH:</p> <pre><code>//table[@id='MainContent_grdBooks']//tr/td[text()='Amsterdam']/../td[5]/a\n</code></pre> <p>This XPath consists of the following elements:</p> <ol> <li>Find the table with the specified ID.</li> <li>Find any row inside that table that contains a cell with the text <code>Amsterdam</code>.</li> <li>For any matching cell, get its parent row and inside the fifth cell, get any hyperlink.</li> </ol> <p>In this case that will correctly locate the Edit link for the book <code>Amsterdam</code>. Now that we have the correct item identified, click on the <code>Learn</code> button to the right of the <code>Test</code> button. That will now learn a new object that corresponds to the <code>Edit Amsterdam</code> object:</p> <p></p> <p>Click <code>Finish</code> and the object will have been added to the Object Tree of the current test:</p> <p></p>"},{"location":"Guide/tutorial_web_using_javascript/#modify-the-test","title":"Modify the Test","text":"<p>To click on this object, simply drag the <code>DoClick</code> function for the new object from the Object Tree into the test script. This will cause the book details page for Amsterdam to be displayed during test playback:</p> <p></p> <p>Since clicking on the Edit link will take you to a different page than where the Create New Book link is available, in the example we have added a second instance of the:</p> <p><pre><code>SeS('Book_Management').DoClick();\n</code></pre> command, so that Rapise goes back to the main book list page before executing the Create New Book step. If we did not do this, the test would have failed.</p> <p></p> <p>Now the line:</p> <pre><code>SeS('Amsterdam').GetInnerText();\n</code></pre> <p>by itself does not do anything, it just gets the text.</p> <p>So to make the test more useful, we can use the global Tester object to add a step to verify this value. Drag the <code>AssertEqual</code> function from the <code>Tester</code> object to your test script just above the <code>SeS(\u201cAmsterdam\u201d)</code> line:</p> <p></p> <p>Now we need to just consolidate these two lines into the actual test. Using the script editor, change the two lines from:</p> <pre><code>Tester.AssertEqual('', null, null);\nSeS('Amsterdam').GetInnerText();\n</code></pre> <p>to</p> <pre><code>Tester.AssertEqual('The values match', 'Amsterdam', SeS('Amsterdam').GetInnerText());\n</code></pre> <p>Now click Play to playback the new test:</p> <p></p> <p>The test should now pass successfully.</p>"},{"location":"Guide/tutorial_web_using_javascript/#see-also","title":"See Also","text":"<ul> <li>Tutorial: Web Testing (RVL)</li> <li>Browser Profiles</li> </ul>"},{"location":"Guide/tutorial_windows_using_javascript/","title":"Tutorial: Windows Testing (Using JavaScript)","text":"<p>This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT). This version of the tutorial uses the JavaScript test editor option in Rapise. If you'd prefer to use the Rapise Visual Language (RVL), please go to the main Tutorial instead.</p> <p>Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be</p> <p><code>C:\\\\Users\\\\Public\\\\Documents\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe</code>.</p> <p>You will see the following:</p> <p></p> <p>Please run the application a few times and observe its behaviour. \u00a0</p> <ul> <li>If you press the <code>OK</code> button with the first edit box empty, the application will complain and return you to the dialog box.</li> <li>If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box.</li> <li>If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box.</li> </ul> <p>An adequate testing strategy for this over-simple application might be to:</p> <ol> <li>Put data in the first text box but not the second, and verify that the summary information is correct.</li> <li>Press the OK button with no data in either text box, and verify that a message box is displayed.</li> <li>Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information).</li> </ol> <p>If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding.</p> <p>Now, let's use Rapise to implement the first of these tests.</p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-1-run-the-application","title":"Step 1. Run the Application","text":"<p>Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen:</p> <p></p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-2-start-rapise","title":"Step 2. Start Rapise","text":"<p>Start Rapise and make the window a conveniently large size. \u00a0Click on the <code>File</code> menu (top left). \u00a0Choose the first option there, \"New Test.\"</p> <p></p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-3-create-new-test","title":"Step 3. Create New Test","text":"<p>Navigate to the desired path using the <code>...</code> button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications:</p> <p></p> <p>The following dialog will be displayed:</p> <p></p> <p>Click on the JavaScript (Advanced Users) button. You will now see the following:</p> <p></p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-4-start-recording","title":"Step 4. Start Recording","text":"<p>Press the \"Record\" button on the toolbar. \u00a0It has an icon like this:</p> <p></p> <p>You will see an application selection dialog like the following.</p> <p></p> <ul> <li>Select the \"Inflectra Rapise Two Dialogs Sample\" entry.</li> <li>Leave the library selection as \"Auto.\"</li> <li>Press the \"Select\" button at the bottom right.</li> </ul>"},{"location":"Guide/tutorial_windows_using_javascript/#step-5-recording-guidelines","title":"Step 5. Recording Guidelines","text":"<p>Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog:</p> <p></p> <p>The AUT will be brought to the foreground and Rapise will be minimized.</p> <p>You will achieve best results in recording if you observe the following guidelines:</p> <ol> <li>Work slowly while recording. \u00a0Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item.</li> <li>Use the mouse to select controls and operate them. \u00a0Avoid using keyboard shortcuts and keyboard commands.</li> </ol>"},{"location":"Guide/tutorial_windows_using_javascript/#step-6-record-the-activity-in-the-application","title":"Step 6. Record the Activity in the Application","text":"<ul> <li>Click in the first edit box in the TwoDialogs application.</li> <li>Type a name in this first edit box.</li> <li>Place mouse over the Summary field with 'Thank you' text and press Ctrl+1</li> </ul> <p>Rapise will open Verify Object Properties dialog.</p> <p></p> <p>Set checkbox on <code>Value</code> property and click <code>OK</code> button.</p> <p>Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it.</p> <p></p> <p>As you take these actions, you will see the Recording Activity grid update accordingly:</p> <p></p> <p>For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog.</p> <p>When you have finished recording the activity for the AUT, press the <code>Finish</code> button or Ctrl+3.</p> <p>Note: Do not terminate the TwoDialogs application.</p> <p>When you do this, the Recording Activity dialog will be closed and the AUT will lose focus.</p> <p>Rapise will change the view to display the newly recorded script. \u00a0It will look something like the following:</p> <p></p> <p>Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid.</p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-7-execute-the-test","title":"Step 7: Execute The Test","text":"<p>Press the \"Play\" button on the ribbon or the toolbar.</p> <p></p> <p>As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window.</p> <p>At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test:</p> <p></p>"},{"location":"Guide/tutorial_windows_using_javascript/#step-8-a-refinement-on-the-launching-of-twodialogsexe","title":"Step 8: A Refinement on the Launching of TwoDialogs.exe.","text":"<p>To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. \u00a0If this situation remained, the test script would require that the AUT be running before the script started. \u00a0That would require that the person running the test remembered where it resided. \u00a0To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test.</p> <p>Rapise has an underlying scripting language based on JavaScript (see Scripting). \u00a0This help system covers available scripting objects in detail from a practical perspective. \u00a0For the moment, we want to simply take the shortest path to starting the application before attempting to run the test.</p> <p>There are at least 3 ways of adding application launch code to your test.</p> <p>Way 1: Drag The File from the Test Files view</p> <p>First, switch to Test Files view. Right-click on <code>Test</code> folder and choose \"Add File(s)...\" menu item:</p> <p></p> <p>And select the location of the TwoDialogs.exe. Normally, it is</p> <pre><code>C:\\Program Files\\Inflectra\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre> <p></p> <p>Now you have the executable as a part of your test files set:</p> <p></p> <p>If you wish to launch TwoDialogs.exe once then just double-click on it in the tree. If you wish it to be launched every time the test starts then simply drag it from the tree into the source code:</p> <p></p> <p>The proper launch statement will be inserted:</p> <p></p> <p>Way 2: Type the Code</p> <p>The <code>Global</code> object contains methods that are available to all scripts. Select the <code>Main.js</code> file in the Test Files view of the Rapise main page. Double-click the file name to open it in the main (editing) window of Rapise. \u00a0You will see the generated script from the recording session from earlier steps in this sample.</p> <p>Place the cursor in the main editing window and click on the first line after</p> <pre><code>function Test()\n{\n</code></pre> <p>Now type <code>Global</code>. As soon as you type the <code>.</code>, Rapise will give you a drop down list of all the available methods available in the <code>Global</code> object:</p> <p></p> <p>Select the <code>DoLaunch(cmdLine, wrkD)</code> member and hit the <code>Enter</code> key.</p> <p>Now your script contains the line:</p> <pre><code>Global.DoLaunch('')\n</code></pre> <p>You need to correct the references to the command line:</p> <pre><code>Global.DoLaunch('\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"');\n</code></pre> <p>Way 3: Drag the Action from the Objects Tree</p> <p>You may drag the method template from the Object Tree view. Expand the Global node and select the <code>DoLaunch</code> action in it. Drag the node into the proper position inside the script source:</p> <p></p> <p>Template call is inserted:</p> <p></p> <p>Now you need to correct the references to the command line:</p> <pre><code>Global.DoLaunch('\"C:\\\\Program Files\\\\Inflectra\\\\Rapise\\\\Samples\\\\TwoDialogs\\\\TwoDialogs.exe\"');\n</code></pre>"},{"location":"Guide/tutorial_windows_using_javascript/#advanced-testing-using-the-object-spy","title":"Advanced Testing using the Object Spy","text":"<p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn.</p> <p>When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy:</p> <p></p> <p>Press Ctrl+G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl+G again to stop tracking:</p> <p></p> <p>This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent. That will display its parent objects:</p> <p></p> <p>For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.</p>"},{"location":"Guide/twodialogs_sample/","title":"Tutorial: Windows Testing (RVL)","text":"<p>This section outlines the usage of Rapise for testing a simple Windows Desktop Application Under Test (AUT). This version of the tutorial uses the Rapise Visual Language (RVL) scriptless mode. If you're interested in the JavaScript version, we have a separate tutorial.</p> <p>Please run the application now. You will find it in the samples directory where you installed Rapise. By default, that will be</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre> <p>You will see the following:</p> <p></p> <p>Please run the application a few times and observe its behaviour. \u00a0</p> <ul> <li>If you press the <code>OK</code> button with the first edit box empty, the application will complain and return you to the dialog box.</li> <li>If you put text in the first edit box but not the second, you will be shown a single line of text in a read-only edit box.</li> <li>If you enter text in the second edit box as well as the first, pressing OK will put two lines of summary information in the read-only edit box.</li> </ul> <p>An adequate testing strategy for this over-simple application might be to:</p> <ol> <li>Put data in the first text box but not the second, and verify that the summary information is correct.</li> <li>Press the OK button with no data in either text box, and verify that a message box is displayed.</li> <li>Verify that if the success \"Thank You\" message is displayed the edit box input fields are cleared (but not the summary information).</li> </ol> <p>If at this point you do not understand what the application is supposed to do, or the application is not behaving as described here, please contact Support and clarify the details before proceeding.</p> <p>Now, let's use Rapise to implement the first of these tests.</p>"},{"location":"Guide/twodialogs_sample/#step-1-run-the-application","title":"Step 1. Run the Application","text":"<p>Run the TwoDialogs application and leave it in its default start state. Once you execute the TwoDialogs.exe application it will be displayed on the screen:</p> <p></p>"},{"location":"Guide/twodialogs_sample/#step-2-start-rapise","title":"Step 2. Start Rapise","text":"<p>Start Rapise and make the window a conveniently large size. \u00a0Click on the <code>File</code> menu (top left). \u00a0Choose the first option there, \"New Test.\"</p> <p></p>"},{"location":"Guide/twodialogs_sample/#step-3-create-new-test","title":"Step 3. Create New Test","text":"<p>Navigate to the desired path using the <code>...</code> button on the Create New Test dialog. Enter the name of the new test script we're going to write (e.g. \"TwoDialogsTest\"). Click on the Basic: Windows Desktop Application methodology. This should always be used for testing Windows desktop applications:</p> <p></p> <p>The following dialog will be displayed:</p> <p></p> <p>Click on the RVL (Rapise Visual Language) button.  You will now see the following:</p> <p></p>"},{"location":"Guide/twodialogs_sample/#step-4-start-recording","title":"Step 4. Start Recording","text":"<p>Press the \"Record\" button on the toolbar. \u00a0It has an icon like this:</p> <p></p> <p>You will see an application selection dialog like the following.</p> <p></p> <ul> <li>Select the \"Inflectra Rapise Two Dialogs Sample\" entry.</li> <li>Leave the library selection as \"Auto.\"</li> <li>Press the \"Select\" button at the bottom right.</li> </ul>"},{"location":"Guide/twodialogs_sample/#step-5-recording-guidelines","title":"Step 5. Recording Guidelines","text":"<p>Rapise will pause while it starts the necessary background processes and hooks into the running AUT. Once those tasks are complete, you will see the following \"Recording Activity\" for \"Inflectra Rapise Two Dialogs Sample\" dialog:</p> <p></p> <p>The AUT will be brought to the foreground and Rapise will be minimized.</p> <p>You will achieve best results in recording if you observe the following guidelines:</p> <ol> <li>Work slowly while recording. \u00a0Perform one action and wait for the results to be recorded in the Recording Activity dialog as a new grid line-item before going to the next item.</li> <li>Use the mouse to select controls and operate them. \u00a0Avoid using keyboard shortcuts and keyboard commands.</li> </ol>"},{"location":"Guide/twodialogs_sample/#step-6-record-the-activity-in-the-application","title":"Step 6. Record the Activity in the Application","text":"<ul> <li>Click in the first edit box in the TwoDialogs application.</li> <li>Type a name in this first edit box.</li> <li>Place mouse over the Summary field with 'Thank you' text and press Ctrl+1</li> </ul> <p>Rapise will open Verify Object Properties dialog.</p> <p></p> <p>Set checkbox on <code>Value</code> property and click <code>OK</code> button.</p> <p>Watch the Recording activity dialog as you operate the AUT interface. As you press a button or fill a field, notice that the grid in the Recording activity has entries added to it.</p> <p></p> <p>As you take these actions, you will see the Recording Activity grid update accordingly:</p> <p></p> <p>For a full explanation of the controls on this dialog, refer to the reference for Recording Activity Dialog.</p> <p>When you have finished recording the activity for the AUT, press the <code>Finish</code> button or Ctrl+3.</p> <p>Note: Do not terminate the TwoDialogs application.</p> <p>When you do this, the Recording Activity dialog will be closed and the AUT will lose focus.</p> <p>Rapise will now ask you to confirm that you want to add the recorded steps to the current location in the test grid:</p> <p></p> <p>Click <code>Append to End</code>, then Rapise will change the view to display the newly recorded test steps. \u00a0It will look something like the following:</p> <p></p> <p>Notice that the two steps of the test are automatically documented as Action commands in the test grid, and that they correspond precisely and in the same order as the way they appeared in the Recording Activity dialog during recording. In addition, the Verify checkpoint has been recorded as an Assert\u2026Condition set of steps in the grid.</p>"},{"location":"Guide/twodialogs_sample/#step-7-execute-the-test","title":"Step 7: Execute The Test","text":"<p>Press the \"Play\" button on the ribbon or the toolbar.</p> <p></p> <p>As the script runs, the Rapise window will be minimized to the taskbar and you will see the results of the script's activities on the TwoDialogs application window.</p> <p>At the end of the script execution, the Rapise window will be restored and the view will be of the report for the test:</p> <p></p>"},{"location":"Guide/twodialogs_sample/#step-8-a-refinement-on-the-launching-of-twodialogsexe","title":"Step 8: A Refinement on the Launching of TwoDialogs.exe.","text":"<p>To date, we have operated on the assumption that the TwoDialogs sample program (application) is running. \u00a0If this situation remained, the test script would require that the AUT be running before the script started. \u00a0That would require that the person running the test remembered where it resided. \u00a0To overcome this, Rapise provides a way to have the script run the program (AUT) before beginning the test.</p> <p>Rapise comes with a series of useful Global utility objects that can do things such as start applications, kill processes, access the file system, etc. To launch the TwoDialogs application at the start of the test, go to the first row in the test grid and click <code>Insert Row Before</code> icon on the toolbar:</p> <p></p> <p>Now in the new row that was created, choose Action as the Type column:</p> <p></p> <p>Then in the next cell, choose Global as the object:</p> <p></p> <p>Then in the next cell, choose DoLaunch and press <code>ENTER</code> on the keyboard:</p> <p></p> <p>Now you just need to enter in the location of the TwoDialogs application in the final cell (ParamValue):</p> <pre><code>C:\\Users\\Public\\Documents\\Rapise\\Samples\\TwoDialogs\\TwoDialogs.exe\n</code></pre> <p></p> <p>Now if you click Play, Rapise will launch the application and then complete the recorded test steps.</p>"},{"location":"Guide/twodialogs_sample/#advanced-testing-using-the-object-spy","title":"Advanced Testing using the Object Spy","text":"<p>Sometimes you need to learn objects that are not visible or are obscured by other objects. To help with this, Rapise has the Object Spy tool. The Spy tool lets you see the objects in the application in a hierarchy that you can learn.</p> <p>When you are in the middle of recording, click on the Spy button and Rapise will display the UIAutomation Spy:</p> <p></p> <p>Press Ctrl+G on the keyboard to start tracking. Hover the mouse over one of the text boxes in the TwoDialogs application and press Ctrl+G again to stop tracking:</p> <p></p> <p>This shows you the object you selected, together with its various Windows attributes. If you want to see its place in the hierarchy of the application, right click on Edit in the top-left pane and choose Parent. That will display its parent objects:</p> <p></p> <p>For example in this view you can see all text boxes, the labels and some of the Windows standard objects (the Window title bar, OK and Cancel buttons, etc.). Each of these can be expanded to show their children, and any of the objects can be Learned by clicking the Learn Object button in the top of the Spy. Once learned, you can use one of the options described above to write a test using it.</p>"},{"location":"Guide/understanding_the_script/","title":"Understanding the Script","text":""},{"location":"Guide/understanding_the_script/#purpose","title":"Purpose","text":"<p>When you create a new test in Rapise, four files are created:</p> <ul> <li>&lt;TestName&gt;.sstest - the test project file (e.g. MyTest.sstest)</li> <li>Main.js - the main test script file that contains the entry point of the test - <code>Test</code> function.</li> <li>Objects.js - the file that contains recorded objects.</li> <li>User.js - the file that contains user defined functions.</li> <li>Main.rvl.xlsx - an RVL file for RVL-enabled tests.</li> </ul> <p>where &lt;TestName&gt; is the name of your Test.</p> <p>You can have as many JavaScript files in your test directory as you like, but <code>Main.js</code> is the main test script (unless you specify otherwise in the Settings Dialog). When you record, your interactions are written to <code>Main.js</code> and objects are written to <code>Objects.js</code> when you Playback the test, <code>Main.js</code> is the script that will run. \u00a0All Rapise test scripts must have the same basic structure.</p>"},{"location":"Guide/understanding_the_script/#usage","title":"Usage","text":"<p>If you are going to modify the script, or create a test script from scratch, you will need to know the test script structure.</p>"},{"location":"Guide/understanding_the_script/#basic-script","title":"Basic Script","text":""},{"location":"Guide/understanding_the_script/#mainjs","title":"Main.js","text":"<p><code>Main.js</code> always contains two things: <code>Test(param)</code> entry point function and <code>g_load_libraries</code> array containing the libraries needed for this test case.</p> <pre><code>// Default entry point of the test\nfunction Test()\n{\n    //script logic\n}\n\n// List of loaded libraries. It is automatically populated by the recorder.\ng_load_libraries=[\"Web\"]; // This script will load the Web library\n</code></pre>"},{"location":"Guide/understanding_the_script/#userjs","title":"User.js","text":"<p><code>User.js</code> Is a place where to put functions and variables specific to a given test case.</p> <pre><code>//Put your custom functions and variables in this file\n</code></pre>"},{"location":"Guide/understanding_the_script/#objectjs","title":"Object.js","text":"<p><code>Object.js</code> is an object repository. You may consider it as a <code>JSON</code> definition assigned to a <code>saved_script_objects</code> variable.</p> <pre><code>var saved_script_objects = \n{\n \u00a0 //array of objects used in this script.\n};\n</code></pre>"},{"location":"Guide/understanding_the_script/#mainrvlxlsx","title":"Main.rvl.xlsx","text":"<p>See RVL</p>"},{"location":"Guide/understanding_the_script/#full-script","title":"Full script","text":"<p>The following callback functions are also recognized by Rapise and may be present in the test script. Put these functions either in <code>Main.js</code> or <code>User.js</code>.</p>"},{"location":"Guide/understanding_the_script/#sesontestinit","title":"SeSOnTestInit","text":"<p>This callback function is called once before script playback. It should be used to initialize script-wide data (counters, open datasets, etc).</p> <pre><code>SeSOnTestInit(function(){\n    Log(\"Initializing...\");\n});\n</code></pre> <p><code>SeSOnTestInit</code> may be used multiple times. For example, one may use it in the custom library to launch an application or clean up the logs and then use it in the test to do test-specific actions.</p> <p>Please, note: <code>SeSOnTestInit</code> should be not be put into the <code>Test</code> because <code>Test</code> is invoked after initialization.</p> <p>Deprecated: You may also define a global function <code>TestInit()</code> that works the same way as a callback. However if there are many such functions, only one will actually work.</p>"},{"location":"Guide/understanding_the_script/#sesontestfinish","title":"SeSOnTestFinish","text":"<p>This function defines a callback that is called once after test execution. It should be used to release resources (data sets, spreadsheets). It may also be used as an integration point with external test management or bug tracking systems.</p> <pre><code>SeSOnTestFinish(function(){\n    Log(\"Finalizing...\");\n});\n</code></pre> <p><code>SeSOnTestFinish</code> may be used multiple times. For example, one may use it in the custom library to close an application.</p> <p>Deprecated: You may also define a global function <code>TestFinish()</code> that works the same way as a callback. However if there are many such functions, only one will actually work.</p>"},{"location":"Guide/understanding_the_script/#sesontestprepare","title":"SeSOnTestPrepare","text":"<p>For advanced users; <code>SeSOnTestPrepare</code> callback is called before recording and before playback. It may be used to properly initialize libraries.</p> <p>Please, note that <code>SeSOnTestPrepare</code> may be put into a <code>shared</code> file. In this case it will be executed for playback but not for recording (because recorder does not load shared files). But if you put it into your library, it will be executed in all cases when library is loaded.</p> <pre><code>SeSOnTestPrepare(function(){\n    Log(\"Preparing...\");\n});\n</code></pre> <p><code>SeSOnTestPrepare</code> may be used multiple times. For example, one may use it in the custom library to configure environment for the application and then use it in the test to do test-specific actions.</p> <p>Please, note: <code>SeSOnTestPrepare</code> should not be put into the <code>Test()</code> because <code>Test()</code> is invoked after initialization.</p> <p>Deprecated:  You may also define a global function <code>TestPrepare()</code> that works the same way as a callback. However if there are many such functions, only one will actually work.</p>"},{"location":"Guide/understanding_the_script/#sesontestfailed","title":"SeSOnTestFailed","text":"<p>May be used to do something on test failure event.</p> <pre><code>SeSOnTestFailed(function(status){\n    Log(\"Test Failed\");\n});\n</code></pre> <p>status parameter will always be 0 (Failed) or -1 (Undefined).</p>"},{"location":"Guide/understanding_the_script/#sesontestreportready","title":"SeSOnTestReportReady","text":"<p>Final point, called when report is closed and is ready for post-processing.</p> <pre><code>SeSOnTestReportReady(function(){\n    // Don't use anything that writes to the report at this point!\n    // Only low level operations and functions: File, WScript.Shell etc.\n    Log(\"Test done with status: \"+g_testPassed);\n    Log(\"Report file: \"+g_reportFileName);\n})\n</code></pre>"},{"location":"Guide/understanding_the_script/#sesonobjectnotfound","title":"SeSOnObjectNotFound","text":"<p>Final point, called when object is not found on the screen.</p> <pre><code>SeSOnObjectNotFound(function (/**string*/ objectId, /**object*/params){\n    // When 'Back' is not on the screen, use 'Home' instead.\n    if(objectId=='Back') return SeS('Home', params);\n});\n</code></pre> <p>objectId - object id; params - additional locator parameters (if any).</p>"},{"location":"Guide/understanding_the_script/#sesonlocatorvalue","title":"SeSOnLocatorValue","text":"<p>A way to modify default object locator value. Useful when you, for example.</p> <pre><code>SeSOnLocatorValue(function(/**string*/ value, /**object*/objInfo) {\n    // We use '{home_xpath}' as a placeholder to replace it with different value here.\n    // ID is accessible as objInfo.object_id\n    if(value=='{home_xpath}') return \"//a[@href='Default.aspx']\";\n    return value;\n});\n</code></pre> <p>value - value to replace; objInfo - all locator values.</p>"},{"location":"Guide/understanding_the_script/#sesonreportmessage","title":"SeSOnReportMessage","text":"<p>Allows interrupting <code>Tester._Report</code> and either changing it or checking it. <code>Tester._Report</code> is internally called by all <code>Tester.*Assert</code> calls executed by user or internally by other parts of Rapise (i.e. each <code>Obj.DoAction</code> writes a line into report).</p> <pre><code>SeSOnReportMessage(function(/**string*/ type, /**string*/ message, /**number*/ status, /**SeSReportLink|SeSReportText|SeSReportImage|Object[]*/ data, /**object*/ tags) {\n// return true - skip the message from being reported\n// return false / nothing - proceed with this message\n});\n</code></pre>"},{"location":"Guide/understanding_the_script/#see-also","title":"See Also","text":"<p>To specify a different test script, see the Settings Dialog. The test script is specified by Settings &gt; ScriptPath.</p>"},{"location":"Guide/unified_service_desk/","title":"Microsoft Dynamics 365 Unified Service Desk","text":"<p>Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD.</p>"},{"location":"Guide/unified_service_desk/#hybrid-application","title":"Hybrid Application","text":"<p>Most of the panels in USD are web views (highlighted in red) and some parts are pure desktop areas (highlighted in orange). Rapise is able to deal with web content in USD same way it deals with pure web applications loaded into browsers. Desktop parts of USD are controlled through UIAutomation library.</p> <p></p>"},{"location":"Guide/unified_service_desk/#browser-profile","title":"Browser Profile","text":"<p>In order to deal with web content in USD a browser profile should be configured.  This profile will be used by Rapise to connect to embedded browser components.</p> <ol> <li>In the main menu select <code>Settings &gt; Browser</code>.</li> <li>Select Internet Explorer HTML profile and click Duplicate.</li> <li>Specify name for the new profile: UnifiedServiceDesk.</li> <li>Set Browser Path to <code>C:\\Program Files (x86)\\Microsoft Dynamics CRM USD\\USD\\UnifiedServiceDesk.exe</code></li> <li>Set <code>Default Click Mode</code> to click.</li> <li>Save the profile.</li> </ol> <p></p>"},{"location":"Guide/unified_service_desk/#test-framework","title":"Test Framework","text":""},{"location":"Guide/unified_service_desk/#root-test","title":"Root Test","text":"<p>Suggested approach to building a test framework for USD is to create a root empty test which will serve as a container for test scenarios and building blocks.</p> <p>Let's create USDFramework test. Choose Web methodology, <code>UnifiedServiceDesk</code> browser profile and RVL options along the way.</p> <p></p> <p>In the main file of the test (<code>Main.js</code>) specify the list of libraries to load:</p> <pre><code>g_load_libraries=[\"UIAutomation\", \"Web\", \"DomDynamicsCrm\"];\n</code></pre> <p></p>"},{"location":"Guide/unified_service_desk/#browser-automation-sub-test","title":"Browser Automation Sub-Test","text":"<p>For recording web content related actions create a sub-test inside USDFramework. Let's name it USDDashboard. Choose Web methodology and UnifiedServiceDesk browser profile along the way.</p> <p></p> <p>Double click USDDashboard test to open it in another instance of Rapise. Append <code>DomDynamicsCrm</code> to the list of loaded libraries.</p> <p></p> <p>Also in <code>User.js</code> of USDDashboard insert a line:</p> <pre><code>g_webPluginsAutoDetect = false;\n</code></pre> <p>We can now record web steps into USDDashboard.</p> <p></p>"},{"location":"Guide/unified_service_desk/#desktop-automation-sub-test","title":"Desktop Automation Sub-Test","text":"<p>For recording desktop content related actions create a sub-test inside USDFramework. Let's name it USDCallScript. Choose Desktop methodology along the way.</p> <p></p> <p>Double click USDCallScript test to open it in another instance of Rapise. Insert the following snippet into <code>Main.js</code>:</p> <pre><code>function TestPrepare()\n{\n    if (g_recording)\n    {\n        g_UIAutomationWrapper.DeepPointTracking(true);\n    }\n}\n</code></pre> <p><code>DeepPointTracking</code> flag fixes the bug in UI Automation tree of USD that prevents automation tools to track elements located under cursor.</p> <p></p> <p>Let's record steps into USDCallScript. After pressing Record choose Unified Service desk in the list of applications.</p> <p></p> <p>Note: recording part is missing on the video above because screen capturing software interferes with Rapise doing desktop recording.</p> <p></p> <p>Here is the test playback.</p> <p></p>"},{"location":"Guide/unified_service_desk/#assembling-blocks","title":"Assembling Blocks","text":"<p>Now we can execute USDDashboard and USDCallScript from USDFramework. Open USDFramework test and drag-and-drop sub-tests to RVL sheet.</p> <p></p> <p></p> <p>The test framework created in this session is available on GitHub.</p>"},{"location":"Guide/unified_service_desk/#see-also","title":"See Also","text":"<ul> <li>Microsoft Dynamics</li> <li>Get the framework for testing Unified Service Desk (github)</li> <li>Advanced example of testing USD on GitHub</li> <li>Testing Dynamics 365 for Sales</li> </ul>"},{"location":"Guide/unit_testing/","title":"Unit Testing","text":""},{"location":"Guide/unit_testing/#purpose","title":"Purpose","text":"<p>Unit Testing involves testing individual units of a piece of software to make sure they act as intended. \u00a0The units tested are usually functions or class methods.</p>"},{"location":"Guide/unit_testing/#usage","title":"Usage","text":"<p>There are five ways that Rapise can help you Unit Test:</p> <ol> <li>Rapise methods support testing objects and methods in DLLs.</li> <li>Rapise can test ActiveX objects and their methods through their COM Interface.</li> <li>If you choose to write your Unit tests in a third-party tool, Rapise has a Command Line interface where you can access its functionality.</li> <li>Test results are written to a TAP file, which allows integration with Unit Testing frameworks.</li> <li>Rapise tests can be invoked from Visual Studio MS-Test, VSTS and NUnit tests.</li> </ol>"},{"location":"Guide/using_native_selenium_code/","title":"Using Native Selenium Code","text":"<p>When using the standard Rapise Record, Learn, and Web Spy tools you can create your web tests using the Rapise built-in Object Tree. This lets you design your tests using a higher level of abstraction than working directly with Selenium WebDriver.</p> <p>For example you can learn an object <code>SeS(\"EditButton\")</code> that points to a dynamic XPATH or CSS query that the automation engineer knows will be accurate even if the data on the page changes (for example). The QA analyst can then simply drag and drop these Rapise objects from the Object Tree into the test script (e.g. <code>SeS(\"EditButton\").DoClick()</code>) to perform the desired action.</p> <p>Sometimes however you will want to be able to run standard Selenium raw WebDriver code inside Rapise using the standard Selenium WebDriver API functions. Rapise allows you to do this using the special WebDriver global object:</p> <p></p> <p>The WebDriver object implements the various standard Selenium WebDriver API calls for automating the web browser. There is a sample available for Rapise called UsingSelenium (you can open it from the <code>View &gt; Start Page</code>) that illustrates using the WebDriver code directly, but for completeness, here is a sample that uses the www.libraryinformationsystem.org web site and performs some simple actions:</p> <pre><code>// Open and connect the browser\nWebDriver.CreateDriver();\n\n//Open the URL for the www.libraryinformationsystem.org website:\nWebDriver.SetUrl('https://www.libraryinformationsystem.org');\n\n//Find the body element and verify the text in it\nvar el = WebDriver.FindElementByXPath(\"//body\");\nTester.Assert(\"Text found in BODY\", el.GetText().indexOf(\"Library Information System\") != -1);\n\n//Click on the login link\nvar logInLink = WebDriver.FindElementById('HeadLoginView\\_HeadLoginStatus');\nlogInLink.Click();\n\n//Make sure the input textbox is as expected\n\nvar userName = WebDriver.FindElementByCssSelector(\"html &gt; body &gt; form &gt; div:nth-of-type(3) &gt; div:nth-of-type(2) &gt; div:nth-of-type(2) &gt; fieldset &gt; p:first-of-type &gt; input\");\nTester.AssertEqual(\"class is 'textbox'\", \"textbox\", userName.GetAttribute(\"class\"));\n\n//Go to a different URL (https://libraryinformationsystem.org/HtmlTest.htm)\nWebDriver.SetUrl('https://www.libraryinformationsystem.org/HtmlTest.htm');\n\n//Click on the Alert box\nvar alertBtn = WebDriver.FindElementById(\"btnAlert\");\nalertBtn.Click();\n\n//Switch to this alert box and close\nvar alertElement = WebDriver.SwitchToAlert();\nalertElement.Accept();\n\n//Shut down Selenium\nWebDriver.Quit()\n</code></pre> <p>More sophisticated sample is available in rapise-samples repository.</p> <p>When you click <code>Play</code> to playback your Selenium script, make sure you have selected one of the Selenium web browser profiles. If you have selected a native browser profile (e.g. \u201cFirefox HTML\u201d instead of \u201cSelenium \u2013 Firefox\u201d) you will get the error message \u201cWebDriver\u201d is not defined.</p>"},{"location":"Guide/using_native_selenium_code/#code-completion-for-the-selenium-webelement-objects","title":"Code Completion for the Selenium WebElement Objects","text":"<p>When you are using functions such as <code>FindElementsById()</code> in your code, the returned object will be a Selenium Web Element.</p> <p>Assign <code>WebElement</code> to a variable and benefit from intellisense and code-completion feature.</p> <pre><code>var logInLink = WebDriver.FindElementById(\"HeadLoginView_HeadLoginStatus\");\n</code></pre> <p></p>"},{"location":"Guide/using_native_selenium_code/#interoperability-with-rapise-objects","title":"Interoperability with Rapise Objects","text":"<p>In addition to being able to use raw Selenium code on its own, you can also use a mixture of Rapise object-based code and raw Selenium WebDriver code.</p> <p>For example, you are using the standard Rapise approach (using learned <code>SeS('object')</code> objects) for testing but at some point want to switch to Selenium API to call a couple of WebElement functions on a learned object, you can use the special element property:</p> <pre><code>var /**WebElementWrapper*/ webElement = SeS('MyObject').element;\n</code></pre> <p>Prefixing the variable with <code>/**WebElementWrapper*/</code> enables code completion for it.</p> <p>If you want to do the reverse and be able to create a Rapise <code>SeS('object')</code> on the fly from a physical object on the web page, you can do the <code>Navigator.SeSFind(xpath)</code> function that returns a Rapise SeSObject, in the same way that <code>SeS('id')</code> does normally:</p> <pre><code>var sesObj = Navigator.SeSFind(\"//body//div[@id='logArea']\");\n</code></pre>"},{"location":"Guide/variable_call_stack_view/","title":"Variable/Call Stack View","text":""},{"location":"Guide/variable_call_stack_view/#purpose","title":"Purpose","text":"<p>Lists the functions in the current call stack. \u00a0Beneath each function, variables/objects local to that function are listed with their value and type.</p>"},{"location":"Guide/variable_call_stack_view/#how-to-open","title":"How to Open","text":"<p>Begin debugging a script. \u00a0The Variable/Call Stack View will open automatically.</p>"},{"location":"Guide/variable_call_stack_view/#go-to-a-function-definition","title":"Go to a Function Definition","text":"<p>Double click on a function to go to its definition.</p>"},{"location":"Guide/variable_call_stack_view/#call-stack-view-optimization","title":"Call Stack View Optimization","text":"<p>The view of the call stack depends on the value of the Optimize Call Stack setting. When set to True, internal calls used by the Rapise runtime are skipped, resulting in a shorter call stack:</p> <p></p> <p>When set to False, the full call stack is shown, including all internal calls:</p> <p></p>"},{"location":"Guide/variable_call_stack_view/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> </ul>"},{"location":"Guide/verbosity_levels/","title":"Verbose Levels","text":""},{"location":"Guide/verbosity_levels/#purpose","title":"Purpose","text":"<p>The Verbose Level affects the amount of information written to the Output View.</p>"},{"location":"Guide/verbosity_levels/#usage","title":"Usage","text":"<p>The Verbose Level is set via menu <code>Tools &gt; Verbose Level &gt; ...</code>:</p> <p></p>"},{"location":"Guide/verbosity_levels/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> <li>Debugger Toolbar</li> </ul>"},{"location":"Guide/verify_object_properties/","title":"Verify Object Properties Dialog","text":""},{"location":"Guide/verify_object_properties/#purpose","title":"Purpose","text":"<p>Use the Verify Object Properties dialog during recording to add checkpoints.</p>"},{"location":"Guide/verify_object_properties/#how-to-open","title":"How to Open","text":"<ol> <li>First, open the Recording Activity Dialog.</li> <li>Position the mouse over an object and press <code>Ctrl+1</code>, or</li> <li>Press the <code>Verify</code> button and then click the target object with the mouse cursor.</li> </ol>"},{"location":"Guide/verify_object_properties/#create-a-checkpoint","title":"Create a Checkpoint","text":"<p>Your checkpoint will be associated with a particular object. \u00a0That object's properties will be listed in the Verify Object Properties dialog. \u00a0Check those properties that you wish to verify during playback. \u00a0Enter expected values for the selected properties in the Value column. </p> <p>Note: The Bitmap and BWBitmap properties are images of the object.</p> <p></p> <p>Press the <code>OK</code> button. \u00a0The Verify Object Properties dialog will close, and the Recording Activity dialog will contain a new Verify action:</p> <p></p> <p>The generated script will have a corresponding assert statement: </p> <p>Or, in JavaScript mode:</p> <pre><code>   Tester.Assert(\"Verify that: InnerText=Log In\", SeS('Log_In1').GetInnerText() == \"Log In\" );\n</code></pre>"},{"location":"Guide/verify_object_properties/#check-object-exists","title":"Check Object Exists","text":"<p>Since Rapise 6.6 the Verify Object Properties dialog shows <code>Exists</code> property. It adds Global.DoWaitFor action to the recording.</p>"},{"location":"Guide/verify_object_properties/#check-object-visible","title":"Check Object Visible","text":"<p>Since Rapise 6.6 the Verify Object Properties dialog shows <code>Visible</code> property. It checks that the object is visible on screen.</p>"},{"location":"Guide/verify_object_properties/#see-also","title":"See Also","text":"<ul> <li>Recording</li> <li>Assert Statements</li> </ul>"},{"location":"Guide/visual_language/","title":"Rapise Visual Language (RVL)","text":"<p>Rapise includes a scriptless approach to writing automated tests as well as the option to use the built-in JavaScript IDE.</p> <p>This section gives an overview of the Rapise Visual Language (RVL) option and why you would use it.</p> <p>Info</p> <p>For more information on RVL's syntax and constructs, please refer to the separate RVL section of this user manual.</p>"},{"location":"Guide/visual_language/#what-is-scriptless-testing","title":"What is Scriptless Testing","text":"<p>Let's imagine we're recording a simple automated web test against the sample\u00a0http://www.libraryinformationsystem.org website that comes with Rapise:</p> <p></p> <p>Now in this script, we'll perform the following actions to verify that you can login correctly (the happy path):</p> <ol> <li> <p>Click on the login button</p> </li> <li> <p>Enter your username and password</p> </li> <li> <p>Click on the submit button</p> </li> <li> <p>Once the home page loads, verify the name of the logged in user at the top-right</p> </li> </ol> <p>If you use the JavaScript scripting option, what will be recorded is a JavaScript test script that looks something like the following:</p> <p></p> <p>You can drag and drop objects and actions from the object tree on the left-hand side into the test script, but for automation engineers that are not programmers, we found that in many cases the resulting scripts are not easy to understand and the syntax can be fiddly to get right. All Java, JavaScript, C#, C++, C programmers out there know that you need curly braces, semi-colons at the end of each line, etc. but for others, it's not so obvious.</p> <p>So to make automated testing and the power of Rapise's object based testing easier and more accessible, you can use the alternative RVL methodology.</p>"},{"location":"Guide/visual_language/#rvl","title":"RVL","text":"<p>Let's imagine that we perform the exact same set of steps, recording the test script using the Rapise Visual Language approach. As a result we get:</p> <p></p> <p>What you'll notice is that each of the recorded actions has now become a series of rows in the grid.</p> <p>The Type column sets the type of a row (perform an action, comment, make an assertion that a value matches what was expected, set a variable, be a parameter or output to the current test report):</p> <p></p> <p>The Object column is used to select the object from the object tree:</p> <p></p> <p>Note</p> <p>This dropdown shows all the objects from the object tree, global utility objects as well as <code>Functions</code> object which you can use to call custom functions (written in JavaScript).</p> <p>The Action column defines what to do with the selected object.</p> <p></p> <p>Finally, the remaining columns (ParamName, ParamType, ParamValue) contain any parameter values, with subsequent rows being used if necessary:</p> <p></p> <p>This means that once you have learned the objects during testing, anyone can compose the test just by adding rows to the grid and then just picking the appropriate objects and actions.</p>"},{"location":"Guide/visual_language/#power-of-dropdowns","title":"Power of Dropdowns","text":"<p>RVL dropdowns help you spend less time on editing test steps. When you expand the Object dropdown you see available objects. When an object is selected the Action dropdown shows applicable actions. If a selected action accepts parameters then parameter names and types are generated automatically.</p> <p></p>"},{"location":"Guide/visual_studio/","title":"Visual Studio and Azure DevOps Integration v1","text":"<p>Tip</p> <p>This documentation section is deprecated. There is a new way of integrating Rapise and Azure DevOps. Please refer to Azure DevOps Integration v3.</p> <p>This section describes how to execute Rapise tests using the Microsoft Test Framework.</p> <p>You can execute tests with</p> <ul> <li>Visual Studio Test Explorer</li> <li>Visual Studio Team Services / Team Foundation Server</li> <li>Azure DevOps</li> </ul>"},{"location":"Guide/visual_studio/#unit-test-mapping","title":"Unit Test Mapping","text":"<p>Rapise integrates with Visual Studio at Unit Test level.</p> <p>Create a Unit Test project in Visual Studio, add a unit test and a test method. In the References section add the DLL:</p> <pre><code>c:\\Program Files (x86)\\Inflectra\\Rapise\\Extensions\\UnitTesting\\VSUnit\\SeSVSUnit\\Bin\\Release\\SeSVSUnit.dll\n</code></pre> <p>In a test method specify absolute path to a Rapise test and pass <code>TextContext</code> parameter to <code>Rapise.TestExecute</code> function:</p> <pre><code>namespace UnitTestProject1\n{\n    [TestClass] \n    public class UnitTest1\n    {\n        public TestContext TestContext { get; set; }\n\n        [TestMethod,\u00a0TestCategory(\"browser\")]\n        public\u00a0void\u00a0CreateNewBook()\n        {\n            Rapise.TestExecute(@\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\",\u00a0TestContext);\n        }\n    }\n}\n</code></pre>"},{"location":"Guide/visual_studio/#parameters","title":"Parameters","text":"<p>To pass parameters to Rapise test create .runsettings file. Each parameter with name starting with <code>g_</code> will be passed to Rapise via command line.</p> <p>Here is an example of selecting a browser to use for execution of cross-browser tests:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;RunSettings&gt;\n  &lt;!-- Parameters used by tests at runtime --&gt;\n  &lt;TestRunParameters&gt;\n    &lt;Parameter name=\"g_browserLibrary\" value=\"Selenium - Chrome\" /&gt;\n  &lt;/TestRunParameters&gt;\n&lt;/RunSettings&gt;\n</code></pre>"},{"location":"Guide/visual_studio/#visual-studio-test-explorer","title":"Visual Studio Test Explorer","text":"<p>Once Rapise tests are mapped to unit tests one can use Visual Studio Test Explorer to run tests and analyze results.</p> <p></p> <p>Press Output link (highlighted) to view test run results.</p> <p></p> <ul> <li>last.tap - is a test report in Test Anything Protocol format (human readable). Click to open in any Text Viewer/Editor.</li> <li>last.trp - is a test report in Rapise format. Click to open in Rapise.</li> </ul> <p>One can apply <code>.runsettings</code> file to use for execution:</p> <p></p>"},{"location":"Guide/visual_studio/#vsts-tfs","title":"VSTS / TFS","text":"<p>In Visual Studio Team Services one can run unit tests after making a build.</p> <p></p> <p>Build definition contains predefined steps:</p> <p></p> <p>Here is an example configuration of the Test Assemblies step:</p> <p></p> <ul> <li>Test Assembly field contains a wildcard mask that selects unit tests from matching DLLs only</li> <li>In Test Filter criteria one can select tests by TestCategory which is an attribute of a Test Method:</li> </ul> <pre><code>[TestMethod, TestCategory(\"browser\")]\npublic void CreateNewBook() \n{\n    Rapise.TestExecute(@\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\", TestContext); \n}\n</code></pre> <ul> <li>Run Settings File is a link to .runsettings file.</li> <li>In Override TestRun Parameters one can override values of the parameters in <code>.runsettings</code> file.</li> </ul>"},{"location":"Guide/visual_studio/#windows-agent-for-test-execution","title":"Windows Agent for Test Execution","text":"<p>VSTS can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Windows Agent. One can configure several agent pools to run tests in different environments:</p> <p></p>"},{"location":"Guide/visual_studio/#azure-devops","title":"Azure DevOps","text":"<p>On September 10, 2018, Microsoft renamed Visual Studio Team Services (VSTS) to Azure DevOps Services.</p> <p>Execution of Rapise tests in Azure DevOps looks a bit different from former versions of VSTS, though most of the concepts are still the same.</p> <p>Trigger execution using a Visual Studio Test task. You can add it to a build or release pipeline.</p> <p>Here is an example configuration of a build pipeline.</p> <pre><code># .NET Desktop\n# Build and run tests for .NET Desktop or Windows classic desktop solutions.\n# Add steps that publish symbols, save build artifacts, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net\n\n# Running on a self-hosted agent\n\ntrigger:\n- master\n\npool:\n  name: 'default'\n\nvariables:\n  solution: '**/*.sln'\n  buildPlatform: 'Any CPU'\n  buildConfiguration: 'Release'\n\nsteps:\n- task: NuGetToolInstaller@0\n\n- task: NuGetCommand@2\n  inputs:\n    restoreSolution: '$(solution)'\n\n- task: VSBuild@1\n  inputs:\n    solution: '$(solution)'\n    platform: '$(buildPlatform)'\n    configuration: '$(buildConfiguration)'\n\n- task: VSTest@2\n  inputs:\n    testSelector: 'testAssemblies'\n    testAssemblyVer2: |\n     **\\$(BuildConfiguration)\\*test*.dll\n     !**\\*Microsoft.VisualStudio.TestPlatform*\n     !**\\obj\\**\n    searchFolder: '$(System.DefaultWorkingDirectory)'\n    testFiltercriteria: 'TestCategory=browser'\n    runSettingsFile: 'UnitTestProject1\\UnitTestProject1\\RS.runsettings'\n</code></pre> <p>While configuring the pipeline you can add a Visual Studio Test task via the left panel.</p> <p></p> <p>Here is an example configuration of the Test Studio Test task:</p> <p> </p> <ul> <li>Test files field contains a wildcard mask that selects unit tests from matching DLLs only</li> <li>In Test filter criteria one can select tests by TestCategory which is an attribute of a Test Method:</li> </ul> <pre><code>[TestMethod, TestCategory(\"browser\")]\npublic void CreateNewBook() \n{\n    Rapise.TestExecute(@\"c:\\\\Demo\\\\Framework\\\\CreateNewBook\\\\CreateNewBook.sstest\", TestContext); \n}\n</code></pre> <ul> <li>Settings File is a link to .runsettings file.</li> </ul>"},{"location":"Guide/visual_studio/#self-hosted-windows-agents","title":"Self-hosted Windows Agents","text":"<p>Azure DevOps can run tests in a hosted environment, but it does not contain Rapise. So most likely you will need to run tests inside your computer network. Download and connect Self-hosted Windows Agent.</p> <p>Reference the agent pool with self-hosted agents in your <code>azure-pipelines.yml</code> via pool tag.</p>"},{"location":"Guide/visual_studio/#logs-and-reports","title":"Logs and Reports","text":"<p>After every execution of the Visual Studio Test task you will get logs and reports.</p> <p></p> <p></p> <p>You can also see an individual report of a failed test.</p> <p></p>"},{"location":"Guide/visual_studio/#see-also","title":"See Also","text":"<ul> <li>Visual Studio Test Explorer</li> <li>Visual Studio Team System / Team Foundation Server</li> <li>Azure DevOps</li> <li>TUTORIAL: Integrating Rapise and Azure DevOps (video)</li> </ul>"},{"location":"Guide/vstest/","title":"Azure DevOps Integration v3","text":"<p>This section describes how to execute Rapise tests in Azure DevOps pipelines or locally with Microsoft.TestPlatform.</p> <p>If you are using SpiraTeam, you should check the section about using RapiseLauncher extension for Azure DevOps.</p>"},{"location":"Guide/vstest/#azure-devops","title":"Azure DevOps","text":"<p>We assume that Rapise tests are stored in a Git repository and Azure DevOps pipeline is connected to it. You may run Rapise tests both on self-hosted Windows Agents and Microsoft-hosted Windows Agents.</p>"},{"location":"Guide/vstest/#rapise-test-adapter-task","title":"Rapise Test Adapter Task","text":"<p>To run Rapise tests with a Visual Studio Test task you need to install Rapise and Rapise Test Adapter for VSTest. The best way to do it is to use Rapise Test Adapter Extension from Azure Marketplace. After this extension is installed add the Rapise Test Adapter task yo your pipeline.</p> <p></p> <p>In the task settings you may choose what versions of Rapise and Rapise Test Adapter to install.</p> <p></p> <p>Proceed to the next step.</p>"},{"location":"Guide/vstest/#rapise-installation-task","title":"Rapise Installation Task","text":"<p>Important</p> <p>Skip this section if you are using Rapise Test Adapter Task</p> <p>In order to run Rapise tests on a Microsoft-hosted Windows Agent you need to configure Rapise Installation task. If you are running on a self-hosted Windows Agent you may install Rapise manually once and use it in every pipeline run.</p> <p>Download and place this PowerShell script to your Git repository:</p> <p>RapiseInstall.ps1</p> <p>This script downloads and installs Rapise. It also installs Rapise extension into Chrome browser. In your pipeline add a PowerShell task to execute this script. Pass Rapise version to install as a parameter.</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: PowerShell@2\ndisplayName: 'Install Rapise'\ninputs:\n    targetType: filePath\n    filePath: ./RapiseInstall.ps1\n    arguments: '-RapiseVersion \"6.5.20.21\"'\n</code></pre>"},{"location":"Guide/vstest/#rapisetestadapter","title":"Rapise.TestAdapter","text":"<p>Important</p> <p>Skip this section if you are using Rapise Test Adapter Task</p> <p>To run Rapise tests with a Visual Studio Test task install Rapise.TestAdapter NuGet package.</p>"},{"location":"Guide/vstest/#nuget-tool-installer","title":"NuGet Tool Installer","text":"<p>First you need to install NuGet itself. Add NuGet tool installer task.</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: NuGetToolInstaller@0\ndisplayName: 'Use NuGet'\ninputs:\n    versionSpec: 4.4.1\n</code></pre>"},{"location":"Guide/vstest/#rapisetestadapter-nuget-package","title":"Rapise.TestAdapter NuGet Package","text":"<p>Then add NuGet task. Set command to <code>custom</code> and specify the command line:</p> <pre><code>install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion)\n</code></pre> Classic UI <p></p> YAML <pre><code>steps:\n- task: NuGetCommand@2\n  displayName: 'NuGet Install Rapise.TestAdapter'\n  inputs:\n    command: custom\n    arguments: 'install Rapise.TestAdapter -Version $(RapiseTestAdapterVersion)'\n</code></pre> <p>In the pipeline settings set RapiseTestAdapterVersion variable to the Rapise.TestAdapter version you want to install (e.g. 1.0.11).</p> <p></p> <p>The task will install Rapise.TestAdapter into</p> <pre><code>$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472\n</code></pre>"},{"location":"Guide/vstest/#visual-studio-test-platform-installer-task","title":"Visual Studio Test Platform Installer Task","text":"<p>If you plan to run tests on a Self-hosted Windows Agent that does not have Visual Studio installed you need to add Visual Studio Test Platform Installer task.</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: VisualStudioTestPlatformInstaller@1\ndisplayName: 'Visual Studio Test Platform Installer'\ninputs:\n    versionSelector: latestStable\n</code></pre>"},{"location":"Guide/vstest/#visual-studio-test-task","title":"Visual Studio Test Task","text":"<p>To run tests you need Visual Studio Test task.</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: VSTest@2\n  displayName: 'VsTest - Run Rapise Tests'\n  inputs:\n    testAssemblyVer2: |\n     $(Build.Repository.LocalPath)\\Tests\\*.sstest\n     $(Build.Repository.LocalPath)\\Tests\\*\\*.sstest\n    runSettingsFile: '$(System.DefaultWorkingDirectory)\\Pipeline\\azure.runsettings'\n    overrideTestrunParameters: '-g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile)'\n    pathtoCustomTestAdapters: '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472'\n    platform: '$(BuildPlatform)'\n    configuration: '$(BuildConfiguration)'\n</code></pre> <p>Make sure that path to custom test set adapters is set to</p> <pre><code>$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472\n</code></pre> <p>Specify patterns to search for <code>*.sstest</code> files in the test files section (<code>testAssemblyVer2</code> in YAML).</p> <p>If you added Visual Studio Test Platform Installer task on the previous step do not forget to set Test platform version to <code>Installed by Tools Installer</code> (<code>vsTestVersion: toolsInstaller</code> in YAML).</p> <p>Tip</p> <p>Rapise.TestAdapter also supports filtering, parameters and .runsettings files (specified via Visual Studio Test task options).</p>"},{"location":"Guide/vstest/#test-filter-criteria","title":"Test Filter Criteria","text":"<p>Rapise.TestAdapter supports filter criteria based on FullyQualifiedName test property (equals to  *.sstest file name). To specify a filter set <code>testFiltercriteria</code> in YAML or <code>Test filter criteria</code> in the Classic UI task editor.</p> <p>Example:</p> <pre><code>FullyQualifiedName~LIS\n</code></pre>"},{"location":"Guide/vstest/#parameters","title":"Parameters","text":"<p>Parameters can be set via</p> <ul> <li>.runsettings file,</li> <li><code>overrideTestrunParameters</code> YAML option or</li> <li>Override test run parameters field in the Classic UI task editor.</li> </ul> <p>Note</p> <p>Parameter names must be prefixed with g_.</p> <p>Example:</p> <pre><code>-g_baseURL $(Dynamics365CrmBaseURL) -g_password $(Dynamics365CrmPassword) -g_browserLibrary $(RapiseBrowserProfile)\n</code></pre> <p>Note</p> <p>$(name) - references a pipeline variable</p>"},{"location":"Guide/vstest/#runsettings","title":".runsettings","text":"<p>.runsettings file is used to pass parameters and to enable video recorder.</p> <p>Example:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;RunSettings&gt;\n  &lt;!-- Parameters used by tests at runtime --&gt;\n  &lt;TestRunParameters&gt;\n    &lt;Parameter name=\"g_browserLibrary\" value=\"Chrome\" /&gt;\n  &lt;/TestRunParameters&gt;\n\n  &lt;DataCollectionRunSettings&gt;\n    &lt;DataCollectors&gt;\n      &lt;DataCollector uri=\"datacollector://microsoft/VideoRecorder/1.0\" assemblyQualifiedName=\"Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder.VideoRecorderDataCollector, Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" friendlyName=\"video\" enabled=\"True\"&gt;\n        &lt;Configuration&gt;\n          &lt;MediaRecorder sendRecordedMediaForPassedTestCase=\"true\"  xmlns=\"\"&gt;           \n            &lt;ScreenCaptureVideo bitRate=\"512\" frameRate=\"2\" quality=\"20\" /&gt;\n          &lt;/MediaRecorder&gt;\n        &lt;/Configuration&gt;\n      &lt;/DataCollector&gt;\n    &lt;/DataCollectors&gt;\n  &lt;/DataCollectionRunSettings&gt;  \n\n&lt;/RunSettings&gt;\n</code></pre>"},{"location":"Guide/vstest/#publish-test-results","title":"Publish Test Results","text":"<p>To publish test results (for later review and downloading) use Publish Build Artifacts task. Execution results are copied to <code>$(Agent.TempDirectory)\\TestResults</code>.</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish Artifact: TestResults'\n  inputs:\n    PathtoPublish: '$(Agent.TempDirectory)\\TestResults'\n    ArtifactName: TestResults\n</code></pre>"},{"location":"Guide/vstest/#pipeline-example","title":"Pipeline Example","text":"<p>As a result of pipeline configuration you may end up with something like this:</p> Classic UI <p></p>"},{"location":"Guide/vstest/#self-hosted-windows-agents","title":"Self-hosted Windows Agents","text":"<p>Azure DevOps can run tests in a hosted environment as well. If you plan to run tests inside your computer network download and connect Self-hosted Windows Agent.</p>"},{"location":"Guide/vstest/#logs-and-reports","title":"Logs and Reports","text":"<p>After every execution of the Visual Studio Test task you will get logs and reports.</p> Log <p></p> Summary <p></p> <p>You can also see an individual report of a test (with attachments).</p> Attachments <p></p> <p>Attachments include reports in Test Anything Protocol (TAP) and Rapise (TRP) formats, output and error logs and video recording (if enabled in .runsettings).</p>"},{"location":"Guide/vstest/#run-tests-with-vstestconsoleexe","title":"Run Tests with VSTest.Console.exe","text":"<p>It is also possible to run Rapise tests on a VM that has VSTest.Console.exe installed.</p>"},{"location":"Guide/vstest/#setup-microsofttestplatform-on-a-vm","title":"Setup Microsoft.TestPlatform on a VM","text":"<p>Let's assume that the working folder is <code>C:\\Tools</code>.</p> <ol> <li>Download and install NuGet.</li> <li> <p>Install Microsoft.TestPlatform with a command     <pre><code>nuget install Microsoft.TestPlatform\n</code></pre> Find <code>VSTest.Console.exe</code> in <code>C:\\Tools\\Microsoft.TestPlatform.16.7.1\\tools\\net451\\Common7\\IDE\\Extensions\\TestPlatform</code>. Add this folder to the PATH environment variable.</p> </li> <li> <p>Install Rapise.TestAdapter</p> <pre><code>nuget install Rapise.TestAdapter\n</code></pre> </li> <li> <p>You may now create a .cmd file and put it near Rapise tests. E.g.</p> <pre><code>vstest.console.exe /TestAdapterPath:C:\\Tools\\Rapise.TestAdapter.1.0.11\\lib\\net472 /Settings:local.runsettings /TestCaseFilter:FullyQualifiedName~LIS *\\*.sstest\n</code></pre> </li> </ol>"},{"location":"Guide/vstest/#parallel-execution","title":"Parallel Execution","text":"<p>Note</p> <p>If you are using SpiraTest you may be interested in another way of parallel execution.</p> <p>Two levels of parallelism are possible. They may be used independently and combined together as well.</p>"},{"location":"Guide/vstest/#run-tests-in-parallel","title":"Run Tests in Parallel","text":"<p>Visual Studio Test Platform can run tests in parallel. Users of vstest.console.exe will recognize this as the /Parallel switch. It does so by launching a test host process on each available core, and handing it tests to execute.</p> <p>Here is how to set this switch in an Azure Pipeline (Visual Studio Test task).</p> Classic UI <p></p> YAML <pre><code>steps:\n- task: VSTest@2\ndisplayName: 'VsTest - testAssemblies'\ninputs:\n    testAssemblyVer2: '*\\*.sstest'\n    overrideTestrunParameters: '-g_browserLibrary \"$(RapiseBrowserProfile)\"'\n    pathtoCustomTestAdapters: '$(Build.Repository.LocalPath)\\Rapise.TestAdapter.$(RapiseTestAdapterVersion)\\lib\\net472'\n    runInParallel: true\n    platform: '$(BuildPlatform)'\n    configuration: '$(BuildConfiguration)'\n</code></pre> <p>This way of parallel execution is good for running API tests and Web tests (provided that Selenium profiles are used)</p>"},{"location":"Guide/vstest/#multi-configuration-testing","title":"Multi-Configuration Testing","text":"<p>The Visual Studio Test task supports running tests in parallel across multiple agents (or machines). To run multiple jobs using multi-configuration option, you identify variables named multipliers, and specify a list of values for each multiplier. A separate job is run for each value combination. Define one or more variables on the Variables tab of the pipeline or in a variable group. Each variable, known in this context as a multiplier variable, must be defined as a comma-delimited list of the values you want to pass individually to the agents.</p> <p>Let's assume we want to run same set of tests on different versions of browsers. Here is the example.</p> Multiplier Configuration <p> </p>"},{"location":"Guide/vstest/#run-tests-on-azure-and-report-to-spira","title":"Run Tests on Azure and Report to Spira","text":"<p>If you plan to use Azure VMs to run tests and want to see the results in Spira check out RapiseLauncher extension for Azure DevOps.</p>"},{"location":"Guide/vstest/#see-also","title":"See Also","text":"<ul> <li>Demo of Azure DevOps Integration (video)</li> <li>Azure DevOps</li> <li>Rapise.TestAdapter on GitHub</li> <li>Rapise.TestAdapter NuGet package</li> <li>Run tests in parallel using the Visual Studio Test task</li> <li>Multi-configuration testing</li> <li>RapiseLauncher extension for Azure DevOps.</li> </ul>"},{"location":"Guide/vstest_rl/","title":"RapiseLauncher Extension for Azure DevOps","text":"<p>This section explains how to execute Rapise Spira Test Sets in Azure DevOps pipelines using the RapiseLauncher.</p>"},{"location":"Guide/vstest_rl/#azure-devops","title":"Azure DevOps","text":"<p>We assume that Rapise tests are stored in a SpiraTeams. Here we plan to configure a build pipeline for executing a SpiraTeam Test Set on a Microsoft-hosted agent.</p> <p>The benefit of the Microsoft-hosted agent is its configuration - it has latest version of web browsers, with relevant version of webdriver connectors. Everything is configured for the test run (updates and popups disabled, etc). RapiseLauncher may be used to execute Desktop UI tests, API tests, mobile tests and web tests. For web tests it is possible to use Rapise own Chrome extension, IE 11 or any selenium webdriver-based target. </p> <p>The same extension may be used for launching tests in self-hosted Windows agents.</p> <p>Although in minimal configuration just RapiseLauncher step is enough, the pipeline definition may also include build, deploy or download of the AUT before the test execution. The results of test execution are then stored into the SpiraTeam. </p> <p>Once configured and executed the extension does the following:</p> <ol> <li>Automatically download and install the RapiseLauncher.</li> <li>Downloads test files from the SpiraTeam.</li> <li>Execute the test set.</li> <li>Publish execution results, videos and logs back to SpiraTeam, so they are attached to the test run.</li> </ol> <p>The whole configuration process contains the following steps:</p> <ol> <li>Add Rapise extension to the organization using Visual Studio Marketplace.</li> <li>Configure SpiraTeam connection Point for the project.</li> <li>Define a pipeline.</li> <li>Add RapiseLauncher task to the pipeline.</li> <li>Configure a pipeline definition for executing tests via RapiseLauncher.</li> </ol>"},{"location":"Guide/vstest_rl/#step-1-install-marketplace-extension-for-the-organization","title":"Step 1: Install Marketplace Extension for the Organization","text":"<p>In Azure DevOps go to Organization settings:</p> <p></p> <p>Choose Extensions and then Browse Marketplace:</p> <p></p> <p>Type `Rapise', choose 'RapiseLauncher' extension:</p> <p></p> <p>Get it:</p> <p></p> <p>And install it:</p> <p></p> <p>Finally it shows up in the list of installed extensions:</p> <p></p>"},{"location":"Guide/vstest_rl/#step-2-connect-project-to-spirateam","title":"Step 2: Connect Project to SpiraTeam","text":"<p>Now define a service connection. It is a connection details for SpiraTeam used later to gather test set information. So we need ot open Project settings:</p> <p></p> <p>Go to Service Connections:</p> <p></p> <p>And Create service connection:</p> <p></p> <p>Choose Spira service connection connection type (this type is added by the installed marketplace extension) and press Next:</p> <p></p> <p>Now define connection details: SpiraTeam Server Url, Username and API Key: </p> <p>Then Verify it and give a Service connection name:</p> <p></p> <p>Finally, the connection shows up in the list:</p> <p></p>"},{"location":"Guide/vstest_rl/#step-3-define-a-pipeline","title":"Step 3: Define a Pipeline","text":"<p>Defining a pipeline means telling the DevOps where to store the pipeline definition, where get the tests, what VM to use for execution and what parameters to pass.</p>"},{"location":"Guide/vstest_rl/#define-a-repository","title":"Define a Repository","text":"<p>In the case that you don't have a repository, just define one for the given project:</p> <p></p> <p>If you have a repo, then you may skip this step and use your repository connection on the next step.</p>"},{"location":"Guide/vstest_rl/#create-a-pipeline-definition","title":"Create a Pipeline Definition","text":"<p>Go to your project, expand Pipelines and choose Create Pipeline:</p> <p></p> <p>Select GIT repository type</p> <p></p> <p>And repository itself:</p> <p></p> <p>Here we are creating new pipeline. But you may use existing one and just add test execution task to it.</p> <p></p> <p>RapiseLauncher requires Windows host. You may use Microsoft Hosted agent, or set an agent on your own VM or physical Windows machine. </p> <p></p>"},{"location":"Guide/vstest_rl/#step-4-add-rapiselauncher-task","title":"Step 4: Add RapiseLauncher Task","text":"<p>Then you may use Assistant to configure the task.</p> <p></p> <p></p> <p>And filter by word 'Rapise'. We need a task Run Rapise Test Set:</p> <p></p> <p>Now we need to fill task execution parameters as follows:</p> <ul> <li>SpiraTeam contains information for finding a test set</li> <li>Spira service/server end point - choose spira connection defined earlier from the dropdown.     </li> <li> <p>Spira Product</p> </li> <li> <p>Spira Test Set</p> </li> <li> <p>Automation Host</p> </li> <li> <p>Execution Options</p> </li> <li> <p>Rapise Needs to Be Installed - if your VM is spawned for each test execution (i.e. you use Microsoft-hosted Agent), then the task may install it. You don't need to install Rapise if you use own agent and install in advance. Also you may have more than one Run Rapise Test Set tasks in your pipeline. In this case only the first one may need to install Rapise.</p> <ul> <li>Rapise Version - we recommend to specify the same version that you used to create tests. I.e. </li> </ul> </li> <li> <p>Advanced Execution Options </p> </li> <li> <p>Set Screen Resolution specify one of standard screen resolutions for test execution. It should be one of standard values (i.e. 1024x768, 1920x1080, etc., supported by the current execution host). Bigger resolution - more details on screenshots and video and more space is consumed by the recordings. </p> <ul> <li>Width</li> <li>Height</li> </ul> </li> <li> <p>Record Video of Execution a <code>ScreenCapture.wmv</code> will be generated and saved as a Test Run attachment.</p> <ul> <li>Video Recording Options set of options for <code>Microsoft.TestPlatform</code> video recorder.</li> </ul> </li> <li> <p>Publish RapiseLauncher Log when enabled, RapiseLauncher log is attached to pipeline build log.</p> <p></p> </li> <li> <p>GITROOT is only needed when your tests are stored in GIT and you check them out earlier in the pipeline or even before launching the pipeline.</p> </li> </ul> <p></p> <p>Finally press Add. The task should show up in the <code>steps:</code> section of the yaml description:</p> <p></p> <p>You may then tweak its configuration directly using the text editor.</p> <p><pre><code>trigger:\n- main\n\npool:\n  vmImage: windows-latest\n\nsteps:\n- task: RapiseLauncherTask@1\n  inputs:\n    spiraConnection: 'SpiraConnection'\n    spiraProjectId: '93'\n    spiraTestSetId: '145'\n    spiraAutomationHost: 'AZURE'\n    installRapise: true\n    rapiseVersion: '6.7.22.25'\n    setScreenSize: true\n    screenWidth: 1920\n    screenHeight: 1080\n    recordVideo: true\n</code></pre> And then execute.  </p>"},{"location":"Guide/vstest_rl/#step-5-pipeline-execution-results","title":"Step 5: Pipeline Execution Results","text":"<p>You may see history of pipeline job runs and test execution logs.</p> <p>From the pipeline runs history you may pick up any run:</p> <p></p> <p>And select the Job:</p> <p></p> <p>The job run contains information of each pipeline step. RapiseLauncher is a step doing Rapise installation and test set launch.</p> <p></p> <p>Also you may find testing reports and videos in the SpiraTeam:</p> <p></p> <p>Log files and videos are in the Test Run Attachments tab:</p> <p></p>"},{"location":"Guide/vstest_rl/#see-also","title":"See Also","text":"<ul> <li>Azure DevOps</li> <li>RapiseLauncher Extension in VisualStudio Marketplace</li> <li>Rapise and Spira Integration</li> <li>Rapise and Git Integration</li> <li>Rapise Test Adapter Task for Azure DevOps.</li> </ul>"},{"location":"Guide/warning_view/","title":"Warning View","text":""},{"location":"Guide/warning_view/#purpose","title":"Purpose","text":"<p>To display syntax error messages as you edit javascript files.</p>"},{"location":"Guide/warning_view/#how-to-open","title":"How to Open","text":"<p>The Warning View is hidden in the Default Layout. You may then show it using <code>View &gt; Show &gt; Output</code>.</p> <p>The Warning View opens automatically when you work with source editor and there is a syntax error. It also shows up in RVL if you have some incomplete or invalid statement.</p>"},{"location":"Guide/warning_view/#warning-message","title":"Warning Message","text":"<p>Double click on an error message to go to the corresponding source line or RVL row.</p>"},{"location":"Guide/warning_view/#widgets","title":"Widgets","text":"<ul> <li>The text box is a search box.</li> <li>The icons from left to right are Find Next Entry  , Copy Selected  , Clear All Text .</li> <li>Right tool <code>Hide</code> used to collapse whole bottom panel. You may then show it using <code>View &gt; Show &gt; Output</code>.</li> </ul>"},{"location":"Guide/warning_view/#see-also","title":"See Also","text":"<ul> <li>Syntax Checking</li> </ul>"},{"location":"Guide/watch_view/","title":"Watch View","text":""},{"location":"Guide/watch_view/#purpose","title":"Purpose","text":"<p>To input expressions and view their values as the script executes.</p>"},{"location":"Guide/watch_view/#how-to-open","title":"How to Open","text":"<p>Begin debugging a script. \u00a0The Watch View will open automatically.</p>"},{"location":"Guide/watch_view/#inputting-an-expression","title":"Inputting an Expression","text":"<ol> <li> <p>Click the blank line:</p> <p></p> </li> <li> <p>Input the expression you wish to investigate. Press Enter.</p> <p></p> </li> </ol>"},{"location":"Guide/watch_view/#see-also","title":"See Also","text":"<ul> <li>Internal Debugger</li> </ul>"},{"location":"Guide/web_app_profile/","title":"Web Application Profile","text":"<p>Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for element styling. There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this topic you will learn how to define a profile for your web application.</p> <p>Note</p> <p>In some cases we refer to Web Application Profile as Web Recorder Configuration. These terms are synonyms.</p>"},{"location":"Guide/web_app_profile/#purpose-of-webappprofile","title":"Purpose of WebAppProfile","text":"<p><code>WebAppProfile</code> serves as an instruction to Rapise on how to record XPath locators for elements in a given application.</p> <p><code>WebAppProfile</code> addresses one of the challenges in web UI test automation: generation of resilient XPath locators during test recording.</p>"},{"location":"Guide/web_app_profile/#adding-webappprofile-to-a-test","title":"Adding WebAppProfile to a Test","text":"<p>To create <code>WebAppProfile.json</code> file in your test navigate to <code>Files</code> tab, right click <code>Scripts</code> folder and choose <code>Create... &gt; WebAppProfile.json</code>.</p> <p></p> <p>The default profile looks like this:</p> <pre><code>{\n    record:\n    {\n        attributes: [\n            { name: \"id\", notEmpty: true, exclude: \"\\\\d\" },\n            { name: \"title\" },\n            { name: \"name\" },\n            { name: \"style\" },\n            { name: \"type\" },\n            { name: \"value\" },\n            { name: \"placeholder\" },\n            { name: \"autocomplete\" },\n            { name: \"href\" },\n            { name: \"role\" }\n        ],\n        classes: [\n            /* { name: \"content\" } */\n        ],\n        anchors: [\n            /* { xpath: \"//div[@class='content-wrapper']\" } */\n        ],\n        clickable: {\n            classes: [\n                /* \"sapMInputBaseIcon\" */\n            ]\n        },\n        handlers:\n        {\n            elementName: function(el)\n            {\n                /*\n                var label = __getAttribute(el, \"aria-label\");\n                if (label)\n                {\n                    if (label.indexOf(\",\") &gt; 0)\n                    {\n                        return label.split(\",\")[0];\n                    }\n                    return label;\n                }\n                */\n                return null;\n            },\n            skipAttribute: function (node, attr, value)\n            {\n                /*\n                var tag = node.tagName.toLowerCase();\n                if (attr == \"title\")\n                {\n                    if (tag == \"textarea\" || tag == \"select\" || tag == \"input\")\n                    {\n                        return true;\n                    }\n                }\n                else if (attr == \"text\")\n                {\n                    if (__hasAttribute(node, \"data-id\") || __hasAttribute(node, \"id\"))\n                    {\n                        return true;\n                    }\n                }\n                */\n                return false;\n            },\n            clickable: function(el)\n            {\n                /*\n                var tag = el.tagName.toLowerCase();\n                if (tag == \"p\" || __hasAttribute(el, \"title\"))\n                {\n                    return true;\n                }\n                */\n                return false;\n            }            \n        }\n    }\n}\n</code></pre>"},{"location":"Guide/web_app_profile/#webappprofile-format","title":"WebAppProfile Format","text":"<ul> <li> <p><code>record.attributes</code> array contains definition of attributes to record.</p> <ul> <li><code>name</code> is the only required property for an attribute. It is case insensitive.</li> <li><code>notEmpty</code> is <code>false</code> by default. If set to <code>true</code> then the attribute will be recorded only if it has non empty value.</li> <li><code>exclude</code> is a regular expression. If attribute value matches the regexp then the attribute is not recorded.</li> </ul> <p>Note: Rapise 6.4+ supports <code>text</code> attribute that is mapped to inner text of leaf elements.</p> </li> <li> <p><code>record.classes</code> array lists class names that are meaningful for element identification and should be recorded.</p> <ul> <li><code>name</code> is the only required property for a class. It is case sensitive.</li> </ul> </li> <li><code>record.anchors</code> array lists anchors.<ul> <li><code>xpath</code> is the only required property for an anchor.</li> </ul> </li> <li><code>record.clickable.classes</code> is an array of classes that indicate clickable elements. By default Rapise does not record clicks on DIVs, SPANs and some other elements. By listing classes of elements that can be clicked you may change the default behavior. Requires Rapise 6.4+</li> <li><code>record.handlers</code> is an objects that defines functions injected into the recorder. Requires Rapise 6.4+<ul> <li><code>elementName(el)</code> builds a name for a given element. This name is used as object ID in the object repository. If this function returns <code>null</code> then default algorithm is used to build the name.</li> <li><code>skipAttribute(node, attr, value)</code> allows to skip recording of some attributes in specific cases. The function must return <code>true</code> if an attribute should not be recorded.</li> <li><code>clickable(el)</code> fine grained control over which element is considered clickable. When the function returns <code>true</code> the element is considered clickable, if <code>false</code> - then default algorithm (element is clickable or not) is used. Requires Rapise 6.5+.</li> </ul> </li> </ul>"},{"location":"Guide/web_app_profile/#treatmouseupasclick-treatmousedownasclick","title":"treatMouseUpAsClick, treatMouseDownAsClick","text":"<p>In rare cases when a Web app is interfering into default mouse clicks processing mechanism it may be necessary to set <code>record.treatMouseUpAsClick</code> or <code>record.treatMouseDownAsClick</code> to <code>true</code>. It will enable Rapise to record clicks that are processed by the application inside MouseUp or MouseDown events.</p>"},{"location":"Guide/web_app_profile/#anchors","title":"Anchors","text":"<p>When XPath of an element is being recorded and the element belongs to the sub-tree of an anchor element (including the anchor element itself) then XPath of the element will start/or be replaced with XPath of the anchor element.</p>"},{"location":"Guide/web_app_profile/#example-1","title":"Example 1","text":"<p>Let's look at the example. Here we have a table built with DIVs and ARIA roles.</p> <pre><code>&lt;div id=\"Customers\" role=\"grid\"&gt;\n    &lt;div role=\"row\"&gt;\n        &lt;span role=\"cell\" title=\"Contoso\"&gt;&lt;/span&gt;\n        ...\n    &lt;/div&gt;\n    ...\n&lt;/div&gt;\n</code></pre> <p>If we record just using <code>title</code> attribute and it's value is unique for the page we'll end up with a locator</p> <pre><code>//span[@title='Contoso']\n</code></pre> <p>However if we define an anchor</p> <pre><code>//div[@id='Customers']\n</code></pre> <p>we'll get the locator as</p> <pre><code>//div[@id='Customers']//span[@title='Contoso']\n</code></pre> <p>The locator is now bound to the table. If another element with <code>Contoso</code> title appears somewhere on the page (outside the table) we'll find the correct element.</p>"},{"location":"Guide/web_app_profile/#example-2","title":"Example 2","text":"<p>Here is more complex and real-life example. In Microsoft Dynamics 365 Business Central application when you navigate through the forms they are loaded into the DOM tree inside DIV elements with <code>spa-view</code> class. When you move from one form to another - old forms are not unloaded and continue to stay in the DOM tree. They just have lower <code>z-index</code> then currently active form.</p> <p></p> <p>It means that when Rapise searches for an element during test playback it should work with the topmost <code>spa-view</code>.</p> <p>To achieve this goal we define an anchor in WebAppProfile for the application</p> <pre><code>//div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()]\n</code></pre> <p>Here is an example of automatically recorded XPath</p> <pre><code>//div[contains(concat(' ', @class, ' '), ' spa-view ') and position()=last()]//span[@aria-label='Customers']\n</code></pre> <p>The anchor prevents us from finding elements that are not visible to user and ensure that if we find an element it belongs to an active form.</p>"},{"location":"Guide/web_app_profile/#example-3","title":"Example 3","text":"<p>Requires Rapise 6.4+. An anchor may be used to rewrite XPath for an element completely. It means if an anchor points to an element then it will be used instead of XPath expression generated using attributes. Let's assume we have a page</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;span&gt;UserName&lt;/span&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n            &lt;input type=\"text\" id=\"obj-1267\" title=\"Enter email or user ID:\"/&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>If we have an anchor defined like</p> <pre><code>{ xpath: \"//input[../../td/span[text()='UserName']]\"}\n</code></pre> <p>and we click on the field then instead of something like</p> <pre><code>//input[@title='Enter email or user ID:']\n</code></pre> <p>the recorder will use the anchor.</p>"},{"location":"Guide/web_app_profile/#xpath-minimization","title":"XPath Minimization","text":"<p>Rapise always tries to build the minimal XPath locator possible with a given set of attributes, classes and anchors. Full XPath is not an option.</p> <p>Let's assume we have a page</p> <pre><code>&lt;div&gt;\n    &lt;div&gt;\n        &lt;span title=\"Account\"&gt;&lt;/span&gt;\n        ...\n    &lt;/div&gt;\n    ...\n&lt;/div&gt;\n</code></pre> <p>and XPath</p> <pre><code>//span[@title='Account']\n</code></pre> <p>finds a single node, then it is a good minimal locator for the element.</p> <p>Compare with full XPath</p> <pre><code>/div[1]/div[1]/span[@title='Account']\n</code></pre> <p>that may easily become broken with page layout changes.</p>"},{"location":"Guide/web_app_profile/#see-also","title":"See Also","text":"<ul> <li>Web Recorder Configuration Intro (video)</li> <li>Web Recorder Configuration in Rapise (video)</li> <li>Web Testing</li> <li>Self-healing Web Locators</li> </ul>"},{"location":"Guide/web_self_healing/","title":"Self-healing Web Locators","text":"<p>Since version 6.2 Rapise gets self-healing Web element locators. It means significant improvement in two areas of automated testing of Web applications:</p> <ol> <li>Better recording experience. Modern applications more and more use dynamically generated IDs and Class Names that change on every page reload. It leads to necessity to fix locators after recording. With self-healing locators Rapise is able to guess and find required elements without the need for manual locator tweaking.</li> <li>More efficient maintenance of tests. Developers modify applications and break Web element locators from time to time. Nobody can predict how a locator may change. If locator is broken Rapise tries to find most matching element and generate new locator for it.</li> </ol>"},{"location":"Guide/web_self_healing/#how-to-enable","title":"How to Enable","text":"<p>To enable self-healing features set <code>g_aiEnable</code> flag in TestPrepare block of your test.</p> <pre><code>function TestPrepare()\n{\n    g_aiEnable = true;\n}\n</code></pre> <p>When this flag is set Rapise generates full-path locator for each recorded element. The full-path locator includes information about all attributes of an element and attributes of its ancestors in the DOM tree.</p>"},{"location":"Guide/web_self_healing/#how-it-works","title":"How it Works","text":"<p>When you run a test and an element is found with traditional XPath locator then full-path locator is not used. There is nothing to repair. But if XPath generated for an element during recording or manually created by a tester is not valid then full-path locator is used to find the most suitable element on the page. When full-path locator is used you get the following healing notification in the report:</p> <p></p> <p>The healing notification indicates that an element was found with some confidence, it is a number from zero to 100%. In the notification details you can find the difference between recorded and matched elements. You can also see the images of the recorded and found elements. This information is a clue to either accept found element or manually fix the test.</p> <p>The format of the element locator difference report is:</p> <pre><code>Level: N, attribute: A, expected: V1, actual: V2\n</code></pre> <ul> <li>If N equals 0 it means the element node in the DOM tree. 1 means immediate ancestor of the element. Level increases until DOM tree root is reached.</li> <li>A is attribute name.</li> <li>V1 - expected/recorded attribute value.</li> <li>V2 - actual value of this attribute captured during playback of the test.</li> </ul> <p>First image in the details of the difference report is expected/recorded snapshot of the element. Second image is what was shot during playback.</p>"},{"location":"Guide/web_self_healing/#usage-scenarios","title":"Usage Scenarios","text":""},{"location":"Guide/web_self_healing/#take-no-action","title":"Take no Action","text":"<p>This is the simplest yet powerful approach. If a test passes and all elements are found with pretty good confidence then there may be no reason to fix the test.</p>"},{"location":"Guide/web_self_healing/#use-match-details-to-build-webappprofile","title":"Use Match Details to Build WebAppProfile","text":"<p>When you analyze differences between expected and found elements you may get ideas to start using or improve your WebAppProfile.</p>"},{"location":"Guide/web_self_healing/#use-object-manager","title":"Use Object Manager","text":"<p>During playback Rapise takes snapshots of elements found by full-path locator. So after playback you can use Object Manager to replace old locators with new ones. If there are healing notifications after test playback Rapise automatically shows the prompt to open Object Manager. You can turn this prompt off, see the next section.</p> <p></p> <p></p>"},{"location":"Guide/web_self_healing/#configuration","title":"Configuration","text":""},{"location":"Guide/web_self_healing/#threshold","title":"Threshold","text":"<p>By default match of an element is accepted when confidence is not less than 96%. You can change the threshold in TestPrepare block by setting <code>g_aiFplConfidence</code>:</p> <pre><code>function TestPrepare()\n{\n    g_aiEnable = true;\n    g_aiFplConfidence = 0.98;\n}\n</code></pre>"},{"location":"Guide/web_self_healing/#object-manager-prompt","title":"Object Manager Prompt","text":"<p>To suppress prompt to use Object Manager when test playback contains healing notifications set <code>g_aiMergePromptEnable</code> to <code>false</code>:</p> <pre><code>function TestPrepare()\n{\n    g_aiEnable = true;\n    g_aiMergePromptEnable = false;\n}\n</code></pre>"},{"location":"Guide/web_self_healing/#screenshots","title":"Screenshots","text":"<p>To disable automatic capturing of recording screenshots <code>g_aiCaptureRecordingScreenshots</code> to <code>false</code>.</p> <pre><code>g_aiCaptureRecordingScreenshots = false;\n</code></pre>"},{"location":"Guide/web_self_healing/#playback","title":"Playback","text":"<p>During playback when an element can not be found using XPath locator - Rapise starts applying the self-healing locator. The number of initial attempts before switching on self-healing is configurable (since Rapise 6.5). Usage of self-healing at the very first attempts to find an element is not recommended since a page may not be fully loaded and wrong element may be chosen by the algorithm. First self-healing attempt is set by the variable. 21 is the default value. You may change it to any number that is lower than <code>g_objectLookupAttempts</code>.</p> <pre><code>g_aiFirstAttemptNumber = 21;\n</code></pre>"},{"location":"Guide/web_self_healing/#see-also","title":"See Also","text":"<ul> <li>How to Benefit From Self-Healing Locators (video)</li> <li>Web Testing</li> <li>Web Application Profile (aka Web Recorder Configuration)</li> </ul>"},{"location":"Guide/web_service_testing/","title":"Web Service Testing","text":""},{"location":"Guide/web_service_testing/#what-is-a-web-service","title":"What is a Web Service?","text":"<p>A Web service is a unit of managed code that can be remotely invoked using HTTP, that is, it can be activated using HTTP requests. So, Web Services allows you to expose the functionality of your existing code over the network. Once it is exposed on the network, other application can use the functionality of your program.</p> <p>Web Services allows different applications to talk to each other and share data and services among themselves. Other applications can also use the services of the web services. For example VB or .NET application can talk to java web services and vice versa. So, Web services is used to make the application platform and technology independent.</p>"},{"location":"Guide/web_service_testing/#what-types-of-web-service-are-there","title":"What types of Web Service are There?","text":"<p>There are two broad classes of web service:</p> <ol> <li> <p>SOAP - These web services make use of the Web Service Definition Language (WDSL) and communicate using HTTP POST requests. They are essentially a serialization of RPC object calls into XML that can then be passed to the web service. The XML passed to the SOAP web services needs to match the format specified in the WSDL. SOAP web services are fully self-descriptive, so most clients do not directly work with the SOAP XML language, but instead use a client-side proxy generator that creates client object representations of the web service (e.g. Java, .NET objects). The web service consumers interact with these language-specific representations of the SOAP web service.</p> </li> <li> <p>REST - A RESTful web API (also called a RESTful web service) is a web API implemented using HTTP and REST principles. Unlike SOAP-based web services, there is no \"official\" standard for RESTful web APIs. This is because REST is an architectural style, unlike SOAP, which is a protocol. Typically REST web services expose their operations as a series of unique \"resources\" which correspond to a specific URL. Each of the standard HTTP methods (POST, GET, PUT and DELETE) then maps into the four basic CRUD (Create, Read, Update and Delete) operations on each resource. REST web services can use different data serialization methods (XML, JSON, RSS, etc.).</p> </li> </ol>"},{"location":"Guide/web_service_testing/#why-do-we-test-web-services","title":"Why do we Test Web Services?","text":"<p>The purpose of Web Service Testing is to verify that all of the Application Programming Interfaces (APIs) exposed by your application operate as expected. In some ways they are similar to unit tests in that they test specific pieces of code rather than user interface objects.</p> <p>Unlike simple unit tests however, web services tests will normally need to be developed for each of the supported versions of the API so that when a new version of a product comes out, you can regression test the latest version of the API and all previous versions. This ensures that legacy clients using the older version of the API don't need to make any changes.</p> <p>Also, unlike unit tests, web services are being called across a network using the HTTP/HTTPS protocol rather than simply calling code that is resident on the same system as the test script. In that sense, they are similar to testing web sites.</p> <p>Finally, in situations where you have an AJAX web application, as well as testing the front-end user interface using the appropriate UI library, you may need to test the web service that is providing the data to the user interface at the same time. In these situations you have a hybrid, web user interface and web service test.</p>"},{"location":"Guide/web_service_testing/#testing-web-services-with-rapise","title":"Testing Web Services with Rapise","text":"<p>Rapise contains a built-in web service module that can currently test the following types of web service:</p> <ol> <li> <p>REST Web Services - Rapise contains a built-in REST definition builder and object library that allows you to prototype out your REST web service requests, inspect the returned HTTP headers and HTTP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor. It also includes built-in support for verifying the data returned as Rapise checkpoints.</p> </li> <li> <p>SOAP Web Services - Rapise contains a built-in SOAP request tester and object library that allows you to prototype out your SOAP web service requests, inspect the returned HTTP headers and SOAP response body and then covert into a parameterized set of Rapise objects that can be scripted against in the main Rapise JavaScript editor. It also includes built-in support for verifying the data returned as Rapise checkpoints.</p> </li> </ol>"},{"location":"Guide/web_service_testing/#web-services-and-testing-frameworks","title":"Web Services and Testing Frameworks","text":"<p>Starting from Rapise 8, we introduced the framework mode. If API entry points are a part of your testing framework, it is convenient to include them in a Page Object using JavaScript mode.</p> <p>Also web service definition files (<code>*.rest</code> and <code>*.soap</code> as well) may be marked as shared.</p>"},{"location":"Guide/web_settings/","title":"Web Spy Settings Dialog","text":""},{"location":"Guide/web_settings/#purpose","title":"Purpose","text":"<p>This dialog box displays the list of Web Spy settings and lets you change the behavior of the Web Spy tool.</p> <p></p>"},{"location":"Guide/web_settings/#how-to-open","title":"How to Open","text":"<p>You can open this dialog box from two places:</p> <ul> <li>From the main Rapise menu <code>Settings &gt; Web Spy</code>.</li> <li>From the Web Spy tool when you click on the <code>Spy &gt; Web Spy Settings</code> menu entry.</li> </ul>"},{"location":"Guide/web_settings/#general-settings","title":"General Settings","text":"<p>This dialog box has the following settings:</p> <ul> <li>DOM Attributes Exclude Filter - List the DOM element attributes to hide in the DOM Tree of the Web Spy (comma separated).</li> <li>DOM Attributes Include Filter - List the DOM element attributes to show in the DOM Tree of the Web Spy (comma separated). If both Include and Exclude filters are set then Include filter prevails.</li> <li>DOM Tree Loading Timeout - this lets you extend or reduce the amount of time (in seconds) that Rapise allows for loading the DOM Tree. This can be useful for slower web browsers and/or complex web sites with lots of nested frames. The default value is 10 seconds</li> <li>DOM Tree Max Attribute Length - this lets you specify the maximum length of the DOM attributes. The smaller the value, the fast the DOM tree will load. The default is 1024 characters.</li> <li>Enable Universal XPath Generator - If set to 'True' it creates the XPath and CSS selectors inside the Web Spy itself rather than relying on the web browser to do the generation. This is usually much faster (especially when using Internet Explorer).</li> <li>Fast DOM Tree Build - If set to 'True' then Rapise uses embedded code to get the DOM Tree when using either the Internet Explorer HTML library or any of the Selenium libraries.</li> <li>Show Internal ID - If 'True' then DOM Element pane shows internal ID of an element. This ID is purely internal to Rapise and is not part of the HTML web page or web application</li> <li>XPath Type to Learn - This is described in the section below:</li> </ul>"},{"location":"Guide/web_settings/#different-types-of-xpath","title":"Different Types of XPath","text":"<p>The WebSpy has variety of options for XPath generation. Having a number of different approaches for generating XPath has its benefits. It gives Rapise incredible flexibility in getting the best results for different situations:</p> <ol> <li>Sometimes we can recognize an element by its text. In such cases the simplest and most efficient XPath will use the node text.</li> <li>Sometimes we have a regular structure (tables and grids) and it is better to have row and column indices inside the XPath.</li> <li>Sometimes we deal with an application framework that uses custom attributes (e.g. aria, angular, bootstrap). So if we use them in our XPath then it will be cleaner and more robust.</li> </ol> <p></p> <p>The Web Spy currently supports the following different types of XPath:</p> <ul> <li>xpath_full - generates a fully featured XPath path using elements without attributes. This XPath starts with /html and goes through body and other elements towards the required node.</li> <li> <p>xpath_min - generated with the attributes defined in the DOM Attributes Include Filter. If the include filter is empty, then it is produced with all attributes except those defined in the DOM Attributes Exclude Filter. For example, if the include filter contains the <code>widgetid</code> custom attribute then the generated XPath would be:</p> <pre><code>//div[@widgetid=\"dojox_grid__View_1\"]\n</code></pre> </li> <li> <p>xpath_indexed - considers the node as nth of the same kind. For example, the page may contain 250 &lt;a href=\u2026&gt; links across the page, and we want to learn the link somewhere in the middle. In this case indexed XPath will be of the form <code>(//a)[123]</code></p> </li> <li> <p>xpath_std - generated and minimized with use of pre-selected set of attributes:</p> <ul> <li>align</li> <li>class</li> <li>style</li> <li>size</li> <li>tabindex</li> <li>value</li> <li>width</li> <li>height</li> <li>colspan</li> <li>rowspan</li> <li>cellspacing</li> <li>cellpadding</li> <li>border</li> <li>on* (i.e. onclick, onblur and so on)</li> </ul> <p>Usually it contains most common attributes: id, name, for, role.</p> </li> <li> <p>xpath_aria - generated with the use of just the core <code>id/name</code> attributes plus the special aria attributes:</p> <ul> <li>id</li> <li>name</li> <li>for</li> <li>role</li> <li>aria-*</li> </ul> </li> <li>xpath_text - if possible, generated to match an HTML node simply by its text. For example, <code>&lt;button&gt;Refresh&lt;/button&gt;</code> is found by: <code>//button[normalize-space(text())=\"Refresh\"]</code>. In many cases this value is empty. This means that there are more than one node with such text.</li> </ul>"},{"location":"Guide/web_spy/","title":"Web Spy","text":""},{"location":"Guide/web_spy/#purpose","title":"Purpose","text":"<p>The Web Spy is used to inspect web applications running on any of the supported web browsers (currently Internet Explorer, Firefox and Chrome). It allows you to view the hierarchy of elements in the web browser Document Object Model (DOM). In addition it makes the testing of dynamic data-driven web applications easier because it lets you test out dynamic XPath or CSS queries against the web page and verify that the elements return match your expectations.</p> <p></p> <p>The Web Spy dialog shows a hierarchical representation of the HTML DOM elements that make up the web application being tested as well as the properties of the currently selected object. You can select the object by clicking on the object hierarchy displayed to the left. The properties displayed are categorized into different types that are described below.</p> <p>The Web Spy also lets you visually highlight an item in the web browser from the object hierarchy and also the reverse - selecting an object in the hierarchy by clicking on its representation in the web browser.</p>"},{"location":"Guide/web_spy/#spy-toolbar","title":"Spy Toolbar","text":"<p>The Web Spy toolbar provides the following tools:</p> <p></p> <ul> <li>Get Snapshot (Ctrl+G): Clicking on this command will refresh the contents of the DOM Tree. This should be done whenever a change is made to the state of the web page in the web browser and you want to view how the DOM objects have been changed after the change.</li> <li>Track (Ctrl+T): This tool lets you select items in the web application as rendered by the web browser and have the corresponding object be selected in the DOM tree window. This is useful if you are not sure where an item is located in the DOM tree but you can see it in the browser.</li> <li>Learn: Clicking on this tool lets you take the currently selected object and add it to the Object Tree for the current test. It can then be used as a scriptable object in the test script. When you click on the Learn button, you have the choice (in the dropdown list) of learning the object in terms of either its XPath or CSS properties.</li> <li>XPath: This field is described separately below in the Test Results section. These tool allow you to try out different XPATH queries to see which objects match. You can then Learn the results of these queries as new Rapise objects.</li> </ul>"},{"location":"Guide/web_spy/#spy-menu","title":"Spy Menu","text":"<p>More tools available in the menu.</p> <p></p> <ul> <li>Go To Url: Allows entering a URL and perform navigation in a remote browser. Handy when you connect to desktop browsers via Selenium or mobile browsers via Appium.</li> <li>Disconnect: Close connection to the browser and clear the DOM tree.</li> <li>Save: Use ot to save the DOM tree to an XML file.</li> <li>Load: Use it to load the DOM tree from an XML file.</li> <li>Hide Invisible: Selecting this item hides all elements with zero dimensions or <code>display: none</code> style from the DOM tree.</li> <li>Highlighting Mode: When this is selected, whenever you select an object in DOM Tree, it will highlight the item in the rendered web page with a red square. This allows you to visually see an item in the DOM tree and how it appears to the user.</li> <li>Virtual Mode: When virtual mode is on you can test XPath queries with the DOM tree loaded into Spy (browser is not used). You can load the tree from an XML file for example.</li> <li>CSS Enabled: Select to make CSS test field visible on the toolbar.</li> <li>Web Spy Settings: Clicking on this brings up the Web Settings dialog box.</li> </ul>"},{"location":"Guide/web_spy/#spy-shortcuts","title":"Spy Shortcuts","text":"<ul> <li>Ctrl+G - reload the DOM tree from the active page in the browser.</li> <li>Ctrl+T - start/stop tracking mode to locate the element in the DOM tree.</li> <li>Ctrl+Shift+T - save snapshot of the DOM tree. When the shortcut is pressed Rapise prompts for a name and saves the DOM tree in XML format and the screenshot of the browser window in PNG format.</li> </ul>"},{"location":"Guide/web_spy/#dom-tree","title":"DOM Tree","text":"<p>The DOM tree lets you view all of the HTML elements (also known as DOM elements) that make up the web application / web page being tested. The elements are showing in a hierarchical tree representation that mirrors how they are nested on the page. Each element is displayed along with the various attributes (class, id, style, etc.) that are associated with the element:</p> <p></p> <p>The DOM elements are color coded.</p> <ul> <li>Tags and text are gray </li> <li>Attribute names are red </li> <li>Attribute values are blue </li> <li>Elements that are not displayed on screen because of zero size or <code>display: none</code> style emphasized with lighter colors.</li> </ul> <p>Sometimes you have more attributes displayed than can be easily red. To make viewing the DOM tree easier, you can use the Web Settings dialog to set a list of attributes that should be excluded from the DOM tree pane.</p> <p>When you right-click on an element it opens a popup menu with the following options:</p> <ul> <li>Copy - copies node text to clipboard (no attribute truncation).</li> <li>Highlight - highlights the element in the browser.</li> <li>Learn - expands the list of various XPath locators generated for the element.  Click an item in this list and Rapise will learn the object with selected XPath.</li> </ul> <p></p> <p>Double clicking on an element copies it's XPath to the toolbar.</p>"},{"location":"Guide/web_spy/#dom-element","title":"DOM Element","text":"<p>When you click on an element in the DOM tree its properties are displayed in the DOM Element pane and it is highlighted in the web browser.</p> <p></p> <p>The properties that are displayed are grouped into the following categories:</p> <ul> <li>Primary<ul> <li>tagName - this contains the name of the HTML element</li> <li>text - this contains a textual representation of all the HTML text nodes inside this element (if any)</li> </ul> </li> <li>Attributes - all DOM attributes appear here. You see these attributes in red color in the DOM tree. Examples:<ul> <li>id - this contains the ID of the DOM element, if specified in the page</li> <li>style - this contains the inline styles defined for the element</li> <li>class - this contains the list of CSS classes applied to the element (separated by spaces if more than one)</li> </ul> </li> <li>Properties - this contains the computed positional information about the element<ul> <li>height</li> <li>width</li> <li>x</li> <li>y</li> <li>zIndex</li> </ul> </li> <li>Selectors - this section contains XPath and CSS selectors computed using different algorithms. If you will double click a name of the selector it will be copied to the edit field on the toolbar.</li> </ul>"},{"location":"Guide/web_spy/#test-results","title":"Test Results","text":"<p>In addition to navigating the DOM tree and Learning specific elements, the other main capability of the DOM Spy is the ability to create queries using either XPath or CSS to see which objects match the query and then learn the specific result. For example we want to find all the table cells that have at least some style information specified.</p>"},{"location":"Guide/web_spy/#using-xpath","title":"Using XPath","text":"<p>If you enter in the XPath query to locate the table cells in the XPath box at the top.</p> <p></p> <p>When you click Test it will display all of the DOM elements that match the query:</p> <p></p> <p>You can now refine the query to only find the items you want to test.</p> <p>Note</p> <p>If you need to enter a non-breaking space in your search query (nbsp) you can do this by pressing Shift+Space key combination.</p>"},{"location":"Guide/web_spy/#using-css","title":"Using CSS","text":"<p>If you enter in the CSS selector to locate the table cells in the CSS box at the top (if the box is not visible use menu <code>Spy &gt; CSS Enabled</code>).</p> <p></p> <p>When you click Test it will display all of the DOM elements that match the query:</p> <p></p> <p>You can now refine the query to only find the items you want to test.</p> <p>In either case, if you can adjust the query to only match a single element, you can then click the appropriate Learn button next to the XPath or CSS edit fields. That will learn the specified query as a new object that can be scripted against in Rapise. This is very useful if you want to dynamically select an object based on its content rather than a hard-coded ID or position. Also you can add an assertion to the test by clicking Verify. It will display properties of the object. You may set checkboxes against properties you want to check during playback.</p> <p>In addition, in the test results view, when you click on a result:</p> <ul> <li>The right-click popup menu is the same as for DOM Tree if type of the result is a DOM Element</li> <li>If the result is simple text then only Copy is available, which copies the text</li> <li>Clicking on a DOM element in the results list opens it in DOM Element pane and also selects it in the DOM Tree pane</li> </ul>"},{"location":"Guide/web_spy/#maintenance-mode","title":"Maintenance Mode","text":"<p>Since Rapise version 6.2 it is easier to check and update object locators. If you launch the spy it will show the object tree in the right side panel. You may toggle visibility for the object tree using <code>Show/Hide Objects</code> button in the top right corner of the spy.</p> <p></p> <p>To check an object locator simply select the object in the object tree. The result of locator test is indicated by an icon.</p> <p></p> <p>If an object is found it will be highlighted in the browser and selected in the tree of application objects (left pane).</p> <p>To fix a locator for object that is not found do the following:</p> <ol> <li>Select the object in the object tree (right pane)</li> <li>Select the element by<ul> <li>testing XPath locator from the toolbar</li> <li>or directly in the DOM tree (left pane)</li> <li>or by using object tracking.</li> </ul> </li> <li>Press relearn button on the toolbar.</li> </ol> <p></p>"},{"location":"Guide/web_spy/#see-also","title":"See Also","text":"<ul> <li>Object Spy</li> <li>Save DOM tree to share with Rapise experts</li> </ul>"},{"location":"Guide/web_testing/","title":"Web Testing","text":""},{"location":"Guide/web_testing/#purpose","title":"Purpose","text":"<p>Rapise lets you record and play automated tests against web applications on a variety of web browsers including Google Chrome, Microsoft Edge, Mozilla Firefox, Internet Explorer and Safari. Rapise lets you record or create your tests against one browser and then play the same test back against all of the other browsers. It is called Cross Browser Testing.</p> <p></p> <p>Rapise provides comprehensive support for testing Web applications. It uses the web browser Document Object Model (DOM) to interact with the current web page. The various web browsers on the market have various differences in DOM implementation. In many cases these differences are not significant. But sometimes they require special handling. Rapise tries to overcome the differences and make the recorded scripts as universal as possible.</p> <p>In addition, it is possible to have more control over the cross browser execution using the available APIs and configuration variables. You can also run the recording in multiple browsers in succession using either a Rapise sub-test or simply executing the test from our SpiraTest test management system and passing through different parameter values.</p>"},{"location":"Guide/web_testing/#dom-api","title":"DOM API","text":"<p>In addition to the usual recording, learning and playback that is similar to testing other technologies (desktop, mobile, etc.) there are some unique functions that are available on all recorded web objects. Upon learning a web element in Rapise, you get an object of type HTMLObject. Each HTMLObject provides set of functions to facilitate the cross-browser access to web element parents and children.</p> <ul> <li>DoDOMChildAt - Returns n-th child (zero-based).</li> <li>DoDOMChildrenCount - Returns number of children elements for this one.</li> <li>DoDOMFindParentWithAttribute - Returns parent element with given attribute matching given string or regex.</li> <li>DoDOMGetAttribute - Returns specified attribute.</li> <li>DoDOMNextSibling - Returns next sibling element for this one.</li> <li>DoDOMParent - Returns parent element having this element.</li> <li>DoDOMPrevSibling - Return previous sibling element for this one.</li> <li>DoDOMRoot - Returns Root element having this element.</li> </ul>"},{"location":"Guide/web_testing/#see-also","title":"See Also","text":"<ul> <li>Web Testing Tutorial - a basic example of how to record, learn and playback tests using a our sample web application.</li> <li>Web Spy - How to use the Web Spy to inspect web pages and dynamically query for HTML elements.</li> <li>Web Application Profile - How to improve automatic generation of Web element locators.</li> <li>Self-healing Web Locators - How to enable and use advanced maintenance features for Web testing.</li> <li>XPath - An explanation of the XPath language, how it can be used to dynamically query objects in web application and some examples.</li> <li>CSS - An explanation of how to use CSS selectors (common in frameworks such as jQuery) to dynamically query objects in web applications.</li> <li> <p>Selenium Profiles - How to configure Rapise to playback tests on different browsers.</p> </li> <li> <p>Legacy</p> <ul> <li>Web Browser Profiles - How to configure browsers to record and playback tests via Rapise native connectors.</li> <li>Setting up Web Browsers - describes the steps needed to configure each of the web browsers to work with Rapise.</li> </ul> </li> </ul>"},{"location":"Guide/windows_applications/","title":"Windows Applications","text":""},{"location":"Guide/windows_applications/#overview","title":"Overview","text":"<p>Rapise provides comprehensive support for testing Microsoft Windows GUI applications, including applications written using Win32, MFC, ATL, Windows Forms, Visual Basic 6, Microsoft .NET, ActiveX, and Windows Presentation Framework (WPF).</p> <p>Specifically, Rapise has support for the following technologies used tobuild Windows applications:</p> <ul> <li>Win32 Applications<ul> <li>Microsoft Foundation Classes (MFC)</li> <li>ActiveX Template Library (ATL)</li> <li>Visual Basic 6</li> <li>ActiveX / COM</li> </ul> </li> <li>Microsoft .NET Applications</li> <li>Windows Presentation Framework (WPF)<ul> <li>Silverlight</li> <li>XAML</li> </ul> </li> <li>Modern / Metro Apps</li> <li>Third Party Component Libraries<ul> <li>Infragistics WinForm Controls</li> <li>Telerik RadControls</li> <li>DevExpress Controls</li> <li>ComponentOne ActiveX Controls</li> <li>SyncFusion Windows Form Controls</li> <li>FarPoint Spreadsheet Control</li> </ul> </li> <li>Java Applications<ul> <li>Swing</li> <li>AWT</li> <li>SWT</li> <li>Oracle Forms</li> </ul> </li> <li>QT Applications</li> </ul>"},{"location":"Guide/windows_applications/#choosing-the-right-windows-library","title":"Choosing the Right Windows Library","text":"<p>Since applications are often built using a mixture of different Windows technologies and component frameworks, we recommend that you use the following approach when testing Windows desktop applications with Rapise:</p> <ol> <li>First try recording using the \"Auto\" option, this will let Rapise inspect the application and use the most appropriate libraries. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails. If auto-detection is not reliable for your application, move on to step 2.</li> <li>Select the \"UIAutomation Object\" Spy and try to inspect the application. If the Spy shows the real content of the application (i.e. you see object names and IDs) then it is worth trying to record a test with the corresponding library called \"UIAutomation\" - using the record application dialog box. This library is best for modern Windows applications.</li> <li>If the recording is not picked up or does not play back correctly then the next step is to try recording with the \"Generic\" library. This is designed for older Windows Win32 applications. There is also a Spy tool for this library called the \"Accessible Object\" Spy.</li> <li>If you have third-party components from Infragistics, Telerik, DevExpress, ComponentOne, SyncFusion or FarPoint, you may also need to select those libraries in addition to Generic.</li> <li>If the recording is not sufficient then the last step is to try and record with the \"Advanced Accessibility\" library. This library contains definitions of accessible controls at a very basic level. It is not very sophisticated, but it is often sufficient for many cases and works across a wide range of applications.</li> <li>If neither of options below satisfy then it may be worth to try low level recording (https://www.inflectra.com/Support/KnowledgeBase/KB114.aspx).  \u00a0</li> </ol>"},{"location":"Guide/windows_applications/#sample-applications","title":"Sample Applications","text":"<p>In the Samples index of this manual we provide a full list of all the samples included with Rapise, however for Windows applications there are a couple of key ones that are worth exploring:</p> <p>a) Two Dialogs</p> <p>This is a simple Win32 MFC application that uses the Generic library and lets you try some basic testing scenarios.</p> <p></p> <p>b) Sample ATM</p> <p>This is a more robust Win32 MFC application that is based on a banking ATM. You should use the Generic library with this application:</p> <p></p> <p>c) WPF Sample Application</p> <p>This application is a good test of the UIAutomation library and is a simple test application with all of the different types of control available for testing:</p> <p></p>"},{"location":"Guide/writing_to_the_report/","title":"Writing to the Report","text":""},{"location":"Guide/writing_to_the_report/#purpose","title":"Purpose","text":"<p>You can write to individual columns, create columns, and add data to the report.</p>"},{"location":"Guide/writing_to_the_report/#usage","title":"Usage","text":""},{"location":"Guide/writing_to_the_report/#writing-to-and-creating-a-column","title":"Writing to and Creating a Column","text":"<p>Use Tester.PushReportAttribute or Tester.SetReportAttribute to set values in specific rows. Tester.PopReportAttribute reverses the effect of Tester.PushReportAttribute:</p> <p>PushReportAttribute</p> <pre><code>Tester.PushReportAttribute(\"columnName\", \"value\");\n\n// ...some test steps... \u00a0 \u00a0 \u00a0 //the rows corresponding to these steps will have\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //value in their columnName column\n\nTester.PushReportAttribute(\"columnName\", \"value2\");\n\n// ...some test steps... \u00a0 \u00a0 \u00a0 //the rows corresponding to these steps will have\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 //value2 in their columnName column\n\nTester.PopReportAttribute(\"columnName\"); //test steps proceeding this will be back to value\n</code></pre> <p>If columnName does not exist, it will be added to the report.</p> <p>SetReportAttribute</p> <pre><code>Tester.SetReportAttribute(\"columnName\", \"value\");\n</code></pre> <p>If <code>columnName</code> does not exist, it will be added to the report. \u00a0Column <code>columnName</code> will be populated with <code>value</code> for rows created after this function call (unless specified otherwise).</p>"},{"location":"Guide/writing_to_the_report/#adding-data","title":"Adding Data","text":"<p>Data must be associated with an Assert row or a Message row.</p> <pre><code>Tester.Assert(\"description\", \"expression\", \"data\", \"columnValuePairs\");\nTester.Message(\"description\", \"data\", \"columnValuePairs\");\n</code></pre> <ul> <li>description is a string.</li> <li>expression is the boolean expression that the assertion tests.</li> <li>data is an array of data objects. \u00a0Each data element is written to its own row below the assert/message row with which it is associated. \u00a0Data can be text, a link, or an image. \u00a0The following is an array with text, link, and image data.</li> <li>columnValuePairs is an object with key/value pairs. \u00a0Column names are the keys. \u00a0If the specified column does not exist, it will be created. Example: <code>{requirement: \"Req1.2.3\", paragraph: \"12.5\"}</code></li> </ul> <p>Example of data array:</p> <pre><code>[\n    new SeSReportText(\"text\"),\n\u00a0 \u00a0 new SeSReportLink(\"urlString\", \"linkText\"),\n\u00a0 \u00a0 new SeSReportImage(\"ImageWrapperObject\", \"imageDescription\")\n]\n</code></pre>"},{"location":"Guide/writing_to_the_report/#see-also","title":"See Also","text":"<ul> <li>Automated Reporting</li> <li>The test samples include a sample about reporting (Reporting.sstest)</li> </ul>"},{"location":"Guide/xpath/","title":"Web Testing - Using XPath Queries","text":""},{"location":"Guide/xpath/#purpose","title":"Purpose","text":"<p>When testing web applications you will explicitly or implicitly use XPath expressions to query the browser DOM for elements based on the scenario under test. This section explains how XPath queries are used in Rapise and how to make your browser testing more flexible and adaptive to changes in the application you test.</p>"},{"location":"Guide/xpath/#xpath-fundamentals","title":"XPath Fundamentals","text":"<p>XPath uses path expressions to select nodes in an XML document such as HTML. The node is selected by following a path or steps.</p> <p>Refer to XPATH Tutorial for more details.</p>"},{"location":"Guide/xpath/#rapise-xpath-extensions","title":"Rapise XPath Extensions","text":""},{"location":"Guide/xpath/#frames","title":"Frames","text":"<p>Web pages sometimes use HTML frames. The XPath works inside the frame contents. Rapise has a special syntax (that is not part of standard XPath) to combine multiple XPath statements into a single line:</p> <pre><code>//frame[@name='main']@@@//a[3]\n</code></pre> <p>The special statement <code>@@@</code> is used as a separator for XPath statements pointing to constituent frames.</p> <p>The top-level frame is found by name <code>main</code></p> <pre><code>//frame[@name='main']\n</code></pre> <p>Then the frame's contents is searched for the <code>&lt;a&gt;</code> element that is a 3d child of it's parent element.</p> <pre><code>//a[3]\n</code></pre> <p>Note</p> <p>Segments of a locator separated by <code>@@@</code> can be both xpath and css. For example the following locators are equivalent:</p> <pre><code>    css=frame[name='main']@@@css=a:nth-of-type(3)\n    //frame[@name='main']@@@//a[3]\n    //frame[@name='main']@@@css=a:nth-of-type(3)\n    css=frame[name='main']@@@//a[3]\n</code></pre>"},{"location":"Guide/xpath/#shadow-dom","title":"Shadow DOM","text":"<p>Another XPath extension is related to Shadow DOM. It's borders are typically closed for XPath. In such a case a locator for an element inside Shadow DOM has two parts separated by <code>@#@</code> delimiter. First part (can be XPATH or CSS) should point to the Shadow Root in the Light DOM. Second part (always CSS) should point to a child element of the Shadow Root. In the case of nested Shadow DOMs there will be multiple <code>@#@</code> delimiters.</p> <p>Example of a locator:</p> <p>automatically built by WebSpy <pre><code>/html/body[1]/section[1]/div/guid-generator[1]@#@css=input:first-of-type\n</code></pre> after manual editing <pre><code>//guid-generator@#@css=input\n</code></pre></p> <p>Find the example of a simple page with Shadow DOM on UI Testing Playground.</p>"},{"location":"Guide/xpath/#piercing-shadow-dom","title":"Piercing Shadow DOM","text":"<p>Rapise 8.2+ is able to pierce Shadow DOM. It means that if a CSS selector does not use <code>@#@</code> delimiter described above then Rapise will search for an element without taking into account Shadow DOM borders.</p> <p>For example on this page:</p> <pre><code>&lt;section&gt;\n  &lt;div&gt;\n    &lt;guid-generator&gt;\n      # shadow-root (open)\n      &lt;input class=\"edit-field\" id=\"editField\"&gt;\n      &lt;button class=\"button-generate\" id=\"buttonGenerate\"&gt;&lt;i class=\"fa fa-cog\"&gt;&lt;/i&gt;&lt;/button&gt;\n      &lt;button class=\"button-copy\" id=\"buttonCopy\"&gt;&lt;i class=\"fa fa-clone\"&gt;&lt;/i&gt;&lt;/button&gt;\n    &lt;/guid-generator&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p>we may find <code>&lt;input&gt;</code> element with</p> <pre><code>css=input\ncss=input[id='editField']\ncss=guid-generator input\ncss=guid-generator &gt; input\n</code></pre> <p>Note</p> <p>Shadow DOM piercing feature may break existing tests as locators recorded earlier may start to find more elements. In this case make locators more specific.</p>"},{"location":"Guide/xpath/#automatic-xpath-generation-on-record-and-learn","title":"Automatic XPath Generation on Record and Learn","text":"<p>When you do a recording session, interact with web elements or learn them - Rapise generates XPath locators for the elements. You can view XPath of an object in the property grid:</p> <p></p>"},{"location":"Guide/xpath/#usage","title":"Usage","text":""},{"location":"Guide/xpath/#in-web-spy","title":"In Web Spy","text":"<p>In some advanced cases you may need to construct XPath query manually. For this purpose we recommend using the Web Spy tool:</p> <p></p> <p>If you enter in the XPath query at the top, when you click Test it will display all of the DOM elements that match the query:</p> <p></p> <p>You can now refine the query to only find the item you want to test.</p> <p>When you have created the query in the Web Spy that returns the HTML element that you were expecting, you can click on the Learn button in the Web Spy toolbar to learn that element. What this will do is create a new Rapise object in the Object Tree that maps to this specific XPath.</p> <p>For example, if you want to find a specific book in a grid of books</p> <p></p> <p>you can search by its name using <code>text()</code> XPath function:</p> <pre><code>//td[text()='Oliver Twist']\n</code></pre> <p>Then learn this object as Oliver_Twist so that you can access it in your code as <code>SeS(\"Oliver_Twist\")</code>. Every time you call a function on Oliver_Twist, Rapise will use the learned XPath expression and use that to evaluate which HTML element in the web page to access.</p>"},{"location":"Guide/xpath/#dynamic-queries","title":"Dynamic Queries","text":"<p>In addition to learning objects based on specific XPath, there is HTMLObject.DoDOMQueryXPath action that can be used to query for elements in the web page:</p> <pre><code>var res = SeS('MainContent_grdBooks').DoDOMQueryXPath('.//td[text()=\"Oliver Twist\"]');\nTester.Message(res.length);\n</code></pre> <p>This will dynamically query for any HTML element that is a child of the learned MainContent_grdBooks object that matches the XPath. In this example it will look for any table cell that has the content of the book name.</p> <p>You can also find an object dynamically without having any object in the object tree. To do this use Navigator.SeSFind action.</p>"},{"location":"Guide/xpath/#see-also","title":"See Also","text":"<ul> <li>KB282 Elastic XPATH Expressions</li> <li>KB363 How to define a profile for Web Application in Rapise</li> </ul>"},{"location":"Guide/Frameworks/diffmerge/","title":"Diff / Merge Tools","text":"<p>Diff and merge tools serve the purpose of examining modifications and resolving inconsistencies.</p> <p>Diff tools come in handy when you have made alterations and wish to compare them with the original, unaltered version.</p>"},{"location":"Guide/Frameworks/diffmerge/#rapise-merge","title":"Rapise Merge","text":"<p>Whenever the Save to Spira button is pressed in Rapise, the tool will examine which files have been modified.</p> <p></p> <p>(1) If a file is accompanied by a \"Diff...\" button, it indicates that the file has been altered compared to the version currently stored in Spira. Clicking the button will...</p> <p>(2) If a file displays a \"Resolve...\" button, it signifies a conflict where the file has been modified both locally and remotely in parallel. Clicking the button will prompt the display of a merge conflict resolution dialog.</p>"},{"location":"Guide/Frameworks/diffmerge/#default-diff-tools","title":"Default Diff Tools","text":"<p>Rapise does not have built-in diff/merge tools, except for two specific cases:</p> <ol> <li> <p>RVLMerge is used to compare and merge <code>.xlsx</code> files, including RVL (<code>.rvl.xlsx</code>) files.</p> </li> <li> <p>sstestmerge is used for silent 3-way merging of conflicting <code>.sstest</code> files.</p> </li> </ol> <p>For other file types, Rapise relies on the already installed merge tools. There are various options available, both free and paid, and developers often have their preferred choices.</p> <p>If Rapise recognizes a specific merge tool, it will utilize it. Currently, Rapise is aware of the following tools, as defined in the <code>MergeTools.yml</code> configuration file:</p> <pre><code>tools:\n  TortoiseGitIDiff:\n    mdi: false\n    autorefresh: false\n    text: false\n    ext: [bmp, gif, ico, jpg, jpeg, png, tif, tiff]\n    diff: ' /left:\"%remote%\" /right:\"%local%\"'\n    search:\n    - '%PATH%TortoiseGitIDiff.exe'\n    - '%ProgramFiles%\\TortoiseGit\\bin\\TortoiseGitIDiff.exe'\n    - '%ProgramW6432%\\TortoiseGit\\bin\\TortoiseGitIDiff.exe'\n    - '%ProgramFiles(x86)%\\TortoiseGit\\bin\\TortoiseGitIDiff.exe'\n\n  TortoiseGitMerge:\n    text: true\n    diff: '\"%remote%\" \"%local%\"'\n    merge3: ' /base:\"%base%\" /theirs:\"%remote%\" /mine:\"%local%\" /merged:\"%result%\"'\n    search: \n    - '%PATH%TortoiseGitMerge.exe'\n    - '%ProgramFiles%\\TortoiseGit\\bin\\TortoiseGitMerge.exe'\n    - '%ProgramW6432%\\TortoiseGit\\bin\\TortoiseGitMerge.exe'\n    - '%ProgramFiles(x86)%\\TortoiseGit\\bin\\TortoiseGitMerge.exe'\n\n  BeyondCompare:\n    autorefresh: true\n    text: true\n    diff: '/solo /leftreadonly \"%remote%\" \"%local%\"'\n    merge3: '/solo \"%base%\" \"%remote%\" \"%local%\" \"%result%\"'\n    ext: [pdf, bmp, gif, ico, jpg, jpeg, png, tif, tiff, rtf]\n    search:\n    - '%PATH%BCompare.exe'\n    - '%ProgramFiles%\\Beyond Compare *\\BCompare.exe'\n    - '%ProgramW6432%\\Beyond Compare *\\BCompare.exe'\n    - '%ProgramFiles(x86)%\\Beyond Compare *\\BCompare.exe'\n\n  AraxisMerge:\n    mdi: true\n    autorefresh: true\n    text: true\n    diff: '\"%remote%\" \"%local%\"'\n    merge3: '/merge \"%base%\" \"%remote%\" \"%local%\" \"%result%\"'\n    ext: [bmp, dib, emf, gif, jif, j2c, j2k, jp2, jpc, jpeg, jpg, jpx, pbm, pcx, pgm, png, ppm, ras, tif, tiff, tga, wmf]\n    search:\n    - '%PATH%ConsoleCompare.exe'\n    - '%ProgramFiles%\\Araxis\\Araxis Merge\\ConsoleCompare.exe'\n    - '%ProgramW6432%\\Araxis\\Araxis Merge\\ConsoleCompare.exe'\n    - '%ProgramFiles(x86)%\\Araxis\\Araxis Merge\\ConsoleCompare.exe'\n\n  KDiff3:\n    mdi: false\n    autorefresh: false\n    text: true\n    diff: '\"%remote%\" \"%local%\"'\n    merge3: '\"%base%\" \"%local%\" \"%remote%\" -o \"%result%\"'\n    search: \n    - '%PATH%kdiff3.exe'\n    - '%ProgramFiles%\\KDiff3\\kdiff3.exe'\n    - '%ProgramW6432%\\KDiff3\\kdiff3.exe'\n    - '%ProgramFiles(x86)%\\KDiff3\\kdiff3.exe'\n\n  WinMerge:\n    mdi: false\n    autorefresh: true\n    text: true\n    notes: |\n      * [Command line reference](https://manual.winmerge.org/en/Command_line.html).\n      * '/u' Prevents WinMerge from adding paths to the Most Recently Used (MRU) list.\n      * '/wl' Opens the left side as read-only.\n      * '/dl' and '/dr' Specifies file descriptions in the title bar.\n      * '/e' Enables close with a single Esc key press.\n    diff: '/u /wl /e \"%remote%\" \"%local%\" /dl \"REMOTE\" /dr \"LOCAL\"'\n    merge3: '-s -wl -wm /ar -dl Base -dm Remote -dr Local \"%base%\" \"%remote%\" \"%local%\" -o \"%result%\"'\n    ext: [bmp, cut, dds, exr, g3, gif, hdr, ico, iff, lbm, j2k, j2c, jng, jp2, jpg, jif, jpeg, jpe, jxr, wdp, hdp, koa, mng, pcd, pcx, pfm, pct, pict, pic, png, pbm, pgm, ppm, psd, ras, sgi, rgb, rgba, bw, tga, targa, tif, tiff, wap, wbmp, wbm, webp, xbm, xpm]\n    search: \n    - '%PATH%WinMergeU.exe'\n    - '%ProgramFiles%\\WinMerge\\WinMergeU.exe'\n    - '%ProgramW6432%\\WinMerge\\WinMergeU.exe'\n    - '%ProgramFiles(x86)%\\WinMerge\\WinMergeU.exe'\n    - '%LocalAppData%\\Programs\\WinMerge\\WinMergeU.exe'\n</code></pre>"},{"location":"Guide/Frameworks/diffmerge/#built-in-tools","title":"Built in Tools","text":""},{"location":"Guide/Frameworks/diffmerge/#rvl-and-spreadsheets","title":"RVL and Spreadsheets","text":"<p>By default, RVLMerge is automatically installed. Unless specified otherwise, it will be displayed when you choose to show the diff for an RVL or a spreadsheet.</p> <p></p>"},{"location":"Guide/Frameworks/diffmerge/#using-with-git","title":"Using with Git","text":"<p>You can integrate RVLMerge with your current Git diff/merge tool by using its command line interface.</p> <p>For performing a diff, you can use the following command:</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\RvlMerge\\RvlMerge.exe -s &lt;src&gt; -d &lt;dst&gt;\n</code></pre> <p>Here, <code>&lt;src&gt;</code> represents the path to the unmodified (base or remote) version, and <code>&lt;dst&gt;</code> represents the path to the final version, which will also be the target for the merge results.</p> <p>For example, in TortoiseGit, the diff command would look like this:</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\RvlMerge\\RvlMerge.exe -s %base -d %mine\n</code></pre> <p>Similarly, for performing a merge, you can use the following command:</p> <pre><code>C:\\Program Files (x86)\\Inflectra\\RvlMerge\\RvlMerge.exe -s %theirs -d %mine\n</code></pre>"},{"location":"Guide/Frameworks/diffmerge/#sstest","title":"Sstest","text":"<p>The merging of <code>.sstest</code> files is fully automatic (usually it is <code>Test.sstest</code> for a Test Case or <code>Framework.sstest</code> for a framework root). So once you hit Merge..., no UI is shown and the merged file is automatically generated.</p>"},{"location":"Guide/Frameworks/diffmerge/#adding-a-custom-diff-tool","title":"Adding a Custom Diff Tool","text":"<p>You have the option to incorporate additional known diff tools into Rapise. If your team utilizes multiple tools, that's perfectly fine. You can define all of them together, and Rapise will select the first one it finds. To achieve this, you need to create a file named MergeTools.yml in one of two locations:</p> <p>In the root directory of your testing framework, such as <code>C:\\Users\\UserName\\Documents\\My Rapise Tests\\LIS\\MergeTools.yml</code>. When defined in this location, it becomes specific to the testing framework. Loading it from Spira or Git will provide the associated diff definitions.</p> <p>In the <code>c:\\Users\\Public\\Documents\\Rapise\\</code> directory. When defined here, it applies to all tests and frameworks on the given computer.</p> <p>If you have a <code>MergeTools.yml</code> file in both locations, the one in the framework directory takes precedence.</p> <p>The <code>MergeTools.yml</code> file follows the following format:</p> <pre><code>%YAML 1.2\n---\n#\n# Replacement variables\n# %base%    - common\n# %remote%  - aka 'theirs'\n# %local%   - aka 'mine'\n# %result%  - destination\n#\n# diff - show diff only\n# merge - way merge for %remote% + %local% =&gt; %result%\n# merge3 - 3 way merge %base% + %remote% + %local% =&gt; %result%\n# - If %result% is not used, %local% is assumed to be an output\n\ntools:\n\n  CustomDiff1:\n    mdi: false\n    autorefresh: false\n    text: true\n    diff: '\"%base%\" \"%local%\"'\n    ext: [txt,js]\n    search: \n    - '%ProgramFiles%\\Path\\To My\\DiffTool.exe'\n\n  CustomMerge1:\n    mdi: false\n    autorefresh: false\n    text: true\n    merge3: '\"%base%\" \"%remote%\" \"%local%\" \"%result%\"'\n    ext: [txt]\n    search: \n    - '%ProgramFiles%\\Path\\To My\\MergeTool.exe'\n\n  CustomDiffMerge1:\n    mdi: false\n    autorefresh: false\n    text: true\n    diff: '\"%base%\" \"%local%\"'\n    merge3: '\"%base%\" \"%remote%\" \"%local%\" \"%result%\"'\n    ext: [txt]\n    search: \n    - '%ProgramFiles%\\Path\\To My\\DiffMergeTool.exe'\n</code></pre>"},{"location":"Guide/Frameworks/frameworks/","title":"Testing Frameworks","text":"<p>Info</p> <p>In different parts of the documentation and in knowledge base articles we use term Framework mode to refer to this kind of framework with built-in support for modules, test cases and test sets. Requires Rapise 8.0+</p> <p>A testing framework is a collection of guidelines, libraries, and tools that provide a standard way of organizing and executing tests.</p> <p>Previous versions of Rapise (pre 8.0) already had all the necessary tools for developing testing frameworks. With those tools that have been available for a long time, it is possible to build a variety of testing frameworks. But the availability of variety leads to difficulties in choosing the best combination of tools to obtain the optimal result.</p> <p>We have analyzed the best practices of Rapise for this purpose and tuned the IDE to support the best practices we encountered.</p> <p>From our point of view, a good testing framework should have the following features:</p> <ol> <li> <p>Grouping of test cases. Test cases can be organized in subfolders and each test case can have separate RVL Sheets and functions.</p> </li> <li> <p>Managing common data - spreadsheets, configurations, functions, parameters, scripts, libraries, object repositories.</p> </li> <li> <p>Object repositories. A repository may be for a test case, a common one for different test cases, or a common one for a Page Object.</p> </li> <li> <p>Refactoring. Moving, renaming, cloning, importing and exporting test cases is necessary to easily organize the framework as it grows and develops.</p> </li> <li> <p>Cloning of the entire testing framework. Ability to clone and save the framework as a whole, preserving settings for test management - test sets and configurations.</p> </li> <li> <p>Parametrization, including runtime settings (intervals, screenshots), and configuration settings (initial URL, startup paths, etc.).</p> </li> <li> <p>An elaborate framework development workflow. As a rule, it is impossible to foresee everything at the beginning of development.  It also takes time to learn all the features of Rapise. That said, the first test cases should appear as early as possible. A good workflow allows you to get started quickly, without having to fully explore all the features and without sacrificing the quality of the framework in the future.</p> </li> <li> <p>A navigation system is necessary to navigate a framework with hundreds or thousands of test cases and dozens of configurations. Moreover, the capabilities for internal documentation of individual test cases, functions, and Page Objects are important.</p> </li> <li> <p>Integration with test management. Test sets, night runs, work with flaky tests, launch history.</p> </li> <li> <p>Teamwork and distributed development. Distributed development and test launches where different participants have different levels of knowledge and expertise. If you're developing a medical system, for example, someone will know medicine better, and someone will know test automation better. And it is important to ensure harmonious interaction between the different members of the team.</p> </li> <li> <p>Maintenance. testing frameworks are developed for the long term, which means that they must be constantly maintained. It is perfectly normal for a test to fail with minimal changes to the application, and hence the convenience of constantly fixing them comes to the forefront.</p> </li> <li> <p>Mixed Mode Tests. Integration tests often interact with several different types of applications. There's the mobile client, the web app, the desktop, and the API. And the usability of interaction with all of these applications comes to the force.</p> </li> </ol>"},{"location":"Guide/Frameworks/frameworks/#testing-framework-features","title":"Testing Framework Features","text":"<p>Here is an overview of the key features provided by the testing frameworks in Rapise.</p>"},{"location":"Guide/Frameworks/frameworks/#grouping-of-test-cases","title":"Grouping of Test Cases","text":"<p>When creating Test Cases, you have the option to define groups for them:</p> <p></p> <p>Alternatively, you can move the test case to a different folder later to regroup it:</p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#managing-common-data","title":"Managing Common Data","text":"<p>In Rapise, the shared folder plays a vital role in organizing resources that are shared across test cases, modules, and page objects. Typically, the shared folder includes the following:</p> <ol> <li> <p>Input data files in formats like spreadsheet (<code>.xlsx</code>), JSON (<code>.json</code>), CSV, or plain text.</p> </li> <li> <p><code>.js</code> files containing common functions.</p> </li> <li> <p>The <code>Object.js</code> file, which serves as the shared repository for objects.</p> </li> <li> <p>Definitions for REST/SOAP APIs.</p> </li> </ol> <p>By default, the framework provides a <code>Common.js</code> file where you can place all your common functions.</p> <p>If you wish to make any file shared, you can locate it in the Files View tab and tag it as <code>shared</code>.</p> <p>For instance, if you tag a file as <code>User.js</code>, it will be automatically loaded when any other test case is started:</p> <p></p> <p>Note</p> <p>To auto load a shared file on playback only set <code>shared</code> tag.</p> <p>Note</p> <p>To auto load a shared file on playback and recording set <code>shared,recorder</code> tags.</p> <p>Note</p> <p>To auto load a shared file on recording only set <code>shared,recorder,skip</code> tag.</p> <p>Furthermore, if you tag an arbitrary <code>Objects.js</code> file with the <code>shared</code> tag, all the objects defined within it will be accessible in any test case.</p>"},{"location":"Guide/Frameworks/frameworks/#object-repositories","title":"Object Repositories","text":"<p>The objects recorded by the Rapise recorder can be categorized into three types:</p> <ol> <li> <p>Test case-specific objects.</p> </li> <li> <p>Page object-specific objects.</p> </li> <li> <p>Objects that are shared among different parts of the framework.</p> </li> </ol> <p>We recommend avoiding the use of shared objects and instead placing them in a page object.</p> <p>During object recording, the objects are stored in the respective repository based on the recording context:</p> <ol> <li> <p>When recording a test case, the recognized objects are added to the repository specific to that test case.</p> <p></p> </li> <li> <p>When recording a page object, the recognized objects are added to the repository specific to that page object.</p> <p></p> </li> <li> <p>Any of these repositories can be made global by tagging its corresponding <code>Objects.js</code> file with the <code>shared</code> tag in the Files View. For example, if the AppNavigation repository is marked as <code>shared</code>, any recording or learning performed in the AppNavigation repository will automatically update the global object repository.</p> </li> </ol> <p>You can utilize the Object Manager to copy objects between different repositories.</p>"},{"location":"Guide/Frameworks/frameworks/#refactoring","title":"Refactoring","text":"<p>The testing framework offers several features that facilitate refactoring activities:</p> <ol> <li> <p>Renaming a test case.</p> </li> <li> <p>Moving a test case to a different location.</p> </li> <li> <p>Renaming an object in the repository.</p> </li> </ol> <p>Additionally, the following operations can be useful for refactoring, especially when combined:</p> <ol> <li> <p>Cloning a test case to create a duplicate.</p> </li> <li> <p>Cloning an object in the repository to create a copy.</p> </li> <li> <p>Deleting a test case that is no longer needed.</p> </li> <li> <p>Deleting an object from the repository.</p> </li> </ol> <p>For example, when moving a test case, it can be a gradual process. First, we clone the original test case, allowing both versions to coexist (e.g., for different versions of the application under test). Then, once the old test case becomes irrelevant, we delete it. In this way, we utilize the combination of clone and delete operations instead of a direct move.</p>"},{"location":"Guide/Frameworks/frameworks/#cloning-of-the-entire-testing-framework","title":"Cloning of the Entire testing framework","text":"<p>A full copy of the entire testing framework may be needed. For example, if you want to separate different test versions for different product versions.</p> <p>This can also be achieved by maintaining a common unified testing framework with different configurations. Or by using GIT branches. These are the methods we recommend using. But this requires a higher level of test organization, so at first a full copy of the framework may be the easiest and most efficient solution. In addition, Spira gives you the option to clone the product. If such a product has a testing framework, cloning it also becomes logical.</p> <p>You can do it with <code>File &gt; Save As...</code> menu. Once you have a copy, you can save it to another product in Spira.</p>"},{"location":"Guide/Frameworks/frameworks/#parametrization","title":"Parametrization","text":"<p>As the testing framework evolves, the number of configuration parameters typically increases. Initially, you can start without parameters and gradually add them as needed.</p> <p>The testing framework parameters can be divided into two groups:</p> <ol> <li> <p>Logical parameters of the test, such as the application path, initial URL, path to the test data file, etc.</p> </li> <li> <p>Runtime environment parameters, such as the web browser profile name (<code>g_browserProfile</code>), command interval (<code>g_commandInterval</code>), stopping the test at the first error, capturing screenshots during the test, etc.</p> </li> </ol> <p>The logical parameters of the test can be configured in the Spira Dashboard on the parameters tab.</p> <p>To set the runtime environment parameters, you can click the button in the <code>Choose Test Case</code> to play selector dialog:</p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#framework-development-workflow","title":"Framework Development Workflow","text":"<p>When embarking on the creation of your first test framework, it's natural to wonder where to begin. How can you ensure that you plan ahead and leverage the full benefits of test frameworks, such as data and logic separation, page objects, and flexible configurations, without the need for extensive rework?</p> <p>If you already have experience creating frameworks in Rapise, you likely have a template and established procedure. However, if you're still learning, we recommend following the workflow outlined below.</p>"},{"location":"Guide/Frameworks/frameworks/#step-one-test-cases","title":"Step One: Test Cases","text":"<p>Start by creating a new framework and implementing a selection of test cases. It's crucial to choose the right test cases at this stage. Avoid overly complex or time-consuming ones, as some test cases can be as substantial as the framework itself. It's wise to postpone their implementation to later stages. Begin by implementing a set of 2-5 small test cases. This approach will yield quick results that you can demonstrate and help you plan your next steps effectively.</p>"},{"location":"Guide/Frameworks/frameworks/#step-two-regular-runs","title":"Step Two: Regular Runs","text":"<p>The sooner you establish regular, automated test runs, the better. You don't need to wait until you have an extensive suite of test cases; even running 1-2 tests regularly, such as nightly runs, is sufficient. By doing so, you can gather valuable statistics about the reliability of your tests right from the start. For instance, you may discover that a particular test case occasionally encounters intermittent issues and fails 1 time out of 10. Identifying these patterns early on and accumulating a history of such occurrences increases the likelihood of pinpointing reliability issues and improving your test case.</p> <p>Organize regular test runs by saving your framework in Spira and setting up test runs in the Spira Dashboard.</p>"},{"location":"Guide/Frameworks/frameworks/#step-three-page-objects","title":"Step Three: Page Objects","text":"<p>Analyze the implemented test cases to identify common patterns or actions that occur repeatedly. You will likely find scenarios such as:</p> <ol> <li> <p>Running the application at the start and closing it at the end in multiple test cases.</p> </li> <li> <p>Logging into the application in several test cases.</p> </li> <li> <p>Navigating to specific forms or pages within the application in multiple test cases.</p> </li> <li> <p>Many pages/dialogs in your application have same type of grid and you need to click on the row in such grid time after time.</p> </li> </ol> <p>These are typical examples, but there may be other recurring patterns in your specific case. If you observe any such patterns, it's time to create a Page Object. This object will encapsulate the necessary steps, such as DoLaunch, DoLogin, and DoClose as well as DoClickRow. You can then modify your test cases to utilize the new Page Object, simplifying their structure and enhancing maintainability.</p>"},{"location":"Guide/Frameworks/frameworks/#step-four-parameters-and-configurations","title":"Step Four: Parameters and Configurations","text":"<p>As you continue developing your framework and adding more test cases, pay attention to the need for configurable parameters. In some cases, applications may have different variants that vary in initial URLs or login parameters. To accommodate these variations, consider defining parameters for each test case launch. The parameters editor can be used to set these parameters, allowing your framework to become more flexible and adaptable.</p>"},{"location":"Guide/Frameworks/frameworks/#step-nnnn-whats-next","title":"Step NNNN: What's Next","text":"<p>As your framework grows in complexity, you will encounter new challenges and opportunities for improvement. Here are some additional features that you might find useful:</p> <ul> <li> <p>Dropdowns for more versatile parameter options.</p> </li> <li> <p>Data Driven Testing for executing tests with different input data sets.</p> </li> <li> <p>Git Integration for version control and collaboration.</p> </li> <li> <p>Parallel Execution for faster test execution across multiple environments.</p> </li> </ul>"},{"location":"Guide/Frameworks/frameworks/#navigation-system","title":"Navigation System","text":"<p>Test cases can be easily accessed through the Object Tree or the Spira Dashboard.</p> <p>Object repositories are organized hierarchically within test cases and Page Objects. If you're looking for a specific object, you can use the Object Filter to quickly locate it.</p> <p>To share an object repository, simply assign the <code>shared</code> tag to the corresponding <code>Objects.js</code> file in the Files Tree.</p> <p>You can quickly navigate to the definition of any function or Page Object method in RVL or script mode by pressing the F12 key.</p> <p>Common functions and variables are displayed in the object tree for easy reference:</p> <p></p> <p>The structure of each RVL file is also visible, allowing you to quickly locate specific lines of code.</p> <p>Rapise provides a global find and replace functionality, accessible through the <code>Edit &gt; Find in Files</code> menu or by using the shortcut Shift+Ctrl+F.</p>"},{"location":"Guide/Frameworks/frameworks/#data-script-and-configuration-files","title":"Data, Script, and Configuration Files","text":"<p>To easily access data, script, and configuration files, you can find them within the Shared node in the Object Tree. Shared <code>.js</code> files are automatically loaded when any test case within the framework is launched. This allows you to use functions or variables defined in the shared file throughout the entire framework.</p>"},{"location":"Guide/Frameworks/frameworks/#integration-with-test-management","title":"Integration with Test Management","text":"<p>In order to streamline your test management process, you can utilize the integration with the Spira Dashboard. Within the dashboard, you have the ability to define test sets and configurations for your tests.</p> <p>We highly recommend using Spira for comprehensive test management. By leveraging Spira, you can easily deploy your test sets with a single click using the Sync to Spira feature. This integration provides you with access to essential test management functionalities, including:</p> <ol> <li> <p>Scheduled or nightly test runs.</p> </li> <li> <p>Test execution history tracking.</p> </li> <li> <p>Parallel execution capabilities.</p> </li> </ol>"},{"location":"Guide/Frameworks/frameworks/#collaboration-and-distributed-development","title":"Collaboration and Distributed Development","text":"<p>When working in a small team of 1-3 members, integrating with Spira is an excellent solution. However, for larger teams, a combination of Spira and Git may be more suitable.</p> <p>Since Rapise 8, we have enhanced the integration with Diff/Merge tools, which greatly facilitates distributed development. This means that even if you and another developer make changes to the same file or test, the outcomes of your work are not lost, and you can easily merge them together.</p>"},{"location":"Guide/Frameworks/frameworks/#maintenance","title":"Maintenance","text":"<p>Rapise provides several features that facilitate quick and convenient support and correction of test case logic:</p> <ol> <li> <p>Re-attaching to the application: If the application is already running, Rapise can attach to it and execute the necessary actions.</p> </li> <li> <p>Test run report with error location: The test run report includes the specific location where an error occurred, making it easier to identify and troubleshoot issues.</p> </li> <li> <p>Stop on error: This option allows you to configure the test to stop at the first encountered error. It enables you to analyze the application's state and determine if any changes are causing the error.</p> </li> <li> <p>Running individual test cases: You can execute a specific test case independently for focused testing or troubleshooting.</p> </li> <li> <p>Running individual RVL sheets: It is possible to run a specific RVL sheet within a test case, allowing targeted testing of particular functionality.</p> </li> <li> <p>Running a specific area in the RVL sheet: You can execute a selected portion of the RVL sheet, enabling precise testing of specific scenarios.</p> </li> <li> <p>Running a single Page Object action: You have the flexibility to execute a single action within a Page Object, allowing isolated testing and debugging.</p> </li> <li> <p>Running a part of a Page Object action: Similar to running a specific area in the RVL sheet, this feature enables you to execute a specific part of an action for granular testing.</p> </li> <li> <p>Flash and Relearn: These features assist in analyzing and fixing changed or problematic objects in the repository by refreshing their recognition and learning.</p> </li> <li> <p>Web Spy with maintenance mode: Web Spy provides a maintenance mode that helps efficiently fix multiple objects in the repository simultaneously.</p> </li> <li> <p>Shared object repositories: When a commonly used object's location changes across multiple test cases, it is easier to update it when it is part of a shared repository.</p> </li> <li> <p>Page Objects with shared actions: By using Page Objects with shared actions, you can make updates to a single Page Object to resolve issues in multiple test cases that utilize it.</p> </li> </ol>"},{"location":"Guide/Frameworks/frameworks/#mixed-mode-tests","title":"Mixed Mode Tests","text":"<p>Mixed mode tests, also known as cross-application testing, involve the testing of multiple applications or systems simultaneously. This form of testing focuses on verifying the interactions and interoperability between different software applications.</p> <p>In mixed mode tests, the primary objective is to ensure the proper behavior and smooth flow of data between interconnected applications or systems. This type of testing is commonly employed in scenarios where various software components need to communicate and exchange data. Examples include testing web interfaces, desktop interfaces, web services, APIs, and distributed systems.</p> <p>Rapise provides the capability to connect different libraries for recording and playing tests. You can record tests that involve different types of applications either all at once or in separate parts.</p>"},{"location":"Guide/Frameworks/frameworks/#testing-framework-contents","title":"Testing Framework Contents","text":""},{"location":"Guide/Frameworks/frameworks/#test-cases","title":"Test Cases","text":"<p>Each testing framework is a collection of Test Cases. Each test case may have its own object repository. Each test case may call Page Objects and other test cases via <code>RVL.DoInvokeTest</code>. Each test case may have its own Web Service/API calls.</p>"},{"location":"Guide/Frameworks/frameworks/#page-objects","title":"Page Objects","text":"<p>It is convenient to put the logic and objects common for specific testing framework into Page Objects.</p>"},{"location":"Guide/Frameworks/frameworks/#shared-files-and-repositories","title":"Shared Files and Repositories","text":"<p>Configuration, data, common functions, objects - multiple assets specific to a testing framework.</p>"},{"location":"Guide/Frameworks/frameworks/#parameters","title":"Parameters","text":"<p>Parameters and configurations required for flexibility of the testing framework.</p>"},{"location":"Guide/Frameworks/frameworks/#test-sets","title":"Test Sets","text":"<p>Spira Dashboard helps with all essential test management activities: management and execution of test sets. Test set helps grouping the test cases using different criteria for different purposes.</p>"},{"location":"Guide/Frameworks/frameworks/#testing-framework-common-actions","title":"Testing Framework Common Actions","text":""},{"location":"Guide/Frameworks/frameworks/#creating-a-new-testing-framework","title":"Creating a New Testing Framework","text":"<p>To create a new testing framework, follow these steps:</p> <ol> <li>Go to File &gt; Create New &gt; Test Automation Framework.</li> <li>Provide a name for your framework in the Name field.</li> <li>Select the folder where you want to create the framework. For now, you can choose to keep it in your working folder. Later, you can link it to Spira (and possibly Git) if needed.</li> <li>Choose the primary type of test for your framework. If your application is web-based, select the Web option. If it is desktop or mobile-based, choose the corresponding option. If your application consists of multiple parts (e.g., web, desktop, some mobile, and API), you can choose any option. The primary type selection is for convenience and can be modified later if necessary.</li> </ol> <p></p>"},{"location":"Guide/Frameworks/frameworks/#creating-a-test-case","title":"Creating a Test Case","text":"<p>There are two methods to create a new test case:</p> <ol> <li>Method 1: Use the main menu option File/Add To Framework/Test Case.</li> </ol> <p></p> <ol> <li>Method 2: Use the context menu by right-clicking on the Test Cases root node or a test case folder node.</li> </ol> <p></p> <p></p> <p>After selecting one of these methods, a Create New Test Case dialog will appear where you can specify the name and folder for the test case.</p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#test-case-naming","title":"Test Case Naming","text":"<p>Test case naming can vary based on personal preference and project requirements. Some people prefer shorter names for test cases and organize them into folders, such as Modules/Invoices/Create. Others prefer longer, more descriptive names, like Modules/Invoices/Create New Invoice With Single Item.</p> <p>Rapise supports both approaches, and the choice of naming convention can affect how you refer to test cases within your scripts, specifically when using <code>RVL.DoPlayTest</code> function.</p> <p>When using the shorter naming convention, you need to refer to the test case by its full path:</p> <pre><code>RVL.DoPlayTest('%WORKDIR%/Test Cases/Modules/Invoices/Create/Test.sstest')\n</code></pre> <p>However, with longer, more descriptive names, you can reference the test case by only using the last part of the name, assuming it is unique:</p> <pre><code>RVL.DoPlayTest('Create New Invoice With Single Item')\n</code></pre> <p>It's important to note that when dragging and dropping a test case into the RVL editor, the generated call may vary depending on whether the ++Shift++ key is pressed or not.</p> <p>Without pressing Shift key:</p> <p></p> <p>With ++Shift++ key pressed:</p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#renaming-test-cases","title":"Renaming Test Cases","text":"<p>To rename a test case in Rapise, you can use the <code>Rename</code> option available for each test case. Simply right-click on the test case and select the <code>Rename</code> option.</p> <p></p> <p>Renaming a test case will affect how it is presented in the Test Cases tree. It will also change the name by which you can reference the test case when calling it using <code>RVL.DoPlayTest</code> by name.</p> <p>It's important to note that renaming a test case does not change any file or folder names. Therefore, you may notice that the paths to the test case remain the same even after renaming:</p> <p></p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#moving-test-cases","title":"Moving Test Cases","text":"<p>To move a test case in Rapise, you have the option to move it into an existing folder or into a new folder.</p> <p>The simplest way to move a test case is by using drag and drop. Just click and hold the test case, then drag it to the desired location in the test case tree.</p> <p></p> <p>Alternatively, you can use the context menu to move a test case. Right-click on the test case you want to move and select the Move option. From there, you can choose an existing folder or create a new folder to move the test case into.</p> <p></p>"},{"location":"Guide/Frameworks/frameworks/#importing-test-cases","title":"Importing Test Cases","text":"<p>Importing test cases can be beneficial when you have a standalone test that you want to integrate into your framework or when you want to import a test case from another framework.</p> <p>However, there is a limitation to keep in mind. The imported test case should not contain embedded sub-tests or function as a framework itself.</p> <p>To import a test case, you have two options:</p> <ol> <li>Import into a specific folder: Right-click on the folder where you want to import the test case, then select the \"Import Test Case\" option from the context menu.</li> </ol> <p></p> <ol> <li>Import into the root: Go to the main menu and navigate to File &gt; Add to Framework &gt; Import External Test Case. This will import the test case into the root of your framework.</li> </ol> <p></p>"},{"location":"Guide/Frameworks/frameworks/#importing-page-objects-modules","title":"Importing Page Objects / Modules","text":"<p>Importing a Page Object or module follows a similar process to importing a Test Case. You have two options to import them:</p> <ol> <li> <p>Import from the main menu: Go to File &gt; Add to Framework &gt; Import External Module / Page Object. This option allows you to import a Page Object or module into your framework.</p> </li> <li> <p>Import from the context menu: Right-click on the Modules / Pages node in the Object Tree, then select the \"Import External Module / Page Object\" option. This allows you to import a Page Object or module directly into the designated folder.</p> </li> </ol>"},{"location":"Guide/Frameworks/frameworks/#copying-moving-repository-objects","title":"Copying / Moving Repository Objects","text":"<p>There are situations where you may need to transfer repository objects between test cases or from a Test Case to a Page Object. To accomplish this, you can use the Object Manager feature in Rapise. Here's how:</p> <ol> <li> <p>Right-click on the <code>[Objects]</code> node in the Object Tree.</p> </li> <li> <p>From the context menu, select the option to launch the Object Manager.</p> </li> </ol> <p></p> <p>The Object Manager provides a convenient interface for copying or moving repository objects between different locations within your framework.</p>"},{"location":"Guide/Frameworks/frameworks/#defining-global-functions","title":"Defining Global Functions","text":"<p>To make a function or variable globally accessible across multiple test cases or modules, you can define them in the <code>Common.js</code> file or any other <code>.js</code> file located in the <code>Shared</code> node. These shared functions and variables can be accessed from any part of your framework.</p> <p>In the object tree, you can find the shared functions and variables under the <code>Functions</code> and <code>Variables</code> nodes respectively.</p>"},{"location":"Guide/Frameworks/frameworks/#defining-local-functions","title":"Defining Local Functions","text":"<p>If you need to define a function or variable that is specific to a particular test case, you can do so in the Test Case <code>User</code> file. To access the User file, you can either click on View/User or use the User button on the toolbar:</p> <p></p> <p>By defining functions locally in the User file, they will be accessible only within that specific test case.</p>"},{"location":"Guide/Frameworks/frameworks/#global-objects-and-test-cases","title":"Global Objects and Test Cases","text":"<p>The contents of the Global Object node can vary depending on the selected test case or Module/Page Object. The available objects may change based on the specific technology or context of the test case.</p> <p>For example, if you have a test case named <code>Desktop Calc</code> that uses desktop technology, and another test case named <code>Web Calc</code> that uses web technology, the Global Object node will display different objects depending on which test case you are editing. When editing the desktop test case, you may not see the Navigator object, but it will be displayed when editing the web test case.</p>"},{"location":"Guide/Frameworks/frameworks/#recording-test-cases-and-page-objects","title":"Recording Test Cases and Page Objects","text":"<p>The behavior of the toolbar's Record button depends on the currently selected file. Here's how it behaves in different scenarios:</p> <ol> <li> <p>If no file is selected and you click on Record in the toolbar, it will display the Select Test Case to Record dialog. This dialog will list only the test cases available in the framework.</p> </li> <li> <p>If you are currently editing a test case and click on Record, the same dialog will appear, but the currently edited test case will be pre-selected.</p> </li> <li> <p>If you are editing the code of a Page Object and press Record, it will show all test cases and the specific Page Object in the dialog. The Page Object will be pre-selected.</p> </li> </ol> <p></p>"},{"location":"Guide/Frameworks/frameworks/#running-a-specific-test-case","title":"Running a Specific Test Case","text":"<p>To run a whole test case, you have two options:</p> <ol> <li> <p>Click on the Play button on the toolbar.</p> </li> <li> <p>Click on the Play icon next to the test case.</p> </li> </ol> <p></p>"},{"location":"Guide/Frameworks/frameworks/#running-a-batch-of-test-cases","title":"Running a Batch of Test Cases","text":"<p>There are two ways to run a batch of test cases: locally and test set based.</p> <p>For local batch execution, you can create another test case that will call the required test cases one-by-one using the <code>RVL.DoPlayTest</code> function.</p> <p>In the following example, we have a test case called <code>!Full - Author Management</code>. The exclamation mark (!) at the beginning of the name ensures that it is shown first in its folder when sorted. This test case calls other test cases from a specific folder one-by-one. We have added them to the test case using <code>Shift</code>+Drag&amp;Drop, so they are called by their full names instead of their paths.</p> <p></p> <p>A limitation of this approach is that the overall status of the <code>!Full - Author Management</code> test case is displayed, but it doesn't reflect the status of the individual test cases it contains (such as <code>Create New Author</code>, <code>Edit Existing Author</code>, etc.). If you require a batch execution with detailed status and other test-management related features, it is recommended to consider running test sets using Spira Dashboard. This allows for better tracking of individual test case statuses and provides additional test management capabilities.</p>"},{"location":"Guide/Frameworks/frameworks/#running-test-sets-with-spira","title":"Running Test Sets with Spira","text":"<p>Use Spira Dashboard to define, configure, schedule and run test sets and to see execution history.</p>"},{"location":"Guide/Frameworks/frameworks/#legacy-frameworks","title":"Legacy Frameworks","text":"<p>Before the release of Rapise 8, the process of defining a test framework was not as streamlined. You can find more detailed information about it in the framework topic.</p>"},{"location":"Guide/Frameworks/pageobjects/","title":"Page Objects / Modules","text":"<p>The term Modules can be used as a synonym for Page Objects. The concept and benefits remain the same\u2014creating modular and reusable components that represent different pages or user interfaces of a web application.</p> <p>In the context of testing frameworks, a Page Object is a design pattern used to enhance the maintainability and reusability of automated tests, particularly in web application testing. It provides an object-oriented approach to represent the different pages or user interfaces of a web application.</p> <p>The main idea behind the Page Object pattern is to encapsulate the elements, actions, and behaviors of a web page within a dedicated module.</p> <p>Here are some key aspects and benefits of using Page Objects:</p> <ol> <li> <p>Abstraction of Web Elements: The Page Object encapsulates the object repository (such as buttons, text fields, dropdowns, etc.) present on a specific page. It provides a layer of abstraction, allowing tests to interact with the elements using intuitive methods rather than directly dealing with individual repository objects or HTML tags.</p> </li> <li> <p>Reusability and Maintainability: By separating the page-specific logic into Page Objects, the code becomes more modular and reusable. Changes in the application's user interface or functionality can be easily handled by updating the relevant Page Object class, rather than modifying the tests themselves.</p> </li> <li> <p>Improved Readability: Page Objects provide a higher-level representation of the application, making the tests more readable and easier to understand. Test code can be written in a more concise and declarative manner, enhancing collaboration between testers and developers.</p> </li> <li> <p>Centralized Locators: The Page Object pattern centralizes the locators or selectors used to identify web elements on a particular page. This reduces duplication and allows for easier maintenance if the locators change, as they can be updated in a single location within the Page Object class.</p> </li> </ol> <p>While the typical usage of Page Objects or modules in testing frameworks revolves around encapsulating individual web pages or user interfaces, they can also be expanded to encapsulate groups of functionality within an application. This allows for a more comprehensive and organized approach to testing, including tasks such as navigation through the application.</p> <p>In addition to representing a single page or UI element, a Page Object or module can be designed to encapsulate a logical grouping of related functionality within the application. This could include a set of pages that are interconnected or share a common purpose, or even a specific workflow or user journey across multiple pages.</p> <p>For example, consider an e-commerce application that consists of various pages such as a product listing page, product details page, shopping cart page, and checkout page. Instead of creating separate Page Objects for each individual page, a module could be created to encapsulate the entire shopping flow, including navigating between these pages and performing actions related to the shopping process (e.g., adding items to the cart, updating quantities, and completing the checkout).</p> <p>By encapsulating a group of functionality within a single module, the tests can focus on testing that specific area of the application or a complete workflow. This approach offers several advantages:</p> <ol> <li> <p>Improved Modularity: The encapsulation of related functionality within a module enhances code organization and modularity. It allows for a more cohesive representation of the application's features, making the tests easier to understand and maintain.</p> </li> <li> <p>Seamless Navigation: The module can provide methods or actions for navigating through different pages or steps within the application. This simplifies the test code by abstracting the navigation logic and makes it more readable and intuitive.</p> </li> <li> <p>Reusability: Since a module encapsulates a group of functionality, it can be reused across multiple tests or scenarios that involve the same set of features. This promotes code reusability, reduces duplication, and saves effort in maintaining similar test code in different places.</p> </li> <li> <p>Clearer Test Scenarios: By encapsulating related functionality within a module, test scenarios can be defined more clearly. It becomes easier to create tests that cover specific user journeys or workflows, making the test cases more meaningful and representative of real-world usage.</p> </li> </ol> <p>In summary, while Page Objects or Modules are commonly associated with encapsulating individual web pages, they can be expanded to encapsulate groups of functionality within an application. This approach enhances code organization, simplifies navigation, promotes reusability, and enables clearer test scenarios for comprehensive testing of various application features or workflows.</p>"},{"location":"Guide/Frameworks/pageobjects/#page-objects-vs-test-cases","title":"Page Objects vs Test Cases","text":"<p>What are the differences between Page Objects / Modules and Test Cases?</p> <ul> <li> <p>A Test Case typically has a single entry point, while a Page Object may have several action methods.</p> </li> <li> <p>Test Cases may have a single set of input parameters, whereas Page Objects may have a set of input parameters for each action.</p> </li> <li> <p>Page Object actions may return a value.</p> </li> <li> <p>Page Objects can be organized into modules.</p> </li> </ul>"},{"location":"Guide/Frameworks/pageobjects/#creating-a-page-object-module","title":"Creating a Page Object / Module","text":"<p>There are two ways of creating a Page Object (PO) or Module:</p> <ol> <li>Main menu:</li> <li> <p>Go to File &gt; Add to Framework &gt; Page Object / Module.    </p> </li> <li> <p>Context menu:</p> </li> <li>Right-click on the Page Objects / Modules node in the object tree.    </li> </ol>"},{"location":"Guide/Frameworks/pageobjects/#page-object-rvl-vs-js","title":"Page Object - RVL vs JS","text":"<p>Whenever you create a Page Object, you have two options: RVL mode or JavaScript mode.</p> <p>RVL is appropriate in most cases when the module mostly covers some plain scenarios - a set of interactions with the application.</p> <p>JavaScript may be handy in two cases:</p> <ol> <li> <p>Whenever you need something where scripting is more appropriate (write loops, use arrays, do some data and string manipulations). Or when you work with JSON data where JavaScript appears to be the most handy handler.</p> </li> <li> <p>Whenever you have some web service interactions. Web services usually include JSON data as payload/responses, so JavaScript is more useful.</p> </li> </ol> <p>In all other cases, choose RVL.</p>"},{"location":"Guide/Frameworks/pageobjects/#adding-page-object-actions","title":"Adding Page Object Actions","text":"<p>The method of adding an action for the object varies depending on the chosen language: RVL or JavaScript.</p>"},{"location":"Guide/Frameworks/pageobjects/#rvl-mode","title":"RVL Mode","text":"<p>When in RVL mode, adding a sheet creates a new action, with the exception of two specific sheets:</p> <ol> <li> <p>The <code>RVL</code> sheet, which is the default sheet. It is typically left empty in the Page Object or may contain an internal test executed via the Play this Sheet context menu.</p> </li> <li> <p>The <code>PageObject</code> sheet, which is the default sheet for the Page Object. It is intended to include a comment with a detailed description of the action, which will be displayed to the user.</p> </li> </ol> <p></p> <p>Any other sheet is considered an action. The action name should be alphanumeric, meaning it should not contain spaces and should start with a letter or an underscore.</p>"},{"location":"Guide/Frameworks/pageobjects/#javascript-mode","title":"JavaScript Mode","text":"<p>In JavaScript mode, a Page Object / Module is equivalent to a Global Object. All the syntax, naming conventions, and documentation information for a global object also apply to a Page Object in JavaScript Mode.</p> <p>The distinction between a global object and a Page Object lies in their usage and features. Typically, a global object encompasses various functionalities like PDF support, text manipulations, and other utilities. It does not involve an object repository or web services. On the other hand, a page object can include an object repository and is often specific to an application, representing its unique characteristics and functionality.</p>"},{"location":"Guide/Frameworks/pageobjects/#action-naming-and-reporting","title":"Action Naming and Reporting","text":"<p>The preferred name for an action is <code>DoAction</code>. When this name is used, the result of the action is checked and reflected in the report. Checking the result involves verifying if the return value is 0, <code>false</code>, or an empty string, indicating a failed action. The inclusion of the <code>Do</code> prefix ensures that the result is checked and a line about the action is included in the report.</p> <p>Alternatively, you can name the action simply as <code>Action</code>. In this case, the action will not be displayed in the report, although it may have a return value that will not be checked.</p> <p>It is common to have actions with names like <code>GetSmth</code> or <code>SetSmth</code>. These actions are meant to update or return a value but are not reflected in the report, similar to the behavior of <code>Action</code>.</p> <p>In certain situations, you may want to call a <code>DoAction</code> but ignore its output value and exclude it from the report. To achieve this, you can prefix the action name with an underscore, such as <code>_DoAction</code>, resulting in an empty execution report.</p>"},{"location":"Guide/Frameworks/pageobjects/#description-parameters-and-return-values","title":"Description, Parameters and Return Values","text":"<p>Defining parameters and returning values as well as documenting them is straight forward in JavaScript mode is same as for global objects</p> <p>When creating an action in RVL, it generates necessary placeholders:</p> <p></p> <p>Where:</p> <ol> <li>Is an action description. You may see it when choosing an action:</li> </ol> <p></p> <p>or when hovering over it in the tree:</p> <p></p> <ol> <li> <p>Parameters. Zero or more. All variable definitions appearing before <code>ReturnValue</code> variable assumed to be action parameters. Everything after <code>ReturnValue</code> are just internal variables needed for given action.</p> </li> <li> <p>Variable <code>ReturnValue</code>. May contain an action result (you may assign it through the course of the action)</p> </li> </ol>"},{"location":"Guide/Frameworks/pageobjects/#execution","title":"Execution","text":"<p>To call a Page Object, you can use <code>MyObject.DoAction</code> directly in both RVL and JavaScript modes.</p> <p> </p> <p>Alternatively, you can invoke a single action for the Page Object itself by using the context menu and selecting \"Invoke ActionName()\".</p> <p></p> <p>For RVL Modules, you can run any part of the module using standard RVL features such as Play Selection or Play this Sheet.</p>"},{"location":"Guide/Frameworks/pageobjects/#page-object-recording","title":"Page Object Recording","text":"<p>In RVL mode you do recording just like you do for usual test case with RVL.</p>"},{"location":"Guide/Frameworks/pageobjects/#page-object-and-web-service","title":"Page Object and Web Service","text":"<p>When incorporating a Web Service (<code>.soap</code> or <code>.rest</code>) into your Page Object, it is advisable to use JavaScript instead of RVL (Rapise Visual Language) for creating the Page Object.</p> <p>When generating a recorded script, it will be placed in the Page Object's <code>Main.js</code> file, which is not executed. Therefore, you will need to manually copy the generated script from <code>Main.js</code> and paste it into the appropriate action within the <code>&lt;PageObjectName&gt;.js</code> file.</p>"},{"location":"Guide/Frameworks/pageobjects/#importing-page-objects","title":"Importing Page Objects","text":"<p>In Rapise, you can import pre-built Page Objects from other frameworks.</p> <p></p> <p>Additionally, the Rapise team has created a collection of Page Objects that you can download and use.</p> <p>Useful Page Objects</p> <p>Starting with Rapise version 8.2 and later, importing any of these Useful Page Objects is just a few clicks away.</p> <p></p> <p>If you already have one of these Useful Page Objects installed and attempt to install it again, Rapise will check the version and, if a newer one is available on GitHub, it will offer you the option to upgrade.</p>"},{"location":"Guide/Frameworks/parameters/","title":"Test Framework Parameters","text":"<p>Important</p> <p>This section applies to the new Framework mode introduced in Rapise 8.0.</p> <p>In test automation projects, it is often necessary to parameterize test cases for various purposes. For instance, this could involve specifying different URLs for running tests in different environments (development, staging, production), or providing user credentials for logging into the system. Additionally, there might be a need to quickly modify playback speed, error handling, and screenshot settings for multiple test cases. In the Rapise 8.0 Framework mode, managing parameters is made simple and convenient, allowing easy creation and management of parameters, including the ability to run the same test case with different input data, such as filling a form with various values to create multiple records in a system database.</p> <p>In the upcoming sections, you will gain valuable insights into the process of defining parameters and configurations, as well as their application in test cases and test sets. If you're looking for concrete examples of parameter creation and usage, we highly recommend exploring this knowledge base article.</p>"},{"location":"Guide/Frameworks/parameters/#framework-parameters","title":"Framework Parameters","text":"<p>To manage framework level parameters and configurations navigate to the Spira Dashboard using main menu <code>View &gt; Spira Dashboard</code>. Then switch to <code>Parameters</code> page in the dashboard.</p> <p></p> <p>Note</p> <p>If you do not see <code>Parameters</code> link then the test opened in Rapise is not a Framework.</p> <p>The <code>Parameters</code> page contains two tables. One for parameters and another one for configurations. To add a parameter click <code>Add Parameter</code> button. It will bring up <code>Add Parameter</code> dialog.</p> <p></p> <p>Specify parameter name, type, default value and click <code>Create</code>. </p>"},{"location":"Guide/Frameworks/parameters/#supported-parameter-types","title":"Supported Parameter Types","text":"<ul> <li>boolean - simple boolean value, true or false.</li> <li>number - numeric value, integer or float.</li> <li>string - string value, e.g. URL or user name. </li> <li>password - masked (******) password string.</li> <li>select - dropdown with predefined choices.</li> <li>browser - the list of global and local browser profiles.</li> <li>mobile - the list of global and local mobile profiles.</li> <li>datacolumn - parameter to bind to a column in the data file.</li> </ul>"},{"location":"Guide/Frameworks/parameters/#single-select-parameter","title":"Single Select Parameter","text":"<p>If parameter type is set to <code>select</code> define the list of options. For this purpose use the popup menu.</p> <p></p> <p>You may add a new option, remove existing one or set specific option as a default one. Also using hamburger icon you may reorder the options.</p> <p>To make a choice for <code>Single Select Parameter</code> double click it in the <code>Parameters</code> table and click on the option you need.</p> <p></p>"},{"location":"Guide/Frameworks/parameters/#multiselect-parameter","title":"Multiselect Parameter","text":"<p>To turn <code>Single Select Parameter</code> into a <code>Multi Select Parameter</code> just set <code>Multiselect</code> checkbox.</p> <p></p> <p>To make choices for <code>Multiselect Parameter</code> double click it in the <code>Parameters</code> table, select options you need and click <code>Save</code> button.</p> <p></p> <p>Important</p> <p>The purpose of multiselect parameters is to run test cases included into a test set with all parameter value combinations. For example, if we have just one multiselect parameter <code>MP1</code> with selected options <code>MP1O1</code> and <code>MP1O2</code> then RapiseLauncher will run a test set twice, first time with <code>MP1=MP1O1</code> and second time with <code>MP1=MP1O2</code>. Another example. If we have <code>MP1</code> with selected values <code>[MP1O1, MP1O2]</code> and <code>MP2</code> with selected values <code>[MP2O1, MP2O2]</code> then RapiseLauncher will run a test set 4 times with values: <pre><code>MP1=MP1O1, MP2=MP1O1\nMP1=MP1O1, MP2=MP1O2\nMP1=MP1O2, MP2=MP1O1\nMP1=MP1O2, MP2=MP1O2\n</code></pre></p>"},{"location":"Guide/Frameworks/parameters/#browser-parameter","title":"Browser Parameter","text":"<p><code>Browser</code> parameter is a select or multiselect parameter with automatically calculated values. It's values are names of global and local browser profiles. If a framework contains a Web test case/module then <code>Browser</code> parameter is added automatically once you record anything into the Web test.</p> <p>To convert <code>Browser</code> parameter to a multiselect parameter right click it and choose <code>Edit Parameter...</code>. Set <code>Multiselect</code> checkbox and click <code>Update</code> button.</p> <p></p> <p>Explore this knowledge base article to learn how to run a test set on multiple browsers.</p>"},{"location":"Guide/Frameworks/parameters/#mobile-parameter","title":"Mobile Parameter","text":"<p><code>Mobile</code> parameter is a select or multiselect parameter with automatically calculated values. It's values are names of global and local mobile profiles. If a framework contains a Mobile test case/module then <code>Mobile</code> parameter is added automatically once you record anything into the Mobile test.</p> <p>To convert <code>Mobile</code> parameter to a multiselect parameter right click it and choose <code>Edit Parameter...</code>. Set <code>Multiselect</code> checkbox and click <code>Update</code> button.</p>"},{"location":"Guide/Frameworks/parameters/#datacolumn-parameter","title":"Datacolumn Parameter","text":"<p>To define a datacolumn parameter you need to have a data file. To add one click <code>Add Input Data File</code> button under the <code>Parameters</code> table.</p> <p></p> <p>A <code>Data.csv</code> will be added to <code>Lib\\LibFramework</code> folder of your framework. You may right click it and edit.</p> <p></p> <p>In the CSV editor you may add and remove columns as well as data rows.</p> <p></p> <p>Let's create a datacolumn parameter with name <code>Username</code>.</p> <p></p> <p>Double click it's value to choose from data file column names.</p> <p></p> <p>When a datacolumn parameter is bound to a column in a data file, you may observe a display of the initial data values on the right-hand side.</p> <p></p>"},{"location":"Guide/Frameworks/parameters/#data-file-parameter","title":"Data File Parameter","text":"<p>A framework may have just one <code>Data File</code> parameter. You can add it by clicking the <code>Add Input Data File</code> button under the <code>Parameters</code> table, and if it is not needed, you can remove it by right-clicking on the <code>Data File</code> parameter and selecting the <code>Remove Parameter</code> option from the menu.  When you add a <code>Data File</code> parameter, a <code>Data.csv</code> file is automatically generated in the <code>Shared</code> folder of the framework, and you can manually create additional data files in this folder if needed. To select the desired data file, double-click on the <code>Data File</code> parameter, and a dropdown menu will appear with all available data file names.</p> <p></p> <p>The purpose of the <code>Data File</code> parameter is to instruct RapiseLauncher to execute a test set multiple times, once for each data row in the selected data file. For instance, if there are two lines of data in the data file, the test set will be executed twice.</p> <p>Important</p> <p>It's important to note that the <code>Data File</code> parameter can be combined with other parameters such as multiselect and datacolumn parameters, allowing for more complex test configurations.</p> <p>Consider the following example. Suppose we have a data file with columns <code>C1</code> and <code>C2</code>, consisting of two data rows. </p> Data.csv<pre><code>C1      C2\n------------\nv11     v12\nv21     v22\n</code></pre> <p>Additionally, we have two datacolumn parameters, <code>DC1</code> and <code>DC2</code>, which are linked to columns <code>C1</code> and <code>C2</code>, respectively. We also have two multiselect parameters, <code>MP1</code> with selected values <code>[MP1O1, MP1O2]</code> and <code>MP2</code> with selected values <code>[MP2O1, MP2O2]</code>. If our test set is configured accordingly, RapiseLauncher will execute it 8 times with the following parameter values:</p> <pre><code>DC1=v11, DC2=v12, MP1=MP1O1, MP2=MP1O1\nDC1=v11, DC2=v12, MP1=MP1O1, MP2=MP1O2\nDC1=v11, DC2=v12, MP1=MP1O2, MP2=MP1O1\nDC1=v11, DC2=v12, MP1=MP1O2, MP2=MP1O2\nDC1=v21, DC2=v22, MP1=MP1O1, MP2=MP1O1\nDC1=v21, DC2=v22, MP1=MP1O1, MP2=MP1O2\nDC1=v21, DC2=v22, MP1=MP1O2, MP2=MP1O1\nDC1=v21, DC2=v22, MP1=MP1O2, MP2=MP1O2    \n</code></pre> <p>To explore a practical application of multiselect and datacolumn parameters, please refer to this knowledge base article for a real-life example.</p>"},{"location":"Guide/Frameworks/parameters/#builtin-parameters","title":"Builtin Parameters","text":"<p>Additionally, Rapise offers a collection of pre-defined parameters that can be added to the <code>Parameters</code> table. To access this feature, click on the <code>Play</code> button in the toolbar, and then select the <code>Parameters</code> button within the <code>Choose Test Case</code> dialog.</p> <p></p> <p>This action will bring up the <code>Choose Parameters</code> dialog.</p> <p></p> <p>In the <code>Choose Parameters</code> dialog, you can select the checkboxes corresponding to the parameters you wish to include in the <code>Parameters</code> table. If there are parameters that you do not require, simply uncheck their respective checkboxes to remove them from the table.</p>"},{"location":"Guide/Frameworks/parameters/#configurations","title":"Configurations","text":"<p>You have the flexibility to define multiple configurations within a framework. Each configuration represents a specific combination of parameter values. When you modify a parameter value in the <code>Parameters</code> table, it affects the currently selected configuration. </p> <p>For example, on the screenshot we change <code>Command Interval</code> parameter value for <code>Config 2</code> configuration.</p> <p></p> <p>These configurations can be assigned to a test set on the <code>Framework</code> page of the dashboard.</p> <p></p> <p></p> <p>During the execution of a test set using the RapiseLauncher, all test cases within that set inherit the parameter values defined in the assigned configuration. In cases where a parameter value is not explicitly assigned within a configuration, the default value is utilized during the test set execution.</p> <p>To easily identify parameter values that differ from the default, they are displayed in bold. This visual cue helps you quickly recognize any deviations from the default values.</p> <p></p> <p>Dive into this knowledge base article to explore practical scenarios that involve configurations.</p>"},{"location":"Guide/Frameworks/parameters/#reading-parameter-values","title":"Reading Parameter Values","text":"<p>In RVL just set <code>ParamType</code> to <code>testparam</code> and select a framework parameter from the dropdown.</p> <p></p> <p>In JavaScript use Tester.GetParam. Keep in mind that parameter names are case-sensitive.</p> <pre><code>    var username = Tester.GetParam(\"Username\");\n    Tester.Message(username);\n</code></pre>"},{"location":"Guide/Frameworks/parameters/#see-also","title":"See Also","text":"<ul> <li>Defining Test Case Parameters</li> <li>Passing Parameters<ul> <li>Passing Parameters for Test Run</li> <li>Passing Parameters Between Tests</li> </ul> </li> </ul>"},{"location":"Intro/ai/","title":"AI in Rapise","text":"<p>Rapise 8.2 harnesses the power of Generative AI to streamline and optimize your test automation workflows. Designed with flexibility and extensibility in mind, our platform allows you to leverage our AI features for your unique testing needs.</p>"},{"location":"Intro/ai/#key-benefits","title":"Key Benefits","text":"<ul> <li>Accelerated script development: Translate human-readable test scenarios into functional automation scripts rapidly, reducing development time and effort.</li> <li>Simplified script maintenance: AI-powered assistance helps maintain and update test scripts as your application evolves, ensuring test suite longevity.</li> <li>Synthetic test data generation: Generate realistic and diverse test data sets on demand, improving test coverage and effectiveness.</li> <li>Intelligent assistance: Both automation engineers and manual testers benefit from AI-powered guidance and support throughout the testing process.</li> </ul>"},{"location":"Intro/ai/#technical-highlights","title":"Technical Highlights","text":"<ul> <li>Flexible AI integration: Customize and extend AI features to match your specific testing requirements.</li> <li>Seamless collaboration: Bridge the gap between human testers and automation tools, fostering a more efficient and collaborative testing environment.</li> </ul>"},{"location":"Intro/ai/#read-the-docs","title":"Read the Docs","text":"<ul> <li>AI Command</li> <li>AI Dashboard</li> <li>AI Panel</li> </ul>"},{"location":"Intro/ai/#video-tutorials","title":"Video Tutorials","text":"<p>Explore Rapise AI video tutorials to see these features in action and start revolutionizing your test automation process today.</p> <ul> <li>Playlist</li> <li>Rapise AI 01 - API Key</li> <li>Rapise AI 02 - Chat and Manual Editing</li> <li>Rapise AI 03 - Thumb Up</li> <li>Rapise AI 04 - Run Manual via AI</li> <li>Rapise AI 05 - Validation</li> <li>Rapise AI 06 - Form Data and Vision</li> <li>Rapise AI 07 - More Data Rows</li> <li>Rapise AI 08 - Data for Negative Test</li> <li>Rapise AI 09 - SpiraTest Manual to AI</li> <li>Rapise AI 10 - Generate RVL Code to Fill a Form</li> </ul>"},{"location":"Intro/automation/","title":"How to Solve Typical Automation Issues","text":""},{"location":"Intro/automation/#object-is-not-found","title":"Object is Not Found","text":"<p>Q: I recorded a test, started playback and got <code>Object Not Found</code> message. What should I do?</p> <p>A: Don't panic! There are several common reasons why an object is not found during playback.</p>"},{"location":"Intro/automation/#reason-1-most-common","title":"Reason #1 (most common)","text":"<p>You are testing a web application and elements in this application use dynamics IDs that change on every page load.</p> <p>How to Fix</p> <ul> <li>Object Not Found - How to Fix (schema)</li> <li>Check that Rapise can find an object on screen</li> <li>Configure Web Recording with Web Application Profile</li> <li>Use WebSpy to build a better element Locator manually</li> <li>Turn On Self-Healing Locators</li> </ul>"},{"location":"Intro/automation/#reason-2","title":"Reason #2","text":"<p>You are testing a very slow application and the object is not yet available when it is needed.</p> <p>How to Fix</p> <ul> <li>Ways to slow down test execution</li> </ul>"},{"location":"Intro/automation/#execute-tests-fast-and-reliable","title":"Execute Tests Fast And Reliable","text":"<p>Let's talk about how to adjust an automated test to make it run fast and reliable.</p>"},{"location":"Intro/automation/#web-recorder-configuration","title":"Web Recorder Configuration","text":"<p>Rapise has a Web Recorder. When you start recording Rapise intercepts your keyboard and mouse and adds the UI elements you are interacting with to the Object Tree. For each such element Rapise generates an XPATH locator. Though it usually makes a great job generating XPATH locators for elements, default Web Recorder settings do not fit all Web Applications. For complex modern applications you may need to configure the Web Recorder to get the most out of it.</p>"},{"location":"Intro/ddt/","title":"Data-Driven Testing","text":"<p>Real power of automation comes from data-driven testing. Separation of data and test logic and ability to run same test with different input data let automated tests scale.</p> <ul> <li>Tutorial</li> <li>Data-Driven Testing (webinar)</li> <li>DDT Example (GitHub)</li> <li>Parameters and Configurations</li> </ul>"},{"location":"Intro/devops/","title":"How to Integrate Rapise into DevOps Pipeline","text":""},{"location":"Intro/devops/#spiratest-recommended","title":"SpiraTest (recommended)","text":"<p>For test management and execution we recommend to use SpiraTest. Check out the integration guide and demonstration video.</p>"},{"location":"Intro/devops/#microsoft-tools","title":"Microsoft Tools","text":"<p>If you use Azure DevOps or TFS we also have a solution:</p> <ul> <li>Azure DevOps integration v3 manual and video</li> <li>RapiseLauncher Extension for Azure DevOps</li> </ul> <p>Legacy Integrations:</p> <ul> <li>Azure DevOps integration v2 manual and video</li> <li>Visual Studio and Azure DevOps Integration v1 manual and video</li> </ul>"},{"location":"Intro/devops/#jenkins-and-all-others","title":"Jenkins (and all others)","text":"<p>Rapise has command line interface and produces test reports in XML and Text formats. This is the key for integration with other tools. Use Jenkins integration as an example.</p>"},{"location":"Intro/framework/","title":"How to Build a Test Framework with Rapise","text":"<p>Info</p> <p>In different parts of the documentation and in knowledge base articles we use term Single Test mode to refer to this kind of framework with a parent test and nested sub-tests.</p> <p>Need to call one test from another? Need to run many tests? Have a test plan? It is time to build a testing framework. Learn how to do it with Rapise.</p>"},{"location":"Intro/framework/#how-framework-tests-are-structured","title":"How Framework Tests Are Structured","text":"<p>The Framework in Rapise is a regular test (Framework Root) containing a number of Sub-Tests (Test Cases and Common Features)</p> <p></p> <p>Where Test Cases are final test scenarios and Common Features are parts that are re-used and shared between the test cases.</p> <p>When working with framework, the variable %WORKDIR% always points to the root test case. This helps to find all common assets and files. For example, we always know that we may call <code>Common Feature1.sstest</code> using path <code>%WORKDIR%\\Common Feature1\\Common Feature1.sstest</code>. So we may call it from any other test case, from other common feature, from library and so on.</p> <p>Also the same is true for accessing common config and data files. I.e.</p> <pre><code>Tester.SetConfigPath('%WORKDIR%\\\\Config.xlsx')\n</code></pre>"},{"location":"Intro/framework/#saving-a-framework-into-spira","title":"Saving a Framework into Spira","text":"<p>The value of framework is in its consistency. There is one important rule that must be followed when saving framework to Spira:</p> <p>Framework root must be saved first. You need to save it at least once before saving any sub-tests. This will make sure that correct directory structure is defined in Spira.</p> <p>Once you saved a root test to the Spira, all sub-tests always saved together with it, whenever you do it form the root or from any of sub-tests. Right after saving a root test case you have a framework and may start expanding it.</p>"},{"location":"Intro/framework/#saving-a-framework-into-git","title":"Saving a Framework into Git","text":"<p>If you plan to maintain your framework using Git for source control, please make sure to init git repository at framework root level or higher. Thus Rapise will be able to detect it.</p>"},{"location":"Intro/framework/#framework-navigation-root-test-parent-test-sub-tests","title":"Framework Navigation: Root Test, Parent Test, Sub-Tests","text":"<p>There is a number of features intended to help one switching between test and sub-tests.</p> <p>The <code>Files</code> view shows all nested sub-tests. You may open any of them by double-clicking on the <code>.sstest</code> node:</p> <p></p> <p>The test opens in the current Rapise instance. You may also open it in a new window using the Open in New Rapise Window... command from the  Context Menu.</p> <p>You may then switch back to parent test or framework root by using Test/Open Root ...... and Test/Open Parent ..... menu items.</p>"},{"location":"Intro/framework/#template-test-case-and-clone","title":"Template Test Case and Clone","text":"<p>Usual practice in Framework is to use the Clone feature to produce new sub-tests. So the template test is created and pre-configured (to contain right lib, functions and file references) and then replicated for each next cloned test case.</p> <p></p>"},{"location":"Intro/framework/#calling-other-tests","title":"Calling Other Tests","text":"<p>There is a number of ways to call one sub test from another. Usually the test representing a scenario calls another test representing common routine or shared step. It is possible to pass some parameters to the called sub-test.</p> <p>In most cases you may use Drag&amp;Drop from the Files view into text or RVL editor to generate a call statement.</p>"},{"location":"Intro/framework/#executing-full-test","title":"Executing Full Test","text":"<p>From RVL: RVL.DoPlayTest</p> <p>From JS: Global.DoInvokeTest</p>"},{"location":"Intro/framework/#execute-one-rvl-sheet-from-current-or-another-test-in-the-framework","title":"Execute One RVL Sheet from Current or Another Test in the Framework","text":"<p>From either RVL or JS:</p> <p>RVL.DoPlayScript</p> <p>RVL.DoPlaySheet</p>"},{"location":"Intro/framework/#parallel-test-execution","title":"Parallel Test Execution","text":"<p>From RVL: RVL.DoPlayTestParallel</p> <p>From JS: Global.DoInvokeTestParallel</p>"},{"location":"Intro/framework/#dropdownsxlsx","title":"Dropdowns.xlsx","text":"<p>Shared Libraries and Shared Functions more powerful with pre-defined dropdowns. For example, you may have a function <code>NavigateToModule</code> used across your framework and switching to an application module. Since we have fixed number of modules in the app (it may be a big number, but still fixed) we may define a dropdown list to make it easier for test creator to navigate without risk of doing a typo and without loss of time to find correct naming.</p> <p></p>"},{"location":"Intro/framework/#configxlsx","title":"Config.xlsx","text":"<p>There is a Config file, that may be used for further Global.GetProperty and Global.SetProperty. This is an easy way to read and store various input configuration data: logins, URLs as well as output data (i.e. Internal Invoice ID used in the subsequent test cases).</p> <p>It is also explained in this video.</p>"},{"location":"Intro/framework/#dataxlsx","title":"Data.xlsx","text":"<p>It is typical implement some test cases as data driven. And framework is a great place for storing the shared data files - usually <code>.xlsx</code> spreadsheets. Rapise has built in capabilities for creating and editing such spreadsheets.</p>"},{"location":"Intro/framework/#global-objects","title":"Global Objects","text":"<p>It is useful to have one or more application specific global objects, sharing functionality needed by majority of test cases in your framework. It may do anything, starting from login and navigation and up to string formatting or text validation.</p> <p></p>"},{"location":"Intro/framework/#libraries","title":"Libraries","text":"<p>One may define a custom library containing common functions, global objects or even rules for test playback, object learning and test recording.</p>"},{"location":"Intro/framework/#sharing-js-files","title":"Sharing JS Files","text":"<p>Simple way to have common shared logic is to have a common <code>User.js</code> file defining some functions.</p> <p>For more complex cases, you may have additional <code>.js</code> files and include them in tests.</p>"},{"location":"Intro/framework/#profiles","title":"Profiles","text":"<p>Local Web or Mobile Profiles makes it easier to configure the browsers for the whole framework.</p>"},{"location":"Intro/framework/#webappprofilejson","title":"WebAppProfile.json","text":"<p>For web tests the WebAppProfile may greatly improve the speed and quality of recording. The profile may be defined on the framework root and thus be effective when working on all the contained sub-tests.</p>"},{"location":"Intro/framework/#see-also","title":"See Also","text":"<ul> <li>Framework for Testing Web Applications with Rapise (video)</li> <li>Tests and Sub-Tests</li> <li>Passing Sub-Test Parameters (KB)</li> <li>Framework Example (GitHub)</li> <li>More Framework Examples (GitHub)</li> <li>Defining Global Objects</li> <li>RVL Parameter Dropdowns</li> </ul>"},{"location":"Intro/orientation/","title":"Know Your Way Around","text":""},{"location":"Intro/orientation/#basic-navigation","title":"Basic Navigation","text":"1 - Main Menu <p>Use main menu to create new tests, change test settings and global options. </p> 2 - Main Toolbar <p>Use the main toolbar to start recording and playback and to quickly switch between test components. </p> <ul> <li>Main opens main entry point of a test (<code>Main.rvl.xlsx</code> or <code>Main.js</code>).</li> <li>User opens <code>User.js</code> - place for custom JavaScript functions.</li> <li>RVL opens RVL spreadsheet.</li> </ul> 3 - RVL Columns <p>Most used RVL columns are <code>Object</code>, <code>Action</code> and <code>ParamValue</code>. Use them to modify and create new test steps. </p> 4 - Object in the Object Tree <p>The Object Tree contains objects captured during recording embedded into other assets making contents of the Testing Framework. </p> 5 - Object Tree and Files View <p>The Object Tree displays the testing framework objects. Switch to Files View to navigate through the files of the framework. </p> 6 - Object Properties <p>This pane displays the properties of a selected object. </p> 7 - Output View <p>Output view is a collection of tabs to display test execution log, JavaScript warnings and errors and search results. </p> 8 - Profile Dropdown <p>The dropdown allows to switch Browser, Selenium or Mobile profile. </p>"},{"location":"Intro/orientation/#rvl-popup-menu","title":"RVL Popup Menu","text":"<p>The popup menu is most frequently used to</p> Work with an object <ul> <li>Find an object in the Object Tree</li> <li>Flash the object - find and highlight it in the application.</li> <li>Show locator property of the object. E.g. XPath for Web tests.</li> <li>Rename the object and automatically update all references in RVL.</li> </ul> Play specific steps of a test <ul> <li>Play This Sheet - execute actions from the active sheet.</li> <li>Play Selection - execute selected range of actions only. Useful for tweaking tricky actions and checking the result immediately.</li> <li>Play from Here - start execution at selected line and proceed until the end. Useful to continue script from the point where it stopped.</li> </ul> Edit Rows <ul> <li>Insert/delete a row.</li> <li>Copy/paste rows</li> </ul> <p>See full list of menu items here.</p>"},{"location":"Intro/orientation/#object-popup-menu","title":"Object Popup Menu","text":"<p>The popup menu us most frequently used to Flash and Re-Learn an object.</p> <p></p> <p>See full list of menu items here.</p>"},{"location":"Intro/orientation/#see-also","title":"See Also","text":"<ul> <li>Main Menu and Toolbars</li> </ul>"},{"location":"Intro/training/","title":"Training","text":"<p>We can train your QA team to effectively use Rapise for UI test automation. If you are switching from manual testing it is a highly recommended option for you. Please contact sales@inflectra.com to arrange.</p> <p>Training may be a part of Rapise Quick-Start implementation package.</p>"},{"location":"Intro/training/#overview","title":"Overview","text":"<p>The proposed training is an interactive process. Our instructors both provide online sessions and give lab tasks to check the level of understanding of participants. </p> <p>The implementation of lab tasks by the participants requires them to have the necessary prerequisites (have a computer available, Rapise is installed and licensed on the computer, have access to training SpiraTest instance and have certain amount of time to attend sessions and complete lab tasks).</p> <p>We provide sessions via Zoom. The length of each session is about 1 hour. Each session starts from review of lab tasks assigned in the previous session and comments about any common issues. Also it contains a Q&amp;A section for questions asked in the previous session. Then at the end of the session there is another Q&amp;A section where instructors collect new questions: some questions are answered immediately and others are answered in the next session.</p> <p>We expect that participants deliver lab results at the end of the day following the day of a session and then the next day our instructors check the completed lab tasks. This process allows to have two sessions per week.</p>"},{"location":"Intro/training/#prerequisites","title":"Prerequisites","text":"<p>Each person attending training should have:</p> <ul> <li>Individual PC with Rapise installed</li> <li>Access to training SpiraTest instance</li> <li>Access to demo applications</li> </ul>"},{"location":"Intro/training/#sample-training-plan","title":"Sample Training Plan","text":"<p>We adjust training plans according to customer needs. Here is an example of such a plan.</p>"},{"location":"Intro/training/#session-1-rapise-basics","title":"Session 1: Rapise Basics","text":"<p>Topics</p> <ul> <li>Rapise IDE Basics</li> <li>Getting Help</li> <li>Report View</li> <li>Test Automation Tips &amp; Tricks</li> <li>Recording</li> <li>Execution</li> <li>Spira Integration Basics</li> </ul> <p>Lab Tasks</p> <p>Record and playback a simple test. Upload result to SpiraTest.</p>"},{"location":"Intro/training/#session-2-rapise-visual-language","title":"Session 2: Rapise Visual Language","text":"<p>Topics</p> <ul> <li>RVL</li> <li>Data-driven Testing</li> </ul> <p>Lab Tasks</p> <p>Implement a test scenario in RVL.</p>"},{"location":"Intro/training/#session-3-javascript-basics","title":"Session 3: JavaScript Basics","text":"<p>Topics</p> <ul> <li>JavaScript Basics</li> </ul> <p>Lab Tasks</p> <p>Write a function in JavaScript according to a specification.</p>"},{"location":"Intro/training/#session-4-cross-browser-testing","title":"Session 4: Cross-browser Testing","text":"<p>Topics</p> <ul> <li>Cross-browser Testing</li> <li>Web Testing</li> <li>Web Spy</li> <li>XPATH</li> </ul> <p>Lab Tasks</p> <p>Using WebSpy build and test XPATH expressions for specific elements on a given Web page.</p>"},{"location":"Intro/training/#session-5-spiratest-integration","title":"Session 5: SpiraTest Integration","text":"<p>Topics</p> <ul> <li>SpiraTest Integration</li> <li>Test Management in Spira</li> <li>RapiseLauncher</li> </ul> <p>Lab Tasks</p> <p>Save a test to SpiraTest and execute it via RapiseLauncher with passing configuration parameters from SpiraTest.</p>"},{"location":"Intro/training/#session-6-frameworks","title":"Session 6: Frameworks","text":"<p>Topics</p> <ul> <li>Sub-tests</li> <li>Invoke One Test from Another</li> <li>Custom Library</li> </ul> <p>Lab Tasks</p> <p>Implement a demo test case using features of the presented framework.</p>"},{"location":"Intro/training/#session-7-dynamics-365-for-sales","title":"Session 7: Dynamics 365 for Sales","text":"<p>Topics</p> <ul> <li>Recording Tips</li> <li>Launching Dynamics</li> <li>UI Controls Supported by Rapise</li> </ul> <p>Lab Tasks</p> <p>Implement a test case for demo Dynamics CRM instance.</p>"},{"location":"Intro/training/#session-8-javascript-in-rapise","title":"Session 8: JavaScript in Rapise","text":"<p>Topics</p> <ul> <li>How to write Custom Functions using Rapise API</li> </ul> <p>Lab Tasks</p> <p>Write a custom function interacting with Web elements on the page and using Rapise API.</p>"},{"location":"Intro/uitap/","title":"Playground","text":""},{"location":"Intro/uitap/#web-ui-test-automation-playground","title":"Web UI Test Automation Playground","text":"<p>If you are new to UI test automation then you may be interested in developing your skills using a  a collection of tasks that we created. It is a playground where everyone can try to solve typical technical problems of automation.</p> <p></p> <p>Check it out</p>"},{"location":"Intro/webinars/","title":"Webinars","text":"<p>For upcoming webinars please check the Events page on our company website.</p>"},{"location":"Intro/webinars/#series","title":"Series","text":""},{"location":"Intro/webinars/#season-2024","title":"Season 2024","text":"<ul> <li>Harness AI to Simplify Test Automation</li> <li>Rapise 8.2</li> <li>AI in Rapise(short videos, playlist)</li> </ul>"},{"location":"Intro/webinars/#season-2023","title":"Season 2023","text":"<ul> <li>Rapise 8.1</li> <li>Rapise 8.0</li> </ul>"},{"location":"Intro/webinars/#inflectra-ninja-sessions","title":"Inflectra Ninja Sessions","text":"<ul> <li>Running Salesforce Tests in Parallel in Rapise</li> <li>Automating File Upload in Web Applications With Rapise</li> <li>Typical Configuration Tasks for Selenium with Rapise - Chrome Profile</li> </ul>"},{"location":"Intro/webinars/#season-2022","title":"Season 2022","text":"<ul> <li>Rapise 7.4</li> <li>Rapise 7.3</li> <li>Rapise 7.2</li> <li>Using Big Data Analysis to Reduce Test Flakiness</li> </ul>"},{"location":"Intro/webinars/#season-2021","title":"Season 2021","text":"<ul> <li>Parallel Execution of Tests with Rapise &amp; SpiraTest</li> <li>Playing UFT-QTP Scripts with Rapise </li> <li>Testing OracleForms Applications with Rapise</li> <li>Mobile Testing in a Device Cloud with Rapise</li> <li>Behavior Driven Testing with Rapise and Cucumber JS</li> </ul>"},{"location":"Intro/webinars/#inflectracon-2020","title":"InflectraCon 2020","text":""},{"location":"Intro/webinars/#workshops","title":"Workshops","text":"<ul> <li>Playlist</li> <li>From Manual to Automated Testing</li> <li>Starting Your Automation Journey</li> <li>Framework for Testing Web Applications with Rapise</li> <li>Automating Web UI Testing</li> <li>Automating Desktop UI Testing (Part 1)</li> <li>Automating Desktop UI Testing (Part 2)</li> <li>Automating Desktop UI Testing (Part 3)</li> <li>Automating Mobile UI Testing</li> </ul>"},{"location":"Intro/webinars/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Playlist</li> <li>New Features in Rapise v6.6</li> <li>25 Tips and Tricks of Using Rapise</li> <li>Scriptless, Codeless, Visual</li> <li>How to Benefit From Self-Healing Locators</li> <li>Web Recorder Configuration in Rapise</li> </ul>"},{"location":"Intro/webinars/#test-automation-demystified","title":"Test Automation Demystified","text":"<p>Playlist</p> <ul> <li>Part 1: From Manual to Automated Testing</li> <li>Part 2: Is Application Ready for Test Automation?</li> <li>Part 3: Choosing A Test Automation Tool: 8 Features That Matter</li> <li>Part 4: Friends &amp; Foes of Software Test Automation</li> <li>Part 5: Codeless Test Automation</li> <li>Part 6: Scenarios, or Why Some Automation Projects Fail</li> <li>Part 7: AI In Test Automation</li> </ul>"},{"location":"Intro/webinars/#planet-test-automation","title":"Planet Test Automation","text":"<p>Playlist</p> <ul> <li>Part 1: Automating Web UI Testing</li> <li>Part 2: Automating Desktop UI Testing</li> <li>Part 3: Automating Mobile UI Testing</li> <li>Part 4: Automating REST/SOAP API Testing</li> <li>Part 5: Data-Driven Testing</li> </ul>"},{"location":"Intro/webinars/#ui-automation-101","title":"UI Automation 101","text":"<p>Playlist</p> <ul> <li>Working With Navigation &amp; Menus</li> <li>Tables, Grids And Trees</li> <li>Dropdown Controls, Date Pickers &amp; Sliders</li> <li>Little Known Ways To Leverage RVL</li> <li>5 Ways To Use Rapise Frameworks</li> </ul>"},{"location":"Intro/webinars/#testing-microsoft-dynamics","title":"Testing Microsoft Dynamics","text":"<p>Playlist</p> <ul> <li>How To Test MS Dynamics NAV Through The UI Like A Pro</li> <li>How To Test MS Dynamics AX Through The UI Like A Pro</li> <li>How To Test MS Dynamics 365 for Sales Through The UI Like A Pro</li> <li>How To Test MS Dynamics 365 for Finance &amp; Operations Through The UI</li> <li>How To Test MS Dynamics Unified Service Desk Through The UI</li> </ul>"},{"location":"Intro/webinars/#singles","title":"Singles","text":""},{"location":"Intro/webinars/#highlights","title":"Highlights","text":"<ul> <li>Rapise 8.2</li> <li>Rapise 8.1</li> <li>Rapise 8.0</li> <li>Rapise 7.4</li> <li>Rapise 7.3</li> <li>Rapise 7.2</li> <li>Rapise 7.1</li> <li>Rapise 7.0</li> <li>Rapise 6.7</li> <li>Rapise 6.6</li> <li>Rapise 6.4</li> <li>Rapise 6.3</li> <li>Rapise 6.2</li> <li>Rapise 6.1</li> </ul>"},{"location":"Intro/webinars/#introductions","title":"Introductions","text":"<ul> <li>Getting Started Playlist</li> <li>Using Rapise with SpiraTest</li> <li>Introduction To Powerful New Rapise 6</li> <li>Discover Test Automation With Rapise 6</li> <li>Codeless Test Automation - 10 Features Of Scriptless Test Automation Tools</li> </ul>"},{"location":"Libraries/ActionSequence/","title":"ActionSequence","text":"<p>This is a JavaScript wrapper for ActionSequence of Selenium .NET library. Use PointerInputDevice.CreateActionSequence to create an instance of ActionSequence. <pre><code>var sequence = p.CreateActionSequence(p);\n// where p is an instance of PointerInputDevice\n</code></pre></p>"},{"location":"Libraries/ActionSequence/#action-summary","title":"Action Summary","text":"Action Description AddAction Adds an interaction to the sequence."},{"location":"Libraries/ActionSequence/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ActionSequence/#addaction","title":"AddAction","text":"<p>Adds an interaction to the sequence. See WebDriver.CreatePointerInput.</p> <pre><code>sequence.AddAction(interaction);\n</code></pre> <p>Parameters:</p> Name Type Description interaction Interaction Interaction object returned by one of calls to PointerInputDevice. <p></p>"},{"location":"Libraries/Actions/","title":"Actions","text":"<p>This is a JavaScript wrapper for Actions of Selenium .NET library.</p>"},{"location":"Libraries/Actions/#action-summary","title":"Action Summary","text":"Action Description Build Builds the sequence of actions. Click Clicks the mouse on the specified element. ClickAndHold Clicks and holds the mouse button down on the specified element. ContextClick Right-clicks the mouse on the specified element. DoubleClick Double-clicks the mouse on the specified element. DragAndDrop Performs a drag-and-drop operation from one element to another. DragAndDropToOffset Performs a drag-and-drop operation on one element to a specified offset. KeyDown Sends a modifier key down message to the specified element in the browser. KeyUp Sends a modifier key up message to the specified element in the browser. MoveByOffset Moves the mouse to the specified offset of the last known mouse coordinates. MoveToElement Moves the mouse to the specified offset of the top-left corner of the specified element. Perform Performs the currently built action. Release Releases the mouse button on the specified element. SendKeys Sends a sequence of keystrokes to the specified element in the browser."},{"location":"Libraries/Actions/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Actions/#build","title":"Build","text":"<p>Builds the sequence of actions.</p> <pre><code>WebDriver.Actions().KeyDown(\"Shift\").Click(obj.element).KeyUp(\"Shift\").Build().Perform();\n</code></pre> <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#click","title":"Click","text":"<p>Clicks the mouse on the specified element.  If no element is specified clicks the mouse at the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().Click(obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element on which to click.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#clickandhold","title":"ClickAndHold","text":"<p>Clicks and holds the mouse button down on the specified element. If no element is specified clicks and holds the mouse button at the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().ClickAndHold(obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element on which to click and hold.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#contextclick","title":"ContextClick","text":"<p>Right-clicks the mouse on the specified element. If no element is specified right-clicks the mouse at the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().ContextClick(obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element on which to right-click.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#doubleclick","title":"DoubleClick","text":"<p>Double-clicks the mouse on the specified element. If no element is specified double-clicks the mouse at the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().DoubleClick(obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element on which to double-click.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#draganddrop","title":"DragAndDrop","text":"<p>Performs a drag-and-drop operation from one element to another.</p> <pre><code>WebDriver.Actions().DragAndDrop(obj.element,target.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description source WebElementWrapper The element on which the drag operation is started. target WebElementWrapper The element on which the drop is performed. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#draganddroptooffset","title":"DragAndDropToOffset","text":"<p>Performs a drag-and-drop operation on one element to a specified offset.</p> <pre><code>WebDriver.Actions().DragAndDropToOffset(obj.element, 100, 50).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description source WebElementWrapper The element on which the drag operation is started. offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#keydown","title":"KeyDown","text":"<p>Sends a modifier key down message to the specified element in the browser. If no element is specified sends a modifier key down message to the browser.</p> <pre><code>WebDriver.Actions().KeyDown(\"Shift\").Perform();\n</code></pre> <p>Parameters:</p> Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElementWrapper The element to which to send the key command.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#keyup","title":"KeyUp","text":"<p>Sends a modifier key up message to the specified element in the browser. If no element is specified sends a modifier key up message to the browser.</p> <pre><code>WebDriver.Actions().KeyUp(\"Shift\").Perform();\n</code></pre> <p>Parameters:</p> Name Type Description theKey string The key to be sent. Accepts \"Shift\", \"Control\" and \"Alt\". el WebElementWrapper The element to which to send the key command.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#movebyoffset","title":"MoveByOffset","text":"<p>Moves the mouse to the specified offset of the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().MoveByOffset(100,100).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description offsetX number The horizontal offset to which to move the mouse. offsetY number The vertical offset to which to move the mouse. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#movetoelement","title":"MoveToElement","text":"<p>Moves the mouse to the specified offset of the top-left corner of the specified element. If offset is not specified moves the mouse to the specified element.</p> <pre><code>WebDriver.Actions().MoveByOffset(obj.element,100,100).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element to which to move the mouse. offsetX number The horizontal offset to which to move the mouse.Optional. offsetY number The vertical offset to which to move the mouse.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#perform","title":"Perform","text":"<p>Performs the currently built action.</p> <pre><code>WebDriver.Actions().KeyDown(\"Alt\").DoubleClick(obj.element).KeyUp(\"Alt\").Perform();\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Actions/#release","title":"Release","text":"<p>Releases the mouse button on the specified element. If no element is specified releases the mouse button at the last known mouse coordinates.</p> <pre><code>WebDriver.Actions().Release(obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper The element on which to release the button.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p> <p> </p>"},{"location":"Libraries/Actions/#sendkeys","title":"SendKeys","text":"<p>Sends a sequence of keystrokes to the specified element in the browser. If no element is specified sends a sequence of keystrokes to the browser.</p> <pre><code>WebDriver.Actions().SendKeys(\"hello\",obj.element).Perform();\n</code></pre> <p>Parameters:</p> Name Type Description keysToSend string The keystrokes to send to the browser. el WebElementWrapper The element to which to send the keystrokes.Optional. <p>Returns:</p> <p>A self-reference.</p> <p></p>"},{"location":"Libraries/ActiveXObject/","title":"ActiveXObject","text":"<p>ActiveX Object.</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/ActiveXSftTreeRule/","title":"ActiveXSftTreeRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/AgGrid/","title":"AgGrid","text":"<p>This behavior pattern implements standard behavior for AgGrid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: AgGridBehavior</p>"},{"location":"Libraries/AgGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnId Internal ID of a column with a given name. GetColumnId ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnVisible Returns true if a column is visible on screen, otherwise - false. GetColumnVisible RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows"},{"location":"Libraries/AgGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickBottomCell Clicks floating bottom cell in the specified column. DoClickCell Clicks the specified cell. DoFilterByColumn Enters value into the column filter for specified column. DoFullText Returns text representation of the table. DoScrollBy Performs horizontal and vertical scrolling. DoScrollTo Scrolls to a given row, col. DoSetCheckbox Clicks floating bottom cell in the specified column."},{"location":"Libraries/AgGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AgGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeAgGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Getter Parameters:</p> Name Type Description headerIndex number Zero-based index of a header row. Optional. Default value is zero. <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeAgGrid').GetColumnCount(/**number*/ headerIndex)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#columnid","title":"ColumnId","text":"<p>Internal ID of a column with a given name. If the column is not available in the viewport returns empty string. The ID can be used instead of a column name in ClickCell.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnId</p> <pre><code>value = SeS('SomeAgGrid').GetColumnId(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name. If the column is not available in the viewport returns -1</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeAgGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeAgGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#columnvisible","title":"ColumnVisible","text":"<p>Returns true if a column is visible on screen, otherwise - false.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Index of a column. <p>Type: boolean</p> <p>Accessors: GetColumnVisible</p> <pre><code>value = SeS('SomeAgGrid').GetColumnVisible(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeAgGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeAgGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeAgGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/AgGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeAgGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n</code></pre>"},{"location":"Libraries/AgGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AgGrid/#doclickbottomcell","title":"DoClickBottomCell","text":"<p>Clicks floating bottom cell in the specified column.</p> <pre><code>SeS('SomeAgGrid').DoClickBottomCell(col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description col string | number Column name or zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within a cell. Default is center.Optional. yOffset number Y offset to click within a cell. Default is center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeAgGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#dofilterbycolumn","title":"DoFilterByColumn","text":"<p>Enters value into the column filter for specified column.</p> <pre><code>SeS('SomeAgGrid').DoFilterByColumn(col, value)\n</code></pre> <p>Parameters:</p> Name Type Description col string | number Column name or zero-based index of the column. value string Value to filter by. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeAgGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#doscrollby","title":"DoScrollBy","text":"<p>Performs horizontal and vertical scrolling.</p> <pre><code>SeS('SomeAgGrid').DoScrollBy(h, v, withArrows)\n</code></pre> <p>Parameters:</p> Name Type Description h number Number of horizontal scroll actions, positive - right, negative - left. v number Number of vertical scroll actions, positive - down, negative - up. withArrows boolean By default it is false, when set to true then scrolling is performed via arrow keys.Optional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#doscrollto","title":"DoScrollTo","text":"<p>Scrolls to a given row, col.</p> <pre><code>SeS('SomeAgGrid').DoScrollTo(row, col, left, up, rewind, useArrows)\n</code></pre> <p>Parameters:</p> Name Type Description row number Index of a row to make visible on screen. If row is -1 then no vertical scrolling is performed. col string Name of a column to make visible on screen. If col is empty or null then no horizontal scrolling is performed. left boolean By default it is false, when set to true then horizontal scrolling direction is left side.Optional, Default: \"false\". up boolean By default it is false, when set to true then vertical scrolling direction is up side.Optional, Default: \"false\". rewind boolean By default it is false, when set to true then before scrolling the grid is positioned to make top-left cell visible. May not work with some grids.Optional, Default: \"false\". useArrows boolean By default it is false, when set to true then horizontal scrolling is performed via arrow keys.Optional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/AgGrid/#dosetcheckbox","title":"DoSetCheckbox","text":"<p>Clicks floating bottom cell in the specified column.</p> <pre><code>SeS('SomeAgGrid').DoSetCheckbox(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Column name or zero-based index of the column. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Android/","title":"Android","text":"<p>Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/Android/#action-summary","title":"Action Summary","text":"Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoPressBack Presses Back button. DoPressHome Presses Home button. DoPressKeyCode Presses key with code. DoPressMenu Presses Menu button. DoScreenshot Makes screenshot of a device. DoStartActivity Starts activity. DoStartVideoRecording Starts video recording on a device. DoStopVideoRecording Stops video recording on a device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. SetContext Sets context."},{"location":"Libraries/Android/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Android/#doflick","title":"DoFlick","text":"<p>Flick action.</p> <pre><code>Android.DoFlick(endX, endY, startX, startY, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units)Optional. startY number y coordinate where swipe begins (in pixels or relative units)Optional. touchCount number how many fingers to swipe withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dogotourl","title":"DoGoToUrl","text":"<p>Opens URL in active browser.</p> <pre><code>Android.DoGoToUrl(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dopressback","title":"DoPressBack","text":"<p>Presses Back button.</p> <pre><code>Android.DoPressBack()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dopresshome","title":"DoPressHome","text":"<p>Presses Home button.</p> <pre><code>Android.DoPressHome()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dopresskeycode","title":"DoPressKeyCode","text":"<p>Presses key with code.</p> <pre><code>Android.DoPressKeyCode(keyCode)\n</code></pre> <p>Parameters:</p> Name Type Description keyCode number Key code: http://developer.android.com/reference/android/view/KeyEvent.html <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dopressmenu","title":"DoPressMenu","text":"<p>Presses Menu button.</p> <pre><code>Android.DoPressMenu()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#doscreenshot","title":"DoScreenshot","text":"<p>Makes screenshot of a device.</p> <pre><code>Android.DoScreenshot(txtLabel)\n</code></pre> <p>Parameters:</p> Name Type Description txtLabel string Label of a screenshot in the report.Optional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dostartactivity","title":"DoStartActivity","text":"<p>Starts activity.</p> <pre><code>Android.DoStartActivity(appPackage, appActivity)\n</code></pre> <p>Parameters:</p> Name Type Description appPackage string Package name. appActivity string Activity name. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dostartvideorecording","title":"DoStartVideoRecording","text":"<p>Starts video recording on a device.</p> <pre><code>Android.DoStartVideoRecording()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dostopvideorecording","title":"DoStopVideoRecording","text":"<p>Stops video recording on a device.</p> <pre><code>Android.DoStopVideoRecording()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#doswipe","title":"DoSwipe","text":"<p>Swipe action.</p> <pre><code>Android.DoSwipe(endX, endY, startX, startY, duration, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units)Optional. startY number y coordinate where swipe begins (in pixels or relative units)Optional. duration number time (in seconds) to spend performing the swipe/dragOptional. touchCount number how many fingers to swipe withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#dotap","title":"DoTap","text":"<p>Tap screen.</p> <pre><code>Android.DoTap(x, y, duration, tapCount, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description x number x coordinate to tap (in pixels or relative units)Optional. y number y coordinate to tap (in pixels or relative units)Optional. duration number how long (in seconds) to tapOptional. tapCount number how many times to tapOptional. touchCount number how many fingers to tap withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#getcapability","title":"GetCapability","text":"<p>Gets capability with specified name.</p> <pre><code>Android.GetCapability(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a capability. <p>Returns:</p> <p>Capability string.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#getcontext","title":"GetContext","text":"<p>Gets current context.</p> <pre><code>Android.GetContext()\n</code></pre> <p>Returns:</p> <p>Either NATIVE_APP or WEBVIEW_1.</p> <p></p> <p> </p>"},{"location":"Libraries/Android/#setcontext","title":"SetContext","text":"<p>Sets context.</p> <pre><code>Android.SetContext(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Either NATIVE_APP or WEBVIEW_1. <p></p>"},{"location":"Libraries/AndroidButton/","title":"AndroidButton","text":"<p>Android Button.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectButtonBehavior</p>"},{"location":"Libraries/AndroidCheckBox/","title":"AndroidCheckBox","text":"<p>Android CheckBox.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectCheckableBehavior</p>"},{"location":"Libraries/AndroidCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/AndroidCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/AndroidCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeAndroidCheckBox').GetChecked()\n\nSeS('SomeAndroidCheckBox').SetChecked(value)\n</code></pre>"},{"location":"Libraries/AndroidCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeAndroidCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidEditBox/","title":"AndroidEditBox","text":"<p>Android EditBox.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectEditTextBehavior</p>"},{"location":"Libraries/AndroidEditBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/AndroidEditBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/AndroidEditBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidEditBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeAndroidEditBox').GetText()\n\nSeS('SomeAndroidEditBox').SetText(value)\n</code></pre>"},{"location":"Libraries/AndroidEditBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidEditBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeAndroidEditBox').DoSetText(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidImageButton/","title":"AndroidImageButton","text":"<p>Android ImageButton.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectButtonBehavior</p>"},{"location":"Libraries/AndroidImageView/","title":"AndroidImageView","text":"<p>Android ImageView.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectImageViewBehavior</p>"},{"location":"Libraries/AndroidLabel/","title":"AndroidLabel","text":"<p>Android Label.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectLabelBehavior</p>"},{"location":"Libraries/AndroidLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/AndroidLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeAndroidLabel').GetText()\n</code></pre>"},{"location":"Libraries/AndroidListView/","title":"AndroidListView","text":"<p>Android ListView.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectListViewSelectableBehavior</p>"},{"location":"Libraries/AndroidListView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName"},{"location":"Libraries/AndroidListView/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item with the specified index."},{"location":"Libraries/AndroidListView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidListView/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeAndroidListView').GetItemIndexByName(name)\n</code></pre>"},{"location":"Libraries/AndroidListView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidListView/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item with the specified index.</p> <pre><code>SeS('SomeAndroidListView').DoSelectItem(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Item index. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidObject/","title":"AndroidObject","text":"<p>Android Object.</p> <p>Behavior Pattern: AndroidObjectGenericBehavior</p>"},{"location":"Libraries/AndroidObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName NextSibling <code>AndroidObject</code> for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent <code>AndroidObject</code> for the parent element. GetParent PrevSibling <code>AndroidObject</code> for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/AndroidObject/#action-summary","title":"Action Summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control if offset is not specified. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoLongPress Performs long press in the middle of the control if offset is not specified. DoPress Presses in the middle of the control if offset is not specified. DoSendKeys Send a text to the object in character-by-character mode."},{"location":"Libraries/AndroidObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidObject/#childat","title":"ChildAt","text":"<p>Child object at index.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the object to get. <p>Type: string</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeAndroidObject').GetChildAt(index)\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#childcount","title":"ChildCount","text":"<p>Number of child items.</p> <p>Type: number</p> <p>Accessors: GetChildCount</p> <pre><code>value = SeS('SomeAndroidObject').GetChildCount()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#class","title":"Class","text":"<p>Class name of the object.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeAndroidObject').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeAndroidObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#name","title":"Name","text":"<p>Name of the object.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeAndroidObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#nextsibling","title":"NextSibling","text":"<p><code>AndroidObject</code> for the next sibling element. Requires Rapise 6.6+</p> <p>Type: AndroidObject</p> <p>Accessors: GetNextSibling</p> <pre><code>value = SeS('SomeAndroidObject').GetNextSibling()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#objecttype","title":"ObjectType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetObjectType</p> <pre><code>value = SeS('SomeAndroidObject').GetObjectType()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#parent","title":"Parent","text":"<p><code>AndroidObject</code> for the parent element. Requires Rapise 6.6+</p> <p>Type: AndroidObject</p> <p>Accessors: GetParent</p> <pre><code>value = SeS('SomeAndroidObject').GetParent()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#prevsibling","title":"PrevSibling","text":"<p><code>AndroidObject</code> for the previous sibling element. Requires Rapise 6.6+</p> <p>Type: AndroidObject</p> <p>Accessors: GetPrevSibling</p> <pre><code>value = SeS('SomeAndroidObject').GetPrevSibling()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#property","title":"Property","text":"<p>Value of a named property of the object.</p> <p>Getter Parameters:</p> Name Type Description name string Property name. <p>Type: string</p> <p>Accessors: GetProperty</p> <pre><code>value = SeS('SomeAndroidObject').GetProperty(name)\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeAndroidObject').GetText()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeAndroidObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeAndroidObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/AndroidObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeAndroidObject').GetY()\n</code></pre>"},{"location":"Libraries/AndroidObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidObject/#doaction","title":"DoAction","text":"<p>Clicks in the middle of the control.</p> <pre><code>SeS('SomeAndroidObject').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#doclear","title":"DoClear","text":"<p>Clears the text of the object.</p> <pre><code>SeS('SomeAndroidObject').DoClear()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#doclick","title":"DoClick","text":"<p>Clicks in the middle of the control if offset is not specified. Clicking with offset requires Rapise 8.0+.</p> <pre><code>SeS('SomeAndroidObject').DoClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#doensurevisible","title":"DoEnsureVisible","text":"<p>Ensure that a child item with the specified text is visible on screen.</p> <pre><code>SeS('SomeAndroidObject').DoEnsureVisible(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to search for. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#dofindbyxpath","title":"DoFindByXPath","text":"<p>Finds an element by relative XPath expression. Requires Rapise 6.6+</p> <pre><code>SeS('SomeAndroidObject').DoFindByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Relative XPath expression. <p>Returns:</p> <p>AndroidObject: <code>AndroidObject</code> if success, <code>null</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#dolongpress","title":"DoLongPress","text":"<p>Performs long press in the middle of the control if offset is not specified. Requires Rapise 8.0+.</p> <pre><code>SeS('SomeAndroidObject').DoLongPress(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#dopress","title":"DoPress","text":"<p>Presses in the middle of the control if offset is not specified. Requires Rapise 8.0+.</p> <pre><code>SeS('SomeAndroidObject').DoPress(x, y, duration)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. duration number Duration of press action.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AndroidObject/#dosendkeys","title":"DoSendKeys","text":"<p>Send a text to the object in character-by-character mode.</p> <pre><code>SeS('SomeAndroidObject').DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string Text to type into the object. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidProgressBar/","title":"AndroidProgressBar","text":"<p>Android ProgressBar.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectProgressBehavior</p>"},{"location":"Libraries/AndroidProgressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue"},{"location":"Libraries/AndroidProgressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidProgressBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeAndroidProgressBar').GetValue()\n\nSeS('SomeAndroidProgressBar').SetValue(value)\n</code></pre>"},{"location":"Libraries/AndroidRadioButton/","title":"AndroidRadioButton","text":"<p>Android RadioButton.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectCheckableBehavior</p>"},{"location":"Libraries/AndroidRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/AndroidRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/AndroidRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeAndroidRadioButton').GetChecked()\n\nSeS('SomeAndroidRadioButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/AndroidRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeAndroidRadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidRatingBar/","title":"AndroidRatingBar","text":"<p>Android RatingBar.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectProgressBehavior</p>"},{"location":"Libraries/AndroidRatingBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue"},{"location":"Libraries/AndroidRatingBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidRatingBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeAndroidRatingBar').GetValue()\n\nSeS('SomeAndroidRatingBar').SetValue(value)\n</code></pre>"},{"location":"Libraries/AndroidSeekBar/","title":"AndroidSeekBar","text":"<p>Android SeekBar.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectProgressBehavior</p>"},{"location":"Libraries/AndroidSeekBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue"},{"location":"Libraries/AndroidSeekBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidSeekBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeAndroidSeekBar').GetValue()\n\nSeS('SomeAndroidSeekBar').SetValue(value)\n</code></pre>"},{"location":"Libraries/AndroidSpinner/","title":"AndroidSpinner","text":"<p>Android Spinner.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectSpinnerBehavior</p>"},{"location":"Libraries/AndroidSpinner/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item with the specified name."},{"location":"Libraries/AndroidSpinner/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidSpinner/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item with the specified name.</p> <pre><code>SeS('SomeAndroidSpinner').DoSelectItem(name)\n</code></pre> <p>Parameters:</p> Name Type Description name number Item name. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidSwitch/","title":"AndroidSwitch","text":"<p>Android Switch.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectCheckableBehavior</p>"},{"location":"Libraries/AndroidSwitch/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/AndroidSwitch/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/AndroidSwitch/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidSwitch/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeAndroidSwitch').GetChecked()\n\nSeS('SomeAndroidSwitch').SetChecked(value)\n</code></pre>"},{"location":"Libraries/AndroidSwitch/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidSwitch/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeAndroidSwitch').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AndroidToggleButton/","title":"AndroidToggleButton","text":"<p>Android ToggleButton.</p> <p>Extends AndroidObject</p> <p>Behavior Pattern: AndroidObjectCheckableBehavior</p>"},{"location":"Libraries/AndroidToggleButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/AndroidToggleButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/AndroidToggleButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AndroidToggleButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeAndroidToggleButton').GetChecked()\n\nSeS('SomeAndroidToggleButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/AndroidToggleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AndroidToggleButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeAndroidToggleButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AnimationControl/","title":"AnimationControl","text":"<p>Infragistics AnimationControl.</p> <p>UI element class: Infragistics.Win.Misc.CommonControls.AnimationControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraAnimationControlBehavior</p>"},{"location":"Libraries/AnimationControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter IsPlaying true if animation is playing, 'false' otherwise GetIsPlaying"},{"location":"Libraries/AnimationControl/#action-summary","title":"Action Summary","text":"Action Description DoPlay Plays the animation of this object. DoStop Stops the animation of this object."},{"location":"Libraries/AnimationControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/AnimationControl/#isplaying","title":"IsPlaying","text":"<p>true if animation is playing, 'false' otherwise</p> <p>Type: boolean</p> <p>Accessors: GetIsPlaying</p> <pre><code>value = SeS('SomeAnimationControl').GetIsPlaying()\n</code></pre>"},{"location":"Libraries/AnimationControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AnimationControl/#doplay","title":"DoPlay","text":"<p>Plays the animation of this object.</p> <pre><code>SeS('SomeAnimationControl').DoPlay()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AnimationControl/#dostop","title":"DoStop","text":"<p>Stops the animation of this object.</p> <pre><code>SeS('SomeAnimationControl').DoStop()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/AppiumCapabilities/","title":"AppiumCapabilities","text":"<p>This is a JavaScript wrapper for DesiredCapabilities of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver</p>"},{"location":"Libraries/AppiumCapabilities/#action-summary","title":"Action Summary","text":"Action Description GetCapability HasCapability SetCapability"},{"location":"Libraries/AppiumCapabilities/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AppiumCapabilities/#getcapability","title":"GetCapability","text":"<pre><code>AppiumDriver.CreateDesiredCapabilities().GetCapability(capability)\n</code></pre> <p>Parameters:</p> Name Type Description capability <p></p> <p> </p>"},{"location":"Libraries/AppiumCapabilities/#hascapability","title":"HasCapability","text":"<pre><code>AppiumDriver.CreateDesiredCapabilities().HasCapability(capability)\n</code></pre> <p>Parameters:</p> Name Type Description capability <p></p> <p> </p>"},{"location":"Libraries/AppiumCapabilities/#setcapability","title":"SetCapability","text":"<pre><code>AppiumDriver.CreateDesiredCapabilities().SetCapability(capability, capabilityValue)\n</code></pre> <p>Parameters:</p> Name Type Description capability capabilityValue <p></p>"},{"location":"Libraries/AppiumDriver/","title":"AppiumDriver","text":"<p>This is a JavaScript wrapper for AppiumDriver of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver</p>"},{"location":"Libraries/AppiumDriver/#action-summary","title":"Action Summary","text":"Action Description Actions Gets Actions object. ActivateApp Activates an application by it's ID. ActivateIMEEngine Activate the given IME on the device. BackgroundApp Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated. ClearSavedSession Clears saved Appium session to start a new one. ClearSessions Deletes active sessions on Appium server. Close Close the Browser and Dispose of WebDriver. CloseApp Close the application. CreateAppiumDriver Connects to a mobile target using given Appium uri and capabilities. CreateDesiredCapabilities CreateDriverForSession Connects to active Appium session with given URL and Id. CreatePointerInput Gets PointerInputDevice object. CreateTouchAction Gets TouchAction object. DeactiveIMEEngine Deactivate the currently Active IME Engine on the device. Dispose Dispose of WebDriver. DoSendKeys Sends keys to an active element. DumpSessions Prints information about active Appium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElementByAccessibilityId Search for an element using Accessibility ID. FindElementByAndroidUIAutomator Search for an element using UIAutomator selector. FindElementByClassName Finds the first element in the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element in the page that matches the ID supplied. FindElementByIosUIAutomation Search for an element using UIAutomation selector. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElementsByAccessibilityId Search for all elements matching Accessibility ID. FindElementsByAndroidUIAutomator Search for all elements using UIAutomator selector. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element in the page that matches the ID supplied. FindElementsByIosUIAutomation Search for all elements using UIAutomation selector. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetContext GetContexts GetCurrentActivity GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetIMEActiveEngine GetIMEAvailableEngines GetOrientation GetPageSource Gets the source of the page last loaded by the browser. GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. HideKeyboard Hide soft keyboard IgnoreUnimportantViews This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. InstallApp Install the given app onto the device. IsAppInstalled Check whether the specified app is installed on the device. IsIMEActive Check if IME is active. IsLocked Check whether the device is locked or not LaunchApp Launch the app-under-test on the device OpenNotifications Open Android notifications (Emulator only) PerformActions Performs W3C actions. PressKeyCode Press a particular key on Device PullFile Retrieve a file from the device's file system. PushFile Place a file onto the device in a particular place. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. RemoveApp Remove an app from the device ResetApp Reset the currently running app for this session SaveSession Saves session information for use by ReconnectSession. SeSFind Finds an element given it's locator string. SetContext Sets current context. SetOrientation Sets device orienataion. SetUrl Sets the URL the browser is currently displaying. ShakeDevice Perform a shake action on the device StartActivity Start an Android activity by providing package name and activity name StartRecordingScreen Starts video recording on a device. StopRecordingScreen Stops video recording on a device. ToggleAirplaneMode Toggle airplane mode on device ToggleLocationServices Switch the state of the location service ToggleWifi Switch the state of the WiFi service"},{"location":"Libraries/AppiumDriver/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AppiumDriver/#actions","title":"Actions","text":"<p>Gets Actions object.</p> <pre><code>AppiumDriver.Actions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#activateapp","title":"ActivateApp","text":"<p>Activates an application by it's ID.  Find iOS default application IDs here. For Android application ID is Package Name, e.g. com.android.chrome.</p> <pre><code>AppiumDriver.ActivateApp(appId)\n</code></pre> <p>Parameters:</p> Name Type Description appId string ID of an application to activate. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#activateimeengine","title":"ActivateIMEEngine","text":"<p>Activate the given IME on the device.</p> <pre><code>AppiumDriver.ActivateIMEEngine(imeEngine)\n</code></pre> <p>Parameters:</p> Name Type Description imeEngine string IME to activate <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#backgroundapp","title":"BackgroundApp","text":"<p>Send the currently active app to the background, and either return after a certain amount of time, or leave the app deactivated.</p> <pre><code>AppiumDriver.BackgroundApp(seconds)\n</code></pre> <p>Parameters:</p> Name Type Description seconds number Timeout value <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#clearsavedsession","title":"ClearSavedSession","text":"<p>Clears saved Appium session to start a new one. Requires Rapise 8.0+.</p> <pre><code>AppiumDriver.ClearSavedSession()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#clearsessions","title":"ClearSessions","text":"<p>Deletes active sessions on Appium server.</p> <pre><code>AppiumDriver.ClearSessions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#close","title":"Close","text":"<p>Close the Browser and Dispose of WebDriver.</p> <pre><code>AppiumDriver.Close()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#closeapp","title":"CloseApp","text":"<p>Close the application.</p> <pre><code>AppiumDriver.CloseApp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#createappiumdriver","title":"CreateAppiumDriver","text":"<p>Connects to a mobile target using given Appium uri and capabilities.</p> <pre><code>AppiumDriver.CreateAppiumDriver(uri, caps)\n</code></pre> <p>Parameters:</p> Name Type Description uri string Appium server URL. caps AppiumCapabilities DesiredCapabilities object with key/value pairs. <p>Returns:</p> <p>Driver object.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#createdesiredcapabilities","title":"CreateDesiredCapabilities","text":"<pre><code>AppiumDriver.CreateDesiredCapabilities()\n</code></pre> <p>Returns:</p> <p>AppiumCapabilities object.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#createdriverforsession","title":"CreateDriverForSession","text":"<p>Connects to active Appium session with given URL and Id.</p> <pre><code>AppiumDriver.CreateDriverForSession(addressOfRemoteServer, sessionId, suppressErrors)\n</code></pre> <p>Parameters:</p> Name Type Description addressOfRemoteServer string Appium server URL. sessionId string Id of the session to connect. suppressErrors boolean 'true' to suppress failures in the report, default 'false'.Optional, Default: \"false\". <p>Returns:</p> <p>true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#createpointerinput","title":"CreatePointerInput","text":"<p>Gets PointerInputDevice object. Requires Rapise 8.2+.</p> <pre><code>var element = AppiumDriver.FindElementByXPath(\"//*[@text='Login']\");\nvar p = AppiumDriver.CreatePointerInput(\"Touch\", \"finger\");\nvar sequence = p.CreateActionSequence(p);\nvar move = p.CreatePointerMoveElement(element, 0, 0, 0);\nvar actionPress = p.CreatePointerDown(\"Touch\");\nvar pause = p.CreatePause(50);\nvar actionRelease = p.CreatePointerUp(\"Touch\");\n\nsequence.AddAction(move);\nsequence.AddAction(actionPress);\nsequence.AddAction(pause);\nsequence.AddAction(actionRelease);\n\nAppiumDriver.PerformActions(sequence);\n</code></pre> <pre><code>AppiumDriver.CreatePointerInput(kind, name)\n</code></pre> <p>Parameters:</p> Name Type Description kind string Touch, Mouse or Pen. name string Name of the pointer device. Whatever you like. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#createtouchaction","title":"CreateTouchAction","text":"<p>Gets TouchAction object. Requires Rapise 8.0+.</p> <pre><code>AppiumDriver.CreateTouchAction()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#deactiveimeengine","title":"DeactiveIMEEngine","text":"<p>Deactivate the currently Active IME Engine on the device.</p> <pre><code>AppiumDriver.DeactiveIMEEngine()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#dispose","title":"Dispose","text":"<p>Dispose of WebDriver.</p> <pre><code>AppiumDriver.Dispose()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#dosendkeys","title":"DoSendKeys","text":"<p>Sends keys to an active element. Requires Rapise 8.1+.</p> <pre><code>AppiumDriver.DoSendKeys(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string Keys to send. Supports patterns like in Global.DoSendKeys. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#dumpsessions","title":"DumpSessions","text":"<p>Prints information about active Appium sessions to output.</p> <pre><code>AppiumDriver.DumpSessions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#executescript","title":"ExecuteScript","text":"<p>Executes JavaScript in the context of the currently selected frame or window.</p> <pre><code>AppiumDriver.ExecuteScript(script, args)\n</code></pre> <p>Parameters:</p> Name Type Description script string The JavaScript code to execute. args array The arguments to the script. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyaccessibilityid","title":"FindElementByAccessibilityId","text":"<p>Search for an element using Accessibility ID.</p> <pre><code>AppiumDriver.FindElementByAccessibilityId(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyandroiduiautomator","title":"FindElementByAndroidUIAutomator","text":"<p>Search for an element using UIAutomator selector.</p> <pre><code>AppiumDriver.FindElementByAndroidUIAutomator(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyclassname","title":"FindElementByClassName","text":"<p>Finds the first element in the page that matches the CSS Class supplied.</p> <pre><code>AppiumDriver.FindElementByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string CSS class name of the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbycssselector","title":"FindElementByCssSelector","text":"<p>Finds the first element matching the specified CSS selector.</p> <pre><code>AppiumDriver.FindElementByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyid","title":"FindElementById","text":"<p>Finds the first element in the page that matches the ID supplied.</p> <pre><code>AppiumDriver.FindElementById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyiosuiautomation","title":"FindElementByIosUIAutomation","text":"<p>Search for an element using UIAutomation selector.</p> <pre><code>AppiumDriver.FindElementByIosUIAutomation(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbylinktext","title":"FindElementByLinkText","text":"<p>Finds the first of elements that match the link text supplied.</p> <pre><code>AppiumDriver.FindElementByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText string Link text of element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyname","title":"FindElementByName","text":"<p>Finds the first of elements that match the name supplied.</p> <pre><code>AppiumDriver.FindElementByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbypartiallinktext","title":"FindElementByPartialLinkText","text":"<p>Finds the first of elements that match the part of the link text supplied.</p> <pre><code>AppiumDriver.FindElementByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbytagname","title":"FindElementByTagName","text":"<p>Finds the first of elements that match the DOM Tag supplied.</p> <pre><code>AppiumDriver.FindElementByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementbyxpath","title":"FindElementByXPath","text":"<p>Finds the first of elements that match the XPath supplied.</p> <pre><code>AppiumDriver.FindElementByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyaccessibilityid","title":"FindElementsByAccessibilityId","text":"<p>Search for all elements matching Accessibility ID.</p> <pre><code>AppiumDriver.FindElementsByAccessibilityId(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyandroiduiautomator","title":"FindElementsByAndroidUIAutomator","text":"<p>Search for all elements using UIAutomator selector.</p> <pre><code>AppiumDriver.FindElementsByAndroidUIAutomator(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyclassname","title":"FindElementsByClassName","text":"<p>Finds a list of elements that match the class name supplied.</p> <pre><code>AppiumDriver.FindElementsByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string class name of the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbycssselector","title":"FindElementsByCssSelector","text":"<p>Finds all elements matching the specified CSS selector.</p> <pre><code>AppiumDriver.FindElementsByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyid","title":"FindElementsById","text":"<p>Finds the first element in the page that matches the ID supplied.</p> <pre><code>AppiumDriver.FindElementsById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyiosuiautomation","title":"FindElementsByIosUIAutomation","text":"<p>Search for all elements using UIAutomation selector.</p> <pre><code>AppiumDriver.FindElementsByIosUIAutomation(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Element selector <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbylinktext","title":"FindElementsByLinkText","text":"<p>Finds a list of elements that match the link text supplied.</p> <pre><code>AppiumDriver.FindElementsByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText string Link text of element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyname","title":"FindElementsByName","text":"<p>Finds a list of elements that match the name supplied.</p> <pre><code>AppiumDriver.FindElementsByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbypartiallinktext","title":"FindElementsByPartialLinkText","text":"<p>Finds a list of elements that match the part of the link text supplied.</p> <pre><code>AppiumDriver.FindElementsByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbytagname","title":"FindElementsByTagName","text":"<p>Finds a list of elements that match the DOM Tag supplied.</p> <pre><code>AppiumDriver.FindElementsByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#findelementsbyxpath","title":"FindElementsByXPath","text":"<p>Finds a list of elements that match the XPath supplied.</p> <pre><code>AppiumDriver.FindElementsByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getaddressofremoteserver","title":"GetAddressOfRemoteServer","text":"<pre><code>AppiumDriver.GetAddressOfRemoteServer()\n</code></pre> <p>Returns:</p> <p>URL of the remote Appium server.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getcontext","title":"GetContext","text":"<pre><code>AppiumDriver.GetContext()\n</code></pre> <p>Returns:</p> <p>Current context (NATIVE_APP or WEBVIEW_*).</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getcontexts","title":"GetContexts","text":"<pre><code>AppiumDriver.GetContexts()\n</code></pre> <p>Returns:</p> <p>Array of available contexts for a hybrid application.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getcurrentactivity","title":"GetCurrentActivity","text":"<pre><code>AppiumDriver.GetCurrentActivity()\n</code></pre>"},{"location":"Libraries/AppiumDriver/#getcurrentwindowhandle","title":"GetCurrentWindowHandle","text":"<p>Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance.</p> <pre><code>AppiumDriver.GetCurrentWindowHandle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getimeactiveengine","title":"GetIMEActiveEngine","text":"<pre><code>AppiumDriver.GetIMEActiveEngine()\n</code></pre> <p>Returns:</p> <p>Currently active IME Engine on the device.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getimeavailableengines","title":"GetIMEAvailableEngines","text":"<pre><code>AppiumDriver.GetIMEAvailableEngines()\n</code></pre> <p>Returns:</p> <p>A list of IME engines available on the device.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getorientation","title":"GetOrientation","text":"<pre><code>AppiumDriver.GetOrientation()\n</code></pre> <p>Returns:</p> <p>Orientation of the device (0 - portrait, 1 - landscape).</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getpagesource","title":"GetPageSource","text":"<p>Gets the source of the page last loaded by the browser.</p> <pre><code>AppiumDriver.GetPageSource()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getsessionid","title":"GetSessionId","text":"<pre><code>AppiumDriver.GetSessionId()\n</code></pre> <p>Returns:</p> <p>Id of the current session.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#gettitle","title":"GetTitle","text":"<p>Gets the title of the current browser window.</p> <pre><code>AppiumDriver.GetTitle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#geturl","title":"GetUrl","text":"<p>Gets the URL the browser is currently displaying.</p> <pre><code>AppiumDriver.GetUrl()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#getwindowhandles","title":"GetWindowHandles","text":"<p>Gets the window handles of open browser windows.</p> <pre><code>AppiumDriver.GetWindowHandles()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#hidekeyboard","title":"HideKeyboard","text":"<p>Hide soft keyboard</p> <pre><code>AppiumDriver.HideKeyboard(strategy, key)\n</code></pre> <p>Parameters:</p> Name Type Description strategy string Hide keyboard strategy (optional, UIAutomation only). Available strategies - 'press', 'pressKey', 'swipeDown', 'tapOut', 'tapOutside', 'default'. key string KeyOptional. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#ignoreunimportantviews","title":"IgnoreUnimportantViews","text":"<p>This capability can speed up test execution, since Accessibility commands will run faster ignoring some elements. The ignored elements will not be findable.</p> <pre><code>AppiumDriver.IgnoreUnimportantViews(value)\n</code></pre> <p>Parameters:</p> Name Type Description value bool <code>true</code> to ignore. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#installapp","title":"InstallApp","text":"<p>Install the given app onto the device.</p> <pre><code>AppiumDriver.InstallApp(appPath)\n</code></pre> <p>Parameters:</p> Name Type Description appPath string Path of the app being installed <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#isappinstalled","title":"IsAppInstalled","text":"<p>Check whether the specified app is installed on the device.</p> <pre><code>AppiumDriver.IsAppInstalled(bundleId)\n</code></pre> <p>Parameters:</p> Name Type Description bundleId string iOS bundleID or Android package name <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#isimeactive","title":"IsIMEActive","text":"<p>Check if IME is active.</p> <pre><code>AppiumDriver.IsIMEActive()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#islocked","title":"IsLocked","text":"<p>Check whether the device is locked or not</p> <pre><code>AppiumDriver.IsLocked()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#launchapp","title":"LaunchApp","text":"<p>Launch the app-under-test on the device</p> <pre><code>AppiumDriver.LaunchApp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#opennotifications","title":"OpenNotifications","text":"<p>Open Android notifications (Emulator only)</p> <pre><code>AppiumDriver.OpenNotifications()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#performactions","title":"PerformActions","text":"<p>Performs W3C actions. Requires Rapise 8.2+. See CreatePointerInput for usage example.</p> <pre><code>AppiumDriver.PerformActions(sequence)\n</code></pre> <p>Parameters:</p> Name Type Description sequence ActionSequence Array of ActionSequence objects. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#presskeycode","title":"PressKeyCode","text":"<p>Press a particular key on Device</p> <pre><code>AppiumDriver.PressKeyCode(keyCode)\n</code></pre> <p>Parameters:</p> Name Type Description keyCode number Key code pressed on the device. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#pullfile","title":"PullFile","text":"<p>Retrieve a file from the device's file system.</p> <pre><code>AppiumDriver.PullFile(pathOnDevice)\n</code></pre> <p>Parameters:</p> Name Type Description pathOnDevice string Path on the device to pull file from <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#pushfile","title":"PushFile","text":"<p>Place a file onto the device in a particular place.</p> <pre><code>AppiumDriver.PushFile(pathOnDevice, base64Data)\n</code></pre> <p>Parameters:</p> Name Type Description pathOnDevice string Path to install the data to. base64Data string Contents of file in base64. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#quit","title":"Quit","text":"<p>Disconnects from the Browser.</p> <pre><code>AppiumDriver.Quit()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#reconnectsession","title":"ReconnectSession","text":"<p>Reads session information produced by SaveSession and connects to the mobile target.</p> <pre><code>AppiumDriver.ReconnectSession(autoCreate)\n</code></pre> <p>Parameters:</p> Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore.Optional, Default: \"false\". <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#removeapp","title":"RemoveApp","text":"<p>Remove an app from the device</p> <pre><code>AppiumDriver.RemoveApp(appId)\n</code></pre> <p>Parameters:</p> Name Type Description appId string The iOS App ID <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#resetapp","title":"ResetApp","text":"<p>Reset the currently running app for this session</p> <pre><code>AppiumDriver.ResetApp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#savesession","title":"SaveSession","text":"<p>Saves session information for use by ReconnectSession.</p> <pre><code>AppiumDriver.SaveSession()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#sesfind","title":"SeSFind","text":"<p>Finds an element given it's locator string. Requires Rapise 8.1+.</p> <pre><code>AppiumDriver.SeSFind(selector, objectType, selectorType, objectName)\n</code></pre> <p>Parameters:</p> Name Type Description selector string Selector query, format depends on a selector type. objectType string Type of an object: android, ios or web. Possible values: \"android\", \"ios\", \"web\"Optional, Default: \"web\". selectorType string Type of a selector: acc, css, id, ios, xpath. Possible values: \"acc\", \"css\", \"id\", \"ios\", \"xpath\"Optional, Default: \"xpath\". objectName string Name to assign to the found object. Used in the report.Optional. <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#setcontext","title":"SetContext","text":"<p>Sets current context.</p> <pre><code>AppiumDriver.SetContext(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string The name of the context to which to change <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#setorientation","title":"SetOrientation","text":"<p>Sets device orienataion.</p> <pre><code>AppiumDriver.SetOrientation(orientation)\n</code></pre> <p>Parameters:</p> Name Type Description orientation number 0 - portrait, 1 - landscape <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#seturl","title":"SetUrl","text":"<p>Sets the URL the browser is currently displaying.</p> <pre><code>AppiumDriver.SetUrl(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string The URL to display <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#shakedevice","title":"ShakeDevice","text":"<p>Perform a shake action on the device</p> <pre><code>AppiumDriver.ShakeDevice()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#startactivity","title":"StartActivity","text":"<p>Start an Android activity by providing package name and activity name</p> <pre><code>AppiumDriver.StartActivity(appPackage, appActivity, appWaitPackage, appWaitActivity)\n</code></pre> <p>Parameters:</p> Name Type Description appPackage string Name of the package appActivity string Name of the activity appWaitPackage string Automation will begin after this package starts appWaitActivity string appWaitActivity <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#startrecordingscreen","title":"StartRecordingScreen","text":"<p>Starts video recording on a device. Requires Rapise 8.0+.</p> <pre><code>AppiumDriver.StartRecordingScreen()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#stoprecordingscreen","title":"StopRecordingScreen","text":"<p>Stops video recording on a device. Requires Rapise 8.0+.</p> <pre><code>AppiumDriver.StopRecordingScreen()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#toggleairplanemode","title":"ToggleAirplaneMode","text":"<p>Toggle airplane mode on device</p> <pre><code>AppiumDriver.ToggleAirplaneMode()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#togglelocationservices","title":"ToggleLocationServices","text":"<p>Switch the state of the location service</p> <pre><code>AppiumDriver.ToggleLocationServices()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/AppiumDriver/#togglewifi","title":"ToggleWifi","text":"<p>Switch the state of the WiFi service</p> <pre><code>AppiumDriver.ToggleWifi()\n</code></pre> <p></p>"},{"location":"Libraries/AppiumWebElement/","title":"AppiumWebElement","text":"<p>This is a JavaScript wrapper for AppiumWebElement of AppiumDotNet library. https://github.com/appium/appium-dotnet-driver</p>"},{"location":"Libraries/AppiumWebElement/#action-summary","title":"Action Summary","text":"Action Description Clear Click FindElementByAccessibilityId FindElementByAndroidUIAutomator FindElementByClassName FindElementByCssSelector FindElementById FindElementByIosUIAutomation FindElementByLinkText FindElementByName FindElementByPartialLinkText FindElementByTagName FindElementByXPath FindElementsByAccessibilityId FindElementsByAndroidUIAutomator FindElementsByClassName FindElementsByCssSelector FindElementsById FindElementsByIosUIAutomation FindElementsByLinkText FindElementsByName FindElementsByPartialLinkText FindElementsByTagName FindElementsByXPath GetAttribute GetCoordinates GetCssValue GetDisplayed GetEnabled GetHashCode GetLocation GetLocationOnScreenOnceScrolledIntoView GetSelected GetSize GetTagName GetText SendKeys SetImmediateValue Submit"},{"location":"Libraries/AppiumWebElement/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/AppiumWebElement/#clear","title":"Clear","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')Clear()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#click","title":"Click","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')Click()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#findelementbyaccessibilityid","title":"FindElementByAccessibilityId","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByAccessibilityId(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyandroiduiautomator","title":"FindElementByAndroidUIAutomator","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByAndroidUIAutomator(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyclassname","title":"FindElementByClassName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbycssselector","title":"FindElementByCssSelector","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyid","title":"FindElementById","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyiosuiautomation","title":"FindElementByIosUIAutomation","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByIosUIAutomation(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbylinktext","title":"FindElementByLinkText","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyname","title":"FindElementByName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbypartiallinktext","title":"FindElementByPartialLinkText","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbytagname","title":"FindElementByTagName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementbyxpath","title":"FindElementByXPath","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyaccessibilityid","title":"FindElementsByAccessibilityId","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByAccessibilityId(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyandroiduiautomator","title":"FindElementsByAndroidUIAutomator","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByAndroidUIAutomator(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyclassname","title":"FindElementsByClassName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbycssselector","title":"FindElementsByCssSelector","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyid","title":"FindElementsById","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyiosuiautomation","title":"FindElementsByIosUIAutomation","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByIosUIAutomation(selector)\n</code></pre> <p>Parameters:</p> Name Type Description selector <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbylinktext","title":"FindElementsByLinkText","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyname","title":"FindElementsByName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbypartiallinktext","title":"FindElementsByPartialLinkText","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbytagname","title":"FindElementsByTagName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#findelementsbyxpath","title":"FindElementsByXPath","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')FindElementsByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#getattribute","title":"GetAttribute","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetAttribute(attributeName)\n</code></pre> <p>Parameters:</p> Name Type Description attributeName <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#getcoordinates","title":"GetCoordinates","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetCoordinates()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getcssvalue","title":"GetCssValue","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetCssValue(propertyName)\n</code></pre> <p>Parameters:</p> Name Type Description propertyName <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#getdisplayed","title":"GetDisplayed","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetDisplayed()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getenabled","title":"GetEnabled","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetEnabled()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#gethashcode","title":"GetHashCode","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetHashCode()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getlocation","title":"GetLocation","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetLocation()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getlocationonscreenoncescrolledintoview","title":"GetLocationOnScreenOnceScrolledIntoView","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetLocationOnScreenOnceScrolledIntoView()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getselected","title":"GetSelected","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetSelected()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#getsize","title":"GetSize","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetSize()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#gettagname","title":"GetTagName","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetTagName()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#gettext","title":"GetText","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')GetText()\n</code></pre>"},{"location":"Libraries/AppiumWebElement/#sendkeys","title":"SendKeys","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')SendKeys(text)\n</code></pre> <p>Parameters:</p> Name Type Description text <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#setimmediatevalue","title":"SetImmediateValue","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')SetImmediateValue(value)\n</code></pre> <p>Parameters:</p> Name Type Description value <p></p> <p> </p>"},{"location":"Libraries/AppiumWebElement/#submit","title":"Submit","text":"<pre><code>AppiumDriver.FindElementByAccessibilityId('UserName')Submit()\n</code></pre>"},{"location":"Libraries/Array/","title":"Array","text":"<p>Standard JavaScript Array</p>"},{"location":"Libraries/Array/#see-also","title":"See Also","text":"<ul> <li>JS Array</li> </ul>"},{"location":"Libraries/By/","title":"By","text":"<p>This is a JavaScript wrapper for By of Selenium .NET library. Requires Rapise 8.3+. Examples:</p> <pre><code>var by = By.XPath(\"//input[@id='username']\");\nvar el = WebDriver.FindElement(by);\n// is an alternative to\nvar el = WebDriver.FindElementByXPath(\"//input[@id='username']\");\n</code></pre> <pre><code>var by = By.XPath(\"//input\");\nvar els = WebDriver.FindElements(by);\n// is an alternative to\nvar els = WebDriver.FindElementsByXPath(\"//input\");\n</code></pre>"},{"location":"Libraries/By/#action-summary","title":"Action Summary","text":"Action Description ClassName Creates By.ClassName selector. CssSelector Creates By.CssSelector selector. Id Creates By.Id selector. LinkText Creates By.LinkText selector. Name Creates By.Name selector. PartialLinkText Creates By.PartialLinkText selector. TagName Creates By.TagName selector. XPath Creates By.XPath selector."},{"location":"Libraries/By/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/By/#classname","title":"ClassName","text":"<p>Creates By.ClassName selector.</p> <pre><code>WebDriver.ClassName(classNameToFind)\n</code></pre> <p>Parameters:</p> Name Type Description classNameToFind string Class name to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#cssselector","title":"CssSelector","text":"<p>Creates By.CssSelector selector.</p> <pre><code>WebDriver.CssSelector(cssSelectorToFind)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelectorToFind string CSS selector to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#id","title":"Id","text":"<p>Creates By.Id selector.</p> <pre><code>WebDriver.Id(idToFind)\n</code></pre> <p>Parameters:</p> Name Type Description idToFind string Id to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#linktext","title":"LinkText","text":"<p>Creates By.LinkText selector.</p> <pre><code>WebDriver.LinkText(linkTextToFind)\n</code></pre> <p>Parameters:</p> Name Type Description linkTextToFind string Link text to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#name","title":"Name","text":"<p>Creates By.Name selector.</p> <pre><code>WebDriver.Name(nameToFind)\n</code></pre> <p>Parameters:</p> Name Type Description nameToFind string Name to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#partiallinktext","title":"PartialLinkText","text":"<p>Creates By.PartialLinkText selector.</p> <pre><code>WebDriver.PartialLinkText(partialLinkTextToFind)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkTextToFind string Partial link text to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#tagname","title":"TagName","text":"<p>Creates By.TagName selector.</p> <pre><code>WebDriver.TagName(tagNameToFind)\n</code></pre> <p>Parameters:</p> Name Type Description tagNameToFind string TagName to find. <p>Returns:</p> <p>By object.</p> <p></p> <p> </p>"},{"location":"Libraries/By/#xpath","title":"XPath","text":"<p>Creates By.XPath selector.</p> <pre><code>WebDriver.XPath(xPathToFind)\n</code></pre> <p>Parameters:</p> Name Type Description xPathToFind string XPath to find. <p>Returns:</p> <p>By object.</p> <p></p>"},{"location":"Libraries/C1TrueDBGrid/","title":"C1TrueDBGrid","text":"<p>Component One True DB Grid Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: C1TrueDBGridBehavior</p>"},{"location":"Libraries/C1TrueDBGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/C1TrueDBGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!)."},{"location":"Libraries/C1TrueDBGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/C1TrueDBGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetCell(/**Number*/row, /**Number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetColumnName(/**number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeC1TrueDBGrid').GetText()\n</code></pre>"},{"location":"Libraries/C1TrueDBGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/C1TrueDBGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeC1TrueDBGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeC1TrueDBGrid').DoClickText(textOrRegexp, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBGrid/#dofulltext","title":"DoFullText","text":"<p>Full text of the table (may be very long!).</p> <pre><code>SeS('SomeC1TrueDBGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string: Table's full text</p> <p></p>"},{"location":"Libraries/C1TrueDBList/","title":"C1TrueDBList","text":"<p>Component One True DB List Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: C1TrueDBListBehavior</p>"},{"location":"Libraries/C1TrueDBList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText"},{"location":"Libraries/C1TrueDBList/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/C1TrueDBList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/C1TrueDBList/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeC1TrueDBList').GetCell(/**Number*/row, /**Number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeC1TrueDBList').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeC1TrueDBList').GetColumnName(/**number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeC1TrueDBList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeC1TrueDBList').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item column number Zero-based index of a column <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeC1TrueDBList').GetItemNameByIndex(index, column)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeC1TrueDBList').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#selectedcolumncount","title":"SelectedColumnCount","text":"<p>Number of selected columns.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumnCount</p> <pre><code>value = SeS('SomeC1TrueDBList').GetSelectedColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#selectedcolumns","title":"SelectedColumns","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected columns.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedColumns</p> <pre><code>value = SeS('SomeC1TrueDBList').GetSelectedColumns(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeC1TrueDBList').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeC1TrueDBList').GetSelectedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeC1TrueDBList').GetSelectionCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBList/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeC1TrueDBList').GetText()\n</code></pre>"},{"location":"Libraries/C1TrueDBList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/C1TrueDBList/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeC1TrueDBList').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBList/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeC1TrueDBList').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBList/#doclickitem","title":"DoClickItem","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeC1TrueDBList').DoClickItem(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBList/#dofulltext","title":"DoFullText","text":"<p>Read and return full text contents of the table</p> <pre><code>SeS('SomeC1TrueDBList').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Full text of the table (may be very long!), 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBList/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeC1TrueDBList').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeC1TrueDBList').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/","title":"C1TrueDBListCombo","text":"<p>Component One True DB Combo Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: C1TrueDBListBehavior</p>"},{"location":"Libraries/C1TrueDBListCombo/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex RowCount Number of rows in the table. GetRowCount SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount Text Text of the currently focused cell. GetText"},{"location":"Libraries/C1TrueDBListCombo/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoClickItem Clicks the specified cell DoFullText Read and return full text contents of the table DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/C1TrueDBListCombo/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/C1TrueDBListCombo/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetCell(/**Number*/row, /**Number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetColumnName(/**number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item column number Zero-based index of a column <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetItemNameByIndex(index, column)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selectedcolumncount","title":"SelectedColumnCount","text":"<p>Number of selected columns.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumnCount</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selectedcolumns","title":"SelectedColumns","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected columns.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedColumns</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedColumns(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectionCount()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetText()\n</code></pre>"},{"location":"Libraries/C1TrueDBListCombo/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/C1TrueDBListCombo/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBListCombo/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBListCombo/#doclickitem","title":"DoClickItem","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoClickItem(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBListCombo/#dofulltext","title":"DoFullText","text":"<p>Read and return full text contents of the table</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Full text of the table (may be very long!), 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBListCombo/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/C1TrueDBListCombo/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: C1TrueDBGridComboBehavior</p>"},{"location":"Libraries/C1TrueDBListCombo/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Returns the selected item GetSelectedItem Text Returns the text of the selected item GetText"},{"location":"Libraries/C1TrueDBListCombo/#action-summary_1","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/C1TrueDBListCombo/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/C1TrueDBListCombo/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: string</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedIndex()\n\nSeS('SomeC1TrueDBListCombo').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#selecteditem","title":"SelectedItem","text":"<p>Returns the selected item</p> <p>Type: string</p> <p>Accessors: GetSelectedItem</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/C1TrueDBListCombo/#text_1","title":"Text","text":"<p>Returns the text of the selected item</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeC1TrueDBListCombo').GetText()\n</code></pre>"},{"location":"Libraries/C1TrueDBListCombo/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/C1TrueDBListCombo/#doselectitem_1","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeC1TrueDBListCombo').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Capabilities/","title":"Capabilities","text":"<p>This is a JavaScript wrapper for DesiredCapabilities of Selenium .NET library. For code complete feature use class name CapabilitiesWrapper, e.g. </p> <p><code>var /**CapabilitiesWrapper*/caps = WebDriver.CreateDesiredCapabilities();</code></p>"},{"location":"Libraries/Capabilities/#action-summary","title":"Action Summary","text":"Action Description GetCapability Gets a capability of the browser. HasCapability Gets a value indicating whether the browser has a given capability. SetCapability Sets a capability of the browser."},{"location":"Libraries/Capabilities/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Capabilities/#getcapability","title":"GetCapability","text":"<p>Gets a capability of the browser.</p> <pre><code>WebDriver.CreateDesiredCapabilities().GetCapability(capability)\n</code></pre> <p>Parameters:</p> Name Type Description capability string The capability to get. <p>Returns:</p> <p>capability value.</p> <p></p> <p> </p>"},{"location":"Libraries/Capabilities/#hascapability","title":"HasCapability","text":"<p>Gets a value indicating whether the browser has a given capability.</p> <pre><code>WebDriver.CreateDesiredCapabilities().HasCapability(capability)\n</code></pre> <p>Parameters:</p> Name Type Description capability string The capability to get. <p>Returns:</p> <p>'true' if the capability is set, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Capabilities/#setcapability","title":"SetCapability","text":"<p>Sets a capability of the browser.</p> <pre><code>WebDriver.CreateDesiredCapabilities().SetCapability(capability, capabilityValue)\n</code></pre> <p>Parameters:</p> Name Type Description capability string The capability to get. capabilityValue string The value for the capability. <p></p>"},{"location":"Libraries/Cookies/","title":"Cookies","text":"<p>This is a JavaScript wrapper for Cookies of Selenium .NET library.</p>"},{"location":"Libraries/Cookies/#action-summary","title":"Action Summary","text":"Action Description AddCookie Adds a cookie to the current page. AllCookies Gets all cookies defined for the current page. DeleteAllCookies Deletes the cookie with the specified name from the page. DeleteCookie Deletes the specified cookie from the page. DeleteCookieNamed Deletes the cookie with the specified name from the page. GetCookieNamed Gets a cookie with the specified name."},{"location":"Libraries/Cookies/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Cookies/#addcookie","title":"AddCookie","text":"<p>Adds a cookie to the current page.</p> <pre><code>Cookies.AddCookie(cookie)\n</code></pre> <p>Parameters:</p> Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}. <p></p> <p> </p>"},{"location":"Libraries/Cookies/#allcookies","title":"AllCookies","text":"<p>Gets all cookies defined for the current page.</p> <pre><code>Cookies.AllCookies()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Cookies/#deleteallcookies","title":"DeleteAllCookies","text":"<p>Deletes the cookie with the specified name from the page.</p> <pre><code>Cookies.DeleteAllCookies()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Cookies/#deletecookie","title":"DeleteCookie","text":"<p>Deletes the specified cookie from the page.</p> <pre><code>Cookies.DeleteCookie(cookie)\n</code></pre> <p>Parameters:</p> Name Type Description cookie Cookie Cookie object, e.g. {Name: \"CookieName\", Value: \"CookieValue\", Domain: \"example.com\", Path: \"/\", Expiry: \"2018-12-28T13:15.00-05:00\"}. <p></p> <p> </p>"},{"location":"Libraries/Cookies/#deletecookienamed","title":"DeleteCookieNamed","text":"<p>Deletes the cookie with the specified name from the page.</p> <pre><code>Cookies.DeleteCookieNamed(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string The name of the cookie to be deleted. <p></p> <p> </p>"},{"location":"Libraries/Cookies/#getcookienamed","title":"GetCookieNamed","text":"<p>Gets a cookie with the specified name.</p> <pre><code>Cookies.GetCookieNamed(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string The name of the cookie to retrieve. <p></p>"},{"location":"Libraries/DXButtonEdit/","title":"DXButtonEdit","text":"<p>DevXpress ButtonEdit.</p> <p>UI element class: DevExpress.XtraEditors.ButtonEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXButtonEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXButtonEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXButtonEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXButtonEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXButtonEdit').GetText()\n\nSeS('SomeDXButtonEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXButtonEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXButtonEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXButtonEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: DXButtonEditBehavior</p>"},{"location":"Libraries/DXButtonEdit/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ButtonCount Number of buttons in this control. GetButtonCount ButtonKind Kind of a button at index. GetButtonKind"},{"location":"Libraries/DXButtonEdit/#action-summary_1","title":"Action Summary","text":"Action Description DoClickButton Selects an item of this object."},{"location":"Libraries/DXButtonEdit/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/DXButtonEdit/#buttoncount","title":"ButtonCount","text":"<p>Number of buttons in this control.</p> <p>Type: number</p> <p>Accessors: GetButtonCount</p> <pre><code>value = SeS('SomeDXButtonEdit').GetButtonCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXButtonEdit/#buttonkind","title":"ButtonKind","text":"<p>Kind of a button at index. Returns one of Glyph, Ellipsis, Delete, OK, Plus, Minus, Redo, Undo or DropDown</p> <p>Getter Parameters:</p> Name Type Description index number index of button <p>Type: string</p> <p>Accessors: GetButtonKind</p> <pre><code>value = SeS('SomeDXButtonEdit').GetButtonKind(index)\n</code></pre>"},{"location":"Libraries/DXButtonEdit/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/DXButtonEdit/#doclickbutton","title":"DoClickButton","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXButtonEdit').DoClickButton(index, isLeft)\n</code></pre> <p>Parameters:</p> Name Type Description index number index of button to select isLeft boolean set to 'true' if buttons are at the left of the controlOptional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXCalcEdit/","title":"DXCalcEdit","text":"<p>DevXpress CalcEdit.</p> <p>UI element class: DevExpress.XtraEditors.CalcEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXCalcEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXCalcEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXCalcEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXCalcEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXCalcEdit').GetText()\n\nSeS('SomeDXCalcEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXCalcEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXCalcEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXCalcEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXCheckButton/","title":"DXCheckButton","text":"<p>DevXpress CheckButton.</p> <p>UI element class: DevExpress.XtraEditors.CheckButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXCheckableBehavior</p>"},{"location":"Libraries/DXCheckButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/DXCheckButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/DXCheckButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXCheckButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeDXCheckButton').GetChecked()\n\nSeS('SomeDXCheckButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/DXCheckButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXCheckButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeDXCheckButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXCheckEdit/","title":"DXCheckEdit","text":"<p>DevXpress CheckEdit.</p> <p>UI element class: DevExpress.XtraEditors.CheckEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXCheckableBehavior</p>"},{"location":"Libraries/DXCheckEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/DXCheckEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/DXCheckEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXCheckEdit/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeDXCheckEdit').GetChecked()\n\nSeS('SomeDXCheckEdit').SetChecked(value)\n</code></pre>"},{"location":"Libraries/DXCheckEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXCheckEdit/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeDXCheckEdit').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXCheckedComboBoxEdit/","title":"DXCheckedComboBoxEdit","text":"<p>DevXpress CheckedComboBoxEdit.</p> <p>UI element class: DevExpress.XtraEditors.CheckedComboBoxEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXCheckedComboBoxEditBehavior</p>"},{"location":"Libraries/DXCheckedComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/DXCheckedComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXCheckedComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXCheckedComboBoxEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDXCheckedComboBoxEdit').GetText()\n</code></pre>"},{"location":"Libraries/DXCheckedComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXCheckedComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXCheckedComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/","title":"DXCheckedListBoxControl","text":"<p>DevXpress CheckedListBoxControl.</p> <p>UI element class: regex:DevExpress.XtraEditors.CheckedListBoxControl|DevExpress.XtraEditors.Popup.PopupCheckedListBoxControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXCheckedListBoxControlBehavior</p>"},{"location":"Libraries/DXCheckedListBoxControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/DXCheckedListBoxControl/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node."},{"location":"Libraries/DXCheckedListBoxControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXCheckedListBoxControl/#checkedcount","title":"CheckedCount","text":"<p>Returns number of checked items in ListView.</p> <p>Type: number</p> <p>Accessors: GetCheckedCount</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetCheckedCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#checkedindices","title":"CheckedIndices","text":"<p>Array of indices of checked elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetCheckedIndices</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetCheckedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#checkeditems","title":"CheckedItems","text":"<p>Array of item names of checked elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetCheckedItems</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetCheckedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetSelectedIndex()\n\nSeS('SomeDXCheckedListBoxControl').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetSelectedIndices()\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/DXCheckedListBoxControl/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeDXCheckedListBoxControl').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/DXCheckedListBoxControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXCheckedListBoxControl/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXCheckedListBoxControl/#docheckitem","title":"DoCheckItem","text":"<p>Checks items of this object.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoCheckItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXCheckedListBoxControl/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXCheckedListBoxControl/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXCheckedListBoxControl/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXCheckedListBoxControl/#dosetcheck","title":"DoSetCheck","text":"<p>Sets 'checked' state of the specified node.</p> <pre><code>SeS('SomeDXCheckedListBoxControl').DoSetCheck(bcheck, items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXColorEdit/","title":"DXColorEdit","text":"<p>DevXpress ColorEdit.</p> <p>UI element class: DevExpress.XtraEditors.ColorEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXColorEditBehavior</p>"},{"location":"Libraries/DXColorEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedColor Selected color of the object GetSelectedColor SetSelectedColor SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXColorEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectColor Selects a color. DoSetText Sets text value of this object."},{"location":"Libraries/DXColorEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXColorEdit/#selectedcolor","title":"SelectedColor","text":"<p>Selected color of the object</p> <p>Type: struct</p> <p>Accessors: GetSelectedColor, SetSelectedColor</p> <pre><code>value = SeS('SomeDXColorEdit').GetSelectedColor()\n\nSeS('SomeDXColorEdit').SetSelectedColor(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXColorEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXColorEdit').GetSelectedText()\n\nSeS('SomeDXColorEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXColorEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXColorEdit').GetText()\n\nSeS('SomeDXColorEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXColorEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXColorEdit/#doselectcolor","title":"DoSelectColor","text":"<p>Selects a color.</p> <pre><code>SeS('SomeDXColorEdit').DoSelectColor(val)\n</code></pre> <p>Parameters:</p> Name Type Description val struct structure with three fields '{R, G, B}'. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXColorEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXColorEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXComboBoxEdit/","title":"DXComboBoxEdit","text":"<p>DevXpress ComboBoxEdit.</p> <p>UI element class: DevExpress.XtraEditors.ComboBoxEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXComboBoxEditBehavior</p>"},{"location":"Libraries/DXComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText"},{"location":"Libraries/DXComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/DXComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXComboBoxEdit/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXComboBoxEdit').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXComboBoxEdit/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXComboBoxEdit').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXComboBoxEdit/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXComboBoxEdit').GetSelectedIndex()\n\nSeS('SomeDXComboBoxEdit').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXComboBoxEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXComboBoxEdit').GetSelectedText()\n\nSeS('SomeDXComboBoxEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXComboBoxEdit/#text","title":"Text","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXComboBoxEdit').GetText()\n\nSeS('SomeDXComboBoxEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXComboBoxEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXDateEdit/","title":"DXDateEdit","text":"<p>DevXpress DateEdit.</p> <p>UI element class: DevExpress.XtraEditors.Controls.DateEditCalendarBase</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXDateEditBehavior</p>"},{"location":"Libraries/DXDateEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/DXDateEdit/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/DXDateEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXDateEdit/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeDXDateEdit').GetMonth()\n</code></pre>"},{"location":"Libraries/DXDateEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXDateEdit/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeDXDateEdit').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXDateEdit/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeDXDateEdit').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXDateEdit/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeDXDateEdit').DoSelectDate(day, month, year)\n</code></pre> <p>Parameters:</p> Name Type Description day number Day to set month number Month to set year number Year to set <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DXDockPanel/","title":"DXDockPanel","text":"<p>DevExpress DXDockPanel.</p> <p>UI element class: regex:DevExpress.XtraBars.Docking.DockPanel</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXDockPanelBehavior</p>"},{"location":"Libraries/DXDockPanel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount PanelName Name of the panel at index GetPanelName SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedPanel Title of the selected panel GetSelectedPanel"},{"location":"Libraries/DXDockPanel/#action-summary","title":"Action Summary","text":"Action Description DoSelectPanel Selects the tab by name."},{"location":"Libraries/DXDockPanel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXDockPanel/#itemscount","title":"ItemsCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeDXDockPanel').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXDockPanel/#panelname","title":"PanelName","text":"<p>Name of the panel at index</p> <p>Getter Parameters:</p> Name Type Description index <p>Type: string</p> <p>Accessors: GetPanelName</p> <pre><code>value = SeS('SomeDXDockPanel').GetPanelName(/**number*/ index)\n</code></pre> <p></p>"},{"location":"Libraries/DXDockPanel/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeDXDockPanel').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/DXDockPanel/#selectedpanel","title":"SelectedPanel","text":"<p>Title of the selected panel</p> <p>Type: string</p> <p>Accessors: GetSelectedPanel</p> <pre><code>value = SeS('SomeDXDockPanel').GetSelectedPanel()\n</code></pre>"},{"location":"Libraries/DXDockPanel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXDockPanel/#doselectpanel","title":"DoSelectPanel","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeDXDockPanel').DoSelectPanel(panelName)\n</code></pre> <p>Parameters:</p> Name Type Description panelName string Panel name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXDockedBarControl/","title":"DXDockedBarControl","text":"<p>DevXpress Docked Bar.</p> <p>UI element class: regex:DevExpress.XtraBars.Controls.DockedBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXBarControlBehavior</p>"},{"location":"Libraries/DXDockedBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount ItemEnabled Enabled state of an item at index. GetItemEnabled ItemTooltip Tooltip assigned to an item at index. GetItemTooltip"},{"location":"Libraries/DXDockedBarControl/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the navigation item"},{"location":"Libraries/DXDockedBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXDockedBarControl/#item","title":"Item","text":"<p>Caption of the item specified by index</p> <p>Getter Parameters:</p> Name Type Description ind number Index of an item to get caption <p>Type: string</p> <p>Accessors: GetItem</p> <pre><code>value = SeS('SomeDXDockedBarControl').GetItem(/**number*/ind)\n</code></pre> <p></p>"},{"location":"Libraries/DXDockedBarControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXDockedBarControl').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXDockedBarControl/#itemenabled","title":"ItemEnabled","text":"<p>Enabled state of an item at index. Returns boolean value.</p> <p>Getter Parameters:</p> Name Type Description ind number Zero-based index of an item. <p>Type: boolean</p> <p>Accessors: GetItemEnabled</p> <pre><code>value = SeS('SomeDXDockedBarControl').GetItemEnabled(/**number*/ind)\n</code></pre> <p></p>"},{"location":"Libraries/DXDockedBarControl/#itemtooltip","title":"ItemTooltip","text":"<p>Tooltip assigned to an item at index.</p> <p>Getter Parameters:</p> Name Type Description ind number Zero-based index of an item. <p>Type: string</p> <p>Accessors: GetItemTooltip</p> <pre><code>value = SeS('SomeDXDockedBarControl').GetItemTooltip(/**number*/ind)\n</code></pre>"},{"location":"Libraries/DXDockedBarControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXDockedBarControl/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the navigation item</p> <pre><code>SeS('SomeDXDockedBarControl').DoClickItem(nameCaptionIndex, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXDocumentsHost/","title":"DXDocumentsHost","text":"<p>DevExpress DXDocumentsHost.</p> <p>UI element class: DevExpress.XtraBars.Docking2010.DocumentsHost</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXDocumentsHostBehavior</p>"},{"location":"Libraries/DXDocumentsHost/#property-summary","title":"Property Summary","text":"Property Description Getter Setter DocName Name of the doc at index GetDocName ItemsCount Number of items. GetItemsCount"},{"location":"Libraries/DXDocumentsHost/#action-summary","title":"Action Summary","text":"Action Description DoSelectDoc Selects a doc by name."},{"location":"Libraries/DXDocumentsHost/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXDocumentsHost/#docname","title":"DocName","text":"<p>Name of the doc at index</p> <p>Getter Parameters:</p> Name Type Description index <p>Type: string</p> <p>Accessors: GetDocName</p> <pre><code>value = SeS('SomeDXDocumentsHost').GetDocName(/**number*/ index)\n</code></pre> <p></p>"},{"location":"Libraries/DXDocumentsHost/#itemscount","title":"ItemsCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeDXDocumentsHost').GetItemsCount()\n</code></pre>"},{"location":"Libraries/DXDocumentsHost/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXDocumentsHost/#doselectdoc","title":"DoSelectDoc","text":"<p>Selects a doc by name.</p> <pre><code>SeS('SomeDXDocumentsHost').DoSelectDoc(docName)\n</code></pre> <p>Parameters:</p> Name Type Description docName string Doc name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXDropDownButton/","title":"DXDropDownButton","text":"<p>DevXpress DropDownButton.</p> <p>UI element class: DevExpress.XtraEditors.DropDownButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXDropDownButtonBehavior</p>"},{"location":"Libraries/DXDropDownButton/#action-summary","title":"Action Summary","text":"Action Description DoShowPopup Show popup"},{"location":"Libraries/DXDropDownButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXDropDownButton/#doshowpopup","title":"DoShowPopup","text":"<p>Show popup</p> <pre><code>SeS('SomeDXDropDownButton').DoShowPopup()\n</code></pre> <p></p>"},{"location":"Libraries/DXFontEdit/","title":"DXFontEdit","text":"<p>DevXpress FontEdit.</p> <p>UI element class: DevExpress.XtraEditors.FontEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXFontEditBehavior</p>"},{"location":"Libraries/DXFontEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText"},{"location":"Libraries/DXFontEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DXFontEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXFontEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXFontEdit').GetSelectedText()\n\nSeS('SomeDXFontEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXFontEdit/#text","title":"Text","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXFontEdit').GetText()\n\nSeS('SomeDXFontEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXFontEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXFontEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXFontEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXGridControl/","title":"DXGridControl","text":"<p>DevXpress GridControl.</p> <p>UI element class: DevExpress.XtraGrid.GridControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXGridControlBehavior</p>"},{"location":"Libraries/DXGridControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/DXGridControl/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoClickText Clicks on a specific text inside the grid. DoFullText Full text of the table (may be very long!)."},{"location":"Libraries/DXGridControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXGridControl/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDXGridControl').GetCell(/**number*/row, /**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDXGridControl').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. defSep string Separator for multi-level columns.Optional. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDXGridControl').GetColumnName(/**number*/columnIndex, /**string*/defSep)\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDXGridControl').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeDXGridControl').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeDXGridControl').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/DXGridControl/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDXGridControl').GetText()\n</code></pre>"},{"location":"Libraries/DXGridControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXGridControl/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDXGridControl').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXGridControl/#doclickcolumn","title":"DoClickColumn","text":"<p>Clicks on column header</p> <pre><code>SeS('SomeDXGridControl').DoClickColumn(col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within header. Default is a center.Optional. yOffset number Y offset to click within header. Default is a center.Optional. <p></p> <p> </p>"},{"location":"Libraries/DXGridControl/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeDXGridControl').DoClickText(textOrRegexp, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXGridControl/#dofulltext","title":"DoFullText","text":"<p>Full text of the table (may be very long!).</p> <pre><code>SeS('SomeDXGridControl').DoFullText()\n</code></pre> <p>Returns:</p> <p>string: Table's full text</p> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/","title":"DXHyperLinkEdit","text":"<p>DevXpress HyperLinkEdit.</p> <p>UI element class: DevExpress.XtraEditors.HyperLinkEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectGenericBehavior</p>"},{"location":"Libraries/DXHyperLinkEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/DXHyperLinkEdit/#action-summary","title":"Action Summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/DXHyperLinkEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXHyperLinkEdit/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 8.0+.</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/DXHyperLinkEdit/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeDXHyperLinkEdit').GetY()\n</code></pre>"},{"location":"Libraries/DXHyperLinkEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXHyperLinkEdit/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeDXHyperLinkEdit').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXHyperLinkEdit/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeDXHyperLinkEdit').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXHyperLinkEdit/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeDXHyperLinkEdit').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DXHyperLinkEdit/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeDXHyperLinkEdit').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/DXImageComboBoxEdit/","title":"DXImageComboBoxEdit","text":"<p>DevXpress ImageComboBoxEdit.</p> <p>UI element class: DevExpress.XtraEditors.ImageComboBoxEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXComboBoxEditBehavior</p>"},{"location":"Libraries/DXImageComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText"},{"location":"Libraries/DXImageComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/DXImageComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXImageComboBoxEdit/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXImageComboBoxEdit').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXImageComboBoxEdit/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXImageComboBoxEdit').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageComboBoxEdit/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXImageComboBoxEdit').GetSelectedIndex()\n\nSeS('SomeDXImageComboBoxEdit').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageComboBoxEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXImageComboBoxEdit').GetSelectedText()\n\nSeS('SomeDXImageComboBoxEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageComboBoxEdit/#text","title":"Text","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXImageComboBoxEdit').GetText()\n\nSeS('SomeDXImageComboBoxEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXImageComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXImageComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXImageComboBoxEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXImageComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXImageComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXImageEdit/","title":"DXImageEdit","text":"<p>DevXpress ImageEdit.</p> <p>UI element class: DevExpress.XtraEditors.ImageEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXImageEditBehavior</p>"},{"location":"Libraries/DXImageEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Image 'true' if there is image loaded into the editor, 'false' otherwise. GetImage"},{"location":"Libraries/DXImageEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXImageEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXImageEdit/#image","title":"Image","text":"<p>'true' if there is image loaded into the editor, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetImage</p> <pre><code>value = SeS('SomeDXImageEdit').GetImage()\n</code></pre>"},{"location":"Libraries/DXImageEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXImageEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXImageEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXImageListBoxControl/","title":"DXImageListBoxControl","text":"<p>DevXpress ImageListBoxControl.</p> <p>UI element class: DevExpress.XtraEditors.ImageListBoxControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXListBoxControlBehavior</p>"},{"location":"Libraries/DXImageListBoxControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/DXImageListBoxControl/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/DXImageListBoxControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXImageListBoxControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetSelectedIndex()\n\nSeS('SomeDXImageListBoxControl').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetSelectedIndices()\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/DXImageListBoxControl/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeDXImageListBoxControl').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/DXImageListBoxControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXImageListBoxControl/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeDXImageListBoxControl').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXImageListBoxControl/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeDXImageListBoxControl').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXImageListBoxControl/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeDXImageListBoxControl').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXImageListBoxControl/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeDXImageListBoxControl').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXListBoxControl/","title":"DXListBoxControl","text":"<p>DevXpress ListBoxControl.</p> <p>UI element class: DevExpress.XtraEditors.ListBoxControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXListBoxControlBehavior</p>"},{"location":"Libraries/DXListBoxControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/DXListBoxControl/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/DXListBoxControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXListBoxControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXListBoxControl').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeDXListBoxControl').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXListBoxControl').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXListBoxControl').GetSelectedIndex()\n\nSeS('SomeDXListBoxControl').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeDXListBoxControl').GetSelectedIndices()\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeDXListBoxControl').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeDXListBoxControl').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/DXListBoxControl/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeDXListBoxControl').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/DXListBoxControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXListBoxControl/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeDXListBoxControl').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXListBoxControl/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeDXListBoxControl').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXListBoxControl/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeDXListBoxControl').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXListBoxControl/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeDXListBoxControl').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXLookUpEdit/","title":"DXLookUpEdit","text":"<p>DevXpress LookUpEdit.</p> <p>UI element class: DevExpress.XtraEditors.LookUpEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXLookUpEditBehavior</p>"},{"location":"Libraries/DXLookUpEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemIndex Index of the selected element of the object. GetItemIndex SetItemIndex ItemName Name of the selected element of the object. GetItemName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the object, 'false' if text can not be read. GetSelectedText SetSelectedText Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXLookUpEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/DXLookUpEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXLookUpEdit/#itemindex","title":"ItemIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: string</p> <p>Accessors: GetItemIndex, SetItemIndex</p> <pre><code>value = SeS('SomeDXLookUpEdit').GetItemIndex()\n\nSeS('SomeDXLookUpEdit').SetItemIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXLookUpEdit/#itemname","title":"ItemName","text":"<p>Name of the selected element of the object.</p> <p>Type: string</p> <p>Accessors: GetItemName</p> <pre><code>value = SeS('SomeDXLookUpEdit').GetItemName()\n</code></pre> <p></p>"},{"location":"Libraries/DXLookUpEdit/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXLookUpEdit').GetSelectedIndex()\n\nSeS('SomeDXLookUpEdit').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXLookUpEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXLookUpEdit').GetSelectedText()\n\nSeS('SomeDXLookUpEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXLookUpEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXLookUpEdit').GetText()\n\nSeS('SomeDXLookUpEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXLookUpEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXLookUpEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXLookUpEdit').DoSelectItem(val)\n</code></pre> <p>Parameters:</p> Name Type Description val number index of value to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXLookUpEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXLookUpEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXMRUEdit/","title":"DXMRUEdit","text":"<p>DevXpress MRUEdit.</p> <p>UI element class: DevExpress.XtraEditors.MRUEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXComboBoxEditBehavior</p>"},{"location":"Libraries/DXMRUEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText Text Text of the selected item in a single string. GetText SetText"},{"location":"Libraries/DXMRUEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/DXMRUEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXMRUEdit/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXMRUEdit').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXMRUEdit/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDXMRUEdit').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/DXMRUEdit/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXMRUEdit').GetSelectedIndex()\n\nSeS('SomeDXMRUEdit').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXMRUEdit/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeDXMRUEdit').GetSelectedText()\n\nSeS('SomeDXMRUEdit').SetSelectedText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXMRUEdit/#text","title":"Text","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXMRUEdit').GetText()\n\nSeS('SomeDXMRUEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXMRUEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXMRUEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDXMRUEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXMRUEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXMRUEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXMarqueeProgressBarControl/","title":"DXMarqueeProgressBarControl","text":"<p>DevXpress MarqueeProgressBarControl.</p> <p>UI element class: DevExpress.XtraEditors.MarqueeProgressBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXMarqueeProgressBarControlBehavior</p>"},{"location":"Libraries/DXMarqueeProgressBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Working Gets or sets a value indicating whether the control can respond to user interaction GetWorking"},{"location":"Libraries/DXMarqueeProgressBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXMarqueeProgressBarControl/#working","title":"Working","text":"<p>Gets or sets a value indicating whether the control can respond to user interaction</p> <p>Type: boolean</p> <p>Accessors: GetWorking</p> <pre><code>value = SeS('SomeDXMarqueeProgressBarControl').GetWorking()\n</code></pre>"},{"location":"Libraries/DXMaskBox/","title":"DXMaskBox","text":"<p>DevXpress MaskBox.</p> <p>UI element class: DevExpress.XtraEditors.TextBoxMaskBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXObjectTextBehavior</p>"},{"location":"Libraries/DXMaskBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXMaskBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXMaskBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXMaskBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXMaskBox').GetText()\n\nSeS('SomeDXMaskBox').SetText(value)\n</code></pre>"},{"location":"Libraries/DXMaskBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXMaskBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXMaskBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXMemoEdit/","title":"DXMemoEdit","text":"<p>DevXpress MemoEdit.</p> <p>UI element class: DevExpress.XtraEditors.MemoEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXMemoEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXMemoEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXMemoEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXMemoEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXMemoEdit').GetText()\n\nSeS('SomeDXMemoEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXMemoEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXMemoEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXMemoEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXMemoExEdit/","title":"DXMemoExEdit","text":"<p>DevXpress MemoExEdit.</p> <p>UI element class: DevExpress.XtraEditors.MemoExEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXMemoExEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXMemoExEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXMemoExEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXMemoExEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXMemoExEdit').GetText()\n\nSeS('SomeDXMemoExEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXMemoExEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXMemoExEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXMemoExEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXNavBarControl/","title":"DXNavBarControl","text":"<p>DevXpress NavBar.</p> <p>UI element class: DevExpress.XtraNavBar.NavBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXNavBarControlBehavior</p>"},{"location":"Libraries/DXNavBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount"},{"location":"Libraries/DXNavBarControl/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group"},{"location":"Libraries/DXNavBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXNavBarControl/#item","title":"Item","text":"<p>Caption of the item specified by index</p> <p>Getter Parameters:</p> Name Type Description ind number Index of an item to get caption <p>Type: string</p> <p>Accessors: GetItem</p> <pre><code>value = SeS('SomeDXNavBarControl').GetItem(/**number*/ind)\n</code></pre> <p></p>"},{"location":"Libraries/DXNavBarControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXNavBarControl').GetItemCount()\n</code></pre>"},{"location":"Libraries/DXNavBarControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXNavBarControl/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the navigation item</p> <pre><code>SeS('SomeDXNavBarControl').DoClickItem(nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXNavBarControl/#doexpandgroup","title":"DoExpandGroup","text":"<p>Expand (or make active) the navigation group</p> <pre><code>SeS('SomeDXNavBarControl').DoExpandGroup(nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXPopupBarControl/","title":"DXPopupBarControl","text":"<p>DevXpress DXPopupBarControl.</p> <p>UI element class: regex:DevExpress.XtraBars.Controls..*BarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXPopupBarControlBehavior</p>"},{"location":"Libraries/DXPopupBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items. GetItemCount"},{"location":"Libraries/DXPopupBarControl/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the navigation item"},{"location":"Libraries/DXPopupBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXPopupBarControl/#item","title":"Item","text":"<p>Caption of the item specified by index</p> <p>Getter Parameters:</p> Name Type Description ind number Index of an item to get caption <p>Type: string</p> <p>Accessors: GetItem</p> <pre><code>value = SeS('SomeDXPopupBarControl').GetItem(/**number*/ind)\n</code></pre> <p></p>"},{"location":"Libraries/DXPopupBarControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXPopupBarControl').GetItemCount()\n</code></pre>"},{"location":"Libraries/DXPopupBarControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXPopupBarControl/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the navigation item</p> <pre><code>SeS('SomeDXPopupBarControl').DoClickItem(nameCaptionIndex, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXPopupContainerEdit/","title":"DXPopupContainerEdit","text":"<p>DevXpress PopupContainerEdit.</p> <p>UI element class: DevExpress.XtraEditors.PopupContainerEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXPopupContainerEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXPopupContainerEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXPopupContainerEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXPopupContainerEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXPopupContainerEdit').GetText()\n\nSeS('SomeDXPopupContainerEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXPopupContainerEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXPopupContainerEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXPopupContainerEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXPopupLookUpEditForm/","title":"DXPopupLookUpEditForm","text":"<p>DevXpress PopupLookUpEditForm.</p> <p>UI element class: DevExpress.XtraEditors.Popup.PopupLookUpEditForm</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXPopupLookUpEditFormBehavior</p>"},{"location":"Libraries/DXProgressBarControl/","title":"DXProgressBarControl","text":"<p>DevXpress ProgressBarControl.</p> <p>UI element class: DevExpress.XtraEditors.ProgressBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXProgressBarControlBehavior</p>"},{"location":"Libraries/DXProgressBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/DXProgressBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXProgressBarControl/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeDXProgressBarControl').GetMaxValue()\n\nSeS('SomeDXProgressBarControl').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXProgressBarControl/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeDXProgressBarControl').GetMinValue()\n\nSeS('SomeDXProgressBarControl').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXProgressBarControl/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeDXProgressBarControl').GetValue()\n\nSeS('SomeDXProgressBarControl').SetValue(value)\n</code></pre>"},{"location":"Libraries/DXPropertyGridControl/","title":"DXPropertyGridControl","text":"<p>DevExpress DXPropertyGridControl.</p> <p>UI element class: DevExpress.XtraVerticalGrid.PropertyGridControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXPropertyGridControlBehavior</p>"},{"location":"Libraries/DXPropertyGridControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter RowCount Number of rows in the table. GetRowCount"},{"location":"Libraries/DXPropertyGridControl/#action-summary","title":"Action Summary","text":"Action Description DoGetRowCaption Gets caption of the row with index. DoGetRowColor Gets color of the row with index. DoGetRowRect Gets rectangle of the row with index. DoGetRowValue Gets value of the row with index. DoSetRowValue Sets value of the row with index."},{"location":"Libraries/DXPropertyGridControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXPropertyGridControl/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDXPropertyGridControl').GetRowCount()\n</code></pre>"},{"location":"Libraries/DXPropertyGridControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXPropertyGridControl/#dogetrowcaption","title":"DoGetRowCaption","text":"<p>Gets caption of the row with index.</p> <pre><code>SeS('SomeDXPropertyGridControl').DoGetRowCaption(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Row index <p>Returns:</p> <p>string: Row caption</p> <p></p> <p> </p>"},{"location":"Libraries/DXPropertyGridControl/#dogetrowcolor","title":"DoGetRowColor","text":"<p>Gets color of the row with index.</p> <pre><code>SeS('SomeDXPropertyGridControl').DoGetRowColor(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Row index <p>Returns:</p> <p>string: Row color</p> <p></p> <p> </p>"},{"location":"Libraries/DXPropertyGridControl/#dogetrowrect","title":"DoGetRowRect","text":"<p>Gets rectangle of the row with index.</p> <pre><code>SeS('SomeDXPropertyGridControl').DoGetRowRect(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Row index <p>Returns:</p> <p>object: Row rectangle {x, y, w, h}.</p> <p></p> <p> </p>"},{"location":"Libraries/DXPropertyGridControl/#dogetrowvalue","title":"DoGetRowValue","text":"<p>Gets value of the row with index.</p> <pre><code>SeS('SomeDXPropertyGridControl').DoGetRowValue(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Row index <p>Returns:</p> <p>object: Row value</p> <p></p> <p> </p>"},{"location":"Libraries/DXPropertyGridControl/#dosetrowvalue","title":"DoSetRowValue","text":"<p>Sets value of the row with index.</p> <pre><code>SeS('SomeDXPropertyGridControl').DoSetRowValue(rowIndex, value)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Row index value string Value to set <p>Returns:</p> <p>boolean: 'true' if successful</p> <p></p>"},{"location":"Libraries/DXRadioGroup/","title":"DXRadioGroup","text":"<p>DevXpress RadioGroup.</p> <p>UI element class: DevExpress.XtraEditors.RadioGroup</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXRadioGroupBehavior</p>"},{"location":"Libraries/DXRadioGroup/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the label of the object GetText"},{"location":"Libraries/DXRadioGroup/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects Item"},{"location":"Libraries/DXRadioGroup/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXRadioGroup/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDXRadioGroup').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXRadioGroup/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXRadioGroup').GetSelectedIndex()\n\nSeS('SomeDXRadioGroup').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXRadioGroup/#text","title":"Text","text":"<p>Text of the label of the object</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDXRadioGroup').GetText()\n</code></pre>"},{"location":"Libraries/DXRadioGroup/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXRadioGroup/#doselectitem","title":"DoSelectItem","text":"<p>Selects Item</p> <pre><code>SeS('SomeDXRadioGroup').DoSelectItem(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Index of the element to check <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DXRangeTrackBarControl/","title":"DXRangeTrackBarControl","text":"<p>DevXpress RangeTrackBarControl.</p> <p>UI element class: DevExpress.XtraEditors.RangeTrackBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXRangeTrackBarControlBehavior</p>"},{"location":"Libraries/DXRangeTrackBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue"},{"location":"Libraries/DXRangeTrackBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXRangeTrackBarControl/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeDXRangeTrackBarControl').GetMaxValue()\n\nSeS('SomeDXRangeTrackBarControl').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXRangeTrackBarControl/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeDXRangeTrackBarControl').GetMinValue()\n\nSeS('SomeDXRangeTrackBarControl').SetMinValue(value)\n</code></pre>"},{"location":"Libraries/DXRibbon/","title":"DXRibbon","text":"<p>DevXpress Ribbon.</p> <p>UI element class: DevExpress.XtraBars.Ribbon.RibbonControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXRibbonControlBehavior</p>"},{"location":"Libraries/DXRibbon/#action-summary","title":"Action Summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickGalleryItem Select a gallery item in the Ribbon gallery control. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon."},{"location":"Libraries/DXRibbon/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXRibbon/#doclickapplicationbutton","title":"DoClickApplicationButton","text":"<p>Clicks an application button on the ribbon.</p> <pre><code>SeS('SomeDXRibbon').DoClickApplicationButton(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXRibbon/#doclickgalleryitem","title":"DoClickGalleryItem","text":"<p>Select a gallery item in the Ribbon gallery control.</p> <pre><code>SeS('SomeDXRibbon').DoClickGalleryItem(gallery, galleryItem, bNewValue, bUncheckOthers)\n</code></pre> <p>Parameters:</p> Name Type Description gallery string | number Gallery control identifier in the Ribbon. galleryItem string | number Caption or index of item to click. bNewValue boolean New checked value for an itemOptional, Default: \"true\". bUncheckOthers boolean set to 'false' if this click is a part of multi-selectionOptional, Default: \"true\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXRibbon/#doclickitem","title":"DoClickItem","text":"<p>Clicks on an item on the ribbon.</p> <pre><code>SeS('SomeDXRibbon').DoClickItem(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXRibbon/#doclicktab","title":"DoClickTab","text":"<p>Clicks on a tab in the ribbon.</p> <pre><code>SeS('SomeDXRibbon').DoClickTab(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXSimpleButton/","title":"DXSimpleButton","text":"<p>DevXpress SimpleButton.</p> <p>UI element class: DevExpress.XtraEditors.SimpleButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectButtonBehavior</p>"},{"location":"Libraries/DXSpinEdit/","title":"DXSpinEdit","text":"<p>DevXpress SpinEdit.</p> <p>UI element class: DevExpress.XtraEditors.SpinEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXSpinEditBehavior</p>"},{"location":"Libraries/DXSpinEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Increment The value of increment for spin. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/DXSpinEdit/#action-summary","title":"Action Summary","text":"Action Description DoDown Decrements the Value of an object. DoSetText Sets text value of this object. DoUp Increments the Value of an object."},{"location":"Libraries/DXSpinEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXSpinEdit/#increment","title":"Increment","text":"<p>The value of increment for spin.</p> <p>Type: number</p> <p>Accessors: GetIncrement, SetIncrement</p> <pre><code>value = SeS('SomeDXSpinEdit').GetIncrement()\n\nSeS('SomeDXSpinEdit').SetIncrement(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXSpinEdit/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeDXSpinEdit').GetMaxValue()\n\nSeS('SomeDXSpinEdit').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXSpinEdit/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeDXSpinEdit').GetMinValue()\n\nSeS('SomeDXSpinEdit').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXSpinEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXSpinEdit').GetText()\n\nSeS('SomeDXSpinEdit').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXSpinEdit/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeDXSpinEdit').GetValue()\n\nSeS('SomeDXSpinEdit').SetValue(value)\n</code></pre>"},{"location":"Libraries/DXSpinEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXSpinEdit/#dodown","title":"DoDown","text":"<p>Decrements the Value of an object.</p> <pre><code>SeS('SomeDXSpinEdit').DoDown()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXSpinEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXSpinEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXSpinEdit/#doup","title":"DoUp","text":"<p>Increments the Value of an object.</p> <pre><code>SeS('SomeDXSpinEdit').DoUp()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXTabControl/","title":"DXTabControl","text":"<p>DevExpress DXTabControl.</p> <p>UI element class: DevExpress.XtraTab.XtraTabControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXTabControlBehavior</p>"},{"location":"Libraries/DXTabControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName"},{"location":"Libraries/DXTabControl/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/DXTabControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTabControl/#itemscount","title":"ItemsCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeDXTabControl').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXTabControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeDXTabControl').GetSelectedIndex()\n\nSeS('SomeDXTabControl').SetSelectedIndex(/**number*/ index)\n</code></pre> <p></p>"},{"location":"Libraries/DXTabControl/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab, SetSelectedTab</p> <pre><code>value = SeS('SomeDXTabControl').GetSelectedTab()\n\nSeS('SomeDXTabControl').SetSelectedTab(/*string*/ tabName)\n</code></pre> <p></p>"},{"location":"Libraries/DXTabControl/#tabname","title":"TabName","text":"<p>Name of the tab at index</p> <p>Getter Parameters:</p> Name Type Description index number <p>Type: string</p> <p>Accessors: GetTabName</p> <pre><code>value = SeS('SomeDXTabControl').GetTabName(/**number*/ index)\n</code></pre>"},{"location":"Libraries/DXTabControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXTabControl/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeDXTabControl').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXTextEdit/","title":"DXTextEdit","text":"<p>DevXpress TextEdit.</p> <p>UI element class: DevExpress.XtraEditors.TextEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXTextEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXTextEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXTextEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTextEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXTextEdit').GetText()\n\nSeS('SomeDXTextEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXTextEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXTextEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXTextEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXTextEditMasked/","title":"DXTextEditMasked","text":"<p>DevXpress Masked TextEdit.</p> <p>UI element class: DevExpress.XtraEditors.TextEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXTextEditMasked/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXTextEditMasked/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXTextEditMasked/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTextEditMasked/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXTextEditMasked').GetText()\n\nSeS('SomeDXTextEditMasked').SetText(value)\n</code></pre>"},{"location":"Libraries/DXTextEditMasked/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXTextEditMasked/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXTextEditMasked').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXTimeEdit/","title":"DXTimeEdit","text":"<p>DevXpress TimeEdit.</p> <p>UI element class: DevExpress.XtraEditors.TimeEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/DXTimeEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DXTimeEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DXTimeEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTimeEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDXTimeEdit').GetText()\n\nSeS('SomeDXTimeEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/DXTimeEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXTimeEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDXTimeEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXTrackBarControl/","title":"DXTrackBarControl","text":"<p>DevXpress TrackBarControl.</p> <p>UI element class: DevExpress.XtraEditors.TrackBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXTrackBarControlBehavior</p>"},{"location":"Libraries/DXTrackBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue"},{"location":"Libraries/DXTrackBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTrackBarControl/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeDXTrackBarControl').GetValue()\n\nSeS('SomeDXTrackBarControl').SetValue(value)\n</code></pre>"},{"location":"Libraries/DXTreeList/","title":"DXTreeList","text":"<p>DevXpress TreeList.</p> <p>UI element class: DevExpress.XtraTreeList.TreeList</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXTreeListBehavior</p>"},{"location":"Libraries/DXTreeList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CellText Cell text for the cell specified by 'rowPath' and 'col'. GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount ColumnCount Number of columns in current grid. GetColumnCount ColumnName Caption of a column. GetColumnName Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText RowCount Number of rows in current grid. GetRowCount Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText"},{"location":"Libraries/DXTreeList/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node"},{"location":"Libraries/DXTreeList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXTreeList/#celltext","title":"CellText","text":"<p>Cell text for the cell specified by 'rowPath' and 'col'.</p> <p>Getter Parameters:</p> Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name. Default is 0Optional. <p>Type: string</p> <p>Accessors: GetCellText</p> <pre><code>value = SeS('SomeDXTreeList').GetCellText(/**string|number*/ rowPath, /**number|string*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeDXTreeList').GetChecked(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeDXTreeList').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#columncount","title":"ColumnCount","text":"<p>Number of columns in current grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDXTreeList').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDXTreeList').GetColumnName(/**number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeDXTreeList').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeDXTreeList').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeDXTreeList').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#rowcount","title":"RowCount","text":"<p>Number of rows in current grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDXTreeList').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeDXTreeList').GetSelected(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/DXTreeList/#text","title":"Text","text":"<p>;-combined text of all selected nodes.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDXTreeList').GetText()\n</code></pre>"},{"location":"Libraries/DXTreeList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DXTreeList/#doclickcell","title":"DoClickCell","text":"<p>Click the cell specified by row name or index and column name or index</p> <pre><code>SeS('SomeDXTreeList').DoClickCell(rowPath, col, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXTreeList/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeDXTreeList').DoClickNode(path, separator, pathType, column, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". column number | string Column index or column name. Default is 0Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXTreeList/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeDXTreeList').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXTreeList/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeDXTreeList').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DXTreeList/#dosetcheck","title":"DoSetCheck","text":"<p>Set 'checked' state of the specified node</p> <pre><code>SeS('SomeDXTreeList').DoSetCheck(bcheck, path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DXZoomTrackBarControl/","title":"DXZoomTrackBarControl","text":"<p>DevXpress ZoomTrackBarControl.</p> <p>UI element class: DevExpress.XtraEditors.ZoomTrackBarControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DXZoomTrackBarControlBehavior</p>"},{"location":"Libraries/DXZoomTrackBarControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/DXZoomTrackBarControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DXZoomTrackBarControl/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeDXZoomTrackBarControl').GetMaxValue()\n\nSeS('SomeDXZoomTrackBarControl').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXZoomTrackBarControl/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeDXZoomTrackBarControl').GetMinValue()\n\nSeS('SomeDXZoomTrackBarControl').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/DXZoomTrackBarControl/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeDXZoomTrackBarControl').GetValue()\n\nSeS('SomeDXZoomTrackBarControl').SetValue(value)\n</code></pre>"},{"location":"Libraries/Database/","title":"Database","text":"<p>Database object. Use it to read and write ADO data sources.</p>"},{"location":"Libraries/Database/#action-summary","title":"Action Summary","text":"Action Description DoAttach Attaches to a Database with given ADO connection string and SQL query. DoMoveToRow Moves to a given row. DoRandom Selects random row and column in the recordset. DoSequential Advances to the next row in the table. GetColumnCount Gets columns count. GetColumnName Gets column name. GetColumnNames Gets column names. GetCurrentRowIndex Get zero based current row index. GetRowCount Gets rows count. GetValue Gets value by column name, and, optionally, row number."},{"location":"Libraries/Database/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Database/#doattach","title":"DoAttach","text":"<p>Attaches to a Database with given ADO connection string and SQL query.</p> <pre><code>Database.DoAttach(connection_string, sql)\n</code></pre> <p>Parameters:</p> Name Type Description connection_string string ADO connection string. sql SQL Query (i.e. 'select * from Customers')Optional. <p>Returns:</p> <p>true, if successful</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#domovetorow","title":"DoMoveToRow","text":"<p>Moves to a given row.</p> <pre><code>Database.DoMoveToRow(rowInd)\n</code></pre> <p>Parameters:</p> Name Type Description rowInd number Row index to set active. <p></p> <p> </p>"},{"location":"Libraries/Database/#dorandom","title":"DoRandom","text":"<p>Selects random row and column in the recordset.</p> <pre><code>Database.DoRandom()\n</code></pre> <p>Returns:</p> <p>'false' if the the DB is is not connected, 'true' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#dosequential","title":"DoSequential","text":"<p>Advances to the next row in the table.  When the end of the range is reached DoSequential returns 'false'.</p> <pre><code>Database.DoSequential()\n</code></pre> <p>Returns:</p> <p>'false' if being called when active row is the last row or the recordset is not attached, 'true' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#getcolumncount","title":"GetColumnCount","text":"<p>Gets columns count.</p> <pre><code>Database.GetColumnCount()\n</code></pre> <p>Returns:</p> <p>Number of Columns in the result set.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#getcolumnname","title":"GetColumnName","text":"<p>Gets column name.</p> <pre><code>Database.GetColumnName(ind)\n</code></pre> <p>Parameters:</p> Name Type Description ind number Column index. <p>Returns:</p> <p>Name of column in the spreadsheet.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#getcolumnnames","title":"GetColumnNames","text":"<p>Gets column names.</p> <pre><code>Database.GetColumnNames()\n</code></pre> <p>Returns:</p> <p>Array of column names in the table.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#getcurrentrowindex","title":"GetCurrentRowIndex","text":"<p>Get zero based current row index.</p> <pre><code>Database.GetCurrentRowIndex()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Database/#getrowcount","title":"GetRowCount","text":"<p>Gets rows count.</p> <pre><code>Database.GetRowCount()\n</code></pre> <p>Returns:</p> <p>Number of rows in the result set.</p> <p></p> <p> </p>"},{"location":"Libraries/Database/#getvalue","title":"GetValue","text":"<p>Gets value by column name, and, optionally, row number. Returns current cell value after DoSequential or DoRandom if params not set.</p> <pre><code>Database.GetValue(columnId, rowId)\n</code></pre> <p>Parameters:</p> Name Type Description columnId Number | String Column index or name. If not set 1<sup>st</sup> column is used.Optional. rowId number Row index. If not set current row is used.Optional. <p></p>"},{"location":"Libraries/DomDynamicsAXActionSearch/","title":"DomDynamicsAXActionSearch","text":"<p>This behavior pattern implements standard behavior for ActionSearch control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXActionSearchBehavior</p>"},{"location":"Libraries/DomDynamicsAXActionSearch/#action-summary","title":"Action Summary","text":"Action Description DoSearch Performs action search."},{"location":"Libraries/DomDynamicsAXActionSearch/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXActionSearch/#dosearch","title":"DoSearch","text":"<p>Performs action search.</p> <pre><code>SeS('SomeDomDynamicsAXActionSearch').DoSearch(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Name of action to search. <p></p>"},{"location":"Libraries/DomDynamicsAXCheckBox/","title":"DomDynamicsAXCheckBox","text":"<p>This behavior pattern implements standard behavior for CheckBox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXCheckBoxBehavior</p>"},{"location":"Libraries/DomDynamicsAXCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/DomDynamicsAXCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/DomDynamicsAXCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeDomDynamicsAXCheckBox').GetChecked()\n\nSeS('SomeDomDynamicsAXCheckBox').SetChecked(bcheck)\n</code></pre>"},{"location":"Libraries/DomDynamicsAXCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeDomDynamicsAXCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsAXComboBox/","title":"DomDynamicsAXComboBox","text":"<p>This behavior pattern implements standard behavior for ComboBox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXComboBoxBehavior</p>"},{"location":"Libraries/DomDynamicsAXComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Selected value. GetText SetText"},{"location":"Libraries/DomDynamicsAXComboBox/#action-summary","title":"Action Summary","text":"Action Description DoOpen Expands combo box. DoSetText Sets text into the edit field of a combo box."},{"location":"Libraries/DomDynamicsAXComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXComboBox/#text","title":"Text","text":"<p>Selected value.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDomDynamicsAXComboBox').GetText()\n\nSeS('SomeDomDynamicsAXComboBox').SetText(/**string*/ text)\n</code></pre>"},{"location":"Libraries/DomDynamicsAXComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXComboBox/#doopen","title":"DoOpen","text":"<p>Expands combo box.</p> <pre><code>SeS('SomeDomDynamicsAXComboBox').DoOpen()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXComboBox/#dosettext","title":"DoSetText","text":"<p>Sets text into the edit field of a combo box.</p> <pre><code>SeS('SomeDomDynamicsAXComboBox').DoSetText(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Value to input. <p></p>"},{"location":"Libraries/DomDynamicsAXCrumbList/","title":"DomDynamicsAXCrumbList","text":"<p>This behavior pattern implements standard behavior for CrumbList control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXCrumbListBehavior</p>"},{"location":"Libraries/DomDynamicsAXCrumbList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text displayed in the breadcrumbs section. GetText"},{"location":"Libraries/DomDynamicsAXCrumbList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXCrumbList/#text","title":"Text","text":"<p>Text displayed in the breadcrumbs section.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDomDynamicsAXCrumbList').GetText()\n</code></pre>"},{"location":"Libraries/DomDynamicsAXDatePicker/","title":"DomDynamicsAXDatePicker","text":"<p>This behavior pattern implements standard behavior for DatePicker control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXDatePickerBehavior</p>"},{"location":"Libraries/DomDynamicsAXDatePicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Day Current day displayed by the date picker. GetDay Month Current month displayed by the date picker. GetMonth Year Current year displayed by the date picker. GetYear"},{"location":"Libraries/DomDynamicsAXDatePicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/DomDynamicsAXDatePicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXDatePicker/#day","title":"Day","text":"<p>Current day displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetDay</p> <pre><code>value = SeS('SomeDomDynamicsAXDatePicker').GetDay()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXDatePicker/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeDomDynamicsAXDatePicker').GetMonth()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXDatePicker/#year","title":"Year","text":"<p>Current year displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetYear</p> <pre><code>value = SeS('SomeDomDynamicsAXDatePicker').GetYear()\n</code></pre>"},{"location":"Libraries/DomDynamicsAXDatePicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXDatePicker/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeDomDynamicsAXDatePicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXDatePicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeDomDynamicsAXDatePicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXDatePicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeDomDynamicsAXDatePicker').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number New date to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomDynamicsAXGrid/","title":"DomDynamicsAXGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXGridBehavior</p>"},{"location":"Libraries/DomDynamicsAXGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DomDynamicsAXGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoSetText Enters text into the active cell."},{"location":"Libraries/DomDynamicsAXGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomDynamicsAXGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomDynamicsAXGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomDynamicsAXGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomDynamicsAXGrid').GetRowCount()\n</code></pre>"},{"location":"Libraries/DomDynamicsAXGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomDynamicsAXGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeDomDynamicsAXGrid').DoClickText(text, index)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times.Optional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXGrid/#dosettext","title":"DoSetText","text":"<p>Enters text into the active cell. Use DoClickCell to make a cell active.</p> <pre><code>SeS('SomeDomDynamicsAXGrid').DoSetText(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to type into the active cell. <p></p>"},{"location":"Libraries/DomDynamicsAXMenuBar/","title":"DomDynamicsAXMenuBar","text":"<p>This behavior pattern implements standard behavior for MenuBar control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXMenuBarBehavior</p>"},{"location":"Libraries/DomDynamicsAXMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/DomDynamicsAXMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeDomDynamicsAXMenuBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsAXMessageBar/","title":"DomDynamicsAXMessageBar","text":"<p>This behavior pattern implements standard behavior for MessageBar control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXMessageBarBehavior</p>"},{"location":"Libraries/DomDynamicsAXMessageBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of messages. GetItemCount ItemText Text of an item at index. GetItemText Text Text of the first item. GetText"},{"location":"Libraries/DomDynamicsAXMessageBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXMessageBar/#itemcount","title":"ItemCount","text":"<p>Number of messages.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDomDynamicsAXMessageBar').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXMessageBar/#itemtext","title":"ItemText","text":"<p>Text of an item at index.</p> <p>Getter Parameters:</p> Name Type Description index number Index of a message. <p>Type: string</p> <p>Accessors: GetItemText</p> <pre><code>value = SeS('SomeDomDynamicsAXMessageBar').GetItemText(/**number*/ index)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXMessageBar/#text","title":"Text","text":"<p>Text of the first item.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDomDynamicsAXMessageBar').GetText()\n</code></pre>"},{"location":"Libraries/DomDynamicsAXNavigationSearch/","title":"DomDynamicsAXNavigationSearch","text":"<p>This behavior pattern implements standard behavior for NavigationSearch control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXNavigationSearchBehavior</p>"},{"location":"Libraries/DomDynamicsAXNavigationSearch/#action-summary","title":"Action Summary","text":"Action Description DoSearch Performs navigation search."},{"location":"Libraries/DomDynamicsAXNavigationSearch/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXNavigationSearch/#dosearch","title":"DoSearch","text":"<p>Performs navigation search.</p> <pre><code>SeS('SomeDomDynamicsAXNavigationSearch').DoSearch(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Name of a page to search. <p></p>"},{"location":"Libraries/DomDynamicsAXTabControl/","title":"DomDynamicsAXTabControl","text":"<p>This behavior pattern implements standard behavior for TabControl control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXTabControlBehavior</p>"},{"location":"Libraries/DomDynamicsAXTabControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Expanded State of a tab with name. GetExpanded ItemsCount Number of tabs. GetItemsCount TabName Name of a tab at index GetTabName"},{"location":"Libraries/DomDynamicsAXTabControl/#action-summary","title":"Action Summary","text":"Action Description DoCollapse Collapses specific tab in a tab control. DoExpand Expands specific tab in a tab control."},{"location":"Libraries/DomDynamicsAXTabControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXTabControl/#expanded","title":"Expanded","text":"<p>State of a tab with name. Returns 'true' if the tab is expanded, 'false' - otherwise.</p> <p>Getter Parameters:</p> Name Type Description tabName string Name of a tab. <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeDomDynamicsAXTabControl').GetExpanded(/**string*/ tabName)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXTabControl/#itemscount","title":"ItemsCount","text":"<p>Number of tabs.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeDomDynamicsAXTabControl').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsAXTabControl/#tabname","title":"TabName","text":"<p>Name of a tab at index</p> <p>Getter Parameters:</p> Name Type Description index number Index of a tab. <p>Type: string</p> <p>Accessors: GetTabName</p> <pre><code>value = SeS('SomeDomDynamicsAXTabControl').GetTabName(/**number*/ index)\n</code></pre>"},{"location":"Libraries/DomDynamicsAXTabControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXTabControl/#docollapse","title":"DoCollapse","text":"<p>Collapses specific tab in a tab control.</p> <pre><code>SeS('SomeDomDynamicsAXTabControl').DoCollapse(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Name of a tab <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsAXTabControl/#doexpand","title":"DoExpand","text":"<p>Expands specific tab in a tab control.</p> <pre><code>SeS('SomeDomDynamicsAXTabControl').DoExpand(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Name of a tab <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsAXTextBox/","title":"DomDynamicsAXTextBox","text":"<p>This behavior pattern implements standard behavior for TextBox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsAXTextBoxBehavior</p>"},{"location":"Libraries/DomDynamicsAXTextBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DomDynamicsAXTextBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DomDynamicsAXTextBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsAXTextBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDomDynamicsAXTextBox').GetText()\n\nSeS('SomeDomDynamicsAXTextBox').SetText(/**string*/ value, /**boolean*/ hitEnter)\n</code></pre>"},{"location":"Libraries/DomDynamicsAXTextBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsAXTextBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDomDynamicsAXTextBox').DoSetText(value, hitEnter)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. hitEnter boolean Pass 'true' to additionally hit enter after entering the text.Optional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/","title":"DomDynamicsCrmAgGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsCrmAgGridBehavior</p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows"},{"location":"Libraries/DomDynamicsCrmAgGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table."},{"location":"Libraries/DomDynamicsCrmAgGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsCrmAgGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeDomDynamicsCrmAgGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n</code></pre>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsCrmAgGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomDynamicsCrmAgGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsCrmAgGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeDomDynamicsCrmAgGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/","title":"DomDynamicsCrmGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsCrmGridBehavior</p>"},{"location":"Libraries/DomDynamicsCrmGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows"},{"location":"Libraries/DomDynamicsCrmGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table."},{"location":"Libraries/DomDynamicsCrmGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsCrmGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeDomDynamicsCrmGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n</code></pre>"},{"location":"Libraries/DomDynamicsCrmGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsCrmGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomDynamicsCrmGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsCrmGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeDomDynamicsCrmGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/","title":"DomDynamicsCrmUnifiedInterfaceGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsCrmUnifiedInterfaceGridBehavior</p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table."},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n</code></pre>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeDomDynamicsCrmUnifiedInterfaceGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/","title":"DomDynamicsCrmUnifiedInterfaceList","text":"<p>This behavior pattern implements standard behavior for List control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsCrmUnifiedInterfaceListBehavior</p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemNameByIndex Returns item name by its index. GetItemNameByIndex"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the item"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeDomDynamicsCrmUnifiedInterfaceList').GetItemNameByIndex(/**number*/ index)\n</code></pre>"},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsCrmUnifiedInterfaceList/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the item</p> <pre><code>SeS('SomeDomDynamicsCrmUnifiedInterfaceList').DoClickItem(item, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Index or name  of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsNAVEdit/","title":"DomDynamicsNAVEdit","text":"<p>This behavior pattern implements standard behavior for Edit control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsNAVEditBehavior</p>"},{"location":"Libraries/DomDynamicsNAVEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DomDynamicsNAVEdit/#action-summary","title":"Action Summary","text":"Action Description DoClick Clicks on the edit field. DoOpen Opens lookup table for this edit field. DoSetText Sets text value of this object."},{"location":"Libraries/DomDynamicsNAVEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsNAVEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDomDynamicsNAVEdit').GetText()\n\nSeS('SomeDomDynamicsNAVEdit').SetText(/**string*/ value)\n</code></pre>"},{"location":"Libraries/DomDynamicsNAVEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsNAVEdit/#doclick","title":"DoClick","text":"<p>Clicks on the edit field.</p> <pre><code>SeS('SomeDomDynamicsNAVEdit').DoClick(x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description x number X coordinate to click.Optional. y number Y coordinate to click.Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse clickOptional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVEdit/#doopen","title":"DoOpen","text":"<p>Opens lookup table for this edit field.</p> <pre><code>SeS('SomeDomDynamicsNAVEdit').DoOpen(x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description x number X coordinate to click.Optional. y number Y coordinate to click.Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse clickOptional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDomDynamicsNAVEdit').DoSetText(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/","title":"DomDynamicsNAVGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomDynamicsNAVGridBehavior</p>"},{"location":"Libraries/DomDynamicsNAVGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows"},{"location":"Libraries/DomDynamicsNAVGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoLookup Opens lookup table for the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSetText Sets a text value into the specified cell."},{"location":"Libraries/DomDynamicsNAVGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomDynamicsNAVGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomDynamicsNAVGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeDomDynamicsNAVGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n</code></pre>"},{"location":"Libraries/DomDynamicsNAVGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomDynamicsNAVGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVGrid/#dolookup","title":"DoLookup","text":"<p>Opens lookup table for the specified cell.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoLookup(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVGrid/#doscrollto","title":"DoScrollTo","text":"<p>Scrolls to the specified cell.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoScrollTo(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVGrid/#doselect","title":"DoSelect","text":"<p>Selects a dropdown item in the specified cell.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoSelect(row, col, item)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomDynamicsNAVGrid/#dosettext","title":"DoSetText","text":"<p>Sets a text value into the specified cell.</p> <pre><code>SeS('SomeDomDynamicsNAVGrid').DoSetText(row, col, text)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomLightningComboBox/","title":"DomLightningComboBox","text":"<p>This behavior pattern implements standard behavior for Lightning ComboBox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomLightningComboBoxBehavior</p>"},{"location":"Libraries/DomLightningComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DomLightningComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomLightningComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDomLightningComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomLightningGrid/","title":"DomLightningGrid","text":"<p>This behavior pattern implements standard behavior for Lightning Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomLightningGridBehavior</p>"},{"location":"Libraries/DomLightningGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DomLightningGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid."},{"location":"Libraries/DomLightningGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomLightningGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomLightningGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomLightningGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomLightningGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomLightningGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Column name. <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomLightningGrid').GetColumnIndex(/**string*/ columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomLightningGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomLightningGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomLightningGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomLightningGrid').GetRowCount()\n</code></pre>"},{"location":"Libraries/DomLightningGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomLightningGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomLightningGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomLightningGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeDomLightningGrid').DoClickText(text, index)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times.Optional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomLightningListBox/","title":"DomLightningListBox","text":"<p>This behavior pattern implements standard behavior for Lightning ListBox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomLightningListBoxBehavior</p>"},{"location":"Libraries/DomLightningListBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DomLightningListBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomLightningListBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDomLightningListBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomSAPButton/","title":"DomSAPButton","text":"<p>Button control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSAPButtonBehavior</p>"},{"location":"Libraries/DomSAPCalendar/","title":"DomSAPCalendar","text":"<p>SAP UI5 Calendar Picker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/DomSAPCombobox/","title":"DomSAPCombobox","text":"<p>Combobox control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSAPComboboxBehavior</p>"},{"location":"Libraries/DomSAPCombobox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/DomSAPCombobox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DomSAPCombobox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomSAPCombobox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeDomSAPCombobox').GetText()\n</code></pre>"},{"location":"Libraries/DomSAPCombobox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomSAPCombobox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDomSAPCombobox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DomSAPGrid/","title":"DomSAPGrid","text":"<p>Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSAPGridBehavior</p>"},{"location":"Libraries/DomSAPGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell CellElement Get Cell element. GetCellElement ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DomSAPGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoScrollTo Scrolls to the specified cell. DoSelect Selects a dropdown item in the specified cell. DoSelectAll Selects/deselects all rows based on check parameter value. DoSelectRadio Select a radio button within a cell. DoSelectRow Selects/deselects a given row based on check parameter value. DoSetText Sets a text value into the specified cell."},{"location":"Libraries/DomSAPGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomSAPGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomSAPGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPGrid/#cellelement","title":"CellElement","text":"<p>Get Cell element.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p>Type: HTMLObject</p> <p>Accessors: GetCellElement</p> <pre><code>value = SeS('SomeDomSAPGrid').GetCellElement(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomSAPGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomSAPGrid').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomSAPGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomSAPGrid').GetRowCount()\n</code></pre>"},{"location":"Libraries/DomSAPGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomSAPGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomSAPGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#doscrollto","title":"DoScrollTo","text":"<p>Scrolls to the specified cell.</p> <pre><code>SeS('SomeDomSAPGrid').DoScrollTo(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#doselect","title":"DoSelect","text":"<p>Selects a dropdown item in the specified cell.</p> <pre><code>SeS('SomeDomSAPGrid').DoSelect(row, col, item)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Text of an item in the dropdown. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#doselectall","title":"DoSelectAll","text":"<p>Selects/deselects all rows based on check parameter value.</p> <pre><code>SeS('SomeDomSAPGrid').DoSelectAll(check)\n</code></pre> <p>Parameters:</p> Name Type Description check boolean Desired checkbox state. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#doselectradio","title":"DoSelectRadio","text":"<p>Select a radio button within a cell.</p> <pre><code>SeS('SomeDomSAPGrid').DoSelectRadio(row, col, item)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. item string Radio button caption. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#doselectrow","title":"DoSelectRow","text":"<p>Selects/deselects a given row based on check parameter value.</p> <pre><code>SeS('SomeDomSAPGrid').DoSelectRow(row, check)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. check boolean Desired checkbox state. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPGrid/#dosettext","title":"DoSetText","text":"<p>Sets a text value into the specified cell.</p> <pre><code>SeS('SomeDomSAPGrid').DoSetText(row, col, text)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. text string Text to set into the cell. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomSAPInput/","title":"DomSAPInput","text":"<p>Input field.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSAPInputBehavior</p>"},{"location":"Libraries/DomSAPInput/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DomSAPInput/#action-summary","title":"Action Summary","text":"Action Description DoOpen Clicks right-side icon of the input."},{"location":"Libraries/DomSAPInput/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomSAPInput/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDomSAPInput').GetText()\n\nSeS('SomeDomSAPInput').SetText(/**string*/ value)\n</code></pre>"},{"location":"Libraries/DomSAPInput/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomSAPInput/#doopen","title":"DoOpen","text":"<p>Clicks right-side icon of the input.</p> <pre><code>SeS('SomeDomSAPInput').DoOpen()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomSAPRadioGroup/","title":"DomSAPRadioGroup","text":"<p>SAP UI5 Radio Group.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/DomSAPTable/","title":"DomSAPTable","text":"<p>Table control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSAPTableBehavior</p>"},{"location":"Libraries/DomSAPTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with a given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DomSAPTable/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoFullText Returns text representation of the table. DoScrollTo Scrolls to the specified cell."},{"location":"Libraries/DomSAPTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomSAPTable/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomSAPTable').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPTable/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomSAPTable').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPTable/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with a given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: string</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomSAPTable').GetColumnIndex(/**string*/columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPTable/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomSAPTable').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomSAPTable/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomSAPTable').GetRowCount()\n</code></pre>"},{"location":"Libraries/DomSAPTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomSAPTable/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomSAPTable').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPTable/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeDomSAPTable').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/DomSAPTable/#doscrollto","title":"DoScrollTo","text":"<p>Scrolls to the specified cell.</p> <pre><code>SeS('SomeDomSAPTable').DoScrollTo(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DomSalesforceGrid/","title":"DomSalesforceGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSalesforceGridBehavior</p>"},{"location":"Libraries/DomSalesforceGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DomSalesforceGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid."},{"location":"Libraries/DomSalesforceGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DomSalesforceGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDomSalesforceGrid').GetCell(/**number|string*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/DomSalesforceGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDomSalesforceGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DomSalesforceGrid/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Column name. <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDomSalesforceGrid').GetColumnIndex(/**string*/ columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DomSalesforceGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDomSalesforceGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DomSalesforceGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDomSalesforceGrid').GetRowCount()\n</code></pre>"},{"location":"Libraries/DomSalesforceGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DomSalesforceGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDomSalesforceGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DomSalesforceGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeDomSalesforceGrid').DoClickText(text, index)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to search in the grid. index number Index in the array if the text found several times.Optional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/DynamicsAXAddressBar/","title":"DynamicsAXAddressBar","text":"<p>DynamicsAX DynamicsAXAddressBar.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXAddressBarBehavior</p>"},{"location":"Libraries/DynamicsAXAddressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DynamicsAXAddressBar/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DynamicsAXAddressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsAXAddressBar/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDynamicsAXAddressBar').GetText()\n\nSeS('SomeDynamicsAXAddressBar').SetText(/**string*/ value)\n</code></pre>"},{"location":"Libraries/DynamicsAXAddressBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXAddressBar/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDynamicsAXAddressBar').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXComboBox/","title":"DynamicsAXComboBox","text":"<p>Behavior patterm for Dynamics AX combo box.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXComboBoxBehavior</p>"},{"location":"Libraries/DynamicsAXComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DynamicsAXComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDynamicsAXComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXComboBoxEdit/","title":"DynamicsAXComboBoxEdit","text":"<p>DynamicsAX DynamicsAXComboBoxEdit.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXComboBoxBehavior</p>"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDynamicsAXComboBoxEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: DynamicsAXTextBoxBehavior</p>"},{"location":"Libraries/DynamicsAXComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DynamicsAXComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDynamicsAXComboBoxEdit').GetText()\n\nSeS('SomeDynamicsAXComboBoxEdit').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/DynamicsAXComboBoxEdit/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDynamicsAXComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/","title":"DynamicsAXComboBoxEditExpanded","text":"<p>DynamicsAX DynamicsAXComboBoxEditExpanded.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXComboBoxBehavior</p>"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDynamicsAXComboBoxEditExpanded').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: DynamicsAXTextBoxBehavior</p>"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDynamicsAXComboBoxEditExpanded').GetText()\n\nSeS('SomeDynamicsAXComboBoxEditExpanded').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXComboBoxEditExpanded/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDynamicsAXComboBoxEditExpanded').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXFastTabs/","title":"DynamicsAXFastTabs","text":"<p>Behavior patterm for Dynamics AX fast tabs control.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXFastTabsBehavior</p>"},{"location":"Libraries/DynamicsAXFastTabs/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/DynamicsAXFastTabs/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXFastTabs/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeDynamicsAXFastTabs').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXMenu/","title":"DynamicsAXMenu","text":"<p>Behavior patterm for Dynamics AX menu.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXMenuBehavior</p>"},{"location":"Libraries/DynamicsAXMenu/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/DynamicsAXMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeDynamicsAXMenu').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXMenuDropDown/","title":"DynamicsAXMenuDropDown","text":"<p>Behavior patterm for Dynamics AX dropdown (popup).</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXMenuDropDownBehavior</p>"},{"location":"Libraries/DynamicsAXMenuDropDown/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DynamicsAXMenuDropDown/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXMenuDropDown/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDynamicsAXMenuDropDown').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXMenuDropDownList/","title":"DynamicsAXMenuDropDownList","text":"<p>DynamicsAX DynamicsAXMenuDropDownList.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXMenuDropDownBehavior</p>"},{"location":"Libraries/DynamicsAXMenuDropDownList/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/DynamicsAXMenuDropDownList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXMenuDropDownList/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeDynamicsAXMenuDropDownList').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsAXMenuItem/","title":"DynamicsAXMenuItem","text":"<p>DynamicsAX DynamicsAXMenuItem.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXMenuItemBehavior</p>"},{"location":"Libraries/DynamicsAXTable/","title":"DynamicsAXTable","text":"<p>Behavior patterm for Dynamics AX grid/table.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXTableBehavior</p>"},{"location":"Libraries/DynamicsAXTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Zero-based index of the column. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DynamicsAXTable/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScroll Scrolls table horizontally and vertically."},{"location":"Libraries/DynamicsAXTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsAXTable/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetCell(/**number|string*/ row, /**string|number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#cellobject","title":"CellObject","text":"<p>UIAObject for the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: UIAObject</p> <p>Accessors: GetCellObject</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetCellObject(/**number|string*/ row, /**string|number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#columnindex","title":"ColumnIndex","text":"<p>Zero-based index of the column.</p> <p>Getter Parameters:</p> Name Type Description columnName string Name of a column. <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetColumnIndex(/**string*/ columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetColumnName(/**number*/ columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#columnvalues","title":"ColumnValues","text":"<p>Values of cells in a column</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. <p>Type: Array</p> <p>Accessors: GetColumnValues</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetColumnValues(/**number*/ columnIndex,/**number*/ maxCount)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsAXTable/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDynamicsAXTable').GetRowCount()\n</code></pre>"},{"location":"Libraries/DynamicsAXTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXTable/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDynamicsAXTable').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DynamicsAXTable/#doclickcolumn","title":"DoClickColumn","text":"<p>Clicks on column header</p> <pre><code>SeS('SomeDynamicsAXTable').DoClickColumn(col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p></p> <p> </p>"},{"location":"Libraries/DynamicsAXTable/#doscroll","title":"DoScroll","text":"<p>Scrolls table horizontally and vertically.</p> <pre><code>SeS('SomeDynamicsAXTable').DoScroll(horizontalPercent, verticalPercent)\n</code></pre> <p>Parameters:</p> Name Type Description horizontalPercent number Percent value from 0 to 100. -1 means no horizontal scroll. verticalPercent number Percent value from 0 to 100. -1 means no vertical scroll. <p></p>"},{"location":"Libraries/DynamicsAXTextBox/","title":"DynamicsAXTextBox","text":"<p>This behavior pattern implements standard behavior for TextBox control.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsAXTextBoxBehavior</p>"},{"location":"Libraries/DynamicsAXTextBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/DynamicsAXTextBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/DynamicsAXTextBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsAXTextBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeDynamicsAXTextBox').GetText()\n\nSeS('SomeDynamicsAXTextBox').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/DynamicsAXTextBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsAXTextBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeDynamicsAXTextBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsNAVFastTabs/","title":"DynamicsNAVFastTabs","text":"<p>Behavior patterm for Dynamics NAV fast tabs control.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsNAVFastTabsBehavior</p>"},{"location":"Libraries/DynamicsNAVFastTabs/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/DynamicsNAVFastTabs/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsNAVFastTabs/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeDynamicsNAVFastTabs').DoSelectTab(tabName, toggleAdditionalFields, additionalFieldsButtonName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select. toggleAdditionalFields boolean Set to <code>true</code> to click on <code>Show more fields</code> button inside the tab. Supported in Rapise 6.4+.Optional, Default: \"false\". additionalFieldsButtonName string If <code>Show more fields</code> button is named differently in your locale you need to specify it. Supported in Rapise 6.4+.Optional, Default: \"Show more fields\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/DynamicsNAVTable/","title":"DynamicsNAVTable","text":"<p>Behavior patterm for Dynamics NAV grid/table.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsNAVTableBehavior</p>"},{"location":"Libraries/DynamicsNAVTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell CellObject UIAObject for the specified cell. GetCellObject CellRowIndex Index of a row with the specified cell. GetCellRowIndex ColumnCount Number of columns in the grid. GetColumnCount ColumnIndex Index of a column with given name. GetColumnIndex ColumnName Caption of a column. GetColumnName ColumnValues Values of cells in a column GetColumnValues RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/DynamicsNAVTable/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickColumn Clicks on column header DoScrollTo Scrolls to the specified cell"},{"location":"Libraries/DynamicsNAVTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/DynamicsNAVTable/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetCell(/**number|string*/ row, /**string|number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#cellobject","title":"CellObject","text":"<p>UIAObject for the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number | string Zero-based index of a row or cell text. col string | number Name of a column or zero-based column index. <p>Type: UIAObject</p> <p>Accessors: GetCellObject</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetCellObject(/**number|string*/ row, /**string|number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#cellrowindex","title":"CellRowIndex","text":"<p>Index of a row with the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row string Text in the cell to search for. col string | number Name of a column or zero-based column index. <p>Type: number</p> <p>Accessors: GetCellRowIndex</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetCellRowIndex(/**string*/ row, /**string|number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#columnindex","title":"ColumnIndex","text":"<p>Index of a column with given name.</p> <p>Getter Parameters:</p> Name Type Description columnName string Column name. <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetColumnIndex(/**string*/ columnName)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetColumnName(/**number*/ columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#columnvalues","title":"ColumnValues","text":"<p>Values of cells in a column</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. maxCount number Maximum number of values to return. Zero means everything. <p>Type: Array</p> <p>Accessors: GetColumnValues</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetColumnValues(/**number*/ columnIndex, /**number*/ maxCount)\n</code></pre> <p></p>"},{"location":"Libraries/DynamicsNAVTable/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeDynamicsNAVTable').GetRowCount()\n</code></pre>"},{"location":"Libraries/DynamicsNAVTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsNAVTable/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeDynamicsNAVTable').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/DynamicsNAVTable/#doclickcolumn","title":"DoClickColumn","text":"<p>Clicks on column header</p> <pre><code>SeS('SomeDynamicsNAVTable').DoClickColumn(col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description col number | string Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p></p> <p> </p>"},{"location":"Libraries/DynamicsNAVTable/#doscrollto","title":"DoScrollTo","text":"<p>Scrolls to the specified cell</p> <pre><code>SeS('SomeDynamicsNAVTable').DoScrollTo(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. <p></p>"},{"location":"Libraries/DynamicsNAVToolBar/","title":"DynamicsNAVToolBar","text":"<p>Behavior patterm for Dynamics NAV toolbar with menu items.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DynamicsNAVToolBarBehavior</p>"},{"location":"Libraries/DynamicsNAVToolBar/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/DynamicsNAVToolBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/DynamicsNAVToolBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeDynamicsNAVToolBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/FarPointGrid/","title":"FarPointGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: FarPointGridBehavior</p>"},{"location":"Libraries/FarPointGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedCells Selected cells. GetSelectedCells SetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount Text Text of the currently focused cell. GetText SetText"},{"location":"Libraries/FarPointGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell DoFullText Returns text representation of the table."},{"location":"Libraries/FarPointGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/FarPointGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. <p>Type: string</p> <p>Accessors: GetCell, SetCell</p> <pre><code>value = SeS('SomeFarPointGrid').GetCell(/**number*/rowIndex, /**number*/columnIndex)\n\nSeS('SomeFarPointGrid').SetCell(/**number*/rowIndex, /**number*/columnIndex, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount, SetColumnCount</p> <pre><code>value = SeS('SomeFarPointGrid').GetColumnCount()\n\nSeS('SomeFarPointGrid').SetColumnCount(/**number*/value)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName, SetColumnName</p> <pre><code>value = SeS('SomeFarPointGrid').GetColumnName(/**number*/columnIndex)\n\nSeS('SomeFarPointGrid').SetColumnName(/**number*/columnIndex, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount, SetRowCount</p> <pre><code>value = SeS('SomeFarPointGrid').GetRowCount()\n\nSeS('SomeFarPointGrid').SetRowCount(/**number*/value)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#selectedcells","title":"SelectedCells","text":"<p>Selected cells.</p> <p>Getter Parameters:</p> Name Type Description asArray rowcolSep cellSep <p>Type: array|string</p> <p>Accessors: GetSelectedCells, SetSelectedCells</p> <pre><code>value = SeS('SomeFarPointGrid').GetSelectedCells(/**boolean*/asArray, /**string*/rowcolSep, /**string*/cellSep)\n\nSeS('SomeFarPointGrid').SetSelectedCells(/**number*/top, /**number*/left, /**number*/bottom, /**number*/right)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeFarPointGrid').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#selectedcolumncount","title":"SelectedColumnCount","text":"<p>Number of selected columns.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumnCount</p> <pre><code>value = SeS('SomeFarPointGrid').GetSelectedColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeFarPointGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeFarPointGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeFarPointGrid').GetText()\n\nSeS('SomeFarPointGrid').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/FarPointGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/FarPointGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeFarPointGrid').DoClickCell(rowIndex, columnIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Zero-based index if the row. columnIndex number Zero-based index of the column. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/FarPointGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeFarPointGrid').DoFullText(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of a file that should hold text representation of the grid.Optional. <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/FarPointGridAX/","title":"FarPointGridAX","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: FarPointGridAXBehavior</p>"},{"location":"Libraries/FarPointGridAX/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CellComboList Get array of dropdown values for a given cell. GetCellComboList CellInfo <p>Returns object with following fields. GetCellInfo ColumnCount Number of columns in the grid. GetColumnCount ColumnHeaders Get array of column captions. GetColumnHeaders ColumnIndex Get column index by name. GetColumnIndex ColumnInfo <p>Returns object with following fields. GetColumnInfo GridInfo <p>Returns object with following fields. GetGridInfo RowCount Number of rows in the table. GetRowCount RowHeaders Get array of row captions. GetRowHeaders RowInfo <p>Returns object with following fields. GetRowInfo SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow SetSelectedRow SelectedRowsCount Get number of selected rows. GetSelectedRowsCount Text Text of the specified cell. GetText SetText"},{"location":"Libraries/FarPointGridAX/#action-summary","title":"Action Summary","text":"Action Description DoActivateCell Make specified cell active DoClearCell Clear specified cell range DoClickCell Clicks the specified cell DoExportGrid Save Grid data to file DoFullText Return whole grid as text"},{"location":"Libraries/FarPointGridAX/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/FarPointGridAX/#cellcombolist","title":"CellComboList","text":"<p>Get array of dropdown values for a given cell.</p> <p>Getter Parameters:</p> Name Type Description row number Row index col number Column index <p>Type: array</p> <p>Accessors: GetCellComboList</p> <pre><code>value = SeS('SomeFarPointGridAX').GetCellComboList(row, col)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#cellinfo","title":"CellInfo","text":"<p>Returns object with following fields.</p> <pre>\nActionOnEnter one of:\n            0 None          (Default) Active cell does not change\n            1 Up                Active cell moves up\n            2 Down          Active cell moves down\n            3 Left          Active cell moves left\n            4 Right         Active cell moves right\n            5 Next          Next cell becomes active cell\n            6 Previous      Previous cell becomes active cell\n            7 Same          Current cell remains active cell\n            8 Next Row          Active cell moves to first column of next row\n\n\nEditMode\nLocked\nMoveOnArrow    ArrowsExitEditMode;\nNextCellOnTab  ProcessTab;\n\nType one of:\n            0 Date          Creates date cell\n            1 Edit          (Default) Creates edit cell\n            4 PIC               Creates PIC cell\n            5 Static Text       Creates static text cell\n            6 Time          Creates time cell\n            7 Button            Creates button cell\n            8 Combo Box     Creates combo box cell\n            9 Picture           Creates picture cell\n            10 Check Box        Creates check box cell\n            11 OwnerDrawn   Creates ownerdrawn cell\n            12 Currency     Creates currency cell\n            13 Number           Creates numeric cell\n            14 Percent      Creates percent cell\n            15 Scientific       Creates scientific cell\n            16 Custom           Creates custom cell\n\nText\nValue\n\nWidth\nWidthTwips\nHeight\nHeightTwips\n\nLeft\nRight\nTop\nBottom\n\nVisible\n\nrow\ncol\n</pre> <p>Getter Parameters:</p> Name Type Description row number Row index col number Column index <p>Type: object</p> <p>Accessors: GetCellInfo</p> <pre><code>value = SeS('SomeFarPointGridAX').GetCellInfo(row, col)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeFarPointGridAX').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#columnheaders","title":"ColumnHeaders","text":"<p>Get array of column captions.</p> <p>Type: array</p> <p>Accessors: GetColumnHeaders</p> <pre><code>value = SeS('SomeFarPointGridAX').GetColumnHeaders()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#columnindex","title":"ColumnIndex","text":"<p>Get column index by name.</p> <p>Getter Parameters:</p> Name Type Description colName string Column name <p>Type: number</p> <p>Accessors: GetColumnIndex</p> <pre><code>value = SeS('SomeFarPointGridAX').GetColumnIndex(colName)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#columninfo","title":"ColumnInfo","text":"<p>Returns object with following fields.</p> <pre>\nHeader - Column caption, if any\nWidth - Width in pixels\nWidthTwips - Width in TWIPs\nHidden\nIndex\nVisible\n</pre> <p>Getter Parameters:</p> Name Type Description col number Column index <p>Type: object</p> <p>Accessors: GetColumnInfo</p> <pre><code>value = SeS('SomeFarPointGridAX').GetColumnInfo(col)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#gridinfo","title":"GridInfo","text":"<p>Returns object with following fields.</p> <pre>\nActiveCol\nActiveRow\nColCount\nRowCount\n\nEnabled\nVisible\n\nTop\nBottom\nHeight\nWidth\n\nRect [Top, Right, Bottom, Left]\n\nLeft\nRight\n\nhWnd\n\nTopRow\nLeftCol\n</pre> <p>Type: object</p> <p>Accessors: GetGridInfo</p> <pre><code>value = SeS('SomeFarPointGridAX').GetGridInfo()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeFarPointGridAX').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#rowheaders","title":"RowHeaders","text":"<p>Get array of row captions.</p> <p>Type: array</p> <p>Accessors: GetRowHeaders</p> <pre><code>value = SeS('SomeFarPointGridAX').GetRowHeaders()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#rowinfo","title":"RowInfo","text":"<p>Returns object with following fields.</p> <pre>\nActiveCol\nActiveRow\nColCount\nRowCount\n\nEnabled\nVisible\n\nTop\nBottom\nHeight\nWidth\n\nRect [Top, Right, Bottom, Left]\n\nLeft\nRight\n\nhWnd\n\nTopRow\nLeftCol\n</pre> <p>Getter Parameters:</p> Name Type Description row number Row index <p>Type: object</p> <p>Accessors: GetRowInfo</p> <pre><code>value = SeS('SomeFarPointGridAX').GetRowInfo(row)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#selectedcells","title":"SelectedCells","text":"<p>Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separatorOptional. cellSep string cell separatorOptional. <p>Type: string</p> <p>Accessors: GetSelectedCells</p> <pre><code>value = SeS('SomeFarPointGridAX').GetSelectedCells(asArray, rowcolSep, cellSep)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn, SetSelectedColumn</p> <pre><code>value = SeS('SomeFarPointGridAX').GetSelectedColumn()\n\nSeS('SomeFarPointGridAX').SetSelectedColumn(col)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow, SetSelectedRow</p> <pre><code>value = SeS('SomeFarPointGridAX').GetSelectedRow()\n\nSeS('SomeFarPointGridAX').SetSelectedRow(row)\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#selectedrowscount","title":"SelectedRowsCount","text":"<p>Get number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowsCount</p> <pre><code>value = SeS('SomeFarPointGridAX').GetSelectedRowsCount()\n</code></pre> <p></p>"},{"location":"Libraries/FarPointGridAX/#text","title":"Text","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeFarPointGridAX').GetText(row, col)\n\nSeS('SomeFarPointGridAX').SetText(col, row, value)\n</code></pre>"},{"location":"Libraries/FarPointGridAX/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/FarPointGridAX/#doactivatecell","title":"DoActivateCell","text":"<p>Make specified cell active</p> <pre><code>SeS('SomeFarPointGridAX').DoActivateCell(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number Column to use col number Column to use <p></p> <p> </p>"},{"location":"Libraries/FarPointGridAX/#doclearcell","title":"DoClearCell","text":"<p>Clear specified cell range</p> <pre><code>SeS('SomeFarPointGridAX').DoClearCell(col1, row1, col2, row2)\n</code></pre> <p>Parameters:</p> Name Type Description col1 number Column to use row1 number Column to use col2 number Column to use row2 number Column to use <p></p> <p> </p>"},{"location":"Libraries/FarPointGridAX/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeFarPointGridAX').DoClickCell(col, row, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description col number Zero-based index of the column. row number Zero-based index if the row. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/FarPointGridAX/#doexportgrid","title":"DoExportGrid","text":"<p>Save Grid data to file</p> <pre><code>SeS('SomeFarPointGridAX').DoExportGrid(fileName, type)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Path to destination file type string Export file format (EXCEL, HTML, XML). Empty (\"\") for tab-separated text Possible values: \"EXCEL\", \"HTML\", \"XML\", \"\"Optional, Default: \"L\". <p></p> <p> </p>"},{"location":"Libraries/FarPointGridAX/#dofulltext","title":"DoFullText","text":"<p>Return whole grid as text</p> <pre><code>SeS('SomeFarPointGridAX').DoFullText(saveToFile, fileName)\n</code></pre> <p>Parameters:</p> Name Type Description saveToFile boolean 'true' if you need to have copy of the text in the file fileName string Path to destination file <p></p>"},{"location":"Libraries/File/","title":"File","text":"<p>File object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/File/#action-summary","title":"Action Summary","text":"Action Description Append Appends text to a file. Copy Copy file <code>srcFileName</code> to <code>dstFileOrFolder</code>. CreateFolder Creates a folder. Delete Deletes a file. DeleteFolder Deletes a folder. Exists Checks if file exists or not. Find <p>Find files in folder using wildcard pattern (including * and ?). FolderExists Checks if folder exists. FolderInfo Gets information about a folder. Include Includes code from a file. IncludeOnce Includes code from a file if it was not included earlier. Info Gets information about a file. Read Reads UTF-8 encoded text file. ResolvePath Finds the file in test folders and calculates its absolute path. Touch Sets file modification time to current time. Write Writes text file."},{"location":"Libraries/File/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/File/#append","title":"Append","text":"<p>Appends text to a file.</p> <pre><code>File.Append(fileName, text)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to append text. text string Text to append to the file. <p></p> <p> </p>"},{"location":"Libraries/File/#copy","title":"Copy","text":"<p>Copy file <code>srcFileName</code> to <code>dstFileOrFolder</code>. If destination file exists, it gets overwritten. Requires Rapise 8.0+.</p> <pre><code>File.Copy(srcFileName, dstFileOrFolder)\n</code></pre> <p>Parameters:</p> Name Type Description srcFileName string Character string file specification, which can include wildcard characters, for one or more files to be copied. dstFileOrFolder string Character string destination where the file or files from source are to be copied. Wildcard characters are not allowed. <p>Returns:</p> <p>true if succeeded, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#createfolder","title":"CreateFolder","text":"<p>Creates a folder.</p> <pre><code>File.CreateFolder(folderPath)\n</code></pre> <p>Parameters:</p> Name Type Description folderPath string Path to a folder. <p></p> <p> </p>"},{"location":"Libraries/File/#delete","title":"Delete","text":"<p>Deletes a file.</p> <pre><code>File.Delete(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to delete. <p></p> <p> </p>"},{"location":"Libraries/File/#deletefolder","title":"DeleteFolder","text":"<p>Deletes a folder.</p> <pre><code>File.DeleteFolder(folderPath)\n</code></pre> <p>Parameters:</p> Name Type Description folderPath string Path to a folder. <p></p> <p> </p>"},{"location":"Libraries/File/#exists","title":"Exists","text":"<p>Checks if file exists or not.</p> <pre><code>File.Exists(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to check. <p>Returns:</p> <p>true if file exists, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#find","title":"Find","text":"<p>Find files in folder using wildcard pattern (including * and ?).</p> <pre>\nI.e. File.Find(\"c:/Temp\", \"*.txt\", true) may return\n  C:\\Temp\\file1.txt\n  C:\\Temp\\SubFolder\\file2.txt\n  C:\\Temp\\SubFolder2\\file3.txt\n  C:\\Temp\\SubFolder2\\file4.txt\n\nResult may be converted to array like that:\nvar arrFiles = File.Find(\"c:/Temp\", \"*.txt\", true).split('\\n');\n</pre> <pre><code>File.Find(path, searchPattern, recursive, firstOnly, files, folders)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path to a folder to search in. searchPattern string Search pattern (may include * and ? wildcards, but no regexp). recursive boolean 'true' for folder and subfolders.Optional, Default: \"false\". firstOnly boolean Return only first matching item (if any).Optional, Default: \"false\". files boolean Return matching files.Optional, Default: \"true\". folders boolean Return matching folders.Optional, Default: \"false\". <p>Returns:</p> <p>string: \\n-separated string where each line is a path to the found item.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#folderexists","title":"FolderExists","text":"<p>Checks if folder exists.</p> <pre><code>File.FolderExists(folderPath)\n</code></pre> <p>Parameters:</p> Name Type Description folderPath string Path to a folder. <p>Returns:</p> <p>true if folder exists, false - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#folderinfo","title":"FolderInfo","text":"<p>Gets information about a folder.</p> <pre><code>File.FolderInfo(folderPath)\n</code></pre> <p>Parameters:</p> Name Type Description folderPath string Path to a folder. <p>Returns:</p> <p>Folder object as described here https://msdn.microsoft.com/en-us/library/1c87day3%28v=vs.84%29.aspx e.g. Path, SubFolders and Files enumeration.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#include","title":"Include","text":"<p>Includes code from a file. Normally used together with eval statement, i.e.: <code>eval( File.Include('myfile.js') )</code></p> <pre><code>File.Include(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to load. <p>Returns:</p> <p>Contents of the source file for evaluation.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#includeonce","title":"IncludeOnce","text":"<p>Includes code from a file if it was not included earlier. Normally used together with eval statement, i.e.: <code>eval( File.IncludeOnce('myfile.js') )</code></p> <pre><code>File.IncludeOnce(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to load. <p>Returns:</p> <p>Contents of the source file for evaluation.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#info","title":"Info","text":"<p>Gets information about a file.</p> <pre><code>File.Info(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file. <p>Returns:</p> <p>File object as described here https://msdn.microsoft.com/en-us/library/1ft05taf%28v=vs.84%29.aspx e.g. DateLastModified, Size, Type, Name, Path.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#read","title":"Read","text":"<p>Reads UTF-8 encoded text file.</p> <pre><code>File.Read(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to read. <p>Returns:</p> <p>Contents of the text file as string.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#resolvepath","title":"ResolvePath","text":"<p>Finds the file in test folders and calculates its absolute path.</p> <pre><code>File.ResolvePath(fileName, relTo)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to resolve path. relTo string Resolve path relative to a given File or Dir.Optional. <p>Returns:</p> <p>Absolute path of the file.</p> <p></p> <p> </p>"},{"location":"Libraries/File/#touch","title":"Touch","text":"<p>Sets file modification time to current time.</p> <pre><code>File.Touch(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to touch. <p></p> <p> </p>"},{"location":"Libraries/File/#write","title":"Write","text":"<p>Writes text file.</p> <pre><code>File.Write(fileName, text)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of the file to write. text string Text to write into the file. <p></p>"},{"location":"Libraries/GWTCheckBox/","title":"GWTCheckBox","text":"<p>GWT CheckBox.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTCheckBoxBehavior</p>"},{"location":"Libraries/GWTCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/GWTCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/GWTCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeGWTCheckBox').GetChecked()\n</code></pre>"},{"location":"Libraries/GWTCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeGWTCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTDatePicker/","title":"GWTDatePicker","text":"<p>GWT DatePicker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTDatePickerBehavior</p>"},{"location":"Libraries/GWTDatePicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/GWTDatePicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/GWTDatePicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTDatePicker/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeGWTDatePicker').GetMonth()\n</code></pre>"},{"location":"Libraries/GWTDatePicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTDatePicker/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeGWTDatePicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/GWTDatePicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeGWTDatePicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/GWTDatePicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeGWTDatePicker').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number New date to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/GWTDecoratedStackPanel/","title":"GWTDecoratedStackPanel","text":"<p>GWT Decorated StackPanel.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTDecoratedStackPanelBehavior</p>"},{"location":"Libraries/GWTDecoratedStackPanel/#action-summary","title":"Action Summary","text":"Action Description DoSelect Selects specified panel."},{"location":"Libraries/GWTDecoratedStackPanel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTDecoratedStackPanel/#doselect","title":"DoSelect","text":"<p>Selects specified panel.</p> <pre><code>SeS('SomeGWTDecoratedStackPanel').DoSelect(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Panel name to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtComboBox/","title":"GWTExtComboBox","text":"<p>GWT-Ext ComboBox.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtComboBoxBehavior</p>"},{"location":"Libraries/GWTExtComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Text of the selected item in a single string. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/GWTExtComboBox/#action-summary","title":"Action Summary","text":"Action Description DoExpand Expands the combobox. DoSelectItem Selects an item of this object."},{"location":"Libraries/GWTExtComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtComboBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeGWTExtComboBox').GetSelectedIndex()\n\nSeS('SomeGWTExtComboBox').SetSelectedIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtComboBox/#selecteditem","title":"SelectedItem","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem, SetSelectedItem</p> <pre><code>value = SeS('SomeGWTExtComboBox').GetSelectedItem()\n\nSeS('SomeGWTExtComboBox').SetSelectedItem(name)\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtComboBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeGWTExtComboBox').GetText()\n\nSeS('SomeGWTExtComboBox').SetText(name)\n</code></pre>"},{"location":"Libraries/GWTExtComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtComboBox/#doexpand","title":"DoExpand","text":"<p>Expands the combobox.</p> <pre><code>SeS('SomeGWTExtComboBox').DoExpand(x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeGWTExtComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtDatePicker/","title":"GWTExtDatePicker","text":"<p>GWT-Ext DatePicker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtDatePickerBehavior</p>"},{"location":"Libraries/GWTExtDatePicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/GWTExtDatePicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/GWTExtDatePicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtDatePicker/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeGWTExtDatePicker').GetMonth()\n</code></pre>"},{"location":"Libraries/GWTExtDatePicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtDatePicker/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeGWTExtDatePicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtDatePicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeGWTExtDatePicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtDatePicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeGWTExtDatePicker').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number New date to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/GWTExtGrid/","title":"GWTExtGrid","text":"<p>GWT-Ext Grid.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtGridBehavior</p>"},{"location":"Libraries/GWTExtGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/GWTExtGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell"},{"location":"Libraries/GWTExtGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeGWTExtGrid').GetCell(/**number*/row, /**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeGWTExtGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeGWTExtGrid').GetColumnName(/**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeGWTExtGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeGWTExtGrid').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeGWTExtGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeGWTExtGrid').GetText()\n</code></pre>"},{"location":"Libraries/GWTExtGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeGWTExtGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/GWTExtMenuBar/","title":"GWTExtMenuBar","text":"<p>GWT-Ext MenuBar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtMenuBarBehavior</p>"},{"location":"Libraries/GWTExtMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/GWTExtMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeGWTExtMenuBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtTabPanel/","title":"GWTExtTabPanel","text":"<p>GWT-Ext Tab.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtTabPanelBehavior</p>"},{"location":"Libraries/GWTExtTabPanel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Number of tabs in the panel GetItemsCount SelectedIndex Index of the selected tab GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/GWTExtTabPanel/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/GWTExtTabPanel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtTabPanel/#itemscount","title":"ItemsCount","text":"<p>Number of tabs in the panel</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeGWTExtTabPanel').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTabPanel/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected tab</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeGWTExtTabPanel').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTabPanel/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeGWTExtTabPanel').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/GWTExtTabPanel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtTabPanel/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeGWTExtTabPanel').DoSelectTab(name, x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description name string | number Tab name to select x number X-coordinate of location relative to object's left border y number Y-coordinate of location relative to object's top border forceEvent boolean pass 'true' to force browser event without actual mouse click.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtToggleButton/","title":"GWTExtToggleButton","text":"<p>GWT-Ext ToggleButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtToggleButtonBehavior</p>"},{"location":"Libraries/GWTExtToggleButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/GWTExtToggleButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/GWTExtToggleButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtToggleButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeGWTExtToggleButton').GetChecked()\n</code></pre>"},{"location":"Libraries/GWTExtToggleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtToggleButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeGWTExtToggleButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtToolbar/","title":"GWTExtToolbar","text":"<p>GWT-Ext Toolbar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtToolbarBehavior</p>"},{"location":"Libraries/GWTExtToolbar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Clicks specified element of the ribbon"},{"location":"Libraries/GWTExtToolbar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtToolbar/#doclickitem","title":"DoClickItem","text":"<p>Clicks specified element of the ribbon</p> <pre><code>SeS('SomeGWTExtToolbar').DoClickItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string Name of an item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTExtTree/","title":"GWTExtTree","text":"<p>GWT-Ext Tree.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTExtTreeBehavior</p>"},{"location":"Libraries/GWTExtTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText"},{"location":"Libraries/GWTExtTree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node."},{"location":"Libraries/GWTExtTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTExtTree/#childrencount","title":"ChildrenCount","text":"<p>Children count of the current node in the tree.</p> <p>Type: number</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeGWTExtTree').GetChildrenCount()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTree/#expanded","title":"Expanded","text":"<p>Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf.</p> <p>Type: number</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeGWTExtTree').GetExpanded()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTree/#nodeindex","title":"NodeIndex","text":"<p>Zero based index of the current node. Use DoFindNode to set current node.</p> <p>Type: number</p> <p>Accessors: GetNodeIndex</p> <pre><code>value = SeS('SomeGWTExtTree').GetNodeIndex()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTree/#nodetext","title":"NodeText","text":"<p>Text of the current node. Use DoFindNode to set current node.</p> <p>Type: string</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeGWTExtTree').GetNodeText()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTree/#selected","title":"Selected","text":"<p>Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeGWTExtTree').GetSelected()\n</code></pre> <p></p>"},{"location":"Libraries/GWTExtTree/#selectednodetext","title":"SelectedNodeText","text":"<p>Text of the selected node.</p> <p>Type: string</p> <p>Accessors: GetSelectedNodeText</p> <pre><code>value = SeS('SomeGWTExtTree').GetSelectedNodeText()\n</code></pre>"},{"location":"Libraries/GWTExtTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTExtTree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeGWTExtTree').DoClickNode(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeGWTExtTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtTree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeGWTExtTree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtTree/#dofindchild","title":"DoFindChild","text":"<p>Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used.</p> <pre><code>SeS('SomeGWTExtTree').DoFindChild(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtTree/#dofindnode","title":"DoFindNode","text":"<p>Searches for specific node in the tree and remembers it as the current node.</p> <pre><code>SeS('SomeGWTExtTree').DoFindNode(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/GWTExtTree/#dogetpath","title":"DoGetPath","text":"<p>Returns path to the current node.</p> <pre><code>SeS('SomeGWTExtTree').DoGetPath(pathType, separator)\n</code></pre> <p>Parameters:</p> Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string: Path to the current node</p> <p></p>"},{"location":"Libraries/GWTMenuBar/","title":"GWTMenuBar","text":"<p>GWT MenuBar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTMenuBarBehavior</p>"},{"location":"Libraries/GWTMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/GWTMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeGWTMenuBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTPushButton/","title":"GWTPushButton","text":"<p>GWT PushButton. Use DoClick() to push it.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTPushButtonBehavior</p>"},{"location":"Libraries/GWTPushButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Disabled Disable state of the button. GetDisabled"},{"location":"Libraries/GWTPushButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTPushButton/#disabled","title":"Disabled","text":"<p>Disable state of the button.</p> <p>Type: boolean</p> <p>Accessors: GetDisabled</p> <pre><code>value = SeS('SomeGWTPushButton').GetDisabled()\n</code></pre>"},{"location":"Libraries/GWTRadio/","title":"GWTRadio","text":"<p>GWT Radio.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTRadioBehavior</p>"},{"location":"Libraries/GWTRadio/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/GWTRadio/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/GWTRadio/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTRadio/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeGWTRadio').GetChecked()\n</code></pre>"},{"location":"Libraries/GWTRadio/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTRadio/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeGWTRadio').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTStackPanel/","title":"GWTStackPanel","text":"<p>GWT StackPanel.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTStackPanelBehavior</p>"},{"location":"Libraries/GWTStackPanel/#action-summary","title":"Action Summary","text":"Action Description DoSelect Selects specified panel."},{"location":"Libraries/GWTStackPanel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTStackPanel/#doselect","title":"DoSelect","text":"<p>Selects specified panel.</p> <pre><code>SeS('SomeGWTStackPanel').DoSelect(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Panel name to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTToggleButton/","title":"GWTToggleButton","text":"<p>GWT ToggleButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTToggleButtonBehavior</p>"},{"location":"Libraries/GWTToggleButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/GWTToggleButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/GWTToggleButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTToggleButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeGWTToggleButton').GetChecked()\n</code></pre>"},{"location":"Libraries/GWTToggleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTToggleButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeGWTToggleButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/GWTTree/","title":"GWTTree","text":"<p>GWT Tree.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: GWTTreeBehavior</p>"},{"location":"Libraries/GWTTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText"},{"location":"Libraries/GWTTree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node."},{"location":"Libraries/GWTTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/GWTTree/#childrencount","title":"ChildrenCount","text":"<p>Children count of the current node in the tree.</p> <p>Type: number</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeGWTTree').GetChildrenCount()\n</code></pre> <p></p>"},{"location":"Libraries/GWTTree/#expanded","title":"Expanded","text":"<p>Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf.</p> <p>Type: number</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeGWTTree').GetExpanded()\n</code></pre> <p></p>"},{"location":"Libraries/GWTTree/#nodeindex","title":"NodeIndex","text":"<p>Zero based index of the current node. Use DoFindNode to set current node.</p> <p>Type: number</p> <p>Accessors: GetNodeIndex</p> <pre><code>value = SeS('SomeGWTTree').GetNodeIndex()\n</code></pre> <p></p>"},{"location":"Libraries/GWTTree/#nodetext","title":"NodeText","text":"<p>Text of the current node. Use DoFindNode to set current node.</p> <p>Type: string</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeGWTTree').GetNodeText()\n</code></pre> <p></p>"},{"location":"Libraries/GWTTree/#selected","title":"Selected","text":"<p>Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeGWTTree').GetSelected()\n</code></pre> <p></p>"},{"location":"Libraries/GWTTree/#selectednodetext","title":"SelectedNodeText","text":"<p>Text of the selected node.</p> <p>Type: string</p> <p>Accessors: GetSelectedNodeText</p> <pre><code>value = SeS('SomeGWTTree').GetSelectedNodeText()\n</code></pre>"},{"location":"Libraries/GWTTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/GWTTree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeGWTTree').DoClickNode(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeGWTTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTTree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeGWTTree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/GWTTree/#dofindchild","title":"DoFindChild","text":"<p>Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used.</p> <pre><code>SeS('SomeGWTTree').DoFindChild(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/GWTTree/#dofindnode","title":"DoFindNode","text":"<p>Searches for specific node in the tree and remembers it as the current node.</p> <pre><code>SeS('SomeGWTTree').DoFindNode(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/GWTTree/#dogetpath","title":"DoGetPath","text":"<p>Returns path to the current node.</p> <pre><code>SeS('SomeGWTTree').DoGetPath(pathType, separator)\n</code></pre> <p>Parameters:</p> Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string: Path to the current node</p> <p></p>"},{"location":"Libraries/Generator/","title":"Generator","text":"<p>Use Generator object to produce unique and formatted data input. Requires Rapise 7.2+</p>"},{"location":"Libraries/Generator/#action-summary","title":"Action Summary","text":"Action Description Create Creates generator object in Spira. Format Formats string according to a template. GetNextValue Calculates next value of the generator according to a template. RandomString Generates a random alphanumeric string of a given length."},{"location":"Libraries/Generator/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Generator/#create","title":"Create","text":"<p>Creates generator object in Spira. To get next value from the generator use <code>GetNextValue</code>. Generator object can be used by parallel tests and simultaneously by different users.</p> <pre><code>Generator.Create(name, type, value, projectNameOrId)\n</code></pre> <p>Parameters:</p> Name Type Description name string Unique name of the generator. type string Type of the generator. Supported types: increment. value string | number Initial value of the generator. projectNameOrId string | number Name or ID of a Spira project that should host the generator. <p>Returns:</p> <p>number: ID of the generator or 0 in the case of error</p> <p></p> <p> </p>"},{"location":"Libraries/Generator/#format","title":"Format","text":"<p>Formats string according to a template.</p> <p>Supported patterns:</p> Pattern Description Example # Digit 0-9 3 dd Day of month (1-28) 21 mm Month number 10 yy 00-99 75 yyyy Year (1950-2000) 1993 GUID GUID 00eccc37-6802-9adf-22f6-b376826d73c7 DAY Mon-Sat Fri NAME Random name Belinda BOYNAMES Random male name William GIRLNAMES Random female name Olivia SURNAME Random last name Keller MONTH Jan-Dec Apr COLOR Color Green CAR Car vendor Mazda STREET Random street name Main Street STATE State name Arkansas STATECODE State code AR CITY Random city name Esmont COMPANY Random company name Earthmark <pre><code>Generator.Format(template)\n</code></pre> <p>Parameters:</p> Name Type Description template string Template string. <p>Returns:</p> <p>string | number: Value generated using a template.</p> <p></p> <p> </p>"},{"location":"Libraries/Generator/#getnextvalue","title":"GetNextValue","text":"<p>Calculates next value of the generator according to a template. The template can be empty, can contain {value} placeholder or be a function.</p> <pre><code>Generator.GetNextValue(name, template, projectNameOrId)\n</code></pre> <p>Parameters:</p> Name Type Description name string Unique name of the generator. template string | function Template for the value to return. If template is empty then generated value is returned as is. If it is a string then generated value replaces placeholder {value}. Template can be a function that receives the next value and calculates the value to return. projectNameOrId string | number Name or ID of a Spira project that hosts the generator. <p>Returns:</p> <p>string | number: Next generated value or null</p> <p></p> <p> </p>"},{"location":"Libraries/Generator/#randomstring","title":"RandomString","text":"<p>Generates a random alphanumeric string of a given length. Requires Rapise 8.1+</p> <pre><code>Generator.RandomString(length)\n</code></pre> <p>Parameters:</p> Name Type Description length number Length of the string to return. <p>Returns:</p> <p>string: Generated string.</p> <p></p>"},{"location":"Libraries/GlassMouseGrabProvider%24Proxy/","title":"GlassMouseGrabProvider$Proxy","text":"<p>Oracle Forms GlassMouseGrabProvider$Proxy.</p> <p>UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/GlassMouseGrabProvider/","title":"GlassMouseGrabProvider$Proxy","text":"<p>Oracle Forms GlassMouseGrabProvider$Proxy.</p> <p>UI element class: oracle.ewt.event.tracking.GlassMouseGrabProvider$Proxy</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/Global/","title":"Global","text":"<p>Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/Global/#action-summary","title":"Action Summary","text":"Action Description _DoLoadObjects DoAnalogPlay Performs Analog Playback of events recorded in a file. DoAppActivate Activates window with the specified title. DoClick Performs mouse click at the current position. DoCmd Executes a BAT/CMD file specified in cmdLine. DoCompareJsObjects Compares two JavaScript objects and prints differences to the report. DoDecrypt Decrypts a piece of text. DoEncrypt Encrypts a piece of text. DoFindProcess Finds a process by executable path and, maybe, part of command line. DoHorizontalScroll Simulates mouse horizontal wheel scroll gesture. DoInvokeTest Invokes another test (aka subtest). DoInvokeTestParallel Executes specified test in few parallel threads. DoKillByName Terminates a given process. DoKillByPid Terminates a given process or the last process created by DoLaunch if 'pid' is not specified. DoLaunch Executes a command specified by the cmdLine parameter. DoLoadObjects Loads objects from external .objects.js file. DoMaximizeWindow Maximizes window that matches given title and class name. DoMessageBox Shows message box (popup message) to a user. DoMinimizeWindow Minimizes window that matches given title and class name. DoMouseMove Moves mouse to the specified position. DoPlayManual Executes a manual test. DoRestoreWindow Restores window that matches given title and class name. DoRunTest Executes a given test in isolated environment (new process is created). DoRunTestSet Executes a test set. DoSendKeys Sends series of keystrokes to a currently focused application. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys). DoSetScreenResolution Sets screen resolution. DoSleep Delays/pauses execution for a given number of milliseconds (1000 = 1 second). DoTrim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. DoTypePassword Types encrypted password into a control which has a focus. DoVerticalScroll Simulates mouse vertical wheel scroll gesture. DoWaitFor Waits for object specified by objectId to become available. DoWaitForProperty Waits for specified value of object's property. DoWaitForWindow Waits for window specified by title/class name to become available. GetClipboardText Reads text stored in the windows clipboard. GetCurrentDir Gets current directory path. GetFileAsByteArray Reads file and returns its content as array of bytes. GetFirstDayOfWeek Returns first day of week for current user. GetFullPath Constructs an absolute file name using working directory (WORKDIR) of the test. GetOsOwner Reads OS registered owner from the registry. GetOsPath Returns OS root path. GetOsType Reads OS type from the registry. GetOsVersion Reads OS service pack version from the registry. GetProperty Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise. GetRapiseVersion Reads Rapise version. GetSpecialFolderPath Returns path to a special folder specified by one of possible values. GetTestCasePath Finds full path to a Test Case. SetClipboardText Updates clipboard text SetConfigPath Set default path for config file instead of default %WORKDIR%\\Config.json. SetFileAsByteArray Creates or rewrites file and fills with contents of the provided byte array. SetProperty Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise. SetWindowPosition Change position of the window with the specified title (and class, if specified). SetWindowSize Change size of the window with the specified title (and class, if specified)."},{"location":"Libraries/Global/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Global/#_doloadobjects","title":"_DoLoadObjects","text":"<pre><code>Global._DoLoadObjects(objectsFilePath, checkDuplicates, addToMap)\n</code></pre> <p>Parameters:</p> Name Type Description objectsFilePath string checkDuplicates bool addToMap bool <p></p> <p> </p>"},{"location":"Libraries/Global/#doanalogplay","title":"DoAnalogPlay","text":"<p>Performs Analog Playback of events recorded in a file.</p> <pre><code>Global.DoAnalogPlay(path, left, top)\n</code></pre> <p>Parameters:</p> Name Type Description path string This is a path to a file with recorded analog events. left number X-coordinate of top-left corner of the analog area. top number Y-coordinate of the top-left corner of the analog area. <p></p> <p> </p>"},{"location":"Libraries/Global/#doappactivate","title":"DoAppActivate","text":"<p>Activates window with the specified title. I.e. Global.DoAppActivate(\"Calculator\") will bring running instance (if any) of Windows Calculator to the foreground.</p> <pre><code>Global.DoAppActivate(title)\n</code></pre> <p>Parameters:</p> Name Type Description title string Title of an application window. <p>See:</p> <p>MSDN Article for AppActivate</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doclick","title":"DoClick","text":"<p>Performs mouse click at the current position.</p> <pre><code>Global.DoClick(clickType)\n</code></pre> <p>Parameters:</p> Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p></p> <p> </p>"},{"location":"Libraries/Global/#docmd","title":"DoCmd","text":"<p>Executes a BAT/CMD file specified in cmdLine. Optionally one may specify working dir. Requires Rapise 6.4+</p> <pre><code>Global.DoCmd(cmdLine, wrkDir, wait, show)\n</code></pre> <p>Parameters:</p> Name Type Description cmdLine string Command line to execute. Contains path to a batch file and parameters. wrkDir string Working directory. By default it is a directory of the test.Optional, Default: \".\". wait boolean If <code>true</code> - Wait until batch process exit. If <code>false</code> - immediately proceed to the next test steps.Optional, Default: \"true\". show boolean If <code>true</code> - maximize the command line window. If <code>false</code> - minimize the command line window.Optional, Default: \"true\". <p>Returns:</p> <p>number: Error code returned by the batch process. 0 - indicates success if <code>wait</code> is <code>true</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#docomparejsobjects","title":"DoCompareJsObjects","text":"<p>Compares two JavaScript objects and prints differences to the report.</p> <pre><code>Global.DoCompareJsObjects(msg, obj1, obj2)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Message to write into report. obj1 object First object. obj2 object Second object. <p>Returns:</p> <p>boolean: 'true' if two objects are equal, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dodecrypt","title":"DoDecrypt","text":"<p>Decrypts a piece of text.</p> <pre><code>Global.DoDecrypt(encryptedText)\n</code></pre> <p>Parameters:</p> Name Type Description encryptedText string Text to decrypt. <p>Returns:</p> <p>string: Decrypted text.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doencrypt","title":"DoEncrypt","text":"<p>Encrypts a piece of text.</p> <pre><code>Global.DoEncrypt(plainText)\n</code></pre> <p>Parameters:</p> Name Type Description plainText string Text to encrypt. <p>Returns:</p> <p>string: Encrypted text.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dofindprocess","title":"DoFindProcess","text":"<p>Finds a process by executable path and, maybe, part of command line. Requires Rapise 8.1.29.39+</p> <pre><code>Global.DoFindProcess(exeName, partOfCmd)\n</code></pre> <p>Parameters:</p> Name Type Description exeName string Command line to an executable with parameters. partOfCmd string Command line (or regular expression)Optional, Default: \"\". <p>Returns:</p> <p>number: ID of the new process (positive number) or an error code (negative number)</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dohorizontalscroll","title":"DoHorizontalScroll","text":"<p>Simulates mouse horizontal wheel scroll gesture. Requires Rapise 6.5+</p> <pre><code>Global.DoHorizontalScroll(scrollAmountInClicks)\n</code></pre> <p>Parameters:</p> Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left. <p></p> <p> </p>"},{"location":"Libraries/Global/#doinvoketest","title":"DoInvokeTest","text":"<p>Invokes another test (aka subtest). The subtest should have the set of libraries as calling test. Otherwise it may lead to a conflict.</p> <pre><code>Global.DoInvokeTest(pathToTest, optionalParams)\n</code></pre> <p>Parameters:</p> Name Type Description pathToTest string Path to .sstest file. optionalParams object Parameters to pass into entry point Test() function of the subtest. I.e. it is called as Test(optionalParams).Optional, Default: \"[object Object]\". <p>Returns:</p> <p>boolean: 'true' if the test passed, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doinvoketestparallel","title":"DoInvokeTestParallel","text":"<p>Executes specified test in few parallel threads. Pass additional arguments in 'threads' param</p> <pre><code>DoInvokeTestParallel(\n    \"t2/t2.sstest\",\n    {\n        \"THR01\": {\n            g_browserLibrary: 'Selenium - Chrome'\n        },\n        \"THR02\": {\n            g_browserLibrary: 'Selenium - Edge'\n        }\n    }\n);\n</code></pre> <pre><code>Global.DoInvokeTestParallel(testPath, threads, commonParams)\n</code></pre> <p>Parameters:</p> Name Type Description testPath string Path to .sstest to execute. threads object Structure, defining parallel threads to execute. commonParams object Object containing {name:'value',...} pairs to be passed as parameters to all tests.Optional. <p>Returns:</p> <p>boolean: true, if execution finished with exit code 0 (all tests executed successfully)</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dokillbyname","title":"DoKillByName","text":"<p>Terminates a given process.</p> <pre><code>Global.DoKillByName(processName)\n</code></pre> <p>Parameters:</p> Name Type Description processName string Executable name to kill (such as 'iexplore.exe'). <p>Returns:</p> <p>boolean: 'true' if the process was terminated, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dokillbypid","title":"DoKillByPid","text":"<p>Terminates a given process or the last process created by DoLaunch if 'pid' is not specified.</p> <pre><code>Global.DoKillByPid(pid)\n</code></pre> <p>Parameters:</p> Name Type Description pid number ID of the process.Optional. <p>Returns:</p> <p>boolean: 'true' if the process was terminated, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dolaunch","title":"DoLaunch","text":"<p>Executes a command specified by the cmdLine parameter. Use to start external desktop apllications. Optionally specify the working dir and window name to attach if the application is already running. Example: <code>Global.DoLaunch(\"calc.exe\")</code></p> <pre><code>Global.DoLaunch(cmdLine, wrkDir, attachIfExists, attachToWindow, wait, parentProcess)\n</code></pre> <p>Parameters:</p> Name Type Description cmdLine string Command line with the executable file name/path and parameters. wrkDir string Working directory. By default it is a directory of the test.Optional, Default: \".\". attachIfExists boolean Try to find a process with the same executable path instead of launching it.Optional, Default: \"false\". attachToWindow string When attachIfExists is 'true' this parameter may be used to specify top window name to find a process to attach to.Optional, Default: \"\". wait bool Try to find a process with the same executable path instead of launching it. Requires Rapise 8.1.29.39+Optional, Default: \"false\". parentProcess number | string Optional parent process. By default parent process will be a current script's process. May be ID or executable path to the process. Requires Rapise 8.1.29.39+Optional, Default: \"0\". <p>Returns:</p> <p>number: ID of the new process (positive number) or an error code (negative number)</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doloadobjects","title":"DoLoadObjects","text":"<p>Loads objects from external .objects.js file.</p> <pre><code>Global.DoLoadObjects(objectsFilePath)\n</code></pre> <p>Parameters:</p> Name Type Description objectsFilePath string Path to *.objects.js file. <p>Returns:</p> <p>object: saved_script_objects or null if the load was unsuccessful.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#domaximizewindow","title":"DoMaximizeWindow","text":"<p>Maximizes window that matches given title and class name. Requires Rapise 7.2+</p> <pre><code>Global.DoMaximizeWindow(title, className)\n</code></pre> <p>Parameters:</p> Name Type Description title string Title of a window to search for. Use exact value or <code>regex:</code> expression. className string Class name of a window to search for. Use exact value or <code>regex:</code> expression. Empty or null value matches any class name.Optional, Default: \"\". <p>Returns:</p> <p>boolean: <code>true</code> if window was found, otherwise <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#domessagebox","title":"DoMessageBox","text":"<p>Shows message box (popup message) to a user.</p> <p><code>buttons</code> is a value or a sum of values that specifies the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. Default value is 0.</p> <pre><code>    0 = vbOKOnly - OK button only\n    1 = vbOKCancel - OK and Cancel buttons\n    2 = vbAbortRetryIgnore - Abort, Retry, and Ignore buttons\n    3 = vbYesNoCancel - Yes, No, and Cancel buttons\n    4 = vbYesNo - Yes and No buttons\n    5 = vbRetryCancel - Retry and Cancel buttons\n    16 = vbCritical - Critical Message icon\n    32 = vbQuestion - Warning Query icon\n    48 = vbExclamation - Warning Message icon\n    64 = vbInformation - Information Message icon\n    0 = vbDefaultButton1 - First button is default\n    256 = vbDefaultButton2 - Second button is default\n    512 = vbDefaultButton3 - Third button is default\n    768 = vbDefaultButton4 - Fourth button is default\n    0 = vbApplicationModal - Application modal (the current application will not work until the user responds to the message box)\n    4096 = vbSystemModal - System modal (all applications wont work until the user responds to the message box)\n</code></pre> <p>We can divide the buttons values into four groups: The first group  (0\u20135) describes the buttons to be displayed in the message box, the second group (16, 32, 48, 64) describes the icon style, the third group (0, 256, 512, 768) indicates which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When adding numbers to create a final value for the buttons parameter, use only one number from each group.</p> <p>The function returns a number representation of a button pressed by user:</p> <pre><code>    vbOK = 1 - OK button was clicked. \n    vbCancel = 2 - Cancel button was clicked. \n    vbAbort = 3 - Abort button was clicked. \n    vbRetry = 4 - Retry button was clicked. \n    vbIgnore = 5 - Ignore button was clicked. \n    vbYes = 6 - Yes button was clicked. \n    vbNo = 7 - No button was clicked. \n</code></pre> <pre><code>Global.DoMessageBox(prompt, buttons)\n</code></pre> <p>Parameters:</p> Name Type Description prompt string Message to display. buttons number Buttons to show. Possible values: 0, 1, 2, 3, 4, 5, 16, 32, 48, 64, 0, 256, 512, 768, 0, 4096Optional, Default: \"0\". <p>Returns:</p> <p>number: A number representation of a button pressed by user.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dominimizewindow","title":"DoMinimizeWindow","text":"<p>Minimizes window that matches given title and class name. Requires Rapise 7.2+</p> <pre><code>Global.DoMinimizeWindow(title, className)\n</code></pre> <p>Parameters:</p> Name Type Description title string Title of a window to search for. Use exact value or <code>regex:</code> expression. className string Class name of a window to search for. Use exact value or <code>regex:</code> expression. Empty or null value matches any class name.Optional, Default: \"\". <p>Returns:</p> <p>boolean: <code>true</code> if window was found, otherwise <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#domousemove","title":"DoMouseMove","text":"<p>Moves mouse to the specified position.</p> <pre><code>Global.DoMouseMove(x, y, duration)\n</code></pre> <p>Parameters:</p> Name Type Description x number Absolute X-coordinate of the target mouse position. y number Absolute Y-coordinate of the target mouse position. duration number Mouse move duration (milliseconds). If 0 - do immediate move.Optional, Default: \"0\". <p></p> <p> </p>"},{"location":"Libraries/Global/#doplaymanual","title":"DoPlayManual","text":"<p>Executes a manual test. Results are shown in the report of the calling test.</p> <pre><code>Global.DoPlayManual(rmtFilePath, rmtParams)\n</code></pre> <p>Parameters:</p> Name Type Description rmtFilePath string Path to manual test (.rmt) file. rmtParams object Additional parameters to pass to the manual test executor.Optional. <p>Returns:</p> <p>boolean: 'true' if the manual test passed, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dorestorewindow","title":"DoRestoreWindow","text":"<p>Restores window that matches given title and class name. Requires Rapise 7.2+</p> <pre><code>Global.DoRestoreWindow(title, className)\n</code></pre> <p>Parameters:</p> Name Type Description title string Title of a window to search for. Use exact value or <code>regex:</code> expression. className string Class name of a window to search for. Use exact value or <code>regex:</code> expression. Empty or null value matches any class name.Optional, Default: \"\". <p>Returns:</p> <p>boolean: <code>true</code> if window was found, otherwise <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doruntest","title":"DoRunTest","text":"<p>Executes a given test in isolated environment (new process is created). Requires Rapise 8.1+.</p> <pre><code>Global.DoRunTest(testPath, optionalParams)\n</code></pre> <p>Parameters:</p> Name Type Description testPath string Path to .sstest to execute. optionalParams object Object containing {name:'value',...} pairs to be passed as parameters to the test.Optional. <p></p> <p> </p>"},{"location":"Libraries/Global/#doruntestset","title":"DoRunTestSet","text":"<p>Executes a test set. Results are shown in the report of the calling test.</p> <pre><code>Global.DoRunTestSet(testSetFilePath, testSetParams)\n</code></pre> <p>Parameters:</p> Name Type Description testSetFilePath string Path to a test set file. testSetParams object Additional parameters to pass for each test in the test set.Optional. <p></p> <p> </p>"},{"location":"Libraries/Global/#dosendkeys","title":"DoSendKeys","text":"<p>Sends series of keystrokes to a currently focused application.</p> <pre><code>Global.DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string Keystrokes, including special characters and control symbols. <p></p> <p> </p>"},{"location":"Libraries/Global/#dosendtext","title":"DoSendText","text":"<p>Sends text to the active application as is (while SendKeys also supports sending special keys). Requires Rapise 6.5+</p> <pre><code>Global.DoSendText(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to input. <p></p> <p> </p>"},{"location":"Libraries/Global/#dosetscreenresolution","title":"DoSetScreenResolution","text":"<p>Sets screen resolution. Use to run UI tests in unattended RDP sessions.</p> <pre><code>Global.DoSetScreenResolution(width, height)\n</code></pre> <p>Parameters:</p> Name Type Description width number Screen width in pixels height number Screen height in pixels <p></p> <p> </p>"},{"location":"Libraries/Global/#dosleep","title":"DoSleep","text":"<p>Delays/pauses execution for a given number of milliseconds (1000 = 1 second). Use to wait given amount of time and then continue running the test.</p> <pre><code>Global.DoSleep(millis)\n</code></pre> <p>Parameters:</p> Name Type Description millis number Number of milliseconds to wait/sleep. <p></p> <p> </p>"},{"location":"Libraries/Global/#dotrim","title":"DoTrim","text":"<p>Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.  Whitespace characters are [\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].</p> <pre><code>Global.DoTrim(str, global, trimChars)\n</code></pre> <p>Parameters:</p> Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed.Optional, Default: \"false\". trimChars string String with each char to be subject for trim.Optional. <p>Returns:</p> <p>string: Trimmed string.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dotypepassword","title":"DoTypePassword","text":"<p>Types encrypted password into a control which has a focus.</p> <pre><code>Global.DoTypePassword(encryptedPassword)\n</code></pre> <p>Parameters:</p> Name Type Description encryptedPassword string Password to type. Encrypted. <p>Returns:</p> <p>string: 'true'</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#doverticalscroll","title":"DoVerticalScroll","text":"<p>Simulates mouse vertical wheel scroll gesture. Requires Rapise 6.5+</p> <pre><code>Global.DoVerticalScroll(scrollAmountInClicks)\n</code></pre> <p>Parameters:</p> Name Type Description scrollAmountInClicks number The amount to scroll in clicks. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. <p></p> <p> </p>"},{"location":"Libraries/Global/#dowaitfor","title":"DoWaitFor","text":"<p>Waits for object specified by objectId to become available. Function returns if object was found or timeout.</p> <pre><code>Global.DoWaitFor(objectId, timeout, sleepTimeIfFound)\n</code></pre> <p>Parameters:</p> Name Type Description objectId objectid Id of an object to wait for. timeout number Maximum time to wait (milliseconds).Optional, Default: \"10000\". sleepTimeIfFound number Wait time (milliseconds) after object is found.Optional, Default: \"0\". <p>Returns:</p> <p>SeSObject | boolean: Found object or 'false'.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dowaitforproperty","title":"DoWaitForProperty","text":"<p>Waits for specified value of object's property. Function returns object handle if object was found and specified property equals to desired value or 'false'  in the case of timeout.</p> <p><code>propValue</code> may be a callback function: <pre><code>function(value)\n{\n    if (value != 'some text')\n    {\n        // if the condition is met\n        return true;\n    }\n    return false;\n}\n</code></pre> Use the callback if you need to check more complex condition than equality.</p> <pre><code>Global.DoWaitForProperty(obj, getterName, propValue, timeout, params)\n</code></pre> <p>Parameters:</p> Name Type Description obj objectid | SeSObject Id of an object to wait for or object itself. getterName string Property getter function name. propValue string | number | boolean | function Desired property value or callback function (see description). timeout number Maximum time to wait (milliseconds).Optional, Default: \"10000\". params array | string | number | boolean Parameters for property getter function.Optional. <p>Returns:</p> <p>SeSObject | boolean: Found object or 'false'.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#dowaitforwindow","title":"DoWaitForWindow","text":"<p>Waits for window specified by title/class name to become available. Function returns if window was found or timeout. Requires Rapise 7.2+</p> <pre><code>Global.DoWaitForWindow(title, className, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description title string Title of a window to wait for. Use exact value or <code>regex:</code> expression. className string Class name of a window to wait for. Use exact value or <code>regex:</code> expression. Empty or null value matches any class name.Optional, Default: \"\". timeout number Maximum time to wait (milliseconds).Optional, Default: \"10000\". <p>Returns:</p> <p>boolean: <code>true</code> if window was found, otherwise <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getclipboardtext","title":"GetClipboardText","text":"<p>Reads text stored in the windows clipboard.</p> <pre><code>Global.GetClipboardText()\n</code></pre> <p>Returns:</p> <p>string: Clipboard text</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getcurrentdir","title":"GetCurrentDir","text":"<p>Gets current directory path.</p> <pre><code>Global.GetCurrentDir()\n</code></pre> <p>Returns:</p> <p>string: Path of the current directory.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getfileasbytearray","title":"GetFileAsByteArray","text":"<p>Reads file and returns its content as array of bytes. May be useful for binary files and for passing data to web services.</p> <pre><code>Global.GetFileAsByteArray(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Filename to read (recommended to use absolute file name). <p>Returns:</p> <p>object: Array of bytes.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getfirstdayofweek","title":"GetFirstDayOfWeek","text":"<p>Returns first day of week for current user.</p> <pre><code>Global.GetFirstDayOfWeek()\n</code></pre> <p>Returns:</p> <p>number: 0 - Sunday, 1 - Monday.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getfullpath","title":"GetFullPath","text":"<p>Constructs an absolute file name using working directory (WORKDIR) of the test.</p> <pre><code>Global.GetFullPath(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of a file. <p>Returns:</p> <p>string: Absolute file name.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getosowner","title":"GetOsOwner","text":"<p>Reads OS registered owner from the registry.</p> <pre><code>Global.GetOsOwner()\n</code></pre> <p>Returns:</p> <p>string: OS registered owner.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getospath","title":"GetOsPath","text":"<p>Returns OS root path.</p> <pre><code>Global.GetOsPath()\n</code></pre> <p>Returns:</p> <p>string: OS root path without the trailing backslash, e.g. 'C:\\Windows'.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getostype","title":"GetOsType","text":"<p>Reads OS type from the registry.</p> <pre><code>Global.GetOsType()\n</code></pre> <p>Returns:</p> <p>string: OS type string.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getosversion","title":"GetOsVersion","text":"<p>Reads OS service pack version from the registry.</p> <pre><code>Global.GetOsVersion()\n</code></pre> <p>Returns:</p> <p>string: Service pack version.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getproperty","title":"GetProperty","text":"<p>Reads property value from file 'optConfig' if set, or from %WORKDIR%\\Config.json otherwise.</p> <pre><code>Global.GetProperty(name, defValue, configPath)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a property defValue string | number | boolean Default value to return if property does not existOptional. configPath string Path to options file (.json, .xlsx).Optional. <p>Returns:</p> <p>string | number | boolean: Property value. If a property does not exist then defValue is returned. If defValue is not set then null is returned.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#getrapiseversion","title":"GetRapiseVersion","text":"<p>Reads Rapise version. If 'optMinVersion' is specified, then returns true/false depending on 'optMinVersion' less than actual Rapise version.</p> <pre><code>Global.GetRapiseVersion(optMinVersion)\n</code></pre> <p>Parameters:</p> Name Type Description optMinVersion string Minimum version to checkOptional. <p>Returns:</p> <p>string: Rapise Version (i.e. 6.3.18.5), 'true' if optMinVersionRapise version. <p></p> <p> </p>"},{"location":"Libraries/Global/#getspecialfolderpath","title":"GetSpecialFolderPath","text":"<p>Returns path to a special folder specified by one of possible values. </p> Possible values: ApplicationDataThe directory that serves as a common repository for application-specific data for the current roaming user. CommonApplicationDataThe directory that serves as a common repository for application-specific data that is used by all users. CommonProgramFilesThe directory for components that are shared across applications. CookiesThe directory that serves as a common repository for Internet cookies. DesktopThe logical Desktop rather than the physical file system location. DesktopDirectoryThe directory used to physically store file objects on the desktop. FavoritesThe directory that serves as a common repository for the user's favorite items. HistoryThe directory that serves as a common repository for Internet history items. InternetCacheThe directory that serves as a common repository for temporary Internet files. LocalApplicationDataThe directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. MyComputerThe \"My Computer\" folder. MyDocumentsThe \"My Documents\" folder. MyMusicThe \"My Music\" folder. MyPicturesThe \"My Pictures\" folder. PersonalThe directory that serves as a common repository for documents. ProgramFilesThe program files directory. ProgramsThe directory that contains the user's program groups. RecentThe directory that contains the user's most recently used documents. SendToThe directory that contains the Send To menu items. StartMenuThe directory that contains the Start menu items. StartupThe directory that corresponds to the user's Startup program group. SystemThe System directory. TemplatesThe directory that serves as a common repository for document templates. <pre><code>Global.GetSpecialFolderPath(folder)\n</code></pre> <p>Parameters:</p> Name Type Description folder string Folder Id. Possible values: \"ApplicationData\", \"CommonApplicationData\", \"CommonProgramFiles\", \"Cookies\", \"Desktop\", \"DesktopDirectory\", \"Favorites\", \"History\", \"InternetCache\", \"LocalApplicationData\", \"MyComputer\", \"MyDocuments\", \"MyMusic\", \"ProgramFiles\", \"Programs\", \"Recent\", \"SendTo\", \"StartMenu\", \"Startup\", \"System\", \"Templates\" <p>Returns:</p> <p>string: System specified folder path without the trailing backslash, e.g. 'C:\\Program Files'.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#gettestcasepath","title":"GetTestCasePath","text":"<p>Finds full path to a Test Case. The Path is resolved for file path or for TC alias name.</p> <pre><code>Global.GetTestCasePath(pathToTest)\n</code></pre> <p>Parameters:</p> Name Type Description pathToTest string Path to .sstest file or Test Case alias name. <p>Returns:</p> <p>string: path to .sstest</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#setclipboardtext","title":"SetClipboardText","text":"<p>Updates clipboard text</p> <pre><code>Global.SetClipboardText(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string Text to store into clipboard. <p>Returns:</p> <p>boolean: 'true' when clipboard is set.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#setconfigpath","title":"SetConfigPath","text":"<p>Set default path for config file instead of default %WORKDIR%\\Config.json. Supports .xlsx and .json file format. This path is used by default for further calls to Global.GetProperty and Global.SetProperty</p> <pre><code>Global.SetConfigPath(defPath)\n</code></pre> <p>Parameters:</p> Name Type Description defPath string New config path, i.e. %WORKDIR%\\Config.xlsx <p>Returns:</p> <p>string: Previous config path</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#setfileasbytearray","title":"SetFileAsByteArray","text":"<p>Creates or rewrites file and fills with contents of the provided byte array.</p> <pre><code>Global.SetFileAsByteArray(fileName, bytes)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Filename to write (recommended to use absolute file name). bytes array Array of bytes to write. <p>Returns:</p> <p>number: Number of bytes written.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#setproperty","title":"SetProperty","text":"<p>Sets property value to file 'optConfig' if set, or to %WORKDIR%\\Config.json otherwise. If the file does not exist it will be created.</p> <pre><code>Global.SetProperty(name, value, configPath)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a property. value string | number | boolean Value to set. configPath string Path to options file (.json, .xlsx).Optional. <p>Returns:</p> <p>boolean: 'true' if property value set successfully, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Global/#setwindowposition","title":"SetWindowPosition","text":"<p>Change position of the window with the specified title (and class, if specified).</p> <pre><code>Global.SetWindowPosition(x, y, windowTitle, windowClass)\n</code></pre> <p>Parameters:</p> Name Type Description x number Position left offset in pixels. y number Position top offset in pixels. windowTitle string String or regular expression to match window title. windowClass string String or regular expression to match window class.Optional, Default: \"regex:.*\". <p></p> <p> </p>"},{"location":"Libraries/Global/#setwindowsize","title":"SetWindowSize","text":"<p>Change size of the window with the specified title (and class, if specified).</p> <pre><code>Global.SetWindowSize(width, height, windowTitle, windowClass)\n</code></pre> <p>Parameters:</p> Name Type Description width number New width in pixels. height number New height in pixels. windowTitle string String or regular expression to match window title. windowClass string String or regular expression to match window class.Optional, Default: \"regex:.*\". <p></p>"},{"location":"Libraries/HTML5Number/","title":"HTML5Number","text":"<p>This behavior pattern implements standard behavior for Number (SpinEdit) control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: HTML5NumberBehavior</p>"},{"location":"Libraries/HTML5Number/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue"},{"location":"Libraries/HTML5Number/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/HTML5Number/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue</p> <pre><code>value = SeS('SomeHTML5Number').GetMaxValue()\n</code></pre> <p></p>"},{"location":"Libraries/HTML5Number/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue</p> <pre><code>value = SeS('SomeHTML5Number').GetMinValue()\n</code></pre>"},{"location":"Libraries/HTML5Progress/","title":"HTML5Progress","text":"<p>This behavior pattern implements standard behavior for Progress control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: HTML5ProgressBehavior</p>"},{"location":"Libraries/HTML5Progress/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue"},{"location":"Libraries/HTML5Progress/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/HTML5Progress/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue</p> <pre><code>value = SeS('SomeHTML5Progress').GetMaxValue()\n</code></pre>"},{"location":"Libraries/HTML5Range/","title":"HTML5Range","text":"<p>This behavior pattern implements standard behavior for Range control.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: HTML5RangeBehavior</p>"},{"location":"Libraries/HTML5Range/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue"},{"location":"Libraries/HTML5Range/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/HTML5Range/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue</p> <pre><code>value = SeS('SomeHTML5Range').GetMaxValue()\n</code></pre> <p></p>"},{"location":"Libraries/HTML5Range/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue</p> <pre><code>value = SeS('SomeHTML5Range').GetMinValue()\n</code></pre>"},{"location":"Libraries/HTMLObject/","title":"HTMLObject","text":"<p>This object contains actions and properties for DOM elements of Web page.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: HTMLSeleniumBehavior</p>"},{"location":"Libraries/HTMLObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Alt Alt of the element. GetAlt Checked 'Checked' state of the element. GetChecked Class Class of the element. GetClass ClientX X-coordinate of the top left corner of the element relative to browser window. GetClientX ClientY Y-coordinate of the top left corner of the element relative to browser window. GetClientY ComputedStyle Gets the value of a given CSS property of an element, after applying active stylesheets and resolving any basic computation this value may contain. GetComputedStyle Enabled 'Enabled' state of the element. GetEnabled SetEnabled Height Height of the element. GetHeight Href HREF of the element. GetHref Id ID of the element. GetId InnerText Inner text of the element. GetInnerText Label Label of the element. GetLabel Name Name of the element. GetName NodeText Text of the element without children. GetNodeText PageTitle Title of the HTML document. GetPageTitle PageURL Location URL of the HTML document. GetPageURL Style Style of the element. GetStyle Tag Tag of the element. GetTag Text Text of the element with normalized spaces. GetText Title Title of the element. GetTitle Value Value of the element. GetValue SetValue Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the element. GetWidth X X-coordinate of the top left corner of the element. GetX XPath XPath of the element. GetXPath Y Y-coordinate of the top left corner of the element. GetY"},{"location":"Libraries/HTMLObject/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Adds selection of the specified option in the multi-select element. DoClick Clicks on HTML element (button, link). DoDblClick Double-Clicks on HTML element (button, link). DoDOMChildAt Returns n-th child (zero-based). DoDOMChildrenCount Returns number of children elements for this one. DoDOMConvert Creates a clone of this object converted to a requested type. DoDOMFindParentWithAttribute Returns parent element (if any) with given attribute matching given string or 'regex:. DoDOMGetAttribute Returns specified attribute. DoDOMGetAttributes Returns all attributes of a node. DoDOMNextSibling Returns next sibling element for this one. DoDOMParent Returns parent element having this element. DoDOMPrevSibling Return previous sibling element for this one. DoDOMQueryCss Gets array of elements matching CSS selector on this object. DoDOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoDOMQueryXPath Gets array of elements matching XPath query on this object. DoDOMRoot Returns Root element having this element. DoEnsureVisible Makes sure specified element is visible on the screen. DoGetRect Finds screen rectangle for this object. DoGetSelection Gets selected options text of a SELECT element. DoLClick Directly invokes the click method on the HTML element. DoMouseMove Moves mouse on HTML element with offset. DoRClick Right-clicks on the HTML element. DoRemoveSelection Deselects the specified option in the multi-select element. DoSelect Selects the specified element in &lt;select&gt; control. DoSendKeys Keys to send. DoSetCheck Sets specified state of check box. DoSetText Sets text for input edit or textarea."},{"location":"Libraries/HTMLObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/HTMLObject/#alt","title":"Alt","text":"<p>Alt of the element.</p> <p>Type: string</p> <p>Accessors: GetAlt</p> <pre><code>value = SeS('SomeHTMLObject').GetAlt()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#checked","title":"Checked","text":"<p>'Checked' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeHTMLObject').GetChecked()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#class","title":"Class","text":"<p>Class of the element.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeHTMLObject').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#clientx","title":"ClientX","text":"<p>X-coordinate of the top left corner of the element relative to browser window.</p> <p>Type: number</p> <p>Accessors: GetClientX</p> <pre><code>value = SeS('SomeHTMLObject').GetClientX()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#clienty","title":"ClientY","text":"<p>Y-coordinate of the top left corner of the element relative to browser window.</p> <p>Type: number</p> <p>Accessors: GetClientY</p> <pre><code>value = SeS('SomeHTMLObject').GetClientY()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#computedstyle","title":"ComputedStyle","text":"<p>Gets the value of a given CSS property of an element, after applying active stylesheets and resolving any basic computation this value may contain.</p> <p>Getter Parameters:</p> Name Type Description optFieldName string CSS property name. <p>Type: string</p> <p>Accessors: GetComputedStyle</p> <pre><code>value = SeS('SomeHTMLObject').GetComputedStyle(/**string*/optFieldName)\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled, SetEnabled</p> <pre><code>value = SeS('SomeHTMLObject').GetEnabled()\n\nSeS('SomeHTMLObject').SetEnabled(value)\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#height","title":"Height","text":"<p>Height of the element.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeHTMLObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#href","title":"Href","text":"<p>HREF of the element.</p> <p>Type: string</p> <p>Accessors: GetHref</p> <pre><code>value = SeS('SomeHTMLObject').GetHref()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#id","title":"Id","text":"<p>ID of the element.</p> <p>Type: string</p> <p>Accessors: GetId</p> <pre><code>value = SeS('SomeHTMLObject').GetId()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#innertext","title":"InnerText","text":"<p>Inner text of the element.</p> <p>Type: string</p> <p>Accessors: GetInnerText</p> <pre><code>value = SeS('SomeHTMLObject').GetInnerText()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#label","title":"Label","text":"<p>Label of the element.</p> <p>Type: string</p> <p>Accessors: GetLabel</p> <pre><code>value = SeS('SomeHTMLObject').GetLabel()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#name","title":"Name","text":"<p>Name of the element.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeHTMLObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#nodetext","title":"NodeText","text":"<p>Text of the element without children.</p> <p>Type: string</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeHTMLObject').GetNodeText()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#pagetitle","title":"PageTitle","text":"<p>Title of the HTML document.</p> <p>Type: string</p> <p>Accessors: GetPageTitle</p> <pre><code>value = SeS('SomeHTMLObject').GetPageTitle()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#pageurl","title":"PageURL","text":"<p>Location URL of the HTML document.</p> <p>Type: string</p> <p>Accessors: GetPageURL</p> <pre><code>value = SeS('SomeHTMLObject').GetPageURL()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#style","title":"Style","text":"<p>Style of the element.</p> <p>Type: string</p> <p>Accessors: GetStyle</p> <pre><code>value = SeS('SomeHTMLObject').GetStyle()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#tag","title":"Tag","text":"<p>Tag of the element.</p> <p>Type: string</p> <p>Accessors: GetTag</p> <pre><code>value = SeS('SomeHTMLObject').GetTag()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#text","title":"Text","text":"<p>Text of the element with normalized spaces.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeHTMLObject').GetText()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#title","title":"Title","text":"<p>Title of the element.</p> <p>Type: string</p> <p>Accessors: GetTitle</p> <pre><code>value = SeS('SomeHTMLObject').GetTitle()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#value","title":"Value","text":"<p>Value of the element.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeHTMLObject').GetValue()\n\nSeS('SomeHTMLObject').SetValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 6.6+</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeHTMLObject').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#width","title":"Width","text":"<p>Width of the element.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeHTMLObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the element.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeHTMLObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#xpath","title":"XPath","text":"<p>XPath of the element.</p> <p>Type: string</p> <p>Accessors: GetXPath</p> <pre><code>value = SeS('SomeHTMLObject').GetXPath()\n</code></pre> <p></p>"},{"location":"Libraries/HTMLObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the element.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeHTMLObject').GetY()\n</code></pre>"},{"location":"Libraries/HTMLObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/HTMLObject/#doaddselection","title":"DoAddSelection","text":"<p>Adds selection of the specified option in the multi-select element.</p> <pre><code>SeS('SomeHTMLObject').DoAddSelection(optionText)\n</code></pre> <p>Parameters:</p> Name Type Description optionText string Element to add to selection <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#doclick","title":"DoClick","text":"<p>Clicks on HTML element (button, link).</p> <pre><code>SeS('SomeHTMLObject').DoClick(x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. forceEvent boolean Pass 'true' to force browser event without actual mouse clickOptional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodblclick","title":"DoDblClick","text":"<p>Double-Clicks on HTML element (button, link). Offsets are supported in Rapise 8.3+.</p> <pre><code>SeS('SomeHTMLObject').DoDblClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomchildat","title":"DoDOMChildAt","text":"<p>Returns n-th child (zero-based).</p> <pre><code>SeS('SomeHTMLObject').DoDOMChildAt(n)\n</code></pre> <p>Parameters:</p> Name Type Description n number n Index of the child element. <p>Returns:</p> <p>HTMLObject: n-th child.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomchildrencount","title":"DoDOMChildrenCount","text":"<p>Returns number of children elements for this one.</p> <pre><code>SeS('SomeHTMLObject').DoDOMChildrenCount()\n</code></pre> <p>Returns:</p> <p>number: Number of children elements.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomconvert","title":"DoDOMConvert","text":"<p>Creates a clone of this object converted to a requested type.</p> <pre><code>SeS('SomeHTMLObject').DoDOMConvert(type)\n</code></pre> <p>Parameters:</p> Name Type Description type string Type of an object. <p>Returns:</p> <p>HTMLObject: New Object of requested type or HTMLObject if type not found, null if error occur.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomfindparentwithattribute","title":"DoDOMFindParentWithAttribute","text":"<p>Returns parent element (if any) with given attribute matching given string or 'regex:...' expression.</p> <pre><code>SeS('SomeHTMLObject').DoDOMFindParentWithAttribute(attrName, match)\n</code></pre> <p>Parameters:</p> Name Type Description attrName string Name of an attribute. match string Match string. <p>Returns:</p> <p>HTMLObject: Matched element or 'null'.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomgetattribute","title":"DoDOMGetAttribute","text":"<p>Returns specified attribute.</p> <pre><code>SeS('SomeHTMLObject').DoDOMGetAttribute(attrName)\n</code></pre> <p>Parameters:</p> Name Type Description attrName string Name of an attribute. <p>Returns:</p> <p>object: Attribute value.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomgetattributes","title":"DoDOMGetAttributes","text":"<p>Returns all attributes of a node.</p> <pre><code>SeS('SomeHTMLObject').DoDOMGetAttributes()\n</code></pre> <p>Returns:</p> <p>array: Array of attributes.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomnextsibling","title":"DoDOMNextSibling","text":"<p>Returns next sibling element for this one.</p> <pre><code>SeS('SomeHTMLObject').DoDOMNextSibling()\n</code></pre> <p>Returns:</p> <p>HTMLObject: Next sibling element.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomparent","title":"DoDOMParent","text":"<p>Returns parent element having this element.</p> <pre><code>SeS('SomeHTMLObject').DoDOMParent()\n</code></pre> <p>Returns:</p> <p>HTMLObject: Parent element.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomprevsibling","title":"DoDOMPrevSibling","text":"<p>Return previous sibling element for this one.</p> <pre><code>SeS('SomeHTMLObject').DoDOMPrevSibling()\n</code></pre> <p>Returns:</p> <p>HTMLObject: Previous sibling element.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomquerycss","title":"DoDOMQueryCss","text":"<p>Gets array of elements matching CSS selector on this object.</p> <pre><code>SeS('SomeHTMLObject').DoDOMQueryCss(css)\n</code></pre> <p>Parameters:</p> Name Type Description css string CSS selector. <p>Returns:</p> <p>array: Array of matched elements.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomqueryvalue","title":"DoDOMQueryValue","text":"<p>Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then <code>null</code> is returned. Requires Rapise 6.4+</p> <pre><code>SeS('SomeHTMLObject').DoDOMQueryValue(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Absolute or relative xpath query. e.g. <code>count(//div)</code>, <code>//a[1]/@href='/Home'</code>, <code>./li/text()</code> <p>Returns:</p> <p>string | number | boolean: Result of the query or null if the query is invalid.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomqueryxpath","title":"DoDOMQueryXPath","text":"<p>Gets array of elements matching XPath query on this object.</p> <pre><code>SeS('SomeHTMLObject').DoDOMQueryXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Xpath query. <p>Returns:</p> <p>array: Array of matched elements.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dodomroot","title":"DoDOMRoot","text":"<p>Returns Root element having this element.</p> <pre><code>SeS('SomeHTMLObject').DoDOMRoot()\n</code></pre> <p>Returns:</p> <p>HTMLObject: Root element having this element.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#doensurevisible","title":"DoEnsureVisible","text":"<p>Makes sure specified element is visible on the screen.</p> <pre><code>SeS('SomeHTMLObject').DoEnsureVisible(vAlign, hAlign)\n</code></pre> <p>Parameters:</p> Name Type Description vAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\".Optional. hAlign string One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\".Optional. <p>Returns:</p> <p>object: Rectangle of the element if it became visible, 'null' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dogetrect","title":"DoGetRect","text":"<p>Finds screen rectangle for this object.</p> <pre><code>SeS('SomeHTMLObject').DoGetRect()\n</code></pre> <p>Returns:</p> <p>object: object {x, y, w, h}</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dogetselection","title":"DoGetSelection","text":"<p>Gets selected options text of a SELECT element. Example: 'Option1,Option2'.</p> <pre><code>SeS('SomeHTMLObject').DoGetSelection(delim)\n</code></pre> <p>Parameters:</p> Name Type Description delim string Separator between options.Optional, Default: \",\". <p>Returns:</p> <p>boolean: String with option values separated by delim.</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dolclick","title":"DoLClick","text":"<p>Directly invokes the click method on the HTML element.</p> <pre><code>SeS('SomeHTMLObject').DoLClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#domousemove","title":"DoMouseMove","text":"<p>Moves mouse on HTML element with offset.</p> <pre><code>SeS('SomeHTMLObject').DoMouseMove(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dorclick","title":"DoRClick","text":"<p>Right-clicks on the HTML element. Offsets are supported in Rapise 8.3+.</p> <pre><code>SeS('SomeHTMLObject').DoRClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#doremoveselection","title":"DoRemoveSelection","text":"<p>Deselects the specified option in the multi-select element.</p> <pre><code>SeS('SomeHTMLObject').DoRemoveSelection(optionText)\n</code></pre> <p>Parameters:</p> Name Type Description optionText string Element to remove from selection <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#doselect","title":"DoSelect","text":"<p>Selects the specified element in &lt;select&gt; control. Since Rapise 6.3 also supports OL and UL lists.</p> <pre><code>SeS('SomeHTMLObject').DoSelect(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string Element to select <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dosendkeys","title":"DoSendKeys","text":"<p>Keys to send. Supports patterns like in Global.DoSendKeys.</p> <pre><code>SeS('SomeHTMLObject').DoSendKeys(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string A sequence of keystrokes. <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dosetcheck","title":"DoSetCheck","text":"<p>Sets specified state of check box.</p> <pre><code>SeS('SomeHTMLObject').DoSetCheck(state)\n</code></pre> <p>Parameters:</p> Name Type Description state boolean State to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p> <p> </p>"},{"location":"Libraries/HTMLObject/#dosettext","title":"DoSetText","text":"<p>Sets text for input edit or textarea.</p> <pre><code>SeS('SomeHTMLObject').DoSetText(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string Text to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise'</p> <p></p>"},{"location":"Libraries/JQueryAccordion/","title":"JQueryAccordion","text":"<p>jQuery-UI JQuery Accordion.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQueryAccordionBehavior</p>"},{"location":"Libraries/JQueryAccordion/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab"},{"location":"Libraries/JQueryAccordion/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects a specific tab of the accordion."},{"location":"Libraries/JQueryAccordion/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JQueryAccordion/#itemscount","title":"ItemsCount","text":"<p>Gets the number of tabs</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeJQueryAccordion').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryAccordion/#selectedindex","title":"SelectedIndex","text":"<p>Gets the index of the selected tab</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeJQueryAccordion').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryAccordion/#selectedtab","title":"SelectedTab","text":"<p>Gets the text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeJQueryAccordion').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/JQueryAccordion/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQueryAccordion/#doselecttab","title":"DoSelectTab","text":"<p>Selects a specific tab of the accordion.</p> <pre><code>SeS('SomeJQueryAccordion').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string The name of the tab to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JQueryDatepicker/","title":"JQueryDatepicker","text":"<p>jQuery-UI JQuery Date Picker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQueryDatepickerBehavior</p>"},{"location":"Libraries/JQueryDatepicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Gets the currently selected month GetMonth Year Gets the currently selected year GetYear"},{"location":"Libraries/JQueryDatepicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Changes to the next month. DoPrevMonth Changes to the previous month. DoSelectDate Selects a specific day in the current month."},{"location":"Libraries/JQueryDatepicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JQueryDatepicker/#month","title":"Month","text":"<p>Gets the currently selected month</p> <p>Type: number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeJQueryDatepicker').GetMonth()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryDatepicker/#year","title":"Year","text":"<p>Gets the currently selected year</p> <p>Type: number</p> <p>Accessors: GetYear</p> <pre><code>value = SeS('SomeJQueryDatepicker').GetYear()\n</code></pre>"},{"location":"Libraries/JQueryDatepicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQueryDatepicker/#donextmonth","title":"DoNextMonth","text":"<p>Changes to the next month.</p> <pre><code>SeS('SomeJQueryDatepicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JQueryDatepicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Changes to the previous month.</p> <pre><code>SeS('SomeJQueryDatepicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JQueryDatepicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects a specific day in the current month.</p> <pre><code>SeS('SomeJQueryDatepicker').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number The day of the month to choose <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JQueryMenu/","title":"JQueryMenu","text":"<p>jQuery-UI JQuery Menu.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQueryMenuBehavior</p>"},{"location":"Libraries/JQueryMenu/#action-summary","title":"Action Summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item."},{"location":"Libraries/JQueryMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQueryMenu/#dofindchild","title":"DoFindChild","text":"<p>Searches for specific item in the menu.</p> <pre><code>SeS('SomeJQueryMenu').DoFindChild(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/JQueryMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeJQueryMenu').DoMenu(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p>"},{"location":"Libraries/JQueryProgressbar/","title":"JQueryProgressbar","text":"<p>jQuery-UI JQuery Progress Bar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQueryProgressbarBehavior</p>"},{"location":"Libraries/JQueryProgressbar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue Value Current value of the progress bar. GetValue"},{"location":"Libraries/JQueryProgressbar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JQueryProgressbar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number</p> <p>Accessors: GetMaxValue</p> <pre><code>value = SeS('SomeJQueryProgressbar').GetMaxValue()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryProgressbar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number</p> <p>Accessors: GetMinValue</p> <pre><code>value = SeS('SomeJQueryProgressbar').GetMinValue()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryProgressbar/#value","title":"Value","text":"<p>Current value of the progress bar.</p> <p>Type: number</p> <p>Accessors: GetValue</p> <pre><code>value = SeS('SomeJQueryProgressbar').GetValue()\n</code></pre>"},{"location":"Libraries/JQuerySliderH/","title":"JQuerySliderH","text":"<p>jQuery-UI JQuery SliderH.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQuerySliderHBehavior</p>"},{"location":"Libraries/JQuerySliderH/#action-summary","title":"Action Summary","text":"Action Description DoChange Changes slider position."},{"location":"Libraries/JQuerySliderH/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQuerySliderH/#dochange","title":"DoChange","text":"<p>Changes slider position.</p> <pre><code>SeS('SomeJQuerySliderH').DoChange(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number Slider position to set. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/JQuerySliderV/","title":"JQuerySliderV","text":"<p>jQuery-UI JQuery SliderV.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQuerySliderVBehavior</p>"},{"location":"Libraries/JQuerySliderV/#action-summary","title":"Action Summary","text":"Action Description DoChange Changes slider position."},{"location":"Libraries/JQuerySliderV/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQuerySliderV/#dochange","title":"DoChange","text":"<p>Changes slider position.</p> <pre><code>SeS('SomeJQuerySliderV').DoChange(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number Slider position to set. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/JQuerySpinner/","title":"JQuerySpinner","text":"<p>jQuery-UI JQuery Spinner.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQuerySpinnerBehavior</p>"},{"location":"Libraries/JQuerySpinner/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Gets/Sets the value of the spinner GetValue SetValue"},{"location":"Libraries/JQuerySpinner/#action-summary","title":"Action Summary","text":"Action Description DoPageDown Clicks the PageDown spinner button. DoPageUp Clicks the PageUp spinner button. DoSetValue Sets the value of the spinner."},{"location":"Libraries/JQuerySpinner/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JQuerySpinner/#value","title":"Value","text":"<p>Gets/Sets the value of the spinner</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJQuerySpinner').GetValue()\n\nSeS('SomeJQuerySpinner').SetValue(value)\n</code></pre>"},{"location":"Libraries/JQuerySpinner/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQuerySpinner/#dopagedown","title":"DoPageDown","text":"<p>Clicks the PageDown spinner button.</p> <pre><code>SeS('SomeJQuerySpinner').DoPageDown()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JQuerySpinner/#dopageup","title":"DoPageUp","text":"<p>Clicks the PageUp spinner button.</p> <pre><code>SeS('SomeJQuerySpinner').DoPageUp()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JQuerySpinner/#dosetvalue","title":"DoSetValue","text":"<p>Sets the value of the spinner.</p> <pre><code>SeS('SomeJQuerySpinner').DoSetValue(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number The desired value of the spinner. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JQueryTabs/","title":"JQueryTabs","text":"<p>jQuery-UI JQuery Tabs.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JQueryTabsBehavior</p>"},{"location":"Libraries/JQueryTabs/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Gets the number of tabs GetItemsCount SelectedIndex Gets the index of the selected tab GetSelectedIndex SelectedTab Gets the text of the selected tab GetSelectedTab"},{"location":"Libraries/JQueryTabs/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects a specific tab of the tab control."},{"location":"Libraries/JQueryTabs/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JQueryTabs/#itemscount","title":"ItemsCount","text":"<p>Gets the number of tabs</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeJQueryTabs').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryTabs/#selectedindex","title":"SelectedIndex","text":"<p>Gets the index of the selected tab</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeJQueryTabs').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/JQueryTabs/#selectedtab","title":"SelectedTab","text":"<p>Gets the text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeJQueryTabs').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/JQueryTabs/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JQueryTabs/#doselecttab","title":"DoSelectTab","text":"<p>Selects a specific tab of the tab control.</p> <pre><code>SeS('SomeJQueryTabs').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string The name of the tab to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaButton/","title":"JavaButton","text":"<p>Java Button.</p> <p>UI element class: java.awt.Button</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectButtonBehavior</p>"},{"location":"Libraries/JavaCheckBox/","title":"JavaCheckBox","text":"<p>Java CheckBox.</p> <p>UI element class: java.awt.Checkbox</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectCheckableBehavior</p>"},{"location":"Libraries/JavaCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/JavaCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeJavaCheckBox').GetChecked()\n\nSeS('SomeJavaCheckBox').SetChecked(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaCheckBox/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: boolean</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaCheckBox').GetValue()\n\nSeS('SomeJavaCheckBox').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeJavaCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaChoice/","title":"JavaChoice","text":"<p>Java Choice.</p> <p>UI element class: java.awt.Choice</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectSelectableBehavior</p>"},{"location":"Libraries/JavaChoice/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText"},{"location":"Libraries/JavaChoice/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/JavaChoice/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaChoice/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeJavaChoice').GetSelectedIndex()\n\nSeS('SomeJavaChoice').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaChoice/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeJavaChoice').GetSelectedText()\n\nSeS('SomeJavaChoice').SetSelectedText(value)\n</code></pre>"},{"location":"Libraries/JavaChoice/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaChoice/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeJavaChoice').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaLabel/","title":"JavaLabel","text":"<p>Java Label.</p> <p>UI element class: java.awt.Label</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectLabelBehavior</p>"},{"location":"Libraries/JavaLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/JavaLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeJavaLabel').GetText()\n</code></pre>"},{"location":"Libraries/JavaList/","title":"JavaList","text":"<p>Java List.</p> <p>UI element class: java.awt.List</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectListSelectableBehavior</p>"},{"location":"Libraries/JavaList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/JavaList/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/JavaList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeJavaList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeJavaList').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeJavaList').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeJavaList').GetSelectedIndex()\n\nSeS('SomeJavaList').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeJavaList').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeJavaList').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Getter Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeJavaList').GetSelectedText(separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaList/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeJavaList').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/JavaList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaList/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeJavaList').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaList/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeJavaList').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaList/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeJavaList').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeJavaList').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaObject/","title":"JavaObject","text":"<p>Standard Java (AWT, Swing) Object.</p> <p>UI element class: regex:.*</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectGenericBehavior</p>"},{"location":"Libraries/JavaObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Parent Object for UI Automation parent node GetParent Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/JavaObject/#action-summary","title":"Action Summary","text":"Action Description DoAction Clicks in the middle of the control. DoDumpWidget Dumps Spy data for the object. DoFindByLabel Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression). DoFindByName Find nested element by its name (getName() property of each element is compared with specified text or regular expression). DoFindByText Find nested element by its text (getText() property of each element is compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/JavaObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaObject/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeJavaObject').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeJavaObject').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeJavaObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#parent","title":"Parent","text":"<p>Object for UI Automation parent node</p> <p>Type: UIAObject</p> <p>Accessors: GetParent</p> <pre><code>value = SeS('SomeJavaObject').GetParent()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeJavaObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeJavaObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/JavaObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeJavaObject').GetY()\n</code></pre>"},{"location":"Libraries/JavaObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaObject/#doaction","title":"DoAction","text":"<p>Clicks in the middle of the control.</p> <pre><code>SeS('SomeJavaObject').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeJavaObject').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dofindbylabel","title":"DoFindByLabel","text":"<p>Find nested element by its label (getLabel() property of each element is compared with specified text or regular expression).</p> <pre><code>SeS('SomeJavaObject').DoFindByLabel(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>JavaObject: JavaObject containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its name (getName() property of each element is compared with specified text or regular expression).</p> <pre><code>SeS('SomeJavaObject').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>JavaObject: JavaObject containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (getText() property of each element is compared with specified text or regular expression).</p> <pre><code>SeS('SomeJavaObject').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>JavaObject: JavaObject containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dofindelementbycondition","title":"DoFindElementByCondition","text":"<p>Finds first element matching the condition.</p> <pre><code>SeS('SomeJavaObject').DoFindElementByCondition(condition)\n</code></pre> <p>Parameters:</p> Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: {'text':'regex:Enter .*'} <p>Returns:</p> <p>JavaObject: JavaObject if the element is found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dofindelementsbycondition","title":"DoFindElementsByCondition","text":"<p>Finds all elements matching the condition</p> <pre><code>SeS('SomeJavaObject').DoFindElementsByCondition(condition)\n</code></pre> <p>Parameters:</p> Name Type Description condition expression Object in a form {propname1:propvalue1, propname2:propregexp2,...}. I.e.: {'text':'regex:Enter .*'} <p>Returns:</p> <p>Array: Array of JavaObjects for the found elements, the array is empty if nothing is found.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaObject/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeJavaObject').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/JavaSwingButton/","title":"JavaSwingButton","text":"<p>Java Swing Button.</p> <p>UI element class: javax.swing.JButton</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectButtonBehavior</p>"},{"location":"Libraries/JavaSwingCheckBox/","title":"JavaSwingCheckBox","text":"<p>Java Swing CheckBox.</p> <p>UI element class: javax.swing.JCheckBox</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectCheckableBehavior</p>"},{"location":"Libraries/JavaSwingCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/JavaSwingCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/JavaSwingCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeJavaSwingCheckBox').GetChecked()\n\nSeS('SomeJavaSwingCheckBox').SetChecked(value)\n</code></pre>"},{"location":"Libraries/JavaSwingCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeJavaSwingCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingComboBox/","title":"JavaSwingComboBox","text":"<p>Java Swing Combo Box.</p> <p>UI element class: javax.swing.JComboBox</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectSelectableBehavior</p>"},{"location":"Libraries/JavaSwingComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText"},{"location":"Libraries/JavaSwingComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/JavaSwingComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingComboBox/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeJavaSwingComboBox').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingComboBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeJavaSwingComboBox').GetSelectedIndex()\n\nSeS('SomeJavaSwingComboBox').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingComboBox/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeJavaSwingComboBox').GetSelectedText()\n\nSeS('SomeJavaSwingComboBox').SetSelectedText(value)\n</code></pre>"},{"location":"Libraries/JavaSwingComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeJavaSwingComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingLabel/","title":"JavaSwingLabel","text":"<p>Java Swing Label.</p> <p>UI element class: javax.swing.JLabel</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectLabelBehavior</p>"},{"location":"Libraries/JavaSwingLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/JavaSwingLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeJavaSwingLabel').GetText()\n</code></pre>"},{"location":"Libraries/JavaSwingList/","title":"JavaSwingList","text":"<p>Java Swing List.</p> <p>UI element class: javax.swing.JList</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectListSelectableBehavior</p>"},{"location":"Libraries/JavaSwingList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/JavaSwingList/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/JavaSwingList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeJavaSwingList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeJavaSwingList').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeJavaSwingList').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeJavaSwingList').GetSelectedIndex()\n\nSeS('SomeJavaSwingList').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeJavaSwingList').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeJavaSwingList').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Getter Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeJavaSwingList').GetSelectedText(separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingList/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeJavaSwingList').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/JavaSwingList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingList/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeJavaSwingList').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingList/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeJavaSwingList').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingList/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeJavaSwingList').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeJavaSwingList').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingMenuBar/","title":"JavaSwingMenuBar","text":"<p>Java Swing Menu Bar.</p> <p>UI element class: javax.swing.JMenuBar</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectMenuBarBehavior</p>"},{"location":"Libraries/JavaSwingMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item."},{"location":"Libraries/JavaSwingMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingMenuBar/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the menu or saves it to a file.</p> <pre><code>SeS('SomeJavaSwingMenuBar').DoFullText(separator, filePath, append, includeSeparators)\n</code></pre> <p>Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended.Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result.Optional, Default: \"false\". <p>Returns:</p> <p>number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenucount","title":"DoGetSubmenuCount","text":"<p>Gets the number of submenu items for a given menu path.</p> <pre><code>SeS('SomeJavaSwingMenuBar').DoGetSubmenuCount(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>number | boolean: Number of submenu items, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenuproperty","title":"DoGetSubmenuProperty","text":"<p>Gets submenu property.</p> <pre><code>SeS('SomeJavaSwingMenuBar').DoGetSubmenuProperty(path, index, property, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string | boolean: Submenu property, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingMenuBar/#dogetsubmenutext","title":"DoGetSubmenuText","text":"<p>Gets submenu text.</p> <pre><code>SeS('SomeJavaSwingMenuBar').DoGetSubmenuText(path, index, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string | boolean: Submenu text, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeJavaSwingMenuBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingPasswordField/","title":"JavaSwingPasswordField","text":"<p>Java Swing Password Field.</p> <p>UI element class: javax.swing.JPasswordField</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectTextFieldBehavior</p>"},{"location":"Libraries/JavaSwingPasswordField/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaSwingPasswordField/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/JavaSwingPasswordField/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingPasswordField/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeJavaSwingPasswordField').GetText()\n\nSeS('SomeJavaSwingPasswordField').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingPasswordField/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaSwingPasswordField').GetValue()\n\nSeS('SomeJavaSwingPasswordField').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaSwingPasswordField/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingPasswordField/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeJavaSwingPasswordField').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingPopupMenu/","title":"JavaSwingPopupMenu","text":"<p>Java Swing Popup Menu.</p> <p>UI element class: javax.swing.JPopupMenu</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectPopupSelectableBehavior</p>"},{"location":"Libraries/JavaSwingPopupMenu/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex"},{"location":"Libraries/JavaSwingPopupMenu/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/JavaSwingPopupMenu/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingPopupMenu/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeJavaSwingPopupMenu').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingPopupMenu/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeJavaSwingPopupMenu').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingPopupMenu/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeJavaSwingPopupMenu').GetItemNameByIndex(index)\n</code></pre>"},{"location":"Libraries/JavaSwingPopupMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingPopupMenu/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeJavaSwingPopupMenu').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingProgressBar/","title":"JavaSwingProgressBar","text":"<p>Java Swing Progress Bar.</p> <p>UI element class: javax.swing.JProgressBar</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectProgressBarBehavior</p>"},{"location":"Libraries/JavaSwingProgressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaSwingProgressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingProgressBar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeJavaSwingProgressBar').GetMaxValue()\n\nSeS('SomeJavaSwingProgressBar').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingProgressBar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeJavaSwingProgressBar').GetMinValue()\n\nSeS('SomeJavaSwingProgressBar').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingProgressBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaSwingProgressBar').GetValue()\n\nSeS('SomeJavaSwingProgressBar').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaSwingRadioButton/","title":"JavaSwingRadioButton","text":"<p>Java Swing Radio Button.</p> <p>UI element class: javax.swing.JRadioButton</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectCheckableBehavior</p>"},{"location":"Libraries/JavaSwingRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/JavaSwingRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/JavaSwingRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeJavaSwingRadioButton').GetChecked()\n\nSeS('SomeJavaSwingRadioButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/JavaSwingRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeJavaSwingRadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingSlider/","title":"JavaSwingSlider","text":"<p>Java Swing Slider.</p> <p>UI element class: javax.swing.JSlider</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectProgressBarBehavior</p>"},{"location":"Libraries/JavaSwingSlider/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaSwingSlider/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingSlider/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeJavaSwingSlider').GetMaxValue()\n\nSeS('SomeJavaSwingSlider').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingSlider/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeJavaSwingSlider').GetMinValue()\n\nSeS('SomeJavaSwingSlider').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingSlider/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaSwingSlider').GetValue()\n\nSeS('SomeJavaSwingSlider').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaSwingTable/","title":"JavaSwingTable","text":"<p>Java Swing Table.</p> <p>UI element class: javax.swing.JTable</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectTableBehavior</p>"},{"location":"Libraries/JavaSwingTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCells Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells. GetSelectedCells SelectedColumn Index of the selected column. GetSelectedColumn SelectedColumnCount Number of selected columns. GetSelectedColumnCount SelectedColumns Returns string of indexes delimited by separator or array of indexes of selected columns. GetSelectedColumns SelectedRow Index of the selected row. GetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Returns string of indexes delimited by separator or array of indexes of selected rows. GetSelectedRows Text Text of the currently focused cell. GetText"},{"location":"Libraries/JavaSwingTable/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell DoFullText Read and return full text contents of the table"},{"location":"Libraries/JavaSwingTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingTable/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeJavaSwingTable').GetCell(/**number*/row,/**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeJavaSwingTable').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeJavaSwingTable').GetColumnName(/**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeJavaSwingTable').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedcells","title":"SelectedCells","text":"<p>Returns string of cell coordinates delimited by separators or an array of coordinate objects for selected cells.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. rowcolSep string row separatorOptional. cellSep string cell separatorOptional. <p>Type: string</p> <p>Accessors: GetSelectedCells</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedCells(asArray, rowcolSep, cellSep)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedcolumncount","title":"SelectedColumnCount","text":"<p>Number of selected columns.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumnCount</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedcolumns","title":"SelectedColumns","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected columns.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedColumns</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedColumns(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#selectedrows","title":"SelectedRows","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows</p> <pre><code>value = SeS('SomeJavaSwingTable').GetSelectedRows(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTable/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeJavaSwingTable').GetText()\n</code></pre>"},{"location":"Libraries/JavaSwingTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingTable/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeJavaSwingTable').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingTable/#dofulltext","title":"DoFullText","text":"<p>Read and return full text contents of the table</p> <pre><code>SeS('SomeJavaSwingTable').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Full text of the table (may be very long!), 'false' otherwise</p> <p></p>"},{"location":"Libraries/JavaSwingTextArea/","title":"JavaSwingTextArea","text":"<p>Java Swing Text Area.</p> <p>UI element class: javax.swing.JTextArea</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectTextFieldBehavior</p>"},{"location":"Libraries/JavaSwingTextArea/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaSwingTextArea/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/JavaSwingTextArea/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingTextArea/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeJavaSwingTextArea').GetText()\n\nSeS('SomeJavaSwingTextArea').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTextArea/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaSwingTextArea').GetValue()\n\nSeS('SomeJavaSwingTextArea').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaSwingTextArea/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingTextArea/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeJavaSwingTextArea').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingTextField/","title":"JavaSwingTextField","text":"<p>Java Swing Text Field.</p> <p>UI element class: javax.swing.JTextField</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectTextFieldBehavior</p>"},{"location":"Libraries/JavaSwingTextField/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaSwingTextField/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/JavaSwingTextField/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingTextField/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeJavaSwingTextField').GetText()\n\nSeS('SomeJavaSwingTextField').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTextField/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaSwingTextField').GetValue()\n\nSeS('SomeJavaSwingTextField').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaSwingTextField/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingTextField/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeJavaSwingTextField').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingToggleButton/","title":"JavaSwingToggleButton","text":"<p>Java Swing ToggleButton.</p> <p>UI element class: javax.swing.JToggleButton</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectCheckableBehavior</p>"},{"location":"Libraries/JavaSwingToggleButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/JavaSwingToggleButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/JavaSwingToggleButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingToggleButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeJavaSwingToggleButton').GetChecked()\n\nSeS('SomeJavaSwingToggleButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/JavaSwingToggleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingToggleButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeJavaSwingToggleButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaSwingTree/","title":"JavaSwingTree","text":"<p>Java Swing Tree.</p> <p>UI element class: javax.swing.JTree</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaSwingObjectTreeBehavior</p>"},{"location":"Libraries/JavaSwingTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected"},{"location":"Libraries/JavaSwingTree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree."},{"location":"Libraries/JavaSwingTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaSwingTree/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeJavaSwingTree').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTree/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeJavaSwingTree').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTree/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeJavaSwingTree').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTree/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeJavaSwingTree').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/JavaSwingTree/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeJavaSwingTree').GetSelected(path, separator, pathType)\n</code></pre>"},{"location":"Libraries/JavaSwingTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaSwingTree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeJavaSwingTree').DoClickNode(path, separator, pathType, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeJavaSwingTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/JavaSwingTree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeJavaSwingTree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaTextArea/","title":"JavaTextArea","text":"<p>Java Text Area.</p> <p>UI element class: java.awt.TextArea</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectTextFieldBehavior</p>"},{"location":"Libraries/JavaTextArea/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaTextArea/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/JavaTextArea/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaTextArea/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeJavaTextArea').GetText()\n\nSeS('SomeJavaTextArea').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaTextArea/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaTextArea').GetValue()\n\nSeS('SomeJavaTextArea').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaTextArea/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaTextArea/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeJavaTextArea').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/JavaTextField/","title":"JavaTextField","text":"<p>Java Text Field.</p> <p>UI element class: java.awt.TextField</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: JavaObjectTextFieldBehavior</p>"},{"location":"Libraries/JavaTextField/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/JavaTextField/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/JavaTextField/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/JavaTextField/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeJavaTextField').GetText()\n\nSeS('SomeJavaTextField').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/JavaTextField/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeJavaTextField').GetValue()\n\nSeS('SomeJavaTextField').SetValue(value)\n</code></pre>"},{"location":"Libraries/JavaTextField/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/JavaTextField/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeJavaTextField').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/LWCheckbox/","title":"LWCheckbox","text":"<p>Oracle Forms LWCheckbox.</p> <p>UI element class: oracle.ewt.lwAWT.LWCheckbox</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsCheckBehavior</p>"},{"location":"Libraries/LWTextComponent/","title":"LWTextComponent","text":"<p>Oracle Forms LWTextComponent.</p> <p>UI element class: oracle.ewt.lwAWT.lwText.LWTextComponent</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsTextFieldBehavior</p>"},{"location":"Libraries/LWTextComponent/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue"},{"location":"Libraries/LWTextComponent/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/LWTextComponent/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/LWTextComponent/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeLWTextComponent').GetText()\n\nSeS('SomeLWTextComponent').SetText()\n</code></pre> <p></p>"},{"location":"Libraries/LWTextComponent/#value","title":"Value","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeLWTextComponent').GetValue()\n\nSeS('SomeLWTextComponent').SetValue()\n</code></pre>"},{"location":"Libraries/LWTextComponent/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/LWTextComponent/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeLWTextComponent').DoSetText(val, bvalidate)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. bvalidate boolean Force validation of entered value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/MSComCtlListView20WndClassRule/","title":"MSComCtlListView20WndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/MSComCtlSlider20/","title":"MSComCtlSlider20","text":"<p>ComCtl Slider Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: MSComCtlSlider20Behavior</p>"},{"location":"Libraries/MSComCtlSlider20/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/MSComCtlSlider20/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MSComCtlSlider20/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeMSComCtlSlider20').GetMaxValue()\n\nSeS('SomeMSComCtlSlider20').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlSlider20/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeMSComCtlSlider20').GetMinValue()\n\nSeS('SomeMSComCtlSlider20').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlSlider20/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeMSComCtlSlider20').GetValue()\n\nSeS('SomeMSComCtlSlider20').SetValue(value)\n</code></pre>"},{"location":"Libraries/MSComCtlSlider20WndClassRule/","title":"MSComCtlSlider20WndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/MSComCtlToolbar/","title":"MSComCtlToolbar","text":"<p>Microsoft Windows Toolbar Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: MSComCtlToolbarBehavior</p>"},{"location":"Libraries/MSComCtlToolbar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCaption The caption of the button on the toolbar GetItemCaption ItemCount The number of the items in the toolbar GetItemCount ItemStyle The style of the button on the toolbar GetItemStyle ItemValue Returns 'true' if element with nameCaptionIndex has value GetItemValue"},{"location":"Libraries/MSComCtlToolbar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem ClickItem DoSetCheck SetCheck"},{"location":"Libraries/MSComCtlToolbar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MSComCtlToolbar/#itemcaption","title":"ItemCaption","text":"<p>The caption of the button on the toolbar</p> <p>Getter Parameters:</p> Name Type Description nameCaptionIndex number | string Index, name or caption of the item. <p>Type: string</p> <p>Accessors: GetItemCaption</p> <pre><code>value = SeS('SomeMSComCtlToolbar').GetItemCaption(/**number|string*/ nameCaptionIndex)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlToolbar/#itemcount","title":"ItemCount","text":"<p>The number of the items in the toolbar</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeMSComCtlToolbar').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlToolbar/#itemstyle","title":"ItemStyle","text":"<p>The style of the button on the toolbar</p> <p>Getter Parameters:</p> Name Type Description nameCaptionIndex number | string Index, name or caption of the item. <p>Type: number</p> <p>Accessors: GetItemStyle</p> <pre><code>value = SeS('SomeMSComCtlToolbar').GetItemStyle(/**number|string*/ nameCaptionIndex)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlToolbar/#itemvalue","title":"ItemValue","text":"<p>Returns 'true' if element with nameCaptionIndex has value</p> <p>Getter Parameters:</p> Name Type Description nameCaptionIndex number | string Index, name or caption of the item. <p>Type: boolean</p> <p>Accessors: GetItemValue</p> <pre><code>value = SeS('SomeMSComCtlToolbar').GetItemValue(/**number|string*/ nameCaptionIndex)\n</code></pre>"},{"location":"Libraries/MSComCtlToolbar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/MSComCtlToolbar/#doclickitem","title":"DoClickItem","text":"<p>ClickItem</p> <pre><code>SeS('SomeMSComCtlToolbar').DoClickItem(nameCaptionIndex, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MSComCtlToolbar/#dosetcheck","title":"DoSetCheck","text":"<p>SetCheck</p> <pre><code>SeS('SomeMSComCtlToolbar').DoSetCheck(bcheck, nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Check state to set nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/","title":"MSComCtlTreeView20","text":"<p>ComCtl TreeView20 Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: MSComCtlTreeView20Behavior</p>"},{"location":"Libraries/MSComCtlTreeView20/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText"},{"location":"Libraries/MSComCtlTreeView20/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node"},{"location":"Libraries/MSComCtlTreeView20/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MSComCtlTreeView20/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetChecked(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetSelected(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/MSComCtlTreeView20/#text","title":"Text","text":"<p>;-combined text of all selected nodes.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeMSComCtlTreeView20').GetText()\n</code></pre>"},{"location":"Libraries/MSComCtlTreeView20/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/MSComCtlTreeView20/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeMSComCtlTreeView20').DoClickNode(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MSComCtlTreeView20/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeMSComCtlTreeView20').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MSComCtlTreeView20/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeMSComCtlTreeView20').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MSComCtlTreeView20/#dosetcheck","title":"DoSetCheck","text":"<p>Set 'checked' state of the specified node</p> <pre><code>SeS('SomeMSComCtlTreeView20').DoSetCheck(bcheck, path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/MSComCtlTreeView20WndClassRule/","title":"MSComCtlTreeView20WndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/MSComList/","title":"MSComList","text":"<p>ComCtl ListView20 Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: MSComCtlListView20Behavior</p>"},{"location":"Libraries/MSComList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked ItemCount Number of items. GetItemCount ItemSelected Check if item is selected. GetItemSelected"},{"location":"Libraries/MSComList/#action-summary","title":"Action Summary","text":"Action Description DoCheckItem Checks items of this object. DoClickItem Clicks the specified item DoSelectItem Selects items of this object."},{"location":"Libraries/MSComList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MSComList/#itemchecked","title":"ItemChecked","text":"<p>Check if item is checked.</p> <p>Getter Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. <p>Type: boolean</p> <p>Accessors: GetItemChecked</p> <pre><code>value = SeS('SomeMSComList').GetItemChecked(nameCaptionIndex)\n</code></pre> <p></p>"},{"location":"Libraries/MSComList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeMSComList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/MSComList/#itemselected","title":"ItemSelected","text":"<p>Check if item is selected.</p> <p>Getter Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. <p>Type: boolean</p> <p>Accessors: GetItemSelected</p> <pre><code>value = SeS('SomeMSComList').GetItemSelected(nameCaptionIndex)\n</code></pre>"},{"location":"Libraries/MSComList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/MSComList/#docheckitem","title":"DoCheckItem","text":"<p>Checks items of this object.</p> <pre><code>SeS('SomeMSComList').DoCheckItem(nameCaptionIndex, bCheck)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. bCheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MSComList/#doclickitem","title":"DoClickItem","text":"<p>Clicks the specified item</p> <pre><code>SeS('SomeMSComList').DoClickItem(nameCaptionIndex, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/MSComList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeMSComList').DoSelectItem(nameCaptionIndex, bSelect)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. bSelect boolean Desired selected state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/MSFlexGrid/","title":"MSFlexGrid","text":"<p>MSFLexGrid Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: MSFlexGridBehavior</p>"},{"location":"Libraries/MSFlexGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/MSFlexGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the table."},{"location":"Libraries/MSFlexGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MSFlexGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeMSFlexGrid').GetCell(/**Number*/row, /**Number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeMSFlexGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeMSFlexGrid').GetColumnName(/**number*/ col)\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeMSFlexGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeMSFlexGrid').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeMSFlexGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/MSFlexGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeMSFlexGrid').GetText()\n</code></pre>"},{"location":"Libraries/MSFlexGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/MSFlexGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeMSFlexGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/MSFlexGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeMSFlexGrid').DoClickText(textOrRegexp, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/MSFlexGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeMSFlexGrid').DoFullText()\n</code></pre> <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/MSFlexGridWndClassRule/","title":"MSFlexGridWndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/ManagedButton/","title":"ManagedButton","text":"<p>Managed Button.</p> <p>UI element class: System.Windows.Forms.Button</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectButtonBehavior</p>"},{"location":"Libraries/ManagedCheckBox/","title":"ManagedCheckBox","text":"<p>Managed CheckBox.</p> <p>UI element class: System.Windows.Forms.CheckBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/ManagedCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/ManagedCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/ManagedCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeManagedCheckBox').GetChecked()\n\nSeS('SomeManagedCheckBox').SetChecked(value)\n</code></pre>"},{"location":"Libraries/ManagedCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeManagedCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/","title":"ManagedCheckedListBox","text":"<p>Managed Checked ListBox.</p> <p>UI element class: System.Windows.Forms.CheckedListBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckedListBoxSelectableBehavior</p>"},{"location":"Libraries/ManagedCheckedListBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Array of indices of checked elements. GetCheckedIndices CheckedItems Array of item names of checked elements. GetCheckedItems ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/ManagedCheckedListBox/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node."},{"location":"Libraries/ManagedCheckedListBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedCheckedListBox/#checkedcount","title":"CheckedCount","text":"<p>Returns number of checked items in ListView.</p> <p>Type: number</p> <p>Accessors: GetCheckedCount</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetCheckedCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#checkedindices","title":"CheckedIndices","text":"<p>Array of indices of checked elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetCheckedIndices</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetCheckedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#checkeditems","title":"CheckedItems","text":"<p>Array of item names of checked elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetCheckedItems</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetCheckedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetSelectedIndex()\n\nSeS('SomeManagedCheckedListBox').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedCheckedListBox/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeManagedCheckedListBox').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/ManagedCheckedListBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedCheckedListBox/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedCheckedListBox/#docheckitem","title":"DoCheckItem","text":"<p>Checks items of this object.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoCheckItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedCheckedListBox/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedCheckedListBox/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedCheckedListBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedCheckedListBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets 'checked' state of the specified node.</p> <pre><code>SeS('SomeManagedCheckedListBox').DoSetCheck(bcheck, items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedComboBox/","title":"ManagedComboBox","text":"<p>Managed ComboBox.</p> <p>UI element class: System.Windows.Forms.ComboBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectSelectableBehavior</p>"},{"location":"Libraries/ManagedComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText"},{"location":"Libraries/ManagedComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/ManagedComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedComboBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeManagedComboBox').GetSelectedIndex()\n\nSeS('SomeManagedComboBox').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedComboBox/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeManagedComboBox').GetSelectedText()\n\nSeS('SomeManagedComboBox').SetSelectedText()\n</code></pre>"},{"location":"Libraries/ManagedComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeManagedComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/ManagedComboBox/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/ManagedComboBox/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/ManagedComboBox/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/ManagedComboBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeManagedComboBox').GetText()\n\nSeS('SomeManagedComboBox').SetText(value)\n</code></pre>"},{"location":"Libraries/ManagedComboBox/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/ManagedComboBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeManagedComboBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedDataGridView/","title":"ManagedDataGridView","text":"<p>Managed DataGridView.</p> <p>UI element class: System.Windows.Forms.DataGridView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedDataGridViewBehavior</p>"},{"location":"Libraries/ManagedDataGridView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/ManagedDataGridView/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell"},{"location":"Libraries/ManagedDataGridView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedDataGridView/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeManagedDataGridView').GetCell(/**number*/row, /**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeManagedDataGridView').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeManagedDataGridView').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeManagedDataGridView').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeManagedDataGridView').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeManagedDataGridView').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedDataGridView/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeManagedDataGridView').GetText()\n</code></pre>"},{"location":"Libraries/ManagedDataGridView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedDataGridView/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell</p> <pre><code>SeS('SomeManagedDataGridView').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/ManagedLabel/","title":"ManagedLabel","text":"<p>Managed Label.</p> <p>UI element class: System.Windows.Forms.Label</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/ManagedLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/ManagedLabel/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/ManagedLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeManagedLabel').GetText()\n\nSeS('SomeManagedLabel').SetText(value)\n</code></pre>"},{"location":"Libraries/ManagedLabel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedLabel/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeManagedLabel').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedLinkLabel/","title":"ManagedLinkLabel","text":"<p>Managed Link Label.</p> <p>UI element class: System.Windows.Forms.LinkLabel</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/ManagedLinkLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/ManagedLinkLabel/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/ManagedLinkLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedLinkLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeManagedLinkLabel').GetText()\n\nSeS('SomeManagedLinkLabel').SetText(value)\n</code></pre>"},{"location":"Libraries/ManagedLinkLabel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedLinkLabel/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeManagedLinkLabel').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedListBox/","title":"ManagedListBox","text":"<p>Managed ListBox.</p> <p>UI element class: System.Windows.Forms.ListBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectListBoxSelectableBehavior</p>"},{"location":"Libraries/ManagedListBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/ManagedListBox/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/ManagedListBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedListBox/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeManagedListBox').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeManagedListBox').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeManagedListBox').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeManagedListBox').GetSelectedIndex()\n\nSeS('SomeManagedListBox').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeManagedListBox').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeManagedListBox').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeManagedListBox').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListBox/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeManagedListBox').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/ManagedListBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedListBox/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeManagedListBox').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListBox/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeManagedListBox').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListBox/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeManagedListBox').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeManagedListBox').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedListView/","title":"ManagedListView","text":"<p>Managed ListView.</p> <p>UI element class: System.Windows.Forms.ListView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectListViewSelectableBehavior</p>"},{"location":"Libraries/ManagedListView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CheckBoxes Returns true if items have checkboxes near them. GetCheckBoxes CheckedCount Returns number of checked items in ListView. GetCheckedCount CheckedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetCheckedIndices ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/ManagedListView/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoCheckItem Checks items of this object. DoClearSelection Clears selection. DoClickItem Clicks the specified item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object. DoSetCheck Sets 'checked' state of the specified node."},{"location":"Libraries/ManagedListView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedListView/#checkboxes","title":"CheckBoxes","text":"<p>Returns true if items have checkboxes near them.</p> <p>Type: boolean</p> <p>Accessors: GetCheckBoxes</p> <pre><code>value = SeS('SomeManagedListView').GetCheckBoxes()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#checkedcount","title":"CheckedCount","text":"<p>Returns number of checked items in ListView.</p> <p>Type: number</p> <p>Accessors: GetCheckedCount</p> <pre><code>value = SeS('SomeManagedListView').GetCheckedCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#checkedindices","title":"CheckedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetCheckedIndices</p> <pre><code>value = SeS('SomeManagedListView').GetCheckedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeManagedListView').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeManagedListView').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeManagedListView').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeManagedListView').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeManagedListView').GetSelectedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedListView/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeManagedListView').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/ManagedListView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedListView/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeManagedListView').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#docheckitem","title":"DoCheckItem","text":"<p>Checks items of this object.</p> <pre><code>SeS('SomeManagedListView').DoCheckItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeManagedListView').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#doclickitem","title":"DoClickItem","text":"<p>Clicks the specified item</p> <pre><code>SeS('SomeManagedListView').DoClickItem(nameCaptionIndex, clickType, nSkipFirst, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". nSkipFirst number Index in the array if item is searched by name or regexp the text found several times.Optional. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeManagedListView').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeManagedListView').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedListView/#dosetcheck","title":"DoSetCheck","text":"<p>Sets 'checked' state of the specified node.</p> <pre><code>SeS('SomeManagedListView').DoSetCheck(bcheck, items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the button. items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedMenuPopupItem/","title":"ManagedMenuPopupItem","text":"<p>Managed MenuPopupItem.</p> <p>UI element class: System.Windows.Forms.ToolStripDropDown</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedMenuItemBehavior</p>"},{"location":"Libraries/ManagedMenuPopupItem/#action-summary","title":"Action Summary","text":"Action Description DoFullText Returns text representation of the menu or saves it to a file. DoMenu Performs click on the menu item."},{"location":"Libraries/ManagedMenuPopupItem/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedMenuPopupItem/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the menu or saves it to a file.</p> <pre><code>SeS('SomeManagedMenuPopupItem').DoFullText(separator, filePath, append, includeSeparators)\n</code></pre> <p>Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended.Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result.Optional, Default: \"false\". <p>Returns:</p> <p>number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuPopupItem/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeManagedMenuPopupItem').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedMenuStrip/","title":"ManagedMenuStrip","text":"<p>Managed MenuStrip.</p> <p>UI element class: System.Windows.Forms.MenuStrip</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedMenuBehavior</p>"},{"location":"Libraries/ManagedMenuStrip/#property-summary","title":"Property Summary","text":"Property Description Getter Setter IsEnabled Checks if given menu item is enabled. GetIsEnabled"},{"location":"Libraries/ManagedMenuStrip/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Perform Click on the navigation item DoFullText Returns text representation of the menu or saves it to a file. DoGetSubmenuCount Gets the number of submenu items for a given menu path. DoGetSubmenuProperty Gets submenu property. DoGetSubmenuText Gets submenu text. DoMenu Performs click on the menu item."},{"location":"Libraries/ManagedMenuStrip/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedMenuStrip/#isenabled","title":"IsEnabled","text":"<p>Checks if given menu item is enabled.</p> <p>Getter Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: boolean</p> <p>Accessors: GetIsEnabled</p> <pre><code>value = SeS('SomeManagedMenuStrip').GetIsEnabled(/**string*/ path, /**string*/ separator)\n</code></pre>"},{"location":"Libraries/ManagedMenuStrip/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedMenuStrip/#doclickitem","title":"DoClickItem","text":"<p>Perform Click on the navigation item</p> <pre><code>SeS('SomeManagedMenuStrip').DoClickItem(menuItemName)\n</code></pre> <p>Parameters:</p> Name Type Description menuItemName string Name of MenuStip's item to click <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuStrip/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the menu or saves it to a file.</p> <pre><code>SeS('SomeManagedMenuStrip').DoFullText(separator, filePath, append, includeSeparators)\n</code></pre> <p>Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". filePath string Name of a file that should hold text representation of the menu. append boolean If 'false' then file should be overwritten, if 'true' then data should be appended.Optional, Default: \"false\". includeSeparators boolean If 'true' then menu separators are included to the result.Optional, Default: \"false\". <p>Returns:</p> <p>number | boolean: Text representation of the menu, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenucount","title":"DoGetSubmenuCount","text":"<p>Gets the number of submenu items for a given menu path.</p> <pre><code>SeS('SomeManagedMenuStrip').DoGetSubmenuCount(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>number | boolean: Number of submenu items, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenuproperty","title":"DoGetSubmenuProperty","text":"<p>Gets submenu property.</p> <pre><code>SeS('SomeManagedMenuStrip').DoGetSubmenuProperty(path, index, property, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string | boolean: Submenu property, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuStrip/#dogetsubmenutext","title":"DoGetSubmenuText","text":"<p>Gets submenu text.</p> <pre><code>SeS('SomeManagedMenuStrip').DoGetSubmenuText(path, index, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. index number Index of the submenu. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string | boolean: Submenu text, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedMenuStrip/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeManagedMenuStrip').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedObject/","title":"ManagedObject","text":"<p>Generic .NET Managed Object.</p> <p>UI element class: regex:.*</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectGenericBehavior</p>"},{"location":"Libraries/ManagedObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/ManagedObject/#action-summary","title":"Action Summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/ManagedObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedObject/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeManagedObject').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeManagedObject').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeManagedObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 8.0+.</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeManagedObject').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeManagedObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeManagedObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeManagedObject').GetY()\n</code></pre>"},{"location":"Libraries/ManagedObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedObject/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeManagedObject').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedObject/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeManagedObject').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedObject/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeManagedObject').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedObject/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeManagedObject').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/ManagedPopupListBox/","title":"ManagedPopupListBox","text":"<p>Managed ManagedPopupListBox.</p> <p>UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView+GridViewListBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectListBoxSelectableBehavior</p>"},{"location":"Libraries/ManagedPopupListBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/ManagedPopupListBox/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/ManagedPopupListBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedPopupListBox/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetSelectedIndex()\n\nSeS('SomeManagedPopupListBox').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPopupListBox/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeManagedPopupListBox').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/ManagedPopupListBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedPopupListBox/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeManagedPopupListBox').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPopupListBox/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeManagedPopupListBox').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPopupListBox/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeManagedPopupListBox').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPopupListBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeManagedPopupListBox').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedPropertyGrid/","title":"ManagedPropertyGrid","text":"<p>Managed PropertyGrid.</p> <p>UI element class: System.Windows.Forms.PropertyGridInternal.PropertyGridView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedPropertyGridBehavior</p>"},{"location":"Libraries/ManagedPropertyGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Expanded True if selected item is expanded GetExpanded SelectedItem Returns the structure with label, value, expanded fields GetSelectedItem SelectedLabel Label of the selected item. GetSelectedLabel SelectedText Text of the selected item. GetSelectedText VisibleRowCount Number of visible rows GetVisibleRowCount"},{"location":"Libraries/ManagedPropertyGrid/#action-summary","title":"Action Summary","text":"Action Description DoCollapse Collapses an item of this object. DoExpand Expands an item of this object. DoGetValue Gets value of a grid item with a given label. DoSelectItem Selects an item of this object. DoSetValue Sets value of an grid item of this object. DoShowDropDown Show dropdown (or custom dialog) for an item."},{"location":"Libraries/ManagedPropertyGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedPropertyGrid/#expanded","title":"Expanded","text":"<p>True if selected item is expanded</p> <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeManagedPropertyGrid').GetExpanded()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPropertyGrid/#selecteditem","title":"SelectedItem","text":"<p>Returns the structure with label, value, expanded fields</p> <p>Type: string</p> <p>Accessors: GetSelectedItem</p> <pre><code>value = SeS('SomeManagedPropertyGrid').GetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPropertyGrid/#selectedlabel","title":"SelectedLabel","text":"<p>Label of the selected item.</p> <p>Type: string</p> <p>Accessors: GetSelectedLabel</p> <pre><code>value = SeS('SomeManagedPropertyGrid').GetSelectedLabel()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPropertyGrid/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeManagedPropertyGrid').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/ManagedPropertyGrid/#visiblerowcount","title":"VisibleRowCount","text":"<p>Number of visible rows</p> <p>Type: number</p> <p>Accessors: GetVisibleRowCount</p> <pre><code>value = SeS('SomeManagedPropertyGrid').GetVisibleRowCount()\n</code></pre>"},{"location":"Libraries/ManagedPropertyGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedPropertyGrid/#docollapse","title":"DoCollapse","text":"<p>Collapses an item of this object.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoCollapse(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string | number name/index of the value to Collapse. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPropertyGrid/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoExpand(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string | number name/index of the value to Expand. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPropertyGrid/#dogetvalue","title":"DoGetValue","text":"<p>Gets value of a grid item with a given label.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoGetValue(label)\n</code></pre> <p>Parameters:</p> Name Type Description label string | number Property grid row label or index <p>Returns:</p> <p>object: Item Value</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPropertyGrid/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoSelectItem(indexLabel)\n</code></pre> <p>Parameters:</p> Name Type Description indexLabel string | number name/index of the value to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPropertyGrid/#dosetvalue","title":"DoSetValue","text":"<p>Sets value of an grid item of this object.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoSetValue(label, val)\n</code></pre> <p>Parameters:</p> Name Type Description label string | number Property grid row label or index val string | number value to set <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedPropertyGrid/#doshowdropdown","title":"DoShowDropDown","text":"<p>Show dropdown (or custom dialog) for an item.</p> <pre><code>SeS('SomeManagedPropertyGrid').DoShowDropDown(indexLabel)\n</code></pre> <p>Parameters:</p> Name Type Description indexLabel string | number name/index of the item to show dropdown for. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedRadioButton/","title":"ManagedRadioButton","text":"<p>Managed Radio Button.</p> <p>UI element class: System.Windows.Forms.RadioButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/ManagedRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/ManagedRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/ManagedRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeManagedRadioButton').GetChecked()\n\nSeS('SomeManagedRadioButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/ManagedRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeManagedRadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedStatusBar/","title":"ManagedStatusBar","text":"<p>Managed Status Bar.</p> <p>UI element class: System.Windows.Forms.StatusStrip</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedStatusBarBehavior</p>"},{"location":"Libraries/ManagedStatusBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Status Bar Text. GetText"},{"location":"Libraries/ManagedStatusBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedStatusBar/#text","title":"Text","text":"<p>Status Bar Text.</p> <p>Getter Parameters:</p> Name Type Description ind number Status bar section index. If not specified, the text of all sections is combined with ';' as a separator.Optional. <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeManagedStatusBar').GetText(/**number*/ind)\n</code></pre>"},{"location":"Libraries/ManagedTextBox/","title":"ManagedTextBox","text":"<p>Managed Text Editor.</p> <p>UI element class: System.Windows.Forms.TextBox</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/ManagedTextBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/ManagedTextBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/ManagedTextBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedTextBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeManagedTextBox').GetText()\n\nSeS('SomeManagedTextBox').SetText(value)\n</code></pre>"},{"location":"Libraries/ManagedTextBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedTextBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeManagedTextBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ManagedTreeView/","title":"ManagedTreeView","text":"<p>Managed TreeView.</p> <p>UI element class: System.Windows.Forms.TreeView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTreeViewBehavior</p>"},{"location":"Libraries/ManagedTreeView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText"},{"location":"Libraries/ManagedTreeView/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node"},{"location":"Libraries/ManagedTreeView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ManagedTreeView/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeManagedTreeView').GetChecked(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeManagedTreeView').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeManagedTreeView').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeManagedTreeView').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeManagedTreeView').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeManagedTreeView').GetSelected(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/ManagedTreeView/#text","title":"Text","text":"<p>;-combined text of all selected nodes.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeManagedTreeView').GetText()\n</code></pre>"},{"location":"Libraries/ManagedTreeView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ManagedTreeView/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeManagedTreeView').DoClickNode(path, separator, pathType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedTreeView/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeManagedTreeView').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedTreeView/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeManagedTreeView').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ManagedTreeView/#dosetcheck","title":"DoSetCheck","text":"<p>Set 'checked' state of the specified node</p> <pre><code>SeS('SomeManagedTreeView').DoSetCheck(bcheck, path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Map/","title":"Map Object","text":"<p>Represents an RVL Map object and all its operations. The same operations are used by the RVL runtime implicitly to read the cell value or iterate through the Map.</p>"},{"location":"Libraries/Map/#actions","title":"Actions","text":""},{"location":"Libraries/Map/#domovetorow","title":"DoMoveToRow","text":"<pre><code>SomeMapVar.DoMoveToRow(/**number*/ rowInd)\n</code></pre> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins ... ... ... End of Map Action Logins DoMoveToRow rowInd number 7 <p>Moves to the row with a given index. Zero-based. If map type is <code>Rows</code> then row with index 0 is the row with column names.</p> <ul> <li><code>rowInd</code>: Row index (or name) to set active.</li> </ul>"},{"location":"Libraries/Map/#dosequential","title":"DoSequential","text":"<pre><code>SomeMapVar.DoSequential()\n</code></pre> <p>Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row which is considered to contain column names. When the end of the range is reached, DoSequential rewinds back to the first row in the range and returns <code>false</code>.</p> <p>Returns <code>false</code> if being called when active row is the last row or the spreadsheet is not attached, <code>true</code> - otherwise.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins ... ... ... End of Map Action Logins DoSequential"},{"location":"Libraries/Map/#domovetocolumn","title":"DoMoveToColumn","text":"<pre><code>DoMoveToColumn(/**number|string*/ colInd)\n</code></pre> <p>Moves to the column with a given index or name. Index is zero-based. If map type is <code>Columns</code> then column with index 0 is the column with row names.</p> <ul> <li><code>colInd</code>: Column index (or name) to set active.</li> </ul> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs ... ... ... End of Map Action Configs DoMoveToColumn colInd number 3"},{"location":"Libraries/Map/#domovetofirstcolumn","title":"DoMoveToFirstColumn","text":"<pre><code>DoMoveToFirstColumn()\n</code></pre> <p>Moves to a first column with data in the map. If map type is <code>Columns</code> then first column index is 1, if map type is <code>Rows</code> then first column index is 0.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs ... ... ... End of Map Action Configs DoMoveToFirstColumn"},{"location":"Libraries/Map/#domovetofirstrow","title":"DoMoveToFirstRow","text":"<pre><code>DoMoveToFirstRow()\n</code></pre> <p>Moves to a first row with data in the map. If map type is <code>Rows</code> then first row index is 1, if map type is <code>Columns</code> then first row index is 0.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins ... ... ... End of Map Action Logins DoMoveToFirstRow"},{"location":"Libraries/Map/#domovetolastcolumn","title":"DoMoveToLastColumn","text":"<pre><code>DoMoveToLastColumn()\n</code></pre> <p>Moves to a last column in the map.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs ... ... ... End of Map Action Configs DoMoveToLastColumn"},{"location":"Libraries/Map/#domovetolastrow","title":"DoMoveToLastRow","text":"<pre><code>DoMoveToLastRow()\n</code></pre> <p>Moves to a last row in the map.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins ... ... ... End of Map Action Logins DoMoveToLastRow"},{"location":"Libraries/Map/#properties","title":"Properties","text":""},{"location":"Libraries/Map/#cell","title":"Cell","text":"<pre><code>GetCell(/**number|string*/ columnId, /**number*/ rowId)\n</code></pre> <p>Gets a cell value by its coordinates. It returns the current cell value after <code>DoSequential</code> or <code>DoRandom</code> if the parameters are not set.</p> <ul> <li><code>[columnId]</code>: Column index or name. If not set ActiveColumn is used.</li> <li><code>[rowId]</code>: Row index. If not set ActiveRow is used.</li> </ul> Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins ... ... ... End of Map Action Logins GetCell columnId string login Param rowId number 3"},{"location":"Libraries/Map/#columncell","title":"ColumnCell","text":"<pre><code>GetColumnCell(/**number*/ rowId)\n</code></pre> <p>Gets cell value by its coordinates. Returns current cell value after <code>DoSequential</code>. If not set <code>ActiveColumn</code> is used.</p> <ul> <li><code>[rowId]</code>: Row index. If not set <code>ActiveRow</code> is used.</li> </ul> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs Prod Staging QA url https://url1 https://url2 https://url3 password (*&amp;jn9sdf) test test End of Map # Read password Action Configs GetColumnCell rowId number 1"},{"location":"Libraries/Map/#columncount","title":"ColumnCount","text":"<pre><code>GetColumnCount()\n</code></pre> <p>Returns number of columns in the spreadsheet.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Table Configs Prod Staging QA url https://url1 https://url2 https://url3 password (*&amp;jn9sdf) test test End of Map # Read password Variable cnt number 0 Action Configs GetColumnCount Output variable cnt # cnt now is 3"},{"location":"Libraries/Map/#columnindexbyname","title":"ColumnIndexByName","text":"<pre><code>GetColumnIndexByName(/**string*/ name)\n</code></pre> <p>Gets index of a column with the given name.</p> <ul> <li><code>name</code>: Column name.</li> </ul> <p>Returns column index if found, or -1.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map Action Users GetColumnIndexByName name string password Action Tester Message message variable LastResult"},{"location":"Libraries/Map/#columnname","title":"ColumnName","text":"<pre><code>GetColumnName(/**number*/ ind)\n</code></pre> <p>Gets column name.</p> <ul> <li><code>ind</code>: Column index.</li> </ul> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map Action Users GetColumnName ind number 1 Action Tester Message message variable LastResult <p>Returns name of column in the spreadsheet.</p>"},{"location":"Libraries/Map/#rowcount","title":"RowCount","text":"<pre><code>GetRowCount()\n</code></pre> <p>Returns number of rows in the spreadsheet.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map Action Users GetRowCount Action Tester Message message variable LastResult"},{"location":"Libraries/Map/#rowindexbyname","title":"RowIndexByName","text":"<pre><code>GetRowIndexByName(/**string*/ name)\n</code></pre> <p>Gets row name.</p> <ul> <li><code>name</code>: Row name.</li> </ul> <p>Returns row index if found, or -1.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Table Configs Prod Staging QA url https://url1 https://url2 https://url3 password (*&amp;jn9sdf) test test End of Map # Read password Variable cnt number 0 Action Configs GetRowIndexByName name string password Output variable cnt"},{"location":"Libraries/Map/#currentrowindex","title":"CurrentRowIndex","text":"<pre><code>GetCurrentRowIndex()\n</code></pre> <p>Gets zero based current row index.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map Action Users GetCurrentRowIndex Action Tester Message message variable LastResult"},{"location":"Libraries/Map/#eof","title":"EOF","text":"<pre><code>GetEOF()\n</code></pre> <p>Returns <code>true</code> if current position is beyond the map boundaries range.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map If Action Users GetEOF Condition output1 IsTrue Action RVL Return message string Done End"},{"location":"Libraries/Map/#rowcell","title":"RowCell","text":"<pre><code>GetRowCell(/**number|string*/ columnId)\n</code></pre> <p>Gets cell value for current row. Returns current cell value after <code>DoSequential</code>. <code>ActiveRow</code> is used.</p> <ul> <li><code>[columnId]</code>: Column index or name. If not set <code>ActiveColumn</code> is used.</li> </ul> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users name password librarian p1 borrower pass2 End of Map Action Users GetRowCell columnId string passsword Action Tester Message message variable LastResult"},{"location":"Libraries/Map/#rowname","title":"RowName","text":"<pre><code>GetRowName(/**number*/ ind)\n</code></pre> <p>Gets row name.</p> <ul> <li><code>ind</code>: Row index.</li> </ul> <p>Returns name of row in the map.</p> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs Prod Staging QA url https://url1 https://url2 https://url3 password (*&amp;jn9sdf) test test End of Map # Read password Action Configs GetRowName ind number 0"},{"location":"Libraries/Map/#value","title":"Value","text":"<pre><code>GetValue(/**number|string*/ rowOrColumnNameOrId)\n</code></pre> <p>Gets cell value by its name or id. Returns current cell value after <code>DoSequential</code>. If it is <code>Rows</code> or <code>Table</code> map then the parameter needs to be a column name or index, and <code>ActiveRow</code> is used. If it is <code>Columns</code> map then the parameter needs to be a row name or index, and <code>ActiveRow</code> is used.</p> <ul> <li><code>[rowOrColumnNameOrId]</code>: Row or Column index or Name.</li> </ul> <p>RVL:</p> Flow Type Object Action ParamName ParamType ParamValue Map Columns Configs Prod Staging QA url https://url1 https://url2 https://url3 password (*&amp;jn9sdf) test test End of Map # Read password Action Configs GetValue # LastResult = https://url1 (0<sup>th</sup> row, 0<sup>th</sup> cell)"},{"location":"Libraries/MobileWebObject/","title":"MobileWebObject","text":"<p>Web Mobile Object.</p> <p>Behavior Pattern: MobileWebObjectGenericBehavior</p>"},{"location":"Libraries/MobileWebObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType Type of the object. GetObjectType Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/MobileWebObject/#action-summary","title":"Action Summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control. DoDoubleClick Double clicks in the middle of the control. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoSendKeys Send a text to the object in character-by-character mode."},{"location":"Libraries/MobileWebObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/MobileWebObject/#childat","title":"ChildAt","text":"<p>Child object at index.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the object to get. <p>Type: string</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeMobileWebObject').GetChildAt(index)\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#childcount","title":"ChildCount","text":"<p>Number of child items.</p> <p>Type: number</p> <p>Accessors: GetChildCount</p> <pre><code>value = SeS('SomeMobileWebObject').GetChildCount()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#class","title":"Class","text":"<p>Class name of the object.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeMobileWebObject').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeMobileWebObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#name","title":"Name","text":"<p>Name of the object.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeMobileWebObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#objecttype","title":"ObjectType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetObjectType</p> <pre><code>value = SeS('SomeMobileWebObject').GetObjectType()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#property","title":"Property","text":"<p>Value of a named property of the object.</p> <p>Getter Parameters:</p> Name Type Description name string Property name. <p>Type: string</p> <p>Accessors: GetProperty</p> <pre><code>value = SeS('SomeMobileWebObject').GetProperty(name)\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeMobileWebObject').GetText()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeMobileWebObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeMobileWebObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/MobileWebObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeMobileWebObject').GetY()\n</code></pre>"},{"location":"Libraries/MobileWebObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/MobileWebObject/#doaction","title":"DoAction","text":"<p>Clicks in the middle of the control.</p> <pre><code>SeS('SomeMobileWebObject').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MobileWebObject/#doclear","title":"DoClear","text":"<p>Clears the text of the object.</p> <pre><code>SeS('SomeMobileWebObject').DoClear()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MobileWebObject/#doclick","title":"DoClick","text":"<p>Clicks in the middle of the control.</p> <pre><code>SeS('SomeMobileWebObject').DoClick()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MobileWebObject/#dodoubleclick","title":"DoDoubleClick","text":"<p>Double clicks in the middle of the control.</p> <pre><code>SeS('SomeMobileWebObject').DoDoubleClick()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MobileWebObject/#doensurevisible","title":"DoEnsureVisible","text":"<p>Ensure that a child item with the specified text is visible on screen.</p> <pre><code>SeS('SomeMobileWebObject').DoEnsureVisible()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/MobileWebObject/#dosendkeys","title":"DoSendKeys","text":"<p>Send a text to the object in character-by-character mode.</p> <pre><code>SeS('SomeMobileWebObject').DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string Text to type into the object. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/NavButtonPad/","title":"NavButtonPad","text":"<p>NavPOSControls NavButtonPad.</p> <p>UI element class: LSRetail.NAV.POSControls.ButtonPad</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: POSControlsButtonPadBehavior</p>"},{"location":"Libraries/NavButtonPad/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ButtonCaption Caption of a button with specified index GetButtonCaption ColumnCount Number of columns on a page GetColumnCount FullInfo JSON-formatted info for all buttons GetFullInfo FullText TAB-separated table with button captions GetFullText PageCount Number of pages GetPageCount RowCount Number of rows on a page GetRowCount ToggleState ToggleState of the button GetToggleState"},{"location":"Libraries/NavButtonPad/#action-summary","title":"Action Summary","text":"Action Description DoClick Click button by caption or no (1-based index)"},{"location":"Libraries/NavButtonPad/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/NavButtonPad/#buttoncaption","title":"ButtonCaption","text":"<p>Caption of a button with specified index</p> <p>Getter Parameters:</p> Name Type Description textOrId string | number button 'no' (1-based index) <p>Type: string</p> <p>Accessors: GetButtonCaption</p> <pre><code>value = SeS('SomeNavButtonPad').GetButtonCaption(/**string|number*/textOrId)\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#columncount","title":"ColumnCount","text":"<p>Number of columns on a page</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeNavButtonPad').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#fullinfo","title":"FullInfo","text":"<p>JSON-formatted info for all buttons</p> <p>Type: string</p> <p>Accessors: GetFullInfo</p> <pre><code>value = SeS('SomeNavButtonPad').GetFullInfo()\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#fulltext","title":"FullText","text":"<p>TAB-separated table with button captions</p> <p>Type: string</p> <p>Accessors: GetFullText</p> <pre><code>value = SeS('SomeNavButtonPad').GetFullText()\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#pagecount","title":"PageCount","text":"<p>Number of pages</p> <p>Type: number</p> <p>Accessors: GetPageCount</p> <pre><code>value = SeS('SomeNavButtonPad').GetPageCount()\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#rowcount","title":"RowCount","text":"<p>Number of rows on a page</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeNavButtonPad').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/NavButtonPad/#togglestate","title":"ToggleState","text":"<p>ToggleState of the button</p> <p>Getter Parameters:</p> Name Type Description textOrId string | number caption or 'no' (1-based index) <p>Type: boolean</p> <p>Accessors: GetToggleState</p> <pre><code>value = SeS('SomeNavButtonPad').GetToggleState(/**string|number*/textOrId)\n</code></pre>"},{"location":"Libraries/NavButtonPad/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/NavButtonPad/#doclick","title":"DoClick","text":"<p>Click button by caption or no (1-based index)</p> <pre><code>SeS('SomeNavButtonPad').DoClick(textOrId, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description textOrId string | number caption or 'no' (1-based index) timeout number number of milliseconds to wait for a button to appearOptional, Default: \"5000\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Navigator/","title":"Navigator","text":"<p>Navigator object. This is used to provide functions for manipulating the web browser when using the HTML libraries.</p>"},{"location":"Libraries/Navigator/#property-summary","title":"Property Summary","text":"Property Description AutoOpen During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. EnsureVisibleHorizontalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". EnsureVisibleScrollBehavior One of default scroll behaviors: \"auto\", \"smooth\" or \"instant\". EnsureVisibleVerticalAlignment One of \"start\", \"center\", \"end\", or \"nearest\". NativeEvents Set it to true to use native keyboard and mouse input. QuitIfNotConnected If connection to browser fails - open plugin page and quit."},{"location":"Libraries/Navigator/#action-summary","title":"Action Summary","text":"Action Description Back Goes back to the previous page in the browser history. CheckObjectActive Checks if object is active by its id or XPath. CheckObjectEnabled Checks if object is enabled by its id or XPath. CheckObjectExists Checks if object is found on the screen by its id or XPath. CheckObjectVisible Checks if object is visible on the screen by its id or XPath. Close Closes browser. Detach Disconnects from a browser. DoActivateWindow Makes specified browser window active and focused. DoCheckAlert Waits until browser alert with a given text. DoCheckConfirmation Waits until browser confirmation with a given text. DoCheckPrompt Waits until browser prompt with a given text. DoClickUntilOnScreen Clicks on a given element until another element appears on screen. DoClickWhileOnScreen Clicks on an element until it disappears. DoCloseTab Closes currently selected tab. DoCloseWindow Closes currently active browser window. DoCreateTab Creates new browser tab. DoCreateWindow Creates a new browser window. DOMFindByAttributeValue Looks for a web element by specific attribute value through all frames. DOMFindByName Looks for a web element by its name through all frames. DOMFindByText Looks for a web element by its text contents through all frames. DOMFindByXPath Looks for a web element by specific local XPath value through all frames. DoMoveWindow Sets the position of the active browser window. DOMQueryValue Executes an xpath query that may return a value of string, number or boolean type. DoResizeWindow Sets size of the active browser window. DoScreenshot Makes screenshot of the browser window. DoSelectTab Selects browser tab by title or URL. DoSendKeys Sends keys to an active element on a page. DoSetExpectedConfirmResult Sets boolean value to return as a result of next browser <code>confirm</code> request. DoSetExpectedPromptResult Sets text to return as a result of next browser <code>prompt</code> request. DoWaitFor Waits for object to appear in the current browser. DoWaitForEnabled Waits for object to become enabled. DoWaitForVisible Waits for object to appear in the screen. ExecJS Executes given JavaScript statement in a browser and returns results. ExecPageJS Executes given JavaScript statement in a browser in the context of the current page. Find Returns HTMLObject wrapping DOM element for a given <code>xpath</code>. Forward Goes forward to the next page in the browser history. GetActiveTabId Gets Id of active browser tab. GetActiveTabTitle Gets title of active browser tab. GetActiveTabUrl Gets URL of active browser tab. GetActiveWindowId Gets active browser window Id. GetActiveWindowTitle Gets active browser window title. GetActiveWindowUrl Gets active browser window URL. GetPerformance Reads performance information from currently used browser. GetPosition Gets position of the top-left corner of the browser window. GetSize Gets size of the browser window. GetTabIdAt Gets browser tab Id. GetTabIndexById Gets index of the browser tab by Id. GetTabsCount Gets number of browser tabs. GetTabTitleAt Gets browser tab title. GetTabUrlAt Gets browser tab URL. GetWindowIdAt Gets browser window Id. GetWindowsCount Gets the number of browser windows. GetWindowTitleAt Gets browser window title. GetWindowUrlAt Gets browser window URL. KillBrowser Kills the browser process. LaunchBrowser Launches browser, but does not connect to it. Maximize Maximizes browser window. Navigate Redirects browser to a specified URL. Open Opens a browser. Refresh Reloads the current page. SelectBrowserProfile Selects browser profile to use for testing. SeSFind Waits for object to appear on screen. SetPosition Positions top-left corner of the browser window at specifid location. SetSize Sets size if the browser window."},{"location":"Libraries/Navigator/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Navigator/#autoopen","title":"AutoOpen","text":"<p>During playback when Rapise connects to a browser for the first time and can not locate an object and AutoOpen is 'true' it launches a new browser instance. If AutoOpen is 'false' it does nothing. Default value is 'true'. Applicable to Chrome, Firefox and Internet Explorer. Selenium targets are not affected by this property. Use Navigator.GetAutoOpen() to read the value and Navigator.SetAutoOpen(true|false) to set the value.</p> <p>Type: boolean</p> <p></p>"},{"location":"Libraries/Navigator/#ensurevisiblehorizontalalignment","title":"EnsureVisibleHorizontalAlignment","text":"<p>One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"nearest\".</p> <p>Type: string</p> <p></p>"},{"location":"Libraries/Navigator/#ensurevisiblescrollbehavior","title":"EnsureVisibleScrollBehavior","text":"<p>One of default scroll behaviors: \"auto\", \"smooth\" or \"instant\". Defaults ot \"instant\".</p> <p>Type: string</p> <p></p>"},{"location":"Libraries/Navigator/#ensurevisibleverticalalignment","title":"EnsureVisibleVerticalAlignment","text":"<p>One of \"start\", \"center\", \"end\", or \"nearest\". Defaults to \"start\".</p> <p>Type: string</p> <p></p>"},{"location":"Libraries/Navigator/#nativeevents","title":"NativeEvents","text":"<p>Set it to true to use native keyboard and mouse input. Overrides browser profile settings. Does not affect Selenium targets. Requires Rapise 6.3+</p> <p>Type: boolean</p> <p></p>"},{"location":"Libraries/Navigator/#quitifnotconnected","title":"QuitIfNotConnected","text":"<p>If connection to browser fails - open plugin page and quit. If set to 'false' - just return 'false' in Open call.</p> <p>Type: boolean</p>"},{"location":"Libraries/Navigator/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Navigator/#back","title":"Back","text":"<p>Goes back to the previous page in the browser history. Requires Rapise 8.0+.</p> <pre><code>Navigator.Back()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#checkobjectactive","title":"CheckObjectActive","text":"<p>Checks if object is active by its id or XPath.</p> <pre><code>Navigator.CheckObjectActive(xpathOrObjId)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". <p>Returns:</p> <p><code>true</code> if object is active, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#checkobjectenabled","title":"CheckObjectEnabled","text":"<p>Checks if object is enabled by its id or XPath.</p> <pre><code>Navigator.CheckObjectEnabled(xpathOrObjId)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". <p>Returns:</p> <p><code>true</code> if object is available and enabled, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#checkobjectexists","title":"CheckObjectExists","text":"<p>Checks if object is found on the screen by its id or XPath.</p> <pre><code>Navigator.CheckObjectExists(xpathOrObjId)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". <p>Returns:</p> <p><code>true</code> if object exists, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#checkobjectvisible","title":"CheckObjectVisible","text":"<p>Checks if object is visible on the screen by its id or XPath.</p> <pre><code>Navigator.CheckObjectVisible(xpathOrObjId)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading \".\" or \"/\". <p>Returns:</p> <p><code>true</code> if object is available and visible, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#close","title":"Close","text":"<p>Closes browser. Finishes session.</p> <pre><code>Navigator.Close(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string Not used - can leave empty. Returns <code>true</code> if the browser closed successfully, otherwise - <code>false</code>. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#detach","title":"Detach","text":"<p>Disconnects from a browser. Make Navigator ready for a new browser instance connection.</p> <pre><code>Navigator.Detach()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doactivatewindow","title":"DoActivateWindow","text":"<p>Makes specified browser window active and focused. Requires Rapise 6.5+</p> <pre><code>Navigator.DoActivateWindow(titleOrUrl)\n</code></pre> <p>Parameters:</p> Name Type Description titleOrUrl string string or regex matching URL or window title. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#docheckalert","title":"DoCheckAlert","text":"<p>Waits until browser alert with a given text. Wait timeout is 10 seconds.</p> <pre><code>Navigator.DoCheckAlert(msg)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Alert text. Can be exact text or regular expression. <p>Returns:</p> <p><code>true</code> if browser alert had occurred, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#docheckconfirmation","title":"DoCheckConfirmation","text":"<p>Waits until browser confirmation with a given text. Wait timeout is 10 seconds.</p> <pre><code>Navigator.DoCheckConfirmation(msg, result)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Confirmation text. Can be exact text or regular expression. result string Not used - can leave empty.Optional. <p>Returns:</p> <p><code>true</code> if browser confirmation popup is shown, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#docheckprompt","title":"DoCheckPrompt","text":"<p>Waits until browser prompt with a given text. Wait timeout is 10 seconds.</p> <pre><code>Navigator.DoCheckPrompt(msg, result)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Prompt text. Can be exact text or regular expression. result string Not used - can leave empty.Optional. <p>Returns:</p> <p><code>true</code> if browser prompt popup is shown, <code>false</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doclickuntilonscreen","title":"DoClickUntilOnScreen","text":"<p>Clicks on a given element until another element appears on screen. Requires Rapise 6.3+</p> <pre><code>Navigator.DoClickUntilOnScreen(xpathOrObjIdToClick, xpathOrObjIdToExpect, attempts, delay, x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjIdToClick objectId Object Id or XPath of an element to click. xpathOrObjIdToExpect objectId Object Id or XPath of an element that should appear on screen. attempts number Max number of clicks. Default is 2.Optional. delay number Delay between attempts. Default is 1000 milliseconds.Optional. x number X-offset from the top-left corner of the object. Default is object width/2.Optional. y number Y-offset from the top-left corner of the object. Default is object height/2.Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings.Optional. <p>Returns:</p> <p>expected object if successful, otherwise - null.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doclickwhileonscreen","title":"DoClickWhileOnScreen","text":"<p>Clicks on an element until it disappears. Requires Rapise 6.3+</p> <pre><code>Navigator.DoClickWhileOnScreen(xpathOrObjId, attempts, delay, x, y, forceEvent)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectid Object Id or XPath of an element to click. attempts number Max number of clicks. Default is 2.Optional. delay number Delay between attempts. Default is 1000 milliseconds.Optional. x number X-offset from the top-left corner of the object. Default is object width/2.Optional. y number Y-offset from the top-left corner of the object. Default is object height/2.Optional. forceEvent boolean Default is false. Set to true to use browser level event for the click. Overrides browser profile settings.Optional. <p>Returns:</p> <p>true if object disappeared, otherwise - false.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doclosetab","title":"DoCloseTab","text":"<p>Closes currently selected tab. Requires Rapise 6.5+</p> <pre><code>Navigator.DoCloseTab()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doclosewindow","title":"DoCloseWindow","text":"<p>Closes currently active browser window. Requires Rapise 6.5+</p> <pre><code>Navigator.DoCloseWindow()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#docreatetab","title":"DoCreateTab","text":"<p>Creates new browser tab. Requires Rapise 6.5+</p> <pre><code>Navigator.DoCreateTab(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string new page URL <p></p> <p> </p>"},{"location":"Libraries/Navigator/#docreatewindow","title":"DoCreateWindow","text":"<p>Creates a new browser window. Requires Rapise 6.5+</p> <pre><code>Navigator.DoCreateWindow(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string page URL. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domfindbyattributevalue","title":"DOMFindByAttributeValue","text":"<p>Looks for a web element by specific attribute value through all frames. <code>attrValue</code> is checked against each element's <code>attrName</code> attribute.</p> <pre><code>Navigator.DOMFindByAttributeValue(attrName, attrValue, tagName, findAll, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description attrName string Name of the attribute to check. May be <code>@attr</code> or <code>attr</code>. attrValue string Expected attribute value. tagName string Tag name, default is * (any tag).Optional. findAll boolean Defines if we return just first element (<code>false</code>, default) or all found elements (<code>true</code>). Default is <code>false</code>.Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt.Optional. <p>Returns:</p> <p>array | object: If <code>findAll</code> is set to <code>false</code> then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domfindbyname","title":"DOMFindByName","text":"<p>Looks for a web element by its name through all frames. Name is checked against @name and @id attribute of each element</p> <pre><code>Navigator.DOMFindByName(name, tagName, findAll, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description name string Expected element name to search for. tagName string Tag name, default is * (any tag).Optional. findAll boolean Defines if we return just first element (<code>false</code>, default) or all found elements (<code>true</code>). Default is <code>false</code>.Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt.Optional. <p>Returns:</p> <p>array | object: If <code>findAll</code> is set to <code>false</code> then just first found element or null is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domfindbytext","title":"DOMFindByText","text":"<p>Looks for a web element by its text contents through all frames. <code>text</code> is checked against each element text contents.</p> <pre><code>Navigator.DOMFindByText(text, tagName, findAll, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description text string Expected text to search for. tagName string Tag name, default is * (any tag).Optional. findAll boolean Defines if we return just first element (<code>false</code>, default) or all found elements (<code>true</code>). Default is <code>false</code>.Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt.Optional. <p>Returns:</p> <p>array | object: If <code>findAll</code> is set to <code>false</code> then just first found element or <code>null</code> is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domfindbyxpath","title":"DOMFindByXPath","text":"<p>Looks for a web element by specific local XPath value through all frames. If XPath is local (i.e. //img) then search will be performed for all images in all nested frames.</p> <pre><code>Navigator.DOMFindByXPath(xpath, findAll, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Local XPath to execute for each frame. findAll boolean Defines if we return just first element (<code>false</code>, default) or all found elements (<code>true</code>). Default is <code>false</code>.Optional. timeout number Timeout in milliseconds to keep trying to find an element. Default behavior is just do single attempt.Optional. <p>Returns:</p> <p>array | object: If <code>findAll</code> is set to <code>false</code> then just first found element or <code>null</code> is returned. Else search is done for all matching elements and array of elements is returned (empty array if nothing found).</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domovewindow","title":"DoMoveWindow","text":"<p>Sets the position of the active browser window. Requires Rapise 6.5+</p> <pre><code>Navigator.DoMoveWindow(left, top)\n</code></pre> <p>Parameters:</p> Name Type Description left number offset in pixels from the corner of the display. top number offset in pixels from the corner of the display. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#domqueryvalue","title":"DOMQueryValue","text":"<p>Executes an xpath query that may return a value of string, number or boolean type. If the result of the query is an array of nodes - a combined string is returned (;-separated text values of nodes). If the query returns nothing (invalid query or nothing matches) then <code>null</code> is returned. Requires Rapise 6.4+</p> <pre><code>Navigator.DOMQueryValue(xpathOrObjId, query)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectId XPath or ID. XPath is detected by leading '.' or '/'. If the value is empty then this parameter defaults to <code>/html</code>. query string Absolute or relative xpath query. e.g. <code>count(//div)</code>, <code>//a[1]/@href='/Home'</code>, <code>./li/text()</code> <p>Returns:</p> <p>string | number | boolean: Result of the query or null in the case if the query is invalid or nothing matches.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doresizewindow","title":"DoResizeWindow","text":"<p>Sets size of the active browser window. Requires Rapise 6.5+</p> <pre><code>Navigator.DoResizeWindow(width, height)\n</code></pre> <p>Parameters:</p> Name Type Description width number New width of the browser window in pixels. height number New height of the browser window in pixels. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doscreenshot","title":"DoScreenshot","text":"<p>Makes screenshot of the browser window.</p> <pre><code>Navigator.DoScreenshot(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Save the screenshot to a file if name is specified. Otherwise - add to report.Optional. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#doselecttab","title":"DoSelectTab","text":"<p>Selects browser tab by title or URL. Requires Rapise 6.5+</p> <pre><code>Navigator.DoSelectTab(titleOrUrl)\n</code></pre> <p>Parameters:</p> Name Type Description titleOrUrl string string or regex matching tab URL or title. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dosendkeys","title":"DoSendKeys","text":"<p>Sends keys to an active element on a page. Requires Rapise 8.0+.</p> <pre><code>Navigator.DoSendKeys(txt)\n</code></pre> <p>Parameters:</p> Name Type Description txt string Keys to send. Supports patterns like in Global.DoSendKeys. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dosetexpectedconfirmresult","title":"DoSetExpectedConfirmResult","text":"<p>Sets boolean value to return as a result of next browser <code>confirm</code> request.</p> <pre><code>Navigator.DoSetExpectedConfirmResult(result)\n</code></pre> <p>Parameters:</p> Name Type Description result boolean Confirmation result, <code>true</code> or <code>false</code>. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dosetexpectedpromptresult","title":"DoSetExpectedPromptResult","text":"<p>Sets text to return as a result of next browser <code>prompt</code> request.</p> <pre><code>Navigator.DoSetExpectedPromptResult(result)\n</code></pre> <p>Parameters:</p> Name Type Description result string  |  object Expected prompt result. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dowaitfor","title":"DoWaitFor","text":"<p>Waits for object to appear in the current browser. Object may be hidden or disabled. Requires Rapise 6.3+</p> <pre><code>Navigator.DoWaitFor(xpathOrObjId, timeout, params)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. timeout number Max time to wait. Default is 10000 milliseconds.Optional. params object Overrides locator options.Optional. <p>Returns:</p> <p>found object, otherwise - false.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dowaitforenabled","title":"DoWaitForEnabled","text":"<p>Waits for object to become enabled. Requires Rapise 7.4+</p> <pre><code>Navigator.DoWaitForEnabled(xpathOrObjId, timeout, params)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. timeout number Max time to wait. Default is 10000 milliseconds.Optional. params object Overrides locator options.Optional. <p>Returns:</p> <p>found object, otherwise - false.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#dowaitforvisible","title":"DoWaitForVisible","text":"<p>Waits for object to appear in the screen. Requires Rapise 7.4+</p> <pre><code>Navigator.DoWaitForVisible(xpathOrObjId, timeout, params)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. timeout number Max time to wait. Default is 10000 milliseconds.Optional. params object Overrides locator options.Optional. <p>Returns:</p> <p>found object, otherwise - false.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#execjs","title":"ExecJS","text":"<p>Executes given JavaScript statement in a browser and returns results.</p> <pre><code>Navigator.ExecJS(scriptText, obj)\n</code></pre> <p>Parameters:</p> Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. Reference it as <code>el</code> or <code>arguments[0]</code>.Optional. <p>Returns:</p> <p>Result of code execution.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#execpagejs","title":"ExecPageJS","text":"<p>Executes given JavaScript statement in a browser in the context of the current page. It means the script may access JS variables and functions declared on the page. Requires Rapise 6.5+</p> <pre><code>Navigator.ExecPageJS(scriptText, obj)\n</code></pre> <p>Parameters:</p> Name Type Description scriptText string JavaScript code. obj HTMLObject You may pass object to use in the JavaScript statement. The script will be executed in a frame, containing given obj.Optional. <p>Returns:</p> <p>Result of code execution.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#find","title":"Find","text":"<p>Returns HTMLObject wrapping DOM element for a given <code>xpath</code>.</p> <pre><code>Navigator.Find(xpath, url, title, objInfo)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Location path of a DOM element. url string URL. If new Navigator is launched, the URL is used.Optional. title string The title of the HTML document that is being searched. objInfo SeSObjectInfo A populated <code>SeSObjectInfo</code> object. <p>Returns:</p> <p>HTMLObject wrapping DOM element for a given <code>xpath</code>, <code>null</code> if <code>xpath</code> is invalid.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#forward","title":"Forward","text":"<p>Goes forward to the next page in the browser history. Requires Rapise 8.0+.</p> <pre><code>Navigator.Forward()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivetabid","title":"GetActiveTabId","text":"<p>Gets Id of active browser tab. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveTabId()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivetabtitle","title":"GetActiveTabTitle","text":"<p>Gets title of active browser tab. Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveTabTitle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivetaburl","title":"GetActiveTabUrl","text":"<p>Gets URL of active browser tab. Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveTabUrl()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivewindowid","title":"GetActiveWindowId","text":"<p>Gets active browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveWindowId()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivewindowtitle","title":"GetActiveWindowTitle","text":"<p>Gets active browser window title. Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveWindowTitle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getactivewindowurl","title":"GetActiveWindowUrl","text":"<p>Gets active browser window URL. Requires Rapise 6.5+</p> <pre><code>Navigator.GetActiveWindowUrl(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getperformance","title":"GetPerformance","text":"<p>Reads performance information from currently used browser. Performance numbers are based on output from window.performance structure of the web page. See also http://www.w3.org/TR/navigation-timing/#processing-model</p> <pre><code>Navigator.GetPerformance(resources, dontWriteReport)\n</code></pre> <p>Parameters:</p> Name Type Description resources boolean optional, bool. Set to true if you want to dump information about resource timing into the reportOptional. dontWriteReport boolean optional, Set to true if you want just return page load time and write nothing to reportOptional. <p>Returns:</p> <p>number: page open time (in milliseconds)</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getposition","title":"GetPosition","text":"<p>Gets position of the top-left corner of the browser window. This function is DPI aware.</p> <pre><code>Navigator.GetPosition()\n</code></pre> <p>Returns:</p> <p>object: {X, Y}</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getsize","title":"GetSize","text":"<p>Gets size of the browser window. This function is DPI aware.</p> <pre><code>Navigator.GetSize()\n</code></pre> <p>Returns:</p> <p>object: {Width, Height}</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#gettabidat","title":"GetTabIdAt","text":"<p>Gets browser tab Id. Id may be used as parameter to Navigator.DoSelectTab(). Requires Rapise 6.5+</p> <pre><code>Navigator.GetTabIdAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetTabsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#gettabindexbyid","title":"GetTabIndexById","text":"<p>Gets index of the browser tab by Id. Index may be used as param to GetTabIdAt/GetTabUrlAt/GetTabTitleAt. Requires Rapise 6.5+</p> <pre><code>Navigator.GetTabIndexById(tabId)\n</code></pre> <p>Parameters:</p> Name Type Description tabId number <p></p> <p> </p>"},{"location":"Libraries/Navigator/#gettabscount","title":"GetTabsCount","text":"<p>Gets number of browser tabs. Requires Rapise 6.5+</p> <pre><code>Navigator.GetTabsCount()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#gettabtitleat","title":"GetTabTitleAt","text":"<p>Gets browser tab title. Requires Rapise 6.5+</p> <pre><code>Navigator.GetTabTitleAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetTabsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#gettaburlat","title":"GetTabUrlAt","text":"<p>Gets browser tab URL. Requires Rapise 6.5+</p> <pre><code>Navigator.GetTabUrlAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetTabsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getwindowidat","title":"GetWindowIdAt","text":"<p>Gets browser window Id. Id is an internal identifier. May be used as a parameter to Navigator.DoActivateWindow(). Requires Rapise 6.5+</p> <pre><code>Navigator.GetWindowIdAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetWindowsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getwindowscount","title":"GetWindowsCount","text":"<p>Gets the number of browser windows. Requires Rapise 6.5+</p> <pre><code>Navigator.GetWindowsCount()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getwindowtitleat","title":"GetWindowTitleAt","text":"<p>Gets browser window title. Requires Rapise 6.5+</p> <pre><code>Navigator.GetWindowTitleAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetWindowsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#getwindowurlat","title":"GetWindowUrlAt","text":"<p>Gets browser window URL. Requires Rapise 6.5+</p> <pre><code>Navigator.GetWindowUrlAt(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number number from 0 to Navigator.GetWindowsCount() <p></p> <p> </p>"},{"location":"Libraries/Navigator/#killbrowser","title":"KillBrowser","text":"<p>Kills the browser process. The browser to kill is detected from browser profile settings. Requires Rapise 6.4+</p> <pre><code>Navigator.KillBrowser()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#launchbrowser","title":"LaunchBrowser","text":"<p>Launches browser, but does not connect to it. Recommended for applications with basic authentication. Requires Rapise 6.5+</p> <pre><code>Navigator.LaunchBrowser(url)\n</code></pre> <p>Parameters:</p> Name Type Description url Initial url, may be empty.Optional. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#maximize","title":"Maximize","text":"<p>Maximizes browser window.</p> <pre><code>Navigator.Maximize()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#navigate","title":"Navigate","text":"<p>Redirects browser to a specified URL.</p> <pre><code>Navigator.Navigate(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string The URL to navigate to. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#open","title":"Open","text":"<p>Opens a browser. If URL is specified, goes to URL.</p> <pre><code>Navigator.Open(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string Start URL for opening browser. Can be <code>null</code>. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#refresh","title":"Refresh","text":"<p>Reloads the current page. Requires Rapise 8.0+.</p> <pre><code>Navigator.Refresh()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#selectbrowserprofile","title":"SelectBrowserProfile","text":"<p>Selects browser profile to use for testing.</p> <pre><code>Navigator.SelectBrowserProfile(profileName)\n</code></pre> <p>Parameters:</p> Name Type Description profileName string name of a browser profile. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#sesfind","title":"SeSFind","text":"<p>Waits for object to appear on screen. Uses test ObjectLookup... settings. Requires Rapise 6.4+</p> <pre><code>Navigator.SeSFind(xpathOrObjId, params)\n</code></pre> <p>Parameters:</p> Name Type Description xpathOrObjId objectid Object Id or XPath of an element to check. params object Overrides locator options.Optional. <p>Returns:</p> <p>found object, otherwise - <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Navigator/#setposition","title":"SetPosition","text":"<p>Positions top-left corner of the browser window at specifid location. This function is DPI aware.</p> <pre><code>Navigator.SetPosition(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X-offset from the top-left corner of the screen. y number Y-offset from the top-left corner of the screen. <p></p> <p> </p>"},{"location":"Libraries/Navigator/#setsize","title":"SetSize","text":"<p>Sets size if the browser window. This function is DPI aware.</p> <pre><code>Navigator.SetSize(width, height)\n</code></pre> <p>Parameters:</p> Name Type Description width number New width of the browser window. height number New height of the browser window. <p></p>"},{"location":"Libraries/NeoLoad/","title":"NeoLoad","text":"<p>Important</p> <p>NeoLoad integration has been removed in Rapise 7.0.</p> <p>Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/NeoLoad/#action-summary","title":"Action Summary","text":"Action Description CaptureBrowserPerformance Captures duration of loading a page and resources. CaptureHostPerformance Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery. CapturePerformanceValue Sends performance value to NeoLoad. CreateClient Connects to NeoLoad. EndTransaction Marks end of a transaction and sends performance metrics to NeoLoad. GetNetworkInterfaceNames Gets names of network interfaces. SetBaseContainer Sets current step (Init, Actions, End) during test conversion SetContainer Sets current container/business transaction during test conversion StartTransaction Marks start of a transaction."},{"location":"Libraries/NeoLoad/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/NeoLoad/#capturebrowserperformance","title":"CaptureBrowserPerformance","text":"<p>Captures duration of loading a page and resources.</p> <pre><code>CaptureBrowserPerformance(url) \n</code></pre> <p>Parameters:</p> Name Type Description url Node name for NeoLoad entry tree. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#capturehostperformance","title":"CaptureHostPerformance","text":"<p>Sends host performance metrics to NeoLoad: CPU, Memory, Network, Battery.</p> <pre><code>CaptureHostPerformance() \n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#captureperformancevalue","title":"CapturePerformanceValue","text":"<p>Sends performance value to NeoLoad.</p> <pre><code>CapturePerformanceValue(entry, path, units, value) \n</code></pre> <p>Parameters:</p> Name Type Description entry Name of a group of performance metrics. Can be a transaction name. path Name of a metric to capture. units Units of measure. value Current value of the metric. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#createclient","title":"CreateClient","text":"<p>Connects to NeoLoad.</p> <pre><code>CreateClient(hardware, location, networkInterface) \n</code></pre> <p>Parameters:</p> Name Type Description hardware string Hardware details (Apple MacBook Pro, Sony Vaio, etc.) location string Location information. networkInterface string Name of network interface to monitor. Names of available interfaces can be obtained using GetNetworkInterfaceNames. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#endtransaction","title":"EndTransaction","text":"<p>Marks end of a transaction and sends performance metrics to NeoLoad.</p> <pre><code>EndTransaction(name) \n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a transaction. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#getnetworkinterfacenames","title":"GetNetworkInterfaceNames","text":"<p>Gets names of network interfaces. Use one of them to CreateClient.</p> <pre><code>GetNetworkInterfaceNames() \n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#setbasecontainer","title":"SetBaseContainer","text":"<p>Sets current step (Init, Actions, End) during test conversion</p> <pre><code>SetBaseContainer(name) \n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a step. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#setcontainer","title":"SetContainer","text":"<p>Sets current container/business transaction during test conversion</p> <pre><code>SetContainer(name) \n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a container/transaction. <p></p> <p> </p>"},{"location":"Libraries/NeoLoad/#starttransaction","title":"StartTransaction","text":"<p>Marks start of a transaction.</p> <pre><code>StartTransaction(name) \n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a transaction. <p></p>"},{"location":"Libraries/OFTabBar/","title":"OFTabBar","text":"<p>Oracle Forms OFTabBar.</p> <p>UI element class: oracle.ewt.tabBar.TabBar</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsTabBarBehavior</p>"},{"location":"Libraries/OFTabBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText"},{"location":"Libraries/OFTabBar/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/OFTabBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/OFTabBar/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeOFTabBar').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/OFTabBar/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeOFTabBar').GetSelectedIndex()\n\nSeS('SomeOFTabBar').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/OFTabBar/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeOFTabBar').GetSelectedText()\n\nSeS('SomeOFTabBar').SetSelectedText(value)\n</code></pre>"},{"location":"Libraries/OFTabBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OFTabBar/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeOFTabBar').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/OFToolBar/","title":"OFToolBar","text":"<p>Oracle Forms OFToolBar.</p> <p>UI element class: oracle.ewt.toolBar.ToolBar</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsToolBarBehavior</p>"},{"location":"Libraries/OFToolBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemChecked Check if item is checked. GetItemChecked SetItemChecked ItemIndexByName Returns item index by its name. GetItemIndexByName"},{"location":"Libraries/OFToolBar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the navigation item"},{"location":"Libraries/OFToolBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/OFToolBar/#itemchecked","title":"ItemChecked","text":"<p>Check if item is checked.</p> <p>Type: boolean</p> <p>Accessors: GetItemChecked, SetItemChecked</p> <pre><code>value = SeS('SomeOFToolBar').GetItemChecked(nameOrInd)\n\nSeS('SomeOFToolBar').SetItemChecked(nameOrInd, bValue)\n</code></pre> <p></p>"},{"location":"Libraries/OFToolBar/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeOFToolBar').GetItemIndexByName(name)\n</code></pre>"},{"location":"Libraries/OFToolBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OFToolBar/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the navigation item</p> <pre><code>SeS('SomeOFToolBar').DoClickItem(nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/OracleEnhLabledIconButton/","title":"OracleEnhLabledIconButton","text":"<p>Oracle Forms Enhanced Labelled Icon Button.</p> <p>UI element class: oracle.forms.enhancedItems.LabledIconButton</p> <p>Extends VButton</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/OracleForms/","title":"OracleForms","text":"<p>OracleForms Global Helper Object.</p>"},{"location":"Libraries/OracleForms/#action-summary","title":"Action Summary","text":"Action Description DoLOVSelect Get title of currently displayed LOV selection window. DoMenu DoPressNotificationButton Get message of currently displayed notification window. GetLOVTitle GetNotificationMessage GetNotificationTitle Get status bar message. GetStatusMessage"},{"location":"Libraries/OracleForms/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OracleForms/#dolovselect","title":"DoLOVSelect","text":"<p>Get title of currently displayed LOV selection window.</p> <pre><code>OracleForms.DoLOVSelect(txtOrInd, timeout)\n</code></pre> <p>Parameters:</p> Name Type Description txtOrInd string | number timeout number <p>Returns:</p> <p>popup window title.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleForms/#domenu","title":"DoMenu","text":"<pre><code>OracleForms.DoMenu(menuPath, sep)\n</code></pre> <p>Parameters:</p> Name Type Description menuPath string sep string <p></p> <p> </p>"},{"location":"Libraries/OracleForms/#dopressnotificationbutton","title":"DoPressNotificationButton","text":"<p>Get message of currently displayed notification window.</p> <pre><code>OracleForms.DoPressNotificationButton(label)\n</code></pre> <p>Parameters:</p> Name Type Description label string <p>Returns:</p> <p>popup window message.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleForms/#getlovtitle","title":"GetLOVTitle","text":"<pre><code>OracleForms.GetLOVTitle()\n</code></pre>"},{"location":"Libraries/OracleForms/#getnotificationmessage","title":"GetNotificationMessage","text":"<pre><code>OracleForms.GetNotificationMessage()\n</code></pre>"},{"location":"Libraries/OracleForms/#getnotificationtitle","title":"GetNotificationTitle","text":"<p>Get status bar message.</p> <pre><code>OracleForms.GetNotificationTitle(timeout)\n</code></pre> <p>Parameters:</p> Name Type Description timeout number <p>Returns:</p> <p>status bar message text.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleForms/#getstatusmessage","title":"GetStatusMessage","text":"<pre><code>OracleForms.GetStatusMessage()\n</code></pre>"},{"location":"Libraries/OracleFormsMenuBar/","title":"OracleFormsMenuBar","text":"<p>Oracle Forms MenuBar.</p> <p>UI element class: oracle.ewt.lwAWT.lwMenu.LWMenuBar</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsMenuBarBehavior</p>"},{"location":"Libraries/OracleFormsMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoGetSubmenuProperty Gets submenu property. DoMenu Performs click on the menu item."},{"location":"Libraries/OracleFormsMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OracleFormsMenuBar/#dogetsubmenuproperty","title":"DoGetSubmenuProperty","text":"<p>Gets submenu property.</p> <pre><code>SeS('SomeOracleFormsMenuBar').DoGetSubmenuProperty(path, property, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. property string Name of a property. Available properties can be seen in Java Spy. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string | boolean: Submenu property, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleFormsMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeOracleFormsMenuBar').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/OracleFormsObject/","title":"OracleFormsObject","text":"<p>Oracle Forms Object.</p> <p>UI element class: regex:oracle\\.(ewt||forms)\\..*</p> <p>Extends JavaObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsGenericBehavior</p>"},{"location":"Libraries/OracleFormsObject/#action-summary","title":"Action Summary","text":"Action Description DoSetFocus Sets keyboard input focus to this editor control. DoSoftKey Send softkey to this editor control."},{"location":"Libraries/OracleFormsObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OracleFormsObject/#dosetfocus","title":"DoSetFocus","text":"<p>Sets keyboard input focus to this editor control.</p> <pre><code>SeS('SomeOracleFormsObject').DoSetFocus()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/OracleFormsObject/#dosoftkey","title":"DoSoftKey","text":"<p>Send softkey to this editor control.</p> <pre><code>SeS('SomeOracleFormsObject').DoSoftKey(softKey, bNoFocus)\n</code></pre> <p>Parameters:</p> Name Type Description softKey string Soft Key Code Possible values: \"NEXT FIELD\", \"CLEAR RECORD\", \"DISPLAY ERROR\", \"PREVIOUS FIELD\", \"DELETE RECORD\", \"PRINT\", \"CLEAR FIELD\", \"DUPLICATE RECORD\", \"COUNT QUERY\", \"UP\", \"INSERT RECORD\", \"UPDATE RECORD\", \"DOWN\", \"NEXT SET OF RECORDS\", \"FUNCTION 0\", \"SCROLL UP\", \"NEXT RECORD\", \"FUNCTION 1\", \"SCROLL DOWN\", \"PREVIOUS RECORD\", \"FUNCTION 2\", \"EDIT\", \"CLEAR BLOCK\", \"FUNCTION 3\", \"RETURN\", \"BLOCK MENU\", \"FUNCTION 4\", \"LIST OF VALUES\", \"NEXT BLOCK\", \"FUNCTION 5\", \"HELP\", \"PREVIOUS BLOCK\", \"FUNCTION 6\", \"EXIT\", \"DUPLICATE FIELD\", \"FUNCTION 7\", \"SHOW KEYS\", \"CLEAR FORM\", \"FUNCTION 8\", \"COMMIT\", \"ENTER QUERY\", \"FUNCTION 9\", \"NEXT PRIMARY KEY\", \"EXECUTE QUERY\", \"LIST TAB PAGES\"Optional, Default: \"NEXT FIELD\". bNoFocus boolean Don't try to set focus before sending softkey.Optional, Default: \"true\". <p></p>"},{"location":"Libraries/OracleFormsTable/","title":"OracleFormsTable","text":"<p>Oracle Forms Table.</p> <p>UI element class: oracle.forms.ui.ExtendedFrame</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsTableBehavior</p>"},{"location":"Libraries/OracleFormsTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Value of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the grid. GetRowCount"},{"location":"Libraries/OracleFormsTable/#action-summary","title":"Action Summary","text":"Action Description DoGetValue Sets value of the table cell. DoPress Click the cell. DoSetFocus Sets keyboard input focus to the table cell. DoSetValue Sets value of the table cell."},{"location":"Libraries/OracleFormsTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/OracleFormsTable/#cell","title":"Cell","text":"<p>Value of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index of a row. col string | number Name of a column or zero-based column index. <p>Type: string|number|boolean</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeOracleFormsTable').GetCell(/**number*/row, /**string|number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/OracleFormsTable/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeOracleFormsTable').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/OracleFormsTable/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeOracleFormsTable').GetColumnName(/**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/OracleFormsTable/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeOracleFormsTable').GetRowCount()\n</code></pre>"},{"location":"Libraries/OracleFormsTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/OracleFormsTable/#dogetvalue","title":"DoGetValue","text":"<p>Sets value of the table cell.</p> <pre><code>SeS('SomeOracleFormsTable').DoGetValue(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number Table row index col string | number Table column caption or index <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleFormsTable/#dopress","title":"DoPress","text":"<p>Click the cell.</p> <pre><code>SeS('SomeOracleFormsTable').DoPress(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number Table row index col string | number Table column caption or index <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleFormsTable/#dosetfocus","title":"DoSetFocus","text":"<p>Sets keyboard input focus to the table cell.</p> <pre><code>SeS('SomeOracleFormsTable').DoSetFocus(row, col)\n</code></pre> <p>Parameters:</p> Name Type Description row number Table row index col string | number Table column caption or index <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/OracleFormsTable/#dosetvalue","title":"DoSetValue","text":"<p>Sets value of the table cell.</p> <pre><code>SeS('SomeOracleFormsTable').DoSetValue(row, col, value)\n</code></pre> <p>Parameters:</p> Name Type Description row number Table row index col string | number Table column caption or index value string | boolean | number value to set <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/OraclePushButton/","title":"OraclePushButton","text":"<p>Oracle Forms Push Button.</p> <p>UI element class: oracle.ewt.button.PushButton</p> <p>Extends VButton</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/PointerInputDevice/","title":"PointerInputDevice","text":"<p>This is a JavaScript wrapper for PointerInputDevice of Selenium .NET library. Use WebDriver.CreatePointerInput or AppiumDriver.CreatePointerInput to create an instance of PointerInputDevice. <pre><code>var p = WebDriver.CreatePointerInput(\"Mouse\", \"pointer\");\n// or\nvar p = AppiumDriver.CreatePointerInput(\"Touch\", \"finger\");\n// p is used in examples below to refer to an instance of PointerInputDevice.\n</code></pre></p>"},{"location":"Libraries/PointerInputDevice/#action-summary","title":"Action Summary","text":"Action Description CreateActionSequence Creates new action sequence. CreatePause Creates pause action. CreatePointerCancel Creates pointer cancel action. CreatePointerDown Creates pointer down action. CreatePointerMove Creates pointer move action. CreatePointerMoveElement Creates pointer move action. CreatePointerUp Creates pointer up action."},{"location":"Libraries/PointerInputDevice/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/PointerInputDevice/#createactionsequence","title":"CreateActionSequence","text":"<p>Creates new action sequence. See ActionSequence.</p> <pre><code>p.CreateActionSequence(p);\n</code></pre> <p>Returns:</p> <p>ActionSequence object.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpause","title":"CreatePause","text":"<p>Creates pause action.</p> <pre><code>p.CreatePause(duration)\n</code></pre> <p>Parameters:</p> Name Type Description duration number Pause duration in milliseconds. <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpointercancel","title":"CreatePointerCancel","text":"<p>Creates pointer cancel action.</p> <pre><code>p.CreatePointerCancel()\n</code></pre> <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpointerdown","title":"CreatePointerDown","text":"<p>Creates pointer down action.</p> <pre><code>p.CreatePointerDown(button)\n</code></pre> <p>Parameters:</p> Name Type Description button string Touch, Left, Middle or Right <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpointermove","title":"CreatePointerMove","text":"<p>Creates pointer move action.</p> <pre><code>p.CreatePointerMove(origin, xOffset, yOffset, duration)\n</code></pre> <p>Parameters:</p> Name Type Description origin string Viewport, Pointer xOffset number X-coordinate offset from top-left corner of the origin. yOffset number Y-coordinate offset from top-left corner of the origin. duration number Move duration in milliseconds. <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpointermoveelement","title":"CreatePointerMoveElement","text":"<p>Creates pointer move action.</p> <pre><code>p.CreatePointerMoveElement(target, xOffset, yOffset, duration)\n</code></pre> <p>Parameters:</p> Name Type Description target AppiumWebElement Target element. xOffset number X-coordinate offset from top-left corner of the target. yOffset number Y-coordinate offset from top-left corner of the target. duration number Move duration in milliseconds. <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p> <p> </p>"},{"location":"Libraries/PointerInputDevice/#createpointerup","title":"CreatePointerUp","text":"<p>Creates pointer up action.</p> <pre><code>p.CreatePointerUp(button)\n</code></pre> <p>Parameters:</p> Name Type Description button string Touch, Left, Middle or Right <p>Returns:</p> <p>Interaction object to add to ActionSequence.</p> <p></p>"},{"location":"Libraries/QAbstractButton/","title":"QAbstractButton","text":"<p>Qt Framework QAbstractButton.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/QAbstractButton/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/QAbstractButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QAbstractButton/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>DoAction() \n</code></pre> <p></p>"},{"location":"Libraries/QCheckBox/","title":"QCheckBox","text":"<p>Qt CheckBox.</p> <p>Extends QAbstractButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtCheckableBehavior</p>"},{"location":"Libraries/QCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/QCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/QCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p>"},{"location":"Libraries/QCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>DoSetCheck(bcheck) \n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QComboBox/","title":"QComboBox","text":"<p>This is the Qt combo box. Use DoSelectItem to select a particular item.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtItemComboBehavior</p>"},{"location":"Libraries/QComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue"},{"location":"Libraries/QComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/QComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QComboBox/#value","title":"Value","text":"<p>Gets the value of the selected item. This is usually equivalent to the name of the item being selected.</p> <p>Type: string</p> <p>Accessors: GetValue</p>"},{"location":"Libraries/QComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>DoSelectItem(itemName) \n</code></pre> <p>Parameters:</p> Name Type Description itemName string Item name to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QDateTimeEdit/","title":"QDateTimeEdit","text":"<p>This is Qt masked date edit box. Use DoSetDateTime to set the time value of the edit box and GetText to read current value.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtDateTimeBehavior</p>"},{"location":"Libraries/QDateTimeEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/QDateTimeEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetDate Sets the date value of this object. DoSetDateTime Sets the date/time value of this object. DoSetTime Sets the time value of this object."},{"location":"Libraries/QDateTimeEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QDateTimeEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p>"},{"location":"Libraries/QDateTimeEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QDateTimeEdit/#dosetdate","title":"DoSetDate","text":"<p>Sets the date value of this object.</p> <pre><code>DoSetDate(value) \n</code></pre> <p>Parameters:</p> Name Type Description value string Date value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/QDateTimeEdit/#dosetdatetime","title":"DoSetDateTime","text":"<p>Sets the date/time value of this object.</p> <pre><code>DoSetDateTime(value) \n</code></pre> <p>Parameters:</p> Name Type Description value string Date/time value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/QDateTimeEdit/#dosettime","title":"DoSetTime","text":"<p>Sets the time value of this object.</p> <pre><code>DoSetTime(value) \n</code></pre> <p>Parameters:</p> Name Type Description value string Time value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QFontComboBox/","title":"QFontComboBox","text":"<p>This is the Qt font combo box. Use DoSelectItem to select a particular font.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtItemComboBehavior</p>"},{"location":"Libraries/QFontComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue"},{"location":"Libraries/QFontComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/QFontComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QFontComboBox/#value","title":"Value","text":"<p>Gets the value of the selected item. This is usually equivalent to the name of the item being selected.</p> <p>Type: string</p> <p>Accessors: GetValue</p>"},{"location":"Libraries/QFontComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QFontComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>DoSelectItem(itemName) \n</code></pre> <p>Parameters:</p> Name Type Description itemName string Item name to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QLabel/","title":"QLabel","text":"<p>This is Qt read-only text label. Use GetText to read the current value of the label text.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtTextBehavior</p>"},{"location":"Libraries/QLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/QLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p>"},{"location":"Libraries/QLineEdit/","title":"QLineEdit","text":"<p>This is Qt single-line text edit box. Use DoSetText to set the value of the edit box and GetText to read current value.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtTextEditableBehavior</p>"},{"location":"Libraries/QLineEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/QLineEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/QLineEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QLineEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p>"},{"location":"Libraries/QLineEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QLineEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>DoSetText(val) \n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QListBox/","title":"QListBox","text":"<p>This is the Qt list box. Use DoSelectItem to select a particular item.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtListBoxBehavior</p>"},{"location":"Libraries/QListBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Gets the value of the selected item. GetValue"},{"location":"Libraries/QListBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/QListBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QListBox/#value","title":"Value","text":"<p>Gets the value of the selected item. This is usually equivalent to the name of the item being selected.</p> <p>Type: string</p> <p>Accessors: GetValue</p>"},{"location":"Libraries/QListBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QListBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>DoSelectItem(itemName) \n</code></pre> <p>Parameters:</p> Name Type Description itemName string Item name to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QMenuBar/","title":"QMenuBar","text":"<p>This is for testing the main Qt menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtItemClickableBehavior</p>"},{"location":"Libraries/QMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on an item of this object."},{"location":"Libraries/QMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QMenuBar/#doclickitem","title":"DoClickItem","text":"<p>Performs click on an item of this object.</p> <pre><code>DoClickItem(itemName) \n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to click <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QPopup/","title":"QPopup","text":"<p>Generic Qt Popup control.</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/QPopupMenu/","title":"QPopupMenu","text":"<p>This is generic Qt popup menu. Use DoClickItem to click a particular item from the menu.</p> <p>Extends QPopup</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtItemClickableBehavior</p>"},{"location":"Libraries/QPopupMenu/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on an item of this object."},{"location":"Libraries/QPopupMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QPopupMenu/#doclickitem","title":"DoClickItem","text":"<p>Performs click on an item of this object.</p> <pre><code>DoClickItem(itemName) \n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to click <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QPushButton/","title":"QPushButton","text":"<p>This matches a Qt push button. Use DoAction to press it.</p> <p>Extends QAbstractButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/QPushButton/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/QPushButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QPushButton/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>DoAction() \n</code></pre> <p></p>"},{"location":"Libraries/QRadioButton/","title":"QRadioButton","text":"<p>Qt Radio button.</p> <p>Extends QAbstractButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: QtCheckableBehavior</p>"},{"location":"Libraries/QRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/QRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/QRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/QRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p>"},{"location":"Libraries/QRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>DoSetCheck(bcheck) \n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/QSimulated/","title":"QSimulated","text":"<p>Qt Simulated control.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Simulated</p>"},{"location":"Libraries/QTabPage/","title":"QTabPage","text":"<p>Qt Tab Page control.</p> <p>Extends QWidget</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/QTabPage/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/QTabPage/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QTabPage/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>DoAction() \n</code></pre> <p></p>"},{"location":"Libraries/QToolButton/","title":"QToolButton","text":"<p>This matches a Qt tool button. Use DoAction to press it.</p> <p>Extends QAbstractButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/QToolButton/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/QToolButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/QToolButton/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>DoAction() \n</code></pre> <p></p>"},{"location":"Libraries/QWidget/","title":"QWidget","text":"<p>Generic Qt widget.</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/RESTRequest/","title":"RESTRequest","text":"<p>This is a JavaScript wrapper for RESTRequest</p>"},{"location":"Libraries/RESTRequest/#action-summary","title":"Action Summary","text":"Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential The HTTP Basic Authentication Credentials (if any). GetHeader HTTP header GetMethod The HTTP Method being used for the request (GET, POST, etc. GetName The name of the request operation GetParameter Access request parameters. GetRequestBodyText The body of the HTTP request in raw text format GetUrl The URL being used to access the web service SetCredential The HTTP Basic Authentication Credentials (if any). SetHeader HTTP header SetMethod The HTTP Method being used for the request (GET, POST, etc. SetParameter Access request parameters. SetRequestBodyText The body of the HTTP request in raw text format SetUrl The URL being used to access the web service"},{"location":"Libraries/RESTRequest/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/RESTRequest/#doremoveparameter","title":"DoRemoveParameter","text":"<p>Remove one pre-defined parameter.</p> <pre><code>RESTRequest.DoRemoveParameter(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Parameter name <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#doremoverequestheader","title":"DoRemoveRequestHeader","text":"<p>Remove one pre-defined request header by name.</p> <pre><code>RESTRequest.DoRemoveRequestHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header name <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getcredential","title":"GetCredential","text":"<p>The HTTP Basic Authentication Credentials (if any). Sample code:</p> <pre><code>var credential = {};\ncredential.UserName = \"fredbloggs\";\ncredential.Password = \"MyPassword\";\nSeS(\"Operation_Name\").SetCredential(credential);\n</code></pre> <p>Another way is to pass user name and password as first and second parameter respectively, e.g. <code>SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\");</code></p> <pre><code>RESTRequest.GetCredential()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getheader","title":"GetHeader","text":"<p>HTTP header</p> <pre><code>RESTRequest.GetHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header Name <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getmethod","title":"GetMethod","text":"<p>The HTTP Method being used for the request (GET, POST, etc.)</p> <pre><code>RESTRequest.GetMethod()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getname","title":"GetName","text":"<p>The name of the request operation</p> <pre><code>RESTRequest.GetName()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getparameter","title":"GetParameter","text":"<p>Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value.</p> <pre><code>RESTRequest.GetParameter(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a parameter. <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#getrequestbodytext","title":"GetRequestBodyText","text":"<p>The body of the HTTP request in raw text format</p> <pre><code>RESTRequest.GetRequestBodyText()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#geturl","title":"GetUrl","text":"<p>The URL being used to access the web service</p> <pre><code>RESTRequest.GetUrl()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#setcredential","title":"SetCredential","text":"<p>The HTTP Basic Authentication Credentials (if any). Sample code:</p> <pre><code>var credential = {};\ncredential.UserName = \"fredbloggs\";\ncredential.Password = \"MyPassword\";\nSeS(\"Operation_Name\").SetCredential(credential);\n</code></pre> <p>Another way is to pass user name and password as first and second parameter respectively, e.g. <code>SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\");</code></p> <pre><code>RESTRequest.SetCredential(value, value2)\n</code></pre> <p>Parameters:</p> Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one. <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#setheader","title":"SetHeader","text":"<p>HTTP header</p> <pre><code>RESTRequest.SetHeader(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header Name value string Header Value <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#setmethod","title":"SetMethod","text":"<p>The HTTP Method being used for the request (GET, POST, etc.)</p> <pre><code>RESTRequest.SetMethod(method)\n</code></pre> <p>Parameters:</p> Name Type Description method string New request method (if you ever need it!) <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#setparameter","title":"SetParameter","text":"<p>Access request parameters. Request Body, Headers and Url is then pre-processed by replacing each {paramName} entry with paramName's value.</p> <pre><code>RESTRequest.SetParameter(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a parameter. value string Value of a parameter <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#setrequestbodytext","title":"SetRequestBodyText","text":"<p>The body of the HTTP request in raw text format</p> <pre><code>RESTRequest.SetRequestBodyText(body)\n</code></pre> <p>Parameters:</p> Name Type Description body string New version of request data <p></p> <p> </p>"},{"location":"Libraries/RESTRequest/#seturl","title":"SetUrl","text":"<p>The URL being used to access the web service</p> <pre><code>RESTRequest.SetUrl(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string New Url <p></p>"},{"location":"Libraries/RESTResponse/","title":"RESTResponse","text":"<p>This is a JavaScript wrapper for RESTResponse</p>"},{"location":"Libraries/RESTResponse/#property-summary","title":"Property Summary","text":"Property Description GetResponseBodyObject The body of the HTTP response as a JSON object"},{"location":"Libraries/RESTResponse/#action-summary","title":"Action Summary","text":"Action Description GetHeader HTTP header GetIsErrorStatus 'true' when there was an error GetResponseBodyText The body of the HTTP response in raw text format GetStatusCode HTTP response code GetStatusText Text version of the response code"},{"location":"Libraries/RESTResponse/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/RESTResponse/#getresponsebodyobject","title":"GetResponseBodyObject","text":"<p>The body of the HTTP response as a JSON object</p> <p>Type: </p>"},{"location":"Libraries/RESTResponse/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/RESTResponse/#getheader","title":"GetHeader","text":"<p>HTTP header</p> <pre><code>RESTResponse.GetHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header Name <p></p> <p> </p>"},{"location":"Libraries/RESTResponse/#getiserrorstatus","title":"GetIsErrorStatus","text":"<p>'true' when there was an error</p> <pre><code>RESTResponse.GetIsErrorStatus()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTResponse/#getresponsebodytext","title":"GetResponseBodyText","text":"<p>The body of the HTTP response in raw text format</p> <pre><code>RESTResponse.GetResponseBodyText()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTResponse/#getstatuscode","title":"GetStatusCode","text":"<p>HTTP response code</p> <pre><code>RESTResponse.GetStatusCode()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/RESTResponse/#getstatustext","title":"GetStatusText","text":"<p>Text version of the response code</p> <pre><code>RESTResponse.GetStatusText()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/","title":"RESTService","text":"<p>This behavior pattern implements REST service client.</p> <p>Behavior Pattern: RESTServiceBehavior</p>"},{"location":"Libraries/RESTService/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Method The HTTP Method being used for the request (GET, POST, etc. GetMethod SetMethod Name The name of the request operation GetName Parameter Get/Set single parameter by name. GetParameter SetParameter Parameters The list of parameters available for this request url. GetParameters SetParameters ProxyHost Proxy host name. GetProxyHost SetProxyHost ProxyPort Proxy port number. GetProxyPort SetProxyPort ProxyPwd Proxy password. GetProxyPwd SetProxyPwd ProxyUser Proxy user name. GetProxyUser SetProxyUser RequestBodyObject The body of the HTTP request as a JavaScript object. GetRequestBodyObject SetRequestBodyObject RequestBodyText The body of the HTTP request in raw text format GetRequestBodyText SetRequestBodyText RequestHeader Get/Set Single HTTP header by name. GetRequestHeader SetRequestHeader RequestHeaders The list of HTTP headers that are part of this request. GetRequestHeaders SetRequestHeaders ResponseBodyObject The body of the HTTP response deserialized from JSON into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned from the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service GetResponseIsErrorStatus ResponseStatusCode HTTP response code GetResponseStatusCode ResponseStatusText Text version of the response code GetResponseStatusText Url The URL being used to access the web service GetUrl SetUrl"},{"location":"Libraries/RESTService/#action-summary","title":"Action Summary","text":"Action Description DoExecute Executes a REST service operation, substitutes any of the provided parameter values if necessary. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoSetProxy Sets proxy for this request. DoVerify Checks that a given part of response equals the expected value."},{"location":"Libraries/RESTService/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/RESTService/#credential","title":"Credential","text":"<p>The HTTP Basic Authentication Credentials (if any). Sample code:</p> <pre><code>var credential = {};\ncredential.UserName = \"fredbloggs\";\ncredential.Password = \"MyPassword\";\nSeS(\"Operation_Name\").SetCredential(credential);\n</code></pre> <p>Another way is to pass user name and password as first and second parameter respectively, e.g. <code>SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\");</code></p> <p>Type: object</p> <p>Accessors: GetCredential, SetCredential</p> <pre><code>value = SeS('SomeRESTService').GetCredential()\n\nSeS('SomeRESTService').SetCredential(value, value2)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#method","title":"Method","text":"<p>The HTTP Method being used for the request (GET, POST, etc.)</p> <p>Type: string</p> <p>Accessors: GetMethod, SetMethod</p> <pre><code>value = SeS('SomeRESTService').GetMethod()\n\nSeS('SomeRESTService').SetMethod(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#name","title":"Name","text":"<p>The name of the request operation</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeRESTService').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#parameter","title":"Parameter","text":"<p>Get/Set single parameter by name.</p> <p>Getter Parameters:</p> Name Type Description name string Name of a parameter. <p>Type: object</p> <p>Accessors: GetParameter, SetParameter</p> <pre><code>value = SeS('SomeRESTService').GetParameter(/**string*/name)\n\nSeS('SomeRESTService').SetParameter(/**string*/name, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#parameters","title":"Parameters","text":"<p>The list of parameters available for this request url. Sample code:</p> <pre><code>var parameters = SeS(\"Operation_Name\").GetParameters();\nfor (var i = 0; i &lt; parameters.length; i++)\n{\n    var name = parameters[i].Name;\n    var token = parameters[i].TokenName;\n    var value = parameters[i].Value;\n}\n</code></pre> <p>Type: object</p> <p>Accessors: GetParameters, SetParameters</p> <pre><code>value = SeS('SomeRESTService').GetParameters()\n\nSeS('SomeRESTService').SetParameters(name, value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#proxyhost","title":"ProxyHost","text":"<p>Proxy host name. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyHost, SetProxyHost</p> <pre><code>value = SeS('SomeRESTService').GetProxyHost()\n\nSeS('SomeRESTService').SetProxyHost(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#proxyport","title":"ProxyPort","text":"<p>Proxy port number. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyPort, SetProxyPort</p> <pre><code>value = SeS('SomeRESTService').GetProxyPort()\n\nSeS('SomeRESTService').SetProxyPort(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#proxypwd","title":"ProxyPwd","text":"<p>Proxy password. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyPwd, SetProxyPwd</p> <pre><code>value = SeS('SomeRESTService').GetProxyPwd()\n\nSeS('SomeRESTService').SetProxyPwd(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#proxyuser","title":"ProxyUser","text":"<p>Proxy user name. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyUser, SetProxyUser</p> <pre><code>value = SeS('SomeRESTService').GetProxyUser()\n\nSeS('SomeRESTService').SetProxyUser(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#requestbodyobject","title":"RequestBodyObject","text":"<p>The body of the HTTP request as a JavaScript object. Sample code:</p> <pre><code>var book = {};\nbook.Name = \"A Christmas Carol\";\nbook.AuthorId = 2;\nbook.GenreId = 3;\nSeS(\"LibraryInformationSystem_Insert_Book\").SetRequestBodyObject(book);\nSeS(\"LibraryInformationSystem_Insert_Book\").DoExecute({\"session_id\":sessionId});\n</code></pre> <p>Type: object</p> <p>Accessors: GetRequestBodyObject, SetRequestBodyObject</p> <pre><code>value = SeS('SomeRESTService').GetRequestBodyObject()\n\nSeS('SomeRESTService').SetRequestBodyObject(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#requestbodytext","title":"RequestBodyText","text":"<p>The body of the HTTP request in raw text format</p> <p>Type: string</p> <p>Accessors: GetRequestBodyText, SetRequestBodyText</p> <pre><code>value = SeS('SomeRESTService').GetRequestBodyText()\n\nSeS('SomeRESTService').SetRequestBodyText(value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#requestheader","title":"RequestHeader","text":"<p>Get/Set Single HTTP header by name.</p> <p>Getter Parameters:</p> Name Type Description name string HTTP Header name. <p>Type: object</p> <p>Accessors: GetRequestHeader, SetRequestHeader</p> <pre><code>value = SeS('SomeRESTService').GetRequestHeader(/**string*/name)\n\nSeS('SomeRESTService').SetRequestHeader(/**string*/name, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#requestheaders","title":"RequestHeaders","text":"<p>The list of HTTP headers that are part of this request. Sample code:</p> <pre><code>var headers = SeS(\"Operation_Name\").GetRequestHeaders();\nfor (var i = 0; i &lt; headers.length; i++)\n{\n    var name = headers[i].Name;\n    var value = headers[i].Value;\n}\n</code></pre> <p>Type: object</p> <p>Accessors: GetRequestHeaders, SetRequestHeaders</p> <pre><code>value = SeS('SomeRESTService').GetRequestHeaders()\n\nSeS('SomeRESTService').SetRequestHeaders(value, optValueVal)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responsebodyobject","title":"ResponseBodyObject","text":"<p>The body of the HTTP response deserialized from JSON into a JavaScript object. Sample code:</p> <pre><code>SeS(\"LibraryInformationSystem_Get_BookById\").DoExecute({\"session_id\":sessionId, \"book_id\":bookId});\nvar book = SeS(\"LibraryInformationSystem_Get_BookById\").GetResponseBodyObject();\n</code></pre> <p>Type: object</p> <p>Accessors: GetResponseBodyObject</p> <pre><code>value = SeS('SomeRESTService').GetResponseBodyObject(jsonPath, info)\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responsebodytext","title":"ResponseBodyText","text":"<p>The body of the HTTP response in raw text format</p> <p>Type: string</p> <p>Accessors: GetResponseBodyText</p> <pre><code>value = SeS('SomeRESTService').GetResponseBodyText()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responseheaders","title":"ResponseHeaders","text":"<p>Returns the list of HTTP headers returned from the HTTP response. Sample code:</p> <pre><code>var headers = SeS(\"Operation_Name\").GetResponseHeaders();\nfor (var i = 0; i &lt; headers.length; i++)\n{\n    var name = headers[i].Name;\n    var value = headers[i].Value;\n}\n</code></pre> <p>Type: object</p> <p>Accessors: GetResponseHeaders</p> <pre><code>value = SeS('SomeRESTService').GetResponseHeaders()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responseiserrorstatus","title":"ResponseIsErrorStatus","text":"<p>Returns 'true 'if an HTTP error code came back from the web service</p> <p>Type: boolean</p> <p>Accessors: GetResponseIsErrorStatus</p> <pre><code>value = SeS('SomeRESTService').GetResponseIsErrorStatus()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responsestatuscode","title":"ResponseStatusCode","text":"<p>HTTP response code</p> <p>Type: number</p> <p>Accessors: GetResponseStatusCode</p> <pre><code>value = SeS('SomeRESTService').GetResponseStatusCode()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#responsestatustext","title":"ResponseStatusText","text":"<p>Text version of the response code</p> <p>Type: string</p> <p>Accessors: GetResponseStatusText</p> <pre><code>value = SeS('SomeRESTService').GetResponseStatusText()\n</code></pre> <p></p>"},{"location":"Libraries/RESTService/#url","title":"Url","text":"<p>The URL being used to access the web service</p> <p>Type: string</p> <p>Accessors: GetUrl, SetUrl</p> <pre><code>value = SeS('SomeRESTService').GetUrl()\n\nSeS('SomeRESTService').SetUrl(value)\n</code></pre>"},{"location":"Libraries/RESTService/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/RESTService/#doexecute","title":"DoExecute","text":"<p>Executes a REST service operation, substitutes any of the provided parameter values if necessary. Operation fails if HTTP status code is other than 200. If that is an intention, pass <code>ignoreStatus</code> as <code>true</code>. Sample code:</p> <pre><code>SeS(\"LibraryInformationSystem_Get_BookById\").DoExecute({\"session_id\":sessionId, \"book_id\":bookId});\nvar book = SeS(\"LibraryInformationSystem_Get_BookById\").GetResponseBodyObject();\n</code></pre> <pre><code>SeS('SomeRESTService').DoExecute(params, ignoreStatus)\n</code></pre> <p>Parameters:</p> Name Type Description params object JavaScript object <code>{\"name1\": \"value1\", \"name2\": \"value2\" }</code>. Parameter values that should be passed to the web service operation. ignoreStatus boolean Don't fail if operation status other than 200, just return the codeOptional, Default: \"false\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/RESTService/#doremoveparameter","title":"DoRemoveParameter","text":"<p>Remove one pre-defined parameter. Requires Rapise 6.6+</p> <pre><code>SeS('SomeRESTService').DoRemoveParameter(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Parameter name <p></p> <p> </p>"},{"location":"Libraries/RESTService/#doremoverequestheader","title":"DoRemoveRequestHeader","text":"<p>Remove one pre-defined request header by name. Requires Rapise 6.6+</p> <pre><code>SeS('SomeRESTService').DoRemoveRequestHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header name <p></p> <p> </p>"},{"location":"Libraries/RESTService/#dosetproxy","title":"DoSetProxy","text":"<p>Sets proxy for this request. Requires Rapise 8.1+.</p> <pre><code>SeS('SomeRESTService').DoSetProxy(host, port, user, pwd)\n</code></pre> <p>Parameters:</p> Name Type Description host string Proxy host name or IP address. port string Proxy port. user string Proxy user name.Optional. pwd string Proxy password.Optional. <p></p> <p> </p>"},{"location":"Libraries/RESTService/#doverify","title":"DoVerify","text":"<p>Checks that a given part of response equals the expected value.</p> <pre><code>SeS('SomeRESTService').DoVerify(msg, jsonPath, expectedValue)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/RVL/","title":"RVL Object","text":"<p>Some common tasks related to script execution, such as calling scripts, executing separate sheets, returning, exiting and bailing out is served by RVL.</p>"},{"location":"Libraries/RVL/#actions","title":"Actions","text":""},{"location":"Libraries/RVL/#doplayscript","title":"DoPlayScript","text":"<pre><code>RVL.DoPlayScript(/**string*/ scriptPath, /**string*/ sheetName)\n</code></pre> <p>Play RVL sheet <code>sheetName</code> from workbook <code>scriptPath</code> passing <code>[extraParams]</code> for variable values.</p> <ul> <li><code>scriptPath</code>: Path to script</li> <li><code>sheetName</code>: Excel sheet containing the script</li> <li>[extraParams]: default variable values see RVL Extra Params</li> </ul>"},{"location":"Libraries/RVL/#doplaysheet","title":"DoPlaySheet","text":"<pre><code>RVL.DoPlaySheet(/**string*/ sheetName)\n</code></pre> <p>Play RVL sheet <code>sheetName</code> from current workbook passing <code>[extraParams]</code> for variable values.</p> <ul> <li><code>sheetName</code>: Excel sheet containing the script</li> <li>[extraParams]: default variable values see RVL Extra Params</li> </ul>"},{"location":"Libraries/RVL/#doplaytest","title":"DoPlayTest","text":"<pre><code>RVL.DoPlayTest(/**string*/ sstestPath)\n</code></pre> <p>Executes specified test with passing of additional arguments specified as <code>extraParams</code>. It is an analog of Global.DoInvokeTest</p> <ul> <li><code>sstestPath</code>: Path to test</li> <li>[extraParams]: Param values to be passed into test. May then be accessed via Tester.GetParam.</li> </ul> <p>To pass sheet name use extra param name <code>sheetName</code>. The test at <code>sstestPath</code> should have <code>Test</code> function defined like this</p> <pre><code>function Test(params)\n{\n    RVL.DoPlayScript(\"Main.rvl.xlsx\", Tester.GetParam(\"sheetName\", \"RVL\"));\n}\n</code></pre>"},{"location":"Libraries/RVL/#doplaytestparallel","title":"DoPlayTestParallel","text":"<pre><code>RVL.DoPlayTestParallel(/**string*/ sstestPath, /**objectId*/ threadsMap)\n</code></pre> <p>Executes specified test in parallel threads passing additional arguments specified by in <code>threadsMap</code> map. There are as many threads as there are rows in the map.</p> <ul> <li><code>sstestPath</code>: Path to test</li> <li><code>threadsMap</code>: The name of the map defining params. 1<sup>st</sup> column - Thread ID (alphanumeric, i.e. THREAD01), other columns - parameter variables, i.e. column name <code>g_browserLibrary</code>, values 'Selenium Chrome', 'Selenium Firefox', etc.</li> <li>[extraParams]: Global variable values common for all threads.</li> </ul> Screenshot <p></p> Transcript <p>Sheets: RVL | Browsers | Users | Login</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows Users Thread g_loginName g_password g_name lib librarian librarian librarian adm administrator PleaseChange administrator bor borrower borrower End of Map Variable Global g_browserProfile Action Tester Message message string Launching MR for Browser: Param message variable g_browserProfile Action RVL DoPlayTestParallel sstestPath string MassLoginsTest.sstest Param threadsMap expression Users Param g_browserLibrary variable g_browserProfile Param g_entryPointName string RVL Special EntryPoint Param g_rvlScriptSheet string Login <p>(Note: In this example extraParams are <code>g_browserLibrary</code>, <code>g_entryPointName</code>, <code>g_rvlScriptSheet</code>)</p>"},{"location":"Libraries/RVL/#see-also","title":"See Also","text":"<ul> <li>Rapise with Selenium Grid - Parallel Test Execution (video)</li> <li>Rapise with Selenium Grid - Nested Parallel Test Execution (video)</li> </ul>"},{"location":"Libraries/RVL/#doruntest","title":"DoRunTest","text":"<pre><code>RVL.DoRunTest(/**string*/ sstestPath)\n</code></pre> <p>Executes specified test using Global.DoRunTest but passing any extra parameters as 'params' object to invoked test. Requires Rapise 8.1+.</p> <ul> <li><code>sstestPath</code>: Path to test</li> <li>[extraParams]: default variable values see RVL Extra Params</li> </ul>"},{"location":"Libraries/RVL/#exit","title":"Exit","text":"<p>Break execution at the specified line, with given message added to the report. This method should be called from within RVL sheet only.</p> <ul> <li><code>message</code>: Exit message</li> <li><code>isError</code>: Specify 'false' if you want just exit without exit message</li> </ul> <p>Example 1: Exit normally, return value of <code>ReturnValue</code> variable:</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL Exit message variable ReturnValue <p>Example 2: Exit with error:</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL Exit message string Execution Failed Param isError boolean true"},{"location":"Libraries/RVL/#getdropdownvalue","title":"GetDropdownValue","text":"<pre><code>RVL.GetDropdownValue(/**string*/id, /**string*/idList, /**string*/valList, /**string*/xlsPath)\n</code></pre> <p>Remap dropdown value from one list to another</p> <ul> <li><code>id</code>: Value to remap, the value should be from the column <code>idList</code>.</li> <li><code>idList</code>: Column name of the list where <code>id</code> belongs to.</li> <li><code>valList</code>: Column name of the list with values.</li> <li><code>xlsPath</code>: Optional path to <code>Dropdowns.xlsx</code>. If not specified then <code>%WORKDIR%\\Dropdowns.xlsx</code> is used.</li> </ul> <p>Example. Suppose we have the following definitions of dropdowns:</p> <p></p> <p>Then the call</p> <pre><code>var stateCode = RVL.GetDropdownValue(stateName,\n                                     \"Functions.SetState.stateName\",\n                                     \"stateCode\")\n</code></pre> <p>would return state code for state name. I.e. if <code>stateName=\"Colorado\"</code> then returned value is \"CO\".</p> <p>See also RVL Editor Param Dropdowns</p>"},{"location":"Libraries/RVL/#return","title":"Return","text":"<p>Finish execution of current sheet. This method should be called from within RVL sheet only.</p> <ul> <li><code>message</code>: Return message</li> </ul> <p>Example 1: Finish execution of current sheet, return value of <code>ReturnValue</code> variable:</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL Return message variable ReturnValue"},{"location":"Libraries/RVL/#setlocatoropts","title":"SetLocatorOpts","text":"<pre><code>RVL.SetLocatorOpts(/**objectid*/ objectid, {optname:optvalue,...})\n</code></pre> <p>Set additional locator options for specified object. This is a way to modify various script parameters such as <code>locator</code>, <code>xpath</code>, <code>url</code> and thus find different objects.</p> <ul> <li><code>objectid</code> {<code>/**objectid*/</code>}: Object ID</li> </ul> <p>Example:</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL SetLocatorOpts objectid objectid MyButton Param locator_param1 string new value1 Param locator_param2 string new value2 <p>All params going after <code>objectid</code> are optional and depend on specified object's locator.</p> <p>If you want to reset all values to default value call this method with just <code>objectid</code> and no additional parameters.</p>"},{"location":"Libraries/RVL/#formatstring","title":"FormatString","text":"<pre><code>RVL.FormatString(/**string*/fmtString, {optname:optvalue,...})\n</code></pre> <p>Format string according to the specified template. Template may contain placeholder values enclosed in curly braces, i.e.: <code>My name is {name}</code>.</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL FormatString fmtString string <code>{first} plus {second} equals to {result}</code> Param first string <code>one</code> Param second string <code>five</code> Param result string <code>6</code> <p>This Action should put string value <code>one plus five equals to 6</code> into the variable LastResult.</p>"},{"location":"Libraries/RVL/#properties","title":"Properties","text":""},{"location":"Libraries/RVL/#currentscriptpath","title":"CurrentScriptPath","text":"<pre><code>RVL.GetCurrentScriptPath()\n</code></pre> <p>Return path to currently executed <code>.rvl.xls</code> file.</p>"},{"location":"Libraries/RVL/#currentscriptsheet","title":"CurrentScriptSheet","text":"<pre><code>RVL.GetCurrentScriptSheet()\n</code></pre> <p>Return sheet name of the currently executed <code>.rvl.xls</code> file.</p>"},{"location":"Libraries/RelativeBy/","title":"RelativeBy","text":"<p>This is a JavaScript wrapper for RelativeBy of Selenium .NET library. Requires Rapise 8.3+. Examples:</p> <pre><code>// find an input element above the password field\nvar by = RelativeBy.WithLocator(By.XPath(\"//input\")).Above(By.XPath(\"//input[@id='password']\"));\nvar el = WebDriver.FindElement(by);\n// or\nvar anchorElement = WebDriver.FindElementByXPath(\"//input[@id='password'\"]);\nvar by = RelativeBy.WithLocator(By.XPath(\"//input\")).Above(anchorElement);\nvar el = WebDriver.FindElement(by);\n</code></pre>"},{"location":"Libraries/RelativeBy/#action-summary","title":"Action Summary","text":"Action Description Above Creates RelativeBy.Above selector. Below Creates RelativeBy.Below selector. LeftOf Creates RelativeBy.LeftOf selector. Near Creates RelativeBy.Near selector. RightOf Creates RelativeBy.RightOf selector. WithLocator Creates RelativeBy.WithLocator selector."},{"location":"Libraries/RelativeBy/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/RelativeBy/#above","title":"Above","text":"<p>Creates RelativeBy.Above selector.</p> <pre><code>WebDriver.Above(byOrElement)\n</code></pre> <p>Parameters:</p> Name Type Description byOrElement By By or WebElementWrapper object. <p>Returns:</p> <p>RelativeBy object.</p> <p></p> <p> </p>"},{"location":"Libraries/RelativeBy/#below","title":"Below","text":"<p>Creates RelativeBy.Below selector.</p> <pre><code>WebDriver.Below(byOrElement)\n</code></pre> <p>Parameters:</p> Name Type Description byOrElement By By or WebElementWrapper object. <p>Returns:</p> <p>RelativeBy object.</p> <p></p> <p> </p>"},{"location":"Libraries/RelativeBy/#leftof","title":"LeftOf","text":"<p>Creates RelativeBy.LeftOf selector.</p> <pre><code>WebDriver.LeftOf(byOrElement)\n</code></pre> <p>Parameters:</p> Name Type Description byOrElement By By or WebElementWrapper object. <p>Returns:</p> <p>RelativeBy object.</p> <p></p> <p> </p>"},{"location":"Libraries/RelativeBy/#near","title":"Near","text":"<p>Creates RelativeBy.Near selector.</p> <pre><code>WebDriver.Near(byOrElement, atMostDistanceInPixels)\n</code></pre> <p>Parameters:</p> Name Type Description byOrElement By By or WebElementWrapper object. atMostDistanceInPixels number Distance in pixels.Optional, Default: \"50\". <p>Returns:</p> <p>RelativeBy object.</p> <p></p> <p> </p>"},{"location":"Libraries/RelativeBy/#rightof","title":"RightOf","text":"<p>Creates RelativeBy.RightOf selector.</p> <pre><code>WebDriver.RightOf(byOrElement)\n</code></pre> <p>Parameters:</p> Name Type Description byOrElement By By or WebElementWrapper object. <p>Returns:</p> <p>RelativeBy object.</p> <p></p> <p> </p>"},{"location":"Libraries/RelativeBy/#withlocator","title":"WithLocator","text":"<p>Creates RelativeBy.WithLocator selector.</p> <pre><code>WebDriver.WithLocator(by)\n</code></pre> <p>Parameters:</p> Name Type Description by By By object. <p>Returns:</p> <p>RelativeBy object.</p> <p></p>"},{"location":"Libraries/SOAPService/","title":"SOAPService","text":"<p>This behavior pattern implements SOAP service client.</p> <p>Behavior Pattern: SOAPServiceBehavior</p>"},{"location":"Libraries/SOAPService/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Credential The HTTP Basic Authentication Credentials (if any). GetCredential SetCredential Name The name of the request operation GetName ProxyHost Proxy host name. GetProxyHost SetProxyHost ProxyPort Proxy port number. GetProxyPort SetProxyPort ProxyPwd Proxy password. GetProxyPwd SetProxyPwd ProxyUser Proxy user name. GetProxyUser SetProxyUser ResponseBodyObject The body of the HTTP response deserialized from SOAP into a JavaScript object. GetResponseBodyObject ResponseBodyText The body of the HTTP response in raw text format. GetResponseBodyText ResponseHeaders Returns the list of HTTP headers returned with the HTTP response. GetResponseHeaders ResponseIsErrorStatus Returns 'true 'if an HTTP error code came back from the web service. GetResponseIsErrorStatus Url The URL being used to access the web service. GetUrl SetUrl"},{"location":"Libraries/SOAPService/#action-summary","title":"Action Summary","text":"Action Description DoExecute Executes a SOAP service operation, substituting any of the provided parameter values if necessary. DoExecuteRaw Sends a SOAP request as is. DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. DoSetProxy Sets proxy for this request. DoVerify Checks that a given part of response equals the expected value."},{"location":"Libraries/SOAPService/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SOAPService/#credential","title":"Credential","text":"<p>The HTTP Basic Authentication Credentials (if any). Sample code:</p> <pre><code>var credential = {};\ncredential.UserName = \"fredbloggs\";\ncredential.Password = \"MyPassword\";\nSeS(\"Operation_Name\").SetCredential(credential);\n</code></pre> <p>Type: object</p> <p>Accessors: GetCredential, SetCredential</p> <pre><code>value = SeS('SomeSOAPService').GetCredential()\n\nSeS('SomeSOAPService').SetCredential(value, value2)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#name","title":"Name","text":"<p>The name of the request operation</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeSOAPService').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#proxyhost","title":"ProxyHost","text":"<p>Proxy host name. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyHost, SetProxyHost</p> <pre><code>value = SeS('SomeSOAPService').GetProxyHost()\n\nSeS('SomeSOAPService').SetProxyHost(value)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#proxyport","title":"ProxyPort","text":"<p>Proxy port number. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyPort, SetProxyPort</p> <pre><code>value = SeS('SomeSOAPService').GetProxyPort()\n\nSeS('SomeSOAPService').SetProxyPort(value)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#proxypwd","title":"ProxyPwd","text":"<p>Proxy password. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyPwd, SetProxyPwd</p> <pre><code>value = SeS('SomeSOAPService').GetProxyPwd()\n\nSeS('SomeSOAPService').SetProxyPwd(value)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#proxyuser","title":"ProxyUser","text":"<p>Proxy user name. Requires Rapise 8.1+.</p> <p>Type: string</p> <p>Accessors: GetProxyUser, SetProxyUser</p> <pre><code>value = SeS('SomeSOAPService').GetProxyUser()\n\nSeS('SomeSOAPService').SetProxyUser(value)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#responsebodyobject","title":"ResponseBodyObject","text":"<p>The body of the HTTP response deserialized from SOAP into a JavaScript object.</p> <p>Getter Parameters:</p> Name Type Description jsonPath string Path to a sub-object within response object. E.g. 'Body.Connection_AuthenticateResult'.Optional, Default: \"Body\". info object Empty object that will receive error information if any. Access as info.error in a calling function.Optional. <p>Type: object</p> <p>Accessors: GetResponseBodyObject</p> <pre><code>value = SeS('SomeSOAPService').GetResponseBodyObject(jsonPath,info)\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#responsebodytext","title":"ResponseBodyText","text":"<p>The body of the HTTP response in raw text format.</p> <p>Type: string</p> <p>Accessors: GetResponseBodyText</p> <pre><code>value = SeS('SomeSOAPService').GetResponseBodyText()\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#responseheaders","title":"ResponseHeaders","text":"<p>Returns the list of HTTP headers returned with the HTTP response. Sample code:</p> <pre><code>var headers = SeS(\"Operation_Name\").GetResponseHeaders();\nfor (var i = 0; i &lt; headers.length; i++)\n{\n    var name = headers[i].Name;\n    var value = headers[i].Value;\n}\n</code></pre> <p>Type: object</p> <p>Accessors: GetResponseHeaders</p> <pre><code>value = SeS('SomeSOAPService').GetResponseHeaders()\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#responseiserrorstatus","title":"ResponseIsErrorStatus","text":"<p>Returns 'true 'if an HTTP error code came back from the web service.</p> <p>Type: boolean</p> <p>Accessors: GetResponseIsErrorStatus</p> <pre><code>value = SeS('SomeSOAPService').GetResponseIsErrorStatus()\n</code></pre> <p></p>"},{"location":"Libraries/SOAPService/#url","title":"Url","text":"<p>The URL being used to access the web service.</p> <p>Type: string</p> <p>Accessors: GetUrl, SetUrl</p> <pre><code>value = SeS('SomeSOAPService').GetUrl()\n\nSeS('SomeSOAPService').SetUrl(value)\n</code></pre>"},{"location":"Libraries/SOAPService/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SOAPService/#doexecute","title":"DoExecute","text":"<p>Executes a SOAP service operation, substituting any of the provided parameter values if necessary.</p> <pre><code>SeS('SomeSOAPService').DoExecute(method, params, headers)\n</code></pre> <p>Parameters:</p> Name Type Description method string Name of a SOAP method. params object JavaScript object <code>{\"name1\": \"value1\", \"name2\": \"value2\" }</code>. Parameter values that should be passed to the web service operation. headers object Array of header name/value pairs. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SOAPService/#doexecuteraw","title":"DoExecuteRaw","text":"<p>Sends a SOAP request as is.</p> <pre><code>SeS('SomeSOAPService').DoExecuteRaw(method, body, params)\n</code></pre> <p>Parameters:</p> Name Type Description method string Name of a SOAP method. body string SOAP xml string. params object JavaScript object <code>{\"name1\": \"value1\", \"name2\": \"value2\" }</code>. Parameter values that should be passed to the web service operation. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SOAPService/#doremoveparameter","title":"DoRemoveParameter","text":"<p>Remove one pre-defined parameter. Requires Rapise 6.6+</p> <pre><code>SeS('SomeSOAPService').DoRemoveParameter(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Parameter name <p></p> <p> </p>"},{"location":"Libraries/SOAPService/#doremoverequestheader","title":"DoRemoveRequestHeader","text":"<p>Remove one pre-defined request header by name. Requires Rapise 6.6+</p> <pre><code>SeS('SomeSOAPService').DoRemoveRequestHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header name <p></p> <p> </p>"},{"location":"Libraries/SOAPService/#dosetproxy","title":"DoSetProxy","text":"<p>Sets proxy for this request. Requires Rapise 8.1+.</p> <pre><code>SeS('SomeSOAPService').DoSetProxy(host, port, user, pwd)\n</code></pre> <p>Parameters:</p> Name Type Description host string Proxy host name or IP address. port string Proxy port. user string Proxy user name.Optional. pwd string Proxy password.Optional. <p></p> <p> </p>"},{"location":"Libraries/SOAPService/#doverify","title":"DoVerify","text":"<p>Checks that a given part of response equals the expected value.</p> <pre><code>SeS('SomeSOAPService').DoVerify(msg, jsonPath, expectedValue)\n</code></pre> <p>Parameters:</p> Name Type Description msg string Message to write into the report. jsonPath string Path to the given node in the response object to use as a root for comparison with the expected value. expectedValue object Expected value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SSTab/","title":"SSTab","text":"<p>SSTab Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SSTabBehavior</p>"},{"location":"Libraries/SSTab/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/SSTab/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/SSTab/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SSTab/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeSSTab').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/SSTab/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SSTab/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeSSTab').DoSelectTab(tabName, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SWTComboBox/","title":"SWTComboBox","text":"<p>Java SWT Combobox.</p> <p>Extends SWTObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SWTComboBoxBehavior</p>"},{"location":"Libraries/SWTComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/SWTComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/SWTComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SWTComboBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeSWTComboBox').GetText()\n\nSeS('SomeSWTComboBox').SetText(value)\n</code></pre>"},{"location":"Libraries/SWTComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SWTComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeSWTComboBox').DoSelectItem(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to enter into the edit box. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTComboBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeSWTComboBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SWTComboBoxEdit/","title":"SWTComboBoxEdit","text":"<p>Java SWT Editable Combobox.</p> <p>Extends SWTObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SWTComboBoxBehavior</p>"},{"location":"Libraries/SWTComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/SWTComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Sets text value of this object."},{"location":"Libraries/SWTComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SWTComboBoxEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeSWTComboBoxEdit').GetText()\n\nSeS('SomeSWTComboBoxEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/SWTComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SWTComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeSWTComboBoxEdit').DoSelectItem(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string Text to enter into the edit box. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeSWTComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SWTList/","title":"SWTList","text":"<p>Java SWT List.</p> <p>Extends SWTObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SWTListBehavior</p>"},{"location":"Libraries/SWTList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount SetSelectionCount"},{"location":"Libraries/SWTList/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/SWTList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SWTList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount, SetItemCount</p> <pre><code>value = SeS('SomeSWTList').GetItemCount()\n\nSeS('SomeSWTList').SetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeSWTList').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeSWTList').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeSWTList').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeSWTList').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems, SetSelectedItems</p> <pre><code>value = SeS('SomeSWTList').GetSelectedItems()\n\nSeS('SomeSWTList').SetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeSWTList').GetSelectedText()\n\nSeS('SomeSWTList').SetSelectedText(itemtext)\n</code></pre> <p></p>"},{"location":"Libraries/SWTList/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount, SetSelectionCount</p> <pre><code>value = SeS('SomeSWTList').GetSelectionCount()\n\nSeS('SomeSWTList').SetSelectionCount()\n</code></pre>"},{"location":"Libraries/SWTList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SWTList/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeSWTList').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTList/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the item</p> <pre><code>SeS('SomeSWTList').DoClickItem(nameCaptionIndex, xOffset, yOffset, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTList/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeSWTList').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeSWTList').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SWTObject/","title":"SWTObject","text":"<p>Java SWT Object.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAObjectGenericBehavior</p>"},{"location":"Libraries/SWTObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter AutomationId Automation ID of UI Automation object GetAutomationId ChildAt Object for nth child of this object's UI Automation node GetChildAt ChildrenCount Number of UI Automation nodes within current node GetChildrenCount Height Height of the object. GetHeight IndexInParent Object's order index in parent UI Automation node GetIndexInParent Name Name of of UI Automation object GetName NextSibling Object for UI Automation next sibling node GetNextSibling Parent Object for UI Automation parent node GetParent PrevSibling Object for UI Automation previous sibling node GetPrevSibling TypeName Type name of UI Automation object GetTypeName Value Value of the object. GetValue Visible Returns <code>true</code> if the element is visible, otherwise - <code>false</code>. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/SWTObject/#action-summary","title":"Action Summary","text":"Action Description DoClick Performs left click at the center of an object. DoDumpWidget Dumps Spy data for the object. DoFindByLocation Finds nested element by its location string. DoFindByText Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/SWTObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SWTObject/#automationid","title":"AutomationId","text":"<p>Automation ID of UI Automation object</p> <p>Type: string</p> <p>Accessors: GetAutomationId</p> <pre><code>value = SeS('SomeSWTObject').GetAutomationId()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#childat","title":"ChildAt","text":"<p>Object for nth child of this object's UI Automation node</p> <p>Getter Parameters:</p> Name Type Description ind number Zero-based index for a required child <p>Type: UIAObject</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeSWTObject').GetChildAt(ind)\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#childrencount","title":"ChildrenCount","text":"<p>Number of UI Automation nodes within current node</p> <p>Type: number</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeSWTObject').GetChildrenCount()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeSWTObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#indexinparent","title":"IndexInParent","text":"<p>Object's order index in parent UI Automation node</p> <p>Type: number</p> <p>Accessors: GetIndexInParent</p> <pre><code>value = SeS('SomeSWTObject').GetIndexInParent()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#name","title":"Name","text":"<p>Name of of UI Automation object</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeSWTObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#nextsibling","title":"NextSibling","text":"<p>Object for UI Automation next sibling node</p> <p>Type: UIAObject</p> <p>Accessors: GetNextSibling</p> <pre><code>value = SeS('SomeSWTObject').GetNextSibling()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#parent","title":"Parent","text":"<p>Object for UI Automation parent node</p> <p>Type: UIAObject</p> <p>Accessors: GetParent</p> <pre><code>value = SeS('SomeSWTObject').GetParent()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#prevsibling","title":"PrevSibling","text":"<p>Object for UI Automation previous sibling node</p> <p>Type: UIAObject</p> <p>Accessors: GetPrevSibling</p> <pre><code>value = SeS('SomeSWTObject').GetPrevSibling()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#typename","title":"TypeName","text":"<p>Type name of UI Automation object</p> <p>Type: String</p> <p>Accessors: GetTypeName</p> <pre><code>value = SeS('SomeSWTObject').GetTypeName()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue</p> <pre><code>value = SeS('SomeSWTObject').GetValue()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible, otherwise - <code>false</code>. Requires Rapise 6.6+</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeSWTObject').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeSWTObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeSWTObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/SWTObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeSWTObject').GetY()\n</code></pre>"},{"location":"Libraries/SWTObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SWTObject/#doclick","title":"DoClick","text":"<p>Performs left click at the center of an object. It is a customizable variant of LClick action.</p> <pre><code>SeS('SomeSWTObject').DoClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeSWTObject').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dofindbylocation","title":"DoFindByLocation","text":"<p>Finds nested element by its location string. Supports /Id, .. (up) and (any), i.e. ../[3]/Button[1] - go to parent, then 4<sup>th</sup> child, then find 2<sup>nd</sup> button. Requires Rapise 8.1+.</p> <pre><code>SeS('SomeSWTObject').DoFindByLocation(strLocation)\n</code></pre> <p>Parameters:</p> Name Type Description strLocation string Relative location of element. <p>Returns:</p> <p>UIAObject: UIAObject if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value and Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeSWTObject').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>UIAObject: UIAObject containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dofindelementbycondition","title":"DoFindElementByCondition","text":"<p>Finds first element matching the condition. Requires Rapise 6.6+</p> <pre><code>SeS('SomeSWTObject').DoFindElementByCondition(scope, condition)\n</code></pre> <p>Parameters:</p> Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. <p>Returns:</p> <p>UIAObject: UIAObject if the element is found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dofindelementsbycondition","title":"DoFindElementsByCondition","text":"<p>Finds all elements matching the condition</p> <pre><code>SeS('SomeSWTObject').DoFindElementsByCondition(scope, condition)\n</code></pre> <p>Parameters:</p> Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. <p>Returns:</p> <p>Array: Array of UIAObjects for the found elements, the array is empty if nothing is found. Requires Rapise 6.6+</p> <p></p> <p> </p>"},{"location":"Libraries/SWTObject/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeSWTObject').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/SWTTree/","title":"SWTTree","text":"<p>Java SWT Tree.</p> <p>Extends SWTObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SWTTreeBehavior</p>"},{"location":"Libraries/SWTTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount SetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected"},{"location":"Libraries/SWTTree/#action-summary","title":"Action Summary","text":"Action Description DoCollapse Collapses specific node in the tree. DoExpand Expands a specific node in the tree. DoSelectItem Selects specified item in the tree."},{"location":"Libraries/SWTTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SWTTree/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeSWTTree').GetChecked()\n\nSeS('SomeSWTTree').SetChecked(/**boolean*/value)\n</code></pre> <p></p>"},{"location":"Libraries/SWTTree/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount, SetChildrenCount</p> <pre><code>value = SeS('SomeSWTTree').GetChildrenCount(path, separator, pathType)\n\nSeS('SomeSWTTree').SetChildrenCount(/**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/SWTTree/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded, SetExpanded</p> <pre><code>value = SeS('SomeSWTTree').GetExpanded(path, separator, pathType)\n\nSeS('SomeSWTTree').SetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/SWTTree/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Type: string|boolean</p> <p>Accessors: GetNodeText, SetNodeText</p> <pre><code>value = SeS('SomeSWTTree').GetNodeText()\n\nSeS('SomeSWTTree').SetNodeText(/**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/SWTTree/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected, SetSelected</p> <pre><code>value = SeS('SomeSWTTree').GetSelected(path, separator, pathType)\n\nSeS('SomeSWTTree').SetSelected(path, separator, pathType)\n</code></pre>"},{"location":"Libraries/SWTTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SWTTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeSWTTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTTree/#doexpand","title":"DoExpand","text":"<p>Expands a specific node in the tree.</p> <pre><code>SeS('SomeSWTTree').DoExpand(node)\n</code></pre> <p>Parameters:</p> Name Type Description node string Name of the node <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SWTTree/#doselectitem","title":"DoSelectItem","text":"<p>Selects specified item in the tree.</p> <pre><code>SeS('SomeSWTTree').DoSelectItem(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Item to select <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Screenshot/","title":"Screenshot","text":"<p>This is a JavaScript wrapper for Screenshot of Selenium .NET library.</p>"},{"location":"Libraries/Screenshot/#action-summary","title":"Action Summary","text":"Action Description SaveAsFile Saves the screenshot to a file."},{"location":"Libraries/Screenshot/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Screenshot/#saveasfile","title":"SaveAsFile","text":"<p>Saves the screenshot to a file.</p> <pre><code>WebDriver.GetScreenshot().SaveAsFile(fileName, format)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Path to a file format string Format of the image, one of bmp, emf, exif, gif, icon, jpeg, png, tiff, wmf <p></p>"},{"location":"Libraries/SeSActiveXObjectRule/","title":"SeSActiveXObjectRule","text":""},{"location":"Libraries/SeSC1TrueDBGridRule/","title":"SeSC1TrueDBGridRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/SeSC1TrueDBListComboRule/","title":"SeSC1TrueDBListComboRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/SeSC1TrueDBListRule/","title":"SeSC1TrueDBListRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/SeSMSComCtlToolbarRule/","title":"SeSMSComCtlToolbarRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/SeSReportException/","title":"SeSReportException","text":"<p>Used to show exception in the report.</p>"},{"location":"Libraries/SeSReportException/#action-summary","title":"Action Summary","text":"Action Description SeSReportException Used to show exception in the report."},{"location":"Libraries/SeSReportException/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSReportException/#sesreportexception_1","title":"SeSReportException","text":"<p>Used to show exception in the report.</p> <pre><code>Tester.Assert(\"Connection Failed\", false, new SeSReportException(ex))\n</code></pre> <p>Parameters:</p> Name Type Description e Error Error object. <p></p>"},{"location":"Libraries/SeSReportFile/","title":"SeSReportFile","text":"<p>Used to attach a file to the report.</p>"},{"location":"Libraries/SeSReportFile/#action-summary","title":"Action Summary","text":"Action Description SeSReportFile Used to attach a file to the report."},{"location":"Libraries/SeSReportFile/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSReportFile/#sesreportfile_1","title":"SeSReportFile","text":"<p>Used to attach a file to the report.</p> <pre><code>Tester.Message(\"Log File\", [new SeSReportFile(\"d:\\\\temp\\\\app.log\", \"Application Log File\")])\n</code></pre> <p>Parameters:</p> Name Type Description path string Path to a file. caption string Caption to show in the report. <p></p>"},{"location":"Libraries/SeSReportImage/","title":"SeSReportImage","text":"<p>Used to show a bitmap picture in the report.</p>"},{"location":"Libraries/SeSReportImage/#action-summary","title":"Action Summary","text":"Action Description SeSReportImage Used to show a bitmap picture in the report."},{"location":"Libraries/SeSReportImage/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSReportImage/#sesreportimage_1","title":"SeSReportImage","text":"<p>Used to show a bitmap picture in the report.</p> <pre><code>Tester.Message(\"Graph\", new SeSReportFile(\"d:\\\\temp\\\\graph.png\", \"External Image\"))\n</code></pre> <p>Parameters:</p> Name Type Description imgWrapperOrPath ImageWrapper | string Instance of image wrapper with captured image or path to the image. caption string Image label.Optional, Default: \"Image\". <p></p>"},{"location":"Libraries/SeSReportLink/","title":"SeSReportLink","text":"<p>Used to show link (url and text) in the report.</p>"},{"location":"Libraries/SeSReportLink/#action-summary","title":"Action Summary","text":"Action Description SeSReportLink Used to show link (url and text) in the report."},{"location":"Libraries/SeSReportLink/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSReportLink/#sesreportlink_1","title":"SeSReportLink","text":"<p>Used to show link (url and text) in the report.</p> <pre><code>Tester.Assert(\"Navigation successfull\", true, [SeSReportLink(\"https://v3.libraryinformationsystem.org/\", \"Demo Site\")])\n</code></pre> <p>Parameters:</p> Name Type Description url string Actual link. text string Text to show in the report. <p></p>"},{"location":"Libraries/SeSReportText/","title":"SeSReportText","text":"<p>Used to show long text message in the report. In most cases passing SeSReportText is the same as passing string - it will be converted to SeSReportText.</p>"},{"location":"Libraries/SeSReportText/#action-summary","title":"Action Summary","text":"Action Description SeSReportText Used to show long text message in the report."},{"location":"Libraries/SeSReportText/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSReportText/#sesreporttext_1","title":"SeSReportText","text":"<p>Used to show long text message in the report. In most cases passing SeSReportText is the same as passing string - it will be converted to SeSReportText.</p> <pre><code>Tester.Message(\"Log File\", new SeSReportText(\"Response time: 3.35\"))\n</code></pre> <p>Parameters:</p> Name Type Description txt string Message text. caption string Message caption.Optional. <p></p>"},{"location":"Libraries/SeSSSTabCtlWndClassRule/","title":"SeSSSTabCtlWndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/SeSSimulatedObject/","title":"SeSSimulatedObject","text":"<p>Generic SeSSimulated. This is a rule for simulated objects.</p> <p>Behavior Pattern: Win32Generic</p>"},{"location":"Libraries/SeSSimulatedObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&amp;white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/SeSSimulatedObject/#action-summary","title":"Action Summary","text":"Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys)."},{"location":"Libraries/SeSSimulatedObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SeSSimulatedObject/#bitmap","title":"Bitmap","text":"<p>UI Image of the object.</p> <p>Type: ImageWrapper</p> <p>Accessors: GetBitmap</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetBitmap()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#bwbitmap","title":"BWBitmap","text":"<p>UI Image of the object in 1-bit format (black&amp;white).</p> <p>Type: ImageWrapper</p> <p>Accessors: GetBWBitmap</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetBWBitmap()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#class","title":"Class","text":"<p>Class of the object.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#name","title":"Name","text":"<p>Name of the object.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#objecttype","title":"ObjectType","text":"<p>SeSMatcherRule type for this object.</p> <p>Type: string</p> <p>Accessors: GetObjectType</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetObjectType()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#state","title":"State","text":"<p>State of the object.</p> <p>Type: string</p> <p>Accessors: GetState</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetState()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetValue()\n\nSeS('SomeSeSSimulatedObject').SetValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#windowtext","title":"WindowText","text":"<p>Window text of the object.</p> <p>Type: string</p> <p>Accessors: GetWindowText, SetWindowText</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetWindowText()\n\nSeS('SomeSeSSimulatedObject').SetWindowText(value)\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/SeSSimulatedObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeSeSSimulatedObject').GetY()\n</code></pre>"},{"location":"Libraries/SeSSimulatedObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SeSSimulatedObject/#doaction","title":"DoAction","text":"<p>Performs default action for an object. If the object doesn't have default action then 'LClick' is performed.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoAction()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#doanalogplay","title":"DoAnalogPlay","text":"<p>Plays analog recording using coordinates relative to this object.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoAnalogPlay(path, left, top)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left cornerOptional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner.Optional. <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#doclick","title":"DoClick","text":"<p>Performs left click at the center of an object. It is a customizable variant of LClick action.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoClick(clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#doensurevisible","title":"DoEnsureVisible","text":"<p>Makes sure specified element is visible on the screen.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoEnsureVisible()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dolbuttondown","title":"DoLButtonDown","text":"<p>Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoLButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dolbuttonup","title":"DoLButtonUp","text":"<p>Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoLButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dolclick","title":"DoLClick","text":"<p>Performs a left click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoLClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#doldclick","title":"DoLDClick","text":"<p>Performs a left double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoLDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dombuttondown","title":"DoMButtonDown","text":"<p>Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoMButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dombuttonup","title":"DoMButtonUp","text":"<p>Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoMButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#domclick","title":"DoMClick","text":"<p>Performs a middle click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoMClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#domdclick","title":"DoMDClick","text":"<p>Performs a middle double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoMDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#domousemove","title":"DoMouseMove","text":"<p>Moves mouse cursor to a location relative to this object position.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoMouseMove(x, y, duration)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. duration number Mouse move duration (milliseconds). If 0 - do immediate move.Optional, Default: \"0\". <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dorbuttondown","title":"DoRButtonDown","text":"<p>Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoRButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dorbuttonup","title":"DoRButtonUp","text":"<p>Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoRButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dorclick","title":"DoRClick","text":"<p>Performs a right click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoRClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dordclick","title":"DoRDClick","text":"<p>Performs a right double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSeSSimulatedObject').DoRDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dosendkeys","title":"DoSendKeys","text":"<p>Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys</p> <pre><code>SeS('SomeSeSSimulatedObject').DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string A sequence of keystrokes. <p></p> <p> </p>"},{"location":"Libraries/SeSSimulatedObject/#dosendtext","title":"DoSendText","text":"<p>Sends text to the active application as is (while SendKeys also supports sending special keys).</p> <pre><code>SeS('SomeSeSSimulatedObject').DoSendText(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string A sequence of keystrokes. <p></p>"},{"location":"Libraries/SeSTabStrip20WndClassRule/","title":"SeSTabStrip20WndClassRule","text":"<p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/Session/","title":"Session","text":"<p>Session object for SOAP and REST services.</p>"},{"location":"Libraries/Session/#action-summary","title":"Action Summary","text":"Action Description DoRemoveParameter Remove one pre-defined parameter. DoRemoveRequestHeader Remove one pre-defined request header by name. GetCredential Returns HTTP Basic Authentication credentials (if any). GetNewRequest Create new <code>RESTService</code> object with 'GET' method and specified <code>url</code>. GetParameters Return common request parameters (array of `[{'Name':somename,'Value':somevalue},. GetProxyHost Returns proxy host. GetProxyPort Returns proxy port. GetProxyPwd Returns proxy password. GetProxyUser Returns proxy user name. GetRequestHeaders Return common HTTP Headers applied to each REST or SOAP request (array of `[{'Name':somename,'Value':somevalue},. GetRESTRequest Create new <code>RESTService</code> object with 'GET' method and specified <code>url</code>. SetBaseUrl Enable URL replacement for all further requests. SetCredential Sets HTTP Basic Authentication Credentials. SetIgnoreStatus Set to <code>true</code> to prevent REST requests with non 200 status code from failing the test. SetParameter Sets common request parameter. SetParameters Sets common request parameters. SetProxy Sets proxy settings for the Session. SetProxyHost Sets proxy host. SetProxyPort Sets proxy port. SetProxyPwd Sets proxy password. SetProxyUser Sets proxy user name. SetRequestHeader Sets common request header. SetRequestHeaders Sets common HTTP Headers applied to each REST or SOAP request. SetUrl Deprecated."},{"location":"Libraries/Session/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Session/#doremoveparameter","title":"DoRemoveParameter","text":"<p>Remove one pre-defined parameter. Requires Rapise 6.6+</p> <pre><code>Session.DoRemoveParameter(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Parameter name <p></p> <p> </p>"},{"location":"Libraries/Session/#doremoverequestheader","title":"DoRemoveRequestHeader","text":"<p>Remove one pre-defined request header by name. Requires Rapise 6.6+</p> <pre><code>Session.DoRemoveRequestHeader(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Header name <p></p> <p> </p>"},{"location":"Libraries/Session/#getcredential","title":"GetCredential","text":"<p>Returns HTTP Basic Authentication credentials (if any).</p> <pre><code>Session.GetCredential()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getnewrequest","title":"GetNewRequest","text":"<p>Create new <code>RESTService</code> object with 'GET' method and specified <code>url</code>.</p> <pre><code>Session.GetNewRequest(url, name)\n</code></pre> <p>Parameters:</p> Name Type Description url string Request URL name string Request name used to display in the reportOptional. <p></p> <p> </p>"},{"location":"Libraries/Session/#getparameters","title":"GetParameters","text":"<p>Return common request parameters (array of <code>[{'Name':somename,'Value':somevalue},...]</code>)</p> <pre><code>Session.GetParameters()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getproxyhost","title":"GetProxyHost","text":"<p>Returns proxy host. Requires Rapise 8.1+.</p> <pre><code>Session.GetProxyHost()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getproxyport","title":"GetProxyPort","text":"<p>Returns proxy port. Requires Rapise 8.1+.</p> <pre><code>Session.GetProxyPort()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getproxypwd","title":"GetProxyPwd","text":"<p>Returns proxy password. Requires Rapise 8.1+.</p> <pre><code>Session.GetProxyPwd()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getproxyuser","title":"GetProxyUser","text":"<p>Returns proxy user name. Requires Rapise 8.1+.</p> <pre><code>Session.GetProxyUser()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getrequestheaders","title":"GetRequestHeaders","text":"<p>Return common HTTP Headers applied to each REST or SOAP request (array of <code>[{'Name':somename,'Value':somevalue},...]</code>)</p> <pre><code>Session.GetRequestHeaders()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Session/#getrestrequest","title":"GetRESTRequest","text":"<p>Create new <code>RESTService</code> object with 'GET' method and specified <code>url</code>.</p> <pre><code>Session.GetRESTRequest(defNameOrPath, id)\n</code></pre> <p>Parameters:</p> Name Type Description defNameOrPath string Path to the .rest definition file id string Name of the request (as specified in the .rest definition file) <p></p> <p> </p>"},{"location":"Libraries/Session/#setbaseurl","title":"SetBaseUrl","text":"<p>Enable URL replacement for all further requests. If request URL starts with oldUrl then replace the beginning with newUrl. Requires Rapise 6.6+</p> <pre><code>Session.SetBaseUrl(oldUrl, newUrl)\n</code></pre> <p>Parameters:</p> Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl <p></p> <p> </p>"},{"location":"Libraries/Session/#setcredential","title":"SetCredential","text":"<p>Sets HTTP Basic Authentication Credentials. Sample code:</p> <pre><code>var credential = {};\ncredential.UserName = \"fredbloggs\";\ncredential.Password = \"MyPassword\";\nSeS(\"Operation_Name\").SetCredential(credential);\n</code></pre> <p>Another way is to pass user name and password as first and second parameter respectively, e.g. <code>SeS(\"Operation_Name\").SetCredential(\"fredbloggs\", \"MyPassword\");</code></p> <pre><code>Session.SetCredential(value, value2)\n</code></pre> <p>Parameters:</p> Name Type Description value string | object User name or full object with credentials. value2 string Password string. Do not set this parameter if you pass object as the first one. <p></p> <p> </p>"},{"location":"Libraries/Session/#setignorestatus","title":"SetIgnoreStatus","text":"<p>Set to <code>true</code> to prevent REST requests with non 200 status code from failing the test. It would <code>&lt;req&gt;.DoExecute()</code> will just return <code>true</code>/<code>false</code> but the line in report will always be marked as <code>Passed</code>.</p> <pre><code>Session.SetIgnoreStatus(ignore)\n</code></pre> <p>Parameters:</p> Name Type Description ignore boolean <code>true</code> to ignore status code <p></p> <p> </p>"},{"location":"Libraries/Session/#setparameter","title":"SetParameter","text":"<p>Sets common request parameter. This parameter will be applied to all further REST and SOAP requests.</p> <pre><code>Session.SetParameter(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string Parameter name value string Parameter value <p></p> <p> </p>"},{"location":"Libraries/Session/#setparameters","title":"SetParameters","text":"<p>Sets common request parameters. These parameters will be applied to all further REST and SOAP requests. Accepts one of:</p> <ul> <li>Full array of parameters: <code>[{'Name':somename,'Value':somevalue},...]</code></li> <li>Single parameter as object: <code>{'Name':somename,'Value':somevalue}</code></li> <li>Single parameter as 2 input parameters: <code>Session.SetParameters(name,value)</code>.</li> </ul> <pre><code>Session.SetParameters(requestParam, optValueVal)\n</code></pre> <p>Parameters:</p> Name Type Description requestParam object Parameters or single parameter. optValueVal string Parameter value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be <code>Session.SetParameters('name','value')</code>Optional. <p></p> <p> </p>"},{"location":"Libraries/Session/#setproxy","title":"SetProxy","text":"<p>Sets proxy settings for the Session. Requires Rapise 8.1+.</p> <pre><code>Session.SetProxy(host, port, user, pwd)\n</code></pre> <p>Parameters:</p> Name Type Description host string Proxy host name or IP address. port string Proxy port. user string Proxy user name. pwd string Proxy password. <p></p> <p> </p>"},{"location":"Libraries/Session/#setproxyhost","title":"SetProxyHost","text":"<p>Sets proxy host. Requires Rapise 8.1+.</p> <pre><code>Session.SetProxyHost(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Host name or IP address. <p></p> <p> </p>"},{"location":"Libraries/Session/#setproxyport","title":"SetProxyPort","text":"<p>Sets proxy port. Requires Rapise 8.1+.</p> <pre><code>Session.SetProxyPort(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Port number. <p></p> <p> </p>"},{"location":"Libraries/Session/#setproxypwd","title":"SetProxyPwd","text":"<p>Sets proxy password. Requires Rapise 8.1+.</p> <pre><code>Session.SetProxyPwd(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Proxy password. <p></p> <p> </p>"},{"location":"Libraries/Session/#setproxyuser","title":"SetProxyUser","text":"<p>Sets proxy user name. Requires Rapise 8.1+.</p> <pre><code>Session.SetProxyUser(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string User name. <p></p> <p> </p>"},{"location":"Libraries/Session/#setrequestheader","title":"SetRequestHeader","text":"<p>Sets common request header. This header will be applied to all further REST and SOAP requests.</p> <pre><code>Session.SetRequestHeader(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string HTTP header name value string HTTP header value <p></p> <p> </p>"},{"location":"Libraries/Session/#setrequestheaders","title":"SetRequestHeaders","text":"<p>Sets common HTTP Headers applied to each REST or SOAP request. Accepts one of:</p> <ul> <li>Full array of headers: <code>[{'Name':somename,'Value':somevalue},...]</code></li> <li>Single header as object: <code>{'Name':somename,'Value':somevalue}</code></li> <li>Single header as 2 input parameters: <code>Session.SetRequestHeaders(name, value)</code></li> </ul> <pre><code>Session.SetRequestHeaders(requestParam, optValueVal)\n</code></pre> <p>Parameters:</p> Name Type Description requestParam object Header(s) object or single header name. optValueVal string Header value, when specified. If this value is set, then 'requestParam' should be a string and method signature will be <code>Session.SetRequestHeaders('name','value')</code>Optional. <p></p> <p> </p>"},{"location":"Libraries/Session/#seturl","title":"SetUrl","text":"<p>Deprecated. Same as <code>SetBaseUrl</code>.</p> <pre><code>Session.SetUrl(oldUrl, newUrl)\n</code></pre> <p>Parameters:</p> Name Type Description oldUrl string URL to find newUrl string new URL to use instead of oldUrl <p></p>"},{"location":"Libraries/SftTree/","title":"SftTree","text":"<p>This behavior pattern implements standard behavior for Tree control.</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SftTreeBehavior</p>"},{"location":"Libraries/SftTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded ItemsCount Number of rows in the table. GetItemsCount Node Selected node or a node specified by the input parameters. GetNode NodeText Text of the selected node or a node specified by the input parameters. GetNodeText SetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected SiblingsAfter Number of siblings after the selected node or a node specified by the input parameters. GetSiblingsAfter"},{"location":"Libraries/SftTree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFullText Returns text representation of the table."},{"location":"Libraries/SftTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SftTree/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeSftTree').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded, SetExpanded</p> <pre><code>value = SeS('SomeSftTree').GetExpanded(path, separator, pathType)\n\nSeS('SomeSftTree').SetExpanded(/**boolean*/ value, path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#itemscount","title":"ItemsCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeSftTree').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#node","title":"Node","text":"<p>Selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: object</p> <p>Accessors: GetNode</p> <pre><code>value = SeS('SomeSftTree').GetNode(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". column number Zero-based index of a column.Optional, Default: \"0\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText, SetNodeText</p> <pre><code>value = SeS('SomeSftTree').GetNodeText(path, separator, pathType, column)\n\nSeS('SomeSftTree').SetNodeText(/**string*/ value, path, separator, pathType, column)\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected, SetSelected</p> <pre><code>value = SeS('SomeSftTree').GetSelected(path, separator, pathType)\n\nSeS('SomeSftTree').SetSelected(/**boolean*/ value, path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/SftTree/#siblingsafter","title":"SiblingsAfter","text":"<p>Number of siblings after the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path separator pathType <p>Type: number</p> <p>Accessors: GetSiblingsAfter</p> <pre><code>value = SeS('SomeSftTree').GetSiblingsAfter(path, separator, pathType)\n</code></pre>"},{"location":"Libraries/SftTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SftTree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeSftTree').DoClickNode(path, separator, pathType, column, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". column number | string Column index or column name. Default is 0Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SftTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeSftTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SftTree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeSftTree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SftTree/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the table.</p> <pre><code>SeS('SomeSftTree').DoFullText(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Name of a file that should hold text representation of the grid.Optional. <p>Returns:</p> <p>string | boolean: Text representation of the grid, 'true' if the file was successfully written, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SimpleButton/","title":"SimpleButton","text":"<p>Button control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SimplePressable</p>"},{"location":"Libraries/SimpleButton/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses button using mouse click or default action."},{"location":"Libraries/SimpleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleButton/#doaction","title":"DoAction","text":"<p>Presses button using mouse click or default action.</p> <pre><code>SeS('SomeSimpleButton').DoAction()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleButtonDropdown/","title":"SimpleButtonDropdown","text":"<p>Check button control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SimplePressable</p>"},{"location":"Libraries/SimpleButtonDropdown/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses button using mouse click or default action."},{"location":"Libraries/SimpleButtonDropdown/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleButtonDropdown/#doaction","title":"DoAction","text":"<p>Presses button using mouse click or default action.</p> <pre><code>SeS('SomeSimpleButtonDropdown').DoAction()\n</code></pre> <p></p> <p>Behavior Pattern: SimpleDropdown</p>"},{"location":"Libraries/SimpleButtonDropdown/#action-summary_1","title":"Action Summary","text":"Action Description DoDropdown Opens dropdown."},{"location":"Libraries/SimpleButtonDropdown/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/SimpleButtonDropdown/#dodropdown","title":"DoDropdown","text":"<p>Opens dropdown.</p> <pre><code>SeS('SomeSimpleButtonDropdown').DoDropdown()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleCheckButton/","title":"SimpleCheckButton","text":"<p>Advanced Accessibility SimpleCheckButton.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32CheckBox</p>"},{"location":"Libraries/SimpleCheckButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/SimpleCheckButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/SimpleCheckButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleCheckButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeSimpleCheckButton').GetChecked()\n\nSeS('SomeSimpleCheckButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/SimpleCheckButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleCheckButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeSimpleCheckButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SimpleComboBox/","title":"SimpleComboBox","text":"<p>ComboBox control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/SimpleComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/SimpleComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleComboBox/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleComboBox').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeSimpleComboBox').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCombo</p>"},{"location":"Libraries/SimpleComboBox/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleComboBox/#action-summary_1","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/SimpleComboBox/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/SimpleComboBox/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleComboBox').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleComboBox/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/SimpleComboBox/#doselectitem_1","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeSimpleComboBox').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/SimpleGraphics/","title":"SimpleGraphics","text":"<p>Graphics control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Generic</p>"},{"location":"Libraries/SimpleGraphics/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Bitmap UI Image of the object. GetBitmap BWBitmap UI Image of the object in 1-bit format (black&amp;white). GetBWBitmap Class Class of the object. GetClass Height Height of the object. GetHeight Name Name of the object. GetName ObjectType SeSMatcherRule type for this object. GetObjectType State State of the object. GetState Value Value of the object. GetValue SetValue Width Width of the object. GetWidth WindowText Window text of the object. GetWindowText SetWindowText X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/SimpleGraphics/#action-summary","title":"Action Summary","text":"Action Description DoAction Performs default action for an object. DoAnalogPlay Plays analog recording using coordinates relative to this object. DoClick Performs left click at the center of an object. DoEnsureVisible Makes sure specified element is visible on the screen. DoLButtonDown Performs left mouse button down. DoLButtonUp Performs left mouse button up. DoLClick Performs a left click at the center of an object or at the specified location. DoLDClick Performs a left double click at the center of an object or at the specified location. DoMButtonDown Performs middle mouse button down. DoMButtonUp Performs middle mouse button up. DoMClick Performs a middle click at the center of an object or at the specified location. DoMDClick Performs a middle double click at the center of an object or at the specified location. DoMouseMove Moves mouse cursor to a location relative to this object position. DoRButtonDown Performs right mouse button down. DoRButtonUp Performs right mouse button up. DoRClick Performs a right click at the center of an object or at the specified location. DoRDClick Performs a right double click at the center of an object or at the specified location. DoSendKeys Sends series of keystrokes to an object. DoSendText Sends text to the active application as is (while SendKeys also supports sending special keys)."},{"location":"Libraries/SimpleGraphics/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleGraphics/#bitmap","title":"Bitmap","text":"<p>UI Image of the object.</p> <p>Type: ImageWrapper</p> <p>Accessors: GetBitmap</p> <pre><code>value = SeS('SomeSimpleGraphics').GetBitmap()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#bwbitmap","title":"BWBitmap","text":"<p>UI Image of the object in 1-bit format (black&amp;white).</p> <p>Type: ImageWrapper</p> <p>Accessors: GetBWBitmap</p> <pre><code>value = SeS('SomeSimpleGraphics').GetBWBitmap()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#class","title":"Class","text":"<p>Class of the object.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeSimpleGraphics').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeSimpleGraphics').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#name","title":"Name","text":"<p>Name of the object.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeSimpleGraphics').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#objecttype","title":"ObjectType","text":"<p>SeSMatcherRule type for this object.</p> <p>Type: string</p> <p>Accessors: GetObjectType</p> <pre><code>value = SeS('SomeSimpleGraphics').GetObjectType()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#state","title":"State","text":"<p>State of the object.</p> <p>Type: string</p> <p>Accessors: GetState</p> <pre><code>value = SeS('SomeSimpleGraphics').GetState()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeSimpleGraphics').GetValue()\n\nSeS('SomeSimpleGraphics').SetValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeSimpleGraphics').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#windowtext","title":"WindowText","text":"<p>Window text of the object.</p> <p>Type: string</p> <p>Accessors: GetWindowText, SetWindowText</p> <pre><code>value = SeS('SomeSimpleGraphics').GetWindowText()\n\nSeS('SomeSimpleGraphics').SetWindowText(value)\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeSimpleGraphics').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleGraphics/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeSimpleGraphics').GetY()\n</code></pre>"},{"location":"Libraries/SimpleGraphics/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleGraphics/#doaction","title":"DoAction","text":"<p>Performs default action for an object. If the object doesn't have default action then 'LClick' is performed.</p> <pre><code>SeS('SomeSimpleGraphics').DoAction()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#doanalogplay","title":"DoAnalogPlay","text":"<p>Plays analog recording using coordinates relative to this object.</p> <pre><code>SeS('SomeSimpleGraphics').DoAnalogPlay(path, left, top)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path to analog recording (usually an .arf file). left number X-coordinate of top-left corner of the analog area, relative to object top-left cornerOptional. top number Y-coordinate of the top-left corner of the analog area, relative to object top-left corner.Optional. <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#doclick","title":"DoClick","text":"<p>Performs left click at the center of an object. It is a customizable variant of LClick action.</p> <pre><code>SeS('SomeSimpleGraphics').DoClick(clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#doensurevisible","title":"DoEnsureVisible","text":"<p>Makes sure specified element is visible on the screen.</p> <pre><code>SeS('SomeSimpleGraphics').DoEnsureVisible()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dolbuttondown","title":"DoLButtonDown","text":"<p>Performs left mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoLButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSimpleGraphics').DoLButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dolbuttonup","title":"DoLButtonUp","text":"<p>Performs left mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoLButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSimpleGraphics').DoLButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dolclick","title":"DoLClick","text":"<p>Performs a left click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoLClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#doldclick","title":"DoLDClick","text":"<p>Performs a left double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoLDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dombuttondown","title":"DoMButtonDown","text":"<p>Performs middle mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoMButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSimpleGraphics').DoMButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dombuttonup","title":"DoMButtonUp","text":"<p>Performs middle mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoMButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSimpleGraphics').DoMButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#domclick","title":"DoMClick","text":"<p>Performs a middle click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoMClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#domdclick","title":"DoMDClick","text":"<p>Performs a middle double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoMDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#domousemove","title":"DoMouseMove","text":"<p>Moves mouse cursor to a location relative to this object position.</p> <pre><code>SeS('SomeSimpleGraphics').DoMouseMove(x, y, duration)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. duration number Mouse move duration (milliseconds). If 0 - do immediate move.Optional, Default: \"0\". <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dorbuttondown","title":"DoRButtonDown","text":"<p>Performs right mouse button down. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: This action must be followed by 'DoRButtonUp', otherwise it may lock mouse cursor.</p> <pre><code>SeS('SomeSimpleGraphics').DoRButtonDown()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dorbuttonup","title":"DoRButtonUp","text":"<p>Performs right mouse button up. This method does not change cursor coordinates. Make sure that you use 'DoMouseMove' to position mouse cursor properly before calling this method. Note: Use this action after 'DoRButtonDown', otherwise it will have no effect.</p> <pre><code>SeS('SomeSimpleGraphics').DoRButtonUp()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dorclick","title":"DoRClick","text":"<p>Performs a right click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoRClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dordclick","title":"DoRDClick","text":"<p>Performs a right double click at the center of an object or at the specified location.</p> <pre><code>SeS('SomeSimpleGraphics').DoRDClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dosendkeys","title":"DoSendKeys","text":"<p>Sends series of keystrokes to an object. For example: DoSendKeys('^F') - sends {CTRL} + {F}. See MSDN Article for SendKeys</p> <pre><code>SeS('SomeSimpleGraphics').DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string A sequence of keystrokes. <p></p> <p> </p>"},{"location":"Libraries/SimpleGraphics/#dosendtext","title":"DoSendText","text":"<p>Sends text to the active application as is (while SendKeys also supports sending special keys).</p> <pre><code>SeS('SomeSimpleGraphics').DoSendText(text)\n</code></pre> <p>Parameters:</p> Name Type Description text string A sequence of keystrokes. <p></p>"},{"location":"Libraries/SimpleLink/","title":"SimpleLink","text":"<p>Link control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/SimpleLink/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/SimpleLink/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleLink/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>SeS('SomeSimpleLink').DoAction()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleLinkText/","title":"SimpleLinkText","text":"<p>Link text control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/SimpleLinkText/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/SimpleLinkText/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleLinkText/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>SeS('SomeSimpleLinkText').DoAction()\n</code></pre> <p></p>"},{"location":"Libraries/SimpleList/","title":"SimpleList","text":"<p>List control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/SimpleList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleList/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/SimpleList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleList').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleList/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeSimpleList').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemExpandable</p>"},{"location":"Libraries/SimpleList/#action-summary_1","title":"Action Summary","text":"Action Description DoExpand Expands an item of this object."},{"location":"Libraries/SimpleList/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/SimpleList/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeSimpleList').DoExpand(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to expand <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCheckable</p>"},{"location":"Libraries/SimpleList/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleList/#action-summary_2","title":"Action Summary","text":"Action Description DoCheckItem Checks an item of this object."},{"location":"Libraries/SimpleList/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/SimpleList/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleList').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleList/#action-detail_2","title":"Action Detail","text":""},{"location":"Libraries/SimpleList/#docheckitem","title":"DoCheckItem","text":"<p>Checks an item of this object.</p> <pre><code>SeS('SomeSimpleList').DoCheckItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to check <p></p>"},{"location":"Libraries/SimpleOutline/","title":"SimpleOutline","text":"<p>Outline control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/SimpleOutline/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleOutline/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/SimpleOutline/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleOutline/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleOutline').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleOutline/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleOutline/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeSimpleOutline').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemExpandable</p>"},{"location":"Libraries/SimpleOutline/#action-summary_1","title":"Action Summary","text":"Action Description DoExpand Expands an item of this object."},{"location":"Libraries/SimpleOutline/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/SimpleOutline/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeSimpleOutline').DoExpand(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to expand <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCheckable</p>"},{"location":"Libraries/SimpleOutline/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/SimpleOutline/#action-summary_2","title":"Action Summary","text":"Action Description DoCheckItem Checks an item of this object."},{"location":"Libraries/SimpleOutline/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/SimpleOutline/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeSimpleOutline').GetItemCount()\n</code></pre>"},{"location":"Libraries/SimpleOutline/#action-detail_2","title":"Action Detail","text":""},{"location":"Libraries/SimpleOutline/#docheckitem","title":"DoCheckItem","text":"<p>Checks an item of this object.</p> <pre><code>SeS('SomeSimpleOutline').DoCheckItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to check <p></p>"},{"location":"Libraries/SimpleRadioButton/","title":"SimpleRadioButton","text":"<p>Static text control.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Radio</p>"},{"location":"Libraries/SimpleText/","title":"SimpleText","text":"<p>Advanced Accessibility SimpleText.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32TextEditable</p>"},{"location":"Libraries/SimpleText/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/SimpleText/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/SimpleText/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SimpleText/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeSimpleText').GetText()\n\nSeS('SomeSimpleText').SetText(value)\n</code></pre>"},{"location":"Libraries/SimpleText/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SimpleText/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeSimpleText').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SmartGwtDatePicker/","title":"SmartGwtDatePicker","text":"<p>DOM SmartGwt SmartGwtDatePicker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSmartGwtDatePickerBehavior</p>"},{"location":"Libraries/SmartGwtDatePicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/SmartGwtDatePicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/SmartGwtDatePicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SmartGwtDatePicker/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeSmartGwtDatePicker').GetMonth()\n</code></pre>"},{"location":"Libraries/SmartGwtDatePicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SmartGwtDatePicker/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeSmartGwtDatePicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SmartGwtDatePicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeSmartGwtDatePicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/SmartGwtDatePicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeSmartGwtDatePicker').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number New date to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/SmartGwtTabControl/","title":"SmartGwtTabControl","text":"<p>DOM SmartGwt SmartGwtTabControl.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSmartGwtTabControlBehavior</p>"},{"location":"Libraries/SmartGwtTabControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/SmartGwtTabControl/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/SmartGwtTabControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SmartGwtTabControl/#itemscount","title":"ItemsCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeSmartGwtTabControl').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/SmartGwtTabControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeSmartGwtTabControl').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/SmartGwtTabControl/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeSmartGwtTabControl').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/SmartGwtTabControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SmartGwtTabControl/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeSmartGwtTabControl').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SmartGwtToolbar/","title":"SmartGwtToolbar","text":"<p>DOM SmartGwt SmartGwtToolbar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: DomSmartGwtToolbarBehavior</p>"},{"location":"Libraries/SmartGwtToolbar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Clicks on a toolbar item."},{"location":"Libraries/SmartGwtToolbar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SmartGwtToolbar/#doclickitem","title":"DoClickItem","text":"<p>Clicks on a toolbar item.</p> <pre><code>SeS('SomeSmartGwtToolbar').DoClickItem(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Zero-based index if an item. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Spira/","title":"Spira","text":"<p>Use Spira object to communicate with Spira during playback of tests. With Spira object you may do such things as launching a test set and creating an incident. Requires Rapise 7.2+</p>"},{"location":"Libraries/Spira/#action-summary","title":"Action Summary","text":"Action Description CreateIncident Creates an incident in Spira. RunTestSet Schedules a test set to execute as soon as possible."},{"location":"Libraries/Spira/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Spira/#createincident","title":"CreateIncident","text":"<p>Creates an incident in Spira..</p> <pre><code>Spira.CreateIncident(name, description, projectNameOrId)\n</code></pre> <p>Parameters:</p> Name Type Description name string Subject of an incident. description string Description of an incident projectNameOrId string Name or ID of a Spira project to add the incident. <p>Returns:</p> <p>number: ID of created incident or 0 in case of error.</p> <p></p> <p> </p>"},{"location":"Libraries/Spira/#runtestset","title":"RunTestSet","text":"<p>Schedules a test set to execute as soon as possible.</p> <pre><code>Spira.RunTestSet(nameOrId, token, projectNameOrId)\n</code></pre> <p>Parameters:</p> Name Type Description nameOrId Name or ID of the Test Set to run. token string Automation host token. projectNameOrId string Name or ID of a Spira project that contains the Test Set. <p>Returns:</p> <p>boolean: <code>true</code> if the test set scheduled successfully, otherwise - <code>false</code>.</p> <p></p>"},{"location":"Libraries/Spreadsheet/","title":"Spreadsheet","text":"<p>Spreadsheet object. Use it to read and write Excel and text spreadsheets.</p>"},{"location":"Libraries/Spreadsheet/#action-summary","title":"Action Summary","text":"Action Description DoAddColumn Appends a column with specified name. DoAddRow Appends a new row. DoAttach Loads a sheet from Excel file (.xls, .xlsx) or csv file (.txt, *.csv). DoCompare Compares two spreadsheets. DoCreate Creates a new spreadsheet file. DoInsertColumn Inserts a column at index. DoInsertRow Inserts a new row at index. DoMoveToFirstRow Moves to a first row in selected range. DoMoveToLastRow Moves to a last row in selected range. DoMoveToRow Sets active row index. DoRandom Selects random row and column in the range. DoRemoveColumn Removes a column at index. DoRemoveRow Removes a row at index. DoSave Saves the spreadsheet. DoSequential Advances to the next row in the range. GetCell Cell value by its coordinates. GetColumnCount Gets columns count. GetColumnIndexByName Gets column index by its name. GetColumnName Gets column name. GetCurrentRowIndex Gets zero-based active row index. GetEOF Gets EOF state. GetRange Cell range used in DoSequential and in DoRandom. GetRowCount Gets row count. SetCell Sets cell value by its coordinates. SetRange Cell range used in DoSequential and in DoRandom."},{"location":"Libraries/Spreadsheet/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Spreadsheet/#doaddcolumn","title":"DoAddColumn","text":"<p>Appends a column with specified name.</p> <pre><code>Spreadsheet.DoAddColumn(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a new column. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doaddrow","title":"DoAddRow","text":"<p>Appends a new row.</p> <pre><code>Spreadsheet.DoAddRow()\n</code></pre> <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doattach","title":"DoAttach","text":"<p>Loads a sheet from Excel file (.xls, .xlsx) or csv file (.txt, *.csv).</p> <pre><code>Spreadsheet.DoAttach(fileName, sheetName, separator)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Path to Excel or csv file. sheetName string Sheet name to load. If not specified - load the first sheet.Optional. separator string Separator for values in csv file.Optional, Default: \",\". <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#docompare","title":"DoCompare","text":"<p>Compares two spreadsheets. In strict mode number of columns and rows matter  and all cell values must be equal. When strict mode is off then spreadsheet2 must contain spreadsheet1 to return 'true' as a result.</p> <pre><code>Spreadsheet.DoCompare(spreadsheet1, spreadsheet2, strict, sheet1Name, sheet2Name)\n</code></pre> <p>Parameters:</p> Name Type Description spreadsheet1 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. spreadsheet2 string | Spreadsheet Path to a spreadsheet file or Spreadsheet object loaded via DoAttach or DoCreate actions. strict boolean If 'true' then number of columns and rows in both spreadsheets must be exactly the same. If 'false' then check that spreadsheet1 is contained in spreadsheet2.Optional, Default: \"false\". sheet1Name string Name of a sheet to compare. Specify this parameter when spreadsheet1 is a path to a file. By default first sheet is compared.Optional. sheet2Name string Name of a sheet to compare. Specify this parameter when spreadsheet2 is a path to a file. By default first sheet is compared.Optional. <p>Returns:</p> <p>boolean: true if spreadsheets are equal, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#docreate","title":"DoCreate","text":"<p>Creates a new spreadsheet file.</p> <pre><code>Spreadsheet.DoCreate(fileName, sheetName, columnNames, rowCount, separator)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Path to a file. Extension defines file format. Supported extensions: .xls, .xlsx, *.csv, *.txt. sheetName string Name of the first sheet.Optional, Default: \"Sheet1\". columnNames array Array of column names.Optional. rowCount number Initial number of rows with values.Optional, Default: \"10\". separator string Separator for values in csv files.Optional, Default: \",\". <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doinsertcolumn","title":"DoInsertColumn","text":"<p>Inserts a column at index.</p> <pre><code>Spreadsheet.DoInsertColumn(columnIndex, name)\n</code></pre> <p>Parameters:</p> Name Type Description columnIndex number Index of a new column. Zero-based. name string Name of a new column. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doinsertrow","title":"DoInsertRow","text":"<p>Inserts a new row at index.</p> <pre><code>Spreadsheet.DoInsertRow(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Index of a new row. Zero-based. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#domovetofirstrow","title":"DoMoveToFirstRow","text":"<p>Moves to a first row in selected range.</p> <pre><code>Spreadsheet.DoMoveToFirstRow()\n</code></pre> <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#domovetolastrow","title":"DoMoveToLastRow","text":"<p>Moves to a last row in selected range.</p> <pre><code>Spreadsheet.DoMoveToLastRow()\n</code></pre> <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#domovetorow","title":"DoMoveToRow","text":"<p>Sets active row index.</p> <pre><code>Spreadsheet.DoMoveToRow(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Index to set. Zero-based. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#dorandom","title":"DoRandom","text":"<p>Selects random row and column in the range. The range is either set by SetRange or it is the default range that includes all rows (except first row  which is considred to contain column names) and columns on the sheet.</p> <pre><code>Spreadsheet.DoRandom()\n</code></pre> <p>Returns:</p> <p>boolean: false if the spreadhseet is not attached, true otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doremovecolumn","title":"DoRemoveColumn","text":"<p>Removes a column at index.</p> <pre><code>Spreadsheet.DoRemoveColumn(columnIndex)\n</code></pre> <p>Parameters:</p> Name Type Description columnIndex number Index of a column to remove. Zero-based. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#doremoverow","title":"DoRemoveRow","text":"<p>Removes a row at index.</p> <pre><code>Spreadsheet.DoRemoveRow(rowIndex)\n</code></pre> <p>Parameters:</p> Name Type Description rowIndex number Index of a row to remove. Zero-based. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#dosave","title":"DoSave","text":"<p>Saves the spreadsheet.</p> <pre><code>Spreadsheet.DoSave(fileName)\n</code></pre> <p>Parameters:</p> Name Type Description fileName string Path to a file where to save the spreadsheet.Optional. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#dosequential","title":"DoSequential","text":"<p>Advances to the next row in the range. The range is either set by SetRange or it is the default range that includes all rows on the sheet except first row  which is considred to contain column names. When the end of the range is reached DoSequential stays at the last row in the range and returns 'false'.</p> <pre><code>Spreadsheet.DoSequential()\n</code></pre> <p>Returns:</p> <p>boolean: false if being called when active row is the last row or the spreadsheet is not attached, true otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getcell","title":"GetCell","text":"<p>Cell value by its coordinates. Refers to active cell value after DoSequential or DoRandom if params not set.</p> <pre><code>Spreadsheet.GetCell(columnId, rowId)\n</code></pre> <p>Parameters:</p> Name Type Description columnId number | string Column index or name. If not set active column is used.Optional, Default: \"0\". rowId number Row index. If not set ActiveRow is used.Optional, Default: \"0\". <p>Returns:</p> <p>string: Getter returns string with cell value and null in the case of error. Setter returns true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getcolumncount","title":"GetColumnCount","text":"<p>Gets columns count.</p> <pre><code>Spreadsheet.GetColumnCount()\n</code></pre> <p>Returns:</p> <p>number: Number of columns in the spreadsheet. -1 if no spreadsheet is attached.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getcolumnindexbyname","title":"GetColumnIndexByName","text":"<p>Gets column index by its name.</p> <pre><code>Spreadsheet.GetColumnIndexByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the column to find. <p>Returns:</p> <p>number: column index if found, or -1.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getcolumnname","title":"GetColumnName","text":"<p>Gets column name.</p> <pre><code>Spreadsheet.GetColumnName(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Index of a column in the spreadsheet. <p>Returns:</p> <p>string: Name of a column in the spreadsheet. Null in the case of error.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getcurrentrowindex","title":"GetCurrentRowIndex","text":"<p>Gets zero-based active row index.</p> <pre><code>Spreadsheet.GetCurrentRowIndex()\n</code></pre> <p>Returns:</p> <p>number: Active row index.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#geteof","title":"GetEOF","text":"<p>Gets EOF state.</p> <pre><code>Spreadsheet.GetEOF()\n</code></pre> <p>Returns:</p> <p>boolean: false if spreadsheet is attached and active row and column point to existing cell, true otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getrange","title":"GetRange","text":"<p>Cell range used in DoSequential and in DoRandom.</p> <pre><code>Spreadsheet.GetRange()\n</code></pre> <p>Returns:</p> <p>object: Spreadsheet state object: { startRow, endRow, startCol, endCol, activeRow, activeColumn }.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#getrowcount","title":"GetRowCount","text":"<p>Gets row count.</p> <pre><code>Spreadsheet.GetRowCount()\n</code></pre> <p>Returns:</p> <p>number: Number of rows in the spreadsheet including the row with column names. -1 if no spreadsheet is attached.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#setcell","title":"SetCell","text":"<p>Sets cell value by its coordinates. Sets active cell value after DoSequential or DoRandom if params not set.</p> <pre><code>Spreadsheet.SetCell(value, columnId, rowId)\n</code></pre> <p>Parameters:</p> Name Type Description value string Value to set. columnId number | string Column index or name. If not set active column is used.Optional, Default: \"0\". rowId number Row index. If not set active row is used.Optional, Default: \"0\". <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/Spreadsheet/#setrange","title":"SetRange","text":"<p>Cell range used in DoSequential and in DoRandom.</p> <pre><code>Spreadsheet.SetRange(startRow, endRow, startCol, endCol)\n</code></pre> <p>Parameters:</p> Name Type Description startRow number Start row index. endRow number Last row index. startCol number Start column index. If not set then it is the first column.Optional. endCol number Last column index. If not set then it is the last column.Optional. <p>Returns:</p> <p>boolean: true if successful, false otherwise.</p> <p></p>"},{"location":"Libraries/SyncfusionGrouping/","title":"SyncfusionGrouping","text":"<p>This behavior pattern implements standard behavior for Grouping control.</p> <p>UI element class: Syncfusion.Windows.Forms.Tools.GroupBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SyncfusionGroupingBehavior</p>"},{"location":"Libraries/SyncfusionGrouping/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the groupbar item"},{"location":"Libraries/SyncfusionGrouping/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SyncfusionGrouping/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the groupbar item</p> <pre><code>SeS('SomeSyncfusionGrouping').DoClickItem(captionIndex, clickType, ox, oy)\n</code></pre> <p>Parameters:</p> Name Type Description captionIndex string | number index or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". ox number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. oy number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/SyncfusionRibbon/","title":"SyncfusionRibbon","text":"<p>This behavior pattern implements standard behavior for Ribbon control.</p> <p>UI element class: Syncfusion.Windows.Forms.Tools.RibbonControlAdv</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: SyncfusionRibbonBehavior</p>"},{"location":"Libraries/SyncfusionRibbon/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab"},{"location":"Libraries/SyncfusionRibbon/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the ribbon item given by caption or tooltip text DoSelectTab Selects the tab by name."},{"location":"Libraries/SyncfusionRibbon/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/SyncfusionRibbon/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab, SetSelectedTab</p> <pre><code>value = SeS('SomeSyncfusionRibbon').GetSelectedTab()\n\nSeS('SomeSyncfusionRibbon').SetSelectedTab(/**string*/value)\n</code></pre>"},{"location":"Libraries/SyncfusionRibbon/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/SyncfusionRibbon/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the ribbon item given by caption or tooltip text</p> <pre><code>SeS('SomeSyncfusionRibbon').DoClickItem(captionOrTooltip)\n</code></pre> <p>Parameters:</p> Name Type Description captionOrTooltip string | number caption or tooltip text of the item to click. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/SyncfusionRibbon/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeSyncfusionRibbon').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TabStrip20/","title":"TabStrip20","text":"<p>TabStrip20 Control</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TabStrip20Behavior</p>"},{"location":"Libraries/TabStrip20/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/TabStrip20/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/TabStrip20/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TabStrip20/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeTabStrip20').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/TabStrip20/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TabStrip20/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeTabStrip20').DoSelectTab(nameCaptionIndex, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikDropDownPopupForm/","title":"TelerikDropDownPopupForm","text":"<p>Telerik DropDownPopupForm.</p> <p>UI element class: Telerik.WinControls.UI.DropDownPopupForm</p> <p>Extends ManagedButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikComboPopupBehavior</p>"},{"location":"Libraries/TelerikRadApplicationMenu/","title":"TelerikRadApplicationMenu","text":"<p>Telerik RadApplicationMenu.</p> <p>UI element class: Telerik.WinControls.UI.RadApplicationMenu</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikDropDownButtonBehavior</p>"},{"location":"Libraries/TelerikRadApplicationMenu/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/TelerikRadApplicationMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadApplicationMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeTelerikRadApplicationMenu').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadApplicationMenuDropDown/","title":"TelerikRadApplicationMenuDropDown","text":"<p>Telerik RadApplicationMenuDropDown.</p> <p>UI element class: Telerik.WinControls.UI.RadApplicationMenuDropDown</p> <p>Extends ManagedMenuPopupItem</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/TelerikRadButton/","title":"TelerikRadButton","text":"<p>Telerik RadButton.</p> <p>UI element class: Telerik.WinControls.UI.RadButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectButtonBehavior</p>"},{"location":"Libraries/TelerikRadCheckBox/","title":"TelerikRadCheckBox","text":"<p>Telerik RadCheckButton.</p> <p>UI element class: Telerik.WinControls.UI.RadCheckBox</p> <p>Extends ManagedCheckBox</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/TelerikRadCheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/TelerikRadCheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/TelerikRadCheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadCheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeTelerikRadCheckBox').GetChecked()\n\nSeS('SomeTelerikRadCheckBox').SetChecked(value)\n</code></pre>"},{"location":"Libraries/TelerikRadCheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadCheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeTelerikRadCheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadDateTimePicker/","title":"TelerikRadDateTimePicker","text":"<p>Telerik RadDateTimePicker.</p> <p>UI element class: Telerik.WinControls.UI.RadDateTimePicker</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikDateTimePickerBehavior</p>"},{"location":"Libraries/TelerikRadDateTimePicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/TelerikRadDateTimePicker/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/TelerikRadDateTimePicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadDateTimePicker/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeTelerikRadDateTimePicker').GetMonth()\n</code></pre>"},{"location":"Libraries/TelerikRadDateTimePicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadDateTimePicker/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeTelerikRadDateTimePicker').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadDateTimePicker/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeTelerikRadDateTimePicker').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadDateTimePicker/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeTelerikRadDateTimePicker').DoSelectDate(day, month, year)\n</code></pre> <p>Parameters:</p> Name Type Description day number Day to set month number Month to set year number Year to set <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/TelerikRadDropDownButton/","title":"TelerikRadDropDownButton","text":"<p>Telerik RadDropDownButton.</p> <p>UI element class: Telerik.WinControls.UI.RadDropDownButton</p> <p>Extends ManagedButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikDropDownButtonBehavior</p>"},{"location":"Libraries/TelerikRadDropDownButton/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/TelerikRadDropDownButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadDropDownButton/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeTelerikRadDropDownButton').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadDropDownButtonPopup/","title":"TelerikRadDropDownButtonPopup","text":"<p>Telerik RadDropDownButtonPopup.</p> <p>UI element class: Telerik.WinControls.UI.RadDropDownButtonPopup</p> <p>Extends ManagedMenuPopupItem</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikDropDownButtonBehavior</p>"},{"location":"Libraries/TelerikRadDropDownButtonPopup/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/TelerikRadDropDownButtonPopup/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadDropDownButtonPopup/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeTelerikRadDropDownButtonPopup').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadDropDownList/","title":"TelerikRadDropDownList","text":"<p>Telerik RadDropDownList.</p> <p>UI element class: Telerik.WinControls.UI.RadDropDownList</p> <p>Extends ManagedComboBox</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectSelectableBehavior</p>"},{"location":"Libraries/TelerikRadDropDownList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText"},{"location":"Libraries/TelerikRadDropDownList/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/TelerikRadDropDownList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadDropDownList/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeTelerikRadDropDownList').GetSelectedIndex()\n\nSeS('SomeTelerikRadDropDownList').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadDropDownList/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeTelerikRadDropDownList').GetSelectedText()\n\nSeS('SomeTelerikRadDropDownList').SetSelectedText()\n</code></pre>"},{"location":"Libraries/TelerikRadDropDownList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadDropDownList/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeTelerikRadDropDownList').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: TelerikSelectableBehavior</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/TelerikRadDropDownList/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/TelerikRadDropDownList/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/TelerikRadDropDownList/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadDropDownList/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeTelerikRadDropDownList').GetText()\n\nSeS('SomeTelerikRadDropDownList').SetText(value)\n</code></pre>"},{"location":"Libraries/TelerikRadDropDownList/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadDropDownList/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeTelerikRadDropDownList').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadDropDownMenu/","title":"TelerikRadDropDownMenu","text":"<p>Telerik RadDropDownMenu.</p> <p>UI element class: Telerik.WinControls.UI.RadDropDownMenu</p> <p>Extends ManagedMenuPopupItem</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/TelerikRadGridView/","title":"TelerikRadGridView","text":"<p>Telerik RadGridView.</p> <p>UI element class: Telerik.WinControls.UI.RadGridView</p> <p>Extends ManagedDataGridView</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikGridViewBehavior</p>"},{"location":"Libraries/TelerikRadGridView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedCell Selected Cell GetSelectedCell Text Text of the currently focused cell. GetText"},{"location":"Libraries/TelerikRadGridView/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid."},{"location":"Libraries/TelerikRadGridView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadGridView/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description row number Zero-based index if the row. col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetCell(/**number*/row, /**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadGridView/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadGridView/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description col number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetColumnName(/**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadGridView/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadGridView/#selectedcell","title":"SelectedCell","text":"<p>Selected Cell</p> <p>Type: object</p> <p>Accessors: GetSelectedCell</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetSelectedCell()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadGridView/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeTelerikRadGridView').GetText()\n</code></pre>"},{"location":"Libraries/TelerikRadGridView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadGridView/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeTelerikRadGridView').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadGridView/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeTelerikRadGridView').DoClickText(textOrRegexp, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/TelerikRadLabel/","title":"TelerikRadLabel","text":"<p>Telerik RadLabel.</p> <p>UI element class: Telerik.WinControls.UI.RadLabel</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikLabelBehavior</p>"},{"location":"Libraries/TelerikRadListControl/","title":"TelerikRadListControl","text":"<p>Telerik RadListControl.</p> <p>UI element class: Telerik.WinControls.UI.RadListControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectListBoxSelectableBehavior</p>"},{"location":"Libraries/TelerikRadListControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/TelerikRadListControl/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/TelerikRadListControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadListControl/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedIndex()\n\nSeS('SomeTelerikRadListControl').SetSelectedIndex(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedText()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/TelerikRadListControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadListControl/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeTelerikRadListControl').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: TelerikListControlBehavior</p>"},{"location":"Libraries/TelerikRadListControl/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedText Text of the selected item in a single string. GetSelectedText"},{"location":"Libraries/TelerikRadListControl/#action-summary_1","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/TelerikRadListControl/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadListControl/#itemindexbyname_1","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetItemIndexByName()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#itemnamebyindex_1","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetItemNameByIndex()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedindex_1","title":"SelectedIndex","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedindices_1","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedIndices()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadListControl/#selectedtext_1","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText</p> <pre><code>value = SeS('SomeTelerikRadListControl').GetSelectedText()\n</code></pre>"},{"location":"Libraries/TelerikRadListControl/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadListControl/#doaddselection_1","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doclearselection_1","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doremoveselection_1","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeTelerikRadListControl').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadListControl/#doselectitem_1","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeTelerikRadListControl').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadMaskedEditBox/","title":"TelerikRadMaskedEditBox","text":"<p>Telerik RadMaskedEditBox.</p> <p>UI element class: Telerik.WinControls.UI.RadMaskedEditBox</p> <p>Extends ManagedTextBox</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/TelerikRadMaskedEditBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/TelerikRadMaskedEditBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/TelerikRadMaskedEditBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadMaskedEditBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeTelerikRadMaskedEditBox').GetText()\n\nSeS('SomeTelerikRadMaskedEditBox').SetText(value)\n</code></pre>"},{"location":"Libraries/TelerikRadMaskedEditBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadMaskedEditBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeTelerikRadMaskedEditBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadMenu/","title":"TelerikRadMenu","text":"<p>Telerik RadMenu.</p> <p>UI element class: Telerik.WinControls.UI.RadMenu</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikDropDownButtonBehavior</p>"},{"location":"Libraries/TelerikRadMenu/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/TelerikRadMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeTelerikRadMenu').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: TelerikMenuBehavior</p>"},{"location":"Libraries/TelerikRadMenu/#action-summary_1","title":"Action Summary","text":"Action Description DoClickItem Perform Click on the navigation item"},{"location":"Libraries/TelerikRadMenu/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadMenu/#doclickitem","title":"DoClickItem","text":"<p>Perform Click on the navigation item</p> <pre><code>SeS('SomeTelerikRadMenu').DoClickItem(menuItemName)\n</code></pre> <p>Parameters:</p> Name Type Description menuItemName string Menuitem name to click at. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadProgressBar/","title":"TelerikRadProgressBar","text":"<p>Telerik RadProgressBar.</p> <p>UI element class: Telerik.WinControls.UI.RadProgressBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikProgressBarBehavior</p>"},{"location":"Libraries/TelerikRadProgressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue Value1 Gets or sets the value of the first progress line. GetValue1 SetValue1 Value2 Gets or sets the value of the second progress line. GetValue2 SetValue2"},{"location":"Libraries/TelerikRadProgressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadProgressBar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeTelerikRadProgressBar').GetMaxValue()\n\nSeS('SomeTelerikRadProgressBar').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadProgressBar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeTelerikRadProgressBar').GetMinValue()\n\nSeS('SomeTelerikRadProgressBar').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadProgressBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeTelerikRadProgressBar').GetValue()\n\nSeS('SomeTelerikRadProgressBar').SetValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadProgressBar/#value1","title":"Value1","text":"<p>Gets or sets the value of the first progress line. There could be two progress lines in the progress bar.</p> <p>Type: number</p> <p>Accessors: GetValue1, SetValue1</p> <pre><code>value = SeS('SomeTelerikRadProgressBar').GetValue1()\n\nSeS('SomeTelerikRadProgressBar').SetValue1(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadProgressBar/#value2","title":"Value2","text":"<p>Gets or sets the value of the second progress line. There could be two progress lines in the progress bar. The second one is visualized by making the fill primitive semi-transparent.</p> <p>Type: number</p> <p>Accessors: GetValue2, SetValue2</p> <pre><code>value = SeS('SomeTelerikRadProgressBar').GetValue2()\n\nSeS('SomeTelerikRadProgressBar').SetValue2(value)\n</code></pre>"},{"location":"Libraries/TelerikRadRadioButton/","title":"TelerikRadRadioButton","text":"<p>Telerik RadRadioButton.</p> <p>UI element class: Telerik.WinControls.UI.RadRadioButton</p> <p>Extends ManagedRadioButton</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/TelerikRadRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/TelerikRadRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/TelerikRadRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeTelerikRadRadioButton').GetChecked()\n\nSeS('SomeTelerikRadRadioButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/TelerikRadRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeTelerikRadRadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: TelerikToggleBehavior</p>"},{"location":"Libraries/TelerikRadRadioButton/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/TelerikRadRadioButton/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadRadioButton/#checked_1","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeTelerikRadRadioButton').GetChecked()\n\nSeS('SomeTelerikRadRadioButton').SetChecked()\n</code></pre>"},{"location":"Libraries/TelerikRadRibbonBar/","title":"TelerikRadRibbonBar","text":"<p>Telerik RadRibbonBar.</p> <p>UI element class: Telerik.WinControls.UI.RadRibbonBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikRadRibbonBarBehavior</p>"},{"location":"Libraries/TelerikRadRibbonBar/#action-summary","title":"Action Summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon."},{"location":"Libraries/TelerikRadRibbonBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadRibbonBar/#doclickapplicationbutton","title":"DoClickApplicationButton","text":"<p>Clicks an application button on the ribbon.</p> <pre><code>SeS('SomeTelerikRadRibbonBar').DoClickApplicationButton(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of the application button to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadRibbonBar/#doclickitem","title":"DoClickItem","text":"<p>Clicks on an item on the ribbon.</p> <pre><code>SeS('SomeTelerikRadRibbonBar').DoClickItem(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadRibbonBar/#doclicktab","title":"DoClickTab","text":"<p>Clicks on a tab in the ribbon.</p> <pre><code>SeS('SomeTelerikRadRibbonBar').DoClickTab(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadSpinEditor/","title":"TelerikRadSpinEditor","text":"<p>Telerik RadSpinEditor.</p> <p>UI element class: Telerik.WinControls.UI.RadSpinEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikSpinEditBehavior</p>"},{"location":"Libraries/TelerikRadSpinEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Increment Number value that means how much is added or removed when user clicks up or down. GetIncrement SetIncrement MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText Value Value of the object. GetValue SetValue"},{"location":"Libraries/TelerikRadSpinEditor/#action-summary","title":"Action Summary","text":"Action Description DoDown Decrements the value of an object DoSetText Sets text value of this object. DoUp Increments the Value of an object."},{"location":"Libraries/TelerikRadSpinEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadSpinEditor/#increment","title":"Increment","text":"<p>Number value that means how much is added or removed when user clicks up or down.</p> <p>Type: number</p> <p>Accessors: GetIncrement, SetIncrement</p> <pre><code>value = SeS('SomeTelerikRadSpinEditor').GetIncrement()\n\nSeS('SomeTelerikRadSpinEditor').SetIncrement(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadSpinEditor/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeTelerikRadSpinEditor').GetMaxValue()\n\nSeS('SomeTelerikRadSpinEditor').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadSpinEditor/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeTelerikRadSpinEditor').GetMinValue()\n\nSeS('SomeTelerikRadSpinEditor').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadSpinEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeTelerikRadSpinEditor').GetText()\n\nSeS('SomeTelerikRadSpinEditor').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadSpinEditor/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeTelerikRadSpinEditor').GetValue()\n\nSeS('SomeTelerikRadSpinEditor').SetValue(value)\n</code></pre>"},{"location":"Libraries/TelerikRadSpinEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadSpinEditor/#dodown","title":"DoDown","text":"<p>Decrements the value of an object</p> <pre><code>SeS('SomeTelerikRadSpinEditor').DoDown()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadSpinEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeTelerikRadSpinEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadSpinEditor/#doup","title":"DoUp","text":"<p>Increments the Value of an object.</p> <pre><code>SeS('SomeTelerikRadSpinEditor').DoUp()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadTextBox/","title":"TelerikRadTextBox","text":"<p>Telerik RadTextBox.</p> <p>UI element class: Telerik.WinControls.UI.RadTextBox</p> <p>Extends ManagedTextBox</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/TelerikRadTextBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/TelerikRadTextBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/TelerikRadTextBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadTextBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeTelerikRadTextBox').GetText()\n\nSeS('SomeTelerikRadTextBox').SetText(value)\n</code></pre>"},{"location":"Libraries/TelerikRadTextBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadTextBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeTelerikRadTextBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadTitleBar/","title":"TelerikRadTitleBar","text":"<p>Telerik RadTitleBar.</p> <p>UI element class: Telerik.WinControls.UI.RadTitleBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikLabelBehavior</p>"},{"location":"Libraries/TelerikRadToggleButton/","title":"TelerikRadToggleButton","text":"<p>Telerik RadToggleButton.</p> <p>UI element class: Telerik.WinControls.UI.RadToggleButton</p> <p>Extends ManagedCheckBox</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/TelerikRadToggleButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/TelerikRadToggleButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/TelerikRadToggleButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadToggleButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeTelerikRadToggleButton').GetChecked()\n\nSeS('SomeTelerikRadToggleButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/TelerikRadToggleButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadToggleButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeTelerikRadToggleButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: TelerikToggleBehavior</p>"},{"location":"Libraries/TelerikRadToggleButton/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/TelerikRadToggleButton/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadToggleButton/#checked_1","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeTelerikRadToggleButton').GetChecked()\n\nSeS('SomeTelerikRadToggleButton').SetChecked()\n</code></pre>"},{"location":"Libraries/TelerikRadToolStrip/","title":"TelerikRadToolStrip","text":"<p>Telerik RadToolStrip.</p> <p>UI element class: Telerik.WinControls.UI.RadToolStrip</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikRadToolStripBehavior</p>"},{"location":"Libraries/TelerikRadToolStrip/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Clicks on an item on the ribbon."},{"location":"Libraries/TelerikRadToolStrip/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadToolStrip/#doclickitem","title":"DoClickItem","text":"<p>Clicks on an item on the ribbon.</p> <pre><code>SeS('SomeTelerikRadToolStrip').DoClickItem(caption, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of an item to click. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/TelerikRadTrackBar/","title":"TelerikRadTrackBar","text":"<p>Telerik RadTrackBar (slider).</p> <p>UI element class: Telerik.WinControls.UI.RadTrackBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikTrackBarBehavior</p>"},{"location":"Libraries/TelerikRadTrackBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Position Gets or sets the position of the track bar. GetPosition SetPosition"},{"location":"Libraries/TelerikRadTrackBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadTrackBar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeTelerikRadTrackBar').GetMaxValue()\n\nSeS('SomeTelerikRadTrackBar').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTrackBar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeTelerikRadTrackBar').GetMinValue()\n\nSeS('SomeTelerikRadTrackBar').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTrackBar/#position","title":"Position","text":"<p>Gets or sets the position of the track bar.</p> <p>Type: number</p> <p>Accessors: GetPosition, SetPosition</p> <pre><code>value = SeS('SomeTelerikRadTrackBar').GetPosition()\n\nSeS('SomeTelerikRadTrackBar').SetPosition(value)\n</code></pre>"},{"location":"Libraries/TelerikRadTreeView/","title":"TelerikRadTreeView","text":"<p>Telerik RadTreeView.</p> <p>UI element class: Telerik.WinControls.UI.RadTreeView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: TelerikRadTreeViewBehavior</p>"},{"location":"Libraries/TelerikRadTreeView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected State Selected state of the selected node or a node specified by the input parameters. GetState Text ;-combined text of all selected nodes. GetText"},{"location":"Libraries/TelerikRadTreeView/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Checks or unchecks specified element."},{"location":"Libraries/TelerikRadTreeView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/TelerikRadTreeView/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetChecked(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetSelected(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#state","title":"State","text":"<p>Selected state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path String Path of the node to select. separator String Separator used in the path. pathType String Path type. Can be one of 'name', 'index' or 'id'. <p>Type: </p> <p>Accessors: GetState</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetState()\n</code></pre> <p></p>"},{"location":"Libraries/TelerikRadTreeView/#text","title":"Text","text":"<p>;-combined text of all selected nodes.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeTelerikRadTreeView').GetText()\n</code></pre>"},{"location":"Libraries/TelerikRadTreeView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TelerikRadTreeView/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeTelerikRadTreeView').DoClickNode(path, separator, pathType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadTreeView/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeTelerikRadTreeView').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadTreeView/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeTelerikRadTreeView').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/TelerikRadTreeView/#dosetcheck","title":"DoSetCheck","text":"<p>Checks or unchecks specified element.</p> <pre><code>SeS('SomeTelerikRadTreeView').DoSetCheck(bcheck, path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state. path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Tester/","title":"Tester","text":"<p>Tester object. Use it to perform assertions during test playback and output relevant information to the report. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/Tester/#property-summary","title":"Property Summary","text":"Property Description Fail Test status, test failed. Info Test status, test is neither passed nor failed. Pass Test status, test passed. Unresolved Test status, test status is unresolved, test terminated unexpectedly."},{"location":"Libraries/Tester/#action-summary","title":"Action Summary","text":"Action Description AddImageToReport Adds image to the report. Assert Checks if condition is 'true' and saves corresponding Report entry. AssertContains Checks if <code>str</code> contains <code>substr</code> somewhere and writes corresponding message to the Report. AssertEndsWith Checks that <code>str</code> has <code>substr</code> at the end and writes corresponding message to the Report. AssertEqual Checks if obj1 equals to obj2 and writes corresponding message to the Report. AssertFalse Checks if <code>val</code> is <code>false</code> and writes corresponding message to the Report. AssertGreater Checks if n1 is greater than n2 and writes corresponding message to the Report. AssertGreaterOrEqual Checks if n1 is greater or equal than n2 and writes corresponding message to the Report. AssertImage Checks if 'img1' equals to image stored at 'path' and writes corresponding message to the Report. AssertLess Checks if n1 is less than n2 and writes corresponding message to the Report. AssertLessOrEqual Checks if n1 is less or equal from n2 and saves corresponding Report entry. AssertNotContains Checks that <code>str</code> does not contain <code>substr</code> anywhere and writes corresponding message to the Report. AssertNotEqual Checks if obj1 differs from obj2 and writes corresponding message to the Report. AssertNotNull Checks if <code>val</code> is not <code>null</code> and writes corresponding message to the Report. AssertNotSet Checks if <code>val</code> is not set (i.e. AssertNull Checks if <code>val</code> is <code>null</code> and writes corresponding message to the Report. AssertSet Checks if <code>val</code> is set (i.e. AssertStartsWith Checks if <code>str</code> begins with <code>substr</code> and writes corresponding message to the Report. BeginTest Marks beginning of a test with a given name. BlockTest Stops test execution and exits with Blocked status. CaptureDesktopImage Captures screenshot of the desktop and adds it to the report. CaptureObjectImage Captures screenshot of an object and adds it to the report. CaptureWindowImage Captures screenshot of an application window matched by title and class and adds it to the report. DumpCmdArgsJson Dump node.json with all arguments. EndTest Marks end of a currently executed test. ExpectFailure Set Tester to expect a failed assertion with given message or data. ExpectFailureDone If <code>messageOrData</code> is set, checks that given assertion failed at least once. FailTest Stops test execution and sets it's status to failed. GetEntryTestName Retrieves the name of the test that was run by the user. GetParam Read parameter field passed into the Test function by field name. GetReportAttribute Gets report attribute previously set by PushReportAttribute or SetReportAttribute. GetTestName Returns name of the running test. GetTestStatus Gets status of currently executed test. IgnoreStatus <p>In IgnoreStatus mode the assertion status is always treated as \"Info\". Message Writes a message to the report. MessageBox Shows message box to user. MessageBoxPrompt Shows message box with question to the user and checks if user presses \"Yes\" or \"No\". PopReportAttribute Resets an attribute to its previous value. PushReportAttribute <p>Maintains \"stacked\" attributes. ResetReportAttribute Removes report attribute previously set by SetReportAttribute. SetReportAttribute Set persistent attribute. SoftAssert Is identical to Tester.Assert. SoftAssertAll Fail test if there were any previous failures. SoftAssertContains Checks if <code>str</code> contains <code>substr</code> somewhere and writes corresponding message to the Report. SoftAssertEndsWith Checks that <code>str</code> has <code>substr</code> at the end and writes corresponding message to the Report. SoftAssertEqual Checks if obj1 equals to obj2 and writes corresponding message to the Report. SoftAssertFalse Checks if <code>val</code> is <code>false</code> and writes corresponding message to the Report. SoftAssertGreater Checks if n1 is greater than n2 and writes corresponding message to the Report. SoftAssertGreaterOrEqual Checks if n1 is greater or equal than n2 and writes corresponding message to the Report. SoftAssertImage Checks if 'img1' equals to image stored at 'path' and writes corresponding message to the Report. SoftAssertLess Checks if n1 is less than n2 and writes corresponding message to the Report. SoftAssertLessOrEqual Checks if n1 is less or equal from n2 and saves corresponding Report entry. SoftAssertNotContains Checks that <code>str</code> does not contain <code>substr</code> anywhere and writes corresponding message to the Report. SoftAssertNotEqual Checks if obj1 differs from obj2 and writes corresponding message to the Report. SoftAssertNotNull Checks if <code>val</code> is not <code>null</code> and writes corresponding message to the Report. SoftAssertNotSet Checks if <code>val</code> is not set (i.e. SoftAssertNull Checks if <code>val</code> is <code>null</code> and writes corresponding message to the Report. SoftAssertSet Checks if <code>val</code> is set (i.e. SoftAssertStartsWith Checks if <code>str</code> begins with <code>substr</code> and writes corresponding message to the Report. SuppressReport In SuppressReport mode all assertions are ignored."},{"location":"Libraries/Tester/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Tester/#fail","title":"Fail","text":"<p>Test status, test failed. Constant, equal to 0.</p> <p>Type: number</p> <p></p>"},{"location":"Libraries/Tester/#info","title":"Info","text":"<p>Test status, test is neither passed nor failed. Constant, equal to -2.</p> <p>Type: number</p> <p></p>"},{"location":"Libraries/Tester/#pass","title":"Pass","text":"<p>Test status, test passed. Constant, equal to 1.</p> <p>Type: number</p> <p></p>"},{"location":"Libraries/Tester/#unresolved","title":"Unresolved","text":"<p>Test status, test status is unresolved, test terminated unexpectedly. Constant, equal to -1.</p> <p>Type: number</p>"},{"location":"Libraries/Tester/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Tester/#addimagetoreport","title":"AddImageToReport","text":"<p>Adds image to the report.</p> <pre><code>Tester.AddImageToReport(path, caption)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path to an image caption string Caption for the entry added to the report <p></p> <p> </p>"},{"location":"Libraries/Tester/#assert","title":"Assert","text":"<p>Checks if condition is 'true' and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.Assert(message, condition, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertcontains","title":"AssertContains","text":"<p>Checks if <code>str</code> contains <code>substr</code> somewhere and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertContains(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertendswith","title":"AssertEndsWith","text":"<p>Checks that <code>str</code> has <code>substr</code> at the end and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertEndsWith(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertequal","title":"AssertEqual","text":"<p>Checks if obj1 equals to obj2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertEqual(message, obj1, obj2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. obj1 object First value to compare. It can be a number, a string, a boolean value, an array or an object with fields. obj2 object Second value to compare. It can be a number, a string, a boolean value, an array or an object with fields. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertfalse","title":"AssertFalse","text":"<p>Checks if <code>val</code> is <code>false</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertFalse(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertgreater","title":"AssertGreater","text":"<p>Checks if n1 is greater than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertGreater(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertgreaterorequal","title":"AssertGreaterOrEqual","text":"<p>Checks if n1 is greater or equal than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertGreaterOrEqual(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertimage","title":"AssertImage","text":"<p>Checks if 'img1' equals to image stored at 'path' and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertImage(message, img1, path, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1<sup>st</sup> image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertless","title":"AssertLess","text":"<p>Checks if n1 is less than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertLess(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertlessorequal","title":"AssertLessOrEqual","text":"<p>Checks if n1 is less or equal from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertLessOrEqual(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 object First numeric value to compare. n2 object Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertnotcontains","title":"AssertNotContains","text":"<p>Checks that <code>str</code> does not contain <code>substr</code> anywhere and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertNotContains(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertnotequal","title":"AssertNotEqual","text":"<p>Checks if obj1 differs from obj2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertNotEqual(message, obj1, obj2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. obj1 object First value to compare. It can be a number, a string, a boolean value, an array or an object with fields. obj2 object Second value to compare. It can be a number, a string, a boolean value, an array or an object with fields. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertnotnull","title":"AssertNotNull","text":"<p>Checks if <code>val</code> is not <code>null</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertNotNull(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertnotset","title":"AssertNotSet","text":"<p>Checks if <code>val</code> is not set (i.e. it is null, 0, false or \"\") and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertNotSet(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertnull","title":"AssertNull","text":"<p>Checks if <code>val</code> is <code>null</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertNull(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertset","title":"AssertSet","text":"<p>Checks if <code>val</code> is set (i.e. not false, not 0, not null, not \"\") and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertSet(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#assertstartswith","title":"AssertStartsWith","text":"<p>Checks if <code>str</code> begins with <code>substr</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.AssertStartsWith(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#begintest","title":"BeginTest","text":"<p>Marks beginning of a test with a given name.</p> <pre><code>Tester.BeginTest(name, path, optionalParams, data)\n</code></pre> <p>Parameters:</p> Name Type Description name string Test name path string Path to the test, that is executed. This string will be shown as a comment.Optional. optionalParams object Params to pass into Test(...) function.Optional. data array Additional info to put into report (array of SeSReportText())Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#blocktest","title":"BlockTest","text":"<p>Stops test execution and exits with Blocked status.</p> <pre><code>Tester.BlockTest(message)\n</code></pre> <p>Parameters:</p> Name Type Description message string Reason why the test is blocked.Optional, Default: \"Test execution blocked\". <p></p> <p> </p>"},{"location":"Libraries/Tester/#capturedesktopimage","title":"CaptureDesktopImage","text":"<p>Captures screenshot of the desktop and adds it to the report.</p> <pre><code>Tester.CaptureDesktopImage(caption)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Image title for the report. <p></p> <p> </p>"},{"location":"Libraries/Tester/#captureobjectimage","title":"CaptureObjectImage","text":"<p>Captures screenshot of an object and adds it to the report.</p> <pre><code>Tester.CaptureObjectImage(caption, objId)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Image title for the report. objId objectId Id of an object or SeSObject instance. <p></p> <p> </p>"},{"location":"Libraries/Tester/#capturewindowimage","title":"CaptureWindowImage","text":"<p>Captures screenshot of an application window matched by title and class and adds it to the report.</p> <pre><code>Tester.CaptureWindowImage(caption, windowTitle, windowClass, bringToFront)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Image title for the report. windowTitle string String or regular expression to match window title. windowClass string String or regular expression to match window class.Optional, Default: \"regex:.*\". bringToFront boolean Set to 'false' to not restore the window before making the image.Optional, Default: \"true\". <p></p> <p> </p>"},{"location":"Libraries/Tester/#dumpcmdargsjson","title":"DumpCmdArgsJson","text":"<p>Dump node.json with all arguments.</p> <pre><code>Tester.DumpCmdArgsJson(optNodeJsonPath, mkPackageJson)\n</code></pre> <p>Parameters:</p> Name Type Description optNodeJsonPath string node.json pathOptional. mkPackageJson string Generate package.json for the testOptional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#endtest","title":"EndTest","text":"<p>Marks end of a currently executed test. Calculates test results and performs finalization of test execution.</p> <pre><code>Tester.EndTest()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Tester/#expectfailure","title":"ExpectFailure","text":"<p>Set Tester to expect a failed assertion with given message or data. When  such error happens, it is reported as an expected Passed assertion. Requires Rapise 8.0+.</p> <p>When null is passed, all expectations are reset.</p> <pre><code>Tester.ExpectFailure(messageOrData)\n</code></pre> <p>Parameters:</p> Name Type Description messageOrData string Text to match against assertion message &amp; data. <p></p> <p> </p>"},{"location":"Libraries/Tester/#expectfailuredone","title":"ExpectFailureDone","text":"<p>If <code>messageOrData</code> is set, checks that given assertion failed at least once. If <code>messageOrData</code> is null or empty, checks that all expected failed assertions failed. Requires Rapise 8.0+.</p> <pre><code>Tester.ExpectFailureDone(messageOrData)\n</code></pre> <p>Parameters:</p> Name Type Description messageOrData string Text to match against assertion message &amp; data.Optional, Default: \"null\". <p></p> <p> </p>"},{"location":"Libraries/Tester/#failtest","title":"FailTest","text":"<p>Stops test execution and sets it's status to failed.</p> <pre><code>Tester.FailTest(message, internal)\n</code></pre> <p>Parameters:</p> Name Type Description message string Failure description.Optional, Default: \"Test stopped on error\". internal For internal useOptional, Default: \"null\". <p></p> <p> </p>"},{"location":"Libraries/Tester/#getentrytestname","title":"GetEntryTestName","text":"<p>Retrieves the name of the test that was run by the user. Usually the  value is the same as Tester.GetTestName. But in cases where one test calls another test, Tester.GetEntryTestName will remain equal to to the original test case, and GetTestName will change depending on the  current test case being executed.</p> <pre><code>Tester.GetEntryTestName()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Tester/#getparam","title":"GetParam","text":"<p>Read parameter field passed into the Test function by field name.</p> <pre><code>Tester.GetParam(paramName, defaultValue)\n</code></pre> <p>Parameters:</p> Name Type Description paramName string Parameter name defaultValue string Default value <p></p> <p> </p>"},{"location":"Libraries/Tester/#getreportattribute","title":"GetReportAttribute","text":"<p>Gets report attribute previously set by PushReportAttribute or SetReportAttribute.</p> <pre><code>Tester.GetReportAttribute(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Attribute name. <p></p> <p> </p>"},{"location":"Libraries/Tester/#gettestname","title":"GetTestName","text":"<p>Returns name of the running test.</p> <pre><code>Tester.GetTestName()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Tester/#getteststatus","title":"GetTestStatus","text":"<p>Gets status of currently executed test.</p> <pre><code>Tester.GetTestStatus()\n</code></pre> <p>Returns:</p> <p>One of:      Tester.Info - test is neither passed nor failed;     1 - Tester.Pass - test passed;     0 - Tester.Fail - test failed; -1 - Tester.Unresolved - test status is unresolved, test terminated unexpectedly.</p> <p></p> <p> </p>"},{"location":"Libraries/Tester/#ignorestatus","title":"IgnoreStatus","text":"<p>In IgnoreStatus mode the assertion status is always treated as \"Info\". Real status is written to \"realStatus\" attribute in this case and used just for information purposes (i.e. it does not affect final test status).</p> <p>This function is used when the test case needs to set test status manually.</p> <pre>\n  Tester.IgnoreStatus(true);\n  Tester.Assert(\"Ignored Assertion\", false); // This assertion is failed. But its status is ignored.\n  Tester.IgnoreStatus(false);\n  Tester.Assert(\"Test passed\", true);\n  // The overall test is passed because failed assertion is ignored.\n</pre> <pre><code>Tester.IgnoreStatus(ignore)\n</code></pre> <p>Parameters:</p> Name Type Description ignore boolean Set to 'true' to report all messages but ignore the status (Pass/Fail) <p></p> <p> </p>"},{"location":"Libraries/Tester/#message","title":"Message","text":"<p>Writes a message to the report. Use for logging purposes. Message may contain some additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.Message(message, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Text to write into the report. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#messagebox","title":"MessageBox","text":"<p>Shows message box to user. Use it for verbose and manual testing.</p> <pre><code>Tester.MessageBox(message)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to display. <p></p> <p> </p>"},{"location":"Libraries/Tester/#messageboxprompt","title":"MessageBoxPrompt","text":"<p>Shows message box with question to the user and checks if user presses \"Yes\" or \"No\".   \"Yes\" =&gt; \"Pass\" goes to the report with this message.   \"No\" =&gt; \"Fail\" is reported.</p> <pre><code>Tester.MessageBoxPrompt(question)\n</code></pre> <p>Parameters:</p> Name Type Description question string Question to display. <p></p> <p> </p>"},{"location":"Libraries/Tester/#popreportattribute","title":"PopReportAttribute","text":"<p>Resets an attribute to its previous value. See PushReportAttribute for more information.</p> <pre><code>Tester.PopReportAttribute(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Attribute name to recall from stack. <p>Returns:</p> <p>string: Previous value. Null if no such stacked attribute found.</p> <p></p> <p> </p>"},{"location":"Libraries/Tester/#pushreportattribute","title":"PushReportAttribute","text":"<p>Maintains \"stacked\" attributes. Useful for nesting. </p> <p></p> <p>Example:</p> <p></p> <p>Main test sets scenario=Main. Then it calls another scenario (scenario Login) and then continues its own test actions.</p> <p></p> <p>We want all assertions to be attributed with current scenario name.</p> <pre>\n function Main()\n {\n     Tester.PushReportAttribute(\"scenario\", \"Main\");\n     Login();\n     ...\n     Tester.Assert(\"Main test passed\", mainStatus); // Saved with scenario=Main\n }\n\n function Login()\n {\n     Tester.PushReportAttribute(\"scenario\", \"Login\");\n     ... // Do login logic\n     Tester.Assert(\"Login Result\", loginStatus);\n     Tester.PopReportAttribute(\"scenario\"); // Set scenario value back to caller\n }\n</pre> <pre><code>Tester.PushReportAttribute(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string Attribute name to recall from stack. value string New attribute value. <p></p> <p> </p>"},{"location":"Libraries/Tester/#resetreportattribute","title":"ResetReportAttribute","text":"<p>Removes report attribute previously set by SetReportAttribute.</p> <pre><code>Tester.ResetReportAttribute(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Attribute name. <p></p> <p> </p>"},{"location":"Libraries/Tester/#setreportattribute","title":"SetReportAttribute","text":"<p>Set persistent attribute. It will be set for all subsequent report items (assertions, tests, requirements, and so on). It may be changed by calling the ResetReportAttribute function.</p> <pre><code>Tester.SetReportAttribute(name, value)\n</code></pre> <p>Parameters:</p> Name Type Description name string Attribute name to set. value string New attribute value. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassert","title":"SoftAssert","text":"<p>Is identical to Tester.Assert. But when an assertion fails, don't stop execution and just record the failure. Later you may call <code>Tester.SoftAssertAll(..)</code> that will stop execution if at least one assertion failed.</p> <pre><code>Tester.SoftAssert(message, condition, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. condition boolean If 'true' - assertion is considered passed. data SeSReportLink | SeSReportText | SeSReportImage | object[] | string Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertall","title":"SoftAssertAll","text":"<p>Fail test if there were any previous failures. This method is designed to be used after one or many calls to <code>Tester.SoftAssert(...)</code>.</p> <pre><code>Tester.SoftAssertAll(message)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertcontains","title":"SoftAssertContains","text":"<p>Checks if <code>str</code> contains <code>substr</code> somewhere and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertContains(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertendswith","title":"SoftAssertEndsWith","text":"<p>Checks that <code>str</code> has <code>substr</code> at the end and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertEndsWith(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertequal","title":"SoftAssertEqual","text":"<p>Checks if obj1 equals to obj2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertEqual(message, obj1, obj2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. obj1 object First value to compare. It can be a number, a string, a boolean value, an array or an object with fields. obj2 object Second value to compare. It can be a number, a string, a boolean value, an array or an object with fields. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertfalse","title":"SoftAssertFalse","text":"<p>Checks if <code>val</code> is <code>false</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertFalse(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertgreater","title":"SoftAssertGreater","text":"<p>Checks if n1 is greater than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertGreater(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertgreaterorequal","title":"SoftAssertGreaterOrEqual","text":"<p>Checks if n1 is greater or equal than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertGreaterOrEqual(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertimage","title":"SoftAssertImage","text":"<p>Checks if 'img1' equals to image stored at 'path' and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertImage(message, img1, path, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. img1 object ImageWrapper object (1<sup>st</sup> image to compare). path string Path to the second image to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertless","title":"SoftAssertLess","text":"<p>Checks if n1 is less than n2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertLess(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 number First numeric value to compare. n2 number Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertlessorequal","title":"SoftAssertLessOrEqual","text":"<p>Checks if n1 is less or equal from n2 and saves corresponding Report entry. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertLessOrEqual(message, n1, n2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. n1 object First numeric value to compare. n2 object Second numeric value to compare. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertnotcontains","title":"SoftAssertNotContains","text":"<p>Checks that <code>str</code> does not contain <code>substr</code> anywhere and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertNotContains(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertnotequal","title":"SoftAssertNotEqual","text":"<p>Checks if obj1 differs from obj2 and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertNotEqual(message, obj1, obj2, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. obj1 object First value to compare. It can be a number, a string, a boolean value, an array or an object with fields. obj2 object Second value to compare. It can be a number, a string, a boolean value, an array or an object with fields. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertnotnull","title":"SoftAssertNotNull","text":"<p>Checks if <code>val</code> is not <code>null</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertNotNull(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertnotset","title":"SoftAssertNotSet","text":"<p>Checks if <code>val</code> is not set (i.e. it is null, 0, false or \"\") and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertNotSet(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertnull","title":"SoftAssertNull","text":"<p>Checks if <code>val</code> is <code>null</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertNull(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertset","title":"SoftAssertSet","text":"<p>Checks if <code>val</code> is set (i.e. not false, not 0, not null, not \"\") and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertSet(message, val, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. val object Value to check. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#softassertstartswith","title":"SoftAssertStartsWith","text":"<p>Checks if <code>str</code> begins with <code>substr</code> and writes corresponding message to the Report. Assertion is an atomic piece of verification. Assertion may contain some  additional data (links, images, comments) set via 'data' parameter.</p> <pre><code>Tester.SoftAssertStartsWith(message, str, substr, data, tags)\n</code></pre> <p>Parameters:</p> Name Type Description message string Message to put in the report. str string String to search in. substr string Substring to find. data SeSReportLink | SeSReportText | SeSReportImage | Object[] Additional information to put in the report. If 'string' is passed, then data is considered as additional comment attribute. Or 'array' may be passed. Each entry in the array should be one of: SeSReportLink, SeSReportImage, SeSReportText, SeSReportFile.Optional. tags object Hash of attributes to set for this particular log entry.Optional. <p></p> <p> </p>"},{"location":"Libraries/Tester/#suppressreport","title":"SuppressReport","text":"<p>In SuppressReport mode all assertions are ignored. That means no lines are added to report and all statuses are treated as \"Info\". This mode is like IgnoreStatus mode but no status messages are added to report.</p> <pre><code>  Tester.SuppressReport(true);\n  Tester.Assert(\"No assertion\", false); // Status of this assertion will be ignored and no record will be added to report\n  SeS('Obj1').DoClick(); // No line will be added to report and operation status will be ignored\n  Tester.SuppressReport(false);\n</code></pre> <pre><code>Tester.SuppressReport(suppress)\n</code></pre> <p>Parameters:</p> Name Type Description suppress boolean Set to 'True' to suppress adding anything into the report. <p></p>"},{"location":"Libraries/Text/","title":"Text","text":"<p>Text object. Use it to perform text manipulations.</p>"},{"location":"Libraries/Text/#action-summary","title":"Action Summary","text":"Action Description Base64Decode Decodes base64 string. Base64Encode Converts string to base64 format. CharAt Returns a new string consisting of the single UTF-16 code unit located at the specified <code>index</code> into the <code>str</code>. CharCodeAt Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given <code>index</code> into the <code>str</code>. Concat Append <code>str2</code> to <code>str1</code>. Contains Perform a case-sensitive search to determine whether <code>substr</code> may be found within <code>str</code>, returning <code>true</code> or <code>false</code> as appropriate. EndsWith Determines whether a <code>str</code> ends with the characters of <code>substr</code>. FileContains Perform a case-sensitive search (find in file) to determine whether <code>substr</code> may be found within a text file represented by <code>filePath</code>, returning <code>true</code> or <code>false</code> as appropriate. FirstIndex The first index at which a given <code>substr</code> can be found in the <code>str</code>, or -1 if it is not present. Format Format given <code>formatStr</code> template string by expanding properties of <code>nameValueJsonObj</code> as {param1}, {param2} etc template params. IncrementDate Increments a date/time string with a given offset. Join Concatenate all of the elements in <code>arr</code> array (or an array-like object), separated by commas or a specified <code>separator</code> string. LastIndex The last index at which a given <code>substr</code> can be found in the <code>str</code>, or -1 if it is not present. Limit Limit <code>str</code> to be not more than <code>maxLength</code> chars. PadEnd Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. PadStart Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. Repeat Returns a new string which contains the specified number of copies of <code>str</code>, concatenated together. ReplaceAll Replace all occurences of <code>oldValue</code> in <code>str</code> with <code>newValue</code> . ReplaceFirst Replace first occurence of <code>oldValue</code> in <code>str</code> with <code>newValue</code> . Split Divides <code>str</code> into an ordered list of substrings, puts these substrings into an array, and returns the array. SplitAt Get <code>atInd</code>th item after split. SplitCount Get number of parts that will occur after splitting given <code>str</code> with given <code>separator</code>. StartsWith Determines whether <code>str</code> begins with the characters of <code>substr</code>. Substr Extract <code>length</code> characters from a <code>str</code>, counting from the <code>start</code> index. Substring Text.Substring() extracts characters from <code>indexStart</code> up to but not including <code>indexEnd</code>. ToLowercase Returns <code>str</code> value converted to lowercase. ToString Convert anything to a string. ToUppercase Returns the <code>str</code> value converted to uppercase. Trim Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimEnd Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string. TrimStart Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string."},{"location":"Libraries/Text/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Text/#base64decode","title":"Base64Decode","text":"<p>Decodes base64 string. Requires Rapise 8.1+.</p> <pre><code>Text.Base64Decode(base64EncodedData)\n</code></pre> <p>Parameters:</p> Name Type Description base64EncodedData string Base64 encoded string. <p></p> <p> </p>"},{"location":"Libraries/Text/#base64encode","title":"Base64Encode","text":"<p>Converts string to base64 format. Requires Rapise 8.1+.</p> <pre><code>Text.Base64Encode(plainText)\n</code></pre> <p>Parameters:</p> Name Type Description plainText string Input string to encode. <p></p> <p> </p>"},{"location":"Libraries/Text/#charat","title":"CharAt","text":"<p>Returns a new string consisting of the single UTF-16 code unit located at the specified <code>index</code> into the <code>str</code>.</p> <pre><code>Text.CharAt(str, index)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to extract from. index number Character position. <p>Returns:</p> <p>string: Char at <code>index</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#charcodeat","title":"CharCodeAt","text":"<p>Returns an integer between 0 and 65535 representing the UTF-16 code unit at the given <code>index</code> into the <code>str</code>.</p> <pre><code>Text.CharCodeAt(str, index)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. index number Character position. <p>Returns:</p> <p>number: Char code at <code>index</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#concat","title":"Concat","text":"<p>Append <code>str2</code> to <code>str1</code>.</p> <pre><code>Text.Concat(str1, str2)\n</code></pre> <p>Parameters:</p> Name Type Description str1 string 1<sup>st</sup> part. str2 string 2<sup>nd</sup> part (may be array). <p>Returns:</p> <p>string: Combined string</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#contains","title":"Contains","text":"<p>Perform a case-sensitive search to determine whether <code>substr</code> may be found within <code>str</code>, returning <code>true</code> or <code>false</code> as appropriate.</p> <pre><code>Text.Contains(str, substr)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. substr string Substring to find. <p>Returns:</p> <p>boolean: <code>true</code> if <code>substr</code> was found in <code>str</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#endswith","title":"EndsWith","text":"<p>Determines whether a <code>str</code> ends with the characters of <code>substr</code>.</p> <pre><code>Text.EndsWith(str, substr)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. substr string Substring to find. <p>Returns:</p> <p>boolean: <code>true</code> or <code>false</code> as appropriate</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#filecontains","title":"FileContains","text":"<p>Perform a case-sensitive search (find in file) to determine whether <code>substr</code> may be found within a text file represented by <code>filePath</code>, returning <code>true</code> or <code>false</code> as appropriate.</p> <pre><code>Text.FileContains(filePath, substr)\n</code></pre> <p>Parameters:</p> Name Type Description filePath string File Path. substr string Text to modify. <p>Returns:</p> <p>boolean: <code>true</code> if <code>substr</code> was found in the file.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#firstindex","title":"FirstIndex","text":"<p>The first index at which a given <code>substr</code> can be found in the <code>str</code>, or -1 if it is not present. Search starts from <code>fromIndex</code>.</p> <pre><code>Text.FirstIndex(str, substr, fromIndex)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0.Optional. <p>Returns:</p> <p>number: Index or -1</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#format","title":"Format","text":"<p>Format given <code>formatStr</code> template string by expanding properties of <code>nameValueJsonObj</code> as {param1}, {param2} etc template params.\".</p> <pre><code>Text.Format(\"{h} {w}!\", {h: \"Hello\", w: \"World\"});\n</code></pre> <p>Additionally you may call it with multiple string values and refer to them by index.</p> <pre><code>Text.Format(\"{0} {1}!\", \"Hello\", \"World\");\n</code></pre> <p>Designed to be called from JavaScript. If you need to call it from <code>RVL</code> then consider using <code>RVL.FormatString</code> instead.</p> <pre><code>Text.Format(formatStr, nameValueJsonObj)\n</code></pre> <p>Parameters:</p> Name Type Description formatStr string Format with template placeholders {a}, {value}, {x} etc. nameValueJsonObj object JSON-formatted object, with properties used as input parameter names. <p>Returns:</p> <p>string: Formatted string</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#incrementdate","title":"IncrementDate","text":"<p>Increments a date/time string with a given offset. Requires Rapise 8.1+.</p> <ol> <li> <p>Parses date using given format specifier.    Formatting is described here.</p> <p>Example: <code>yyyy-MM-dd HH:mm</code></p> </li> <li> <p>Adds/Subtracts specified number of years, months, days, hours, minutes.         The number may be negative or positive, i.e. months=2 adds 2 months, months=-3 goes 3 months back, months=0 leaves months intact.</p> </li> <li>Formats the date back and returns.</li> </ol> <pre><code>Text.IncrementDate(dstr, fmt, years, months, days, hours, minutes)\n</code></pre> <p>Parameters:</p> Name Type Description dstr string Date/time string. If not set then current date/time is used. fmt string Date/time format. years number Year increment/decrement. months number Month increment/decrement. days number Day increment/decrement. hours number Hour increment/decrement. minutes number Minute increment/decrement. <p></p> <p> </p>"},{"location":"Libraries/Text/#join","title":"Join","text":"<p>Concatenate all of the elements in <code>arr</code> array (or an array-like object), separated by commas or a specified <code>separator</code> string. If the array has only one item, then that item will be returned without using the separator.</p> <pre><code>Text.Join(arr, separator)\n</code></pre> <p>Parameters:</p> Name Type Description arr array Input array. separator string Join separator (default - ',')Optional. <p>Returns:</p> <p>string: A string with all array elements joined. If arr.length is 0, the empty string is returned.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#lastindex","title":"LastIndex","text":"<p>The last index at which a given <code>substr</code> can be found in the <code>str</code>, or -1 if it is not present. Search backwards from <code>fromIndex</code>.</p> <pre><code>Text.LastIndex(str, substr, fromIndex)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. substr string Substring to find. fromIndex number An integer representing the index at which to start the search. Defaults to 0.Optional. <p>Returns:</p> <p>number: Index or -1</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#limit","title":"Limit","text":"<p>Limit <code>str</code> to be not more than <code>maxLength</code> chars. If <code>ellipsis</code> is specified, it is appended to the string.</p> <pre><code>Text.Limit(str, maxLength, ellipsis)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to limit. maxLength number The maximum allowed length of the resulting string. ellipsis string The padding text to append to the end if the string was actually shortened.Optional. <p>Returns:</p> <p>string: Whole or shortened string.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#padend","title":"PadEnd","text":"<p>Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied to the end of the <code>str</code>.</p> <pre><code>Text.PadEnd(str, targetLength, padString)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. <p>Returns:</p> <p>string: A String of the specified <code>targetLength</code> with <code>padString</code> applied from the start.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#padstart","title":"PadStart","text":"<p>Pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the <code>str</code>.</p> <pre><code>Text.PadStart(str, targetLength, padString)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to pad. targetLength number The length of the resulting string once the current str has been padded. If the value is less than str.length, then str is returned as-is. padString string The string to pad the current str with. <p>Returns:</p> <p>string: A String of the specified <code>targetLength</code> with <code>padString</code> applied from the start.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#repeat","title":"Repeat","text":"<p>Returns a new string which contains the specified number of copies of <code>str</code>, concatenated together.</p> <pre><code>Text.Repeat(str, count)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to repeat. count number Number of times to repeat. <p>Returns:</p> <p>string: string containing the specified number of copies of the given string.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#replaceall","title":"ReplaceAll","text":"<p>Replace all occurences of <code>oldValue</code> in <code>str</code> with <code>newValue</code> .</p> <pre><code>Text.ReplaceAll(str, oldValue, newValue)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. <p>Returns:</p> <p>string: Text after replace.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#replacefirst","title":"ReplaceFirst","text":"<p>Replace first occurence of <code>oldValue</code> in <code>str</code> with <code>newValue</code> .</p> <pre><code>Text.ReplaceFirst(str, oldValue, newValue)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to modify. oldValue string Substring to find. newValue string Replacement value. <p>Returns:</p> <p>string: Text after replace.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#split","title":"Split","text":"<p>Divides <code>str</code> into an ordered list of substrings, puts these substrings into an array, and returns the array.  The division is done by searching for a <code>separator</code>.</p> <pre><code>Text.Split(str, separator)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to split. separator string Split separator <p>Returns:</p> <p>array: Array of strings</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#splitat","title":"SplitAt","text":"<p>Get <code>atInd</code>th item after split. If <code>atInd</code>&lt;0 or <code>atInd</code> is more than split array size, <code>null</code> is returned.</p> <pre><code>Text.SplitAt(str, separator, atInd)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to split. separator string Split separator atInd number 0-based index of item <p>Returns:</p> <p>string: Item string or null, if index is out of scope.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#splitcount","title":"SplitCount","text":"<p>Get number of parts that will occur after splitting given <code>str</code> with given <code>separator</code>.</p> <pre><code>Text.SplitCount(str, separator)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to split. separator string Split separator <p>Returns:</p> <p>number: Number of split parts</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#startswith","title":"StartsWith","text":"<p>Determines whether <code>str</code> begins with the characters of <code>substr</code>.</p> <pre><code>Text.StartsWith(str, substr)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to search in. substr string Substring to find. <p>Returns:</p> <p>boolean: <code>true</code> or <code>false</code> as appropriate</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#substr","title":"Substr","text":"<p>Extract <code>length</code> characters from a <code>str</code>, counting from the <code>start</code> index.</p> <ul> <li>If <code>start</code> is a non-negative number, the index starts counting from the start of the string. Its value is capped at <code>str.length - 1</code>.</li> <li>If <code>start</code> is a negative number, the index starts counting from the end of the string. Its value is capped at <code>-str.length</code>.</li> <li>If <code>length</code> is omitted, <code>Text.Substr()</code> extracts characters to the end of the string.</li> <li>If <code>length</code> is <code>undefined</code>, <code>Text.Substr()</code> extracts characters to the end of the string.</li> <li>If <code>length</code> is a negative number, it is treated as 0.</li> <li>For both start and length, <code>NaN</code> is treated as 0.</li> </ul> <pre><code>Text.Substr(str, start, length)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to extract from. start number where to start the substring. length number how many characters to return.Optional. <p>Returns:</p> <p>string: Substring</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#substring","title":"Substring","text":"<p>Text.Substring() extracts characters from <code>indexStart</code> up to but not including <code>indexEnd</code>. In particular:</p> <ul> <li>If <code>indexEnd</code> is omitted, <code>Text.Substring()</code> extracts characters to the end of the string.</li> <li>If <code>indexStart</code> is equal to indexEnd, <code>Text.Substring()</code> returns an empty string.</li> <li>If <code>indexStart</code> is greater than <code>indexEnd</code>, then the effect of <code>Text.Substring()</code> is as if the two arguments were swapped;</li> </ul> <p>Any argument value that is less than 0 or greater than <code>str.length</code> is treated as if it were 0 and <code>str.length</code>, respectively.</p> <pre><code>Text.Substring(str, indexStart, indexEnd)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to extract from. indexStart number The index of the first character to include in the returned substring. indexEnd number The index of the first character to exclude from the returned substring.Optional. <p>Returns:</p> <p>string: Substring</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#tolowercase","title":"ToLowercase","text":"<p>Returns <code>str</code> value converted to lowercase.</p> <pre><code>Text.ToLowercase(str)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to process. <p>Returns:</p> <p>string: Lowercase value.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#tostring","title":"ToString","text":"<p>Convert anything to a string.</p> <pre><code>Text.ToString(anyObj)\n</code></pre> <p>Parameters:</p> Name Type Description anyObj object Object of any type <p>Returns:</p> <p>string: string representation of the object</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#touppercase","title":"ToUppercase","text":"<p>Returns the <code>str</code> value converted to uppercase.</p> <pre><code>Text.ToUppercase(str)\n</code></pre> <p>Parameters:</p> Name Type Description str string Text to process. <p>Returns:</p> <p>string: Uppercase value.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#trim","title":"Trim","text":"<p>Strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.  Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].</p> <pre><code>Text.Trim(str, global, trimChars)\n</code></pre> <p>Parameters:</p> Name Type Description str string String to trim. global boolean If 'true' then global trim is performed (whitespaces in the middle are substituted with a single space). If 'false' only ends are trimmed.Optional, Default: \"false\". trimChars string String with each char to be subject for trim.Optional. <p>Returns:</p> <p>string: Trimmed string.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#trimend","title":"TrimEnd","text":"<p>Strips trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.  Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].</p> <pre><code>Text.TrimEnd(str, trimChars)\n</code></pre> <p>Parameters:</p> Name Type Description str string String to trim. trimChars string String with each char to be subject for trim.Optional. <p>Returns:</p> <p>string: Trimmed string.</p> <p></p> <p> </p>"},{"location":"Libraries/Text/#trimstart","title":"TrimStart","text":"<p>Strips leading white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.  Whitespace characters are [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].</p> <pre><code>Text.TrimStart(str, trimChars)\n</code></pre> <p>Parameters:</p> Name Type Description str string String to trim. trimChars string String with each char to be subject for trim.Optional. <p>Returns:</p> <p>string: Trimmed string.</p> <p></p>"},{"location":"Libraries/TouchAction/","title":"TouchAction","text":"<p>This is a JavaScript wrapper for TouchAction of Appium .NET library. Requires Rapise 8.0+.</p>"},{"location":"Libraries/TouchAction/#action-summary","title":"Action Summary","text":"Action Description Cancel Cancels the touch action. LongPress Presses at the specified location in the element until the  context menu appears. MoveTo Moves to the specified location in the element. Perform Executes the touch action. Press Presses at the specified location in the element. Release Releases the pressure. Tap Taps at the specified location in the element. Wait Waits for the given duration."},{"location":"Libraries/TouchAction/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/TouchAction/#cancel","title":"Cancel","text":"<p>Cancels the touch action.</p> <pre><code>TouchAction.Cancel()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#longpress","title":"LongPress","text":"<p>Presses at the specified location in the element until the  context menu appears. If no element is specified presses at the specified location on the screen.</p> <pre><code>TouchAction.LongPress(x, y, element)\n</code></pre> <p>Parameters:</p> Name Type Description x number The x coordinate relative to the element or the screen top-left corner. y number The y coordinate relative to the element or the screen top-left corner. element AppiumElementWrapper The target element.Optional. <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#moveto","title":"MoveTo","text":"<p>Moves to the specified location in the element. If no element is specified moves to the specified location on screen.</p> <pre><code>TouchAction.MoveTo(x, y, element)\n</code></pre> <p>Parameters:</p> Name Type Description x number The x coordinate relative to the element or the screen top-left corner. y number The y coordinate relative to the element or the screen top-left corner. element AppiumElementWrapper The target element.Optional. <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#perform","title":"Perform","text":"<p>Executes the touch action.</p> <pre><code>TouchAction.Perform()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#press","title":"Press","text":"<p>Presses at the specified location in the element. If no element is specified presses at the specified location on screen.</p> <pre><code>TouchAction.Press(x, y, element)\n</code></pre> <p>Parameters:</p> Name Type Description x number The x coordinate relative to the element or the screen top-left corner. y number The y coordinate relative to the element or the screen top-left corner. element AppiumElementWrapper The target element.Optional. <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#release","title":"Release","text":"<p>Releases the pressure.</p> <pre><code>TouchAction.Release()\n</code></pre> <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#tap","title":"Tap","text":"<p>Taps at the specified location in the element. If no element is specified taps at the specified location on screen.</p> <pre><code>TouchAction.Tap(x, y, count, element)\n</code></pre> <p>Parameters:</p> Name Type Description x number The x coordinate relative to the element. y number The y coordinate relative to the element. count number The number of times to tap. element AppiumElementWrapper The target element.Optional. <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p> <p> </p>"},{"location":"Libraries/TouchAction/#wait","title":"Wait","text":"<p>Waits for the given duration.</p> <pre><code>TouchAction.Wait(ms)\n</code></pre> <p>Parameters:</p> Name Type Description ms number The amount of time to wait in milliseconds. <p>Returns:</p> <p>Self-reference for chaining additional actions.</p> <p></p>"},{"location":"Libraries/UIAButton/","title":"UIAButton","text":"<p>UIAutomation UIAButton.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationButtonBehavior</p>"},{"location":"Libraries/UIAButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState"},{"location":"Libraries/UIAButton/#action-summary","title":"Action Summary","text":"Action Description DoAction Performs default action on this button."},{"location":"Libraries/UIAButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAButton/#togglestate","title":"ToggleState","text":"<p>For toggle button this property contains its toggle state</p> <p>Type: boolean</p> <p>Accessors: GetToggleState, SetToggleState</p> <pre><code>value = SeS('SomeUIAButton').GetToggleState()\n\nSeS('SomeUIAButton').SetToggleState(check)\n</code></pre>"},{"location":"Libraries/UIAButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAButton/#doaction","title":"DoAction","text":"<p>Performs default action on this button.</p> <pre><code>SeS('SomeUIAButton').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UIACheckBox/","title":"UIACheckBox","text":"<p>UIAutomation UIACheckBox.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationCheckBoxBehavior</p>"},{"location":"Libraries/UIACheckBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/UIACheckBox/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/UIACheckBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIACheckBox/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeUIACheckBox').GetChecked()\n\nSeS('SomeUIACheckBox').SetChecked(/**boolean*/check)\n</code></pre>"},{"location":"Libraries/UIACheckBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIACheckBox/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeUIACheckBox').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAComboBox/","title":"UIAComboBox","text":"<p>UIAutomation UIAComboBox.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationComboBoxBehavior</p>"},{"location":"Libraries/UIAComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UIAComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box."},{"location":"Libraries/UIAComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAComboBox/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeUIAComboBox').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/UIAComboBox/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUIAComboBox').GetSelectedIndex()\n\nSeS('SomeUIAComboBox').SetSelectedIndex(/**number*/ ind)\n</code></pre> <p></p>"},{"location":"Libraries/UIAComboBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUIAComboBox').GetText()\n\nSeS('SomeUIAComboBox').SetText(value)\n</code></pre>"},{"location":"Libraries/UIAComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUIAComboBox').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAComboBox/#dosettext","title":"DoSetText","text":"<p>Set text into combobox with an edit box.</p> <pre><code>SeS('SomeUIAComboBox').DoSetText(newText)\n</code></pre> <p>Parameters:</p> Name Type Description newText string Text to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UIAComboBoxEdit/","title":"UIAComboBoxEdit","text":"<p>UIAutomation UIAComboBoxEdit.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationComboBoxBehavior</p>"},{"location":"Libraries/UIAComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UIAComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object. DoSetText Set text into combobox with an edit box."},{"location":"Libraries/UIAComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAComboBoxEdit/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeUIAComboBoxEdit').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/UIAComboBoxEdit/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUIAComboBoxEdit').GetSelectedIndex()\n\nSeS('SomeUIAComboBoxEdit').SetSelectedIndex(/**number*/ ind)\n</code></pre> <p></p>"},{"location":"Libraries/UIAComboBoxEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUIAComboBoxEdit').GetText()\n\nSeS('SomeUIAComboBoxEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/UIAComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUIAComboBoxEdit').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Set text into combobox with an edit box.</p> <pre><code>SeS('SomeUIAComboBoxEdit').DoSetText(newText)\n</code></pre> <p>Parameters:</p> Name Type Description newText string Text to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: UIAutomationTextBoxBehavior</p>"},{"location":"Libraries/UIAComboBoxEdit/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UIAComboBoxEdit/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UIAComboBoxEdit/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/UIAComboBoxEdit/#text_1","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUIAComboBoxEdit').GetText()\n\nSeS('SomeUIAComboBoxEdit').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/UIAComboBoxEdit/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/UIAComboBoxEdit/#dosettext_1","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUIAComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAHyperlink/","title":"UIAHyperlink","text":"<p>UIAutomation UIAHyperlink.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationButtonBehavior</p>"},{"location":"Libraries/UIAHyperlink/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ToggleState For toggle button this property contains its toggle state GetToggleState SetToggleState"},{"location":"Libraries/UIAHyperlink/#action-summary","title":"Action Summary","text":"Action Description DoAction Performs default action on this button."},{"location":"Libraries/UIAHyperlink/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAHyperlink/#togglestate","title":"ToggleState","text":"<p>For toggle button this property contains its toggle state</p> <p>Type: boolean</p> <p>Accessors: GetToggleState, SetToggleState</p> <pre><code>value = SeS('SomeUIAHyperlink').GetToggleState()\n\nSeS('SomeUIAHyperlink').SetToggleState(check)\n</code></pre>"},{"location":"Libraries/UIAHyperlink/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAHyperlink/#doaction","title":"DoAction","text":"<p>Performs default action on this button.</p> <pre><code>SeS('SomeUIAHyperlink').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UIALabel/","title":"UIALabel","text":"<p>UIAutomation UIALabel.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationLabelBehavior</p>"},{"location":"Libraries/UIALabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/UIALabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIALabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeUIALabel').GetText()\n</code></pre>"},{"location":"Libraries/UIAList/","title":"UIAList","text":"<p>UIAutomation UIAList.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationListBehavior</p>"},{"location":"Libraries/UIAList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectedText Text of the selected item in a single string. GetSelectedText SetSelectedText SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/UIAList/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClickItem Performs click on the item DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/UIAList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAList/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeUIAList').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeUIAList').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeUIAList').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeUIAList').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeUIAList').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeUIAList').GetSelectedItems()\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#selectedtext","title":"SelectedText","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetSelectedText, SetSelectedText</p> <pre><code>value = SeS('SomeUIAList').GetSelectedText()\n\nSeS('SomeUIAList').SetSelectedText(itemtext)\n</code></pre> <p></p>"},{"location":"Libraries/UIAList/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeUIAList').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/UIAList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAList/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeUIAList').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAList/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the item</p> <pre><code>SeS('SomeUIAList').DoClickItem(nameCaptionIndex, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index or name  of the item to be selected. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAList/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeUIAList').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAList/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeUIAList').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAMenu/","title":"UIAMenu","text":"<p>UIAutomation UIAMenu.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationMenuBehavior</p>"},{"location":"Libraries/UIAMenu/#action-summary","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/UIAMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeUIAMenu').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAObject/","title":"UIAObject","text":"<p>UIAutomation UIAObject.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAObjectGenericBehavior</p>"},{"location":"Libraries/UIAObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter AutomationId Automation ID of UI Automation object GetAutomationId ChildAt Object for nth child of this object's UI Automation node GetChildAt ChildrenCount Number of UI Automation nodes within current node GetChildrenCount Height Height of the object. GetHeight IndexInParent Object's order index in parent UI Automation node GetIndexInParent Name Name of of UI Automation object GetName NextSibling Object for UI Automation next sibling node GetNextSibling Parent Object for UI Automation parent node GetParent PrevSibling Object for UI Automation previous sibling node GetPrevSibling TypeName Type name of UI Automation object GetTypeName Value Value of the object. GetValue Visible Returns <code>true</code> if the element is visible, otherwise - <code>false</code>. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/UIAObject/#action-summary","title":"Action Summary","text":"Action Description DoClick Performs left click at the center of an object. DoDumpWidget Dumps Spy data for the object. DoFindByLocation Finds nested element by its location string. DoFindByText Find nested element by its text (Value and Name of each element are compared with specified text or regular expression). DoFindElementByCondition Finds first element matching the condition. DoFindElementsByCondition Finds all elements matching the condition DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/UIAObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAObject/#automationid","title":"AutomationId","text":"<p>Automation ID of UI Automation object</p> <p>Type: string</p> <p>Accessors: GetAutomationId</p> <pre><code>value = SeS('SomeUIAObject').GetAutomationId()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#childat","title":"ChildAt","text":"<p>Object for nth child of this object's UI Automation node</p> <p>Getter Parameters:</p> Name Type Description ind number Zero-based index for a required child <p>Type: UIAObject</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeUIAObject').GetChildAt(ind)\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#childrencount","title":"ChildrenCount","text":"<p>Number of UI Automation nodes within current node</p> <p>Type: number</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeUIAObject').GetChildrenCount()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeUIAObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#indexinparent","title":"IndexInParent","text":"<p>Object's order index in parent UI Automation node</p> <p>Type: number</p> <p>Accessors: GetIndexInParent</p> <pre><code>value = SeS('SomeUIAObject').GetIndexInParent()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#name","title":"Name","text":"<p>Name of of UI Automation object</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeUIAObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#nextsibling","title":"NextSibling","text":"<p>Object for UI Automation next sibling node</p> <p>Type: UIAObject</p> <p>Accessors: GetNextSibling</p> <pre><code>value = SeS('SomeUIAObject').GetNextSibling()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#parent","title":"Parent","text":"<p>Object for UI Automation parent node</p> <p>Type: UIAObject</p> <p>Accessors: GetParent</p> <pre><code>value = SeS('SomeUIAObject').GetParent()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#prevsibling","title":"PrevSibling","text":"<p>Object for UI Automation previous sibling node</p> <p>Type: UIAObject</p> <p>Accessors: GetPrevSibling</p> <pre><code>value = SeS('SomeUIAObject').GetPrevSibling()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#typename","title":"TypeName","text":"<p>Type name of UI Automation object</p> <p>Type: String</p> <p>Accessors: GetTypeName</p> <pre><code>value = SeS('SomeUIAObject').GetTypeName()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue</p> <pre><code>value = SeS('SomeUIAObject').GetValue()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible, otherwise - <code>false</code>. Requires Rapise 6.6+</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeUIAObject').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeUIAObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeUIAObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/UIAObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeUIAObject').GetY()\n</code></pre>"},{"location":"Libraries/UIAObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAObject/#doclick","title":"DoClick","text":"<p>Performs left click at the center of an object. It is a customizable variant of LClick action.</p> <pre><code>SeS('SomeUIAObject').DoClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeUIAObject').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dofindbylocation","title":"DoFindByLocation","text":"<p>Finds nested element by its location string. Supports /Id, .. (up) and (any), i.e. ../[3]/Button[1] - go to parent, then 4<sup>th</sup> child, then find 2<sup>nd</sup> button. Requires Rapise 8.1+.</p> <pre><code>SeS('SomeUIAObject').DoFindByLocation(strLocation)\n</code></pre> <p>Parameters:</p> Name Type Description strLocation string Relative location of element. <p>Returns:</p> <p>UIAObject: UIAObject if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value and Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeUIAObject').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>UIAObject: UIAObject containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dofindelementbycondition","title":"DoFindElementByCondition","text":"<p>Finds first element matching the condition. Requires Rapise 6.6+</p> <pre><code>SeS('SomeUIAObject').DoFindElementByCondition(scope, condition)\n</code></pre> <p>Parameters:</p> Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. <p>Returns:</p> <p>UIAObject: UIAObject if the element is found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dofindelementsbycondition","title":"DoFindElementsByCondition","text":"<p>Finds all elements matching the condition</p> <pre><code>SeS('SomeUIAObject').DoFindElementsByCondition(scope, condition)\n</code></pre> <p>Parameters:</p> Name Type Description scope string Scope for element search. Possible values: \"Element\", \"Children\", \"Descendants\", \"Subtree\", \"Parent\", \"Ancestors\" condition expression UIAutomation2 locator or condition object. <p>Returns:</p> <p>Array: Array of UIAObjects for the found elements, the array is empty if nothing is found. Requires Rapise 6.6+</p> <p></p> <p> </p>"},{"location":"Libraries/UIAObject/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeUIAObject').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/UIAProgressBar/","title":"UIAProgressBar","text":"<p>UIAutomation UIAProgressBar.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationProgressBarBehavior</p>"},{"location":"Libraries/UIAProgressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/UIAProgressBar/#action-summary","title":"Action Summary","text":"Action Description DoSetValue Sets the value of current object."},{"location":"Libraries/UIAProgressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIAProgressBar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeUIAProgressBar').GetMaxValue()\n\nSeS('SomeUIAProgressBar').SetMaxValue()\n</code></pre> <p></p>"},{"location":"Libraries/UIAProgressBar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeUIAProgressBar').GetMinValue()\n\nSeS('SomeUIAProgressBar').SetMinValue()\n</code></pre> <p></p>"},{"location":"Libraries/UIAProgressBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeUIAProgressBar').GetValue()\n\nSeS('SomeUIAProgressBar').SetValue(newvalue)\n</code></pre>"},{"location":"Libraries/UIAProgressBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAProgressBar/#dosetvalue","title":"DoSetValue","text":"<p>Sets the value of current object.</p> <pre><code>SeS('SomeUIAProgressBar').DoSetValue(val)\n</code></pre> <p>Parameters:</p> Name Type Description val number Value to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UIARadioButton/","title":"UIARadioButton","text":"<p>UIAutomation UIARadioButton.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationRadioButtonBehavior</p>"},{"location":"Libraries/UIARadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/UIARadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIARadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeUIARadioButton').DoSetCheck()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIASlider/","title":"UIASlider","text":"<p>UIAutomation UIASlider.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationProgressBarBehavior</p>"},{"location":"Libraries/UIASlider/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/UIASlider/#action-summary","title":"Action Summary","text":"Action Description DoSetValue Sets the value of current object."},{"location":"Libraries/UIASlider/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIASlider/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeUIASlider').GetMaxValue()\n\nSeS('SomeUIASlider').SetMaxValue()\n</code></pre> <p></p>"},{"location":"Libraries/UIASlider/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeUIASlider').GetMinValue()\n\nSeS('SomeUIASlider').SetMinValue()\n</code></pre> <p></p>"},{"location":"Libraries/UIASlider/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeUIASlider').GetValue()\n\nSeS('SomeUIASlider').SetValue(newvalue)\n</code></pre>"},{"location":"Libraries/UIASlider/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIASlider/#dosetvalue","title":"DoSetValue","text":"<p>Sets the value of current object.</p> <pre><code>SeS('SomeUIASlider').DoSetValue(val)\n</code></pre> <p>Parameters:</p> Name Type Description val number Value to set <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UIATabControl/","title":"UIATabControl","text":"<p>UIAutomation UIATabControl.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationTabControlBehavior</p>"},{"location":"Libraries/UIATabControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemsCount Number of items. GetItemsCount SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedTab Text of the selected tab GetSelectedTab SetSelectedTab TabName Name of the tab at index GetTabName"},{"location":"Libraries/UIATabControl/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/UIATabControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIATabControl/#itemscount","title":"ItemsCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemsCount</p> <pre><code>value = SeS('SomeUIATabControl').GetItemsCount()\n</code></pre> <p></p>"},{"location":"Libraries/UIATabControl/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUIATabControl').GetSelectedIndex()\n\nSeS('SomeUIATabControl').SetSelectedIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/UIATabControl/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab, SetSelectedTab</p> <pre><code>value = SeS('SomeUIATabControl').GetSelectedTab()\n\nSeS('SomeUIATabControl').SetSelectedTab(value)\n</code></pre> <p></p>"},{"location":"Libraries/UIATabControl/#tabname","title":"TabName","text":"<p>Name of the tab at index</p> <p>Getter Parameters:</p> Name Type Description index number <p>Type: string</p> <p>Accessors: GetTabName</p> <pre><code>value = SeS('SomeUIATabControl').GetTabName(/**number*/ index)\n</code></pre>"},{"location":"Libraries/UIATabControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIATabControl/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeUIATabControl').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIATextBlock/","title":"UIATextBlock","text":"<p>UIAutomation UIATextBlock.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationTextBoxBehavior</p>"},{"location":"Libraries/UIATextBlock/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UIATextBlock/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UIATextBlock/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIATextBlock/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUIATextBlock').GetText()\n\nSeS('SomeUIATextBlock').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/UIATextBlock/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIATextBlock/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUIATextBlock').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIATextBox/","title":"UIATextBox","text":"<p>UIAutomation UIATextBox.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationTextBoxBehavior</p>"},{"location":"Libraries/UIATextBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UIATextBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UIATextBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIATextBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUIATextBox').GetText()\n\nSeS('SomeUIATextBox').SetText(/**string*/value)\n</code></pre>"},{"location":"Libraries/UIATextBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIATextBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUIATextBox').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIATree/","title":"UIATree","text":"<p>UIAutomation UIATree.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationTreeBehavior</p>"},{"location":"Libraries/UIATree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Checked state of the selected node or a node specified by the input parameters. GetChecked SetChecked ChildAt Child at index of the selected node or a node specified by the input parameters. GetChildAt ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded SetExpanded NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected SetSelected"},{"location":"Libraries/UIATree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSelectItem Selects specified item in the tree."},{"location":"Libraries/UIATree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UIATree/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeUIATree').GetChecked(path, separator, pathType)\n\nSeS('SomeUIATree').SetChecked(path, /**boolean*/ value, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UIATree/#childat","title":"ChildAt","text":"<p>Child at index of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node index number separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: object</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeUIATree').GetChildAt(path, index, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UIATree/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeUIATree').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UIATree/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded, SetExpanded</p> <pre><code>value = SeS('SomeUIATree').GetExpanded(path, separator, pathType)\n\nSeS('SomeUIATree').SetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UIATree/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeUIATree').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UIATree/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected, SetSelected</p> <pre><code>value = SeS('SomeUIATree').GetSelected(path, separator, pathType)\n\nSeS('SomeUIATree').SetSelected(path, separator, pathType)\n</code></pre>"},{"location":"Libraries/UIATree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIATree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeUIATree').DoClickNode(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIATree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeUIATree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIATree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeUIATree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UIATree/#doselectitem","title":"DoSelectItem","text":"<p>Selects specified item in the tree.</p> <pre><code>SeS('SomeUIATree').DoSelectItem(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAutomationMenuDropDown/","title":"UIAutomationMenuDropDown","text":"<p>Behavior patterm for dropdown (popup).</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationMenuDropDownBehavior</p>"},{"location":"Libraries/UIAutomationMenuDropDown/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/UIAutomationMenuDropDown/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAutomationMenuDropDown/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUIAutomationMenuDropDown').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAutomationMenuDropDownList/","title":"UIAutomationMenuDropDownList","text":"<p>UIAutomation UIAutomationMenuDropDownList.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationMenuDropDownBehavior</p>"},{"location":"Libraries/UIAutomationMenuDropDownList/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/UIAutomationMenuDropDownList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UIAutomationMenuDropDownList/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUIAutomationMenuDropDownList').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UIAutomationMenuItem/","title":"UIAutomationMenuItem","text":"<p>UIAutomation UIAutomationMenuItem.</p> <p>Extends UIAObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UIAutomationMenuItemBehavior</p>"},{"location":"Libraries/UltraAppMenu/","title":"UltraAppMenu","text":"<p>Infragistics UltraAppMenu. UltraAppMenu UI element class: Infragistics.Win.UltraWinToolbars.ApplicationMenuControlTrusted</p> <p>Extends ManagedObject</p> <p>Behavior Pattern: UltraPopupMenuControlBehavior.UltraAppMenuControlBehavior</p> <p>Behavior Pattern: ManagedObjectGenericBehavior</p>"},{"location":"Libraries/UltraAppMenu/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/UltraAppMenu/#action-summary","title":"Action Summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/UltraAppMenu/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraAppMenu/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeUltraAppMenu').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeUltraAppMenu').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeUltraAppMenu').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 8.0+.</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeUltraAppMenu').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeUltraAppMenu').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeUltraAppMenu').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/UltraAppMenu/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeUltraAppMenu').GetY()\n</code></pre>"},{"location":"Libraries/UltraAppMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraAppMenu/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeUltraAppMenu').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraAppMenu/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeUltraAppMenu').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UltraAppMenu/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeUltraAppMenu').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UltraAppMenu/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeUltraAppMenu').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/UltraButton/","title":"UltraButton","text":"<p>Infragistics UltraButton.</p> <p>UI element class: Infragistics.Win.Misc.UltraButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectButtonBehavior</p>"},{"location":"Libraries/UltraCheckEditor/","title":"UltraCheckEditor","text":"<p>Infragistics UltraFormattedTextEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraCheckEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectCheckableBehavior</p>"},{"location":"Libraries/UltraCheckEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/UltraCheckEditor/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/UltraCheckEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraCheckEditor/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeUltraCheckEditor').GetChecked()\n\nSeS('SomeUltraCheckEditor').SetChecked(value)\n</code></pre>"},{"location":"Libraries/UltraCheckEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraCheckEditor/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeUltraCheckEditor').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraColorPicker/","title":"UltraColorPicker","text":"<p>Infragistics UltraColorPicker</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraColorPicker</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/UltraComboEditor/","title":"UltraComboEditor","text":"<p>Infragistics UltraComboEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraComboEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraComboBoxBehavior</p>"},{"location":"Libraries/UltraComboEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraComboEditor/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/UltraComboEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraComboEditor/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUltraComboEditor').GetSelectedIndex()\n\nSeS('SomeUltraComboEditor').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/UltraComboEditor/#selecteditem","title":"SelectedItem","text":"<p>Selected item of the object.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem, SetSelectedItem</p> <pre><code>value = SeS('SomeUltraComboEditor').GetSelectedItem()\n\nSeS('SomeUltraComboEditor').SetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/UltraComboEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraComboEditor').GetText()\n\nSeS('SomeUltraComboEditor').SetText()\n</code></pre>"},{"location":"Libraries/UltraComboEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraComboEditor/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUltraComboEditor').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/UltraComboEditor/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraComboEditor/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraComboEditor/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/UltraComboEditor/#text_1","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraComboEditor').GetText()\n\nSeS('SomeUltraComboEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraComboEditor/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/UltraComboEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraComboEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraCurrencyEditor/","title":"UltraCurrencyEditor","text":"<p>Infragistics UltraCurrencyEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraCurrencyEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraEditBehavior</p>"},{"location":"Libraries/UltraCurrencyEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraCurrencyEditor/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraCurrencyEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraCurrencyEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraCurrencyEditor').GetText()\n\nSeS('SomeUltraCurrencyEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraCurrencyEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraCurrencyEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraCurrencyEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraDropDownButton/","title":"UltraDropDownButton","text":"<p>Infragistics UltraDropDownButton.</p> <p>UI element class: Infragistics.Win.Misc.UltraDropDownButton</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectButtonBehavior</p>"},{"location":"Libraries/UltraFontNameEditor/","title":"UltraFontNameEditor","text":"<p>Infragistics UltraComboEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraFontNameEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraComboBoxBehavior</p>"},{"location":"Libraries/UltraFontNameEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraFontNameEditor/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/UltraFontNameEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraFontNameEditor/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUltraFontNameEditor').GetSelectedIndex()\n\nSeS('SomeUltraFontNameEditor').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/UltraFontNameEditor/#selecteditem","title":"SelectedItem","text":"<p>Selected item of the object.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem, SetSelectedItem</p> <pre><code>value = SeS('SomeUltraFontNameEditor').GetSelectedItem()\n\nSeS('SomeUltraFontNameEditor').SetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/UltraFontNameEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraFontNameEditor').GetText()\n\nSeS('SomeUltraFontNameEditor').SetText()\n</code></pre>"},{"location":"Libraries/UltraFontNameEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraFontNameEditor/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUltraFontNameEditor').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/UltraFontNameEditor/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraFontNameEditor/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraFontNameEditor/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/UltraFontNameEditor/#text_1","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraFontNameEditor').GetText()\n\nSeS('SomeUltraFontNameEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraFontNameEditor/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/UltraFontNameEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraFontNameEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraFormattedLinkLabel/","title":"UltraFormattedLinkLabel","text":"<p>Infragistics UltraTextEditor.</p> <p>UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedLinkLabel</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraLinkLabelBehavior</p>"},{"location":"Libraries/UltraFormattedLinkLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue"},{"location":"Libraries/UltraFormattedLinkLabel/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object. DoSetValue Sets text value of this object."},{"location":"Libraries/UltraFormattedLinkLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraFormattedLinkLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraFormattedLinkLabel').GetText()\n\nSeS('SomeUltraFormattedLinkLabel').SetText(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraFormattedLinkLabel/#value","title":"Value","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeUltraFormattedLinkLabel').GetValue()\n\nSeS('SomeUltraFormattedLinkLabel').SetValue(value)\n</code></pre>"},{"location":"Libraries/UltraFormattedLinkLabel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraFormattedLinkLabel/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraFormattedLinkLabel').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraFormattedLinkLabel/#dosetvalue","title":"DoSetValue","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraFormattedLinkLabel').DoSetValue(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value to set <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraFormattedTextEditor/","title":"UltraFormattedTextEditor","text":"<p>Infragistics UltraFormattedTextEditor.</p> <p>UI element class: Infragistics.Win.FormattedLinkLabel.UltraFormattedTextEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraFormattedTextEditorBehavior</p>"},{"location":"Libraries/UltraFormattedTextEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraFormattedTextEditor/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraFormattedTextEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraFormattedTextEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraFormattedTextEditor').GetText()\n\nSeS('SomeUltraFormattedTextEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraFormattedTextEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraFormattedTextEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraFormattedTextEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraGrid/","title":"UltraGrid","text":"<p>Infragistics UltraGrid.</p> <p>UI element class: Infragistics.Win.UltraWinGrid.UltraGrid</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraGridBehavior</p>"},{"location":"Libraries/UltraGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell ColumnCount Number of columns in the table. GetColumnCount ColumnName Caption of a column. GetColumnName RowCount Number of rows in the table. GetRowCount SelectedColumn Index of the selected column. GetSelectedColumn SelectedRow Index of the selected row. GetSelectedRow Text Text of the currently focused cell. GetText"},{"location":"Libraries/UltraGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell."},{"location":"Libraries/UltraGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Type: string</p> <p>Accessors: GetCell</p> <pre><code>value = SeS('SomeUltraGrid').GetCell(/**number*/row, /**number*/col)\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the table.</p> <p>Type: number</p> <p>Accessors: GetColumnCount</p> <pre><code>value = SeS('SomeUltraGrid').GetColumnCount()\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName</p> <pre><code>value = SeS('SomeUltraGrid').GetColumnName(/**number*/columnIndex)\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the table.</p> <p>Type: number</p> <p>Accessors: GetRowCount</p> <pre><code>value = SeS('SomeUltraGrid').GetRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#selectedcolumn","title":"SelectedColumn","text":"<p>Index of the selected column.</p> <p>Type: number</p> <p>Accessors: GetSelectedColumn</p> <pre><code>value = SeS('SomeUltraGrid').GetSelectedColumn()\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#selectedrow","title":"SelectedRow","text":"<p>Index of the selected row.</p> <p>Type: number</p> <p>Accessors: GetSelectedRow</p> <pre><code>value = SeS('SomeUltraGrid').GetSelectedRow()\n</code></pre> <p></p>"},{"location":"Libraries/UltraGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeUltraGrid').GetText()\n</code></pre>"},{"location":"Libraries/UltraGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeUltraGrid').DoClickCell(row, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within node. Default is a center.Optional. yOffset number Y offset to click within node. Default is a center.Optional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/UltraLabel/","title":"UltraLabel","text":"<p>Infragistics UltraLabel.</p> <p>UI element class: Infragistics.Win.Misc.UltraLabel</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/UltraLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraLabel/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraLabel').GetText()\n\nSeS('SomeUltraLabel').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraLabel/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraLabel/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraLabel').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraListBar/","title":"UltraListBar","text":"<p>Infragistics UltraListBar.</p> <p>UI element class: Infragistics.Win.UltraWinListBar.UltraListBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraListBarControlBehavior</p>"},{"location":"Libraries/UltraListBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Item Caption of the item specified by index GetItem ItemCount Number of items in this navigation bar. GetItemCount"},{"location":"Libraries/UltraListBar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on the navigation item DoExpandGroup Expand (or make active) the navigation group"},{"location":"Libraries/UltraListBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraListBar/#item","title":"Item","text":"<p>Caption of the item specified by index</p> <p>Getter Parameters:</p> Name Type Description ind number Index of an item to get caption <p>Type: string</p> <p>Accessors: GetItem</p> <pre><code>value = SeS('SomeUltraListBar').GetItem(/**number*/ind)\n</code></pre> <p></p>"},{"location":"Libraries/UltraListBar/#itemcount","title":"ItemCount","text":"<p>Number of items in this navigation bar. All items may then be accessed by SeS().GetItem(ind) <p>Type: </p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeUltraListBar').GetItemCount()\n</code></pre>"},{"location":"Libraries/UltraListBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraListBar/#doclickitem","title":"DoClickItem","text":"<p>Performs click on the navigation item</p> <pre><code>SeS('SomeUltraListBar').DoClickItem(nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraListBar/#doexpandgroup","title":"DoExpandGroup","text":"<p>Expand (or make active) the navigation group</p> <pre><code>SeS('SomeUltraListBar').DoExpandGroup(nameCaptionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description nameCaptionIndex string | number index, name or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraListView/","title":"UltraListView","text":"<p>Infragistics UltraListView.</p> <p>UI element class: Infragistics.Win.UltraWinListView.UltraListView</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraListViewBehavior</p>"},{"location":"Libraries/UltraListView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemNameByIndex Returns item name by its index. GetItemNameByIndex SelectedIndices Returns string of indexes delimited by separator or array of indexes of selected elements. GetSelectedIndices SelectedItems Text of all the selected items in a single string. GetSelectedItems SelectionCount Number of selected items. GetSelectionCount"},{"location":"Libraries/UltraListView/#action-summary","title":"Action Summary","text":"Action Description DoAddSelection Extends selection. DoClearSelection Clears selection. DoRemoveSelection Removes selection from specified items. DoSelectItem Selects items of this object."},{"location":"Libraries/UltraListView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraListView/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeUltraListView').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/UltraListView/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeUltraListView').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/UltraListView/#itemnamebyindex","title":"ItemNameByIndex","text":"<p>Returns item name by its index.'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the item <p>Type: string|boolean</p> <p>Accessors: GetItemNameByIndex</p> <pre><code>value = SeS('SomeUltraListView').GetItemNameByIndex(index)\n</code></pre> <p></p>"},{"location":"Libraries/UltraListView/#selectedindices","title":"SelectedIndices","text":"<p>Returns string of indexes delimited by separator or array of indexes of selected elements.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedIndices</p> <pre><code>value = SeS('SomeUltraListView').GetSelectedIndices(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/UltraListView/#selecteditems","title":"SelectedItems","text":"<p>Text of all the selected items in a single string. Items are divided by ';' separator.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: string</p> <p>Accessors: GetSelectedItems</p> <pre><code>value = SeS('SomeUltraListView').GetSelectedItems(asArray, separator)\n</code></pre> <p></p>"},{"location":"Libraries/UltraListView/#selectioncount","title":"SelectionCount","text":"<p>Number of selected items.</p> <p>Type: number</p> <p>Accessors: GetSelectionCount</p> <pre><code>value = SeS('SomeUltraListView').GetSelectionCount()\n</code></pre>"},{"location":"Libraries/UltraListView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraListView/#doaddselection","title":"DoAddSelection","text":"<p>Extends selection.</p> <pre><code>SeS('SomeUltraListView').DoAddSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraListView/#doclearselection","title":"DoClearSelection","text":"<p>Clears selection.</p> <pre><code>SeS('SomeUltraListView').DoClearSelection()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraListView/#doremoveselection","title":"DoRemoveSelection","text":"<p>Removes selection from specified items.</p> <pre><code>SeS('SomeUltraListView').DoRemoveSelection(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraListView/#doselectitem","title":"DoSelectItem","text":"<p>Selects items of this object. First it clears existing selection.</p> <pre><code>SeS('SomeUltraListView').DoSelectItem(items, separator, itemsType)\n</code></pre> <p>Parameters:</p> Name Type Description items number | string | array Can be one of the following:1. Number, index of an item.2. String, item names delimited with separator.3. String, item indexes delimited with separator.4. Array of item names.5. Array of item indexes. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". itemsType string If it is 'name' and 'items' parameter is of Stringtype then 'items' parameter is treated as separated item names. If it is'index' and 'items' parameter is of String type then'items' parameter istreated as separated item indexes. If any other value is passed as 'itemsType'the behavior is undefined.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraMaskedEdit/","title":"UltraMaskedEdit","text":"<p>Infragistics UltraMaskedEdit.</p> <p>UI element class: Infragistics.Win.UltraWinMaskedEdit.UltraMaskedEdit</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraNumericEditBehavior</p>"},{"location":"Libraries/UltraMaskedEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraMaskedEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraMaskedEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraMaskedEdit/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeUltraMaskedEdit').GetMaxValue()\n\nSeS('SomeUltraMaskedEdit').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraMaskedEdit/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeUltraMaskedEdit').GetMinValue()\n\nSeS('SomeUltraMaskedEdit').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraMaskedEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraMaskedEdit').GetText()\n\nSeS('SomeUltraMaskedEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraMaskedEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraMaskedEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraMaskedEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraMdiTabGroupControl/","title":"UltraMdiTabGroupControl","text":"<p>Infragistics UltraMdiTabGroupControl.</p> <p>UI element class: Infragistics.Win.UltraWinTabbedMdi.MdiTabGroupControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraMdiTabGroupControlBehavior</p>"},{"location":"Libraries/UltraMdiTabGroupControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/UltraMdiTabGroupControl/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/UltraMdiTabGroupControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraMdiTabGroupControl/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeUltraMdiTabGroupControl').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/UltraMdiTabGroupControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraMdiTabGroupControl/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeUltraMdiTabGroupControl').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraNumericEditor/","title":"UltraNumericEditor","text":"<p>Infragistics UltraNumericEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraNumericEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraNumericEditBehavior</p>"},{"location":"Libraries/UltraNumericEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraNumericEditor/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraNumericEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraNumericEditor/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeUltraNumericEditor').GetMaxValue()\n\nSeS('SomeUltraNumericEditor').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraNumericEditor/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeUltraNumericEditor').GetMinValue()\n\nSeS('SomeUltraNumericEditor').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraNumericEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraNumericEditor').GetText()\n\nSeS('SomeUltraNumericEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraNumericEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraNumericEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraNumericEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraOptionSet/","title":"UltraOptionSet","text":"<p>Infragistics UltraOptionSet</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraOptionSet</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraOptionSetBehavior</p>"},{"location":"Libraries/UltraOptionSet/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem Text Text of the selected item in a single string. GetText"},{"location":"Libraries/UltraOptionSet/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Performs click on the option set item"},{"location":"Libraries/UltraOptionSet/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraOptionSet/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex</p> <pre><code>value = SeS('SomeUltraOptionSet').GetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/UltraOptionSet/#selecteditem","title":"SelectedItem","text":"<p>Selected item of the object.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem</p> <pre><code>value = SeS('SomeUltraOptionSet').GetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/UltraOptionSet/#text","title":"Text","text":"<p>Text of the selected item in a single string.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeUltraOptionSet').GetText()\n</code></pre>"},{"location":"Libraries/UltraOptionSet/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraOptionSet/#doselectitem","title":"DoSelectItem","text":"<p>Performs click on the option set item</p> <pre><code>SeS('SomeUltraOptionSet').DoSelectItem(captionIndex)\n</code></pre> <p>Parameters:</p> Name Type Description captionIndex string | number index or caption of the item to be selected. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraPopupMenu/","title":"UltraPopupMenu","text":"<p>Infragistics UltraPopupMenu. UltraPopupMenu UI element class: Infragistics.Win.UltraWinToolbars.PopupMenuControlTrusted</p> <p>Extends ManagedObject</p> <p>Behavior Pattern: UltraPopupMenuControlBehavior</p> <p>Behavior Pattern: ManagedObjectGenericBehavior</p>"},{"location":"Libraries/UltraPopupMenu/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/UltraPopupMenu/#action-summary","title":"Action Summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/UltraPopupMenu/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraPopupMenu/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 8.0+.</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/UltraPopupMenu/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeUltraPopupMenu').GetY()\n</code></pre>"},{"location":"Libraries/UltraPopupMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraPopupMenu/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeUltraPopupMenu').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraPopupMenu/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeUltraPopupMenu').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UltraPopupMenu/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeUltraPopupMenu').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/UltraPopupMenu/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeUltraPopupMenu').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/UltraProgressBar/","title":"UltraProgressBar","text":"<p>Infragistics UltraProgressBar.</p> <p>UI element class: Infragistics.Win.UltraWinProgressBar.UltraProgressBar</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraProgressBarBehavior</p>"},{"location":"Libraries/UltraProgressBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter MaxValue Maximum value of the object or 'false' if value can't be read. GetMaxValue SetMaxValue MinValue Minimum value of the object or 'false' if value can't be read. GetMinValue SetMinValue Value Value of the object. GetValue SetValue"},{"location":"Libraries/UltraProgressBar/#action-summary","title":"Action Summary","text":"Action Description DoSetValue Sets value of this object."},{"location":"Libraries/UltraProgressBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraProgressBar/#maxvalue","title":"MaxValue","text":"<p>Maximum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMaxValue, SetMaxValue</p> <pre><code>value = SeS('SomeUltraProgressBar').GetMaxValue()\n\nSeS('SomeUltraProgressBar').SetMaxValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraProgressBar/#minvalue","title":"MinValue","text":"<p>Minimum value of the object or 'false' if value can't be read.</p> <p>Type: number|boolean</p> <p>Accessors: GetMinValue, SetMinValue</p> <pre><code>value = SeS('SomeUltraProgressBar').GetMinValue()\n\nSeS('SomeUltraProgressBar').SetMinValue(value)\n</code></pre> <p></p>"},{"location":"Libraries/UltraProgressBar/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeUltraProgressBar').GetValue()\n\nSeS('SomeUltraProgressBar').SetValue(value)\n</code></pre>"},{"location":"Libraries/UltraProgressBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraProgressBar/#dosetvalue","title":"DoSetValue","text":"<p>Sets value of this object.</p> <pre><code>SeS('SomeUltraProgressBar').DoSetValue(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number Value to set. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraRibbon/","title":"UltraRibbon","text":"<p>Infragistics UltraRibbon.</p> <p>UI element class: Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraRibbonControlBehavior</p>"},{"location":"Libraries/UltraRibbon/#property-summary","title":"Property Summary","text":"Property Description Getter Setter DropdownCount NUmber of dropdown controls. GetDropdownCount ItemValue Value of an item. GetItemValue ToggleState Toggle state of a button GetToggleState"},{"location":"Libraries/UltraRibbon/#action-summary","title":"Action Summary","text":"Action Description DoClickApplicationButton Clicks an application button on the ribbon. DoClickItem Clicks on an item on the ribbon. DoClickTab Clicks on a tab in the ribbon. DoItemDropSelect Clicks specific item in the drop control. DoMenu Performs click on the menu item."},{"location":"Libraries/UltraRibbon/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraRibbon/#dropdowncount","title":"DropdownCount","text":"<p>NUmber of dropdown controls.</p> <p>Getter Parameters:</p> Name Type Description caption string Name of a dropdown. <p>Type: number</p> <p>Accessors: GetDropdownCount</p> <pre><code>value = SeS('SomeUltraRibbon').GetDropdownCount(caption)\n</code></pre> <p></p>"},{"location":"Libraries/UltraRibbon/#itemvalue","title":"ItemValue","text":"<p>Value of an item.</p> <p>Getter Parameters:</p> Name Type Description caption string Name of an item. <p>Type: string|number|boolean</p> <p>Accessors: GetItemValue</p> <pre><code>value = SeS('SomeUltraRibbon').GetItemValue(caption)\n</code></pre> <p></p>"},{"location":"Libraries/UltraRibbon/#togglestate","title":"ToggleState","text":"<p>Toggle state of a button</p> <p>Getter Parameters:</p> Name Type Description caption string Name of a button. <p>Type: boolean</p> <p>Accessors: GetToggleState</p> <pre><code>value = SeS('SomeUltraRibbon').GetToggleState(caption)\n</code></pre>"},{"location":"Libraries/UltraRibbon/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraRibbon/#doclickapplicationbutton","title":"DoClickApplicationButton","text":"<p>Clicks an application button on the ribbon.</p> <pre><code>SeS('SomeUltraRibbon').DoClickApplicationButton(xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraRibbon/#doclickitem","title":"DoClickItem","text":"<p>Clicks on an item on the ribbon.</p> <pre><code>SeS('SomeUltraRibbon').DoClickItem(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of an item to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraRibbon/#doclicktab","title":"DoClickTab","text":"<p>Clicks on a tab in the ribbon.</p> <pre><code>SeS('SomeUltraRibbon').DoClickTab(caption, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of a tab to click. xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraRibbon/#doitemdropselect","title":"DoItemDropSelect","text":"<p>Clicks specific item in the drop control.</p> <pre><code>SeS('SomeUltraRibbon').DoItemDropSelect(caption, item)\n</code></pre> <p>Parameters:</p> Name Type Description caption string Caption of the drop control. item string Item to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraRibbon/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeUltraRibbon').DoMenu(path, separator)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraStatusBar/","title":"UltraStatusBar","text":"<p>Infragistics UltraStatusBar. UltraStatusBar UI element class: Infragistics.Win.UltraWinStatusBar.UltraStatusBar</p> <p>Extends ManagedObject</p> <p>Behavior Pattern: InfragisticsStatusBarBehavior</p>"},{"location":"Libraries/UltraStatusBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Status Bar Text. GetText"},{"location":"Libraries/UltraStatusBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraStatusBar/#text","title":"Text","text":"<p>Status Bar Text.</p> <p>Getter Parameters:</p> Name Type Description ind number Status bar section index. If not specified, the text of all sections is combined with ';' as a separator.Optional. <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeUltraStatusBar').GetText(/**number*/ind)\n</code></pre>"},{"location":"Libraries/UltraTabControl/","title":"UltraTabControl","text":"<p>Infragistics UltraTabControl.</p> <p>UI element class: Infragistics.Win.UltraWinTabControl.UltraTabControl</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraTabControlBehavior</p>"},{"location":"Libraries/UltraTabControl/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedTab Text of the selected tab GetSelectedTab"},{"location":"Libraries/UltraTabControl/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name."},{"location":"Libraries/UltraTabControl/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraTabControl/#selectedtab","title":"SelectedTab","text":"<p>Text of the selected tab</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeUltraTabControl').GetSelectedTab()\n</code></pre>"},{"location":"Libraries/UltraTabControl/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraTabControl/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name.</p> <pre><code>SeS('SomeUltraTabControl').DoSelectTab(tabName)\n</code></pre> <p>Parameters:</p> Name Type Description tabName string Tab name to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraTextEditor/","title":"UltraTextEditor","text":"<p>Infragistics UltraTextEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraTextEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/UltraTextEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraTextEditor/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraTextEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraTextEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraTextEditor').GetText()\n\nSeS('SomeUltraTextEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraTextEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraTextEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraTextEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraTimeZoneEditor/","title":"UltraTimeZoneEditor","text":"<p>Infragistics UltraTimeZoneEditor.</p> <p>UI element class: Infragistics.Win.UltraWinEditors.UltraTimeZoneEditor</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraComboBoxBehavior</p>"},{"location":"Libraries/UltraTimeZoneEditor/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedIndex Index of the selected element of the object. GetSelectedIndex SetSelectedIndex SelectedItem Selected item of the object. GetSelectedItem SetSelectedItem Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraTimeZoneEditor/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/UltraTimeZoneEditor/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraTimeZoneEditor/#selectedindex","title":"SelectedIndex","text":"<p>Index of the selected element of the object.</p> <p>Type: number</p> <p>Accessors: GetSelectedIndex, SetSelectedIndex</p> <pre><code>value = SeS('SomeUltraTimeZoneEditor').GetSelectedIndex()\n\nSeS('SomeUltraTimeZoneEditor').SetSelectedIndex()\n</code></pre> <p></p>"},{"location":"Libraries/UltraTimeZoneEditor/#selecteditem","title":"SelectedItem","text":"<p>Selected item of the object.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem, SetSelectedItem</p> <pre><code>value = SeS('SomeUltraTimeZoneEditor').GetSelectedItem()\n\nSeS('SomeUltraTimeZoneEditor').SetSelectedItem()\n</code></pre> <p></p>"},{"location":"Libraries/UltraTimeZoneEditor/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraTimeZoneEditor').GetText()\n\nSeS('SomeUltraTimeZoneEditor').SetText()\n</code></pre>"},{"location":"Libraries/UltraTimeZoneEditor/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraTimeZoneEditor/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeUltraTimeZoneEditor').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: ManagedObjectTextBehavior</p>"},{"location":"Libraries/UltraTimeZoneEditor/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/UltraTimeZoneEditor/#action-summary_1","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/UltraTimeZoneEditor/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/UltraTimeZoneEditor/#text_1","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeUltraTimeZoneEditor').GetText()\n\nSeS('SomeUltraTimeZoneEditor').SetText(value)\n</code></pre>"},{"location":"Libraries/UltraTimeZoneEditor/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/UltraTimeZoneEditor/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeUltraTimeZoneEditor').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/UltraTree/","title":"UltraTree","text":"<p>Infragistics UltraTree.</p> <p>UI element class: Infragistics.Win.UltraWinTree.UltraTree</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: UltraTreeBehavior</p>"},{"location":"Libraries/UltraTree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter CellText Cell text for the cell specified by rowPath and col GetCellText Checked Checked state of the selected node or a node specified by the input parameters. GetChecked ChildrenCount Number of children of the selected node or a node specified by the input parameters. GetChildrenCount Expanded Expanded state of the selected node or a node specified by the input parameters. GetExpanded IndexPath Index path of the specified or selected tree node i.e. GetIndexPath NodeElement GetNodeElement NodeText Text of the selected node or a node specified by the input parameters. GetNodeText Selected Selected state of the selected node or a node specified by the input parameters GetSelected Text ;-combined text of all selected nodes. GetText"},{"location":"Libraries/UltraTree/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Click the cell specified by row name or index and column name or index DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoSetCheck Set 'checked' state of the specified node"},{"location":"Libraries/UltraTree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/UltraTree/#celltext","title":"CellText","text":"<p>Cell text for the cell specified by rowPath and col</p> <p>Getter Parameters:</p> Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. column number | string Column index or column name. Default is 0Optional. <p>Type: string</p> <p>Accessors: GetCellText</p> <pre><code>value = SeS('SomeUltraTree').GetCellText(/**string|number*/ rowPath, /**number|string*/ column)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#checked","title":"Checked","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeUltraTree').GetChecked(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#childrencount","title":"ChildrenCount","text":"<p>Number of children of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeUltraTree').GetChildrenCount(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#expanded","title":"Expanded","text":"<p>Expanded state of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeUltraTree').GetExpanded(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#indexpath","title":"IndexPath","text":"<p>Index path of the specified or selected tree node i.e. string in form '0;5;2;1;6', 'false' if fails</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetIndexPath</p> <pre><code>value = SeS('SomeUltraTree').GetIndexPath(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#nodeelement","title":"NodeElement","text":"<p>Getter Parameters:</p> Name Type Description separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". column number | string Column index or column name. Default is 0Optional. <p>Type: undefined @param {string|number} path Path of the top level node to select. If integer number is passed then the top level node is searched by index.</p> <p>Accessors: GetNodeElement</p> <pre><code>value = SeS('SomeUltraTree').GetNodeElement(path, separator, pathType, column)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#nodetext","title":"NodeText","text":"<p>Text of the selected node or a node specified by the input parameters.</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: string|boolean</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeUltraTree').GetNodeText(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#selected","title":"Selected","text":"<p>Selected state of the selected node or a node specified by the input parameters</p> <p>Getter Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeUltraTree').GetSelected(path, separator, pathType)\n</code></pre> <p></p>"},{"location":"Libraries/UltraTree/#text","title":"Text","text":"<p>;-combined text of all selected nodes.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeUltraTree').GetText()\n</code></pre>"},{"location":"Libraries/UltraTree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/UltraTree/#doclickcell","title":"DoClickCell","text":"<p>Click the cell specified by row name or index and column name or index</p> <pre><code>SeS('SomeUltraTree').DoClickCell(rowPath, col, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description rowPath string | number Path of the top level node to select. If integer number is passed then the top level node is searched by index. col number | string Column index or column name clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraTree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeUltraTree').DoClickNode(path, separator, pathType, column, clickType, xOffset, yOffset)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". column number | string Column index or column name. Default is 0Optional. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". xOffset number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. yOffset number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraTree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeUltraTree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraTree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeUltraTree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/UltraTree/#dosetcheck","title":"DoSetCheck","text":"<p>Set 'checked' state of the specified node</p> <pre><code>SeS('SomeUltraTree').DoSetCheck(bcheck, path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Check state to set path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/VButton/","title":"VButton","text":"<p>Oracle Forms VButton.</p> <p>UI element class: oracle.forms.ui.VButton</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsButtonBehavior</p>"},{"location":"Libraries/VCheckbox/","title":"VCheckbox","text":"<p>OracleForms VCheckbox.</p> <p>UI element class: oracle.forms.ui.VCheckbox</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsCheckBehavior</p>"},{"location":"Libraries/VComboBox/","title":"VComboBox","text":"<p>Oracle Forms VComboBox.</p> <p>UI element class: oracle.forms.ui.VComboBox</p> <p>Extends VPopList</p> <p>Extends SeSSimulatedObject</p>"},{"location":"Libraries/VPopList/","title":"VPopList","text":"<p>Oracle Forms VPopList.</p> <p>UI element class: oracle.forms.ui.VPopList</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsChoiceBehavior</p>"},{"location":"Libraries/VPopList/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemIndexByName Returns item index by its name. GetItemIndexByName Value Value of the object. GetValue SetValue"},{"location":"Libraries/VPopList/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item of this object."},{"location":"Libraries/VPopList/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/VPopList/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeVPopList').GetItemIndexByName()\n</code></pre> <p></p>"},{"location":"Libraries/VPopList/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: text</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeVPopList').GetValue()\n\nSeS('SomeVPopList').SetValue()\n</code></pre>"},{"location":"Libraries/VPopList/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/VPopList/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item of this object.</p> <pre><code>SeS('SomeVPopList').DoSelectItem(item)\n</code></pre> <p>Parameters:</p> Name Type Description item string | number Item index or text value  to select. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/VSFlexGrid/","title":"VSFlexGrid","text":"<p>This behavior pattern implements standard behavior for Grid control.</p> <p>Extends ActiveXObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: VSFlexGridBehavior</p>"},{"location":"Libraries/VSFlexGrid/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Cell Text of the specified cell. GetCell SetCell ColumnCount Number of columns in the grid. GetColumnCount SetColumnCount ColumnName Caption of a column. GetColumnName SetColumnName Height Height of the object. GetHeight RowCount Number of rows in the grid. GetRowCount SetRowCount SelectedRow Checked state of the selected node or a node specified by the input parameters. GetSelectedRow SetSelectedRow SelectedRowCount Number of selected rows. GetSelectedRowCount SelectedRows Selected rows. GetSelectedRows SetSelectedRows Text Text of the currently focused cell. GetText SetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/VSFlexGrid/#action-summary","title":"Action Summary","text":"Action Description DoClickCell Clicks the specified cell. DoClickText Clicks on a specific text inside the grid. DoFullText Returns text representation of the grid."},{"location":"Libraries/VSFlexGrid/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/VSFlexGrid/#cell","title":"Cell","text":"<p>Text of the specified cell.</p> <p>Getter Parameters:</p> Name Type Description rowIndex number Zero-based index of the column. columnIndex number Zero-based index if the row. <p>Type: string</p> <p>Accessors: GetCell, SetCell</p> <pre><code>value = SeS('SomeVSFlexGrid').GetCell(/**number*/rowIndex, /**number*/columnIndex)\n\nSeS('SomeVSFlexGrid').SetCell(/**number*/rowIndex, /**number*/columnIndex, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#columncount","title":"ColumnCount","text":"<p>Number of columns in the grid.</p> <p>Type: number</p> <p>Accessors: GetColumnCount, SetColumnCount</p> <pre><code>value = SeS('SomeVSFlexGrid').GetColumnCount()\n\nSeS('SomeVSFlexGrid').SetColumnCount(/**number*/cols)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#columnname","title":"ColumnName","text":"<p>Caption of a column.</p> <p>Getter Parameters:</p> Name Type Description columnIndex number Zero-based index of the column. <p>Type: string</p> <p>Accessors: GetColumnName, SetColumnName</p> <pre><code>value = SeS('SomeVSFlexGrid').GetColumnName(/**number*/columnIndex)\n\nSeS('SomeVSFlexGrid').SetColumnName(/**number*/columnIndex, /**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeVSFlexGrid').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#rowcount","title":"RowCount","text":"<p>Number of rows in the grid.</p> <p>Type: number</p> <p>Accessors: GetRowCount, SetRowCount</p> <pre><code>value = SeS('SomeVSFlexGrid').GetRowCount()\n\nSeS('SomeVSFlexGrid').SetRowCount(/**number*/cols)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#selectedrow","title":"SelectedRow","text":"<p>Checked state of the selected node or a node specified by the input parameters.</p> <p>Type: boolean</p> <p>Accessors: GetSelectedRow, SetSelectedRow</p> <pre><code>value = SeS('SomeVSFlexGrid').GetSelectedRow()\n\nSeS('SomeVSFlexGrid').SetSelectedRow(/**number*/row,/**boolean*/sel)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#selectedrowcount","title":"SelectedRowCount","text":"<p>Number of selected rows.</p> <p>Type: number</p> <p>Accessors: GetSelectedRowCount</p> <pre><code>value = SeS('SomeVSFlexGrid').GetSelectedRowCount()\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#selectedrows","title":"SelectedRows","text":"<p>Selected rows.</p> <p>Getter Parameters:</p> Name Type Description asArray boolean If set to true, function returns an array. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Type: array|string</p> <p>Accessors: GetSelectedRows, SetSelectedRows</p> <pre><code>value = SeS('SomeVSFlexGrid').GetSelectedRows(/**boolean*/asArray, /**string*/separator)\n\nSeS('SomeVSFlexGrid').SetSelectedRows(/**boolean*/asArray, /**string*/separator, /**array|string*/values)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#text","title":"Text","text":"<p>Text of the currently focused cell.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeVSFlexGrid').GetText()\n\nSeS('SomeVSFlexGrid').SetText(/**string*/value)\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeVSFlexGrid').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeVSFlexGrid').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/VSFlexGrid/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeVSFlexGrid').GetY()\n</code></pre>"},{"location":"Libraries/VSFlexGrid/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/VSFlexGrid/#doclickcell","title":"DoClickCell","text":"<p>Clicks the specified cell.</p> <pre><code>SeS('SomeVSFlexGrid').DoClickCell(row, col, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description row number | string Zero-based index if the row or text of a cell in the specified column. col string | number Zero-based index of the column or column name. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/VSFlexGrid/#doclicktext","title":"DoClickText","text":"<p>Clicks on a specific text inside the grid.</p> <pre><code>SeS('SomeVSFlexGrid').DoClickText(textOrRegexp, clickType)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string Text (or regex: expression) to search in the grid. clickType string Type of click, can be one of \"L\" - left click, \"LD\" - double left click, \"R\" - right click, \"RD\" - double right click, \"M\" - middle click, \"MD\" - double middle click, \"N\" - don't click Possible values: \"L\", \"LD\", \"R\", \"RD\", \"M\", \"MD\", \"N\"Optional, Default: \"L\". <p>Returns:</p> <p>'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/VSFlexGrid/#dofulltext","title":"DoFullText","text":"<p>Returns text representation of the grid.</p> <pre><code>SeS('SomeVSFlexGrid').DoFullText(path, fmt)\n</code></pre> <p>Parameters:</p> Name Type Description path string Name of a file that should hold text representation of the grid.Optional. fmt number function () { }Optional. <p>Returns:</p> <p>string: Path to a file with grid text when 'path' param is defined. Otherwise return Grid text.</p> <p></p>"},{"location":"Libraries/VTextField/","title":"VTextField","text":"<p>Oracle Forms VTextField.</p> <p>UI element class: oracle.forms.ui.VTextField</p> <p>Extends OracleFormsObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: OracleFormsTextFieldBehavior</p>"},{"location":"Libraries/VTextField/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText Value Text of the object, 'false' if text can not be read. GetValue SetValue"},{"location":"Libraries/VTextField/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/VTextField/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/VTextField/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeVTextField').GetText()\n\nSeS('SomeVTextField').SetText()\n</code></pre> <p></p>"},{"location":"Libraries/VTextField/#value","title":"Value","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeVTextField').GetValue()\n\nSeS('SomeVTextField').SetValue()\n</code></pre>"},{"location":"Libraries/VTextField/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/VTextField/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeVTextField').DoSetText(val, bvalidate)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. bvalidate boolean Force validation of entered value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/","title":"ValueListDropDownUnsafe","text":"<p>Infragistics ValueListDropDownUnsafe.</p> <p>UI element class: Infragistics.Win.ValueListDropDownUnsafe</p> <p>Extends ManagedObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: ManagedComboItemBehavior</p> <p>Behavior Pattern: ManagedObjectGenericBehavior</p>"},{"location":"Libraries/ValueListDropDownUnsafe/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ControlType Type of the object. GetControlType Enabled 'Enabled' state of the element. GetEnabled Height Height of the object. GetHeight Visible Returns <code>true</code> if the element is visible on screen. GetVisible Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/ValueListDropDownUnsafe/#action-summary","title":"Action Summary","text":"Action Description DoDumpWidget Dumps Spy data for the object. DoFindByName Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoFindByText Find nested element by its text (Value, Name of each element are compared with specified text or regular expression). DoGetWidgetProperty Returns the value of a property with a given name."},{"location":"Libraries/ValueListDropDownUnsafe/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/ValueListDropDownUnsafe/#controltype","title":"ControlType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetControlType</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetControlType()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#enabled","title":"Enabled","text":"<p>'Enabled' state of the element.</p> <p>Type: boolean</p> <p>Accessors: GetEnabled</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetEnabled()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#visible","title":"Visible","text":"<p>Returns <code>true</code> if the element is visible on screen. Requires Rapise 8.0+.</p> <p>Type: boolean</p> <p>Accessors: GetVisible</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetVisible()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/ValueListDropDownUnsafe/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeValueListDropDownUnsafe').GetY()\n</code></pre>"},{"location":"Libraries/ValueListDropDownUnsafe/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/ValueListDropDownUnsafe/#dodumpwidget","title":"DoDumpWidget","text":"<p>Dumps Spy data for the object.</p> <pre><code>SeS('SomeValueListDropDownUnsafe').DoDumpWidget(dumpProperties, maxDepth, trimValue, indent, filePath, append, ignoreProps)\n</code></pre> <p>Parameters:</p> Name Type Description dumpProperties boolean If 'true' then includes properties to the result.Optional, Default: \"false\". maxDepth number Determines max recursion depth. If '0' then dumps current object only, if '1' - dumps direct children as well, etc. If '-1' then dumps the whole subtree of objects.Optional, Default: \"0\". trimValue number Determines maximum length of a property value. Excess characters are truncated.Optional, Default: \"256\". indent string Indentation string for child objects and properties.Optional, Default: \"\\\". filePath string If 'filePath' is set then outputs result to corresponding file.Optional, Default: \"\". append boolean If 'true' then file should be overwritten, if 'false' then data should be appended.Optional, Default: \"false\". ignoreProps Array Contains the names of the properties which must be ignored when writing into a file.Optional, Default: \"undefined\". <p>Returns:</p> <p>string | boolean: Object data if 'filePath' is not set, 'true' if file write succeeded, 'false' - otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/ValueListDropDownUnsafe/#dofindbyname","title":"DoFindByName","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeValueListDropDownUnsafe').DoFindByName(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/ValueListDropDownUnsafe/#dofindbytext","title":"DoFindByText","text":"<p>Find nested element by its text (Value, Name of each element are compared with specified text or regular expression).</p> <pre><code>SeS('SomeValueListDropDownUnsafe').DoFindByText(textOrRegexp, depth)\n</code></pre> <p>Parameters:</p> Name Type Description textOrRegexp string plain string or regexp:... expression to match depth number depth level for search (default is 3)Optional, Default: \"3\". <p>Returns:</p> <p>object: Object containing text if found, null otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/ValueListDropDownUnsafe/#dogetwidgetproperty","title":"DoGetWidgetProperty","text":"<p>Returns the value of a property with a given name. Names of available properties can be seen in Spy.</p> <pre><code>SeS('SomeValueListDropDownUnsafe').DoGetWidgetProperty(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Property name. <p>Returns:</p> <p>string: Property value if successful, an empty string if the property can not be found.</p> <p></p>"},{"location":"Libraries/WebDriver/","title":"WebDriver","text":"<p>This is a JavaScript wrapper for RemoteWebDriver of Selenium .NET library.</p>"},{"location":"Libraries/WebDriver/#action-summary","title":"Action Summary","text":"Action Description Actions Gets Actions object. AlertIsPresent Checks if alert is displayed. Cleanup Cleans up folders created by temporary Chrome profiles in <code>C:\\Windows\\SystemTemp</code>. ClearSessions Deletes active sessions on Selenium grid. Close Close the Browser and Dispose of WebDriver. Cookies Gets Cookies object. CreateDriver This will create a WebDriver for currently selected Browser profile. CreateDriverForSession Connects to active Selenium session with given URL and Id. CreatePointerInput Gets PointerInputDevice object. Dispose Dispose of WebDriver. DownloadDriver This will download required binary (e.g. DumpSessions Prints information about active Selenium sessions to output. ExecuteScript Executes JavaScript in the context of the currently selected frame or window. FindElement Finds the first element on the page that matches By selector. FindElementByClassName Finds the first element on the page that matches the CSS Class supplied. FindElementByCssSelector Finds the first element matching the specified CSS selector. FindElementById Finds the first element on the page that matches the ID supplied. FindElementByLinkText Finds the first of elements that match the link text supplied. FindElementByName Finds the first of elements that match the name supplied. FindElementByPartialLinkText Finds the first of elements that match the part of the link text supplied. FindElementByTagName Finds the first of elements that match the DOM Tag supplied. FindElementByXPath Finds the first of elements that match the XPath supplied. FindElements Finds a list of elements that match the supplied By object. FindElementsByClassName Finds a list of elements that match the class name supplied. FindElementsByCssSelector Finds all elements matching the specified CSS selector. FindElementsById Finds the first element on the page that matches the ID supplied. FindElementsByLinkText Finds a list of elements that match the link text supplied. FindElementsByName Finds a list of elements that match the name supplied. FindElementsByPartialLinkText Finds a list of elements that match the part of the link text supplied. FindElementsByTagName Finds a list of elements that match the DOM Tag supplied. FindElementsByXPath Finds a list of elements that match the XPath supplied. GetAddressOfRemoteServer GetBrowserVersion GetCurrentWindowHandle Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance. GetDebuggerAddress GetPageSource Gets the source of the page last loaded by the browser. GetScreenshot Gets the screenshot of the page. GetSessionId GetTitle Gets the title of the current browser window. GetUrl Gets the URL the browser is currently displaying. GetWindowHandles Gets the window handles of open browser windows. Navigate Gets Navigation object with the following actions: Back, Forward, Refresh, GotToUrl(url). PerformActions Performs W3C actions. Quit Disconnects from the Browser. ReconnectSession Reads session information produced by SaveSession and connects to the mobile target. SaveSession Saves session information for use by ReconnectSession. SetBrowserSize Sets size of a browser window. SetUrl Sets the URL the browser is currently displaying. SwitchToAlert Switches to the currently active modal dialog for this particular driver instance. SwitchToDefaultContent Change the active frame to the default. SwitchToFrame Move to different frame using its element. SwitchToLastWindow Switch to last browser window. SwitchToParentFrame Select the parent frame of the currently selected frame. SwitchToWindow Switch to window specified by handle. Window Gets Window object."},{"location":"Libraries/WebDriver/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/WebDriver/#actions","title":"Actions","text":"<p>Gets Actions object.</p> <pre><code>WebDriver.Actions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#alertispresent","title":"AlertIsPresent","text":"<p>Checks if alert is displayed.</p> <pre><code>WebDriver.AlertIsPresent()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#cleanup","title":"Cleanup","text":"<p>Cleans up folders created by temporary Chrome profiles in <code>C:\\Windows\\SystemTemp</code>. These folders are named as scoped_dir* and may occupy significant disk space. Requires Rapise 8.3+.</p> <pre><code>WebDriver.Cleanup()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#clearsessions","title":"ClearSessions","text":"<p>Deletes active sessions on Selenium grid.</p> <pre><code>WebDriver.ClearSessions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#close","title":"Close","text":"<p>Close the Browser and Dispose of WebDriver.</p> <pre><code>WebDriver.Close()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#cookies","title":"Cookies","text":"<p>Gets Cookies object.</p> <pre><code>WebDriver.Cookies()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#createdriver","title":"CreateDriver","text":"<p>This will create a WebDriver for currently selected Browser profile.</p> <pre><code>WebDriver.CreateDriver(nonProfileCapsJson)\n</code></pre> <p>Parameters:</p> Name Type Description nonProfileCapsJson object JSON object with capabilities not available in a Browser profile. <p>Returns:</p> <p>WebDriver object.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#createdriverforsession","title":"CreateDriverForSession","text":"<p>Connects to active Selenium session with given URL and Id.</p> <pre><code>WebDriver.CreateDriverForSession(addressOfRemoteServer, sessionId, driverServiceProcessId, debuggerAddress, browserVersion)\n</code></pre> <p>Parameters:</p> Name Type Description addressOfRemoteServer Selenium server URL. sessionId Id of the session to connect. driverServiceProcessId Process id for the driver executable. debuggerAddress Debugger address for DevTools connection. browserVersion Browser version for DevTools connection. <p>Returns:</p> <p>true if successful, false otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#createpointerinput","title":"CreatePointerInput","text":"<p>Gets PointerInputDevice object. Requires Rapise 8.2+.</p> <pre><code>var element = WebDriver.FindElementByXPath(\"//button[@id='Login']\");\nvar p = WebDriver.CreatePointerInput(\"Mouse\", \"pointer\");\nvar sequence = p.CreateActionSequence(p);\nvar move = p.CreatePointerMoveElement(element, 5, 5, 0);\nvar actionPress = p.CreatePointerDown(\"Left\");\nvar pause = p.CreatePause(50);\nvar actionRelease = p.CreatePointerUp(\"Left\");\n\nsequence.AddAction(move);\nsequence.AddAction(actionPress);\nsequence.AddAction(pause);\nsequence.AddAction(actionRelease);\n\nWebDriver.PerformActions(sequence);\n</code></pre> <pre><code>WebDriver.CreatePointerInput(kind, name)\n</code></pre> <p>Parameters:</p> Name Type Description kind string Touch, Mouse or Pen. name string Name of the pointer device. Whatever you like. <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#dispose","title":"Dispose","text":"<p>Dispose of WebDriver.</p> <pre><code>WebDriver.Dispose()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#downloaddriver","title":"DownloadDriver","text":"<p>This will download required binary (e.g. chromedriver.exe) for currently selected Browser profile. Requires Rapise 7.2+</p> <pre><code>WebDriver.DownloadDriver(driverVersion)\n</code></pre> <p>Parameters:</p> Name Type Description driverVersion string Version of the driver executable.Optional. <p>Returns:</p> <p><code>true</code> if successful, otherwise - <code>false</code>.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#dumpsessions","title":"DumpSessions","text":"<p>Prints information about active Selenium sessions to output.</p> <pre><code>WebDriver.DumpSessions()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#executescript","title":"ExecuteScript","text":"<p>Executes JavaScript in the context of the currently selected frame or window.</p> <pre><code>WebDriver.ExecuteScript(script, args)\n</code></pre> <p>Parameters:</p> Name Type Description script string The JavaScript code to execute. args array The arguments to the script. <p>Returns:</p> <p>Null, string or element depending on the script.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelement","title":"FindElement","text":"<p>Finds the first element on the page that matches By selector. Requires Rapise 8.3+.</p> <pre><code>WebDriver.FindElement(by, by)\n</code></pre> <p>Parameters:</p> Name Type Description by By By object. by By By object <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbyclassname","title":"FindElementByClassName","text":"<p>Finds the first element on the page that matches the CSS Class supplied.</p> <pre><code>WebDriver.FindElementByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string CSS class name of the element. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbycssselector","title":"FindElementByCssSelector","text":"<p>Finds the first element matching the specified CSS selector.</p> <pre><code>WebDriver.FindElementByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p>Returns:</p> <p>element ot null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbyid","title":"FindElementById","text":"<p>Finds the first element on the page that matches the ID supplied.</p> <pre><code>WebDriver.FindElementById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbylinktext","title":"FindElementByLinkText","text":"<p>Finds the first of elements that match the link text supplied.</p> <pre><code>WebDriver.FindElementByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText string Link text of element. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbyname","title":"FindElementByName","text":"<p>Finds the first of elements that match the name supplied.</p> <pre><code>WebDriver.FindElementByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbypartiallinktext","title":"FindElementByPartialLinkText","text":"<p>Finds the first of elements that match the part of the link text supplied.</p> <pre><code>WebDriver.FindElementByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbytagname","title":"FindElementByTagName","text":"<p>Finds the first of elements that match the DOM Tag supplied.</p> <pre><code>WebDriver.FindElementByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementbyxpath","title":"FindElementByXPath","text":"<p>Finds the first of elements that match the XPath supplied.</p> <pre><code>WebDriver.FindElementByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelements","title":"FindElements","text":"<p>Finds a list of elements that match the supplied By object. Requires Rapise 8.3+.</p> <pre><code>WebDriver.FindElements(by, by)\n</code></pre> <p>Parameters:</p> Name Type Description by By By object. by By By object <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbyclassname","title":"FindElementsByClassName","text":"<p>Finds a list of elements that match the class name supplied.</p> <pre><code>WebDriver.FindElementsByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string className of the element. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbycssselector","title":"FindElementsByCssSelector","text":"<p>Finds all elements matching the specified CSS selector.</p> <pre><code>WebDriver.FindElementsByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbyid","title":"FindElementsById","text":"<p>Finds the first element on the page that matches the ID supplied.</p> <pre><code>WebDriver.FindElementsById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbylinktext","title":"FindElementsByLinkText","text":"<p>Finds a list of elements that match the link text supplied.</p> <pre><code>WebDriver.FindElementsByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText Link text of element. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbyname","title":"FindElementsByName","text":"<p>Finds a list of elements that match the name supplied.</p> <pre><code>WebDriver.FindElementsByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbypartiallinktext","title":"FindElementsByPartialLinkText","text":"<p>Finds a list of elements that match the part of the link text supplied.</p> <pre><code>WebDriver.FindElementsByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbytagname","title":"FindElementsByTagName","text":"<p>Finds a list of elements that match the DOM Tag supplied.</p> <pre><code>WebDriver.FindElementsByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#findelementsbyxpath","title":"FindElementsByXPath","text":"<p>Finds a list of elements that match the XPath supplied.</p> <pre><code>WebDriver.FindElementsByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getaddressofremoteserver","title":"GetAddressOfRemoteServer","text":"<pre><code>WebDriver.GetAddressOfRemoteServer()\n</code></pre> <p>Returns:</p> <p>URL of the remote Selenium server.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getbrowserversion","title":"GetBrowserVersion","text":"<pre><code>WebDriver.GetBrowserVersion()\n</code></pre> <p>Returns:</p> <p>browser version of the remote Selenium server.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getcurrentwindowhandle","title":"GetCurrentWindowHandle","text":"<p>Gets the current window handle, which is an opaque handle to this window that uniquely identifies it within this driver instance.</p> <pre><code>WebDriver.GetCurrentWindowHandle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getdebuggeraddress","title":"GetDebuggerAddress","text":"<pre><code>WebDriver.GetDebuggerAddress()\n</code></pre> <p>Returns:</p> <p>debugger address of the remote Selenium server.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getpagesource","title":"GetPageSource","text":"<p>Gets the source of the page last loaded by the browser.</p> <pre><code>WebDriver.GetPageSource()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getscreenshot","title":"GetScreenshot","text":"<p>Gets the screenshot of the page.</p> <pre><code>WebDriver.GetScreenshot()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getsessionid","title":"GetSessionId","text":"<pre><code>WebDriver.GetSessionId()\n</code></pre> <p>Returns:</p> <p>Id of the current session.</p> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#gettitle","title":"GetTitle","text":"<p>Gets the title of the current browser window.</p> <pre><code>WebDriver.GetTitle()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#geturl","title":"GetUrl","text":"<p>Gets the URL the browser is currently displaying.</p> <pre><code>WebDriver.GetUrl()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#getwindowhandles","title":"GetWindowHandles","text":"<p>Gets the window handles of open browser windows.</p> <pre><code>WebDriver.GetWindowHandles()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#navigate","title":"Navigate","text":"<p>Gets Navigation object with the following actions: Back, Forward, Refresh, GotToUrl(url).</p> <p>Example:</p> <pre><code>WebDriver.Navigate().Back();\n</code></pre> <pre><code>WebDriver.Navigate()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#performactions","title":"PerformActions","text":"<p>Performs W3C actions. Requires Rapise 8.2+. See CreatePointerInput for usage example.</p> <pre><code>WebDriver.PerformActions(sequence)\n</code></pre> <p>Parameters:</p> Name Type Description sequence ActionSequence Array of ActionSequence objects. <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#quit","title":"Quit","text":"<p>Disconnects from the Browser.</p> <pre><code>WebDriver.Quit()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#reconnectsession","title":"ReconnectSession","text":"<p>Reads session information produced by SaveSession and connects to the mobile target.</p> <pre><code>WebDriver.ReconnectSession(autoCreate)\n</code></pre> <p>Parameters:</p> Name Type Description autoCreate boolean 'true' to automatically create a new session if there is no saved session or saved session is not available anymore.Optional, Default: \"false\". <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#savesession","title":"SaveSession","text":"<p>Saves session information for use by ReconnectSession.</p> <pre><code>WebDriver.SaveSession()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#setbrowsersize","title":"SetBrowserSize","text":"<p>Sets size of a browser window.</p> <pre><code>WebDriver.SetBrowserSize(width, height)\n</code></pre> <p>Parameters:</p> Name Type Description width number Window width to set height number Window height to set <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#seturl","title":"SetUrl","text":"<p>Sets the URL the browser is currently displaying.</p> <pre><code>WebDriver.SetUrl(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string The URL to display <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtoalert","title":"SwitchToAlert","text":"<p>Switches to the currently active modal dialog for this particular driver instance.</p> <pre><code>WebDriver.SwitchToAlert()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtodefaultcontent","title":"SwitchToDefaultContent","text":"<p>Change the active frame to the default.</p> <pre><code>WebDriver.SwitchToDefaultContent()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtoframe","title":"SwitchToFrame","text":"<p>Move to different frame using its element.</p> <pre><code>WebDriver.SwitchToFrame(el)\n</code></pre> <p>Parameters:</p> Name Type Description el WebElementWrapper Element of the frame. <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtolastwindow","title":"SwitchToLastWindow","text":"<p>Switch to last browser window.</p> <pre><code>WebDriver.SwitchToLastWindow()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtoparentframe","title":"SwitchToParentFrame","text":"<p>Select the parent frame of the currently selected frame.</p> <pre><code>WebDriver.SwitchToParentFrame()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#switchtowindow","title":"SwitchToWindow","text":"<p>Switch to window specified by handle.</p> <pre><code>WebDriver.SwitchToWindow(windowHandle)\n</code></pre> <p>Parameters:</p> Name Type Description windowHandle <p></p> <p> </p>"},{"location":"Libraries/WebDriver/#window","title":"Window","text":"<p>Gets Window object.</p> <pre><code>WebDriver.Window()\n</code></pre> <p></p>"},{"location":"Libraries/WebElementWrapper/","title":"WebElementWrapper","text":"<p>This is a JavaScript wrapper for RemoteWebElement of Selenium .NET library. For code complete feature use class name WebElementWrapper, e.g. </p> <p><code>var /**WebElementWrapper*/element = WebDriver.FindElementById('username');</code></p>"},{"location":"Libraries/WebElementWrapper/#action-summary","title":"Action Summary","text":"Action Description Clear Clears the content of this element. Click Clicks this element. ClickAt Clicks this element at the specified location. ContextClick Opens context menu for this element. ContextClickAt Opens context menu for this element. DoubleClick Performs double click on this element. DoubleClickAt Performs double click on this element. FindElement Finds the first descendant element that matches By selector. FindElementByClassName Finds the first descendant element that matches the CSS Class supplied. FindElementByCssSelector Finds the first descendant element matching the specified CSS selector. FindElementById Finds the first descendant element that matches the ID supplied. FindElementByLinkText Finds the first of descendant elements that match the link text supplied. FindElementByName Finds the first of descendant elements that match the name supplied. FindElementByPartialLinkText Finds the first of descendant elements that match the part of the link text supplied. FindElementByTagName Finds the first of descendant elements that match the DOM Tag supplied. FindElementByXPath Finds the first of descendant elements that match the XPath supplied. FindElements Finds a list of descendant elements that match the supplied By object. FindElementsByClassName Finds all decendant elements that match the class name supplied. FindElementsByCssSelector Finds all descendant elements matching the specified CSS selector. FindElementsById Finds all descendant elements that matche the ID supplied. FindElementsByLinkText Finds all descendant elements that match the link text supplied. FindElementsByName Finds all descendant elements that match the name supplied. FindElementsByPartialLinkText Finds all descendant elements that match the part of the link text supplied. FindElementsByTagName Finds all descendant elements that match the DOM Tag supplied. FindElementsByXPath Finds all descendant elements that match the XPath supplied. GetAttribute Gets the value of the specified attribute for this element. GetComputedAccessibleLabel Gets the computed accessible label of this element. GetComputedAccessibleRole Gets the computed accessible role of this element. GetCoordinates Gets a <code>Point</code> object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetCssValue Gets the value of a CSS property of this element. GetDisplayed Gets a value indicating whether or not this element is displayed. GetDomAttribute Gets the value of a declared HTML attribute of this element. GetDomProperty Gets the value of a JavaScript property of this element. GetEnabled Gets a value indicating whether or not this element is enabled. GetHashCode Method to get the hash code of the element. GetId Gets internal element id. GetLocation Gets a <code>Point</code> object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page. GetLocationOnScreenOnceScrolledIntoView Gets the point where the element would be when scrolled into view. GetScreenshotIW Gets screenshot of the element. GetSelected Gets a value indicating whether or not this element is selected. GetSize Gets a 'Size' object containing the height and width of this element. GetTagName Gets the tag name of this element. GetText Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed. SelectOptionByText Selects option from select element. SendKeys Simulates typing text into the element. Submit Submits this element to the web server."},{"location":"Libraries/WebElementWrapper/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/WebElementWrapper/#clear","title":"Clear","text":"<p>Clears the content of this element.</p> <pre><code>element.Clear()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#click","title":"Click","text":"<p>Clicks this element.</p> <pre><code>element.Click()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#clickat","title":"ClickAt","text":"<p>Clicks this element at the specified location.</p> <pre><code>element.ClickAt(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number Horizontal offset from the top-left corner of the element. y number Vertical offset from the top-left corner of the element. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#contextclick","title":"ContextClick","text":"<p>Opens context menu for this element.</p> <pre><code>element.ContextClick()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#contextclickat","title":"ContextClickAt","text":"<p>Opens context menu for this element. Requires Rapise 8.3+.</p> <pre><code>element.ContextClickAt(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number Horizontal offset from the top-left corner of the element. y number Vertical offset from the top-left corner of the element. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#doubleclick","title":"DoubleClick","text":"<p>Performs double click on this element.</p> <pre><code>element.DoubleClick()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#doubleclickat","title":"DoubleClickAt","text":"<p>Performs double click on this element. Requires Rapise 8.3+.</p> <pre><code>element.DoubleClickAt(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number Horizontal offset from the top-left corner of the element. y number Vertical offset from the top-left corner of the element. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelement","title":"FindElement","text":"<p>Finds the first descendant element that matches By selector. Requires Rapise 8.3+.</p> <pre><code>element.FindElement(by)\n</code></pre> <p>Parameters:</p> Name Type Description by By By object. <p>Returns:</p> <p>element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbyclassname","title":"FindElementByClassName","text":"<p>Finds the first descendant element that matches the CSS Class supplied.</p> <pre><code>element.FindElementByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string CSS class name of the element. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbycssselector","title":"FindElementByCssSelector","text":"<p>Finds the first descendant element matching the specified CSS selector.</p> <pre><code>element.FindElementByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p>Returns:</p> <p>WebElementWrapper: element ot null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbyid","title":"FindElementById","text":"<p>Finds the first descendant element that matches the ID supplied.</p> <pre><code>WebDriver.FindElementByTagName('section').FindElementById('h3')\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbylinktext","title":"FindElementByLinkText","text":"<p>Finds the first of descendant elements that match the link text supplied.</p> <pre><code>element.FindElementByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText string Link text of element. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbyname","title":"FindElementByName","text":"<p>Finds the first of descendant elements that match the name supplied.</p> <pre><code>element.FindElementByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbypartiallinktext","title":"FindElementByPartialLinkText","text":"<p>Finds the first of descendant elements that match the part of the link text supplied.</p> <pre><code>element.FindElementByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbytagname","title":"FindElementByTagName","text":"<p>Finds the first of descendant elements that match the DOM Tag supplied.</p> <pre><code>element.FindElementByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementbyxpath","title":"FindElementByXPath","text":"<p>Finds the first of descendant elements that match the XPath supplied.</p> <pre><code>element.FindElementByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p>Returns:</p> <p>WebElementWrapper: element or null.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelements","title":"FindElements","text":"<p>Finds a list of descendant elements that match the supplied By object. Requires Rapise 8.3+.</p> <pre><code>element.FindElements(by)\n</code></pre> <p>Parameters:</p> Name Type Description by By By object. <p>Returns:</p> <p>array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbyclassname","title":"FindElementsByClassName","text":"<p>Finds all decendant elements that match the class name supplied.</p> <pre><code>element.FindElementsByClassName(className)\n</code></pre> <p>Parameters:</p> Name Type Description className string className of the element. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbycssselector","title":"FindElementsByCssSelector","text":"<p>Finds all descendant elements matching the specified CSS selector.</p> <pre><code>element.FindElementsByCssSelector(cssSelector)\n</code></pre> <p>Parameters:</p> Name Type Description cssSelector string The CSS selector to match. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbyid","title":"FindElementsById","text":"<p>Finds all descendant elements that matche the ID supplied.</p> <pre><code>element.FindElementsById(id)\n</code></pre> <p>Parameters:</p> Name Type Description id string ID of the element. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbylinktext","title":"FindElementsByLinkText","text":"<p>Finds all descendant elements that match the link text supplied.</p> <pre><code>element.FindElementsByLinkText(linkText)\n</code></pre> <p>Parameters:</p> Name Type Description linkText string Link text of element. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbyname","title":"FindElementsByName","text":"<p>Finds all descendant elements that match the name supplied.</p> <pre><code>element.FindElementsByName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of the element on the page. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbypartiallinktext","title":"FindElementsByPartialLinkText","text":"<p>Finds all descendant elements that match the part of the link text supplied.</p> <pre><code>element.FindElementsByPartialLinkText(partialLinkText)\n</code></pre> <p>Parameters:</p> Name Type Description partialLinkText string Part of the link text. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbytagname","title":"FindElementsByTagName","text":"<p>Finds all descendant elements that match the DOM Tag supplied.</p> <pre><code>element.FindElementsByTagName(tagName)\n</code></pre> <p>Parameters:</p> Name Type Description tagName string DOM tag Name of the element being searched. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#findelementsbyxpath","title":"FindElementsByXPath","text":"<p>Finds all descendant elements that match the XPath supplied.</p> <pre><code>element.FindElementsByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string xpath to the element. <p>Returns:</p> <p>WebElementWrapper: array of elements.</p> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getattribute","title":"GetAttribute","text":"<p>Gets the value of the specified attribute for this element.</p> <pre><code>element.GetAttribute(attributeName)\n</code></pre> <p>Parameters:</p> Name Type Description attributeName string Name of the element attribute. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getcomputedaccessiblelabel","title":"GetComputedAccessibleLabel","text":"<p>Gets the computed accessible label of this element. Requires Rapise 8.3+.</p> <pre><code>element.GetComputedAccessibleLabel()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getcomputedaccessiblerole","title":"GetComputedAccessibleRole","text":"<p>Gets the computed accessible role of this element. Requires Rapise 8.3+.</p> <pre><code>element.GetComputedAccessibleRole()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getcoordinates","title":"GetCoordinates","text":"<p>Gets a <code>Point</code> object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page.</p> <pre><code>element.GetCoordinates()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getcssvalue","title":"GetCssValue","text":"<p>Gets the value of a CSS property of this element.</p> <pre><code>element.GetCssValue(propertyName)\n</code></pre> <p>Parameters:</p> Name Type Description propertyName <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getdisplayed","title":"GetDisplayed","text":"<p>Gets a value indicating whether or not this element is displayed.</p> <pre><code>element.GetDisplayed()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getdomattribute","title":"GetDomAttribute","text":"<p>Gets the value of a declared HTML attribute of this element. Requires Rapise 8.3+.</p> <pre><code>element.GetDomAttribute(attributeName)\n</code></pre> <p>Parameters:</p> Name Type Description attributeName string Name of the declared element attribute. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getdomproperty","title":"GetDomProperty","text":"<p>Gets the value of a JavaScript property of this element. Requires Rapise 8.3+.</p> <pre><code>element.GetDomProperty(propertyName)\n</code></pre> <p>Parameters:</p> Name Type Description propertyName string Name of the DOM property to read. <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getenabled","title":"GetEnabled","text":"<p>Gets a value indicating whether or not this element is enabled.</p> <pre><code>element.GetEnabled()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#gethashcode","title":"GetHashCode","text":"<p>Method to get the hash code of the element.</p> <pre><code>element.GetHashCode()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getid","title":"GetId","text":"<p>Gets internal element id.</p> <pre><code>element.GetId()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getlocation","title":"GetLocation","text":"<p>Gets a <code>Point</code> object containing the coordinates of the upper-left corner of this element relative to the upper-left corner of the page.</p> <pre><code>element.GetLocation()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getlocationonscreenoncescrolledintoview","title":"GetLocationOnScreenOnceScrolledIntoView","text":"<p>Gets the point where the element would be when scrolled into view.</p> <pre><code>element.GetLocationOnScreenOnceScrolledIntoView()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getscreenshotiw","title":"GetScreenshotIW","text":"<p>Gets screenshot of the element.</p> <pre><code>element.GetScreenshotIW()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getselected","title":"GetSelected","text":"<p>Gets a value indicating whether or not this element is selected.</p> <pre><code>element.GetSelected()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#getsize","title":"GetSize","text":"<p>Gets a 'Size' object containing the height and width of this element.</p> <pre><code>element.GetSize()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#gettagname","title":"GetTagName","text":"<p>Gets the tag name of this element.</p> <pre><code>element.GetTagName()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#gettext","title":"GetText","text":"<p>Gets the innerText of this element, without any leading or trailing whitespace, and with other whitespace collapsed.</p> <pre><code>element.GetText()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#selectoptionbytext","title":"SelectOptionByText","text":"<p>Selects option from select element.</p> <pre><code>element.SelectOptionByText(option)\n</code></pre> <p>Parameters:</p> Name Type Description option <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#sendkeys","title":"SendKeys","text":"<p>Simulates typing text into the element.</p> <pre><code>element.SendKeys(text)\n</code></pre> <p>Parameters:</p> Name Type Description text <p></p> <p> </p>"},{"location":"Libraries/WebElementWrapper/#submit","title":"Submit","text":"<p>Submits this element to the web server.</p> <pre><code>element.Submit()\n</code></pre> <p></p>"},{"location":"Libraries/Win32Button/","title":"Win32Button","text":"<p>This is generic Win32 button. Use DoAction to press it.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Pressable</p>"},{"location":"Libraries/Win32Button/#action-summary","title":"Action Summary","text":"Action Description DoAction Presses the button."},{"location":"Libraries/Win32Button/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32Button/#doaction","title":"DoAction","text":"<p>Presses the button.</p> <pre><code>SeS('SomeWin32Button').DoAction()\n</code></pre> <p></p>"},{"location":"Libraries/Win32CheckButton/","title":"Win32CheckButton","text":"<p>This is generic Win32 check box. Use DoAction to toggle its state.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32CheckBox</p>"},{"location":"Libraries/Win32CheckButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/Win32CheckButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/Win32CheckButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32CheckButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeWin32CheckButton').GetChecked()\n\nSeS('SomeWin32CheckButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/Win32CheckButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32CheckButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeWin32CheckButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Win32ComboBox/","title":"Win32ComboBox","text":"<p>This is generic Win32 combo box. Use DoSelectItem to select a particular item.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32ComboBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ComboBox/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32ComboBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32ComboBox/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ComboBox').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ComboBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32ComboBox/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32ComboBox').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32ComboBoxEdit/","title":"Win32ComboBoxEdit","text":"<p>This is generic Win32 editable combo box. Use DoSelectItem to select a particular item and DoSetText to set a custom value.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32TextEditable</p>"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/Win32ComboBoxEdit/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeWin32ComboBoxEdit').GetText()\n\nSeS('SomeWin32ComboBoxEdit').SetText(value)\n</code></pre>"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeWin32ComboBoxEdit').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary_1","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32ComboBoxEdit/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ComboBoxEdit').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32ComboBoxEdit').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCombo</p>"},{"location":"Libraries/Win32ComboBoxEdit/#property-summary_2","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ComboBoxEdit/#action-summary_2","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32ComboBoxEdit/#property-detail_2","title":"Property Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ComboBoxEdit').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ComboBoxEdit/#action-detail_2","title":"Action Detail","text":""},{"location":"Libraries/Win32ComboBoxEdit/#doselectitem_1","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32ComboBoxEdit').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32ContextMenu/","title":"Win32ContextMenu","text":"<p>This is generic Win32 context menu. Use DoClickItem to click a particular item from the menu</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemClickable</p>"},{"location":"Libraries/Win32ContextMenu/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ContextMenu/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on an item of this object."},{"location":"Libraries/Win32ContextMenu/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32ContextMenu/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ContextMenu').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ContextMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32ContextMenu/#doclickitem","title":"DoClickItem","text":"<p>Performs click on an item of this object.</p> <pre><code>SeS('SomeWin32ContextMenu').DoClickItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to click <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32Link/","title":"Win32Link","text":"<p>This is a generic Win32 link. Use DoAction to activate the link.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Simulated</p>"},{"location":"Libraries/Win32List/","title":"Win32List","text":"<p>This is generic Win32 list. Use DoSelectItem to select a particular item. </p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32List/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32List/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32List/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32List/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32List').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32List/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32List/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32List').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemExpandable</p>"},{"location":"Libraries/Win32List/#action-summary_1","title":"Action Summary","text":"Action Description DoExpand Expands an item of this object."},{"location":"Libraries/Win32List/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32List/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeWin32List').DoExpand(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to expand <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32ListCheckable/","title":"Win32ListCheckable","text":"<p>This is generic Win32 list with a check box near each item. Use DoSelectItem to select a particular item and DoCheckItem to change corresponding check box state.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32ListCheckable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ListCheckable/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32ListCheckable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32ListCheckable/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ListCheckable').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ListCheckable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32ListCheckable/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32ListCheckable').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCheckable</p>"},{"location":"Libraries/Win32ListCheckable/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32ListCheckable/#action-summary_1","title":"Action Summary","text":"Action Description DoCheckItem Checks an item of this object."},{"location":"Libraries/Win32ListCheckable/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/Win32ListCheckable/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32ListCheckable').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32ListCheckable/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32ListCheckable/#docheckitem","title":"DoCheckItem","text":"<p>Checks an item of this object.</p> <pre><code>SeS('SomeWin32ListCheckable').DoCheckItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to check <p></p>"},{"location":"Libraries/Win32MenuBar/","title":"Win32MenuBar","text":"<p>This is generic WIn32 menu bar (e.g. main menu of the application). Use DoClickItem to click a particular item from the menu and DoMenu to choose a menu item at the specified path.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemClickable</p>"},{"location":"Libraries/Win32MenuBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32MenuBar/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on an item of this object."},{"location":"Libraries/Win32MenuBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32MenuBar/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32MenuBar').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32MenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32MenuBar/#doclickitem","title":"DoClickItem","text":"<p>Performs click on an item of this object.</p> <pre><code>SeS('SomeWin32MenuBar').DoClickItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to click <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32Menu</p>"},{"location":"Libraries/Win32MenuBar/#action-summary_1","title":"Action Summary","text":"Action Description DoMenu Performs click on the menu item."},{"location":"Libraries/Win32MenuBar/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32MenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeWin32MenuBar').DoMenu(path, sep)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. sep string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Win32Outline/","title":"Win32Outline","text":"<p>This is generic Win32 tree. Use DoSelectItem to select and DoExpand to expand/collapse a particular node.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32Outline/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32Outline/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32Outline/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32Outline/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32Outline').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32Outline/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32Outline/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32Outline').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemExpandable</p>"},{"location":"Libraries/Win32Outline/#action-summary_1","title":"Action Summary","text":"Action Description DoExpand Expands an item of this object."},{"location":"Libraries/Win32Outline/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32Outline/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeWin32Outline').DoExpand(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to expand <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32PopupMenu/","title":"Win32PopupMenu","text":"<p>This is generic Win32 popup menu. Use DoClickItem to click a particular item from the menu.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemClickable</p>"},{"location":"Libraries/Win32PopupMenu/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32PopupMenu/#action-summary","title":"Action Summary","text":"Action Description DoClickItem Performs click on an item of this object."},{"location":"Libraries/Win32PopupMenu/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32PopupMenu/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32PopupMenu').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32PopupMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32PopupMenu/#doclickitem","title":"DoClickItem","text":"<p>Performs click on an item of this object.</p> <pre><code>SeS('SomeWin32PopupMenu').DoClickItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to click <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Win32RadioButton/","title":"Win32RadioButton","text":"<p>This is generic Win32 radio button. Use DoAction to select the button.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32CheckBox</p>"},{"location":"Libraries/Win32RadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/Win32RadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/Win32RadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32RadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeWin32RadioButton').GetChecked()\n\nSeS('SomeWin32RadioButton').SetChecked(value)\n</code></pre>"},{"location":"Libraries/Win32RadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32RadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeWin32RadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p>Behavior Pattern: Win32Radio</p>"},{"location":"Libraries/Win32StaticText/","title":"Win32StaticText","text":"<p>This is generic Win32 label. Use WindowText property to read/write label text.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32Simulated</p>"},{"location":"Libraries/Win32Text/","title":"Win32Text","text":"<p>This is generic Win32 edit box. Use DoSetText to set the value of the edit box and GetText to read current value.</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32TextEditable</p>"},{"location":"Libraries/Win32Text/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/Win32Text/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/Win32Text/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32Text/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeWin32Text').GetText()\n\nSeS('SomeWin32Text').SetText(value)\n</code></pre>"},{"location":"Libraries/Win32Text/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32Text/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeWin32Text').DoSetText(val)\n</code></pre> <p>Parameters:</p> Name Type Description val string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/Win32TreeCheckable/","title":"Win32TreeCheckable","text":"<p>This is generic Win32 tree with a check box near each item. Use DoSelectItem to select and DoExpand to expand/collapse a particular item. Use DoCheckItem to change corresponding check box state. </p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: Win32ItemSelectable</p>"},{"location":"Libraries/Win32TreeCheckable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32TreeCheckable/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects item of this object."},{"location":"Libraries/Win32TreeCheckable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/Win32TreeCheckable/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32TreeCheckable').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32TreeCheckable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Win32TreeCheckable/#doselectitem","title":"DoSelectItem","text":"<p>Selects item of this object.</p> <pre><code>SeS('SomeWin32TreeCheckable').DoSelectItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string This is a name of item to select. Or an array of item names in the case of multi-select. <p>Returns:</p> <p>boolean: 'true' if operation is successful, 'false' otherwise</p> <p></p> <p>Behavior Pattern: Win32ItemCheckable</p>"},{"location":"Libraries/Win32TreeCheckable/#property-summary_1","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount"},{"location":"Libraries/Win32TreeCheckable/#action-summary_1","title":"Action Summary","text":"Action Description DoCheckItem Checks an item of this object."},{"location":"Libraries/Win32TreeCheckable/#property-detail_1","title":"Property Detail","text":""},{"location":"Libraries/Win32TreeCheckable/#itemcount_1","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeWin32TreeCheckable').GetItemCount()\n</code></pre>"},{"location":"Libraries/Win32TreeCheckable/#action-detail_1","title":"Action Detail","text":""},{"location":"Libraries/Win32TreeCheckable/#docheckitem","title":"DoCheckItem","text":"<p>Checks an item of this object.</p> <pre><code>SeS('SomeWin32TreeCheckable').DoCheckItem(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to check <p></p> <p>Behavior Pattern: Win32ItemExpandable</p>"},{"location":"Libraries/Win32TreeCheckable/#action-summary_2","title":"Action Summary","text":"Action Description DoExpand Expands an item of this object."},{"location":"Libraries/Win32TreeCheckable/#action-detail_2","title":"Action Detail","text":""},{"location":"Libraries/Win32TreeCheckable/#doexpand","title":"DoExpand","text":"<p>Expands an item of this object.</p> <pre><code>SeS('SomeWin32TreeCheckable').DoExpand(itemName)\n</code></pre> <p>Parameters:</p> Name Type Description itemName string Name of the item to expand <p>Returns:</p> <p>boolean: 'true' if operation was successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/Window/","title":"Window","text":"<p>This is a JavaScript wrapper for Window of Selenium .NET library.</p>"},{"location":"Libraries/Window/#action-summary","title":"Action Summary","text":"Action Description FullScreen Sets the current window to full screen if it is not already in that state. GetPosition Gets the position of the browser window relative to the upper-left corner of the screen. GetSize Gets the size of the outer browser window, including title bars and window borders. Maximize Maximizes the current window if it is not already maximized. Minimize Minimizes the current window if it is not already minimized. SetPosition Sets the position of the browser window relative to the upper-left corner of the screen. SetSize Sets the size of the outer browser window, including title bars and window borders."},{"location":"Libraries/Window/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/Window/#fullscreen","title":"FullScreen","text":"<p>Sets the current window to full screen if it is not already in that state.</p> <pre><code>Window.FullScreen()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Window/#getposition","title":"GetPosition","text":"<p>Gets the position of the browser window relative to the upper-left corner of the screen.</p> <pre><code>Window.GetPosition()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Window/#getsize","title":"GetSize","text":"<p>Gets the size of the outer browser window, including title bars and window borders.</p> <pre><code>Window.GetSize()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Window/#maximize","title":"Maximize","text":"<p>Maximizes the current window if it is not already maximized.</p> <pre><code>Window.Maximize()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Window/#minimize","title":"Minimize","text":"<p>Minimizes the current window if it is not already minimized.</p> <pre><code>Window.Minimize()\n</code></pre> <p></p> <p> </p>"},{"location":"Libraries/Window/#setposition","title":"SetPosition","text":"<p>Sets the position of the browser window relative to the upper-left corner of the screen.</p> <pre><code>Window.SetPosition(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number y number <p></p> <p> </p>"},{"location":"Libraries/Window/#setsize","title":"SetSize","text":"<p>Sets the size of the outer browser window, including title bars and window borders.</p> <pre><code>Window.SetSize(width, height)\n</code></pre> <p>Parameters:</p> Name Type Description width number height number <p></p>"},{"location":"Libraries/YUIButtonMenu/","title":"YUIButtonMenu","text":"<p>YUI ButtonMenu. It is a container attached to a menu button. Using this container is useful when you need to house HTML content or another YUI widget, such as a Calendar or Color Picker.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIButtonMenuBehavior</p>"},{"location":"Libraries/YUIButtonMenu/#action-summary","title":"Action Summary","text":"Action Description DoClick Clicks on the menu container."},{"location":"Libraries/YUIButtonMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUIButtonMenu/#doclick","title":"DoClick","text":"<p>Clicks on the menu container.</p> <pre><code>SeS('SomeYUIButtonMenu').DoClick()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUICalendar/","title":"YUICalendar","text":"<p>YUI Calendar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUICalendarBehavior</p>"},{"location":"Libraries/YUICalendar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Month Current month displayed by the date picker. GetMonth"},{"location":"Libraries/YUICalendar/#action-summary","title":"Action Summary","text":"Action Description DoNextMonth Clicks on 'Next Month' selector. DoPrevMonth Clicks on 'Previous Month' selector. DoSelectDate Selects specific date in the date picker."},{"location":"Libraries/YUICalendar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUICalendar/#month","title":"Month","text":"<p>Current month displayed by the date picker.</p> <p>Type: string|number</p> <p>Accessors: GetMonth</p> <pre><code>value = SeS('SomeYUICalendar').GetMonth()\n</code></pre>"},{"location":"Libraries/YUICalendar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUICalendar/#donextmonth","title":"DoNextMonth","text":"<p>Clicks on 'Next Month' selector.</p> <pre><code>SeS('SomeYUICalendar').DoNextMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/YUICalendar/#doprevmonth","title":"DoPrevMonth","text":"<p>Clicks on 'Previous Month' selector.</p> <pre><code>SeS('SomeYUICalendar').DoPrevMonth()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/YUICalendar/#doselectdate","title":"DoSelectDate","text":"<p>Selects specific date in the date picker.</p> <pre><code>SeS('SomeYUICalendar').DoSelectDate(dateValue)\n</code></pre> <p>Parameters:</p> Name Type Description dateValue number New date to select <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUICheckButton/","title":"YUICheckButton","text":"<p>YUI CheckButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUICheckButtonBehavior</p>"},{"location":"Libraries/YUICheckButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/YUICheckButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/YUICheckButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUICheckButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeYUICheckButton').GetChecked()\n</code></pre>"},{"location":"Libraries/YUICheckButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUICheckButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeYUICheckButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/YUIMenu/","title":"YUIMenu","text":"<p>YUI Menu.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIMenuBehavior</p>"},{"location":"Libraries/YUIMenu/#action-summary","title":"Action Summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item. DoTitleMenu Clicks menu title item."},{"location":"Libraries/YUIMenu/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUIMenu/#dofindchild","title":"DoFindChild","text":"<p>Searches for specific item in the menu.</p> <pre><code>SeS('SomeYUIMenu').DoFindChild(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/YUIMenu/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeYUIMenu').DoMenu(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/YUIMenu/#dotitlemenu","title":"DoTitleMenu","text":"<p>Clicks menu title item. Only 1 menu level currently supported.</p> <pre><code>SeS('SomeYUIMenu').DoTitleMenu(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/YUIMenuBar/","title":"YUIMenuBar","text":"<p>YUI MenuBar.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIMenuBarBehavior</p>"},{"location":"Libraries/YUIMenuBar/#action-summary","title":"Action Summary","text":"Action Description DoFindChild Searches for specific item in the menu. DoMenu Performs click on the menu item."},{"location":"Libraries/YUIMenuBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUIMenuBar/#dofindchild","title":"DoFindChild","text":"<p>Searches for specific item in the menu.</p> <pre><code>SeS('SomeYUIMenuBar').DoFindChild(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/YUIMenuBar/#domenu","title":"DoMenu","text":"<p>Performs click on the menu item.</p> <pre><code>SeS('SomeYUIMenuBar').DoMenu(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path from the menu root to a leaf item with components delimited by separator parameter. separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'index'. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/YUIMenuButton/","title":"YUIMenuButton","text":"<p>YUI MenuButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIMenuButtonBehavior</p>"},{"location":"Libraries/YUIMenuButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Active Active state of the button. GetActive"},{"location":"Libraries/YUIMenuButton/#action-summary","title":"Action Summary","text":"Action Description DoClick Clicks the menu button."},{"location":"Libraries/YUIMenuButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUIMenuButton/#active","title":"Active","text":"<p>Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object</p> <p>Type: boolean</p> <p>Accessors: GetActive</p> <pre><code>value = SeS('SomeYUIMenuButton').GetActive()\n</code></pre>"},{"location":"Libraries/YUIMenuButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUIMenuButton/#doclick","title":"DoClick","text":"<p>Clicks the menu button.</p> <pre><code>SeS('SomeYUIMenuButton').DoClick()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUIPushButton/","title":"YUIPushButton","text":"<p>YUI PushButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIPushButtonBehavior</p>"},{"location":"Libraries/YUIRadioButton/","title":"YUIRadioButton","text":"<p>YUI RadioButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUIRadioButtonBehavior</p>"},{"location":"Libraries/YUIRadioButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked"},{"location":"Libraries/YUIRadioButton/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/YUIRadioButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUIRadioButton/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked</p> <pre><code>value = SeS('SomeYUIRadioButton').GetChecked()\n</code></pre>"},{"location":"Libraries/YUIRadioButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUIRadioButton/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeYUIRadioButton').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/YUISliderH/","title":"YUISliderH","text":"<p>YUI Horizontal Slider.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUISliderHBehavior</p>"},{"location":"Libraries/YUISliderH/#action-summary","title":"Action Summary","text":"Action Description DoChange Changes slider position."},{"location":"Libraries/YUISliderH/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUISliderH/#dochange","title":"DoChange","text":"<p>Changes slider position.</p> <pre><code>SeS('SomeYUISliderH').DoChange(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number Slider position to set. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUISliderV/","title":"YUISliderV","text":"<p>YUI Vertical Slider.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUISliderVBehavior</p>"},{"location":"Libraries/YUISliderV/#action-summary","title":"Action Summary","text":"Action Description DoChange Changes slider position."},{"location":"Libraries/YUISliderV/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUISliderV/#dochange","title":"DoChange","text":"<p>Changes slider position.</p> <pre><code>SeS('SomeYUISliderV').DoChange(value)\n</code></pre> <p>Parameters:</p> Name Type Description value number Slider position to set. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUISplitButton/","title":"YUISplitButton","text":"<p>Standard YUI SplitButton.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUISplitButtonBehavior</p>"},{"location":"Libraries/YUISplitButton/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Active Active state of the button. GetActive"},{"location":"Libraries/YUISplitButton/#action-summary","title":"Action Summary","text":"Action Description DoClick Clicks the button. DoMenu Clicks menu of the split button."},{"location":"Libraries/YUISplitButton/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUISplitButton/#active","title":"Active","text":"<p>Active state of the button. If the button is active it is highlighted in YUI. Usually to make an object Active user needs to move mouse over the object.</p> <p>Type: Boolean</p> <p>Accessors: GetActive</p> <pre><code>value = SeS('SomeYUISplitButton').GetActive()\n</code></pre>"},{"location":"Libraries/YUISplitButton/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUISplitButton/#doclick","title":"DoClick","text":"<p>Clicks the button.</p> <pre><code>SeS('SomeYUISplitButton').DoClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number x coordinate to clickOptional. y number y coordinate to clickOptional. <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p> <p> </p>"},{"location":"Libraries/YUISplitButton/#domenu","title":"DoMenu","text":"<p>Clicks menu of the split button.</p> <pre><code>SeS('SomeYUISplitButton').DoMenu()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if successful, 'false' otherwise</p> <p></p>"},{"location":"Libraries/YUITree/","title":"YUITree","text":"<p>YUI Tree.</p> <p>Extends HTMLObject</p> <p>Extends SeSSimulatedObject</p> <p>Behavior Pattern: YUITreeBehavior</p>"},{"location":"Libraries/YUITree/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildrenCount Children count of the current node in the tree. GetChildrenCount Expanded Expanded state of the current node. GetExpanded NodeIndex Zero based index of the current node. GetNodeIndex NodeText Text of the current node. GetNodeText Selected Selected state of the current node. GetSelected SelectedNodeText Text of the selected node. GetSelectedNodeText"},{"location":"Libraries/YUITree/#action-summary","title":"Action Summary","text":"Action Description DoClickNode Clicks specific node in the tree. DoCollapse Collapses specific node in the tree. DoExpand Expands specific node in the tree. DoFindChild Finds child node by its path from the current node and remembers it as the current node. DoFindNode Searches for specific node in the tree and remembers it as the current node. DoGetPath Returns path to the current node."},{"location":"Libraries/YUITree/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/YUITree/#childrencount","title":"ChildrenCount","text":"<p>Children count of the current node in the tree.</p> <p>Type: number</p> <p>Accessors: GetChildrenCount</p> <pre><code>value = SeS('SomeYUITree').GetChildrenCount()\n</code></pre> <p></p>"},{"location":"Libraries/YUITree/#expanded","title":"Expanded","text":"<p>Expanded state of the current node. Use DoFindNode to set current node. 0 - if the node is collapsed, 1 - if the node is expanded, 2 - if the node is a leaf.</p> <p>Type: number</p> <p>Accessors: GetExpanded</p> <pre><code>value = SeS('SomeYUITree').GetExpanded()\n</code></pre> <p></p>"},{"location":"Libraries/YUITree/#nodeindex","title":"NodeIndex","text":"<p>Zero based index of the current node. Use DoFindNode to set current node.</p> <p>Type: number</p> <p>Accessors: GetNodeIndex</p> <pre><code>value = SeS('SomeYUITree').GetNodeIndex()\n</code></pre> <p></p>"},{"location":"Libraries/YUITree/#nodetext","title":"NodeText","text":"<p>Text of the current node. Use DoFindNode to set current node.</p> <p>Type: string</p> <p>Accessors: GetNodeText</p> <pre><code>value = SeS('SomeYUITree').GetNodeText()\n</code></pre> <p></p>"},{"location":"Libraries/YUITree/#selected","title":"Selected","text":"<p>Selected state of the current node. Use DoFindNode to set current node. 'true' if the node is selected, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetSelected</p> <pre><code>value = SeS('SomeYUITree').GetSelected()\n</code></pre> <p></p>"},{"location":"Libraries/YUITree/#selectednodetext","title":"SelectedNodeText","text":"<p>Text of the selected node.</p> <p>Type: string</p> <p>Accessors: GetSelectedNodeText</p> <pre><code>value = SeS('SomeYUITree').GetSelectedNodeText()\n</code></pre>"},{"location":"Libraries/YUITree/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/YUITree/#doclicknode","title":"DoClickNode","text":"<p>Clicks specific node in the tree.</p> <pre><code>SeS('SomeYUITree').DoClickNode(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/YUITree/#docollapse","title":"DoCollapse","text":"<p>Collapses specific node in the tree.</p> <pre><code>SeS('SomeYUITree').DoCollapse(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/YUITree/#doexpand","title":"DoExpand","text":"<p>Expands specific node in the tree.</p> <pre><code>SeS('SomeYUITree').DoExpand(path, separator, pathType)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/YUITree/#dofindchild","title":"DoFindChild","text":"<p>Finds child node by its path from the current node and remembers it as the current node. If current node is not set then Root node is used.</p> <pre><code>SeS('SomeYUITree').DoFindChild(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/YUITree/#dofindnode","title":"DoFindNode","text":"<p>Searches for specific node in the tree and remembers it as the current node.</p> <pre><code>SeS('SomeYUITree').DoFindNode(path, separator, pathType, expand)\n</code></pre> <p>Parameters:</p> Name Type Description path string Path of the node separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". expand boolean is set to true, then found node is expanded <p>Returns:</p> <p>HTMLObject: HTMLObject of the found node</p> <p></p> <p> </p>"},{"location":"Libraries/YUITree/#dogetpath","title":"DoGetPath","text":"<p>Returns path to the current node.</p> <pre><code>SeS('SomeYUITree').DoGetPath(pathType, separator)\n</code></pre> <p>Parameters:</p> Name Type Description pathType string Path type. Can be one of 'name', 'id' or 'index'. Possible values: \"name\", \"index\", \"id\"Optional, Default: \"name\". separator string Separator character. Possible values: \";\", \",\", \"\\\", \"/\"Optional, Default: \";\". <p>Returns:</p> <p>string: Path to the current node</p> <p></p>"},{"location":"Libraries/iOS/","title":"iOS","text":"<p>Global object. Use it to perform actions not related to a particular object. You do not need to record or learn this object, it is always automatically available in any test.</p>"},{"location":"Libraries/iOS/#action-summary","title":"Action Summary","text":"Action Description DoFlick Flick action. DoGoToUrl Opens URL in active browser. DoScreenshot Makes screenshot of a device. DoShake Shakes device. DoSwipe Swipe action. DoTap Tap screen. GetCapability Gets capability with specified name. GetContext Gets current context. GetDeviceOrientation Gets device orientation. SetContext Sets context. SetDeviceOrientation Sets device orientation."},{"location":"Libraries/iOS/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOS/#doflick","title":"DoFlick","text":"<p>Flick action.</p> <pre><code>iOS.DoFlick(endX, endY, startX, startY, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units)Optional. startY number y coordinate where swipe begins (in pixels or relative units)Optional. touchCount number how many fingers to swipe withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#dogotourl","title":"DoGoToUrl","text":"<p>Opens URL in active browser.</p> <pre><code>iOS.DoGoToUrl(url)\n</code></pre> <p>Parameters:</p> Name Type Description url string <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#doscreenshot","title":"DoScreenshot","text":"<p>Makes screenshot of a device.</p> <pre><code>iOS.DoScreenshot(txtLabel)\n</code></pre> <p>Parameters:</p> Name Type Description txtLabel string Label of a screenshot in the report.Optional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#doshake","title":"DoShake","text":"<p>Shakes device.</p> <pre><code>iOS.DoShake()\n</code></pre> <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#doswipe","title":"DoSwipe","text":"<p>Swipe action.</p> <pre><code>iOS.DoSwipe(endX, endY, startX, startY, duration, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description endX number x coordinate where swipe ends (in pixels or relative units) endY number y coordinate where swipe ends (in pixels or relative units) startX number x coordinate where swipe begins (in pixels or relative units)Optional. startY number y coordinate where swipe begins (in pixels or relative units)Optional. duration number time (in seconds) to spend performing the swipe/dragOptional. touchCount number how many fingers to swipe withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#dotap","title":"DoTap","text":"<p>Tap screen.</p> <pre><code>iOS.DoTap(x, y, duration, tapCount, touchCount)\n</code></pre> <p>Parameters:</p> Name Type Description x number x coordinate to tap (in pixels or relative units)Optional. y number y coordinate to tap (in pixels or relative units)Optional. duration number how long (in seconds) to tapOptional. tapCount number how many times to tapOptional. touchCount number how many fingers to tap withOptional. <p>Returns:</p> <p>'true' if successful, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#getcapability","title":"GetCapability","text":"<p>Gets capability with specified name.</p> <pre><code>iOS.GetCapability(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Name of a capability. <p>Returns:</p> <p>Capability string.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#getcontext","title":"GetContext","text":"<p>Gets current context.</p> <pre><code>iOS.GetContext()\n</code></pre> <p>Returns:</p> <p>Either NATIVE_APP or WEBVIEW_1.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#getdeviceorientation","title":"GetDeviceOrientation","text":"<p>Gets device orientation.</p> <pre><code>iOS.GetDeviceOrientation()\n</code></pre> <p>Returns:</p> <p>Device orientation.</p> <p></p> <p> </p>"},{"location":"Libraries/iOS/#setcontext","title":"SetContext","text":"<p>Sets context.</p> <pre><code>iOS.SetContext(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Either NATIVE_APP or WEBVIEW_1. <p></p> <p> </p>"},{"location":"Libraries/iOS/#setdeviceorientation","title":"SetDeviceOrientation","text":"<p>Sets device orientation.</p> <pre><code>iOS.SetDeviceOrientation(orientation)\n</code></pre> <p>Parameters:</p> Name Type Description orientation number ORIENTATION_PORTRAIT, ORIENTATION_LANDSCAPE <p>Returns:</p> <p>Device orientation.</p> <p></p>"},{"location":"Libraries/iOSButton/","title":"iOSButton","text":"<p>iOS Button.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectButtonBehavior</p>"},{"location":"Libraries/iOSEditBox/","title":"iOSEditBox","text":"<p>iOS EditBox.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectTextFieldBehavior</p>"},{"location":"Libraries/iOSEditBox/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/iOSEditBox/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/iOSEditBox/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSEditBox/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeiOSEditBox').GetText()\n\nSeS('SomeiOSEditBox').SetText(value)\n</code></pre>"},{"location":"Libraries/iOSEditBox/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSEditBox/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeiOSEditBox').DoSetText(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSImage/","title":"iOSImage","text":"<p>iOS Image.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectImageBehavior</p>"},{"location":"Libraries/iOSLabel/","title":"iOSLabel","text":"<p>iOS Label.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectLabelBehavior</p>"},{"location":"Libraries/iOSLabel/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText"},{"location":"Libraries/iOSLabel/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSLabel/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeiOSLabel').GetText()\n</code></pre>"},{"location":"Libraries/iOSObject/","title":"iOSObject","text":"<p>iOS Object.</p> <p>Behavior Pattern: iOSObjectGenericBehavior</p>"},{"location":"Libraries/iOSObject/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ChildAt Child object at index. GetChildAt ChildCount Number of child items. GetChildCount Class Class name of the object. GetClass Height Height of the object. GetHeight Label Label of the iOS object GetLabel Name Name of the object. GetName NextSibling <code>iOSObject</code> for the next sibling element. GetNextSibling ObjectType Type of the object. GetObjectType Parent <code>iOSObject</code> for the parent element. GetParent PrevSibling <code>iOSObject</code> for the previous sibling element. GetPrevSibling Property Value of a named property of the object. GetProperty Text Text of the object, 'false' if text can not be read. GetText Width Width of the object. GetWidth X X-coordinate of the top left corner of the object. GetX Y Y-coordinate of the top left corner of the object. GetY"},{"location":"Libraries/iOSObject/#action-summary","title":"Action Summary","text":"Action Description DoAction Clicks in the middle of the control. DoClear Clears the text of the object. DoClick Clicks in the middle of the control if offset is not specified. DoEnsureVisible Ensure that a child item with the specified text is visible on screen. DoFindByXPath Finds an element by relative XPath expression. DoLongPress Performs long press in the middle of the control if offset is not specified. DoPress Presses in the middle of the control if offset is not specified. DoSendKeys Send a text to the object in character-by-character mode. DoTap Taps the control. DoTwoFingerTap Taps the control with two fingers."},{"location":"Libraries/iOSObject/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSObject/#childat","title":"ChildAt","text":"<p>Child object at index.</p> <p>Getter Parameters:</p> Name Type Description index number Index of the object to get. <p>Type: string</p> <p>Accessors: GetChildAt</p> <pre><code>value = SeS('SomeiOSObject').GetChildAt(index)\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#childcount","title":"ChildCount","text":"<p>Number of child items.</p> <p>Type: number</p> <p>Accessors: GetChildCount</p> <pre><code>value = SeS('SomeiOSObject').GetChildCount()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#class","title":"Class","text":"<p>Class name of the object.</p> <p>Type: string</p> <p>Accessors: GetClass</p> <pre><code>value = SeS('SomeiOSObject').GetClass()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#height","title":"Height","text":"<p>Height of the object.</p> <p>Type: number</p> <p>Accessors: GetHeight</p> <pre><code>value = SeS('SomeiOSObject').GetHeight()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#label","title":"Label","text":"<p>Label of the iOS object</p> <p>Type: string</p> <p>Accessors: GetLabel</p> <pre><code>value = SeS('SomeiOSObject').GetLabel()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#name","title":"Name","text":"<p>Name of the object.</p> <p>Type: string</p> <p>Accessors: GetName</p> <pre><code>value = SeS('SomeiOSObject').GetName()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#nextsibling","title":"NextSibling","text":"<p><code>iOSObject</code> for the next sibling element. Requires Rapise 6.6+</p> <p>Type: iOSObject</p> <p>Accessors: GetNextSibling</p> <pre><code>value = SeS('SomeiOSObject').GetNextSibling()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#objecttype","title":"ObjectType","text":"<p>Type of the object.</p> <p>Type: string</p> <p>Accessors: GetObjectType</p> <pre><code>value = SeS('SomeiOSObject').GetObjectType()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#parent","title":"Parent","text":"<p><code>iOSObject</code> for the parent element. Requires Rapise 6.6+</p> <p>Type: iOSObject</p> <p>Accessors: GetParent</p> <pre><code>value = SeS('SomeiOSObject').GetParent()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#prevsibling","title":"PrevSibling","text":"<p><code>iOSObject</code> for the previous sibling element. Requires Rapise 6.6+</p> <p>Type: iOSObject</p> <p>Accessors: GetPrevSibling</p> <pre><code>value = SeS('SomeiOSObject').GetPrevSibling()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#property","title":"Property","text":"<p>Value of a named property of the object.</p> <p>Getter Parameters:</p> Name Type Description name string Property name. <p>Type: string</p> <p>Accessors: GetProperty</p> <pre><code>value = SeS('SomeiOSObject').GetProperty(name)\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText</p> <pre><code>value = SeS('SomeiOSObject').GetText()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#width","title":"Width","text":"<p>Width of the object.</p> <p>Type: number</p> <p>Accessors: GetWidth</p> <pre><code>value = SeS('SomeiOSObject').GetWidth()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#x","title":"X","text":"<p>X-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetX</p> <pre><code>value = SeS('SomeiOSObject').GetX()\n</code></pre> <p></p>"},{"location":"Libraries/iOSObject/#y","title":"Y","text":"<p>Y-coordinate of the top left corner of the object.</p> <p>Type: number</p> <p>Accessors: GetY</p> <pre><code>value = SeS('SomeiOSObject').GetY()\n</code></pre>"},{"location":"Libraries/iOSObject/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSObject/#doaction","title":"DoAction","text":"<p>Clicks in the middle of the control.</p> <pre><code>SeS('SomeiOSObject').DoAction()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#doclear","title":"DoClear","text":"<p>Clears the text of the object.</p> <pre><code>SeS('SomeiOSObject').DoClear()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#doclick","title":"DoClick","text":"<p>Clicks in the middle of the control if offset is not specified. Clicking with offset requires Rapise 8.0+.</p> <pre><code>SeS('SomeiOSObject').DoClick(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#doensurevisible","title":"DoEnsureVisible","text":"<p>Ensure that a child item with the specified text is visible on screen.</p> <pre><code>SeS('SomeiOSObject').DoEnsureVisible()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dofindbyxpath","title":"DoFindByXPath","text":"<p>Finds an element by relative XPath expression. Requires Rapise 6.6+</p> <pre><code>SeS('SomeiOSObject').DoFindByXPath(xpath)\n</code></pre> <p>Parameters:</p> Name Type Description xpath string Relative XPath expression. <p>Returns:</p> <p>iOSObject: <code>iOSObject</code> if success, <code>null</code> otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dolongpress","title":"DoLongPress","text":"<p>Performs long press in the middle of the control if offset is not specified. Requires Rapise 8.0+.</p> <pre><code>SeS('SomeiOSObject').DoLongPress(x, y)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dopress","title":"DoPress","text":"<p>Presses in the middle of the control if offset is not specified. Requires Rapise 8.0+.</p> <pre><code>SeS('SomeiOSObject').DoPress(x, y, duration)\n</code></pre> <p>Parameters:</p> Name Type Description x number X offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the width.Optional. y number Y offset to click within object. Calculated from the top-left corner. Default is a center. Floating point in the range (-2, 2) means percentage of the height.Optional. duration number Duration of press action.Optional. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dosendkeys","title":"DoSendKeys","text":"<p>Send a text to the object in character-by-character mode.</p> <pre><code>SeS('SomeiOSObject').DoSendKeys(keys)\n</code></pre> <p>Parameters:</p> Name Type Description keys string Text to type into the object. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dotap","title":"DoTap","text":"<p>Taps the control.</p> <pre><code>SeS('SomeiOSObject').DoTap()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSObject/#dotwofingertap","title":"DoTwoFingerTap","text":"<p>Taps the control with two fingers.</p> <pre><code>SeS('SomeiOSObject').DoTwoFingerTap()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSPageIndicator/","title":"iOSPageIndicator","text":"<p>iOS PageIndicator.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectPageIndicatorBehavior</p>"},{"location":"Libraries/iOSPageIndicator/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount PageIndex Selected page index. GetPageIndex"},{"location":"Libraries/iOSPageIndicator/#action-summary","title":"Action Summary","text":"Action Description DoNextPage Navigates to next page. DoPrevPage Navigates to previous page. DoSelectPage Selects a page at index."},{"location":"Libraries/iOSPageIndicator/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSPageIndicator/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeiOSPageIndicator').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/iOSPageIndicator/#pageindex","title":"PageIndex","text":"<p>Selected page index.</p> <p>Type: number</p> <p>Accessors: GetPageIndex</p> <pre><code>value = SeS('SomeiOSPageIndicator').GetPageIndex()\n</code></pre>"},{"location":"Libraries/iOSPageIndicator/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSPageIndicator/#donextpage","title":"DoNextPage","text":"<p>Navigates to next page.</p> <pre><code>SeS('SomeiOSPageIndicator').DoNextPage()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSPageIndicator/#doprevpage","title":"DoPrevPage","text":"<p>Navigates to previous page.</p> <pre><code>SeS('SomeiOSPageIndicator').DoPrevPage()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSPageIndicator/#doselectpage","title":"DoSelectPage","text":"<p>Selects a page at index.</p> <pre><code>SeS('SomeiOSPageIndicator').DoSelectPage(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Index of the page. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSPicker/","title":"iOSPicker","text":"<p>iOS Picker.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectPickerSelectableBehavior</p>"},{"location":"Libraries/iOSPicker/#property-summary","title":"Property Summary","text":"Property Description Getter Setter SelectedItem Text of the selected item. GetSelectedItem"},{"location":"Libraries/iOSPicker/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item with the specified name."},{"location":"Libraries/iOSPicker/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSPicker/#selecteditem","title":"SelectedItem","text":"<p>Text of the selected item.</p> <p>Type: string</p> <p>Accessors: GetSelectedItem</p> <pre><code>value = SeS('SomeiOSPicker').GetSelectedItem()\n</code></pre>"},{"location":"Libraries/iOSPicker/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSPicker/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item with the specified name.</p> <pre><code>SeS('SomeiOSPicker').DoSelectItem(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Item name. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSScrollView/","title":"iOSScrollView","text":"<p>iOS ScrollView.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectScrollViewBehavior</p>"},{"location":"Libraries/iOSScrollView/#action-summary","title":"Action Summary","text":"Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area."},{"location":"Libraries/iOSScrollView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSScrollView/#doscrolldown","title":"DoScrollDown","text":"<p>Scrolls content to show lower area.</p> <pre><code>SeS('SomeiOSScrollView').DoScrollDown()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSScrollView/#doscrollleft","title":"DoScrollLeft","text":"<p>Scrolls content to show area to the left.</p> <pre><code>SeS('SomeiOSScrollView').DoScrollLeft()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSScrollView/#doscrollright","title":"DoScrollRight","text":"<p>Scrolls content to show area to the right.</p> <pre><code>SeS('SomeiOSScrollView').DoScrollRight()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSScrollView/#doscrolltoelementwithname","title":"DoScrollToElementWithName","text":"<p>Scrolls to an sub control with name.</p> <pre><code>SeS('SomeiOSScrollView').DoScrollToElementWithName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Sub control name. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSScrollView/#doscrollup","title":"DoScrollUp","text":"<p>Scrolls content to show upper area.</p> <pre><code>SeS('SomeiOSScrollView').DoScrollUp()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSSearch/","title":"iOSSearch","text":"<p>iOS Search.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectTextFieldBehavior</p>"},{"location":"Libraries/iOSSearch/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/iOSSearch/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/iOSSearch/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSSearch/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeiOSSearch').GetText()\n\nSeS('SomeiOSSearch').SetText(value)\n</code></pre>"},{"location":"Libraries/iOSSearch/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSSearch/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeiOSSearch').DoSetText(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSSlider/","title":"iOSSlider","text":"<p>iOS Slider.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectSliderBehavior</p>"},{"location":"Libraries/iOSSlider/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Value Value of the object. GetValue SetValue"},{"location":"Libraries/iOSSlider/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSSlider/#value","title":"Value","text":"<p>Value of the object.</p> <p>Type: number</p> <p>Accessors: GetValue, SetValue</p> <pre><code>value = SeS('SomeiOSSlider').GetValue()\n\nSeS('SomeiOSSlider').SetValue(value)\n</code></pre>"},{"location":"Libraries/iOSSwitch/","title":"iOSSwitch","text":"<p>iOS Switch.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectSwitchBehavior</p>"},{"location":"Libraries/iOSSwitch/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Checked Check state of the button. GetChecked SetChecked"},{"location":"Libraries/iOSSwitch/#action-summary","title":"Action Summary","text":"Action Description DoSetCheck Sets check state of the object."},{"location":"Libraries/iOSSwitch/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSSwitch/#checked","title":"Checked","text":"<p>Check state of the button. 'true' if the button is checked, 'false' otherwise.</p> <p>Type: boolean</p> <p>Accessors: GetChecked, SetChecked</p> <pre><code>value = SeS('SomeiOSSwitch').GetChecked()\n\nSeS('SomeiOSSwitch').SetChecked(value)\n</code></pre>"},{"location":"Libraries/iOSSwitch/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSSwitch/#dosetcheck","title":"DoSetCheck","text":"<p>Sets check state of the object.</p> <pre><code>SeS('SomeiOSSwitch').DoSetCheck(bcheck)\n</code></pre> <p>Parameters:</p> Name Type Description bcheck boolean Desired check state for the item. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSTabBar/","title":"iOSTabBar","text":"<p>iOS TabBar.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectTabBarBehavior</p>"},{"location":"Libraries/iOSTabBar/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount SelectedTab Selected tab name. GetSelectedTab TabName Name of the tab at index GetTabName"},{"location":"Libraries/iOSTabBar/#action-summary","title":"Action Summary","text":"Action Description DoSelectTab Selects the tab by name or index."},{"location":"Libraries/iOSTabBar/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSTabBar/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeiOSTabBar').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/iOSTabBar/#selectedtab","title":"SelectedTab","text":"<p>Selected tab name.</p> <p>Type: string</p> <p>Accessors: GetSelectedTab</p> <pre><code>value = SeS('SomeiOSTabBar').GetSelectedTab()\n</code></pre> <p></p>"},{"location":"Libraries/iOSTabBar/#tabname","title":"TabName","text":"<p>Name of the tab at index</p> <p>Getter Parameters:</p> Name Type Description index number Index of the tab. <p>Type: string</p> <p>Accessors: GetTabName</p> <pre><code>value = SeS('SomeiOSTabBar').GetTabName(index)\n</code></pre>"},{"location":"Libraries/iOSTabBar/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSTabBar/#doselecttab","title":"DoSelectTab","text":"<p>Selects the tab by name or index.</p> <pre><code>SeS('SomeiOSTabBar').DoSelectTab(tabNameIndex)\n</code></pre> <p>Parameters:</p> Name Type Description tabNameIndex string | number Tab name or index. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSTable/","title":"iOSTable","text":"<p>iOS Table.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectTableSelectableBehavior</p>"},{"location":"Libraries/iOSTable/#property-summary","title":"Property Summary","text":"Property Description Getter Setter ItemCount Number of items. GetItemCount ItemIndexByName Returns item index by its name. GetItemIndexByName ItemTextAt Text of the item at the specified index GetItemTextAt"},{"location":"Libraries/iOSTable/#action-summary","title":"Action Summary","text":"Action Description DoSelectItem Selects an item with the specified index."},{"location":"Libraries/iOSTable/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSTable/#itemcount","title":"ItemCount","text":"<p>Number of items.</p> <p>Type: number</p> <p>Accessors: GetItemCount</p> <pre><code>value = SeS('SomeiOSTable').GetItemCount()\n</code></pre> <p></p>"},{"location":"Libraries/iOSTable/#itemindexbyname","title":"ItemIndexByName","text":"<p>Returns item index by its name. 'false' if name is not found.</p> <p>Getter Parameters:</p> Name Type Description name string <p>Type: number|boolean</p> <p>Accessors: GetItemIndexByName</p> <pre><code>value = SeS('SomeiOSTable').GetItemIndexByName(name)\n</code></pre> <p></p>"},{"location":"Libraries/iOSTable/#itemtextat","title":"ItemTextAt","text":"<p>Text of the item at the specified index</p> <p>Type: string</p> <p>Accessors: GetItemTextAt</p> <pre><code>value = SeS('SomeiOSTable').GetItemTextAt(index)\n</code></pre>"},{"location":"Libraries/iOSTable/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSTable/#doselectitem","title":"DoSelectItem","text":"<p>Selects an item with the specified index.</p> <pre><code>SeS('SomeiOSTable').DoSelectItem(index)\n</code></pre> <p>Parameters:</p> Name Type Description index number Item index. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSTextView/","title":"iOSTextView","text":"<p>iOS TextView.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectTextFieldBehavior</p>"},{"location":"Libraries/iOSTextView/#property-summary","title":"Property Summary","text":"Property Description Getter Setter Text Text of the object, 'false' if text can not be read. GetText SetText"},{"location":"Libraries/iOSTextView/#action-summary","title":"Action Summary","text":"Action Description DoSetText Sets text value of this object."},{"location":"Libraries/iOSTextView/#property-detail","title":"Property Detail","text":""},{"location":"Libraries/iOSTextView/#text","title":"Text","text":"<p>Text of the object, 'false' if text can not be read.</p> <p>Type: string</p> <p>Accessors: GetText, SetText</p> <pre><code>value = SeS('SomeiOSTextView').GetText()\n\nSeS('SomeiOSTextView').SetText(value)\n</code></pre>"},{"location":"Libraries/iOSTextView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSTextView/#dosettext","title":"DoSetText","text":"<p>Sets text value of this object.</p> <pre><code>SeS('SomeiOSTextView').DoSetText(value)\n</code></pre> <p>Parameters:</p> Name Type Description value string Text value. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/iOSWebView/","title":"iOSWebView","text":"<p>iOS WebView.</p> <p>Extends iOSObject</p> <p>Behavior Pattern: iOSObjectScrollViewBehavior</p>"},{"location":"Libraries/iOSWebView/#action-summary","title":"Action Summary","text":"Action Description DoScrollDown Scrolls content to show lower area. DoScrollLeft Scrolls content to show area to the left. DoScrollRight Scrolls content to show area to the right. DoScrollToElementWithName Scrolls to an sub control with name. DoScrollUp Scrolls content to show upper area."},{"location":"Libraries/iOSWebView/#action-detail","title":"Action Detail","text":""},{"location":"Libraries/iOSWebView/#doscrolldown","title":"DoScrollDown","text":"<p>Scrolls content to show lower area.</p> <pre><code>SeS('SomeiOSWebView').DoScrollDown()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSWebView/#doscrollleft","title":"DoScrollLeft","text":"<p>Scrolls content to show area to the left.</p> <pre><code>SeS('SomeiOSWebView').DoScrollLeft()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSWebView/#doscrollright","title":"DoScrollRight","text":"<p>Scrolls content to show area to the right.</p> <pre><code>SeS('SomeiOSWebView').DoScrollRight()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSWebView/#doscrolltoelementwithname","title":"DoScrollToElementWithName","text":"<p>Scrolls to an sub control with name.</p> <pre><code>SeS('SomeiOSWebView').DoScrollToElementWithName(name)\n</code></pre> <p>Parameters:</p> Name Type Description name string Sub control name. <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p> <p> </p>"},{"location":"Libraries/iOSWebView/#doscrollup","title":"DoScrollUp","text":"<p>Scrolls content to show upper area.</p> <pre><code>SeS('SomeiOSWebView').DoScrollUp()\n</code></pre> <p>Returns:</p> <p>boolean: 'true' if success, 'false' otherwise.</p> <p></p>"},{"location":"Libraries/libraries/","title":"Libraries","text":"<p>This part of the docs describes Object API of Rapise. There are global objects providing essential functionality like writing to a report, launching applications, working with files. There are also application specific objects that correspond to UI elements. Such objects are grouped into libraries.</p>"},{"location":"Libraries/libraries/#see-also","title":"See Also","text":"<ul> <li>Object Libraries</li> </ul>"},{"location":"Libraries/ses_lib_activex/","title":"ActiveX","text":"<ul> <li> <p>ActiveXObject</p> </li> <li> <p>MSComCtlSlider20</p> </li> <li> <p>MSComCtlToolbar</p> </li> <li> <p>MSComCtlTreeView20</p> </li> <li> <p>MSComList</p> </li> <li> <p>MSFlexGrid</p> </li> <li> <p>SSTab</p> </li> <li> <p>TabStrip20</p> </li> </ul>"},{"location":"Libraries/ses_lib_activex/#activexc1","title":"ActiveXC1","text":"<ul> <li> <p>C1TrueDBGrid</p> </li> <li> <p>C1TrueDBList</p> </li> <li> <p>C1TrueDBListCombo</p> </li> </ul>"},{"location":"Libraries/ses_lib_activex/#activexsft","title":"ActiveXSft","text":"<ul> <li>SftTree</li> </ul>"},{"location":"Libraries/ses_lib_advaac/","title":"Advanced Accessibility","text":"<ul> <li> <p>SimpleButton</p> </li> <li> <p>SimpleButtonDropdown</p> </li> <li> <p>SimpleCheckButton</p> </li> <li> <p>SimpleComboBox</p> </li> <li> <p>SimpleGraphics</p> </li> <li> <p>SimpleLink</p> </li> <li> <p>SimpleLinkText</p> </li> <li> <p>SimpleList</p> </li> <li> <p>SimpleOutline</p> </li> <li> <p>SimpleRadioButton</p> </li> <li> <p>SimpleText</p> </li> </ul>"},{"location":"Libraries/ses_lib_aggrid/","title":"AgGrid","text":"<ul> <li>AgGrid</li> </ul>"},{"location":"Libraries/ses_lib_devexpress/","title":"DevExpress","text":"<ul> <li> <p>DXButtonEdit</p> </li> <li> <p>DXCalcEdit</p> </li> <li> <p>DXCheckButton</p> </li> <li> <p>DXCheckedComboBoxEdit</p> </li> <li> <p>DXCheckEdit</p> </li> <li> <p>DXCheckedListBoxControl</p> </li> <li> <p>DXColorEdit</p> </li> <li> <p>DXComboBoxEdit</p> </li> <li> <p>DXDateEdit</p> </li> <li> <p>DXDockedBarControl</p> </li> <li> <p>DXDockPanel</p> </li> <li> <p>DXDocumentsHost</p> </li> <li> <p>DXDropDownButton</p> </li> <li> <p>DXFontEdit</p> </li> <li> <p>DXGridControl</p> </li> <li> <p>DXHyperLinkEdit</p> </li> <li> <p>DXImageComboBoxEdit</p> </li> <li> <p>DXImageEdit</p> </li> <li> <p>DXImageListBoxControl</p> </li> <li> <p>DXListBoxControl</p> </li> <li> <p>DXLookUpEdit</p> </li> <li> <p>DXMarqueeProgressBarControl</p> </li> <li> <p>DXMaskBox</p> </li> <li> <p>DXMemoEdit</p> </li> <li> <p>DXMemoExEdit</p> </li> <li> <p>DXMRUEdit</p> </li> <li> <p>DXNavBarControl</p> </li> <li> <p>DXPopupBarControl</p> </li> <li> <p>DXPopupContainerEdit</p> </li> <li> <p>DXPopupLookUpEditForm</p> </li> <li> <p>DXProgressBarControl</p> </li> <li> <p>DXPropertyGridControl</p> </li> <li> <p>DXRadioGroup</p> </li> <li> <p>DXRangeTrackBarControl</p> </li> <li> <p>DXRibbon</p> </li> <li> <p>DXSimpleButton</p> </li> <li> <p>DXSpinEdit</p> </li> <li> <p>DXTabControl</p> </li> <li> <p>DXTextEdit</p> </li> <li> <p>DXTextEditMasked</p> </li> <li> <p>DXTimeEdit</p> </li> <li> <p>DXTrackBarControl</p> </li> <li> <p>DXTreeList</p> </li> <li> <p>DXZoomTrackBarControl</p> </li> </ul>"},{"location":"Libraries/ses_lib_domdynamicsnav/","title":"DomDynamicsNAV","text":"<ul> <li> <p>DomDynamicsNAVEdit</p> </li> <li> <p>DomDynamicsNAVGrid</p> </li> </ul>"},{"location":"Libraries/ses_lib_domsap/","title":"DomSAP","text":"<ul> <li> <p>DomSAPButton</p> </li> <li> <p>DomSAPCalendar</p> </li> <li> <p>DomSAPCombobox</p> </li> <li> <p>DomSAPGrid</p> </li> <li> <p>DomSAPInput</p> </li> <li> <p>DomSAPRadioGroup</p> </li> <li> <p>DomSAPTable</p> </li> </ul>"},{"location":"Libraries/ses_lib_dynamics365/","title":"DomDynamicsAX","text":"<ul> <li> <p>DomDynamicsAXActionSearch</p> </li> <li> <p>DomDynamicsAXCheckBox</p> </li> <li> <p>DomDynamicsAXComboBox</p> </li> <li> <p>DomDynamicsAXCrumbList</p> </li> <li> <p>DomDynamicsAXDatePicker</p> </li> <li> <p>DomDynamicsAXGrid</p> </li> <li> <p>DomDynamicsAXMenuBar</p> </li> <li> <p>DomDynamicsAXMessageBar</p> </li> <li> <p>DomDynamicsAXNavigationSearch</p> </li> <li> <p>DomDynamicsAXTabControl</p> </li> <li> <p>DomDynamicsAXTextBox</p> </li> </ul>"},{"location":"Libraries/ses_lib_dynamicsax/","title":"DynamicsAX","text":"<ul> <li> <p>DynamicsAXAddressBar</p> </li> <li> <p>DynamicsAXComboBox</p> </li> <li> <p>DynamicsAXComboBoxEdit</p> </li> <li> <p>DynamicsAXComboBoxEditExpanded</p> </li> <li> <p>DynamicsAXFastTabs</p> </li> <li> <p>DynamicsAXMenu</p> </li> <li> <p>DynamicsAXMenuDropDown</p> </li> <li> <p>DynamicsAXMenuDropDownList</p> </li> <li> <p>DynamicsAXMenuItem</p> </li> <li> <p>DynamicsAXTable</p> </li> <li> <p>DynamicsAXTextBox</p> </li> </ul>"},{"location":"Libraries/ses_lib_dynamicscrm/","title":"DomDynamicsCrm","text":"<ul> <li> <p>DomDynamicsCrmAgGrid</p> </li> <li> <p>DomDynamicsCrmGrid</p> </li> <li> <p>DomDynamicsCrmUnifiedInterfaceGrid</p> </li> <li> <p>DomDynamicsCrmUnifiedInterfaceList</p> </li> </ul>"},{"location":"Libraries/ses_lib_dynamicsnav/","title":"DynamicsNAV","text":"<ul> <li> <p>DynamicsNAVFastTabs</p> </li> <li> <p>DynamicsNAVTable</p> </li> <li> <p>DynamicsNAVToolBar</p> </li> </ul>"},{"location":"Libraries/ses_lib_farpoint/","title":"FarPoint","text":"<ul> <li> <p>FarPointGrid</p> </li> <li> <p>FarPointGridAX</p> </li> </ul>"},{"location":"Libraries/ses_lib_generic/","title":"Generic","text":"<ul> <li> <p>SeSSimulatedObject</p> </li> <li> <p>Win32Button</p> </li> <li> <p>Win32CheckButton</p> </li> <li> <p>Win32ComboBox</p> </li> <li> <p>Win32ComboBoxEdit</p> </li> <li> <p>Win32ContextMenu</p> </li> <li> <p>Win32Link</p> </li> <li> <p>Win32List</p> </li> <li> <p>Win32ListCheckable</p> </li> <li> <p>Win32MenuBar</p> </li> <li> <p>Win32Outline</p> </li> <li> <p>Win32PopupMenu</p> </li> <li> <p>Win32RadioButton</p> </li> <li> <p>Win32StaticText</p> </li> <li> <p>Win32Text</p> </li> <li> <p>Win32TreeCheckable</p> </li> </ul>"},{"location":"Libraries/ses_lib_global/","title":"Global","text":"<ul> <li> <p>Android</p> </li> <li> <p>Database</p> </li> <li> <p>File</p> </li> <li> <p>Generator</p> </li> <li> <p>Global</p> </li> <li> <p>iOS</p> </li> <li> <p>Navigator</p> </li> <li> <p>Screenshot</p> </li> <li> <p>SeSReportException</p> </li> <li> <p>SeSReportImage</p> </li> <li> <p>SeSReportLink</p> </li> <li> <p>SeSReportText</p> </li> <li> <p>Spira</p> </li> <li> <p>Spreadsheet</p> </li> <li> <p>Tester</p> </li> <li> <p>Text</p> </li> <li> <p>WebDriver</p> </li> </ul>"},{"location":"Libraries/ses_lib_gwt/","title":"GWT","text":"<ul> <li> <p>GWTCheckBox</p> </li> <li> <p>GWTDatePicker</p> </li> <li> <p>GWTDecoratedStackPanel</p> </li> <li> <p>GWTMenuBar</p> </li> <li> <p>GWTPushButton</p> </li> <li> <p>GWTRadio</p> </li> <li> <p>GWTStackPanel</p> </li> <li> <p>GWTToggleButton</p> </li> <li> <p>GWTTree</p> </li> </ul>"},{"location":"Libraries/ses_lib_gwtext/","title":"GWTExt","text":"<ul> <li> <p>GWTExtComboBox</p> </li> <li> <p>GWTExtDatePicker</p> </li> <li> <p>GWTExtGrid</p> </li> <li> <p>GWTExtMenuBar</p> </li> <li> <p>GWTExtTabPanel</p> </li> <li> <p>GWTExtToggleButton</p> </li> <li> <p>GWTExtToolbar</p> </li> <li> <p>GWTExtTree</p> </li> </ul>"},{"location":"Libraries/ses_lib_html5/","title":"HTML5","text":"<ul> <li> <p>HTML5Number</p> </li> <li> <p>HTML5Progress</p> </li> <li> <p>HTML5Range</p> </li> </ul>"},{"location":"Libraries/ses_lib_infragistics/","title":"Infragistics","text":"<ul> <li> <p>AnimationControl</p> </li> <li> <p>UltraAppMenu</p> </li> <li> <p>UltraButton</p> </li> <li> <p>UltraCheckEditor</p> </li> <li> <p>UltraColorPicker</p> </li> <li> <p>UltraComboEditor</p> </li> <li> <p>UltraCurrencyEditor</p> </li> <li> <p>UltraDropDownButton</p> </li> <li> <p>UltraFontNameEditor</p> </li> <li> <p>UltraFormattedLinkLabel</p> </li> <li> <p>UltraFormattedTextEditor</p> </li> <li> <p>UltraGrid</p> </li> <li> <p>UltraLabel</p> </li> <li> <p>UltraListBar</p> </li> <li> <p>UltraListView</p> </li> <li> <p>UltraMaskedEdit</p> </li> <li> <p>UltraMdiTabGroupControl</p> </li> <li> <p>UltraNumericEditor</p> </li> <li> <p>UltraOptionSet</p> </li> <li> <p>UltraPopupMenu</p> </li> <li> <p>UltraProgressBar</p> </li> <li> <p>UltraRibbon</p> </li> <li> <p>UltraStatusBar</p> </li> <li> <p>UltraTabControl</p> </li> <li> <p>UltraTextEditor</p> </li> <li> <p>UltraTimeZoneEditor</p> </li> <li> <p>UltraTree</p> </li> <li> <p>ValueListDropDownUnsafe</p> </li> </ul>"},{"location":"Libraries/ses_lib_java/","title":"Java","text":"<ul> <li> <p>JavaButton</p> </li> <li> <p>JavaCheckBox</p> </li> <li> <p>JavaChoice</p> </li> <li> <p>JavaLabel</p> </li> <li> <p>JavaList</p> </li> <li> <p>JavaObject</p> </li> <li> <p>JavaSwingButton</p> </li> <li> <p>JavaSwingCheckBox</p> </li> <li> <p>JavaSwingComboBox</p> </li> <li> <p>JavaSwingLabel</p> </li> <li> <p>JavaSwingList</p> </li> <li> <p>JavaSwingMenuBar</p> </li> <li> <p>JavaSwingPasswordField</p> </li> <li> <p>JavaSwingPopupMenu</p> </li> <li> <p>JavaSwingProgressBar</p> </li> <li> <p>JavaSwingRadioButton</p> </li> <li> <p>JavaSwingSlider</p> </li> <li> <p>JavaSwingTable</p> </li> <li> <p>JavaSwingTextArea</p> </li> <li> <p>JavaSwingTextField</p> </li> <li> <p>JavaSwingToggleButton</p> </li> <li> <p>JavaSwingTree</p> </li> <li> <p>JavaTextArea</p> </li> <li> <p>JavaTextField</p> </li> </ul>"},{"location":"Libraries/ses_lib_jquery/","title":"jQuery","text":"<ul> <li> <p>JQueryAccordion</p> </li> <li> <p>JQueryDatepicker</p> </li> <li> <p>JQueryMenu</p> </li> <li> <p>JQueryProgressbar</p> </li> <li> <p>JQuerySliderH</p> </li> <li> <p>JQuerySliderV</p> </li> <li> <p>JQuerySpinner</p> </li> <li> <p>JQueryTabs</p> </li> </ul>"},{"location":"Libraries/ses_lib_managed/","title":"Managed","text":"<ul> <li> <p>ManagedButton</p> </li> <li> <p>ManagedCheckBox</p> </li> <li> <p>ManagedCheckedListBox</p> </li> <li> <p>ManagedComboBox</p> </li> <li> <p>ManagedDataGridView</p> </li> <li> <p>ManagedLabel</p> </li> <li> <p>ManagedLinkLabel</p> </li> <li> <p>ManagedListBox</p> </li> <li> <p>ManagedListView</p> </li> <li> <p>ManagedMenuPopupItem</p> </li> <li> <p>ManagedMenuStrip</p> </li> <li> <p>ManagedObject</p> </li> <li> <p>ManagedPopupListBox</p> </li> <li> <p>ManagedPropertyGrid</p> </li> <li> <p>ManagedRadioButton</p> </li> <li> <p>ManagedStatusBar</p> </li> <li> <p>ManagedTextBox</p> </li> <li> <p>ManagedTreeView</p> </li> </ul>"},{"location":"Libraries/ses_lib_mobile/","title":"Mobile","text":""},{"location":"Libraries/ses_lib_mobile/#android-native","title":"Android Native","text":"<ul> <li>Android</li> <li>AndroidButton</li> <li>AndroidCheckBox</li> <li>AndroidEditBox</li> <li>AndroidImageButton</li> <li>AndroidImageView</li> <li>AndroidLabel</li> <li>AndroidListView</li> <li>AndroidObject</li> <li>AndroidProgressBar</li> <li>AndroidRadioButton</li> <li>AndroidRatingBar</li> <li>AndroidSeekBar</li> <li>AndroidSpinner</li> <li>AndroidSwitch</li> <li>AndroidToggleButton</li> </ul>"},{"location":"Libraries/ses_lib_mobile/#ios-native","title":"iOS Native","text":"<ul> <li>iOS</li> <li>iOSButton</li> <li>iOSEditBox</li> <li>iOSImage</li> <li>iOSLabel</li> <li>iOSObject</li> <li>iOSPageIndicator</li> <li>iOSPicker</li> <li>iOSScrollView</li> <li>iOSSearch</li> <li>iOSSlider</li> <li>iOSSwitch</li> <li>iOSTabBar</li> <li>iOSTable</li> <li>iOSTextView</li> <li>iOSWebView</li> </ul>"},{"location":"Libraries/ses_lib_mobile/#mobile-web","title":"Mobile Web","text":"<ul> <li>MobileWebObject</li> </ul>"},{"location":"Libraries/ses_lib_mobile/#appium-api","title":"Appium API","text":"<ul> <li>AppiumCapabilities</li> <li>AppiumDriver</li> <li>AppiumWebElement</li> <li>TouchAction</li> <li>ActionSequence</li> <li>PointerInputDevice</li> </ul>"},{"location":"Libraries/ses_lib_navposcontrols/","title":"NavPOSControls","text":"<ul> <li>NavButtonPad</li> </ul>"},{"location":"Libraries/ses_lib_oracleforms/","title":"OracleForms","text":"<ul> <li> <p>[GlassMouseGrabProviderProxy](GlassMouseGrabProviderProxy.md)</p> </li> <li> <p>LWCheckbox</p> </li> <li> <p>LWTextComponent</p> </li> <li> <p>OFTabBar</p> </li> <li> <p>OFToolBar</p> </li> <li> <p>OracleEnhLabledIconButton</p> </li> <li> <p>OracleFormsMenuBar</p> </li> <li> <p>OracleFormsObject</p> </li> <li> <p>OracleFormsTable</p> </li> <li> <p>OraclePushButton</p> </li> <li> <p>VButton</p> </li> <li> <p>VCheckbox</p> </li> <li> <p>VComboBox</p> </li> <li> <p>VPopList</p> </li> <li> <p>VTextField</p> </li> </ul>"},{"location":"Libraries/ses_lib_qt/","title":"Qt","text":"<ul> <li> <p>QAbstractButton</p> </li> <li> <p>QCheckBox</p> </li> <li> <p>QComboBox</p> </li> <li> <p>QDateTimeEdit</p> </li> <li> <p>QFontComboBox</p> </li> <li> <p>QLabel</p> </li> <li> <p>QLineEdit</p> </li> <li> <p>QListBox</p> </li> <li> <p>QMenuBar</p> </li> <li> <p>QPopup</p> </li> <li> <p>QPopupMenu</p> </li> <li> <p>QPushButton</p> </li> <li> <p>QRadioButton</p> </li> <li> <p>QSimulated</p> </li> <li> <p>QTabPage</p> </li> <li> <p>QToolButton</p> </li> <li> <p>QWidget</p> </li> </ul>"},{"location":"Libraries/ses_lib_salesforce/","title":"DomSalesforce","text":"<ul> <li> <p>DomLightningComboBox</p> </li> <li> <p>DomLightningGrid</p> </li> <li> <p>DomLightningListBox</p> </li> <li> <p>DomSalesforceGrid</p> </li> </ul>"},{"location":"Libraries/ses_lib_selenium/","title":"Selenium","text":"<ul> <li>Actions</li> <li>ActionSequence</li> <li>Capabilities</li> <li>Cookies</li> <li>PointerInputDevice</li> <li>Screenshot</li> <li>WebDriver</li> <li>WebElementWrapper</li> <li>Window</li> </ul>"},{"location":"Libraries/ses_lib_smartgwt/","title":"DomSmartGwt","text":"<ul> <li> <p>SmartGwtDatePicker</p> </li> <li> <p>SmartGwtTabControl</p> </li> <li> <p>SmartGwtToolbar</p> </li> </ul>"},{"location":"Libraries/ses_lib_swt/","title":"SWT","text":"<ul> <li> <p>SWTComboBox</p> </li> <li> <p>SWTComboBoxEdit</p> </li> <li> <p>SWTList</p> </li> <li> <p>SWTObject</p> </li> <li> <p>SWTTree</p> </li> </ul>"},{"location":"Libraries/ses_lib_syncfusion/","title":"Syncfusion","text":"<ul> <li> <p>SyncfusionGrouping</p> </li> <li> <p>SyncfusionRibbon</p> </li> </ul>"},{"location":"Libraries/ses_lib_telerik/","title":"Telerik","text":"<ul> <li> <p>TelerikDropDownPopupForm</p> </li> <li> <p>TelerikRadApplicationMenu</p> </li> <li> <p>TelerikRadApplicationMenuDropDown</p> </li> <li> <p>TelerikRadButton</p> </li> <li> <p>TelerikRadCheckBox</p> </li> <li> <p>TelerikRadDateTimePicker</p> </li> <li> <p>TelerikRadDropDownButton</p> </li> <li> <p>TelerikRadDropDownButtonPopup</p> </li> <li> <p>TelerikRadDropDownList</p> </li> <li> <p>TelerikRadDropDownMenu</p> </li> <li> <p>TelerikRadGridView</p> </li> <li> <p>TelerikRadLabel</p> </li> <li> <p>TelerikRadListControl</p> </li> <li> <p>TelerikRadMaskedEditBox</p> </li> <li> <p>TelerikRadMenu</p> </li> <li> <p>TelerikRadProgressBar</p> </li> <li> <p>TelerikRadRadioButton</p> </li> <li> <p>TelerikRadRibbonBar</p> </li> <li> <p>TelerikRadSpinEditor</p> </li> <li> <p>TelerikRadTextBox</p> </li> <li> <p>TelerikRadTitleBar</p> </li> <li> <p>TelerikRadToggleButton</p> </li> <li> <p>TelerikRadToolStrip</p> </li> <li> <p>TelerikRadTrackBar</p> </li> <li> <p>TelerikRadTreeView</p> </li> </ul>"},{"location":"Libraries/ses_lib_uiautomation/","title":"UIAutomation","text":"<ul> <li> <p>UIAButton</p> </li> <li> <p>UIACheckBox</p> </li> <li> <p>UIAComboBox</p> </li> <li> <p>UIAComboBoxEdit</p> </li> <li> <p>UIAHyperlink</p> </li> <li> <p>UIALabel</p> </li> <li> <p>UIAList</p> </li> <li> <p>UIAMenu</p> </li> <li> <p>UIAObject</p> </li> <li> <p>UIAProgressBar</p> </li> <li> <p>UIARadioButton</p> </li> <li> <p>UIASlider</p> </li> <li> <p>UIATabControl</p> </li> <li> <p>UIATextBlock</p> </li> <li> <p>UIATextBox</p> </li> <li> <p>UIATree</p> </li> <li> <p>UIAutomationMenuDropDown</p> </li> <li> <p>UIAutomationMenuDropDownList</p> </li> <li> <p>UIAutomationMenuItem</p> </li> </ul>"},{"location":"Libraries/ses_lib_vsflexgrid/","title":"VSFlexGrid","text":"<ul> <li>VSFlexGrid</li> </ul>"},{"location":"Libraries/ses_lib_web/","title":"Web","text":"<ul> <li>HTMLObject</li> <li>Navigator</li> </ul>"},{"location":"Libraries/ses_lib_webservices/","title":"Global","text":"<ul> <li>Session</li> </ul>"},{"location":"Libraries/ses_lib_webservices/#web-services","title":"Web Services","text":"<ul> <li> <p>RESTRequest</p> </li> <li> <p>RESTResponse</p> </li> <li> <p>RESTService</p> </li> <li> <p>SOAPService</p> </li> </ul>"},{"location":"Libraries/ses_lib_yui/","title":"YUI","text":"<ul> <li> <p>YUIButtonMenu</p> </li> <li> <p>YUICalendar</p> </li> <li> <p>YUICheckButton</p> </li> <li> <p>YUIMenu</p> </li> <li> <p>YUIMenuBar</p> </li> <li> <p>YUIMenuButton</p> </li> <li> <p>YUIPushButton</p> </li> <li> <p>YUIRadioButton</p> </li> <li> <p>YUISliderH</p> </li> <li> <p>YUISliderV</p> </li> <li> <p>YUISplitButton</p> </li> <li> <p>YUITree</p> </li> </ul>"},{"location":"Manuals/Preparing_for_Android_Testing/","title":"Preparing Environment for Android Mobile Testing with Rapise","text":"<p>Rapise lets you record and play automated tests against native applications on a variety of mobile devices using the Android operating system. Rapise gives you the flexibility to test your applications on either real or simulated devices.</p> <p>This section explains how to setup your environment for mobile testing, once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing.</p> <p>Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium.</p>"},{"location":"Manuals/Preparing_for_Android_Testing/#testing-architectures","title":"Testing Architectures","text":"<p>Rapise runs on Windows computers (PC) and Android devices (both real and simulated) can be tested on either an Apple Macintosh (Mac) computer or a PC. So this means that there are two separate possible testing environments that you may need to setup:</p> <ul> <li> <p>Using a Mac to Host Android Emulator and Devices. It will be necessary to install Appium and Android Studio onto the Mac and connect to Appium over the network from Rapise running on your PC.</p> </li> <li> <p>Using a PC to Host Android Emulator and Devices. You can either install Appium and Android Studio onto a separate PC or you can simply use the same PC that is running Rapise. The only difference will be whether the URL used to connect to Appium is a localhost URL or one pointing to the other PC.</p> </li> </ul> <p>The steps for setting each of these will be described separately.</p> <p>For physical Android devices the architecture looks like:</p> <p></p> <p>For simulated Android devices (using the Android Virtual Device Manager) the architecture looks like:</p> <p></p>"},{"location":"Manuals/Preparing_for_Android_Testing/#using-a-mac-to-host-android-emulator-and-devices","title":"Using a Mac to Host Android Emulator and Devices","text":"<p>The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal.</p> <pre><code>&gt; brew install node\n&gt; npm install -g appium\n</code></pre> <p>More about Appium installation.</p> <p>Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website. Once that has been installed, make sure that the JAVA_HOME environment variable has been set.</p> <p>Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site.</p> <p>More about Android Studio installation.</p> <p>Once it has installed, you will use the Android SDK Manager to download and install the necessary packages:</p> <p></p> <p></p>"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-android-emulator","title":"Preparing Android Emulator","text":"<p>If you want to test using the Android Emulator, make sure you have installed it using the SDK manager.</p> <p></p> <p>Then you can launch (from the main menu of the Android Studio) the Android Virtual Device Manager.</p> <p></p> <p></p> <p>In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise.</p>"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-a-physical-android-device","title":"Preparing a Physical Android Device","text":"<p>If you are going to be testing a physical Android device, you will need to do the following.</p> <p>The Settings app on Android includes a screen called Developer options that lets you configure system behaviors that help you profile and debug your app performance.</p> <p>Enable developer options and debugging</p> <p>On Android 4.1 and lower, the Developer options screen is available by default. On Android 4.2 and higher, you must enable this screen as follows:</p> <ol> <li>Open the <code>Settings</code> app.</li> <li>Find the <code>Build number</code> option (usually inside <code>About phone</code>).</li> <li>Tap <code>Build number</code> 7 times.</li> <li>Return to the previous screen to find <code>Developer options</code> near the bottom.</li> </ol> <p>If you can not find the <code>Build number</code> option read more about Developer Options and USB Debugging.</p> <p>At the top of the <code>Developer options</code> screen, you can toggle the options on and off.</p> <p></p> <p>You probably want to keep this on. When off, most options are disabled except those that don't require communication between the device and your development computer.</p> <p>Next, you should scroll down a little and enable USB debugging. This allows Android Studio and other SDK tools to recognize your device when connected via USB, so you can use the debugger and other tools.</p> <p>You are now ready to start mobile testing of your Android Device and Android Emulator.</p>"},{"location":"Manuals/Preparing_for_Android_Testing/#using-a-pc-to-host-android-emulator-and-devices","title":"Using a PC to Host Android Emulator and Devices","text":"<p>The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Command Prompt.</p> <ol> <li>Install NodeJS and NPM as described here.</li> <li>Install Appium</li> </ol> <pre><code>&gt; npm install -g appium\n</code></pre> <p>Once that is installed, you will then need to download and install the latest version of Java SE Development Kit (JDK) from the Oracle website. Once that has been installed, make sure that the  JAVA_HOME environment variable has been set.</p> <p>Once that is installed, you will then need to install the Android Studio (you may already have it installed if you are doing Android development). You can download it from Android Developer site.</p> <p>Make sure you have ANDROID_HOME environment variable set to point to Android SDK. In most cases it should point to</p> <pre><code>c:\\Users\\&lt;user name&gt;\\AppData\\Local\\Android\\sdk\n</code></pre> <p>More about Android Studio installation</p> <p>Once it has installed, you will use the Android SDK Manager to download and install the necessary packages.</p> <p></p> <p></p>"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-android-emulator_1","title":"Preparing Android Emulator","text":"<p>If you want to test using the Android Emulator, make sure you have installed it using the SDK manager.</p> <p></p> <p>Then you can launch (from the main menu of the Android Studio) the Android Virtual Device Manager.</p> <p></p> <p></p> <p>In this case you can just create the Android Virtual Device, Start it and then connect to it using Rapise.</p>"},{"location":"Manuals/Preparing_for_Android_Testing/#preparing-a-physical-android-device_1","title":"Preparing a Physical Android Device","text":"<p>Steps are the same as for Mac.</p>"},{"location":"Manuals/Preparing_for_iOS_Testing/","title":"Preparing Environment for iOS Mobile Testing with Rapise","text":"<p>Rapise lets you record and play automated tests against native applications on a variety of mobile devices using Apple iOS. Rapise gives you the flexibility to test your applications on either real or simulated devices.</p> <p>This section explains how to setup your environment for mobile testing, once that is done, you can the go to the section that explains the process for using Rapise to actually perform mobile testing.</p> <p>Rapise uses a third-party open-source tool called Appium that is used to actually host the mobile devices and Rapise essentially communicates to the device via Appium.</p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#testing-architecture","title":"Testing Architecture","text":"<p>Since Rapise runs on Windows computers (PC) and iOS devices (both real and simulated) can only be tested on an Apple Macintosh (Mac) computer, it is necessary that you install Appium and Apple Xcode onto the Mac and connect to Appium over the network from Rapise running on your PC.</p> <p>For Physical iOS devices the architecture looks like:</p> <p></p> <p>For simulated iOS devices (using the XCode iOS Simulator) the architecture looks like:</p> <p></p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#using-a-mac-to-host-ios-simulator-and-devices","title":"Using a Mac to Host iOS Simulator and Devices","text":"<p>The first thing you need to do is install Xcode from the Apple Mac app store. Make sure you include the iOS SDK, and also the iOS Simulator if you intend to test simulated iOS devices.</p> <p></p> <p>(Please refer to the Apple tutorial if you are writing your first iOS application and need an introduction into how to develop for iOS).</p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#get-the-autios-source-code","title":"Get the AUTiOS Source Code","text":"<p>Sample iOS application is hosted in AUTiOS Repository.</p> <p>Launch Xcode on the Mac and check out the application from the repository:</p> <p></p> <p>Before you can actually build and deploy this project, you will need to register for an Apple ID and setup an Apple Developer account. You should check with your company to see if they have already joined the Apple iOS Developer Program, if not, you will need to join yourself and become a member. You can learn more about this at the Apple developer website.</p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#join-your-ios-development-team","title":"Join Your iOS Development Team","text":"<p>Assuming that either you or your company already has signed up for the iOS Developer Program, you will need to ask the administrator of your account (it might be you) to send an invitation to you if you are not already a member. The link for accepting such an invitation is typically:</p> <p>https://developer.apple.com/programs/start/jointeam/index.php?success=%2Fios%2Finvitation%2Faccept.action</p> <p>Click on this link and accept the invitation.</p> <p>Meanwhile, back in Xcode Use the \u2018Add an Account\u2026\u2019 to login with your Apple ID:</p> <p></p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#building-and-deploying-on-a-simulated-device","title":"Building and Deploying on a Simulated Device","text":"<p>Now that you have signed into Xcode using your developer account, you can select a simulated device and run the project on it:</p> <p></p> <p>Once you have selected the simulated iOS device you want to use, click the Product &gt; Build option to build the app for the targeted device. You can use the Run option to make sure that the app actually launches on this device before testing it with Rapise.</p> <p></p> <p>Assuming that this is successful, you will see the AUTiOS running in the iOS Simulator:</p> <p></p> <p>If you are only going to use Simulated devices (not recommended) then you can skip the next section and just continue with setting up Appium, as described in the main Mobile Testing topic.</p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#building-and-deploying-on-a-physical-device","title":"Building and Deploying on a Physical Device","text":"<p>Login with your Apple ID to http://developer.apple.com</p> <p>Choose Certificates, Identifiers &amp; Profiles:</p> <p></p> <p>Select Devices:</p> <p></p> <p>Add your device's UDID to the list of registered iOS devices in the developer account:</p> <p></p> <p>You can find out the UDID by connecting it to the Mac and viewing the device inside Xcode.</p> <p></p> <p>Then, back in Xcode choose your physical device, and use the Product &gt; Build and Run option to test that the app launches on the device:</p> <p></p>"},{"location":"Manuals/Preparing_for_iOS_Testing/#installing-appium-on-the-mac","title":"Installing Appium on the Mac","text":"<p>The first thing you need to do is install the latest version of Appium. The easiest way to install it is to use Terminal.</p> <pre><code>&gt; brew install node\n&gt; npm install -g appium\n</code></pre> <p>More about Appium installation.</p> <p>You are now ready to start mobile testing of your iOS simulator or device.</p>"},{"location":"Manuals/Rapise_Installation_Guide/","title":"Rapise Installation Guide","text":""},{"location":"Manuals/Rapise_Installation_Guide/#introduction","title":"Introduction","text":"<p>Rapise\u00ae is a next generation software test automation tool that leverages the power of open architecture to improve application quality and reduce time to market.</p> <p>This installation guide outlines how to setup a working installation of Rapise including the installation of any dependencies and prerequisites. It also provides information on obtaining an evaluation or production license key from Inflectra so that you can use the software.</p> <p>It assumes a basic understanding of how to setup and administer a Windows\u00ae workstation, and also assumes that you have access to a valid Administrator level account that can install software.</p> <p>For information on how to use the features of Rapise please refer to either the Rapise Quick Start Guide or the Rapise User's Guide instead.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#installing-rapise","title":"Installing Rapise","text":"<p>This section outlines how to prepare your system for installation of Rapise, and how to actually install the software using the provided installation package.</p> <p>The first sub-section will outline what hardware and software configurations are supported and the exact installation sequence for different versions of Microsoft\u00ae Windows\u00ae. The second sub-section will explain how to load the Rapise software onto the computer, and discuss common problems and solutions.</p> <p>The minimum hardware and software requirements for running the Rapise are:</p> Requirement Minimum Specification Processor: Intel\u00ae or AMD\u00ae x86 or x64 compatible processor Memory: 2 GB, 4 GB recommended Disk Space: 5 GB Display: HD (1280 x 720) Operating System: Microsoft Windows 8.1 (x86 and x64) Microsoft Windows 10, 11 Microsoft Windows Server 2012 R1 / R2 Microsoft Windows Server 2016, 2019, 2022 Web Browsers: Internet Explorer 8.0+ Mozilla Firefox Google Chrome Microsoft Edge Apple Safari Other Components: .NET Framework 4.7.2"},{"location":"Manuals/Rapise_Installation_Guide/#system-prerequisites","title":"System Prerequisites","text":"<p>Assuming that you have already installed the appropriate version of Microsoft Windows onto your computer (or that has been pre-installed for you), you need to then make sure that the various prerequisites have been correctly added to your installation before trying to install Rapise. The Rapise installer will check to ensure that the various prerequisites are in place, and will install any missing perquisites (apart from the Microsoft .NET Framework) automatically.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#microsoft-net-472","title":"Microsoft .NET 4.7.2","text":"<p>On Windows 10 and Windows 2016 Server installations (with all latest updates) Microsoft .NET Framework meets minimum requirements, whereas on earlier operating systems, you might need to manually add the .NET 4.7.2 components to the factory configuration.</p> <p>To install the .NET Framework, launch Internet Explorer and enter the URL: https://dotnet.microsoft.com/en-us/download/dotnet-framework/net472. From this page there will be links to download and install the appropriate version of the .NET Framework. </p>"},{"location":"Manuals/Rapise_Installation_Guide/#remove-any-previous-versions","title":"Remove any Previous Versions","text":"<p>Before installing the current version of Rapise, we recommend first uninstalling any previous versions of Rapise to ensure you have a clean installation. To do this, go to <code>Start &gt; Control Panel &gt; Programs and Features</code>:</p> <p></p> <p>The click the \"Rapise\" entry and confirm that you want to install the existing installed version.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#installing-the-software","title":"Installing the Software","text":"<p>Now that all the prerequisites have been correctly installed, you are now ready to install Rapise onto your system. To perform the installation, you will need the installation package downloaded from the Inflectra\u00ae website.</p> <p>To start the installation, double-click on the Rapise installation package (it will have a filename of the form Rapise-vX.X.X.X.exe), and the Windows Installer will display the following dialog box:</p> <p></p> <p>The first screen in the installation wizard outlines the Inflectra End User License Agreement (EULA). Please read this carefully as it describes the legal contract between you -- the user of the software -- and Inflectra\u00ae Corporation, the developer and publisher. Once you have read the agreement and understood your rights and obligations, select the checkbox marked \"I agree to the license terms and conditions\" and click the <code>Install</code> button.</p> <p>This will begin the process of installing Rapise onto your system. If you are installing Rapise onto Windows Vista or newer, then you may be prompted by the Windows User Access Control (UAC) security system to confirm that you want to install a new piece of software:</p> <p></p> <p>Click the option that confirms you want to proceed with the install.</p> <p></p> <p>The installer will then display a progress bar that gradually fills as the installation proceeds. Once the installation is complete, the following message will be displayed:</p> <p></p> <p>Congratulations! You have successfully installed Rapise onto your system.</p> <p>You should now have a Rapise shortcut icon added to your Windows Desktop and if you click on Start &gt; Program Files &gt; Inflectra &gt; Rapise, you should see the new Rapise program group:</p> <p></p>"},{"location":"Manuals/Rapise_Installation_Guide/#license","title":"License","text":"<p>As we announced back in June 2021, there have been plans to provide our Rapise test automation platform with a new floating license option, in addition to the fixed licensing system that we've had since the launch of the product. Well the big day has arrived - we are pleased to announce that you can now purchase Rapise floating licenses as part of your existing Spira subscription, with both monthly and annual options.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#floating-license","title":"Floating License","text":""},{"location":"Manuals/Rapise_Installation_Guide/#how-to-purchase","title":"How to Purchase","text":"<p>Unlike fixed licenses which are purchased from our website as a standalone purchase, Rapise uses our Spira test management platform to manage its floating licenses. So you will need to first login to Customer Portal on our website. From here, you need to locate your SpiraTest, SpiraTeam or SpiraPlan cloud subscription and click the Customize button:</p> <p></p> <p>(If you are not using the cloud version of Spira, then unfortunately at this time you cannot use floating licenses)</p> <p>Once you click on the Customize button you can choose the number of Rapise floating licenses you want to purchase:</p> <p></p> <p>If you have a monthly Spira subscription, the Rapise floating licenses will also be charged monthly, whereas if you have an annual Spira subscription, then the Rapise floating licenses will similarly be part of the annual renewal. Once you have completed the purchase of the floating licenses, you will see a new Rapise subscription add-on in your Customer Area homepage:</p> <p></p> <p>It will be initially in the <code>Pending</code> status while our cloud servers complete the task of updating your Spira instance with the number of Rapise licenses. Once that task is completed, you will get an email letting you know, and the status will change to <code>Active</code>.</p> <p></p>"},{"location":"Manuals/Rapise_Installation_Guide/#how-to-manage","title":"How to Manage","text":"<p>Once the subscription add-on has been provisioned, you will see a new menu entry in the System Administration: Integration section of your Spira instance:</p> <p></p> <p>When you click on this link you will see how many Rapise floating licenses are available as well as how many are currently in use (initially the list will be empty):</p> <p></p> <p>You can now connect Rapise to your Spira instance to use the new floating licenses.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#how-to-configure","title":"How to Configure","text":"<p>Now that you have floating licenses available, when you connect Rapise to Spira as you would normally to start writing tests:</p> <p></p> <p>Rapise automatically requests a floating license from Spira and will use that license until Rapise is closed or an administrator clicks the End Session button in Spira:</p> <p></p> <p>The advantage of the floating licenses is that you can have all your computers install Rapise and they will only use a license when Rapise is active, vs. having to purchase a fixed license for a machine regardless of whether that machine is actually using the license. In addition, it lets you purchase Rapise licenses monthly bundled with your existing Spira subscription.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#fixed-license","title":"Fixed License","text":"<p>Once you have successfully installed Rapise, you will need to activate it with a license key (either a temporary evaluation key or a permanent production key). This section describes the process for activating your copy of Rapise as well as how to perform updates to the license key and potentially move it to another computer.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#getting-your-activation-code","title":"Getting Your Activation Code","text":"<p>When you first launch Rapise after installation, it will display the following dialog box:</p> <p></p> <p>You should now enter the alphanumeric activation code from the Customer Area of the Inflectra website (the same page that you downloaded the installation package from). It will be displayed in the <code>My Licenses</code> section of the webpage. An example page is shown below:</p> <p></p> <p>There are two kinds of activation code:</p> <ul> <li>Evaluation Activation Codes -- these start with the letters DMO</li> <li>Production Activation Codes -- these start with the letters SDM</li> </ul> <p>You should enter the appropriate activation code into the Rapise activation wizard and choose the option to either activate online or offline. If you are connected to the Internet, online activation is easier. If you are not connected to the Internet (e.g. working in a secure environment), then you will need to use the offline activation option.</p> <p>The following sections will explain how each of the options work:</p>"},{"location":"Manuals/Rapise_Installation_Guide/#activating-online","title":"Activating Online","text":"<p>To use online activation, make sure you are connected to the Internet, enter the activation code, choose <code>Activate Online</code> and click the <code>Finish</code> button:</p> <p></p> <p>The activation system will contact our activation server, process the activation code and activate the license. The application will start automatically and if you visit the Customer Area of our website, you will see that it is listed as activated, with a license key displayed:</p> <p></p>"},{"location":"Manuals/Rapise_Installation_Guide/#activating-offline","title":"Activating Offline","text":"<p>To use offline activation, enter the activation code, choose <code>Activate Offline</code> and click the <code>Next</code> button:</p> <p></p> <p>This will bring up the Offline Activation screen:</p> <p></p> <p>Click on the <code>Save</code> button to save the Rapise.LIC file to your hard drive.</p> <p>Copy across the Rapise.LIC file to a computer that has Internet access and open up the Customer Area of our website:</p> <p></p> <p>Click on the Activate link which will take you to the Offline Activation part of our website:</p> <p></p> <p>Click on the <code>Browse</code> button and navigate to the place where the Rapise.LIC file is stored. Then click on the <code>Activate</code> button to begin the activation process. Assuming that the License file is valid, the website will activate the license and take you back to the Customer Area where the license key will be displayed:</p> <p></p> <p>Click on the License Key hyperlink and you will be prompted to save the Rapise.CDM file to your hard drive. Save this file and then copy it across to the computer that has Rapise installed. Now on the Offline Activation screen:</p> <p></p> <p>Click the Step 3 <code>Open</code> button and browse to the Rapise.CDM file. Once you have the file selected, click on the <code>Finish</code> button to complete the activation. Assuming that the Rapise.CDM file is valid, the application will start.</p> <p>Note</p> <p>If you have any problems activating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#upgrading-from-demo-license","title":"Upgrading from Demo License","text":"<p>If you have installed a demonstration license, when the expiration date is reached the software functionality will be limited and you will be prompted to purchase a commercial license. To purchase the commercial license, go to http://www.inflectra.com/Rapise and click on the appropriate Purchase link to obtain a commercial production license.</p> <p>Once you have purchased the license your Customer Area will display a new activation code. Simply start up Rapise, enter the new activation code and follow the process described in sections Activating Online or Activating Offline.</p> <p>If you want to upgrade your license before the demonstration license is expired, you need to click on the menu Help &gt; Activation:</p> <p></p> <p>This will bring up the Activation dialog box:</p> <p></p> <p>Click on the <code>Enter Activation Code</code> button and then follow the process described in sections Activating Online or Activating Offline to activate the product with the new production license.</p> <p>Without a valid license Rapise will continue to work but without Recording and Playback functionality.</p> <p></p>"},{"location":"Manuals/Rapise_Installation_Guide/#transferring-to-another-computer","title":"Transferring to Another Computer","text":"<p>Sometimes you need to transfer your Rapise license from one computer to another, or the computer it's installed on needs to be rebuilt. In either case, it's important that you first deactivate the product from the current computer, otherwise you will be prevented from activating the product on the new / rebuilt computer.</p> <p>To deactivate your current installation, you need to click on the Activation button in the Help section of the Rapise Test ribbon:</p> <p></p> <p>This will bring up the Activation dialog box:</p> <p></p> <p>Click on the <code>Deactivate</code> button and activation system will contact our activation server, process the deactivation code and deactivate the license. If you visit the Customer Area of our website, you will see that it is listed as deactivated, with the option to activate it now available:</p> <p></p> <p>Note</p> <p>If you have any problems deactivating your installation, please go to https://www.inflectra.com/Support and contact Inflectra customer support and they will help you resolve your problem.</p>"},{"location":"Manuals/Rapise_Installation_Guide/#legal-notices","title":"Legal Notices","text":"<p>This publication is provided as is without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement.</p> <p>This publication could include technical inaccuracies or typographical errors. Changes are periodically added to the information contained herein; these changes will be incorporated in new editions of the publication. Inflectra\u00ae Corporation may make improvements and/or changes in the product(s) and/or program(s) and/or service(s) described in this publication at any time.</p> <p>The sections in this guide that discuss internet web security are provided as suggestions and guidelines. Internet security is constantly evolving field, and our suggestions are no substitute for an up-to-date understanding of the vulnerabilities inherent in deploying internet or web applications, and Inflectra<sup>\u00ae</sup> cannot be held liable for any losses due to breaches of security, compromise of data or other cyber-attacks that may result from following our recommendations.</p> <p>The section of the manual that describes modifying the Windows System Registry (\"Registry\") should only be attempted by experienced Windows administrators who are familiar with its organization and contents. Inflectra\u00ae cannot be held liable for any losses due to damage to the system registry made by inexperienced personnel.</p> <p>SpiraTest\u00ae, SpiraTeam\u00ae, Rapise\u00ae and Inflectra\u00ae are either trademarks or registered trademarks of Inflectra Corporation in the United States of America and other countries. Microsoft\u00ae, Windows\u00ae, Explorer\u00ae and Microsoft Project\u00ae are registered trademarks of Microsoft Corporation.</p> <p>All other trademarks and product names are property of their respective holders.</p> <p>Please send comments and questions to:</p> <p>Technical Publications Inflectra Corporation 8121 Georgia Ave, Suite 504 Silver Spring, MD 20910-4957 USA </p> <p>support@inflectra.com</p>"},{"location":"Manuals/Rpa/","title":"Robotic Process Automation","text":"<p>Since version 6.3 Rapise includes RPA Monitor.</p> <p></p> <p>RPA Monitor runs agents based on configuration specified in a JSON file (usually <code>rpa_config.json</code>). This file has the following structure:</p> <pre><code>{\n    \"name\": \"Name of RPA Scenario\",\n    \"agents\": \n    [\n        {\n            \"id\": \"unique id of the agent\",\n            \"description\": \"purpose of the agent\",\n            \"type\": \"RpaFolderMonitor|RpaQueue|RpaTimer\",\n            \"options\":\n            {\n                // Options specific for the agent type\n            }\n        }\n        // other agents\n    ]\n}\n</code></pre> <p>RPA Monitor supports different types of agents.</p>"},{"location":"Manuals/Rpa/#agent-types","title":"Agent Types","text":""},{"location":"Manuals/Rpa/#rpaqueue","title":"RpaQueue","text":"<p>Any scenario must have a queue that will process commands triggered by other agents.</p> <p>Queue specification is always the same:</p> <pre><code>{\n    \"id\": \"rpa_queue\",\n    \"description\": \"Queue for managing RPA communication\",\n    \"type\": \"RpaQueue\",\n    \"options\":\n    {\n    }\n}\n</code></pre> <p>The queue ensures that commands are processed sequentially and no more than one Rapise test is executed at the same time.</p>"},{"location":"Manuals/Rpa/#rpafoldermonitor","title":"RpaFolderMonitor","text":"<p>This type of agent monitors a specific folder and triggers actions when new items are created, changed or deleted in this folder.</p> <p>Example:</p> <pre><code>{\n    \"id\": \"pdf_folder_monitor\",\n    \"description\": \"Monitors folder for new PDF files\",\n    \"type\": \"RpaFolderMonitor\",\n    \"options\":\n    {\n        \"folder\": \"c:\\\\Demo\\\\RPA\\\\Invoices\",\n        \"filter\": \"*.pdf\",\n        \"events\":\n        [\n            {\n                \"name\": \"created\", \n                \"command\": \"c:\\\\Demo\\\\RPA\\\\processinvoice.cmd\",\n                \"args\": \"{file_name}\"\n            }\n        ]\n    }\n}\n</code></pre> <p>Supported event names:</p> <ul> <li>created</li> <li>changed</li> <li>deleted</li> </ul> <p>Placeholders for triggered command arguments:</p> <ul> <li>{file_name} - full path of an item.</li> </ul>"},{"location":"Manuals/Rpa/#rpatimer","title":"RpaTimer","text":"<p>Timer agent triggers a command on regular basis.</p> <p>Example:</p> <pre><code>{\n    \"id\": \"rpa_email_checker\",\n    \"description\": \"Email checker\",\n    \"type\": \"RpaTimer\",\n    \"options\":\n    {\n        \"command\": \"c:\\\\Demo\\\\RPA\\\\checkemail.cmd\",\n        \"args\" : \"\",\n        \"interval\": 20000\n    }\n}\n</code></pre> <p>Timer interval is specified in milliseconds.</p>"},{"location":"Manuals/Rpa/#launching-rpa-monitor","title":"Launching RPA Monitor","text":""},{"location":"Manuals/Rpa/#from-command-line","title":"From Command Line","text":"<pre><code>\"&lt;Rapise Bin Folder&gt;\\RPAMonitor.exe\" \"&lt;path to JSON file with configuration&gt;\"\n</code></pre> <p>Usually <code>&lt;Rapise Bin Folder&gt;</code> is <code>C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin</code></p> <p>Example:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RPAMonitor.exe\" \"c:\\Demo\\RPA\\rpa_config.json\"\n</code></pre>"},{"location":"Manuals/Rpa/#from-rapise-menu","title":"From Rapise Menu","text":"<p>Use menu <code>Tools &gt; RPA Monitor</code>. Rapise will search for <code>rpa_config.json</code> in the current test folder and its parent folders. Most nested <code>rpa_config.json</code> will be passed to the RPA Monitor.</p>"},{"location":"Manuals/Rpa/#running-spira-test-case","title":"Running Spira Test Case","text":"<p>If you want to run a Rapise test linked to Spira (to collect execution results in Spira) you may trigger Rapise Launcher in minimized mode by passing project and test set id to it. The test set should contain the test case you want to run.  <code>-minimized</code> switch tells RapiseLauncher to not show up on screen.</p> <p>Example:</p> <pre><code>\"C:\\Program Files (x86)\\Inflectra\\Rapise\\Bin\\RapiseLauncher.exe\" -testset:37 -project:8 -minimized\n</code></pre>"},{"location":"Manuals/Rpa/#see-also","title":"See Also","text":"<ul> <li>RPA Demo using Rapise and Dynamics NAV (video)</li> <li>Sample RPA Framework on GitHub</li> <li>RPA Whitepaper</li> </ul>"},{"location":"Manuals/kb/","title":"Knowledge Base","text":"<p>We update this list regularly. For the most recent list of KBs please navigate to Inflectra Knowledge Base</p>"},{"location":"Manuals/kb/#kb798-testing-mobile-applications-built-with-ionic-framework","title":"KB798 Testing mobile applications built with Ionic framework","text":"<p>Ionic is an open source UI toolkit for building performant, high-quality mobile apps using web technologies \u2014 HTML, CSS, and JavaScript.\u00a0This means that being mobile, Ionic applications are web applications by nature. And it is much more convenient to test them via WebDriver rather than Appium. Requires Rapise 8.1+.</p>"},{"location":"Manuals/kb/#kb796-useful-page-objects","title":"KB796 Useful Page Objects","text":"<p>Sample framework including general purpose page objects that you may find useful in your test cases (KeyboardHelper,\u00a0ListChecker,\u00a0ManagedHelper,\u00a0StringChecker,\u00a0TableHandler). Help pressing special keys, comparing lists, accessing managed popup windows, checking unique strings and string formatting, working with standard web table.</p>"},{"location":"Manuals/kb/#kb790-how-to-resign-a-third-party-ipa-file-to-run-it-on-a-real-ios-device","title":"KB790 How to resign a third-party .ipa file to run it on a real iOS device","text":"<p>You may receive an .ipa file from a development team or download one published by a third-party vendor. In order to create and run automation scripts using a real iOS device you need to resign\u00a0the .ipa file with your provisioning profile and development certificate. Learn how to do it from this article.</p>"},{"location":"Manuals/kb/#kb780-chrome-for-testing","title":"KB780 Chrome for Testing","text":"<p>This is the mirror of https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json Using links from this JSON file you may download specific versions of Chrome that do not auto-update.</p>"},{"location":"Manuals/kb/#kb776-how-to-run-a-sub-test-in-isolated-mode","title":"KB776 How to run a sub-test in isolated mode","text":"<p>Sometimes there is a need to execute another test (sub-test) from a Rapise test. Doing so with Global.DoInvokeTest or RVL.DoPlayTest will run the sub-test in the context of the calling test, it will reuse same browser profile or mobile profile, it will use same loaded libraries. Such mode of execution may produce different results compared with running the sub-test standalone. To run the sub-test in isolated mode use Global.DoInvokeTestParallel and RVL.DoPlayTestParallel.</p>"},{"location":"Manuals/kb/#kb775-where-to-find-rapise-installation-logs","title":"KB775 Where to find Rapise installation logs","text":"<p>In rare cases Rapise installation fails. There may be different reasons for this including AV software, security configuration or corrupted Windows system. To help Rapise team to find out the root cause you may zip and share Rapise installation logs.</p>"},{"location":"Manuals/kb/#kb774-how-to-automate-testing-of-flutter-web-applications","title":"KB774 How to automate testing of Flutter Web applications","text":"<p>In most cases Flutter Web applications are built with CanvasKit renderer (flutter build web --web-renderer canvaskit). It means that by default UI elements of an application are not visible to\u00a0test automation tools. They see just the big pane that covers all browser window. So does Rapise. However, there is a simple workaround that can be applied to solve this problem.</p>"},{"location":"Manuals/kb/#kb772-if-you-have-rapise-version-lower-than-802845-and-chrome-115","title":"KB772 If you have Rapise version lower than 8.0.28.45 and Chrome 115+","text":"<p>Since version 115 of Chrome the central storage of chromedriver executables has changed. If you have Rapise version older than 8.0.28.45 than you need to take special steps to continue testing on Chrome 115 and above.</p>"},{"location":"Manuals/kb/#kb771-how-to-generate-an-html-report-using-own-template-and-convert-it-to-pdf","title":"KB771 How to generate an HTML report using own template and convert it to PDF","text":"<p>Rapise can export an execution report in HTML format, it even allows to choose from a few predefined templates. However you may want to create own template or customize existing one and export the report automatically at the end of test execution. Also you may want to convert generated HTML report to PDF format. Learn how from this article.</p>"},{"location":"Manuals/kb/#kb767-rapise-80-how-to-use-rapise-with-git-and-spira","title":"KB767 Rapise 8.0: how to use Rapise with Git and Spira","text":"<p>If your team has only one or two test automation engineers, the best option for storing files of a testing framework is within SpiraTest. This approach is straightforward to implement and does not require specific configuration of test sets. However, if your testing framework is expected to grow significantly and you have multiple automation engineers, it is recommended to incorporate Git into your set of tools. Using Git offers several important benefits: Improved file loading speed: By integrating Git with RapiseLauncher, the process of loading files from a repository is significantly faster. This can save valuable time, especially when dealing with larger frameworks or complex test suites. Comprehensive source control features: Git provides a wide range of source control capabilities, including branching and merging. These features are essential for managing changes and collaborating effectively when multiple team members are working on the same codebase. It allows for better organization, tracking, and merging of code changes, ensuring a streamlined development process. Enhanced teamwork: Git simplifies collaboration in a team environment. It allows team members to work on different branches or even different features concurrently, while providing mechanisms to merge and synchronize their work seamlessly. This enables better coordination and reduces the risk of conflicts when integrating changes made by multiple developers. By incorporating Git into your testing workflow, you can optimize file loading speed, leverage powerful source control features, and foster a more efficient and collaborative team environment.</p>"},{"location":"Manuals/kb/#kb765-rapise-80-how-to-use-page-objectsmodules","title":"KB765 Rapise 8.0: how to use Page Objects/Modules","text":"<p>When writing automated tests, it is often necessary to create shared modules that can be used by multiple test cases. These modules serve various purposes, such as handling authentication for applications with a login page, performing necessary actions after test case completion, or working with custom controls within the application, such as dropdown menus, form fields, or grid/table controls. In Rapise 8.0, you have the ability to address all these requirements. Rapise supports two types of modules: RVL (Rapise Visual Language) and JavaScript-based modules. These modules provide a flexible and powerful approach to handle common functionalities across your test cases. By using RVL modules, you can visually create reusable components that encapsulate specific actions or sequences of steps. For example, you can create an RVL module that handles the authentication process by entering credentials and clicking the login button. This module can then be easily reused across multiple test cases that require login functionality. Alternatively, you can leverage JavaScript-based modules in Rapise 8.0. JavaScript is a versatile programming language that allows you to create custom functions and logic to handle complex scenarios. With JavaScript-based modules, you can implement specific interactions with custom controls or perform actions that are not easily achievable through the visual interface of Rapise. Both RVL and JavaScript-based modules in Rapise provide a seamless way to organize and reuse common functionalities within your automated tests. They help improve maintainability, reduce duplication of code, and enhance overall test efficiency.</p>"},{"location":"Manuals/kb/#kb764-how-to-switch-between-applications-in-a-mobile-test","title":"KB764 How to switch between applications in a Mobile test","text":"<p>Sometimes mobile testing scenarios involve interactions with built-in applications installed on a device. For example you may need to open Messages, locate SMS with a one-time code and use it in your application.</p>"},{"location":"Manuals/kb/#kb760-rapise-80-using-multiselect-and-datacolumn-parameters-for-comprehensive-testing","title":"KB760 Rapise 8.0: using multiselect and datacolumn parameters for comprehensive testing","text":"<p>The true strength of test automation lies in its capability to execute the same test cases with varying input parameters. In Rapise 8.0, you can achieve this by utilizing multiselect and datacolumn parameters. Let's now explore a specific example to illustrate this concept.</p>"},{"location":"Manuals/kb/#kb756-rapise-80-development-flow-for-test-automation-framework-in-team-mode","title":"KB756 Rapise 8.0: development flow for Test Automation Framework in Team Mode","text":"<p>When working as part of a team of automation engineers, the principles mentioned in the Single User Mode still apply. However, there are additional considerations to keep in mind, particularly when using a SpiraTest-based file repository.</p>"},{"location":"Manuals/kb/#kb755-rapise-80-development-flow-for-test-automation-framework-in-single-user-mode","title":"KB755 Rapise 8.0: development flow for Test Automation Framework in Single User Mode","text":"<p>If you are the sole automation engineer working on test creation with Rapise, it is recommended to follow these basic principles when developing a test automation framework. These guidelines specifically apply to the new Framework mode introduced in Rapise 8.0.</p>"},{"location":"Manuals/kb/#kb753-rapise-80-how-to-make-a-copy-of-a-test-automation-framework","title":"KB753 Rapise 8.0: how to make a copy of a test automation framework","text":"<p>There are various situations where duplicating a test automation framework and linking it with another product in SpiraTest becomes necessary. For instance, you may want to create a copy to test the next major version of your application or start fresh with a clean product in SpiraTest. Another common scenario is when you need to transfer the test repository from SpiraTest to Git.</p>"},{"location":"Manuals/kb/#kb752-rapise-80-how-to-define-and-use-test-set-configurations","title":"KB752 Rapise 8.0: how to define and use test set configurations","text":"<p>Rapise 8.0 provides the simplified way of parameterizing test sets . With the ability to define parameters and create configurations, managing different test scenarios has never been easier. Each configuration automatically includes all the defined parameters, but you can override specific parameter values as needed. If a configuration does not explicitly assign a parameter value, the default value is utilized during test set execution.</p>"},{"location":"Manuals/kb/#kb751-rapise-80-what-are-the-benefits-of-using-the-new-framework-mode","title":"KB751 Rapise 8.0: what are the benefits of using the new Framework mode?","text":"<p>The Framework mode was introduced in Rapise 8.0 to simplify test case and test set management, as well as the management of parameters, page objects/modules, object repositories, and shared code. The legacy Single Test mode required dealing with Sub-Tests and linking tests to SpiraTest on a per test case basis, whereas in the Framework mode, there is a single button labeled Sync with Spira that handles everything. When this button is pressed, test cases and test sets are automatically synchronized with SpiraTest, and files are uploaded/downloaded. In the Framework mode, team collaboration is streamlined because changes made by team members are automatically merged. In addition, it is possible to view diffs and resolve conflicts in complex cases.</p>"},{"location":"Manuals/kb/#kb750-rapise-80-how-to-run-test-cases-on-different-browsers","title":"KB750 Rapise 8.0: how to run test cases on different browsers","text":"<p>In this article, we will demonstrate how to configure multi-browser execution of test cases in Rapise to ensure compatibility of a web application across major web browsers. This method is specifically designed for the Framework mode, which was introduced in Rapise 8.0.</p>"},{"location":"Manuals/kb/#kb749-rapise-80-how-to-define-and-use-parameters-in-test-cases","title":"KB749 Rapise 8.0: how to define and use parameters in test cases","text":"<p>In test automation projects, it is often necessary to parameterize test cases for various purposes. For instance, this could involve specifying different URLs for running tests in different environments (development, staging, production), or providing user credentials for logging into the system. Additionally, there might be a need to quickly modify playback speed, error handling, and screenshot settings for multiple test cases. In the Rapise 8.0 Framework mode, managing parameters is made simple and convenient, allowing easy creation and management of parameters, including the ability to run the same test case with different input data, such as filling a form with various values to create multiple records in a system database.</p>"},{"location":"Manuals/kb/#kb748-rapise-80-recommended-way-of-executing-code-before-and-after-each-test-case","title":"KB748 Rapise 8.0: recommended way of executing code before and after each test case","text":"<p>Rapise 8.0 has introduced a new \u00a0feature called the Framework mode.\u00a0 In \u00a0this mode\u00a0a new framework is created with the Common.js file which contains event handlers such as SeSOnTestInit and SeSOnTestFinish that get executed for every test case.</p>"},{"location":"Manuals/kb/#kb746-dynamically-clicking-on-a-desktop-app-button-sample-ms-word","title":"KB746 Dynamically Clicking on a Desktop App Button Sample (MS-Word)","text":"<p>We had a customer request for a sample that demonstrates how to click on buttons in a desktop application (in this case a plugin for Microsoft Word) where instead of having to learn each of the buttons individually, you can learn the button container and then loop through the buttons using a Rapise RVL Map.</p>"},{"location":"Manuals/kb/#kb745-re-formatting-strings-and-numbers","title":"KB745 Re-formatting strings and numbers","text":"<p>Sometimes you need to change format of date, time or number to put it into some form or to compare it with known value. Here is a couple of functions.</p>"},{"location":"Manuals/kb/#kb739-loading-users-into-kronodesk-from-excel-using-rapise","title":"KB739 Loading Users into KronoDesk from Excel using Rapise","text":"<p>We had a customer that needed to load in a batch of customer users into our KronoDesk service desk platform. The built-in Excel add-on is only able to import help desk tickets, not users. So in this article we explain how you can use Rapise to bulk load in the data using the KronoDesk REST API.</p>"},{"location":"Manuals/kb/#kb737-waiting-for-process-to-start-stop-in-rapise","title":"KB737 Waiting for Process to Start / Stop in Rapise","text":"<p>Here is a couple of useful functions for the case you need to wait for a process.</p>"},{"location":"Manuals/kb/#kb732-run-rapise-tests-on-bitbar","title":"KB732 Run Rapise tests on Bitbar","text":"<p>Bitbar is a browser and device farm that enables it's clients to run cross-browser and mobile tests remotely.</p>"},{"location":"Manuals/kb/#kb728-windows-defender-trojanjsmountsibml-false-alarm-about-rapise","title":"KB728 Windows Defender: Trojan:JS/Mountsi.B!ml False Alarm about Rapise","text":"<p>Recently Rapise has problem working on some hosts with Windows Defender.\u00a0 The problem occurs as a result of one of the key files being quarantined. Here we provide necessary workarounds.</p>"},{"location":"Manuals/kb/#kb724-check-if-file-is-in-the-downloads-folder","title":"KB724 Check if File is in the Downloads Folder","text":"<p>When you test scenario has some sort of download we may need to wait/verify for download to be done. Here we provide some\u00a0functions designed to help in such cases.</p>"},{"location":"Manuals/kb/#kb722-play-all-sheets-in-rvl","title":"KB722 Play All Sheets in RVL","text":"<p>Use many sheets in RVL? Want to execute them all at once without calling one-by-one. Here is a simple solution.</p>"},{"location":"Manuals/kb/#kb718-sending-email-with-test-report-to-spira-users-after-execution","title":"KB718 Sending Email With Test Report To Spira Users After Execution","text":"<p>Sometimes you need to be notified of one test with some summary. And here we give you an example. With this approach, interested users can receive an email about the status of a test with a report.</p>"},{"location":"Manuals/kb/#kb712-file-checkpoints-in-rapise","title":"KB712 File Checkpoints in Rapise","text":"<p>Sometimes you need to compare files: documents, invoices, logs etc. Sometimes you need to use direct comparison or pattern comparison. You may need to compare text, PDF or binary files. Here we provide one of the solutions for Rapise.</p>"},{"location":"Manuals/kb/#chrome-html-to-selenium-chrome-browser-profile-target_blank-hrefhttpswwwinflectracomsupportknowledgebasekb705aspxkb705-how-to-switch-from-chrome-html-to-selenium-chrome-browser-profile","title":"KB705 How to switch from <code>Chrome HTML</code> to <code>Selenium - Chrome</code> browser profile","text":"<p>Chrome extension and\u00a0Chrome HTML\u00a0browser profile have been deprecated.\u00a0Chrome extension and\u00a0Chrome HTML\u00a0browser profile have been deprecated. The reason is that Google is going to remove MV2 extensions from the store . At Inflectra we decided not to migrate to MV3 extension format because it is unlikely possible due to security changes (primary reason of appearance of MV3). To make Chrome based testing possible we implemented Selenium Based Recorder . So please consider switching to Selenium - Chrome browser profile.</p>"},{"location":"Manuals/kb/#kb697-modifying-date-string","title":"KB697 Modifying Date string","text":"<p>Sometimes you need to manipulate a date string: add year, find same date next month, add an hour to a meeting start time and so on. Here we have a function for doing increments and subtractions of that kind.</p>"},{"location":"Manuals/kb/#kb692-how-to-load-chrome-browser-extensions-via-selenium-profile","title":"KB692 How to load Chrome browser extensions via Selenium profile","text":"<p>If you need specific browser extensions for running web tests you may specify them in Selenium profile.</p>"},{"location":"Manuals/kb/#kb689-how-to-find-rapise-activation-code-that-is-used-on-a-machine","title":"KB689 How to find Rapise activation code that is used on a machine","text":"<p>In your Customer Area on Inflectra website you have a list of Rapise activation codes. To find out which code is used on a specific machine follow these simple steps.</p>"},{"location":"Manuals/kb/#kb686-how-to-set-permanent-user-profile-for-selenium-chromeedge-profile","title":"KB686 How to set permanent user profile for Selenium - Chrome/Edge profile","text":"<p>When you are recording/running a test via Selenium browser profiles in Rapise - by default a new user profile is created when new instance of a browser is launched. It means that new browser instance starts with empty cache, no cookies, etc. Sometimes it complicates testing. If you are testing a Web application that requires SMS/Email code to authorize a browser then you will have to do it every time. Automation of\u00a0 input of SMS/Email codes may be really hard. It is much easier to authorize a browser manually once and then run tests for long period of time. To make it work you will need to configure a permanent user profile for the browser used for testing. Learn how to do it for Chrome/Edge from this article.</p>"},{"location":"Manuals/kb/#kb685-how-to-send-an-email-via-office-365-account-with-oauth","title":"KB685 How to send an email via Office 365 account with OAuth","text":"<p>In the past we could use basic authentication to send an email but today this method of authentication is considered insecure and is disabled in major email services like Office 365 and Gmail. Read this article to learn how to send an email via SMTP with OAuth using Office 365 account.</p>"},{"location":"Manuals/kb/#kb683-how-to-set-download-folder-for-selenium-chrome-profile","title":"KB683 How to set download folder for Selenium - Chrome profile","text":"<p>If your Web testing scenario includes file downloading you may configure <code>Selenium - Chrome</code> profile and specify which folder to use to store downloaded files.</p>"},{"location":"Manuals/kb/#kb682-sample-excel-file","title":"KB682 Sample Excel File","text":"<p>This is a sample Excel file to download and use during\u00a0demos.</p>"},{"location":"Manuals/kb/#kb681-how-to-disable-browser-notifications-for-selenium-chrome","title":"KB681 How to disable browser notifications for Selenium Chrome","text":"<p>Some of the Web resources used for automated tests\u00a0have a browser's push notifications active.However, push notifications creating unnecessary records in RVL table.</p>"},{"location":"Manuals/kb/#kb675-how-to-wait-for-web-element-to-disappear-from-screen","title":"KB675 How to wait for Web element to disappear from screen","text":"<p>Rapise has built-in function Navigator.DoWaitFor to wait for object to appear. If you need to do the opposite add the following function into your User.js.</p>"},{"location":"Manuals/kb/#kb673-uploading-files-to-ftpsftp","title":"KB673 Uploading files to ftp/sftp","text":"<p>This article contains a function that may be used to upload file to FTP/SFTP.\u00a0 This script uses WinSCP (https://winscp.net/eng/download.php) free tool to perform an upload.</p>"},{"location":"Manuals/kb/#kb671-how-to-attach-a-file-to-a-test-run-in-spira","title":"KB671 How to attach a file to a test run in Spira","text":"<p>By default Rapise uploads all the screenshots to a test run in Spira but you may need to upload a specific file, e.g. text file or\u00a0a spreadhseet.</p>"},{"location":"Manuals/kb/#kb663-scripting-dragdrop-for-web-tests","title":"KB663 Scripting Drag&amp;Drop for Web Tests","text":"<p>This function is useful for scripting DragNDrop for web tests.</p>"},{"location":"Manuals/kb/#kb662-check-if-excel-sheet-exists","title":"KB662 Check if Excel Sheet Exists","text":"<p>Function to check if a given Excel workbook contains a sheet with the given name.</p>"},{"location":"Manuals/kb/#kb655-how-to-work-with-shadow-dom-via-native-selenium-api-in-rapise","title":"KB655 How to work with Shadow DOM via Native Selenium API in Rapise","text":"<p>If your scripting is style is writing JavaScript and using Native Selenium API and you wish to dig inside Shadow DOM - read this short article. Requires Rapise 7.3+</p>"},{"location":"Manuals/kb/#kb654-moving-rapise-tests-between-spira-products","title":"KB654 Moving Rapise Tests Between Spira Products","text":"<p>Sometimes you want to move or clone tests. If tests have linked Rapise test cases, then you need to properly handle the move as described here.</p>"},{"location":"Manuals/kb/#kb652-resolving-connection-to-chrome-failed","title":"KB652 Resolving 'Connection to Chrome Failed'","text":"<p>Recent change in MS Edge browser affects Edge and Chrome browser extensions for Rapise. Here we show the workaround.</p>"},{"location":"Manuals/kb/#kb651-running-rapise-test-sets-without-third-party-tools","title":"KB651 Running Rapise test sets without third-party tools","text":"<p>Recommended way of running Rapise tests on regular basis is using SpiraTest and RapiseLauncher. Other options include Azure DevOps and Jenkins. But there is also a way of running Rapise tests via command line. If this is what you are looking for then\u00a0read this article.</p>"},{"location":"Manuals/kb/#kb649-query-data-from-sqlite-file","title":"KB649 Query Data from SQLite file","text":"<p>Some application store valuable information in sqlite format. This is a way to deal with it.</p>"},{"location":"Manuals/kb/#kb648-checking-zip-file-contents-with-rapise","title":"KB648 Checking .zip file contents with Rapise","text":"<p>Sometimes you need to check if some files are available in the .zip file. You may read the list of .zip file contents with Rapise.</p>"},{"location":"Manuals/kb/#kb646-how-to-press-special-keys-on-android-keyboard","title":"KB646 How to press special keys on Android keyboard","text":"<p>To enter characters one may use AndroidObject.DoSendKeys, but sometimes you need to send special characters like ENTER. Learn how from this article.</p>"},{"location":"Manuals/kb/#kb645-how-to-ask-user-for-input","title":"KB645 How to Ask User for Input","text":"<p>For some automatic tests manual interaction is still required. For example, you may get authorization code to your phone and enter it to log into application. So you need to ask user for input to proceed execution.</p>"},{"location":"Manuals/kb/#kb644-reading-dom-element-runtime-property","title":"KB644 Reading DOM element runtime property","text":"<p>Sometimes we need to get runtime property for the element. For example, we need to get a background color to know that element is highlighted for a user. Anything configured via stylesheet is usually a property: color, font, margins, dimensions, visibility etc.</p>"},{"location":"Manuals/kb/#kb639-dismiss-safari-popup-on-a-mobile-device","title":"KB639 Dismiss Safari popup on a Mobile device","text":"<p>If you are running a web test on a mobile device via Appium then you have three options of how to accept a popup window alert.</p>"},{"location":"Manuals/kb/#kb636-silent-installation-of-rapise-for-cicd","title":"KB636 Silent Installation of Rapise for CI/CD","text":"<p>Sometimes you need to perform unattended installation of Rapise for test execution only. It may be a part of automated test execution step executed by CI/CD pipeline. Here is the snippet.</p>"},{"location":"Manuals/kb/#kb635-create-an-incident-in-spira-from-rapise-test","title":"KB635 Create an incident in Spira from Rapise test","text":"<p>In some cases a test may automatically determine that it's failure is definitely caused by a bug in software under test.\u00a0 In this case the test may create an incident in Spira using Spira.CreateIncident action. Requires Rapise 7.2+.</p>"},{"location":"Manuals/kb/#kb634-comparing-web-page-to-text-or-word-file","title":"KB634 Comparing Web Page to Text or Word File","text":"<p>Sometimes you need to validate the whole page text. This sample demonstrates usage of plain text or MSWord file for this purpose with some help of myers-diff npm module</p>"},{"location":"Manuals/kb/#kb631-reading-dom-element-style-property","title":"KB631 Reading DOM element style property","text":"<p>Sometimes we need to get runtime property for the element. For example, we need to get a background color to know that element is visually highlighted for a user. This topic shows how it may be done with Navigator.ExecJS.</p>"},{"location":"Manuals/kb/#kb623-fix-dpi-scaling-for-rdp-connections-to-windows-vms","title":"KB623 Fix DPI scaling for RDP connections to Windows VMs","text":"<p>If you connect to a Windows VM via RDP and see that all fonts are very small and it is hard to read text on screen then this article is for you.\u00a0 If you can access the VM without RDP then you may change scaling via Display Settings in Windows and thus make text larger. But if this VM is Azure or AWS hosted VM then you may see a message: the display settings can't be changed from a remote session.</p>"},{"location":"Manuals/kb/#kb608-what-blocked-status-means-for-a-test-run","title":"KB608 What Blocked status means for a Test Run","text":"<p>When you run a test with Spira (via RapiseLauncher) you may get a <code>Blocked</code> status for a test run. It is displayed in the Test Runs view and Test Sets view both in Spira and Spira Dashboard in Rapise.</p>"},{"location":"Manuals/kb/#kb603-the-2021-release-wave-2-for-dynamics-365-for-sales","title":"KB603 The 2021 release wave 2 for Dynamics 365 for Sales","text":"<p>The 2021 release wave 2 for Dynamics 365 contains hundreds of new features across Dynamics 365 applications. If you are using Rapise to test a Dynamics 365 for Sales instance you may be affected by the coming changes. To help you update existing tests we summarized differences (important for UI automation) between old and new versions of Dynamics 365 for Sales.</p>"},{"location":"Manuals/kb/#kb602-auto-startstop-azure-vm-to-run-ui-tests","title":"KB602 Auto start/stop Azure VM to run UI tests","text":"<p>If you are using a Microsoft Azure VM to run UI tests\u00a0 and do not want to keep the VM always running (to save budget) you may configure automatic start/stop and auto logon for the machine.</p>"},{"location":"Manuals/kb/#kb600-change-the-default-screenshot-folder","title":"KB600 Change the default Screenshot folder","text":"<p>If a test is configured to capture screenshots during playback - Rapise puts then into Reports folder in the working directory of the test. If you want to copy screenshots to a different location or instruct Rapise to put images into a different folder - check out this article.</p>"},{"location":"Manuals/kb/#kb599-rvl-toolbox-to-boost-productivity-in-writing-tests","title":"KB599 RVL Toolbox to boost productivity in writing tests","text":"<p>If you are new to Rapise or use it occasionally you may not know or remember all the cool objects and actions to use in your tests. With RVL Toolbox you can get access to required information by searching for it without leaving the RVL Editor.</p>"},{"location":"Manuals/kb/#kb598-using-rvl-merge-utility","title":"KB598 Using RVL Merge Utility","text":"<p>Sometimes we need to do Diff and Merge operations when working with external Source Control systems (git, svn, etc). This utility (ExcelMerge) will enable this functionality.</p>"},{"location":"Manuals/kb/#kb597-using-regular-expressions-in-object-locators","title":"KB597 Using Regular Expressions in Object Locators","text":"<p>Sometimes application components change and we need more flexibility when creating locators. You may use regex: prefix for locator components to make it more flexible. Very similar approach applies to Managed (DotNet Forms), Java and UI Automation locators.</p>"},{"location":"Manuals/kb/#kb596-softassert-in-rapise","title":"KB596 SoftAssert in Rapise","text":"<p>Sometimes you need more control on whether to stop execution when an assertion fails. Assertion that does not stop execution is Soft Assertion.\u00a0 With soft assertions you may force it to fail later when all expected errors are collected or keep running until the very end.</p>"},{"location":"Manuals/kb/#kb594-returning-values-from-rvl-sheets","title":"KB594 Returning Values from RVL sheets","text":"<p>Sometimes you need to return a value or a set of values from RVL.DoPlaySheet or RVL.DoPlayScript calls. This sample shows you how.</p>"},{"location":"Manuals/kb/#kb588-using-seetest-instrumented-mode","title":"KB588 Using SeeTest Instrumented Mode","text":"<p>If you are testing a native mobile application using\u00a0 SeeTest you have an option to switch to NATIVE_APP_INSTRUMENTED context and record/playback tests in it.</p>"},{"location":"Manuals/kb/#kb586-how-to-get-aws-secret-from-rapise","title":"KB586 How to get AWS Secret from Rapise","text":"<p>Learn how to query AWS Secret from Rapise. Requires Rapise 6.7+</p>"},{"location":"Manuals/kb/#kb585-how-to-run-cross-browser-tests-on-aws-device-farm","title":"KB585 How to run cross-browser tests on AWS Device Farm","text":"<p>Learn how to configure Rapise to run cross-browser tests on AWS Device Farm. Requires Rapise 6.7+</p>"},{"location":"Manuals/kb/#kb584-rapise-and-microsoft-defender-antivirus","title":"KB584 Rapise and Microsoft Defender Antivirus","text":"<p>If you use Microsoft Defender Antivirus to protect your system then you may need to perform certain steps to use Rapise effectively.</p>"},{"location":"Manuals/kb/#kb583-rapise-and-avast-antivirus","title":"KB583 Rapise and Avast Antivirus","text":"<p>If you use Avast Antivirus to protect your system then you may need to perform certain steps to install and use Rapise.</p>"},{"location":"Manuals/kb/#kb581-rapise-66-built-in-help-fix","title":"KB581 Rapise 6.6 Built In Help Fix","text":"<p>Rapise help system has been updated to latest template introducing new search and navigation capabilities. The side effect is that is it not compatible with default HTML-based\u00a0viewer engine and may look corrupted.</p>"},{"location":"Manuals/kb/#kb574-advanced-search-for-elements-in-desktop-applications","title":"KB574 Advanced search for elements in desktop applications","text":"<p>If a desktop application is dynamic and recorded locators do not work then there is a way to search for elements using UIAObject.DoFindElementByCondition and UIAObject.DoFindElementsByCondition.Requires Rapise 6.6+</p>"},{"location":"Manuals/kb/#kb572-specifying-timeout-for-rest-calls","title":"KB572 Specifying Timeout for REST Calls","text":"<p>Rapise REST module uses 100 seconds timeout by default. Since Rapise 6.6 you may make it longer or shorter.</p>"},{"location":"Manuals/kb/#kb570-easy-way-to-dump-sheet-variables","title":"KB570 Easy Way to Dump Sheet Variables","text":"<p>We sometimes need to dump diagnostic information to the report. It may be values of some or all local variables.</p>"},{"location":"Manuals/kb/#kb569-making-negative-api-tests","title":"KB569 Making Negative API Tests","text":"<p>By default Rapise reports an error when REST service request fails. With the negative test the request should fail, so we want the reporting to behave differently.</p>"},{"location":"Manuals/kb/#kb568-how-to-rename-a-rapise-test-linked-to-a-spira-test-case","title":"KB568 How to rename a Rapise test linked to a Spira Test Case","text":"<p>It is a 3 step process: 1. SaveAs or Clone the test with a new name 2. Save it to Spira 3. Delete old test copy from Documents module in Spira (optional)</p>"},{"location":"Manuals/kb/#kb566-merge-strings-in-rvl","title":"KB566 Merge Strings in RVL","text":"<p>Here we show a few examples on how to combine strings in RVL.</p>"},{"location":"Manuals/kb/#kb565-customize-rapise-report-messages","title":"KB565 Customize Rapise Report Messages","text":"<p>Sometimes we need to override the message written to the report when some action is performed.</p>"},{"location":"Manuals/kb/#kb561-using-free-apple-development-account-to-test-on-mobile-devices","title":"KB561 Using Free Apple Development account to test on mobile devices","text":"<p>It is possible to use Free Apple Developer account for iOS testing. But it requires some knowledge and time to setup.</p>"},{"location":"Manuals/kb/#kb558-mobile-testing-with-experitest-seetest","title":"KB558 Mobile testing with Experitest SeeTest","text":"<p>Connecting to the mobile devices hosted by SeeTest is easy. Learn how from this article. Requires Rapise 6.5+.</p>"},{"location":"Manuals/kb/#kb556-rapisechromeextension-version-3","title":"KB556 RapiseChromeExtension version 3","text":"<p>Along with Rapise 6.5 we are releasing an update to the RapiseChromeExtension.\u00a0 The new version (v3) is back compatible. It means that older versions of Rapise should work with it without issues. Rapise 6.5+ will require you to update the extension if you have RapiseChromeExtension v2.</p>"},{"location":"Manuals/kb/#kb555-recording-web-and-desktop-actions-into-the-same-test","title":"KB555 Recording Web and Desktop actions into the same test","text":"<p>Starting from Rapise 6.5 you may record both Web and Desktop actions into the same test.</p>"},{"location":"Manuals/kb/#kb553-basic-authentication-in-web-tests","title":"KB553 Basic authentication in Web tests","text":"<p>Legacy Web applications still may use basic authentication. So when you navigate to an application URL the browser shows a dialog with Username and Password fields to enter.\u00a0 The content of this dialog is not a Web content so recording and playback in a Web test will not work.</p>"},{"location":"Manuals/kb/#kb551-searching-for-a-web-element-by-text-that-contains-non-breaking-spaces","title":"KB551 Searching for a Web element by text that contains non-breaking spaces","text":"<p>Are you writing XPath to find an element using its inner text but it does not work? Most likely the text contains non-breaking spaces. This situation is described in detail in our UI Test Automation Playground.</p>"},{"location":"Manuals/kb/#kb545-how-to-read-environment-variable-in-rapise","title":"KB545 How To Read Environment Variable in Rapise","text":"<p>Here is a number of ways of doing it.</p>"},{"location":"Manuals/kb/#kb543-values-passed-from-rapiselauncher-to-rapise","title":"KB543 Values passed from RapiseLauncher to Rapise","text":"<p>When a test is executed by RapiseLauncher it may access key properties of the test run,\u00a0 custom test set properties and test case parameters. Requires Rapise 6.4.19.16+</p>"},{"location":"Manuals/kb/#kb541-automating-tinymce-2020","title":"KB541 Automating TinyMCE 2020","text":"<p>The world moves forward and\u00a0 our older KB articles related to TinyMCE became outdated. In this article we present a modern way (as of year 2020) of automating TinyMCE controls.</p>"},{"location":"Manuals/kb/#kb540-unified-service-desk-with-chrome-for-hosted-controls","title":"KB540 Unified Service Desk with Chrome for Hosted Controls","text":"<p>If you want to use Unified Service Desk with Chrome and test it with Rapise you need to configure it properly.</p>"},{"location":"Manuals/kb/#kb539-working-with-rapise-aws-saas-images","title":"KB539 Working with Rapise AWS SaaS Images","text":"<p>Rapise is available as a SaaS solution. Here we describe step-by-step guide how to make several Rapise cloud instances ready for test execution.</p>"},{"location":"Manuals/kb/#kb538-increasing-the-size-of-rapise-images-in-spira-reports","title":"KB538 Increasing the Size of Rapise Images in Spira Reports","text":"<p>When you run Rapise automated tests using RapiseLauncher the system will automatically embed the images from Rapise into the various test cases and test run reports. By default the report format has relatively small images so that they can fit easily into the tables of expected result and actual results. However some users have asked for ways to make the images bigger.</p>"},{"location":"Manuals/kb/#kb537-using-extra-columns-in-rvl-to-control-screenshots","title":"KB537 Using Extra Columns in RVL to control screenshots","text":"<p>Sometimes we need more fine-grained control over screenshots. Here we describe the way of using H column for defining which actions will have what kind of screenshot captured.</p>"},{"location":"Manuals/kb/#kb533-make-screenshots-on-failure-only","title":"KB533 Make screenshots on failure only","text":"<p>Automatic screenshots on every test step may occupy too much space. Learn how to make\u00a0 a screenshot on failure only.</p>"},{"location":"Manuals/kb/#kb532-how-to-set-path-for-local-browser-and-mobile-profiles","title":"KB532 How to set path for local browser and mobile profiles","text":"<p>Since version 6.3 Rapise has support for local browser and mobile profiles. Using it you may package browser profiles along with tests. What if you want to reuse browser profiles between different projects? Or have sets of profiles for different situations? You may now set path to profile directory using a special global variable.\u00a0 Supported in Rapise 6.4+</p>"},{"location":"Manuals/kb/#kb531-handling-grouped-data-in-rapise","title":"KB531 Handling Grouped Data in Rapise","text":"<p>Sometimes we need to process data in groups or even in hierarchical way. Here we will show how to make it using plain table and loop in RVL.</p>"},{"location":"Manuals/kb/#kb530-why-does-rapise-use-doxxxx-naming-for-methods","title":"KB530 Why Does Rapise Use DoXXXX Naming for Methods","text":"<p>A customer asked us why Rapise uses Pascal Case names for the various operations, functions and properties, as well as the reason why operations are prefixed with a \"Do\" action name.</p>"},{"location":"Manuals/kb/#kb529-using-zoomgotomeeting-for-support-session","title":"KB529 Using Zoom/GoToMeeting for Support Session","text":"<p>Learn how to connect to a support session and how to enable Rapise Expert to remotely control your Rapise instance.</p>"},{"location":"Manuals/kb/#kb528-import-junit-xml-report-into-rapise","title":"KB528 Import JUnit XML Report into Rapise","text":"<p>Some unit testing tools produce reports in JUnit XML format. Here we show how to import it into Rapise test report.</p>"},{"location":"Manuals/kb/#kb526-how-to-disable-recording-urls","title":"KB526 How to disable recording URLs","text":"<p>When you do recording of test steps for a Web application - Rapise by default captures page URLs and stores them in the object repository. Learn how to\u00a0 disable URL recording from this article. Requires Rapise 6.4+</p>"},{"location":"Manuals/kb/#kb522-windows-calculator","title":"KB522 Windows Calculator","text":"<p>For Rapise training purposes we may need a simple desktop application that can be executed on any Windows version. What can be simpler than Windows Calculator?</p>"},{"location":"Manuals/kb/#kb519-reading-values-from-properties-files-in-rapise","title":"KB519 Reading values from .properties files in Rapise","text":"<p>.properties is a file format mainly used in Java related technologies to store the configurable values. Here we show how to work with it in Rapise.</p>"},{"location":"Manuals/kb/#kb518-javascript-version-used-by-rapise","title":"KB518 JavaScript version used by Rapise","text":"<p>Below we provide the information on JavaScript version used by Rapise.</p>"},{"location":"Manuals/kb/#kb517-how-to-disable-google-chrome-software-reporter-tool","title":"KB517 How to disable Google Chrome Software Reporter Tool","text":"<p>We've seen systems where Software Reporter Tool (which is a part of Google Chrome) may produce very high CPU load and make system\u00a0 suspending/resuming processes randomly. Because of this Rapise may not be able to connect to Chrome for recording/playback. In fact many things may go wrong when CPU load is 100%.</p>"},{"location":"Manuals/kb/#kb516-the-pipe-is-being-closed-message-from-rapise-installer","title":"KB516 The pipe is being closed message from Rapise installer","text":"<p>When you install Rapise on some systems you may get an error message: 0x800700e8 - The pipe is being closed</p>"},{"location":"Manuals/kb/#kb515-checking-string-length-in-rvl","title":"KB515 Checking String Length in RVL","text":"<p>If you need to get the size of the string, then here is a couple of possible ways for doing it.</p>"},{"location":"Manuals/kb/#kb514-how-to-press-alt-shift-ctrl-or-win-key-alone","title":"KB514 How to Press Alt, Shift, Ctrl or Win key Alone","text":"<p>SendKeys is good for making key combinations, but this way does not work when you need to press special key. Here is a useful workaround.</p>"},{"location":"Manuals/kb/#kb508-compare-images-in-javascript","title":"KB508 Compare Images in JavaScript","text":"<p>To compare images in JavaScript you may use Tester.AssertImage.</p>"},{"location":"Manuals/kb/#kb507-uiautomation2-locator","title":"KB507 UIAutomation2 Locator","text":"<p>Rapise 6.3 includes an experimental feature - new UIAutomation2 locator for UIAutomation based desktop testing. Rather than specifying a path from the element tree root to the element this locator relies on built-in ability of UIAutomation to search for elements based on property values.</p>"},{"location":"Manuals/kb/#kb506-how-to-define-and-use-a-dynamic-web-locator","title":"KB506 How to define and use a dynamic Web locator","text":"<p>Imaging you have a table with dynamic data on the page. It is not possible to learn every cell. But it is possible to parameterize the locator of a cell and access cells you need during test playback.</p>"},{"location":"Manuals/kb/#kb504-referring-repository-objects-from-maps","title":"KB504 Referring Repository Objects from Maps","text":"<p>Sometimes you need to specify object and data for it in the map. Here we will show how to make it using Rapise built in maps and available APIs.</p>"},{"location":"Manuals/kb/#kb503-accessing-svg-elements-via-xpath-or-css","title":"KB503 Accessing svg elements via XPath or CSS","text":"<p>By default straight forward XPath to SVG primitives will not work.\u00a0 So XPath ending like .../svg[2]/path will fail. Here is a workaround.</p>"},{"location":"Manuals/kb/#kb502-passing-map-as-a-parameter-into-rvl-sheet","title":"KB502 Passing Map as a Parameter into RVL Sheet","text":"<p>This topic covers more detailed description on how to pass map from one Sheet to another in RVL</p>"},{"location":"Manuals/kb/#kb501-passing-sub-test-parameters","title":"KB501 Passing Sub-Test Parameters","text":"<p>Here we will cover several ways of passing parameters and returning values from Sub-Tests.</p>"},{"location":"Manuals/kb/#kb499-how-to-set-size-of-a-browser-window","title":"KB499 How to set size of a browser window","text":"<p>To ensure that web tests always run on a browser window of a specific size you may use different techniques.</p>"},{"location":"Manuals/kb/#kb497-connecting-to-postgresql-from-rapise","title":"KB497 Connecting to PostgreSQL from Rapise","text":"<p>If you need to connect Database object to PostgreSQL database follow these simple steps.</p>"},{"location":"Manuals/kb/#kb496-connecting-to-mysql-from-rapise","title":"KB496 Connecting to MySQL from Rapise","text":"<p>If you need to connect Database object to MySQL database follow these simple steps.</p>"},{"location":"Manuals/kb/#kb493-rapise-data-generator","title":"KB493 Rapise Data Generator","text":"<p>Sometimes you need to feed your application with demo data that is human-readable but still random. Here is such a generator for Rapise.</p>"},{"location":"Manuals/kb/#kb492-calling-nodejs-script-from-rapise","title":"KB492 Calling NodeJS script from Rapise","text":"<p>NodeJS provides a lot of unique features and plethora of features implemented in npm packages. Here we describe how to combine such a script with a Rapise test.</p>"},{"location":"Manuals/kb/#kb489-headless-firefox-testing","title":"KB489 Headless Firefox Testing","text":"<p>Firefox 56+ supports headless mode on Windows.\u00a0 You can use it to Run Rapise tests via Selenium integration.</p>"},{"location":"Manuals/kb/#kb488-rapise-objects-and-files-metadata-for-code-completion","title":"KB488 Rapise Objects and Files Metadata for Code Completion","text":"<p>Rapise scripts and engine are mostly implemented in JS. Some people prefer to use 3<sup>rd</sup> party editors for scripting. This is helpful when integrating Rapise tests into bigger development pipeline together with other scripts and config files. Here we explain where information about objects and types is provided for Code Completion/Intellisense support in 3<sup>rd</sup> party editors.</p>"},{"location":"Manuals/kb/#kb487-how-to-do-mouse-wheel-scroll-in-rapise","title":"KB487 How to Do Mouse Wheel Scroll in Rapise","text":"<p>Some controls require mouse wheel input. Here is how to do it.</p>"},{"location":"Manuals/kb/#kb486-automatic-learning-of-objects-in-a-java-application","title":"KB486 Automatic learning of objects in a Java application","text":"<p>If you prefer writing test steps manually in JavaScript then it might be helpful to automatically learn all child objects of a Java application to make them available for scripting.</p>"},{"location":"Manuals/kb/#kb485-how-to-enable-jre-accessibility-only-for-tests","title":"KB485 How to Enable JRE Accessibility Only for Tests","text":"<p>By default Rapise is using Java Accessibility Bridge by changing some Java Runtime Environment (JRE)-wide configuration files. So all applications using same JRE will use the modified version. If your goal is to have Accessibility only for test runs, then there is another way of doing that.</p>"},{"location":"Manuals/kb/#kb484-comparing-parts-of-images","title":"KB484 Comparing Parts of Images","text":"<p>Sometimes compared images partially differ due to some dynamic part. Here we show how to do partial comparison in this case.</p>"},{"location":"Manuals/kb/#kb483-renaming-objects-in-rapise","title":"KB483 Renaming Objects in Rapise","text":"<p>Good object naming is important for test script clarity and readability. Default names are detected during record/learn session and results sometimes are cumbersome, obscure or irrelevant. Here we show how to give proper names to objects.</p>"},{"location":"Manuals/kb/#kb482-how-to-get-contents-of-the-head-element-in-a-dom","title":"KB482 How to get contents of the HEAD element in a DOM","text":"<p>In this article we will get contents of the HEAD element to get the links to all referenced stylesheets. It may be useful if you plan to verify that a set of CSS did not change for a page.</p>"},{"location":"Manuals/kb/#kb479-rapise-and-citrixrdp","title":"KB479 Rapise and Citrix/RDP","text":"<p>We are getting a lot of questions on how to use Rapise with Citrix and remotely accessed VMs . Here is the answer.</p>"},{"location":"Manuals/kb/#kb477-inspecting-custom-ui-control-with-ui-automation-spy","title":"KB477 Inspecting custom UI control with UI Automation Spy","text":"<p>UI Automation is a default technology for testing desktop applications on Windows. If your application is not .NET or Java then\u00a0 Rapise will turn on UI Automation library during recording. If some elements in your application are not recognized or there are issues with playback of recorded steps then most likely your application is using custom UI controls. You may inspect those controls and send information to Rapise support team to get recommendations on how to proceed with testing.</p>"},{"location":"Manuals/kb/#kb475-how-to-get-all-links-on-the-page-with-rapise","title":"KB475 How to Get All Links on the Page with Rapise","text":"<p>Sometimes you need to go through all links to check something. Here are two ways: JS and RVL of doing it with Rapise.</p>"},{"location":"Manuals/kb/#kb473-viewing-rapise-logs-in-spira","title":"KB473 Viewing Rapise logs in Spira","text":"<p>When you execute Rapise tests via Rapise Launcher - test reports and logs are automatically uploaded to Spira. But verbose level is always set to Level 1 by Rapise Launcher. If you need more detailed log set verbose to 2 or 3 in test case properties.</p>"},{"location":"Manuals/kb/#kb472-read-pdf-text-with-rapise","title":"KB472 Read PDF Text with Rapise","text":"<p>Sometimes you need to check that some text is available in the PDF document. Sometimes you need to\u00a0extract some value from it. So you need access to plain text content of the document.\u00a0 Here we explain how to do it with Rapise.</p>"},{"location":"Manuals/kb/#kb470-how-to-run-a-powershell-script-in-rapise-test","title":"KB470 How to run a PowerShell script in Rapise test","text":"<p>To run a PowerShell script use Global.DoLaunch action.</p>"},{"location":"Manuals/kb/#kb468-using-rapise-with-java-web-start-applications","title":"KB468 Using Rapise with Java Web Start Applications","text":"<p>Rapise supports testing of Java applications. In the case that application is launched using Java Web Start (JWS) additional steps are needed to successfully test an application.</p>"},{"location":"Manuals/kb/#kb466-how-to-deal-with-custom-ui-automation-controls","title":"KB466 How to deal with custom UI Automation controls","text":"<p>This article is for those who test a desktop application via\u00a0 UI Automation library.\u00a0 Since desktop applications are frequently built using UI controls from different vendors\u00a0 and the number of such controls available on the market is pretty big (&gt; 1k)\u00a0 - Rapise may not have out-of-the-box support for some controls in your application.\u00a0 For such cases Rapise offers a low level API to navigate UI Automation tree of elements inside an application and read/write element properties. In this tutorial we'll show how to use this API and quickly add minimal support for a custom control.</p>"},{"location":"Manuals/kb/#kb465-how-to-check-if-web-element-is-really-visible-on-screen","title":"KB465 How to check if web element is really visible on screen","text":"<p>Checking if element is visible on screen may be a tricky task. It's usually not a problem in manual testing but there are nuances when you do test automation.</p>"},{"location":"Manuals/kb/#kb462-how-to-check-if-a-web-dropdown-element-has-specific-option-or-not","title":"KB462 How to check if a web dropdown element has specific option or not","text":"<p>If a test needs to verify existence or absence of a specific option in a dropdown you can do it via a simple function presented below.</p>"},{"location":"Manuals/kb/#kb458-how-to-start-rapise-launcher-on-windows-boot","title":"KB458 How to start Rapise Launcher on Windows Boot","text":"<p>Windows may reboot because of various reasons. If you use a machine to run Rapise tests on regular basis than you want RapiseLauncher to be started automatically after system reboot.</p>"},{"location":"Manuals/kb/#kb457-how-to-organize-custom-code-in-userjs","title":"KB457 How to organize custom code in User.js","text":"<p>Every test has a User.js file and it is a place to put custom code and functions. This code must follow a few rules.</p>"},{"location":"Manuals/kb/#kb453-working-directory-of-a-test-and-relative-paths","title":"KB453 Working Directory of a Test and Relative Paths","text":"<p>When Rapise starts execution of a test, it sets working directory. If a test refers to a file using a relative path then the absolute path is calculated using the working directory.</p>"},{"location":"Manuals/kb/#kb448-how-to-create-a-rapise-web-object-from-xpath","title":"KB448 How to create a Rapise web object from XPath","text":"<p>In some cases it may be convenient to construct Rapise Objects dynamically rather than capture in advance\u00a0with record/learn. In Web tests you can do it via Navigator.Find and Navigator.SeSFind.</p>"},{"location":"Manuals/kb/#kb446-getting-browser-console-logs","title":"KB446 Getting browser console logs","text":"<p>In some cases it may be useful to analyze browser-side logs. For example, if you are using Navigator.ExecJS action.</p>"},{"location":"Manuals/kb/#kb444-how-to-get-title-of-a-window","title":"KB444 How to get title of a window","text":"<p>In this short topic we describe how to get the value of a window title. The way depends on the application type.</p>"},{"location":"Manuals/kb/#kb443-closing-application-under-test-from-rapise","title":"KB443 Closing application under test from Rapise","text":"<p>There are different techniques one can use to close the application being tested from Rapise. The method to choose may depend on the application type.</p>"},{"location":"Manuals/kb/#kb442-troubleshooting-rapise-install","title":"KB442 Troubleshooting Rapise Install","text":"<p>If you install Rapise on non-vanilla system, e.g. old workstation with a lot of other software, especially with anti-virus and development tools, it may end-up in a state when some components are not registered\u00a0 successfully and some files are blocked.\u00a0 In this article we describe symptoms and ways to cure.</p>"},{"location":"Manuals/kb/#kb439-troubleshooting-rapise-uninstall","title":"KB439 Troubleshooting Rapise Uninstall","text":"<p>In the unlikely case of unsuccessful deinstallation of Rapise (e.g. if computer power switched off during deinstallation,\u00a0 or Windows Installer process terminated) there is a way to manually fix the system and complete interrupted deinstallation process.. Automatic uninstall may no longer properly work and leave files in Program Files folder.</p>"},{"location":"Manuals/kb/#kb436-handling-toast-messages","title":"KB436 Handling Toast Messages","text":"<p>The toast message is like an alert box that is only shown for a couple of seconds when something happens (i.e. when the user clicks on a button, submits a form, etc.). This article describes how to deal with toast messages in Rapise.</p>"},{"location":"Manuals/kb/#kb434-how-to-send-special-keys-to-selenium-targets","title":"KB434 How to Send Special Keys to Selenium Targets","text":"<p>Sometimes you need to press Tab, Return, Backspace to the web page. Here is how you may do it through WebDriver.</p>"},{"location":"Manuals/kb/#kb433-using-extra-columns-in-rvl-to-add-report-attributes","title":"KB433 Using Extra Columns in RVL to add Report Attributes","text":"<p>You may use extra RVL columns for your own purposes. In the simple case for storing additional information (notes, links). In more advanced cases extra columns may affect script behavior: add report attributes, control screenshots, control custom actions, assign variable values etc. Here we provide live example of one of such use-cases.</p>"},{"location":"Manuals/kb/#kb432-writing-data-to-an-excel-spreadsheet","title":"KB432 Writing data to an Excel spreadsheet","text":"<p>In this article we describe how to write data to an external Excel spreadsheet during test playback. Both RVL and JavaScript examples are given.</p>"},{"location":"Manuals/kb/#kb431-multiple-object-locators","title":"KB431 Multiple Object Locators","text":"<p>Sometimes object location is unstable. The same object may be identified by different location path or XPath depending on application version or state.</p>"},{"location":"Manuals/kb/#kb430-how-to-pass-shiftcontrolf12-or-shiftcontrolf11-from-rapise","title":"KB430 How To Pass Shift+Control+F12 or Shift+Control+F11 from Rapise","text":"<p>Global.DoSendKeys is a way to to that, but there is also a little trick required to make it happen.</p>"},{"location":"Manuals/kb/#kb429-how-to-deal-with-dynamic-window-titles","title":"KB429 How to deal with dynamic window titles","text":"<p>Desktop applications may use window titles to show important information to a user. In some cases the title contains subject of a displayed entity or time.\u00a0 Since Rapise uses window title while searching for an object during playback - the search may fail. This complication may be resolved if you replace recorded windows title with a regular expression.</p>"},{"location":"Manuals/kb/#kb428-how-to-relearn-an-object","title":"KB428 How to relearn an object","text":"<p>If an object can not be found at playback and it is obvious that object location has changed because of application update (differs from the case when location is dynamic!) then the best way to fix the test is simply relearn the object.</p>"},{"location":"Manuals/kb/#kb427-how-to-master-a-dynamic-locator-with-rvl","title":"KB427 How to master a dynamic locator with RVL","text":"<p>There are situations when object location attribute\u00a0 depends on the object data and it is not possible to record/learn all such objects in advance.\u00a0 In this case it may be convenient to calculate object location at playback time using FormatString and SetLocatorOpts actions of the RVL global object.</p>"},{"location":"Manuals/kb/#kb422-how-to-saveload-dom-tree-in-web-spy","title":"KB422 How to save/load DOM tree in Web Spy","text":"<p>Better to see something once than to hear about it a thousand times. If a Web element can not be found on the page using given XPATH expression and you do not know why - you have an option to save the DOM tree of the page and ask someone else with Rapise for assistance. Here is how.</p>"},{"location":"Manuals/kb/#kb421-how-to-save-type-information-for-ui-control-in-rapise-spy","title":"KB421 How to save type information for UI control in Rapise Spy","text":"<p>Rapise supports many standard UI controls out-of-the-box. And there are even more custom UI controls that are not supported. This is why Rapise has a well-defined way of adding extensions.\u00a0 To add support for a custom control first it makes sense to Spy on it. If you are dealing with Managed or Java applications you can Save Type Information for the control and also save UI tree structure/properties to a file.\u00a0 Send this information to Rapise team to get an advice on how to add support for the new control.</p>"},{"location":"Manuals/kb/#kb420-firefox-64-compatibility","title":"KB420 Firefox 64 Compatibility","text":"<p>Once you have your Firefox updated to version 64 Rapise may have problems connecting to it. Here is a quick workaround until new release of Rapise addressing the problem shows up.</p>"},{"location":"Manuals/kb/#kb418-is-it-possible-to-automate-an-ios-web-app-using-rapise","title":"KB418 Is it Possible to Automate an iOS Web App using Rapise?","text":"<p>Yes, in general, Rapise can automate most web applications using mobile Safari running on iOS (either on a real or simulated device). However there are some limitations. This article is obsolete. The recommended way of testing Web applications is to record tests on a desktop browser via Selenium-based profile and then execute using Mobile profiles. See How to run a cross-browser test on a mobile device for more details.</p>"},{"location":"Manuals/kb/#kb417-how-to-manipulate-browser-cookies-using-selenium-api-in-rapise","title":"KB417 How to manipulate browser cookies using Selenium API in Rapise","text":"<p>If you run Rapise tests via Selenium WeDriver you may need to manipulate browser cookies. Learn how from this post.</p>"},{"location":"Manuals/kb/#kb416-wpf-calendar-and-datepicker","title":"KB416 WPF Calendar and DatePicker","text":"<p>It is tricky do deal with WPF calendar control. Here we introduce a number of supplementary functions to copy in your project and use to modify and read\u00a0 Calendar and DatePicker data.</p>"},{"location":"Manuals/kb/#kb415-is-it-possible-to-automate-an-ios-app-store-app-using-rapise","title":"KB415 Is it Possible to Automate an iOS App Store App using Rapise?","text":"<p>We often get asked this question: \"We have Rapise and want to automate a native iOS app that is available on the application store\", can we do it?</p>"},{"location":"Manuals/kb/#kb412-how-to-ensure-that-a-fast-tab-is-expanded-and-scrolled-into-view-in-dynamics-ax","title":"KB412 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics AX","text":"<p>Many views in Dynamics AX have several collapsible panes: General, Addresses, Contact information, etc. They are also known as Fast Tabs.\u00a0 Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+</p>"},{"location":"Manuals/kb/#kb411-if-recording-of-actions-in-dynamics-ax-or-dynamics-nav-does-not-work","title":"KB411 If recording of actions in Dynamics AX or Dynamics NAV does not work","text":"<p>More and more computers are equipped with High DPI displays. Though high resolution looks beautiful it may bring some issues. One of them is broken recording in Rapise.</p>"},{"location":"Manuals/kb/#kb408-how-to-upgrade-rapise-to-a-newer-version","title":"KB408 How to upgrade Rapise to a newer version","text":"<p>Rapise is evolving product and we release new versions of it from time to time. If you plan to upgrade your copy of Rapise follow these simple steps.</p>"},{"location":"Manuals/kb/#kb407-how-to-emulate-keyboard-and-mouse-via-selenium-api-in-rapise","title":"KB407 How to emulate keyboard and mouse via Selenium API in Rapise","text":"<p>Though Rapise can execute it's native recorded tests via WebDriver - some users prefer to write their tests in pure Selenium API. In this post we describe how to perform complex mouse and keyboard sequences via Selenium API in Rapise tests.</p>"},{"location":"Manuals/kb/#kb406-rapise-start-page-layout-does-not-display-correctly","title":"KB406 Rapise Start Page Layout Does Not Display Correctly","text":"<p>Sometimes when you first install and open Rapise, the Start Page does not display correctly. This article explains the cause and solution to fix the issue.</p>"},{"location":"Manuals/kb/#kb396-mapping-spira-requirements-to-test-steps-in-bulk-using-excel-and-rapise","title":"KB396 Mapping Spira Requirements to Test Steps in Bulk Using Excel and Rapise","text":"<p>Of the unique needs of a requirements and test management system when working in the Defense industry, specifically when designing, building, and testing mission systems, is the ability to link individual test steps to the requirements. Since v5 of SpiraTest, this has been possible inside the Spira user interface, however many customers have been looking for a way to map test steps to requirements in bulk using Excel.</p>"},{"location":"Manuals/kb/#kb395-how-to-configure-mobile-profile-to-automatically-grant-android-application-permissions-on-install","title":"KB395 How to configure Mobile Profile to automatically grant Android application permissions on install","text":"<p>When Appium installs an application at the beginning of a test session - Android may ask for permissions (e.g. access to media files, camera, etc.). Until such prompt is dismissed - Main activity is not launched. It prevents the test from proceeding.\u00a0 Learn how to configure the Mobile Profile to automatically grant required permissions on install.</p>"},{"location":"Manuals/kb/#kb394-how-to-use-specific-version-of-chromedriver-with-appium","title":"KB394 How to use specific version of Chromedriver with Appium","text":"<p>In Mobile Spy of Rapise when switching from NATIVE_APP to WEBVIEW context you may see an error message: Chrome version must be &gt;= 55.0.2883.0 From this article you will learn how to fix this.</p>"},{"location":"Manuals/kb/#kb393-doclick-vs-doclickxy","title":"KB393 DoClick() vs DoClick(x,y)","text":"<p>When doing mouse click from Rapise it is sometimes need to use offset coordinates. You will learn: 1. When explicit coordinates are needed 2. How to determine them</p>"},{"location":"Manuals/kb/#kb391-creating-a-purchase-order-in-dynamics-ax","title":"KB391 Creating a Purchase Order in Dynamics AX","text":"<p>Learn how to break down a long scenario into manageable pieces in RVL. Creating a purchase order in Dynamics AX takes many steps: start PO process, enter basic details, fill order lines, approve, receive, invoice. In RVL you can create separate sheets to implement stages of a complex test.</p>"},{"location":"Manuals/kb/#kb387-display-intellisense-for-activex-and-net-objects","title":"KB387 Display Intellisense for ActiveX and .NET Objects","text":"<p>Sometimes when you are using Rapise, you have to use external ActiveX or .NET objects to perform specific actions. You can get Rapise to display intellisense for those objects.</p>"},{"location":"Manuals/kb/#kb383-rpa-features-of-rapise","title":"KB383 RPA Features of Rapise","text":"<p>Robotic Process Automation (RPA) is well suited for processes that are clearly defined, repeatable and rules based. With Rapise you can create software robots that can do boring repetitive tasks and free employee time for more creative work. Below you will find a brief description of RPA tasks that Rapise can do.</p>"},{"location":"Manuals/kb/#kb382-android-testing-hints","title":"KB382 Android Testing Hints","text":"<p>Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article.</p>"},{"location":"Manuals/kb/#kb381-ios-testing-hints","title":"KB381 iOS Testing Hints","text":"<p>Most complex part in Mobile testing is connecting to a simulator or device. In this article we describe steps necessary to configure the testing environment. Note: In brackets we specify versions of software components we used at the time of writing this article.</p>"},{"location":"Manuals/kb/#kb380-how-to-insert-an-rvl-step-into-manual-test","title":"KB380 How to insert an RVL step into Manual Test","text":"<p>Sometimes it makes sense to automate certain steps of a Manual Test. If you prefer to implement automatic steps in RVL then include the AUTO\u00a0 helper function into your test.</p>"},{"location":"Manuals/kb/#kb379-processing-registration-emails","title":"KB379 Processing registration Emails","text":"<p>Common scenario: register a user and receive registration confirmation link by email. The most painless way for doing it.</p>"},{"location":"Manuals/kb/#kb378-rpa-importing-data-into-dynamics-ax","title":"KB378 RPA - importing data into Dynamics AX","text":"<p>If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics AX instance. You have a choice either to develop a software program that does the import via Dynamics AX API or you can create an automation script in Rapise.</p>"},{"location":"Manuals/kb/#kb377-how-to-find-an-object-in-the-object-tree","title":"KB377 How to find an object in the object tree","text":"<p>A test may contain a lot of objects. If you want to locate an object in the object tree you may use the filter box.</p>"},{"location":"Manuals/kb/#kb376-what-is-object-location","title":"KB376 What is object Location?","text":"<p>When you record a test Rapise captures UI elements with which you interact and adds them as objects to the Object Tree of a test. Each object has a Type (Button, Text, Label, Tree, Grid, ...) and Location. Rapise uses Location attribute of an object to find it in the application during test execution.</p>"},{"location":"Manuals/kb/#kb375-how-to-check-that-rapise-can-find-an-object-on-screen","title":"KB375 How to check that Rapise can find an object on screen","text":"<p>When you execute a recorded test, sometimes, Rapise may not find some object on screen and display Object is not found error message in the report. If you see that the object is visible you can check if Rapise can find it or not without running the test.</p>"},{"location":"Manuals/kb/#kb374-rpa-importing-data-into-dynamics-nav","title":"KB374 RPA - importing data into Dynamics NAV","text":"<p>If anything can be automated - it will be automated. You can use Rapise to automate day-to-day processes within a company to free your employees for more creative and productive job. Imagine you have data from third-party system in Excel file and you want to import it into Dynamics NAV instance. You have a choice either to develop a software program that does the import via Dynamics NAV API or you can create an automation script in Rapise.</p>"},{"location":"Manuals/kb/#kb372-how-to-save-content-of-a-tablegrid-into-a-spreadsheet-file","title":"KB372 How to save content of a table/grid into a spreadsheet file","text":"<p>If you need to make a copy of data in a Table/Grid object - you may simply save it to Excel file with a single function call.</p>"},{"location":"Manuals/kb/#kb371-sample-spira-friendly-framework-with-multiple-rvls-and-common-library","title":"KB371 Sample Spira-Friendly Framework with Multiple RVLs and Common Library","text":"<p>Working example of test framework designed to maximize flexibility and get the most from Rapise productivity features.</p>"},{"location":"Manuals/kb/#kb367-storing-values-across-test-cases-and-sessions-in-rapise","title":"KB367 Storing Values Across Test Cases and Sessions in Rapise","text":"<p>Sometimes test set requires a value passing through the sequence of test cases. Good example is User ID assigned during sign-in\u00a0and then used in subsequent test cases. Another use case is when test case requires some input value that should always be unique.</p>"},{"location":"Manuals/kb/#kb366-how-to-ensure-that-a-fast-tab-is-expanded-and-scrolled-into-view-in-dynamics-nav","title":"KB366 How to ensure that a Fast Tab is expanded and scrolled into view in Dynamics NAV","text":"<p>Many views in Dynamics NAV have several collapsible panes: General, Lines, Invoice Details, etc. They are also known as Fast Tabs.\u00a0 Learn how to ensure that a Fast Tab is expanded and scrolled into view before entering data into the fields in this tab. Requires Rapise 5.7+</p>"},{"location":"Manuals/kb/#kb364-how-to-ensure-that-a-web-element-is-visible-before-interacting-with-it","title":"KB364 How to ensure that a web element is visible before interacting with it?","text":"<p>Sometimes an element on a web page may be invisible because it is out of a viewport.\u00a0 Real user scrolls a page vertically and horizontally to reach such an element. How to achieve same behavior with Rapise?</p>"},{"location":"Manuals/kb/#kb363-how-to-define-a-profile-for-web-application-in-rapise","title":"KB363 How to define a profile for Web Application  in Rapise","text":"<p>Each web application is unique in terms of assigning attributes to elements and this complicates the process of generating XPath locators. Some applications assign dynamic IDs to elements, some use ARIA attributes and some do not, some values of class attribute have meaning related to element position and some just used for styling . There are also cases when an app contains hidden DOM layers which stack on top of each other. So usage of same set of attributes for generating XPath is not efficient and may lead to weak locators that break after application reloading or slight modification. To cope with these problems Rapise introduces Web App Profile. It is a simple JSON file of a defined structure that instructs Rapise how to build XPath for elements in a particular application. From this article you will learn how to define a profile for your web application.</p>"},{"location":"Manuals/kb/#kb362-how-to-automate-testing-of-unified-service-desk-for-microsoft-dynamics-365","title":"KB362 How to automate testing of Unified Service Desk for Microsoft Dynamics 365","text":"<p>Unified Service Desk (USD) is a hybrid application. It is a windows desktop application with embedded browser components. Follow this guide to setup a test automation framework for USD.</p>"},{"location":"Manuals/kb/#kb361-text-validation-does-not-always-fire-on-angular4-application","title":"KB361 Text Validation Does Not Always Fire on Angular4 Application","text":"<p>Sometimes when you are testing an application written in Angular 4, the text box will not accept a value that is correct during playback (e.g. zip code is not in the right format) when you use DoSetText to set the value.</p>"},{"location":"Manuals/kb/#kb360-overriding-rapise-settings-from-spiratest","title":"KB360 Overriding Rapise Settings from SpiraTest","text":"<p>Sometimes you want to override certain Rapise settings (e.g. the Command Interval) from within SpiraTest. For example you might to run one test set more slowly than other test sets because the environment is slower. This article explains how you can easily pass settings values from SpiraTest to Rapise.</p>"},{"location":"Manuals/kb/#kb359-how-to-install-the-chrome-and-firefox-extensions-offline","title":"KB359 How to Install the Chrome and Firefox Extensions Offline","text":"<p>By default,\u00a0 when you want to use Rapise to record and playback web tests using either Chrome or Firefox, you simply go to the appropriate web browser \"store\" and install the extension directly from the store. However sometimes you are testing web applications on a machine with no Internet Connectivity.</p>"},{"location":"Manuals/kb/#kb358-how-to-disable-chrome-is-being-controlled-by-automated-test-software-message","title":"KB358 How to disable \"Chrome is being controlled by automated test software\" message","text":"<p>When you run a test with Selenium - Chrome profile the browser is launched with a warning message below the address bar. It can be disabled.</p>"},{"location":"Manuals/kb/#kb357-data-driven-testing-with-spreadsheets-and-rvl","title":"KB357 Data-driven testing with spreadsheets and RVL","text":"<p>Many test automation scenarios require performing same steps with different data. For example, login into application with different user credentials, or enter several lines of a sales order into a table. This is data-driven testing. From this article you will learn how to do this in Rapise Visual Language (RVL) and JavaScript modes.\u00a0 You will also learn how to define data within a test and in external spreadsheet.</p>"},{"location":"Manuals/kb/#kb354-how-to-override-an-action-for-an-object-type","title":"KB354 How to override an action for an object type","text":"<p>Rapise supports many types of objects in Web, Mobile and Desktop applications.\u00a0 And each object has a set of actions that can be applied to it.\u00a0 You may want to override behavior of existing action or add a new one. Learn how from this article.</p>"},{"location":"Manuals/kb/#kb353-rapise-doesnt-launch-because-of-missing-windows-fonts","title":"KB353 Rapise Doesn't Launch Because of Missing Windows Fonts","text":"<p>If you don't have some of the standard Window fonts installed (e.g. Courier New), when you try and launch Rapise, it will fail to open correctly. This article provides information on the problem and solution.</p>"},{"location":"Manuals/kb/#kb352-converting-recorded-steps-into-functionsscenarios","title":"KB352 Converting Recorded Steps into Functions/Scenarios","text":"<p>You have recorded some basic test scripts in Rapise, and now you want to easily extract the steps into a reusable function that can be called from the main test script. This article explains how you can do this for both RVL and JavaScript based tests.</p>"},{"location":"Manuals/kb/#kb351-how-to-automatically-enter-user-credentials-into-windows-security-dialog-on-windows-10","title":"KB351 How to automatically enter user credentials into Windows Security dialog on Windows 10","text":"<p>Some test scenarios require running processes as different user or entering user credentials into Internet Explorer security prompt.\u00a0 Rapise can enter user credentials into Windows Security dialog on Windows 10 automatically.</p>"},{"location":"Manuals/kb/#kb349-recording-tips-for-dynamics-nav-2017-web-client-and-dynamics-365-business-central","title":"KB349 Recording tips for Dynamics NAV 2017 Web Client and Dynamics 365 Business Central","text":"<p>Dynamics 365 Business Central is a successor of Dynamics NAV 2017 Web Client. Both solutions were built by Microsoft using same technology though they have a few differences. Rapise includes a library DomDynamicsNAV which makes test recording and playback of Dynamics NAV web clients a pleasant thing. From this post you will learn basics of recording a reliable test for these solutions as well as test playback troubleshooting methods. We'll use Dynamics 365 Business Central as system under test.</p>"},{"location":"Manuals/kb/#kb347-how-to-record-entering-of-data-into-dynamics-nav-tables","title":"KB347 How to record entering of data into Dynamics NAV tables","text":"<p>Follow these simple rules to record entering of data into Dynamics NAV grids. For example, entering of new order lines into a Sales Order.</p>"},{"location":"Manuals/kb/#kb344-doing-a-substring-on-a-database-value-in-rapise","title":"KB344 Doing a SubString on a Database Value in Rapise","text":"<p>When you try and do a substring on a value returned from a database, you may get an error about the object not supporting the property.</p>"},{"location":"Manuals/kb/#kb343-how-to-scroll-dynamics-nav-table-vertically-and-horizontally","title":"KB343 How to scroll Dynamics NAV table vertically and horizontally","text":"<p>Rapise 5.7+ performs scrolling automatically before clicking on a cell. Also there is DoScroll action that does explicit scrolling. In Rapise 5.6 and below use this simple function to scroll your Dynamics NAV table left, right, up, bottom.</p>"},{"location":"Manuals/kb/#kb341-jumping-to-the-definition-of-a-user-function","title":"KB341 Jumping to the Definition of a User Function","text":"<p>When you have a user defined function in Rapise, you sometimes want to jump to it.</p>"},{"location":"Manuals/kb/#kb340-how-to-do-a-nested-loop-with-rapise-visual-language-rvl","title":"KB340 How to Do a Nested Loop with Rapise Visual Language (RVL)","text":"<p>Sometimes you want to have multiple nested loops to test a set of test data (for example loop over a list of users, and for each user, loop over a list of browsers). In JavaScript you can use standard nested loops, this article explains how you can do the same using RVL.</p>"},{"location":"Manuals/kb/#kb339-where-does-rapise-log-errors","title":"KB339 Where does Rapise log errors?","text":"<p>Sometimes when you are using Rapise, you see an error on the screen, or something doesn't work as expected. In that case, our support team will need a copy of the log file that is likely to contain the error message. This article explains how to get that log file.</p>"},{"location":"Manuals/kb/#kb338-dealing-with-unexpected-popup-objects","title":"KB338 Dealing with Unexpected Popup Objects","text":"<p>Some applications show unexpected popup windows. This could be feature announcements, update reminders, license expiration reminders, alerts, internal messengers and so on. Here we are going to show a solution for this problem.</p>"},{"location":"Manuals/kb/#kb336-ways-to-deal-with-flaky-tests","title":"KB336 Ways to deal with flaky tests","text":"<p>When you do UI test automation and create a big enough test coverage the probability of having certain portion of flaky tests increases. In many cases there is no reasonable way in terms of time and resources to mitigate all flakiness from the test coverage. In some cases even a flaky test may still be useful.</p>"},{"location":"Manuals/kb/#kb335-what-is-ui-test-automation-framework","title":"KB335 What is UI Test Automation Framework?","text":"<p>At Inflectra we think that UI Test Automation Framework is a set of tools with specific features that enables QA teams to develop and run tests, and effectively analyze test execution results.</p>"},{"location":"Manuals/kb/#kb334-how-to-launch-a-browser-in-private-mode","title":"KB334 How to launch a browser in private mode?","text":"<p>In some cases it makes sense to launch a browser in private mode to ensure exact same conditions every time you run a test.\u00a0 This helps to cope with such things as remembered accounts or pending sessions not disconnected by a previous test.\u00a0 Learn how to properly adjust browser profiles from this article.</p>"},{"location":"Manuals/kb/#kb333-installing-rapise-browser-extensions-without-internet-access","title":"KB333 Installing Rapise Browser Extensions without Internet Access","text":"<p>Normally you can install the add-ons for Chrome and Firefox directly from the browser's app store (just search for Rapise). This is the easiest option, and avoids the need to run the browsers in developer mode.</p>"},{"location":"Manuals/kb/#kb331-how-to-check-if-rapise-can-test-my-delphi-application","title":"KB331 How to Check if Rapise Can Test My Delphi Application","text":"<p>In order for Rapise to be able to test a thick-client desktop application written using Delphi, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://edn.embarcadero.com/article/33642 This article demonstrates how to check your application to see if it supports MSAA.</p>"},{"location":"Manuals/kb/#kb330-compare-two-spreadsheets-in-rapise","title":"KB330 Compare two SpreadSheets in Rapise","text":"<p>Sometimes you need to compare two tables. Here we introduce a function to compare two spreadsheets.</p>"},{"location":"Manuals/kb/#kb328-using-rapise-mobile-with-browserstack","title":"KB328 Using Rapise Mobile with Browserstack","text":"<p>BrowserStack supports automated browser testing via Selenium and Appium on real iOS and Android devices.\u00a0 Learn how to configure Rapise to connect to Browserstack via Appium.</p>"},{"location":"Manuals/kb/#kb326-windows-scripting-host-crashes-when-playing-back-rapise-rvl-script-after-windows-10-update","title":"KB326 Windows Scripting Host Crashes When Playing Back Rapise RVL Script after Windows 10 Update","text":"<p>Unfortunately, Windows10 has a nasty habit of frequently updating itself and then breaking existing applications. We found that the February 14<sup>th</sup>, 2018 Windows10 update corrupted the Excel device driver that Rapise uses to access the RVL test script spreadsheet during playback.</p>"},{"location":"Manuals/kb/#kb325-running-nightly-tests-with-rapiselauncher-on-vm-with-rdp","title":"KB325 Running nightly tests with RapiseLauncher on VM with RDP","text":"<p>It is common to use UI tests with RDP connected to remote VM. By default this works only while RDP window is open and client is connected. On disconnect remote session gets locked and UI becomes unavailable for the test. This topic covers a workaround.</p>"},{"location":"Manuals/kb/#kb324-list-files-from-folder-in-rvl","title":"KB324 List Files from Folder in RVL","text":"<p>Sometimes it is required to have list of files from some folder. Here we demonstrate how to get this list and how to iterate through it in RVL.</p>"},{"location":"Manuals/kb/#kb323-how-to-launch-a-web-browser-in-rapise-with-a-specific-size","title":"KB323 How to launch a web browser in Rapise with a specific size","text":"<p>Sometimes when recording a test against a mobile responsive web site, it is useful to be able to record on the local browser (before playing it back against a cloud service such as SauceLabs, Browserstack, etc.). However you want to always record using a specific browser window size.</p>"},{"location":"Manuals/kb/#kb322-how-to-run-cross-browser-tests-on-browserstack","title":"KB322 How to run cross-browser tests on BrowserStack","text":"<p>BrowserStack enables testing of your website for cross browser compatibility on real browsers. Instant access to multiple desktop and mobile browsers.\u00a0 Learn how to configure Selenium\u00a0 profiles in Rapise to enable connection to BrowserStack services. Requires Rapise 5.3+</p>"},{"location":"Manuals/kb/#kb320-using-rvl-loop-to-generate-sequence-of-file-names","title":"KB320 Using RVL Loop to generate sequence of file names","text":"<p>We show how to do data generation for test scenario using RVL Variable loop in Rapise. This sample shows how to produce a sequence of filenames: FILE1.txt, FILE2.txt, FILE3.txt and so on.</p>"},{"location":"Manuals/kb/#kb318-troubleshooting-the-the-pipe-is-being-closed-error-during-rapise-installation","title":"KB318 Troubleshooting the \"The Pipe is being Closed\" Error during Rapise Installation","text":"<p>Sometimes when you try and install Rapise, you will see the error message \"The Pipe is Being Closed\", this article provides some solutions for this message.</p>"},{"location":"Manuals/kb/#kb317-read-external-excel-spreadsheet-in-rvl","title":"KB317 Read external Excel spreadsheet in RVL","text":"<p>Attaching to external .XLS spreadsheet in RVL may be easily done in RVL by use of Range type of the Map.</p>"},{"location":"Manuals/kb/#kb314-how-to-start-dynamics-nav-client","title":"KB314 How to start Dynamics NAV client","text":"<p>Check that Dynamics NAV client is installed on a machine and launch it if it is not started yet with this simple function.</p>"},{"location":"Manuals/kb/#kb313-testing-visualforce-components-in-salesforce","title":"KB313 Testing Visualforce components in Salesforce","text":"<p>Visualforce is the component-based user interface framework for the Force.com platform. Visualforce components can be tested with Rapise just like default Salesforce interface.</p>"},{"location":"Manuals/kb/#kb312-accessing-dom-elements-by-attributes-in-rvl","title":"KB312 Accessing DOM elements by Attributes in RVL","text":"<p>It is possible to access such objects form RVL\u00a0using one of the methods shown in this article.</p>"},{"location":"Manuals/kb/#kb310-custom-attributes-for-xpath-generation-in-the-rapise-web-spy","title":"KB310 Custom Attributes  for XPath Generation in the Rapise Web Spy","text":"<p>Sometimes web applications use custom DOM attributes for internal purposes. XPath locators containing those attributes are sometimes more stable and resilient. Rapise contains features intended to simplify utilization of such attributes.</p>"},{"location":"Manuals/kb/#kb308-how-to-include-file-with-common-function-in-test","title":"KB308 How to include file with common function in test","text":"<p>Sometimes it is useful to have common functionality and variables in a separate JavaScript source file. This topic explains the steps to do it.</p>"},{"location":"Manuals/kb/#kb307-how-to-check-if-rapise-can-test-my-qt-application","title":"KB307 How to Check if Rapise can Test my Qt Application","text":"<p>In order for Rapise to be able to test a thick-client desktop application written using Qt, it needs to support Microsoft Active Accessibility (MSAA), as described in this article - http://doc.qt.io/qt-5/accessible-qwidget.html This article demonstrates how to check your application to see if it supports MSAA.</p>"},{"location":"Manuals/kb/#kb305-how-to-run-a-program-as-a-different-user","title":"KB305 How to run a program as a different user","text":"<p>Sometimes a test needs to run a process as a different user (not the logged in user executing Rapise). It is not possible to use runas command for this purpose because it forces a user to type a password manually.\u00a0 From this short article you will learn how to reach the goal.</p>"},{"location":"Manuals/kb/#kb304-using-globaldoencrypt-and-globaldodecrypt-to-hide-passwords","title":"KB304 Using Global.DoEncrypt and Global.DoDecrypt to Hide Passwords","text":"<p>Sometimes passwords need to stay secure. Here are simple steps on how to hide some information in Rapise. Here we will demonstrate usage of Global.DoDecrypt and Global.DoEncrypt available since Rapise 5.4.</p>"},{"location":"Manuals/kb/#kb303-how-to-run-cmd-shell-commands","title":"KB303 How to run CMD shell commands","text":"<p>In some cases a test needs to run a Windows shell command (e.g. dir, ipconfig, gpresult) and capture/parse output. Learn how to do this in Rapise from this short article.</p>"},{"location":"Manuals/kb/#kb302-about-rapise-imagefinder","title":"KB302 About Rapise ImageFinder","text":"<p>Sometimes the goal is to find specific image on the screen. It may be special symbol, map pointer or an icon. This topic contains ImageFinder and sample test demonstrating its capabilities.</p>"},{"location":"Manuals/kb/#kb301-ways-to-slow-down-test-execution","title":"KB301 Ways to slow down test execution","text":"<p>There are several types of delays one can use to slow down test execution. Implicit Explicit fixed Explicit with timeout</p>"},{"location":"Manuals/kb/#kb300-running-rapise-gui-tests-with-jenkins","title":"KB300 Running Rapise GUI Tests with Jenkins","text":"<p>Recommended approach is to use SpiraTest and RapiseLauncher designed for this task. In some cases it is not an option and we need to execute a test directly.</p>"},{"location":"Manuals/kb/#kb299-installing-rapise-on-pc-without-internet-access","title":"KB299 Installing Rapise on PC without Internet Access","text":"<p>In general Rapise installs on disconnected PC without problems. However, if PC contains old version of windows without most recent root certificates then installer may fail due to inability to check application authenticode certificate. This topic explains a workaround.</p>"},{"location":"Manuals/kb/#kb294-how-to-measure-operation-performance-in-rapise","title":"KB294 How to Measure Operation Performance in Rapise","text":"<p>Sometimes we need to track the time taken by an operation. This KB contains suggested approach for Rapise and working sample.</p>"},{"location":"Manuals/kb/#kb293-how-to-store-rapise-tests-in-git-and-run-them-with-spirateam","title":"KB293 How to store Rapise tests in Git and run them with SpiraTeam","text":"<p>In some cases it is convenient to store tests in the same Git repository where source code of an application under test is located. For example, if you are using Visual Studio Team Services.\u00a0 From this article you will learn how to execute Rapise tests stored in a Git repository with SpiraTeam and leverage the power of SpiraTeam reporting and analysis features. This article is obsolete. There is much simpler approach with use of RapiseLauncher Extension for Azure DevOps.</p>"},{"location":"Manuals/kb/#kb292-dynamics-nav-support-in-rapise","title":"KB292 Dynamics NAV Support in Rapise","text":"<p>In this guide we describe how to master tests for Dynamics NAV application using Rapise. Rapise provides a complete automated testing solution that can handle all of your technologies in one environment. With support for web, mobile and desktop applications and a wide variety of third-party component libraries. Microsoft Dynamics NAV is an enterprise resource planning (ERP) software suite for midsize organizations. The system offers specialized functionality for manufacturing, distribution, government, retail, and other industries.</p>"},{"location":"Manuals/kb/#kb291-how-to-enabledisable-screenshots-during-script-execution","title":"KB291 How to Enable/Disable screenshots during script execution","text":"<p>Sometimes we need to disable screenshots for a while (during some long loop) or when doing some specific operations. Here we show how to do it.</p>"},{"location":"Manuals/kb/#kb290-how-to-create-spira-friendly-test-set-with-shared-functions-and-files","title":"KB290 How to create Spira-friendly Test Set with shared functions and files","text":"<p>The notion of the integrated test framework usually implies common functions and shared data between tests. \u00a0Here we provide sample configuration making sharing Spira-friendly. This article is obsolete. If you are on Rapise 8.0+ then we recommend to follow the new Framework Mode methodology and start with the Benefits of using the new Framework mode KB article.</p>"},{"location":"Manuals/kb/#kb289-how-object-recognition-works-in-rapise","title":"KB289 How Object Recognition Works in Rapise","text":"<p>This article contains of overview of object recognition by UI automation tools in general and its implementation in Rapise in particular.</p>"},{"location":"Manuals/kb/#kb288-search-by-name-text-xpath-or-attribute-on-the-web-page","title":"KB288 Search by Name, Text, XPath or Attribute on the Web Page","text":"<p>It is common task to search for an element by its text. In some cases it is the fastest\u00a0way to find one. This approach works in web browsers and selenium targets.</p>"},{"location":"Manuals/kb/#kb285-using-bytext-and-byname-locators-in-winforms","title":"KB285 Using bytext and byname Locators in WinForms","text":"<p>byname and bytext is an universal feature common for Web, UI Automation and WinForms (Managed) targets. Here we consider WinForms (.NET) desktop applications.</p>"},{"location":"Manuals/kb/#kb284-model-based-ui-testing","title":"KB284 Model-Based UI Testing","text":"<p>Model-based testing is widely used for a long time for testing software systems. Typical application fields include telecommunication protocols, embedded software, server software, automotive and reactive systems. What about model-based testing of desktop, web and mobile GUI applications?</p>"},{"location":"Manuals/kb/#kb283-using-bytext-and-byname-locators-in-ui-automation","title":"KB283 Using bytext and byname locators in UI Automation","text":"<p>byname and bytext simplify finding objects by text or by name.</p>"},{"location":"Manuals/kb/#kb282-elastic-xpath-expressions","title":"KB282 Elastic XPATH Expressions","text":"<p>When working on UI test automation for a web application a test engineer has to deal with XPATH expressions. They are used to locate UI elements during test execution. It is very important to use such XPATH expressions that do not break when developers update the application. Good XPATH expressions which still find required elements after UI modification can be referred to as resilient or elastic. In this article we'll consider several examples of elastic XPATH expressions.</p>"},{"location":"Manuals/kb/#kb281-how-to-get-the-most-out-of-code-complete-feature-in-rapise","title":"KB281 How to get the most out of code complete feature in Rapise","text":"<p>Writing JavaScript code in Rapise is fun and easy. It has full featured editor with folding, syntax highlighting and code complete. From this article you will learn how to enhance Rapise code complete with support for external types.</p>"},{"location":"Manuals/kb/#kb280-how-to-specify-selenium-or-appium-capabilities-which-are-not-available-through-rapise-ui","title":"KB280 How to specify Selenium or Appium capabilities which are not available through Rapise UI?","text":"<p>From this article you will learn how to pass additional parameters to Selenium or Appium target, even if they can not be specified in a profile.\u00a0 This recipe can be also used to override parameters of a profile right from a test code. Requires Rapise 5.3+</p>"},{"location":"Manuals/kb/#kb279-how-to-run-cross-browser-and-mobile-tests-on-sauce-labs","title":"KB279 How to run cross-browser and mobile tests on Sauce Labs?","text":"<p>Sauce Labs allows users to run tests in the cloud on different combinations of browser and OS versions as well as mobile devices and emulators. Learn how to configure Selenium and Mobile profiles in Rapise to enable connection to Sauce Labs services. Requires Rapise 5.3+</p>"},{"location":"Manuals/kb/#kb278-how-to-run-a-cross-browser-test-on-a-mobile-device","title":"KB278 How to run a cross-browser test on a mobile device?","text":"<p>Let's assume you have a cross-browser test which was created on desktop and can be successfully executed on any desktop browser (Chrome, Firefox, Internet Explorer, Safari). You want to execute this test on your mobile devices or emulators. Learn how from this article. Requires Rapise 5.3+</p>"},{"location":"Manuals/kb/#kb277-tips-tricks-for-rapise-and-dynamics-365-for-sales","title":"KB277 Tips &amp; Tricks for Rapise and Dynamics 365 for Sales","text":"<p>Essential information to get started with testing Dynamics 365 for Sales.</p>"},{"location":"Manuals/kb/#kb276-how-to-upgrade-chrome-browser-on-android-emulator","title":"KB276 How to upgrade Chrome browser on Android emulator","text":"<p>Appium requires certain version of Chrome to work with. Even Android 7.0 is shipped with Chrome 51 and this is too old version. From this article you will learn how to upgrade Chrome on your Android emulator.</p>"},{"location":"Manuals/kb/#kb275-json-in-rapise","title":"KB275 JSON in Rapise","text":"<p>This topic describes how to read and write JSON data in Rapise.</p>"},{"location":"Manuals/kb/#kb274-using-rapise-mobile-with-a-cloud-device-farm","title":"KB274 Using Rapise Mobile with a Cloud Device Farm","text":"<p>Rapise connects to mobile devices (iOS and Android) using the standard Appium mobile device testing API (similar to Selenium WebDriver for web browsers). This articles describes how you can use Rapise to connect to a mobile device farm using the Appium mobile device profiles inside Rapise. We use Kobiton as an example.</p>"},{"location":"Manuals/kb/#kb273-rapise-tips-tricks-workarounds-when-testing-dynamics-ax-2012","title":"KB273 Rapise Tips, Tricks &amp; Workarounds when Testing Dynamics AX 2012","text":"<p>During the evaluation of Rapise 5.2 for Microsoft Dynamics AX testing, a customer collected the following tips and tricks from our support team (thanks Maxime!).</p>"},{"location":"Manuals/kb/#kb272-microsoft-dynamics-solutions-which-one-do-you-have","title":"KB272 Microsoft Dynamics Solutions - Which One Do You Have?","text":"<p>As described in a recent article, Microsoft Dynamics has been going through major changes in the past year, there are now many different products that all bear the 'Microsoft Dynamics' brand, including older legacy tools such as Dynamics AX, NAV, GP, SL and CRM and the new Dynamics 365 platform which has different modules (Sales, Operations, etc.).\u00a0 This article helps you know which tool you have when you need help from our Rapise support team.</p>"},{"location":"Manuals/kb/#kb271-headless-chrome-testing","title":"KB271 Headless Chrome Testing","text":"<p>Headless Chrome on Windows\u00a0 is introduced in version 60 . Learn how to configure Rapise to run cross-browser tests using non-GUI mode of Chrome.</p>"},{"location":"Manuals/kb/#kb270-using-object-id-as-rvl-paramvalue","title":"KB270 Using Object ID as RVL ParamValue","text":"<p>Sometimes Object ID used as a parameter to the function or object Action (such as Global.DoWaitFor(objId) ). RVL contains special feature intended to make pick-up of object from the list easier.</p>"},{"location":"Manuals/kb/#kb269-different-ways-of-slowing-down-rapise-to-handle-slow-applications","title":"KB269 Different Ways of Slowing Down Rapise to Handle Slow Applications","text":"<p>We often get requests for ways to slow down the playback speed of Rapise so that the application under test (AUT) has time to respond. This article describes the different ways and provides suggestions as to when you should use each one.</p>"},{"location":"Manuals/kb/#kb268-how-to-automate-drag-and-drop-from-windows-explorer-into-google-drive","title":"KB268 How to automate Drag and Drop from Windows Explorer into Google Drive","text":"<p>Modern technologies allow to drag&amp;drop files into a browser window to upload them to a server. Such a feature works for example in Chrome browser in Google Drive and Photo applications. In this howto post we'll show how to automate drag&amp;drop of files from Windows Explorer to Google Drive opened in Chrome.</p>"},{"location":"Manuals/kb/#kb266-how-to-integrate-rapise-and-elasticsearch","title":"KB266 How to integrate Rapise and Elasticsearch","text":"<p>Rapise is a test automation platform for desktop, web and mobile applications. It is designed for building automated and manual end-to-end UI tests and fits any TestOps infrastructure. Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. From this article you will learn how to integrate Rapise and Elasticsearch together.</p>"},{"location":"Manuals/kb/#kb264-how-to-integrate-rapise-with-jasmine-bdd-framework","title":"KB264 How to integrate Rapise with Jasmine BDD Framework","text":"<p>Jasmine is a behavior-driven development framework. If you want to test UI with Rapise in a behavior-driven way learn how to tie Rapise and Jasmine together.</p>"},{"location":"Manuals/kb/#kb263-how-to-fix-ie-11-recordingplayback-on-windows-64-bit","title":"KB263 How to fix IE 11 recording/playback on Windows 64-bit","text":"<p>Symptoms: When new recording is started Rapise always opens new IE window Spy does not show DOM tree During playback no object is found</p>"},{"location":"Manuals/kb/#kb262-debugging-rapise-dom-libraries-in-chrome-using-vs-code","title":"KB262 Debugging Rapise DOM libraries in Chrome using VS Code","text":"<p>Rapise can be extended with DOM libraries to add support for custom UI controls used in modern web applications.\u00a0 Many of such applications work in Chrome browser. So there may be a need to debug Rapise code embedded into Chrome via Rapise Extension for Chrome. Most powerful and easy way to do this is to add VS Code into the equation.\u00a0 From this article you will learn how to tie Rapise, Chrome and VS Code together.</p>"},{"location":"Manuals/kb/#kb260-handling-auth-prompt-in-rapise","title":"KB260 Handling Auth prompt in Rapise","text":"<p>Some web site show Auth prompt when entering some area. The prompt is rendered differently by different browser. Here we show how to bypass the prompt in automation scripts.</p>"},{"location":"Manuals/kb/#kb259-how-i-added-support-for-jpopupmenu-automation-in-1-hour","title":"KB259 How I added support for JPopupMenu automation in 1-hour","text":"<p>Example of adding support for Java UI control in Rapise.</p>"},{"location":"Manuals/kb/#kb257-using-rapise-visual-language-rvl-51-with-multiple-sheets","title":"KB257 Using Rapise Visual Language (RVL) 5.1 with Multiple Sheets","text":"<p>With the release of the new Rapise Visual Language (RVL), there have been some questions about how to use it to organize tests, subtests and multiple sheets. For example: I see that I can create multiple sheets.\u00a0 How does Rapise handle multiple sheets?\u00a0 Does it run each in order or can they be run separately? Is it possible to call a test in RVL from another test in RVL?\u00a0 In other worlds, how can I create subtests and scenarios using RVL?</p>"},{"location":"Manuals/kb/#kb249-resources-for-learning-javascript","title":"KB249 Resources for Learning JavaScript","text":"<p>One of the most popular programming languages in the world is JavaScript. Initially conceived by Netscape as a web page scripting language, christened JavaScript to leverage the popularity of Java (which was fairly new and sexy at the time) and now used for servers (NodeJS), desktop apps (ReactNative) and for us at Inflectra, the core technology at the heart of our Rapise test automation system. This article provides some useful resources for those first learning the language.</p>"},{"location":"Manuals/kb/#kb248-rapise-recordingplayback-throw-error-due-to-ansicon-application-conflict","title":"KB248 Rapise Recording/Playback Throw Error Due to ANSICON application conflict","text":"<p>A customer of ours was using Rapise on a computer that was also running the ANSICON application. This changed some of the settings in the Windows registry that affected the Windows command-line parser. This article explains how to clean up the command-line to allow both applications to work correctly together.</p>"},{"location":"Manuals/kb/#kb247-formatting-dates-in-javascript","title":"KB247 Formatting dates in JavaScript","text":"<p>This is a short sample demonstrating how one can format a date.</p>"},{"location":"Manuals/kb/#kb243-changing-rest-headers-when-web-service-testing","title":"KB243 Changing REST Headers When Web Service Testing","text":"<p>When performing web service testing using Rapise you may need to change the HTTP headers being sent with the request. This article provides suggestions on the different ways of doing this.</p>"},{"location":"Manuals/kb/#kb242-how-to-execute-a-javascript-function-when-its-name-as-a-string","title":"KB242 How to execute a JavaScript function when its name as a string","text":"<p>Sometimes it is convenient to store function names in strings and use those strings to call actual functions. The article describes two ways of how you can do this in Rapise.</p>"},{"location":"Manuals/kb/#kb235-magic-tricks-of-the-triple-click","title":"KB235 Magic Tricks of the Triple Click","text":"<p>This article shows how to select paragraph of text using various types of mouse activities. Also it demonstrates use of clipboard Global.DoTrim function. Working example is attached.</p>"},{"location":"Manuals/kb/#kb233-suppressing-text-in-rapise-logs-for-sensitive-data","title":"KB233 Suppressing Text in Rapise Logs for Sensitive Data","text":"<p>A customer had a question - is there a way to suppress the DoSetText or DoSendkeys methods from sending their text to the logs. They didn't want users to see this text in the Rapise (and SpiraTest) logs because they contained sensitive information (e.g.\u00a0 passwords).</p>"},{"location":"Manuals/kb/#kb232-rapise-tip-how-to-handle-a-webpage-that-displays-an-alert-when-you-navigate-away","title":"KB232 Rapise Tip - How to Handle a Webpage that Displays an Alert when You Navigate Away","text":"<p>One of our users had a webpage with a form. When it was submitted partially filled, the page came back (after being processed on the backend) with some errors about incomplete form. If the user tried to navigate away from this page via a link (or close the page/browser tab) he was prompted with browser's standard \"Are you sure you want to leave this page?\" dialog. He needed a way for Rapise to handle this popup when recording and playing back the web test.</p>"},{"location":"Manuals/kb/#kb231-adobe-flash-flex-air-support-in-rapise","title":"KB231 Adobe Flash / Flex / AIR Support in Rapise","text":"<p>Rapise 4.0 supports the testing of Adobe AIR Flex applications using the Adobe Integrated Runtime (AIR). Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.Rapise 4.0 supports the testing of Adobe Flex applications that are executed by the Adobe Flash Player inside the Internet Explorer, Mozilla Firefox or Google Chrome web browsers. Rapise can test applications using a wide variety of different Flex controls and supports testing both Flex 3 and Flex 4 applications.[We have depreciated support for testing Adobe Flex/Flash applications in Rapise 5.0 and later, so this article is provided for use by existing customers]</p>"},{"location":"Manuals/kb/#kb230-unusual-case-where-rapise-cannot-click-on-hyperlinks-in-ie","title":"KB230 Unusual case where Rapise Cannot Click on Hyperlinks in IE","text":"<p>We have found an occasional situation where Rapise is not able to click on hyperlinks ( tags) when you playback a test on IE. The same test works fine on other computers and on other browsers on the same computer."},{"location":"Manuals/kb/#kb228-web-object-not-found-in-ie-when-object-has-0px-size","title":"KB228 Web Object Not Found in IE when Object has 0px Size","text":"<p>We had a customer with a problem related to having  elements with complex display styles applied inside an HTML anchor tag . The anchor tag was reporting back as having zero size (0px) in IE, so when Rapise tried to locate it to click on it, the browser was not able to find it."},{"location":"Manuals/kb/#kb227-executing-a-windows-bat-batch-file-from-rapise","title":"KB227 Executing a Windows .BAT Batch File from Rapise","text":"<p>Sometimes you need to run a\u00a0 Windows batch file (.BAT) from Rapise. Unlike an executable, you cannot simply use Global.DoLaunch() to execute it since it's not actually an application. This article provides the code you need to use.</p>"},{"location":"Manuals/kb/#kb224-testing-popup-windows-using-internet-explorer","title":"KB224 Testing Popup Windows using Internet Explorer","text":"<p>When you are testing a web application that has popup windows (where the popup is a whole new browser window) you will need to make a slight change to the test script to enable it to playback successfully in Internet Explorer (no change is needed for Chrome or Firefox).</p>"},{"location":"Manuals/kb/#kb223-troubleshooting-java-swingawt-testing","title":"KB223 Troubleshooting Java Swing/AWT Testing","text":"<p>When you are testing a Java application using either Swing or AWT you may run into some issues due to the environment. This article collects some of these common cases and provides the recommended solutions.</p>"},{"location":"Manuals/kb/#kb221-where-do-i-get-the-microsoft-script-debugger","title":"KB221 Where do I get the Microsoft Script Debugger","text":"<p>When you install Rapise onto a computer that does not have Visual Studio or the Microsoft Script Debugger installed you will get a message to install the debugger. This article provides the download link to the necessary debugger.</p>"},{"location":"Manuals/kb/#kb218-testing-adobe-air-applications-on-mobile-devices","title":"KB218 Testing Adobe AIR Applications on Mobile Devices","text":"<p>We have had a couple of questions about whether Rapise can test Adobe AIR based applications running on mobile devices using platforms such as Android. This article provides some background and also describes the support Rapise has. [We have depreciated support for testing Adobe Flex/Flash applications in Rapise 5.0 and later, so this article is provided for use by existing customers]</p>"},{"location":"Manuals/kb/#kb219-what-to-do-when-rapise-doesnt-display-the-web-page-dom","title":"KB219 What to do When Rapise Doesn't Display the Web Page DOM?","text":"<p>Sometimes when testing certain web applications instead of the browser DOM tree appearing you will see strange results such as \"Node0\" appearing. This is caused by the application using nested frames with potentially different security origins. This article describes some of the common issues and describes the solution.</p>"},{"location":"Manuals/kb/#kb217-rapise-cannot-find-alllibrariesjson-file-during-recordingplayback","title":"KB217 Rapise - Cannot Find AllLibraries.json file during Recording/Playback","text":"<p>When recording or playing back a test script on a new PC you may get an error message that Rapise cannot find the path to \"AllLibraries.json\".This article provides instructions on how to fix the issue.</p>"},{"location":"Manuals/kb/#kb216-testing-multiple-web-browser-tabs-at-once-in-chrome","title":"KB216 Testing Multiple Web Browser Tabs at Once in Chrome","text":"<p>Sometimes you have a web test where you need to test the contents of two browser tabs at the same time in Google Chrome. For example you may have an application which opens up a second browser tab and you want to test that changes in the second tab show up correctly in the first tab. This article describes how to perform this kind of testing.</p>"},{"location":"Manuals/kb/#kb215-fixing-the-method-not-found-error-when-using-appium-for-mobile-testing-in-rapise","title":"KB215 Fixing the 'Method Not Found' error when using Appium for Mobile Testing in Rapise","text":"<p>If you receive the following error message when performing Mobile device testing with Rapise, this article provides the necessary solution:Method not found:'OpenQA.Selenium.RemoteCommandInfoRepositoryOpenQA.Selenium.RemoteCommandInfoRepository.get_Instance()'. Note: related to\u00a0Appium DLL version\u00a0\u00a01.3.0.1\u00a0and\u00a0 Selenium WebDriver v2.48.0.</p>"},{"location":"Manuals/kb/#kb209-testing-web-applications-that-use-svg","title":"KB209 Testing Web Applications that use SVG","text":"<p>One of the more challenging types of web application is that with uses of embedded SVG (Scalable Vector Graphics) in additional to HTML DOM elements. This article describes how to use Rapise to write automated testing scripts for such applications.</p>"},{"location":"Manuals/kb/#kb205-rapise-3x-40-does-not-connect-to-chrome-x64-bit","title":"KB205 Rapise 3.x / 4.0 Does not Connect to Chrome x64 Bit","text":"<p>When you try and connect to the 64-bit version of the Google Chrome web browser using Rapise 4.0 (or earlier) you may get the error 'Connection to Chrome Failed!'. This issue has been fixed in the Rapise 4.1 release, but for those customers using Rapise 4.0 or earlier, this article provides two solutions.</p>"},{"location":"Manuals/kb/#kb204-working-with-wpf-and-uiautomation-structures","title":"KB204 Working with WPF and UIAutomation Structures","text":"<p>It is a common situation that desktop applications written using Microsoft Windows Presentation Framework (WPF) will have complex layouts including tabs, splitters and panels having custom grids and tables inside. This article provides help in dealing with such situations, including how to dynamically find items.</p>"},{"location":"Manuals/kb/#kb202-reading-the-details-of-files-on-the-windows-file-system","title":"KB202 Reading the Details of Files on the Windows File System","text":"<p>In the KB62 article - Accessing Files using Rapise we explain how to access the names, versions and locations of files on the Windows file system. One customer asked - can we verify any file details other than version. This article provides sample code for accessing other information. Note: if you have Rapise 5.5+ then you may simply use File.Info action.</p>"},{"location":"Manuals/kb/#kb203-accessing-the-windows-registry-using-rapise","title":"KB203 Accessing the Windows Registry using Rapise","text":"<p>Sometimes when testing local/desktop applications you need to access the Windows registry to verify that keys exist or that keys have specific values. For example you may be testing that a DLL was successfully registered. This article provides information on the 'UsingRegistry' sample that comes with Rapise.</p>"},{"location":"Manuals/kb/#kb201-error-attaching-to-excel-spreadsheet-when-using-rapise-40-with-ms-excel-64-bit","title":"KB201 Error attaching to Excel spreadsheet when using Rapise 4.0 with MS-Excel 64-bit","text":"<p>When you are using the global Rapise Spreadsheet object on a system running the 64-bit version of MS-Office, you may get an error attaching to the spreadsheet. This article describes the cause of the issue and provides a solution and workaround.</p>"},{"location":"Manuals/kb/#kb200-testing-ms-word-with-rapise","title":"KB200 Testing MS-Word With Rapise","text":"<p>We had some customers that were looking to record some tests against Microsoft Word 2010. When testing against MS-Word 2010 there are actually two parts to the application: There is the application ribbon (the menus, navigation, etc.) There is the MS-Word text window where your content is actually displayed This article provides some strategies for dealing with both areas.</p>"},{"location":"Manuals/kb/#kb194-when-recording-with-chrome-rapise-does-not-record-actions-within-frames","title":"KB194 When recording with Chrome, Rapise does not record actions within frames","text":"<p>When creating web tests with Chrome, objects within cross-frames are not recognized by the Rapise Web Spy and recorder. This article gives a solution.</p>"},{"location":"Manuals/kb/#kb193-using-rapise-to-test-websites-that-contain-frames","title":"KB193 Using Rapise to test websites that contain frames","text":"<p>If the website under test contains frames, that presents some challenges to test automation. This article gives tips for success and explains the current limitations. This article is obsolete. Please use Selenium-based profiles for Web testing. Read about Rapise XPath extensions here.</p>"},{"location":"Manuals/kb/#kb192-different-xpath-options-in-rapise-40","title":"KB192 Different XPath Options in Rapise 4.0","text":"<p>When testing complex data-driven web applications using Rapise, it is helpful to understand the different ways that Rapise can automatically learn the objects. Rapise can learn an object using either XPATH or CSS. In the case of XPATH there are several strategies that Rapise can use to make the testing more robust. This article describes these strategies and provides some suggestions about which one is the best to use for different scenarios.</p>"},{"location":"Manuals/kb/#kb191-webspy-attribute-filtering","title":"KB191 WebSpy Attribute Filtering","text":"<p>The v4.0 release of Rapise adds enhanced attribute filtering to the Web Spy as well as different options for creating XPath queries automatically. This article explains why you would want to use these features and how they can make the testing of complex data-driven web applications much easier.</p>"},{"location":"Manuals/kb/#kb185-using-globaldoloadobjects-to-use-rapise-objects-from-external-file","title":"KB185 Using Global.DoLoadObjects to Use Rapise Objects from External File","text":"<p>One of the challenges using an automated testing tool is to organize things in a way that it is logical enough to find something quickly, structured enough to avoid duplication and simple enough to maintain and upgrade. This statement is also true for Rapise objects. A common requirement is to deal with the same objects within a flow of different test cases. For instance, if an application has \u201cLog In\u201d functionality then many, many tests will require logging-in and logging-out. Each test will have this object in its own object tree. However this causes trouble if a change in the application affects the recognition of the Log In object. All of the test cases will need to be updated. In such situations it is much more convenient to have the \u201cLog In\u201d objects placed into their own file and re-used by other tests. This article is obsolete. In Rapise 8.0 and above the recommended approach is to use Page Objects / Modules.</p>"},{"location":"Manuals/kb/#kb186-globaldowaitfor-vs-globaldowaitforproperty","title":"KB186 Global.DoWaitFor vs Global.DoWaitForProperty","text":"<p>The most commonly used synchronization option to make Rapise wait until the application under test (AUT) is ready is the Global.DoSleep action. However having just a sleep may cause an unnecessary delay because we have to consider the maximum wait interval and it may be much less on average. Rapise includes some additional synchronization options for more fine grained control of the test case flow.</p>"},{"location":"Manuals/kb/#kb187-using-checkobjectexistsxpathorobjid-to-see-if-web-object-exists-on-page","title":"KB187 Using CheckObjectExists(xpathOrObjId) to See if Web Object Exists on Page","text":"<p>This articles describes how you can use the Navigator.CheckObjectExists(...) action to see if an element exists on a web page and how it differs from the Global.DoWaitFor / DoWaitForProperty actions that are described in another article.</p>"},{"location":"Manuals/kb/#kb184-what-is-the-purpose-of-the-testerendtest-function","title":"KB184 What is the purpose of the Tester.EndTest() Function?","text":"<p>The Tester.EndTest() function in Rapise is described as: Marks end of a currently executed test. Calculates test results and performs finalization of test execution. We have found that some of our customers have been confused as what the purpose of this function is.</p>"},{"location":"Manuals/kb/#kb183-desktop-application-testing-choosing-the-right-library","title":"KB183 Desktop Application Testing - Choosing the Right Library","text":"<p>Suppose we have a situation that a thick-client (desktop) application under test (AUT) is based on a technology that is too old or not completely supported by Rapise. Rapise has a number of libraries for different types of apps. Usually Rapise finds the correct libraries using its auto-detection, but sometimes an application is unusual and the auto-detection fails.</p>"},{"location":"Manuals/kb/#kb182-how-to-automate-the-testing-of-tinymce-rich-text-boxes-using-rapise","title":"KB182 How to automate the testing of TinyMCE Rich Text Boxes using Rapise","text":"<p>DEPRECATED Method described in this article does not work any more because browser security has changed since 2015. Now it is not possible to directly access client side JavaScript model. We have a new article that explains how to automate TinyMCE https://www.inflectra.com/Support/KnowledgeBase/KB541.aspx When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. When you are using the popular TinyMCE rich text box you have more options to automate it by using its special client-side JavaScript API.</p>"},{"location":"Manuals/kb/#kb181-dynamically-constructing-the-rest-file-urls-to-test-rest-apis","title":"KB181 Dynamically constructing the .rest file URLs to test REST APIs","text":"<p>Sometimes when using Rapise to test REST web services, you want to be able to dynamically change the base URL of the web service yet still use the same URL template and method information. This article describes a process for achieving this.</p>"},{"location":"Manuals/kb/#kb177-web-testing-dynamically-switching-the-browser-in-the-same-test","title":"KB177 Web testing - Dynamically Switching the Browser in the Same Test","text":"<p>Sometimes you have a test that you want to run on Chrome, Firefox, and IE in the same script. Normally you write a browser-agnostic test and then have SpiraTest simply call Rapise with different browser names as a parameter and then you have the same test executed multiple times. However suppose you want to have a single test that by itself can run on all the necessary browsers. This article addresses this case.</p>"},{"location":"Manuals/kb/#kb176-measuring-browser-performance-with-rapise","title":"KB176 Measuring browser performance with Rapise","text":"<p>How do you get the exact time that Rapise takes to load a page? Now, the reports summary shows the overall execution time but if you have pause times between steps then these times are added to the total time of that a page took to display. Customers have asked if Rapise has some kind of function that will allow them to see only the transaction time between pages without the pause times. Does Rapise have something like that? This article provides a solution to these cases.</p>"},{"location":"Manuals/kb/#kb175-using-rapise-to-populate-data-in-an-excel-spreadsheet","title":"KB175 Using Rapise to populate data in an Excel Spreadsheet","text":"<p>The built-in Spreadsheet object in Rapise makes it easy to read data from an MS-Excel spreadsheet. What happens if you want to write data back to the Excel sheet?</p>"},{"location":"Manuals/kb/#kb172-dynamically-changing-object-locators-for-web-applications","title":"KB172 Dynamically changing object locators for Web applications","text":"<p>Sometimes you want to dynamically change the XPATH or CSS used in a specific object from within the test script itself. This article explains the process for doing this.</p>"},{"location":"Manuals/kb/#kb168-customizing-the-rapise-reports","title":"KB168 Customizing the Rapise Reports","text":"<p>By default, the reports displayed within Rapise report back each test activity and assert statement as a line in the report with all of the activities and events being displayed in a single flat list regardless of whether they happen inside the main Test() function or a sub-function. This articles explains how you can extend the reporting.</p>"},{"location":"Manuals/kb/#kb166-using-rapise-31-to-test-a-web-page-with-a-multi-select-list","title":"KB166 Using Rapise 3.1 to test a web page with a multi-select list","text":"<p>When you have a multi-select list in a web application, you may need to check which items are selected, or to check whether or not a particular item is selected. This article illustrates how to do that.</p>"},{"location":"Manuals/kb/#kb164-calling-rapise-dox-functions-without-reporting-result","title":"KB164 Calling Rapise DoX functions without reporting result","text":"<p>When\u00a0you use a DoX command in Rapise to perform a specific\u00a0command (e.g.\u00a0DoDOMChildrenCount() to get a number of object's DOM children), in the report an extra step -- assert -- is created during test execution. Sometimes you want to be able to call a function 'quietly' without it affecting the report.</p>"},{"location":"Manuals/kb/#kb163-accessing-the-computed-style-properties-of-an-html-dom-object","title":"KB163 Accessing the Computed Style Properties of an HTML DOM Object","text":"<p>A common question from our users is, is\u00a0there a way to get object's style properties that are in effect at a certain point in time. (for example, it could have been inherited from higher level of hierarchy, or modified via JavaScript running on the page)? This article describes how to do this.</p>"},{"location":"Manuals/kb/#kb161-certain-hyperlinks-wont-click-during-playback-with-internet-explorer-ie","title":"KB161 Certain Hyperlinks won't click during playback with Internet Explorer (IE)","text":"<p>Sometimes when you record a test script using IE and then play it back, some of the clicks on hyperlinks will not playback correctly. Rapise will list them as Passed, but the click won't actually be performed.</p>"},{"location":"Manuals/kb/#kb160-rapise-cannot-connect-to-firefox-immediately-after-firefox-updates","title":"KB160 Rapise cannot connect to Firefox immediately after Firefox updates","text":"<p>If you try and connect to Firefox with Rapise immediately after Firefox has updated, you may see the following error message: Microsoft JScript runtime error: 'Navigator.GetBrowserHWND()' is null or not an object</p>"},{"location":"Manuals/kb/#kb159-fixing-unable-to-cast-object-of-type-systemdbnull-to-type-systemstring-errors-in-spira-v4x","title":"KB159 Fixing 'Unable to cast object of type 'System.DBNull' to type 'System.String'' errors in Spira v4.x","text":"<p>Sometimes when you are saving Rapise test scripts into some early versions of Spira v4.2.x.x (e.g. Spira v4.2.0.1 - v4.2.0.5) you can start getting these errors on the Test Case details page. You may also get the error for other reasons in earlier versions of Spira v4.x.</p>"},{"location":"Manuals/kb/#kb158-accessing-the-spira-v42-rest-api-to-get-test-cases-in-a-release","title":"KB158 Accessing the Spira v4.2 REST API to get test cases in a release","text":"<p>This article describes the process and provides an example for accessing the Spira v4.2 REST API to get a filtered list of test cases in a release.</p>"},{"location":"Manuals/kb/#kb146-how-to-use-sub-tests-and-common-objects-with-rest-web-service-tests","title":"KB146 How to Use Sub-Tests and Common Objects with REST Web Service Tests","text":"<p>It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. However due to the way REST web service tests are stored, there are some slight changes needed to handle REST services. This articles describes the process. Note: if you have Rapise 8.0+ there is a simpler way,\u00a0just create a module for REST service calls.</p>"},{"location":"Manuals/kb/#kb143-rapise-wont-record-steps-or-display-reports","title":"KB143 Rapise Won't Record Steps or Display Reports","text":"<p>If you are running Rapise and you suddenly start to find that none of your recordings get saved and the reports are not displaying during execution it may be due to the fact that you have saved your Rapise test folder onto a Network Share.</p>"},{"location":"Manuals/kb/#kb142-scripts-created-with-rapise-21-or-earlier-no-longer-playing-back-correctly-in-rapise-22-or-later","title":"KB142 Scripts created with Rapise 2.1 or earlier no longer playing back correctly in Rapise 2.2 or later","text":"<p>In Rapise 2.2, \"DoClick\" behavior was changed, so we don't do a click but rather just position the mouse over the control and do API-level \"click\" event. However we provided a way to enable backward compatibility. This article is obsolete.</p>"},{"location":"Manuals/kb/#kb141-testing-silverlight-applications","title":"KB141 Testing Silverlight Applications","text":"<p>When testing Silverlight applications, you may find that Rapise fails\u00a0to recognize\u00a0the objects in\u00a0the Silverlight app using the UIAutomation library. When\u00a0using the Rapise\u00a0Spy Tool, the\u00a0\u00a0whole app is identified as a single window. The objects\u00a0such as a\u00a0dropdown, buttons etc. inside\u00a0the silverlight app\u00a0are not individually recognized.</p>"},{"location":"Manuals/kb/#kb544-how-to-use-rapise-cloud-on-aws","title":"KB544 How to Use Rapise Cloud on AWS","text":"<p>With our Rapise cloud edition, you can take your automated software testing to the cloud. With Rapise cloud edition you can start testing immediately, no hardware or test lab needed, just sign up for Amazon Web Services (AWS) and rent our Rapise cloud AMIs on-demand, with no minimum usage and no annoying monthly or annual fees, just pay for what you use.</p>"},{"location":"Manuals/kb/#kb139-disabling-the-generation-of-comments-during-recording","title":"KB139 Disabling the generation of comments during Recording","text":"<p>By default Rapise records user actions with a line commented out for each action. This articles describes how you can disable this behavior if you just want the script lines recorded on their own.</p>"},{"location":"Manuals/kb/#kb138-my-actions-are-not-recorded","title":"KB138 My Actions are Not Recorded","text":"<p>By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal (often several lower-level user actions are combined)Rapise uses a heuristics to distinguish meaningful activity from low level actions. In some cases this leads to a result that some user activity is not automatically recorded (for example, a mouse click before entering\u00a0 text in a box). There is a broad range of available UI platforms and libraries. The variety of graphical widgets makes user interface robust and beautiful. Rapise tries to recognize as much objects as possible. However this range is growing and there are always widgets that are not being recorded.</p>"},{"location":"Manuals/kb/#kb137-anti-virus-software-and-test-automation","title":"KB137 Anti-Virus Software and Test Automation","text":"<p>Anti-virus software is very sensitive to test automation tools. This is normal, because test automation tools usually do API, keyboard and mouse hooking to be able to record and playback user actions.</p>"},{"location":"Manuals/kb/#kb136-how-are-global-functions-stored-and-recalled","title":"KB136 How are Global Functions stored and recalled?","text":"<p>Q: We need to call many common functions from a common library frequently.</p>"},{"location":"Manuals/kb/#kb134-why-is-my-flex-application-recorded-as-mouse-clicks","title":"KB134 Why is My Flex application recorded as mouse clicks?","text":"<p>A Flex application requires some instrumentation to be ready for testing. By default Flash player has security restrictions preventing Rapise from accessing the application contents. Please, check the this help topic to learn more about Adobe Flex testing. This article is obsolete. Flex support was removed from Rapise.</p>"},{"location":"Manuals/kb/#kb133-the-recorder-asks-for-a-library-which-should-i-choose","title":"KB133 The Recorder asks for a Library. Which should I choose?","text":"<p>In most cases Auto is the best choice. Manual selection of libraries may be needed in more advanced scenarios and is intended for experienced users.</p>"},{"location":"Manuals/kb/#kb132-does-rapise-work-with-windows-uac","title":"KB132 Does Rapise work with Windows UAC?","text":"<p>If you are using Rapise on Windows Vista or Windows 7 it is not necessary to disable the Windows User Account Control (UAC) to use Rapise. Unlike some other automated testing tools on market, you can use Rapise with UAC enabled.</p>"},{"location":"Manuals/kb/#kb131-executing-under-a-vm-or-remote-desktop","title":"KB131 Executing Under a VM or Remote Desktop","text":"<p>Sometimes you need to test an application running on a VM or remote computer using Remote Desktop (RDP) rather than a physical terminal. This guide explains how to ensure that Rapise is able to correctly fire events on the application under test.</p>"},{"location":"Manuals/kb/#kb130-waiting-until-application-ready","title":"KB130 Waiting Until Application Ready","text":"<p>Sometimes you need to synchronize the test script so that it waits for a specific application event (change for status message or wait for some specific value). This guide explains how to ensure that Rapise waits for the appropriate condition.</p>"},{"location":"Manuals/kb/#kb124-reading-an-objects-state","title":"KB124 Reading an Object's State","text":"<p>Sometimes it is necessary to examine the state of an object. For example, determine if Toggle Button is pressed or not, Radio/Check Button is checked or not, etc. This guide describes a couple of different ways of achieving this.</p>"},{"location":"Manuals/kb/#kb123-about-highlighting-flash-command-rectangles","title":"KB123 About Highlighting (Flash Command) Rectangles","text":"<p>Rapise has a choice of visual effects it can use when highlighting a control being learned during the recording process. This guide describes the different modes.</p>"},{"location":"Manuals/kb/#kb121-choosing-object-type-manually","title":"KB121 Choosing Object Type Manually","text":"<p>Sometimes Rapise will incorrectly recognize a GUI component. This guide outlines how you can manually change the object type captured during recording.</p>"},{"location":"Manuals/kb/#kb120-capture-screenshots-during-playback","title":"KB120 Capture Screenshots During Playback","text":"<p>When playing back a test it is useful to be able to capture the screen as its current state so that the cause of any test failures can be more easily deduced.</p>"},{"location":"Manuals/kb/#kb119-working-with-right-click-context-menus","title":"KB119 Working with Right-Click Context Menus","text":"<p>The context menu control is not natively supported by Rapise, but one can use a simple workaround.</p>"},{"location":"Manuals/kb/#kb118-working-with-selectable-lists","title":"KB118 Working with Selectable Lists","text":"<p>The behavior of list and combobox controls in GUI applications sometimes require additional attention. This guide explains the different types of combobox controls and best practices for testing them in Rapise.</p>"},{"location":"Manuals/kb/#kb115-recording-web-menus","title":"KB115 Recording Web Menus","text":"<p>Many web sites have dynamic site menus. This guide outlines the best practices for recording events associated with such dynamic site menus.</p>"},{"location":"Manuals/kb/#kb114-my-actions-are-not-recorded","title":"KB114 My Actions are Not Recorded","text":"<p>By design Rapise tries to record user activity on the highest possible level. This makes recorded actions more readable and universal. However that sometimes means that certain actions that a user performs won't be automatically picked up. This guide explains ways to handle situations when a specific user activity is not recorded.</p>"},{"location":"Manuals/kb/#kb113-recording-mouse-activity","title":"KB113 Recording Mouse Activity","text":"<p>This guide describes the different types of mouse events and how they are recorded in Rapise.</p>"},{"location":"Manuals/kb/#kb112-re-using-test-logic","title":"KB112 Re-Using Test Logic","text":"<p>It is common for test scenarios to share similar pieces of functionality. A good example of such sharing is login logic. This guide outlines ways in which you can share such logic to avoid having repeated code in your tests. This article is obsolete. To find out about re-using test parts, modules and page objects please refer to Rapise 8.0: how to use Page Objects/Modules.</p>"},{"location":"Manuals/kb/#kb116-working-with-html-xpath","title":"KB116 Working with HTML XPath","text":"<p>When testing web applications you will often need to use XPath to query the browser DOM for elements based on the scenario under test. This guide explains how you can use XPath queries with Rapise to make your browser testing more flexible and adaptive to changes on the screen.</p>"},{"location":"Manuals/kb/#kb117-working-with-html-tables-containing-dynamic-data","title":"KB117 Working with HTML Tables containing Dynamic Data","text":"<p>Many web sites use HTML tables to display lists of tabular data. When testing such applications you will often need to dynamically search for items in the table to verify that the application under test performed correctly. This guide outlines best practices for accessing data held in HTML tables. This article is obsolete. For dealing with dynamic table data please refer to How to define and use a dynamic Web locator article.</p>"},{"location":"Manuals/kb/#kb122-change-object-value-or-text","title":"KB122 Change Object Value or Text","text":"<p>This guide describes the different ways that you can change the value of text label of an object.</p>"},{"location":"Manuals/kb/#kb125-analog-recording","title":"KB125 Analog Recording","text":"<p>Sometimes the application under test doesn't contain any learnable objects. In that case you may need to use the fallback of Analog Recording. This guide describes how you perform analog recording.</p>"},{"location":"Manuals/kb/#kb126-simulated-objects","title":"KB126 Simulated Objects","text":"<p>This guide describes what simulated objects are and when they should be used.</p>"},{"location":"Manuals/kb/#kb127-passing-test-parameters","title":"KB127 Passing Test Parameters","text":"<p>There are many different ways of passing test parameters to Rapise from an external system. This guide describes the different ways of passing parameter values to Rapise.</p>"},{"location":"Manuals/kb/#kb128-creating-a-set-of-tests-to-run-in-rapise","title":"KB128 Creating a Set of Tests to Run in Rapise","text":"<p>This guide describes how you manage groups of Rapise tests together in situations where you are not\u00a0 using SpiraTest test sets.</p>"},{"location":"Manuals/kb/#kb129-using-dynamic-linked-library-dlls-in-test-scripts","title":"KB129 Using Dynamic Linked Library (DLLs) in Test Scripts","text":"<p>Sometimes you need to call code libraries from your Rapise tests, for example when the built-in JavaScript scripting engine does not provide the necessary functionality. This guide explains how to call an external DLL from your Rapise test script.</p>"},{"location":"Manuals/kb/#kb135-how-does-rapise-detect-if-a-dialog-is-already-open","title":"KB135 How does Rapise detect if a dialog is already open?","text":"<p>There are several ways to find if something is already on the screen, this article explains some of the options.</p>"},{"location":"Manuals/kb/#kb111-analog-testing-when-the-machine-does-not-have-the-break-key","title":"KB111 Analog Testing when the Machine does not have the Break Key","text":"<p>When using Rapise for analog testing you need to use the key sequence CTRL+BREAK to start and stop the analog recorder. However some machines (particularly smaller laptops) do not have a BREAK or PAUSE (often the same function as BREAK) key. This article describes some solutions</p>"},{"location":"Manuals/kb/#kb109-using-dodomchildrencount-and-dodomqueryxpath-to-inspect-child-html-elements","title":"KB109 Using DoDOMChildrenCount and DoDOMQueryXPath to inspect child HTML elements","text":"<p>Often you want to be able to query for the child elements on a web page that are dynamically created and therefore not good candidates for LEARNing individually. This article explains how you can use the dynamic XPATH methods of Rapise to accomplish this task.</p>"},{"location":"Manuals/kb/#kb105-after-installing-windows-update-kb3025390-rapise-no-longer-connects-to-ie","title":"KB105 After installing Windows Update KB3025390 Rapise No Longer Connects to IE","text":"<p>An old (December 9<sup>th</sup>, 2014) security update for Microsoft Windows and Internet Explorer (KB3025390)\u00a0 broke the support in IE for 'out-of-process' code execution. This effectively prevented an automated testing application such as Rapise\u00a0from automating Internet Explorer (IE) applications. This was subsequently fixed by Microsoft on February 10<sup>th</sup>, 2015 with the KB 3021952 update.</p>"},{"location":"Manuals/kb/#kb102-how-to-get-rapise-trace-logging-information","title":"KB102 How to Get Rapise Trace Logging Information","text":"<p>When using Rapise, it is often useful to see how Rapise is identifying objects in the Application Under Test (AUT) and if necessary find out why Rapise is not able to locate a specific object. This article outlines how to increase the logging level in Rapise. This article is obsolete. There is no ribbon in Rapise since version 6. If you have Rapise 6.0+ then follow these steps to change the verbose level.</p>"},{"location":"Manuals/kb/#kb101-automating-html-file-upload-boxes","title":"KB101 Automating HTML File Upload Boxes","text":"<p>Sometimes you have to automate the uploading of files using an HTML file upload control. This article\u00a0explains how to record and playback such a script.</p>"},{"location":"Manuals/kb/#kb98-code-completion-of-native-javascript-objects","title":"KB98 Code Completion of Native JavaScript Objects","text":"<p>Rapise has built-in code completion logic that lets it suggest the available list of functions for a specific object. However\u00a0since JavaScript is fundamentally an un-typed language, for the\u00a0code completion to work, there are some tips and tricks that you can use.</p>"},{"location":"Manuals/kb/#kb97-recording-popup-javascript-confirmation-boxes","title":"KB97 Recording Popup JavaScript Confirmation Boxes","text":"<p>When you are recording a test against a Web application you may have to deal with a popup JavaScript confirm or alert box. This article describes the process for dealing with them.</p>"},{"location":"Manuals/kb/#kb96-how-to-automate-the-testing-of-rich-text-boxes-using-rapise","title":"KB96 How to automate the testing of Rich Text Boxes using Rapise","text":"<p>When you have a rich text box in a web application, the process for recording a test and playing it back will be different to a standard HTML plain text box. This is because the browser actually uses a separate IFRAME and HTML document for the editable rich text box. This article explains the process for recording/playing back such a\u00a0test.</p>"},{"location":"Manuals/kb/#kb89-adding-support-for-custom-flex-controls","title":"KB89 Adding Support for Custom Flex Controls","text":"<p>By default the Rapise\u00a0Flex library supports a wide variety of\u00a0Flex controls which will be capable of testing the majority of application. However sometimes\u00a0there will be an\u00a0unknown objects which will be learnt as a generic object with FlexObject flavor. The article describes support for such custom Flex controls. This article is obsolete. Flex support was removed from Rapise since Flex is dead already for a long time.</p>"},{"location":"Manuals/kb/#kb87-using-rapise-to-validate-display-of-data-grid-data","title":"KB87 Using Rapise to Validate Display of Data Grid Data","text":"<p>One common requirement is to run a query in\u00a0an application being tested and verify that the data on the screen matches the data in the application. This article explains the recommended process for doing this.</p>"},{"location":"Manuals/kb/#kb86-choosing-the-web-browser-in-rapise-from-spiratest-spirateam","title":"KB86 Choosing the Web Browser in Rapise from SpiraTest / SpiraTeam","text":"<p>When writing a\u00a0web test in Rapise you will often want to run the same test script in all three web browsers (IE, Firefox and Chrome). You will want to be able to choose the Test Script from within Rapise when debugging the test and then from a Test Set in SpiraTest when you move the test into production. This article explains the process. This article is obsolete. For modern way of running Rapise tests in multiple browsers please refer to Rapise 8.0: how to run test cases on different browsers.</p>"},{"location":"Manuals/kb/#kb85-sending-special-keys-to-the-current-application","title":"KB85 Sending Special Keys to the Current Application","text":"<p>You can use the Global.DoSendKeys('...'); command in Rapise to send keypresses to the current application. Sometimes you will want to send special control keys to the application (e.g. Page Down, or CTRL + Key). This article explains the way to do this.</p>"},{"location":"Manuals/kb/#kb83-turning-off-chrome-and-firefox-auto-updating","title":"KB83 Turning off Chrome and Firefox Auto-Updating","text":"<p>When you are testing a web application against different environments, it can be useful disable to default browser auto-updating policies so that you have a stable testing environment. This articles describes how to disable the auto-updating policies of Google Chrome and Firefox.</p>"},{"location":"Manuals/kb/#kb79-a-dll-required-for-this-install-to-complete-could-not-be-run","title":"KB79 A DLL required for this install to complete could not be run","text":"<p>If you run one of our installation packages (.msi) and receive the following message: A DLL required for this install to complete could not be run</p>"},{"location":"Manuals/kb/#kb78-enabling-windows-installer-msi-trace-logging","title":"KB78 Enabling Windows Installer (.msi) Trace Logging","text":"<p>Sometimes when installing our products you get error messages during the installation and it's necessary to provide Inflectra support personnel with detailed trace/logging information so that they can better support you. This article describes the steps necessary to enable Windows Installer (.msi) trace logging.</p>"},{"location":"Manuals/kb/#kb77-how-to-resolve-wscriptcreateobject-could-not-connect-object-errors","title":"KB77 How to resolve WScript.CreateObject: Could not connect object errors","text":"<p>Sometimes when you\u00a0install Rapise on a computer that had a previous version of Rapise installed, when you try to record and/or playback a test you get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Player.js WScript.CreateObject: Could not connect object. This article describes the steps to correct the error.</p>"},{"location":"Manuals/kb/#kb68-accessing-clipboard-in-rapise","title":"KB68 Accessing Clipboard in Rapise","text":"<p>Sometimes when automating a test, you need to access the local Windows clipboard. This article describes how to access the Windows clipboard programmatically.</p>"},{"location":"Manuals/kb/#kb65-testing-win32-applications-to-verify-that-controls-change-display-state","title":"KB65 Testing Win32 applications to verify that controls change display state","text":"<p>Sometimes you may have a button (or other control) that \u00a0can\u00a0have a different appearance\u00a0depending on the\u00a0different focus statuses.For example, the default status without focus is a grey image, whereas when the mouse hovering over it becomes blue.\u00a0Then when the mouse left button is held down\u00a0on the button (and not released), the\u00a0image changes to a red image.Finally, when the button is activated using the tab key to tab into the button and the mouse is somewhere else, it has a fourth color. This article discusses solutions for how to test these kinds of situation\u044e</p>"},{"location":"Manuals/kb/#kb64-using-navigatorexecjs-to-execute-javascript-code-inside-a-browser","title":"KB64 Using Navigator.ExecJS to execute JavaScript code inside a browser","text":"<p>Sometimes you need to execute JavaScript code at a browser side and get the result. You can do this with Navigator.ExecJS.</p>"},{"location":"Manuals/kb/#kb63-getting-the-state-of-a-win32-object-using-rapise","title":"KB63 Getting the State of a Win32 object using Rapise","text":"<p>Sometimes you need to be able to test the state of a specific Win32 object in Rapise to see if it is enabled, disabled,\u00a0is activated, etc. This sample illustrates how to get the numeric and textual value of the object's state.</p>"},{"location":"Manuals/kb/#kb62-accessing-files-and-io-functions-using-rapise","title":"KB62 Accessing Files and I/O functions using Rapise","text":"<p>Sometimes using Rapise you need to access files on the Windows filesystem, either for testing purposes, or to object test data stored in a flat CSV, TSV or text file. This sample illustrates how you can access the File System using Rapise and the Windows FileSystemObject (http://msdn.microsoft.com/en-us/library/aa242706(v=vs.60).aspx). Alternatively you may also use File global object.</p>"},{"location":"Manuals/kb/#kb59-using-simulated-objects","title":"KB59 Using Simulated Objects","text":"<p>Simulated objects are found by looking at the parameters of the object (x number of pixels from the top of the window, y number of pixels from the left of the window, etc).\u00a0 One common question that has arisen is - during playback, does\u00a0Rapise take into account screen resolution?\u00a0 If the resolution on the computer you run it on is different from the one it records on the location of the object will change relative to the number of pixels.\u00a0 So on the computer you record it on the top parameter might be 200 but on a different resolution it might be 180.\u00a0 Would Rapise recognize that the resolution is different and adjust for that?</p>"},{"location":"Manuals/kb/#kb58-javascript-js-not-associated-with-windows-scripting-host","title":"KB58 Javascript .js not associated with Windows Scripting Host","text":"<p>Sometimes if you have installed a program that associates itself with the .js file extension, you will see the following error when you try and record/play a Rapise test: Microsoft (R) Windows Script Host Version 5.8 Copyright (C) Microsoft Corporation. All rights reserved. Input Error: There is no script engine for file extension \".js\".</p>"},{"location":"Manuals/kb/#kb57-accessing-child-objects-in-a-java-awtswing-application","title":"KB57 Accessing Child Objects in a Java AWT/Swing application","text":"<p>This article describes how to access child objects of a Learned Java AWT/Swing object when using the Rapise Java library. Sometimes when you Learn a top-level object, you want to be able to\u00a0programmatically query the object to locate the child objects that are visible in the Java Spy.</p>"},{"location":"Manuals/kb/#kb56-accessing-child-components-of-a-wpf-silverlight-listbox","title":"KB56 Accessing child components of a WPF / Silverlight ListBox","text":"<p>When you have a\u00a0WPF or Silverlight application that has a\u00a0list box (or other control that supports templates such as a Tree) that has an item template that contains sub-controls, you may need to access the individual controls rather than just the entire list item. This article outlines the approach for doing this.</p>"},{"location":"Manuals/kb/#kb50-dynamically-changing-object-locators-for-wpfsilverlight-applications","title":"KB50 Dynamically changing object locators for WPF/Silverlight applications","text":"<p>Sometimes you will have\u00a0controls in\u00a0a WPF or Silverlight\u00a0application which use\u00a0dynamic lists. Depending on\u00a0certain settings,\u00a0the widgets in the list will appear in different places. This means that a learned Rapise object which works fine if its\u00a0in the original\u00a0ListBox[0] location\u00a0position is not found during playback\u00a0when it's\u00a0displayed in another position, e.g.\u00a0 ListBox[1] or [2]. Unlike the XPath option with web testing, Rapise doesn't currently allow regular expressions (Regex) in locators stored inside the Objects.js file. This article describes a way around the problem. This article is obsolete. Rapise supports regular expressions in UIAutomation locators since version 6. Read this article for more details.</p>"},{"location":"Manuals/kb/#kb47-executing-a-process-and-checking-if-its-still-running","title":"KB47 Executing a process and checking if it's still running","text":"<p>If you use the Global.DoLaunch(...) command to launch a Windows console application, it will return a process ID. This article provides some sample code for executing a console application and checking to make sure that the process is not still running.</p>"},{"location":"Manuals/kb/#kb46-executing-javascript-commands-against-web-browser","title":"KB46 Executing JavaScript commands against Web Browser","text":"<p>Sometimes you want to be able to open a browser window and execute JavaScript commands directly against the DOM objects rather than using the Rapise learned objects. This article explains the recommended way of doing this.</p>"},{"location":"Manuals/kb/#kb40-extending-rapiselauncher-inactivity-timeout","title":"KB40 Extending RapiseLauncher inactivity timeout","text":"<p>When executing Rapise scripts from SpiraTest using RapiseLauncher there is a 10-minute inactivity timeout. If your scripts have periods of inactivity that last longer than 10 minutes, you may need to extend the default timeout. This article describes the steps for doing this. This article is obsolete.\u00a0 Since Rapise 5 there is no default timeout anymore.</p>"},{"location":"Manuals/kb/#kb39-executing-sql-database-queries-from-rapise","title":"KB39 Executing SQL Database Queries from Rapise","text":"<p>Sometimes when you are running Rapise tests you need to run direct database queries to prepare the data in the test application, or you need to make queries against the database to verify that some user interactions left the data in a specific state. The sample script below illustrates how you can call database queries directly from the Rapise scripting editor:</p>"},{"location":"Manuals/kb/#kb38-selecting-browser-for-test","title":"KB38 Selecting Browser for Test","text":"<p>This article describes how to playback a test in a different browser from the one it was recorded in.</p>"},{"location":"Manuals/kb/#kb32-unable-to-recordplay-a-java-applet-using-rapise-inside-a-web-browser","title":"KB32 Unable to record/play a Java applet using Rapise inside a web browser","text":"<p>Sometimes you have the situation where you can record/play a Java application using Rapise having correctly installed the Java bridge and set the JAVA_HOME environment variable correctly, but applets running inside a web browser do not work. This article provides some suggested solutions</p>"},{"location":"Manuals/kb/#kb28-detecting-the-presence-of-an-object-in-rapise","title":"KB28 Detecting the presence of an object in Rapise","text":"<p>Often you need to be able to check for the presence of an object and then depending on whether the object is visible perform one of two possible sets of operations. This article explains the recommended way of doing this in Rapise 1.5.</p>"},{"location":"Manuals/kb/#kb27-using-rapise-to-extract-test-data-from-an-excel-sheet","title":"KB27 Using Rapise to extract test data from an Excel sheet","text":"<p>Often you want to be able to parameterize your Rapise tests to have a common set of test functions that can use different combinations of test data. You can use a MS-Excel spreadsheet to store the test data and use Rapise to read out the matching values. This articles provides a sample for doing this. This article is obsolete. For modern ways of making data-driven tests please refer to Data-Driven Testing documentation topic.</p>"},{"location":"Manuals/kb/#kb26-passing-parameters-to-a-rapise-script-through-the-command-line","title":"KB26 Passing Parameters to a Rapise script through the command line","text":"<p>This article describes the syntax for passing parameters from the Windows 32-bit command-line to a Rapise script. Note that you need to make sure that you're using the 32-bit command line on a 64-bit machine. I.e. follow the instructions in this KB article - https://www.inflectra.com/Support/KnowledgeBase/KB17.aspx</p>"},{"location":"Manuals/kb/#kb25-using-globaldoinvoketest-to-pass-parameters-between-tests","title":"KB25 Using Global.DoInvokeTest() to pass parameters between tests","text":"<p>Sometimes you want a test script to be able to call another sub-test as part of its operation. You can do this using the Global.DoInvokeTest('path to test', [parameters]); function. This articles provides a more detailed example for doing this. The high-level information can be found in the knowledge base at: KB127 - Passing Test Parameters.</p>"},{"location":"Manuals/kb/#kb24-how-to-handle-windowsobjects-that-have-names-that-change","title":"KB24 How to handle Windows/Objects that have names that change","text":"<p>When using Rapise to record test scripts against Windows, Java, Flex, or other thick client applications that have windows or objects whose names may change in between test runs, you will usually need to make changes to either the test script or the learned objects so that they can match correctly. This article outlines some suggested techniques for recording/playing back scripts against such applications.</p>"},{"location":"Manuals/kb/#kb18-how-do-i-ensure-no-other-browser-windows-open","title":"KB18 How Do I Ensure No Other Browser Windows Open","text":"<p>When running a test you will often want to make sure there are no other browser windows open. This is commonly done either at the start or end of the test. This article describes how you do this. This article is obsolete. With Selenium-based connectors (default option since Rapise 7.3) opened browser windows are\u00a0longer an issue. One may continue to use regular\u00a0browsers. Rapise will use\u00a0isolated browser profiles to run tests.</p>"},{"location":"Manuals/kb/#kb19-how-to-successfully-include-and-use-common-functions-and-objects","title":"KB19 How to successfully include and use common functions and objects","text":"<p>It is often useful to have a common set of code libraries and objects that can be reused amongst multiple tests. With Rapise this can be done by creating a common test and then including it into the other actual tests. This article describes the process. This article is obsolete. To get information on how to use common\u00a0 functions and objects across test cases please refer to Frameworks (recommended, requires Rapise 8.0+) or Legacy Frameworks (requires Rapise 7.0+) topics.</p>"},{"location":"Manuals/kb/#kb17-running-a-rapise-script-from-the-command-line-on-a-64-bit-machine","title":"KB17 Running a Rapise script from the command-line on a 64-bit machine","text":"<p>If you try and run a Rapise script from the command-line on a 64-bit machine you may get an error message. Learn how to fix it from the article.</p>"},{"location":"Manuals/kb/#kb13-test-scripts-suddenly-movingclicking-at-false-locations","title":"KB13 Test-Scripts suddenly moving/clicking at false locations","text":"<p>If you have your browser zoom set to a value that is not 100% when recording or playing back scripts it will affect the playback reliability. Specifically Rapise may click/move at/to false locations in the test browser. You need to set your browser zoom to 100% before doing any playback/recording activities.</p>"},{"location":"Manuals/kb/#kb11-how-do-i-change-the-url-of-the-website-being-tested-in-rapise","title":"KB11 How do I change the URL of the website being tested in Rapise.","text":"<p>We are in the process of adding a new testing server that we would like to be able to run automation scripts against. I just wanted to see if there is a process documented for converting scripts and objects to point to a different web address?</p>"},{"location":"Manuals/kb/#kb8-recording-infragistics-applications-with-rapise-throws-error","title":"KB8 Recording Infragistics Applications with Rapise Throws Error","text":"<p>If you try and record a test script in Rapise using just the 'Infragistics' library you will get the following error message: C:\\Program Files (x86)\\Inflectra\\Rapise\\Engine\\Recorder.js(285, 3) Microsoft JScript runtime error: 'ManagedObjectSelectableBehavior_OnMouseEvent' is undefined</p>"},{"location":"New/6_2/","title":"New in Rapise 6.2 (September 2019)","text":"<p>Summary</p> <ul> <li>Self-healing Web Locators</li> <li>Reconnect Mobile Session</li> <li>Reconnect WebDriver Session</li> </ul>"},{"location":"New/6_3/","title":"New in Rapise 6.3 (January 2020)","text":"<p>Summary</p> <ul> <li>SAP UI 5 for SAP HANA</li> <li>Local Browser profiles</li> <li>Local Mobile profiles</li> <li>Add Assertions from Web Spy</li> <li>Support for custom Dropdowns in RVL via Dropdowns.xlsx</li> <li>Support for read/write enabled Config.xlsx</li> <li>Start at Logon option in RapiseLauncher</li> <li>Highlight <code>TODO</code> rows in reports</li> <li>RPA Monitor for RPA Agents</li> </ul>"},{"location":"New/6_3/#changelog","title":"Changelog","text":""},{"location":"New/6_3/#features","title":"Features","text":"<ul> <li>Local Browser and Mobile profiles  [IN:4916]</li> <li>Add Assertions from Web Spy   [IN:4937]</li> <li>Start at Logon option in RapiseLauncher [IN:4901]</li> <li>Cookie handling to REST service testing module    [IN:3262]</li> <li>Highlight <code>TODO</code> rows in reports [IN:4329]</li> <li>UIAutomation2 locator   [IN:5289]</li> <li>RPA Monitor for RPA Agents   [IN:5400]</li> </ul>"},{"location":"New/6_3/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li>Dropdowns.xlsx to define dropdown values for any action called from RVL [IN:5357]</li> <li>Password parameter type  [IN:5326]</li> <li>RVL.DoPlayTest with custom parameters   [IN:5299]</li> <li>Tester.GetParam to read parameters passed via RVL.DoPlayTest [IN:5312]</li> <li>Global.DoLoadObjects is now a part of preamble    [IN:5339]</li> <li>Copy+Paste of cell region [IN:5324]</li> <li>Clear cell region    [IN:5322]</li> <li>Show only non-global objects for param type -  objectid   [IN:4600]</li> <li>Make <code>Find Object in Tree</code> for row, not for <code>Object</code> cell only    [IN:4990]</li> <li>Open as Spreadsheet in file context menu for RVL  [IN:5323]</li> <li>Drag&amp;Drop of <code>*.rvl.xlsx</code> into RVL should generate RVL.DoPlayScript   [IN:5325]</li> <li>Drag&amp;Drop Objects.js as Global.DoLoadObjects in JS and RVL    [IN:5338]</li> </ul>"},{"location":"New/6_3/#new-object-api","title":"New Object API","text":"<ul> <li>Navigator.NativeEvents  [IN:5297]</li> <li>Navigator.DoWaitFor    [IN:5298]</li> <li>Navigator.DoClickWhileOnScreen  [IN:4602]</li> <li>Navigator.DoClickUntilOnScreen  [IN:4602]</li> <li>Global.SetConfigPath  [IN:5310]</li> <li>Global.GetRapiseVersion    [IN:5300]</li> <li>HTMLObject.DoSelect now supports UL and OL lists   [IN:5305]</li> </ul>"},{"location":"New/6_3/#improvements","title":"Improvements","text":"<ul> <li>Ability to pass Firefox args and prefs from Selenium Settings dialog  [IN:5266]</li> <li>Save As in Image Viewer   [IN:5223]</li> <li>Show Warnings tab on test open and save only  [IN:5235]</li> <li>Always show last report as just 'Report' instead of full name [IN:5236]</li> <li>Replace Source Modified Message Box with less annoying, non blocking notifier [IN:5237]</li> <li>Show error if we can not Flash/Highlight object because it's coordinates are null [IN:5359]</li> <li>Display error message if out.log is locked by another process [IN:5351]</li> <li>Support for Unicode symbols in Object IDs  (Hebrew, Chinese, etc) [IN:5286]</li> <li>In WebSpy add context menu Learn for DOM elements in the tree [IN:5306]</li> </ul>"},{"location":"New/6_3/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>HTMLObject.PageTitle returns recorded title instead of playback-time value    [IN:4895]</li> <li>RapiseLauncher checks out files as modified   [IN:4916]</li> <li>UIATreeWithButton recording is broken [IN:5389]</li> <li>UIAutomation Spy is slow on long lists    [IN:5360]</li> <li>UIAutomation, FindByText does not take object_type into account   [IN:5358]</li> <li>RapiseLauncher - fist time connecting to Spira - stays in Paused mode until restart   [IN:5356]</li> <li>Locked idetasks.json prevents cmd/sesexecutor to run the tests    [IN:5350]</li> <li>Test editor window closes after object re-learn   [IN:5124]</li> <li>ExecJS does not have access to document and window if called without element  [IN:5216]</li> <li>When sub-test is not found - Rapise stops loading test    [IN:5232]</li> <li>Database.DoSequential skips first row [IN:5282]</li> <li>Screenshots fail when mobile test is executed for the first time  [IN:5281]</li> <li>Old web service entries stay in the tree when switching between WS tests  [IN:5291]</li> <li>Error message in create new test dialog when test case is created in Spira    [IN:5317]</li> <li>Autocompletion in RVL may be annoying [IN:5337]</li> <li>RVL \"Params\" button keeps only 1<sup>st</sup> param, and resets other    [IN:5377]</li> <li>Error adding row to RVL   [IN:4988]</li> </ul>"},{"location":"New/6_4/","title":"New in Rapise 6.4 (May 2020)","text":"<p>Summary</p> <ul> <li>Rename.. sub-test in the Test Files view [IN:5446]</li> <li>Clone... sub-test in the Test Files view [IN:5447]</li> <li>New menu item: Tools -&gt; Rapise Launcher [IN:5183]</li> <li>New menu item: Help -&gt; Remote Assistance [IN:5567]</li> <li>RVL editor improvements (see <code>RVL Enhancements &amp; Improvements</code> section below)</li> <li>WebAppProfile enhancements (see <code>Features</code> section below)</li> <li>Ability to set path for local Browser and Mobile profiles [IN:5405]</li> <li>IFRAME support in SAP UI5 applications [IN:5493]</li> <li>Improvements to Dynamics 365 for Sales support [IN:5574]</li> <li>Update support for Dynamics 365 for Operations [IN:5536]</li> </ul>"},{"location":"New/6_4/#changelog","title":"Changelog","text":""},{"location":"New/6_4/#features","title":"Features","text":"<ul> <li>Support for Cookies in the REST client [IN:4845]</li> <li>Rename.. sub-test in the Test Files view [IN:5446]</li> <li>Clone... sub-test in the Test Files view [IN:5447]</li> <li>Add flag to control recording of URLs in Web tests [IN:5463]</li> <li>IFRAME support in SAP UI5 applications [IN:5493]</li> <li>Dynamics NAV, support for  Show more/fewer fields in Fast Tabs [IN:5494]</li> <li>WebAppProfile, anchors pointing to specific elements [IN:5516]</li> <li>WebAppProfile, add configuration for clickable elements [IN:5522]</li> <li>WebAppProfile, add support for Text [IN:5569]</li> <li>WebAppProfile, add support for Handlers [IN:5570]</li> <li>Add Remote Assistance option to Help menu [IN:5567]</li> <li>Ability to set path for local Browser and Mobile profiles [IN:5405]</li> </ul>"},{"location":"New/6_4/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li>From,To params in Map Range made optional [IN:4701]</li> <li>Drag &amp; Drop of *.rvl.xlsx into JS and RVL now generates DoPlayScript [IN:4757]</li> <li>RVL to suggest getter/setter optional parameters [IN:5342]</li> <li>RVL Assert == should output compared values to the report [IN:5372]</li> <li>Copy-Paste of a Map should not truncate columns after H [IN:5401]</li> <li>Do not wipe parameters if underscore added to action name in RVL (_Do) [IN:5406]</li> <li>RVL.DoPlayTest should suggest available sub-tests for pathToTest parameter [IN:5414]</li> <li>RVL quick access toolbar items changed [IN:5437]</li> <li>Recorder adds new line to Test function (RVL mode) [IN:5438]</li> <li>Insert lines in RVL should insert between lines [IN:5503]</li> <li>_Do actions in RVL should automatically use params from Do actions [IN:5509]</li> <li>Always add rows when doing Paste in RVL [IN:5529]</li> <li>RVL Shift+Enter should insert a line after [IN:5532]</li> <li>RVL Editor: automatically add <code>defaultValue</code> when variable type is selected as Global [IN:5533]</li> <li>Support boolean values in RVL map [IN:4646]</li> </ul>"},{"location":"New/6_4/#new-object-api","title":"New Object API","text":"<ul> <li>Global.DoCmd [IN:4954]</li> <li>HTMLObject.DoDOMQueryValue [IN:4632]</li> <li>Navigator.DOMQueryValue [IN:4632]</li> <li>Navigator.KillBrowser [IN:5408]</li> <li>Navigator.SeSFind [IN:5504]</li> </ul>"},{"location":"New/6_4/#improvements","title":"Improvements","text":"<ul> <li>Rapise Launcher now immediately polls Spira when launched [IN:3800]</li> <li>New menu item: Tools -&gt; Rapise Launcher [IN:5183]</li> <li>Ctrl-Shift-T in Web Spy to save DOM snapshot + screenshot</li> <li>UIAList performance optimized [IN:5314]</li> <li>Save To Spira  dialog must ignore Reports folder [IN:5420]</li> <li>Create Sub-Test should automatically inherit Browser profile from a parent test [IN:5423]</li> <li>JavaScript syntax checker improvements [IN:5425] [IN:5427]</li> <li>If object type is not known metadata - RVL should get it from parent object type [IN:5435]</li> <li>Spreadsheet editor - we need Format Cells functionality [IN:5436]</li> <li>Clicks on SELECT and OPTION should not be recorded [IN:5439]</li> <li>Add File... by relative path if it is in the same framework (parent test) [IN:5452]</li> <li>Allow to pass rule to SeSUIAutomationFindByAutomationId [IN:5468]</li> <li>Unmodified Main.rvl.xlsx should not be saved to disk when user Saves All [IN:5491]</li> <li>Enable JS type hints for SeS objects (i.e. HTMLObject) [IN:5507]</li> <li>Remove Manual Test icon from the toolbar [IN:5510]</li> <li>Global.DoLoadObjects should add warning to the report when an object already exists [IN:5515]</li> <li>In Self-Healing add option to skip capture of recording screenshots [IN:5524]</li> <li>Update support for Dynamics 365 for Operations [IN:5536]</li> <li>Show Error View if recording failed because of an error in JS [IN:5537]</li> <li>Open Test dialog should use current test's folder by default [IN:5538]</li> <li>Automatic screenshots for Web should capture just browser content [IN:5544]</li> <li>Make new web/mobile profiles 'Local' by default [IN:5551]</li> <li>Save to Spira improvements and bug fixes [IN:5492]</li> <li>Use Navigator.NativeEvents in DoSetCheck to do real clicks [IN:5573]</li> <li>Chrome: do EnsureVisible before Click if element is not visible or partially visible [IN:5571]</li> <li>Improvements to Dynamics 365 for Sales support [IN:5574]</li> <li>Convert UsingDatabase sample to RVL [IN:4882]</li> <li>Suppress onbeforeunload event prompt [IN:5576]</li> </ul>"},{"location":"New/6_4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Incorrect RVL &gt; JS generated for image compare checkpoint [IN:5210]</li> <li>Save in SOAP editor forces Main.js reload [IN:5292]</li> <li>Learn from Web Spy in Maintenance mode  [IN:5316]</li> <li>When starting debugging - Find Results pane is shown[IN:5402]</li> <li>Sometimes highlighting disappears in RVL [IN:5410]</li> <li>WebSpy settings: ShowInternalID = false is ignored [IN:5422]</li> <li>Sub-test settings not reloaded if sub-test is modified in another copy of Rapise [IN:5424]</li> <li>After Flash we see Warnings tab activated, but expecting Output [IN:5428] </li> <li>Error trying to delete log file (Flash after Flash) [IN:5429]</li> <li>Clear Selection not working in RVL [IN:5466]</li> <li>Crash on recording when Global.SendKeys action is recorded [IN:5467]</li> <li>REST files save is not working with Ctrl-S and global save [IN:5490]</li> <li>Error connecting to project after switching between Spira instances [IN:5481]</li> <li>Objects.metadata contains garbage when all objects are removed from the object tree [IN:5498]</li> <li>Modified icon is not removed from the File view when a file is closed without saving [IN:5502]</li> <li>Tools-&gt;Libraries replaces %...% variables in lib names [IN:5514]</li> <li>RapiseLauncher - Entries.json - incorrect versions of files [IN:5523]</li> <li>RVL Wrap into loop takes more than selected [IN:5531]</li> <li>Rapise Launcher Error in Startup if Config is incorrect [IN:5534]</li> <li>RVL Del Row is not working when cell is in edit mode [IN:5535]</li> <li>\"Test\" not working in Firefox profiles  [IN:5550]</li> <li>RVL.Return message is not assigned to LastResult [IN:5554]</li> <li>Not possible to change object name for Verify stmt in Recording Activity dialog [IN:5572]</li> </ul>"},{"location":"New/6_5/","title":"New in Rapise 6.5 (July 2020)","text":"<p>Summary</p> <ul> <li>Window/Tab manipulation functionality in the Navigator object [IN:5608]</li> <li>Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630]</li> <li>It is now possible to record desktop actions into a Web test [IN:5654]</li> <li>Chrome extension updated to use the latest technology [IN:5610]</li> <li>Flash from RVL popup menu [IN:5657]</li> <li>Change Object Tree context menu - Rename instead of Remove [IN:5634]</li> <li>DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162]</li> <li>Support for SeeTest Mobile [IN:5757]</li> </ul>"},{"location":"New/6_5/#changelog","title":"Changelog","text":""},{"location":"New/6_5/#features","title":"Features","text":"<ul> <li>Window/Tab manipulation  functionality in the Navigator object [IN:5608] [IN:5712]</li> <li>Test run and custom test set properties are propagated from RapiseLauncher to Rapise [IN:5630] [IN:5660]</li> <li>It is now possible to record desktop actions into a Web test [IN:5654]  [IN:5705]</li> <li>Ability to access page script objects via Navigator.ExecPageJS [IN:5699] </li> <li>Support for SeeTest Mobile [IN:5757]</li> </ul>"},{"location":"New/6_5/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li>Map Range: Add dropdown for File Name [IN:5561]</li> <li>Map Range: Auto-read column names from attached Excel [IN:5562]</li> <li>Show real names of additional columns [IN:5563]</li> <li>Ctrl+P shortcut to act as click on Params button on the toolbar in RVL [IN:5589]</li> <li>In RVL automatically do Tab when selection is done in the dropdown [IN:5637]</li> <li>When choosing an action with 1 parameter, automatically jump to <code>ParamValue</code> [IN:5638]</li> <li>Flash from RVL popup menu [IN:5657]</li> <li>RVL - do recursive <code>WORKDIR</code> search to suggest <code>.sstest</code> and Object Repositories [IN:5674]</li> <li>For all path parameters in RVL offer to open in the popup menu [IN:5721]</li> <li>Show available sheets for <code>RVL.DoPlaySheet</code>/<code>RVL.DoPlayScript</code> [IN:5722]</li> <li>Show new row (scroll up) when adding a new row at line 2  [IN:5728]</li> <li>RVL call generator for <code>Main.js</code> should use <code>Tester.GetParam</code> for <code>sheetName</code> [IN:5762]</li> </ul>"},{"location":"New/6_5/#new-object-api","title":"New Object API","text":"<ul> <li>Global.DoVerticalScroll [IN:5233] [IN:5736]</li> <li>Global.DoHorizontalScroll [IN:5233] [IN:5736]</li> <li>Global.DoSendText [IN:5737]</li> <li>Navigator.LaunchBrowser [IN:5743]</li> <li>Navigator.ExecPageJS [IN:5699]</li> </ul>"},{"location":"New/6_5/#windowtab-manipulation","title":"Window/Tab Manipulation","text":"<ul> <li>Navigator.GetWindowsCount </li> <li>Navigator.GetWindowTitleAt</li> <li>Navigator.GetWindowUrlAt</li> <li>Navigator.GetWindowIdAt</li> <li>Navigator.GetActiveWindowTitle</li> <li>Navigator.GetActiveWindowUrl</li> <li>Navigator.GetActiveWindowId</li> <li>Navigator.DoCreateWindow</li> <li>Navigator.DoActivateWindow</li> <li>Navigator.DoCloseWindow</li> <li>Navigator.DoResizeWindow</li> <li>Navigator.DoMoveWindow</li> <li>Navigator.GetTabsCount</li> <li>Navigator.GetTabTitleAt</li> <li>Navigator.GetTabIndexById</li> <li>Navigator.GetActiveTabTitle</li> <li>Navigator.GetActiveTabUrl</li> <li>Navigator.GetActiveTabId</li> <li>Navigator.GetTabUrlAt</li> <li>Navigator.GetTabIdAt</li> <li>Navigator.DoSelectTab</li> <li>Navigator.DoCreateTab</li> <li>Navigator.DoCloseTab</li> </ul>"},{"location":"New/6_5/#improvements","title":"Improvements","text":"<ul> <li>Chrome extension updated to use the latest technology [IN:5610]</li> <li>DoClick in Web, Generic and UIAutomation libraries now supports width/height % offsets [IN:5162]</li> <li>Self-healing locator should skip first attempts to find an object [IN:5629] [IN:5716]</li> <li>Change Object Tree context menu - Rename instead of Remove [IN:5634]</li> <li>Implement <code>g_objectNameMaxLength</code>. If name of a recorded object is greater than this value it is truncated. Default is 32. [IN:5650]</li> <li>Replace dashes in the meeting ID (Help &gt; Remote Assistance) [IN:5653]</li> <li>If <code>Object is not found</code> error and we click on the link with the error line - reveal the object in the Object Tree [IN:5656]</li> <li>WebAppProfile - implement clickable handler [IN:5663]</li> <li><code>Show XPATH</code> menuitem in RVL popup menu [IN:5667]</li> <li>Configurable timeout for <code>DoFindElement</code>. Affects Chrome and Firefox. Implemented as <code>g_domFindElementTimeout</code>. Default value is 2 seconds.  [IN:5680]</li> <li>Enter non-breaking space in WebSpy using Shift+Space [IN:5713]</li> <li><code>HTMLObject.DoSetText</code> in native events mode should allow to clear text [IN:5715]</li> <li>Rename Object in the Object Tree/RVL should also change <code>objectId</code> params [IN:5723]</li> <li>Enable Crash Dumps for <code>Rapise.exe</code> and <code>RapiseLauncher.exe</code> [IN:5724]</li> <li>Change default DOM tree loading timeout from 10 seconds to 60 seconds [IN:5725]</li> <li><code>Do&lt;Type&gt;Click</code>, <code>DoMouseMove</code> - make <code>x</code>, <code>y</code> optional [IN:5726]</li> <li>Add basic authentication support for Web [IN:5732]</li> <li><code>HTMLObject.DoSetText</code> in native mode should send text as is [IN:5738]</li> </ul>"},{"location":"New/6_5/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Undo in RVL sheet [IN:5530]</li> <li><code>Tester.FailTest</code> does not set test status to <code>false</code> [IN:5592]</li> <li>RVL allows params without name [IN:5597]</li> <li>Chrome - sometimes y-coordinate calculated wrongly [IN:5609]</li> <li>Undo is inconsistent in RVL in some cases [IN:5636]</li> <li>RVL, Range Map parameter types are not highlighted [IN:5649]</li> <li>SAP combobox may not be recorded if it has no name (label) [IN:5668]</li> <li>SAP input with open button may not be recorded in some cases [IN:5669]</li> <li>Fix scaling in <code>Navigator.DpiScaleX/DpiScaleY</code> [IN:5679]</li> <li><code>HTMLObject.DoDOMQueryValue</code> is not implemented in <code>LibSelenium</code> [IN:5696]</li> <li>Mobile Spy does not see Local Profiles [IN:5755]</li> <li>Test Clone works incorrectly on non-standard Main.js [IN:5761]</li> <li>RVL does not show an error when End tag is missing [IN:5763]</li> </ul>"},{"location":"New/6_6/","title":"New in Rapise 6.6 (November 2020)","text":"<p>Summary</p> <ul> <li>RapiseLauncher - ability to store tests in Git [IN:5856]</li> <li>Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929]</li> <li>Add Report/Export as HTML [IN:5901]</li> <li>Ability to define Local to framework Global objects [IN:5353]</li> </ul>"},{"location":"New/6_6/#changelog","title":"Changelog","text":""},{"location":"New/6_6/#features","title":"Features","text":"<ul> <li>Ability to define Local to framework Global objects [IN:5353]</li> <li>RapiseLauncher - ability to store tests in Git [IN:5856]</li> <li>Allow passing path to <code>RepositoryConnection.xml</code> to RapiseLauncher [IN:5858]</li> <li>Enable true Blocked status in RapiseLauncher [IN:5733]</li> <li>Azure DevOps pipeline that is able to install Rapise on Azure Hosted Windows VM [IN:5837]</li> <li>Seamless Azure DevOps integration via Rapise.TestAdapter [IN:5929]</li> <li>Exists property in Verify Object Properties dialog [IN:5347]</li> <li>Visible property in Verify Object Properties dialog [IN:5918]</li> <li>Enable quick switch between root and sub-tests in a framework [IN:5800]</li> <li>Create sub-sub test [IN:5881]</li> <li>Implement Report Export to support long reports with screenshots [IN:5834]</li> <li>Add Report/Export as HTML [IN:5901]</li> <li> <p>Add <code>Run Diagnostics</code> button to About dialog [IN:5890]</p> View Details <p>Pressing <code>Run Diagnostics</code> button will generate the diagnostics file on the desktop and will prompt to open it in Notepad. </p> </li> <li> <p>Add option to name test file as <code>Test.sstest</code> [IN:5922]</p> </li> <li>An option to record playback video in RapiseLauncher [IN:5953]</li> </ul>"},{"location":"New/6_6/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li>Ability to pass Sheet Name through RVL.DoPlayTest [IN:5682]</li> <li>Find in Object Tree for <code>objectId</code> params in RVL [IN:5720]</li> <li>Insert Row shortcut description is missing in the main Edit menu [IN:5854]</li> <li>Highlight preamble when sheet contains variables only [IN:5891]</li> <li>Add functionality of RVL button to main View menu [IN:5903]</li> </ul>"},{"location":"New/6_6/#new-object-api","title":"New Object API","text":"<ul> <li>HTMLObject.GetVisible [IN:5918]</li> <li>UIAObject.GetVisible [IN:5918]</li> <li>UIAObject.DoFindElementByCondition [IN:5735]</li> <li>UIAObject.DoFindElementsByCondition [IN:5735]</li> <li>AndroidObject.DoFindByXPath [IN:5884]</li> <li>AndroidObject.GetParent [IN:5884]</li> <li>AndroidObject.GetNextSibling [IN:5884]</li> <li>AndroidObject.GetPrevSibling [IN:5884]</li> <li>iOSObject.DoFindByXPath [IN:5884]</li> <li>iOSObject.GetParent [IN:5884]</li> <li>iOSObject.GetNextSibling [IN:5884]</li> <li>iOSObject.GetPrevSibling [IN:5884]</li> <li>RESTService.DoRemoveRequestHeader [IN:5908]</li> <li>RESTService.DoRemoveParameter [IN:5908]</li> <li>SOAPService.DoRemoveRequestHeader [IN:5908]</li> <li>SOAPService.DoRemoveParameter [IN:5908]</li> <li>Session.DoRemoveRequestHeader [IN:5908]</li> <li>Session.DoRemoveParameter [IN:5908]</li> <li>Session.SetBaseUrl [IN:5764]</li> </ul>"},{"location":"New/6_6/#improvements","title":"Improvements","text":"<ul> <li>Rename toolbar button Test to Main [IN:5902]</li> <li>Need <code>New Test Case</code> and <code>New Folder</code> in <code>Save to Spira</code> dialog [IN:4705]</li> <li>Add <code>Show XPath</code> item to Object popup menu in the Object Tree [IN:5798]</li> <li>Open sub-test in the same Rapise window [IN:5880]</li> <li> <p>Screen Flow should generate styled HTML [IN:5835]</p> View Details <p>Default preamble for generated HTML is located at <code>c:\\Program Files (x86)\\Inflectra\\Rapise\\Core\\Engine\\ScreenFlow.html</code>. You may define your own style and place it into the root folder of your framework. The name of the file must be <code>ScreenFlow.html</code>.</p> </li> <li> <p>Increase <code>Verify Object Properties</code> dialog default size [IN:5838]</p> </li> <li>Execute TestSet from Spira toolbar - show better error message if Automation Host does not exist [IN:5775]</li> <li>Update Rapise and RapiseLauncher <code>.config</code> files to support TLS 1.2 [IN:5818]</li> <li>Reduce delays in RapiseLauncher execution for Scheduled Tests [IN:5879]</li> <li>Show Comment field from Rapise report as Actual Result in Spira Test Run [IN:5932]</li> <li> <p>Attach last.trp, summary.log and error.log to Spira Test Run [IN:5931] [IN:5942] [IN:5936]</p> View Details <p></p> </li> <li> <p>We should use default <code>WebAppProfile</code> for recording if none is defined by user [IN:5776]</p> </li> <li>Replace <code>DoSendKeys</code> with <code>DoSendText</code> in <code>DynamicsAx &gt; TextBox &gt; SetText</code> [IN:5831]</li> <li> <p>We need a way to disable Execution Monitor for Parallel test runs [IN:5889]</p> View Details <p>Just set <code>g_showExecutionMonitor</code> to <code>false</code>. It can be done via test command line parameters.</p> </li> <li> <p>Quick Setup mode [IN:5886]</p> </li> <li>Installation key that does not navigate to Welcome page and does not open Rapise and does not install local Help [IN:5882]</li> <li>Migrate to .NET 4.7.2 [IN:5885]</li> <li>Allow specifying ExpectedResult and SampleData for Spira report from Rapise [IN:5935]</li> <li>SyncToSpira.cmd hook [IN:5934]</li> </ul>"},{"location":"New/6_6/#bug-fixes","title":"Bug Fixes","text":"<ul> <li><code>Global.DoDecrypt</code> throws OutOfMemory if input string is not encrypted [IN:5731]</li> <li><code>Global.DoTrim(true)</code> does not work as described in the docs [IN:5769]</li> <li><code>DXGridControl</code> - error in <code>FindCell</code> [IN:5781]</li> <li>Test case blocked in RapiseLauncher when Test Case name contains a quote (') [IN:5797]</li> <li>Fix event based Double Click in all browsers (should use low level events) [IN:5809]</li> <li>Relearn does not work after execution with self-healing locators [IN:5810]</li> <li>CSS support is broken in Rapise [IN:5813]</li> <li><code>DoEnsureVisible</code> in Chrome returns wrong coordinates [IN:5824]</li> <li><code>Save To Spira</code> should save updated version of <code>.sstest</code> file [IN:5825]</li> <li><code>Dynamics NAV</code> - Verify Object Properties dialog closes itself for grid objects [IN:5836]</li> <li>VB2JS Converter fails with some input VBS [IN:5853]</li> <li>Register <code>SeSHelper</code> if it is not found in <code>InvokeSeSHelper</code> [IN:5861]</li> <li><code>SeSExecutor</code> does not clear <code>summary.log</code> before execution [IN:5872]</li> <li>Encrypt password in <code>rapise_launcher.log</code> [IN:5876]</li> <li>Remove _genXPathConditions from <code>LibDomDynamicsNAV</code> recorder [IN:5613]</li> <li><code>Session.SetRequestHeader</code> causes a failure if parameter is undefined [IN:5896]</li> <li>Library defined <code>WebAppProfile</code> is always overloaded with the default one [IN:5898]</li> <li>Double click on text node in <code>Web Spy</code> leads to Exception screen [IN:5926]</li> <li>Appium client should disable SSL3 on startup [IN:5756]</li> <li>Automatically reload <code>Main.js</code> when steps are recorded in JavaScript mode [IN:5549]</li> <li>RapiseLauncher can run Test Sets in parallel in some cases [IN:5954]</li> <li><code>Tester.CaptureDesktopImage</code> does not work if used from a Web Test [IN:5941]</li> </ul>"},{"location":"New/6_7/","title":"New in Rapise 6.7 (February 2021)","text":"<p>Summary</p> <ul> <li>Support for NodeJS as JavaScript execution engine in Rapise </li> <li>RapiseLauncher: Test Set attachments, CLI enhancements, RDP disconnect and screen resolution</li> <li>Mobile: SeeTest instrumented mode support and usability fixes</li> <li>REST: Bearer token, parameters in request headers and credentials, JS callbacks</li> <li>Amazon Web Services: support for AWS secrets and Amazon Device Farm (browser testing)</li> </ul>"},{"location":"New/6_7/#changelog","title":"Changelog","text":""},{"location":"New/6_7/#features","title":"Features","text":"<ul> <li>Support for NodeJS as JavaScript execution engine in Rapise [IN:6187]</li> <li>RapiseLauncher: download Test Set attachments before execution and make them available in tests [IN:6059]</li> <li>RapiseLauncher: CLI - allow passing Test Execution parameters to test runs [IN:6028]</li> <li>RapiseLauncher: CLI - allow to run multiple test sets [IN:5848]</li> <li>RapiseLauncher: screen resolution settings for disconnected RDP session [IN:6183]</li> <li>RapiseLauncher: tray icon menu to disconnect RDP session for unattended UI tests execution [IN:6170]</li> <li>Azure DevOps: add extension for RapiseLauncher [IN:6188]</li> <li>Azure DevOps: add extension with Rapise Test Adapter Task [IN:6189]</li> <li>Mobile: support for SeeTest instrumented mode [IN:6163]</li> <li>Mobile: Clear button on the Spy toolbar [IN:6143]</li> <li>REST: parameters in request headers and credentials [IN:6118]</li> <li>REST: Add support for Bearer token for REST calls [IN:5675]</li> <li>REST: JavaScript callbacks in REST requests [IN:6038]</li> <li>Support for Amazon Device Farm [IN:6112]</li> <li>Support for AWS Secrets [IN:6113]</li> <li>RVL Toolbox to help learn Rapise [IN:6198]</li> </ul>"},{"location":"New/6_7/#new-object-api","title":"New Object API","text":"<ul> <li>Global.DoSetScreenResolution [IN:6169]</li> <li>Session.SetIgnoreStatus [IN:6139]</li> <li>Session.GetNewRequest [IN:6139]</li> <li>Session.GetRESTRequest [IN:6139]</li> <li>RESTService.GetParameter [IN:6139]</li> <li>RESTService.SetParameter [IN:6139]</li> <li>RESTService.GetRequestHeader [IN:6139]</li> <li>RESTService.SetRequestHeader [IN:6139]</li> <li>RESTService.DoRemoveRequestHeader [IN:6139]</li> <li>RESTService.DoRemoveParameter [IN:6139]</li> <li>SOAPService.DoRemoveRequestHeader [IN:6139]</li> <li>SOAPService.DoRemoveParameter [IN:6139]</li> </ul>"},{"location":"New/6_7/#improvements","title":"Improvements","text":"<ul> <li>Optimize Save to Spira for the case of thousands of files in Reports folder [IN:5976]</li> <li>When Reports folder contains many files - reloading of the files tree is slow [IN:5981]</li> <li>Use CEF (Chromium based web browser) to display Start Page, Spira Dashboard and Help [IN:6060]</li> <li>SeSObject &gt; Behavior: Allow overriding properties [IN:6064]</li> <li>Allow <code>Remove all from Disk</code> for folders [IN:6103]</li> <li><code>Global.GetProperty</code> should log an error if <code>Config.json</code> can not be parsed successfully [IN:6132]</li> <li>Allow recording REST actions a) including failed b) with short name c) without objects [IN:6138]</li> <li>Mobile: show wait cursor indicator immediately when a tool is pressed on the toolbar [IN:6142]</li> <li>Mobile: if app parameter is invalid the Spy should provide meaningful error report [IN:6144]</li> <li>Do not show functions marked with <code>@private</code> or <code>@ignore</code> in User Functions node of the Object Tree [IN:6140]</li> <li>Do not show <code>Test</code>, <code>TestInit</code>, <code>TestPrepare</code>, <code>TestFinish</code> in User Functions node of the Object Tree [IN:6154]</li> <li>Auto detect numbers and bools for REST parameters [IN:6159]</li> <li>Add support for FIPS compliant AES algorithm to RapiseLauncher/Rapise [IN:6199]</li> </ul>"},{"location":"New/6_7/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Mobile: fail to get snapshot if PageSource XML contains text nodes [IN:6049]</li> <li> <p>Mobile: <code>newCommandTimeout</code> capability does not work with SeeTest [IN:6135]</p> View Details <p>To fix open the mobile profile in Rapise 6.7, change <code>newCommandTimeout</code> value and save the profile.</p> </li> <li> <p><code>TelerikGridView.DoClickCell</code> is broken [IN:6133]</p> </li> <li><code>DomDynamicsNAV</code> library is incompatible with the latest Business Central version [IN:6115]</li> <li><code>DomDynamicsAXTabControl</code> - tab selection not working because of MS update [IN:6096]</li> <li><code>DynamicsAXTable</code> need fixes for the table with filters [IN:6043]</li> <li><code>DynamicsAXTable</code> - grid column is not found by name if a cell is selected [IN:6040]</li> <li><code>DXComboBoxEdit</code> - not able to read default value of a lookup [IN:5986]</li> <li>Tab navigation is not possible with <code>DXDocumentHost</code> [IN:5985]</li> <li>Out of memory if object is not found in a Sub-Test when <code>StopOnError = false</code> [IN:5993]</li> <li>RVL - optional params of action before If removed 1<sup>st</sup> line of If [IN:5991]</li> </ul>"},{"location":"New/7_0/","title":"New in Rapise 7.0 (June 2021)","text":"<p>Summary</p> <ul> <li>Spira Dashboard 2.0<ul> <li>New responsive UI</li> <li>Flaky tests support</li> <li>Automatic rerun</li> </ul> </li> </ul>"},{"location":"New/7_0/#changelog","title":"Changelog","text":""},{"location":"New/7_0/#features","title":"Features","text":"<ul> <li>Spira Dashboard 2.0<ul> <li>New responsive UI</li> <li>Flaky tests support</li> <li>Automatic rerun</li> </ul> </li> <li>Upgrade Appium .NET to 4.1.1 and Selenium WebDriver to 3.141 [IN:6251]</li> <li>Remove Neoload integration [IN:6282]</li> </ul>"},{"location":"New/7_0/#new-object-api","title":"New Object API","text":"<ul> <li>Tester.GetTestName [IN:6488]</li> <li>Tester.SoftAssert [IN:6322]</li> <li>Tester.SoftAssertAll [IN:6322]</li> <li>Tester.AddImageToReport [IN:6125]</li> <li>SeSReportFile to use with Tester.Message, Tester.Assert, Tester.AssertEqual [IN:6171]</li> <li>RESTService.GetResponseStatusCode [IN:6287]</li> <li>RESTService.GetResponseStatusText [IN:6287]</li> </ul>"},{"location":"New/7_0/#improvements","title":"Improvements","text":"<ul> <li>Show <code>Test saved successfully</code> message after saving test to Spira [IN:5914]</li> <li>If Repository folder configured in Spira Settings is invalid - do not save settings [IN:5915]</li> <li>Trim Test Name and Folder in Create New Test dialog [IN:5970]</li> <li>RapiseLauncher - auto screenshots should do nothing for Mobile and API [IN:6137]</li> <li>Remember full screen state of Mobile Spy [IN:6166]</li> <li>Combine Discovery and Maintenance modes in Web and Mobile Spy [IN:6166]</li> <li>Pass <code>g_spiraProjectName</code>, <code>g_spiraTestSetName</code>, <code>g_spiraTestCaseName</code>, <code>g_spiraReleaseName</code> to executed test from RapiseLauncher [IN:6186]</li> <li>Reload list of project when switching between Spira instances [IN:6190]</li> <li>Include certain actions of the Global object into execution report [IN:6208]</li> <li>Make it easier to switch between sub-tests of a framework (via Spira Dashboard) [IN:6209]</li> <li>Improve RVL Toolbox search [IN:6247]</li> <li>Open KB &amp; Help Topics on double click in RVL Toolbox [IN:6261]</li> <li>Go to Symbol: add shortcut and improve the functionality [IN:6460]</li> <li>Use \"+\" to add folder in Files/Show all files view [IN:6475]</li> <li>Make <code>Browser Created</code> message in the report more informative [IN:6485]</li> </ul>"},{"location":"New/7_0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Rapise.CDM gets corrupted in some cases [IN:6219]</li> <li>Firefox recorder is broken in Node &amp; custom <code>g_browserExecutablePath</code> [IN:6232]</li> <li>Chrome popup recording sticks for 10 seconds [IN:6233]</li> <li>Unlink from Spira should also reset repository type [IN:6244]</li> <li>RapiseLauncher may include error.log and video file from previous execution of the same test set [IN:6245]</li> <li>Rapise load hangs if .rest file is missing [IN:6257]</li> <li>RVL Toolbox should open links in the new browser tab [IN:6240]</li> <li>REST 'PATCH' is missing in the dropdown [IN:6272]</li> <li>SOAP CreateScript fails when Main.js points to a wrong location [IN:6274]</li> <li>WebSpy/MobileSpy are broken in Node mode [IN:6310]</li> <li>Global.DoLaunch does not work for .cmd files [IN:6448]</li> <li>Assert message expression is broken [IN:6451]</li> <li>Open document list is not saved when Rapise is closed [IN:6463]</li> <li>RVL.DoPlayTestParallel dropdown is empty [IN:6474]</li> <li>Ignore Object Name is Broken on Login/Logout in LIS [IN:6476]</li> <li>Allow making actual screenshot in browser mode [IN:6484]</li> <li>UI Automation Locator: <code>record - flash</code> not working in Unified Service Desk in some cases [IN:6516]</li> <li>Navigator.KillBrowser is not working after unsuccessful Navigator.Close [IN:6517]</li> </ul>"},{"location":"New/7_1/","title":"New in Rapise 7.1 (September 2021)","text":"<p>Summary</p> <ul> <li>Spira Dashboard: add support for <code>Rerun test set if failed</code> option [IN:6561]</li> <li>Parallel execution of Test Cases in RapiseLauncher [IN:6608]</li> <li>Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652]</li> <li>Add support for Oracle Forms [IN:6698]</li> <li>Enhance UFT converter [IN:6699]</li> <li>Add support for Spira managed floating licenses [IN:6729]</li> </ul>"},{"location":"New/7_1/#changelog","title":"Changelog","text":""},{"location":"New/7_1/#features","title":"Features","text":"<ul> <li>Spira Dashboard: parameter editing for Test Cases and Test Sets [IN:6555]</li> <li>Spira Dashboard: add support for <code>Rerun test set if failed</code> option [IN:6561]</li> <li>Right-Click &amp; Double-Click recording for ListView control (Managed) [IN:6563]</li> <li>Spira Dashboard: add support for editing <code>Test Set Test Case</code> parameters [IN:6582]</li> <li>Include npm into Rapise setup package [IN:6603]</li> <li>Parallel execution of Test Cases in RapiseLauncher [IN:6608]</li> <li>Spira Dashboard: Test Cases view - add Open This Test to Action items [IN:6623]</li> <li>Spira Dashboard: Main view - Execute, Execute on Host for linked tests [IN:6624]</li> <li>Spira Dashboard: specify input data table (test configurations) in test set details [IN:6652]</li> <li>Add support for new AG grid in Dynamics 365 for Sales library [IN:6656]</li> <li>Spira Dashboard: auto update status of executed test sets [IN:6663]</li> <li>Spira Dashboard: tree view for the framework [IN:6666]</li> <li>Spira Dashboard:: automatically add tags to Test Runs in RapiseLauncher for filtering [IN:6673]</li> <li>OnTextSaved.cmd  [IN:6694]</li> <li>Tools &gt; Npm Console to install node modules for a test framework [IN:6697]</li> <li>Add support for Oracle Forms [IN:6698]</li> <li>Enhance UFT converter [IN:6699]</li> <li>Framework defined custom start page [IN:6700]</li> <li>Enable StartPage customization [IN:6701]</li> <li>SeSOnTestReportReady [IN:6702]</li> <li>ConfigPrompt [IN:6703]</li> <li>Add support for Spira managed floating licenses [IN:6729]</li> </ul>"},{"location":"New/7_1/#new-object-api","title":"New Object API","text":"<ul> <li>Managed library: IsEnabled property for ManagedMenuStrip [IN:6564]</li> <li>UIAutomation library: ClickItem action for UIAList (with Right-Click and Double-Click) [IN:6565]</li> <li>Add more SoftAssert statements [IN:6637]</li> </ul>"},{"location":"New/7_1/#improvements","title":"Improvements","text":"<ul> <li>RVL.DoPlaySheet and RVL.DoPlayScript should write a line into report [IN:5992]</li> <li>Automatically fix Spira Properties in sstest file if opened from a test case clone [IN:6546]</li> <li>Sign all possible executables [IN:6552]</li> <li>RapiseLauncher should report more specific error when we try to run a test on non-existent automation host [IN:6553]</li> <li>UIAutomation library: Improve recording speed when an object has many child items [IN:6566]</li> <li>Improve Telerik RadGridView recording [IN:6567]</li> <li>Update doc for Map.GetRowIndexByName [IN:6593]</li> <li>Spira dashboard should have spinner for long operations [IN:6617]</li> <li>Copy test set custom properties and parameters if running from Spira Dashboard (execute on host) [IN:6626]</li> <li>Improve formatting of code generated by recorder [IN:6627]</li> <li>Unlink from Spira - delete Repository and Entries jsons [IN:6635]</li> <li>REST editor column resize [IN:6639]</li> <li>Store Start Page and Spira Dashboard zoom level in Rapise settings [IN:6669]</li> <li>DXComboBoxEdit - improve GetSelectedText [IN:6670]</li> <li>Source Editor - save font size when file is saved [IN:6674]</li> <li>Add \"Text Editor\" section in the global settings [IN:6691]</li> <li>RVL - New Sheet - Cancel does not cancel [IN:6706]</li> <li>Pass spira config path the test from RapiseLauncher [IN:6753]</li> </ul>"},{"location":"New/7_1/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Web Spy - exit from tracking mode does not respect maximized Spy state [IN:6551]</li> <li>Spira Dashboard: Test Cases view: if no test cases, all folders shown opened [IN:6558]</li> <li>Save .LIC file to ProgramData [IN:6580]</li> <li>Spira Connection Settings not applied if new API Key is entered in Spira Settings [IN:6633]</li> <li>Link a test to Spira Test Case - .ssetst file is not saved for a sub-test [IN:6634]</li> <li>Spy is not opened in some cases [IN:6696]</li> <li>Flash broken for objects with ' in name (d'une Application) [IN:6705]</li> </ul>"},{"location":"New/7_2/","title":"New in Rapise 7.2 (February 2022)","text":"<p>Summary</p> <ul> <li>Add Generator global object [IN:6731]</li> <li>Add SpiraApi global object [IN:6763]</li> <li>Show Test Matrix from Test Runs in Spira Dashboard [IN:6785]</li> <li>Automatically download and load Selenium drivers from Rapise Data folder [IN:6877]</li> <li>Add Text global object [IN:6889]</li> <li>Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905]</li> </ul>"},{"location":"New/7_2/#changelog","title":"Changelog","text":""},{"location":"New/7_2/#features","title":"Features","text":"<ul> <li>Option to take a screenshot on test failure [IN:5595]</li> <li>Add Generator global object [IN:6731]</li> <li>Add SpiraApi global object [IN:6763]</li> <li>Show Test Matrix from Test Runs in Spira Dashboard [IN:6785]</li> <li>Automatically download and load Selenium drivers from Rapise Data folder [IN:6877]</li> <li>Add Text global object [IN:6889]</li> <li>Allow parallel execution for multiple configurations in RapiseLauncher [IN:6905]</li> </ul>"},{"location":"New/7_2/#new-object-api","title":"New Object API","text":"<ul> <li>Global.DoWaitForWindow [IN:6454]</li> <li>Add support for Salesforce Lightning ComboBox [IN:6911]</li> <li>Add <code>Enabled</code> property to JavaObject [IN:6925]</li> <li>Global.DoMaximizeWindow [IN:6993]</li> <li>Global.DoMinimizeWindow [IN:6994]</li> <li>Global.DoRestoreWindow [IN:6995]</li> <li>WebDriver.DownloadDriver [IN:6996]</li> </ul>"},{"location":"New/7_2/#improvements","title":"Improvements","text":"<ul> <li>Read column names for Excel binding in RVL [IN:6543]</li> <li>Select and execute several test cases from the main page of Spira Dashboard [IN:6768]</li> <li>Quick way to add tests from main page of Spira Dashboard to a test set [IN:6769]</li> <li>Show Release column for Test Sets and Test Runs in Spira Dashboard [IN:6771]</li> <li>Filters to view My Assigned Test Cases/Test Sets in Spira Dashboard [IN:6772]</li> <li>RapiseLauncher - add Open Log file button to Client Setup page [IN:6775]</li> <li>RapiseLauncher - indicate that Git clone or Spira repository download is in progress [IN:6776]</li> <li>Spira Dashboard - Test Set details - move Git custom properties to bottom [IN:6777]</li> <li>Show parameters on Test Run page in Spira Dashboard [IN:6784]</li> <li>Move Spira Dashboard. settings file to ProgramData [IN:6813]</li> <li>Dashboard - create Password type custom property for GitPassword [IN:6816]</li> <li>Remember list of selected columns for major tables in Spira Dashboard [IN:6823]</li> <li>Spira Dashboard - framework page - show RVL, User, Objects link for tests [IN:6836]</li> <li>Spira Settings - use machine name as automation token (default value) [IN:6843]</li> <li>Add Test Set Status graph on main page of Spira Dashboard [IN:6871]</li> <li>Create new test case right from the main page of Spira Dashboard [IN:6875]</li> <li>Usability improvements for Spira Dashboard [IN:6899]</li> <li>Flash in Selenium (when connected via debuggerAddress) [IN:6906]</li> <li>Remove Test Sets in Progress from main dashboard page [IN:6923]</li> <li>More flexible way to expand/collapse framework folders on the main page of the dashboard [IN:6924]</li> <li>Read pixel color in ImageWrapper [IN:6952]</li> <li>On multi monitor system Rapise should capture desktop that contains the object [IN:6967]</li> <li>Add Test Git Credentials button to Test Set details in Spira Dashboard [IN:7012]</li> </ul>"},{"location":"New/7_2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Tab naming for Main.xlsx may be incorrect [IN:5955]</li> <li>List of SOAP endpoints clears on pressing Save [IN:6259]</li> <li>Web: detect situations when element is visible but overlapped with another one [IN:6750]</li> <li>Cancel Execution does not work in RapiseLauncher [IN:6762]</li> <li>Adding new sheet does not mark RVL as modified [IN:6766]</li> <li><code>col</code> param name recorded for DoClickCell in Swing Table [IN:6774]</li> <li>Ctrl+F may not work in source editor in some cases [IN:6782]</li> <li>Close button in RVL Toolbox has no effect [IN:6810]</li> <li>Android - default XPath may be calculated incorrectly [IN:6820]</li> <li>Test Run details in Test Cases are always empty [IN:6825]</li> <li>Status indication is incorrect when updating test schedule in RapiseLauncher [IN:6846]</li> <li>RVL.DoPlaySheet does not offer just created sheet name in the dropdown [IN:6854]</li> <li>RapiseLauncher starts with not fully loaded form [IN:6855]</li> <li>Navigator.ExecJS 2<sup>nd</sup> parameter missing in RVL [IN:6864]</li> <li>Problem adding a custom property if already defined properties are not sequential [IN:6868]</li> <li>License activation is broken for DMO codes [IN:6869]</li> <li>Java: javaUniqueObjectString should use hashCode [IN:6886]</li> <li>Error attaching to Chrome debug port via Selenium [IN:6888]</li> <li>RVL: Rapise does not highlight orphaned End statements [IN:6915]</li> <li>SoftAssertSet requires wrong number of parameters [IN:6918]</li> <li>JS debugger strange behavior if <code>throw</code> is last before <code>else</code> [IN:6927]</li> <li>Empty GitRoot custom parameter corrupts test case path [IN:6934]</li> <li>Test Connection broken in RapiseLauncher settings [IN:6946]</li> <li>REST recording corrupts Objects.js [IN:6970]</li> <li>UIAutomation may record two different objects as one [IN:6971]</li> <li>Access to 'web-service.log' is denied [IN:7003]</li> <li>Selenium driver executables  stay running when CreateDriver fails [IN:7004]</li> </ul>"},{"location":"New/7_3/","title":"New in Rapise 7.3 (July 2022)","text":"<p>Summary</p> <ul> <li>Selenium based Web Recorder [IN:6903]</li> <li>Show Execution Plan for a Test Set [IN:7048]</li> <li>CSV editor for Test Set attachments [IN:7055]</li> <li>Central storage for Git Credentials [IN:7164]</li> <li>Add support for Shadow DOM [IN:7206]</li> </ul>"},{"location":"New/7_3/#changelog","title":"Changelog","text":""},{"location":"New/7_3/#features","title":"Features","text":"<ul> <li>Selenium based Web Recorder [IN:6903]</li> <li>Show Execution Plan for a Test Set [IN:7048]</li> <li>CSV editor for Test Set attachments [IN:7055]</li> <li>Central storage for Git Credentials [IN:7164]</li> <li>Add support for Shadow DOM [IN:7206]</li> </ul>"},{"location":"New/7_3/#new-object-api","title":"New Object API","text":"<ul> <li>Global.SetWindowPosition [IN:7001]</li> <li>Global.SetWindowSize [IN:7002]</li> <li>Tester.BlockTest to set blocked status for a test case in Spira [IN:7097]</li> <li>Add duration parameter to SeSSimulatedObject.DoMouseMove [IN:7190]</li> <li>WebDriver - actions for Back, Forward and Refresh [IN:7236]</li> </ul>"},{"location":"New/7_3/#improvements","title":"Improvements","text":"<ul> <li>Record keystrokes, {TAB} and control focus [IN:6867]</li> <li>Edit menu in RVL mode [IN:6896]</li> <li>Rename Global window to Global Objects window [IN:6897]</li> <li>Enable Open as Text File to open .cs, .py, etc. in Rapise text editor [IN:6945]</li> <li>Option to continue Test Set execution even if Test Case is Blocked [IN:6985]</li> <li>Show enhanced tooltip for Test Runs [IN:7050]</li> <li>Show Parameters column in Test Cases table [IN:7051]</li> <li>Show Parameters column in Test Sets table [IN:7052]</li> <li>Show Parameters column in [Test Cases in Test Set] table [IN:7053]</li> <li>CSV tooltip in Test Set attachments  [IN:7054]</li> <li>Calculate Test Set status from Test Runs [IN:7067]</li> <li>Allow RapiseLauncher to use Git for Windows to clone a repository [IN:7178]</li> <li>Update DomDynamicsCrmAgGrid for 2022 Wave 1 release [IN:7220]</li> <li>Trim new test name when do Clone in Files View [IN:7232]</li> <li>DoSendKeys action in Selenium should support patterns as Global.DoSendKeys [IN:7234]</li> <li>Set default timeout for Selenium profiles to 60 seconds [IN:7248]</li> <li>Improve tooltip for Object Tree filter [IN:7289]</li> <li>Switch remote assistance platform from GoToMeeting to Zoom [IN:7301]</li> </ul>"},{"location":"New/7_3/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>REST - after Create Script the request page is not reinitialized [IN:7022]</li> <li>Include rapise-doctor.cmd into the setup package [IN:7095]</li> <li>Spira.RunTestSet action works but always creates failed assertion [IN:7145]</li> <li>Add Image for Text object [IN:7152]</li> <li>RapiseLauncher unable to execute a test case with &amp; in its name [IN:7172]</li> <li>Record parameter names for global actions [IN:7202]</li> </ul>"},{"location":"New/7_4/","title":"New in Rapise 7.4 (October 2022)","text":"<p>Summary</p> <ul> <li>Mixed Mode Recording (Web, Managed, UIA, Java) [IN:7436]</li> <li>Test Set scheduling in Spira Dashboard [IN:7475]</li> <li>Add support for the Web Component Slot element (WebSpy, XPath generator) [IN:7479]</li> <li>Change navigation concept in Spira Dashboard - ID links must expand/collapse [IN:7502]</li> <li>Add generic support for AgGrid web component [IN:7581]</li> <li>Add support for Managed 64-bit desktop applications [IN:7582]</li> <li>Add support for Java 64-bit desktop applications [IN:7583]</li> </ul>"},{"location":"New/7_4/#changelog","title":"Changelog","text":""},{"location":"New/7_4/#features","title":"Features","text":"<ul> <li>Mixed Mode Recording (Web, Managed, UIA, Java) [IN:7436]</li> <li>Test Set scheduling in Spira Dashboard [IN:7475]</li> <li>Add generic support for AgGrid web component [IN:7581]</li> <li>Add support for Managed 64-bit desktop applications [IN:7582]</li> <li>Add support for Java 64-bit desktop applications [IN:7583]</li> </ul>"},{"location":"New/7_4/#new-object-api","title":"New Object API","text":"<ul> <li>Navigator.DoWaitForVisible [IN:7481]</li> <li>Navigator.CheckObjectEnabled [IN:7483]</li> <li>Navigator.EnsureVisibleScrollBehavior [IN:7590]</li> <li>Navigator.DoWaitForEnabled [IN:7591]</li> </ul>"},{"location":"New/7_4/#improvements","title":"Improvements","text":"<ul> <li>Ability to instrument Liberica JDK for Java testing [IN:6866]</li> <li> <p>When a Test Case is created from Dashboard it should have one manual step [IN:7000]</p> <p>This step can be used to link an incident.</p> </li> <li> <p>When link Web/Mobile test to Spira - create g_browserLibrary/g_mobileProfile param for Test Case [IN:7023]</p> </li> <li> <p>Ability to add all Test Cases from a folder when adding test cases to a test set [IN:7057]</p> <p>Expand a folder, right click and use popup menu <code>Select Child Test Cases</code>.</p> </li> <li> <p>Use Rapise Tests folder in Spira Documents for saving tests [IN:7124]</p> <p>It does not impact already saved tests, but new tests will be saved into Root\\Rapise Tests folder in Spira Documents.</p> </li> <li> <p>SpiraDashboard: New Folder for Test Cases and Test Sets views [IN:7128]</p> <p>Both Test Cases and Test Sets views in Spira Dashboard now have <code>New Folder</code> button.</p> </li> <li> <p>SpiraDashboard: Test Cases view: rename Folder or Test Case [IN:7129]</p> <p>Select a folder or a test case, expand menu in Actions column and choose <code>Rename\u2026</code>.</p> </li> <li> <p>Click on last.trp in Test Run details in Spira Dashboard should open the report in Rapise [IN:7170]</p> </li> <li>Upgrade JS parser to support ES2015 [IN:7325]</li> <li> <p>Spira Dashboard: Test Sets view: rename Test Set or Test Set Folder [IN:7326]</p> <p>Select a folder or a test set, expand menu in Actions column and choose <code>Rename\u2026</code>.</p> </li> <li> <p>Spira Dashboard: Test Run details - open screenshot links in Rapise image viewer [IN:7334]</p> </li> <li>Synchronize parameters of Test Case and Rapise Test when saving to Spira [IN:7352]</li> <li>Auto set project in Spira Dashboard based on opened test [IN:7356]</li> <li>Propagate common parameters of the parent test to CSV editor in Spira Dashboard [IN:7360]</li> <li> Optimize performance of Get Snapshot in WebSpy [IN:7369]</li> <li>Make callback hooks for SeSHandleObjectNotFound and TestLocatorHook [IN:7416]</li> <li>Call SeSOnTestPrepare in Recorder [IN:7426]</li> <li> Make WebDriverSession.json global to reuse browser session across tests [IN:7431]</li> <li> Speed up Managed locator creation [IN:7439]</li> <li> Optimize Spira Dashboard performance [IN:7444]</li> <li>Add Tools/Remove All Breakpoints [IN:7450]</li> <li>Spira Dashboard: In Framework View add <code>Unlink from Test Case</code> option [IN:7463]</li> <li>Spira Dashboard: stability of loading Test Case and Test Set views and expanding/collapsing detail views [IN:7464]</li> <li>Reorganize Rapise Library Chooser (Tools &gt; Libraries) [IN:7466]</li> <li>Add SeSRunNodeCommand, SeSRunNode, SeSRunNpm, SeSRunNpx [IN:7476]</li> <li>Add support for the Web Component Slot element (WebSpy, XPath generator) [IN:7479]</li> <li>Add a reference to the Floating License option to the Install popup window asking for activation code [IN:7493]</li> <li>Improve recording of Combo Boxes on Web pages [IN:7500]</li> <li>Change navigation concept in Spira Dashboard - ID links must expand/collapse [IN:7502]</li> <li>WebSpy must show tested locators in the property grid [IN:7518]</li> <li>Edit/View XPath/Location in ActionEditor of Recording Activity dialog [IN:7526]</li> <li>Support for FSAL in OracleForms (standalone Java) [IN:7530]</li> <li>Allow to explicitly choose Spy in Recording Activity dialog [IN:7539]</li> <li>Automatically change test type when Web or Mobile library is added after test creation [IN:7540]</li> <li>Do not show Engine in Dashboard view [IN:7547]</li> <li>Progress Dialog for synchronizing files to/from Spira needs replacement [IN:7561]</li> <li>Saving a sub-test to Spira before saving the Framework Root should save from the root [IN:7564]</li> <li>Update DomSAP library to work on most recent SAP UI5 version [IN:7577]</li> <li> <p> Remove Settings / Browser menu item [IN:7578]</p> <p>It was for legacy browsers and we should now better use <code>\u2026</code> next to profiles instead.</p> </li> </ul>"},{"location":"New/7_4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Rename for a test does not work [IN:6933]</li> <li>Delete Test Case parameter that is used in a Test Set - no message  [IN:7015]</li> <li>Test Matrix hides info if selected parameter values are not unique [IN:7056]</li> <li>Save to Spira hangs when saving to removed test case [IN:7333]</li> <li>Playback via Selenium - SetText is slow [IN:7342]</li> <li>Problem updating custom properties of a Test Set when GitPassword was never set [IN:7343]</li> <li>Selenium Recorder - save session information immediately after opening a browser [IN:7347]</li> <li>SpiraDashboard multiple refresh on Save to Spira [IN:7348]</li> <li>Selenium Recorder stops working after switching to and then closing a Popup window [IN:7368]</li> <li>OnBeforeUnload event is not handled in Selenium Recorder [IN:7370]</li> <li>Navigator.LaunchBrowser is missing in Selenium library [IN:7375]</li> <li>Navigator.Open should navigate when URL is non-empty [IN:7376]</li> <li>Dash symbol in tags inside Shadow Root breaks XPath generators [IN:7377]</li> <li>Global.SetClipboardText crash on date string in Nodejs [IN:7382]</li> <li>Selenium Chrome silent crash on test playback or profile test when App Paths is missing in Registry [IN:7417]</li> <li>WebSpy is slow when working with large pages [IN:7428]</li> <li>Corrupted Dashboard.json breaks whole Spira Dashboard [IN:7430]</li> <li>Java/OracleForms auto detection slows down recording of Java SWT applications [IN:7438]</li> <li>REST editor refresh issue [IN:7441]</li> <li>Show test properties when selecting root repository node in Test Objects [IN:7447]</li> <li>Save test when test case was deleted in Spira - no error [IN:7454]</li> <li>Navigator.Close must close browser even if there are opened alerts [IN:7498]</li> <li>iFrame within Shadow DOM is shown as empty in WebSpy [IN:7503]</li> <li>Do Try Action without debugger - it is crashing on g_executionMonitor [IN:7544]</li> <li>Salesforce: ComboBox.DoSelectItem, ListBox.DoSelectItem not working [IN:7546]</li> <li>Test clone does not update g_rvlScriptPath in UI and RVL button opens wrong file [IN:7548]</li> <li>RVL: Variable name in Param line is not highlighted when inside Assert statement [IN:7551]</li> <li>Navigator.SelectBrowserProfile - unable to switch from Edge to Firefox [IN:7552]</li> <li>Not all INPUT types are recorded  [IN:7553]</li> <li>Activation Status dialog in Floating mode must show correct information [IN:7558]</li> <li>Save to Spira dialog - 1<sup>st</sup> column is too narrow [IN:7562]</li> <li>HTML markup in test report breaks styles in Spira Dashboard [IN:7565]</li> <li>Spira Save/Load is slow when there are many document folders in Documents module [IN:7570]</li> <li>DevExpress: Grid.DoFullText  stopped working [IN:7585]</li> </ul>"},{"location":"New/8_0/","title":"New in Rapise 8.0 (June 2023)","text":"<p>Summary</p> <ul> <li>Framework Mode: allow to define global objects (Page Objects) with own object repository re-usable across test cases. [IN:6711]</li> <li>Framework Mode: improved framework structure with test cases, test case folders, shared modules/page objects and scripts. [IN:8211]</li> <li>Framework Mode: import, rename, move test cases in Object Tree. [IN:8212]</li> <li>Framework Mode: simplified way of defining parameters and configurations [IN:8213]</li> <li>Framework Mode: easy way of defining test sets [IN:8214]</li> <li>Framework Mode: put whole framework into Spira with a single button click, automatic creation of test cases and test sets [IN:8215]</li> <li>Framework Mode: fast way of storing framework files in Spira [IN:8216]</li> <li>NodeJS JavaScript engine made default, WScript is now secondary [IN:8217]</li> </ul>"},{"location":"New/8_0/#changelog","title":"Changelog","text":""},{"location":"New/8_0/#features","title":"Features","text":"<ul> <li>Framework Mode: allow to define global objects (Page Objects) with own object repository re-usable across test cases. [IN:6711]</li> <li>Framework Mode: improved framework structure with test cases, test case folders, shared modules/page objects and scripts. [IN:8211]</li> <li>Framework Mode: import, rename, move test cases in Object Tree. [IN:8212]</li> <li>Framework Mode: simplified way of defining parameters and configurations [IN:8213]</li> <li>Framework Mode: easy way of defining test sets [IN:8214]</li> <li>Framework Mode: put whole framework into Spira with a single button click, automatic creation of test cases and test sets [IN:8215]</li> <li>Framework Mode: fast way of storing framework files in Spira [IN:8216]</li> </ul>"},{"location":"New/8_0/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li>In RVL improve error message when Variable and Object have same name  [IN:7620]</li> <li>Find&amp;Replace in RVL and XLSX [IN:7664]</li> <li>RVL <code>testparam</code> parameter type [IN:7887]</li> <li>RVL: create a Map on .xlsx file drag-and-drop [IN:8053]</li> </ul>"},{"location":"New/8_0/#new-object-api","title":"New Object API","text":"<ul> <li>SeSOnReportMessage [IN:7636]</li> <li>Navigator.Refresh, Back and Forward [IN:7753]</li> <li>RVL: chooseRow parameter for Range Map [IN:7783]</li> <li>Tester.GetEntryTestName [IN:7892]</li> <li>File.Copy [IN:7901]</li> <li>Navigator.DoSendKeys [IN:8082]</li> <li>Tester.ExpectFailure, Tester.ExpectFailureDone [IN:8121]</li> <li>TouchAction with Press and LongPress [IN:8129]</li> <li>AppiumDriver.StartRecordingScreen, AppiumDriver.StopRecordingScreen [IN:8218]</li> <li>AndroidObject.DoPress and AndroidObject.DoLongPress [IN:8232]</li> <li>iOSObject.DoPress and iOSObject.DoLongPress [IN:8247]</li> <li>AppiumDriver.ActivateApp [IN:8301]</li> </ul>"},{"location":"New/8_0/#improvements","title":"Improvements","text":"<ul> <li>Add <code>Remove Sub-Test from Disk</code> feature [IN:6057]</li> <li>RVL files should remember column width [IN:6853]</li> <li>Remove <code>Open This Test</code> for Manual tests (dashboard) [IN:7617]</li> <li>Optimize Git Credentials loading in Spira Dashboard [IN:7627]</li> <li>Rename <code>Save/Open from Spira</code> buttons to <code>Sync/Load</code> [IN:7635]</li> <li>Show Activation Code in the Activation Dialog [IN:7640]</li> <li>Add support for ES6 syntax checking &amp; highlighting [IN:7672]</li> <li>Update Chrome connection failed notification message and docs, KB to cope with Chrome plugin retirement [IN:7700]</li> <li>New Folder menu item in addition to New Group for TestTree [IN:7730]</li> <li>Allow to override args parameter of Chrome profile from JavaScript [IN:7742]</li> <li>WebDriver API: Find methods must return null instead of throwing exceptions [IN:7749]</li> <li>Map.MoveToRow - param name colInd should be row (ind) and should accept text [IN:7762]</li> <li>Add Show All button to Synchronize File dialog (Spira Integration) [IN:7764]</li> <li>Add support for Frames in <code>Navigator.CheckObjectVisible</code> &amp;&amp; <code>HTMLObject.GetVisible</code> [IN:7798]</li> <li>Rename <code>Create Sub-Test</code> to <code>New Sub-Test</code> [IN:7809]</li> <li>Capture execution Screenshots in Selenium - cache links/navigation button images before click [IN:7847]</li> <li>Option for RapiseLauncher to not create Test Run attachments for passed tests [IN:8020]</li> <li>Show services for Test cases/PageObjects [IN:8050]</li> <li>Always load WebServices library, no need to list in the g_load_libraries [IN:8056]</li> <li>When generated make SeSGlobalObject/SeSPageObject FIRST in the file, so it is easier to append new methods to the end. [IN:8059]</li> <li>Load from Spira - allow choosing folder where to open [IN:8062]</li> <li>Object Manager - show paths relative to workdir [IN:8070]</li> <li>Test in <code>Spira Connection Settings</code>: when repository path does not exist ask to create it [IN:8081]</li> <li>Reveal in Explorer for .sstest [IN:8083]</li> <li>Save user Settings after explicit file tab Close / CloseAll [IN:8086]</li> <li>Need to show some warning when .sstest is available in a Framework but is not available on disk [IN:8090]</li> <li>If we press RVL on the toolbar - show prompt - Do you want to create RVL? [IN:8118]</li> <li>Spira Dashboard: move <code>Git Credentials</code> button to <code>Test Sets</code> page [IN:8150]</li> <li>Dynamics 365 for Sales - update support for the grid [IN:8170]</li> <li>Allow to tap with offset on Mobile elements: DoClick(x, y) [IN:8193]</li> <li>Add platform independent screen recording for Mobile [IN:8201]</li> <li>NodeJS JavaScript engine made default, WScript is now secondary [IN:8217]</li> <li>Mobile reconnect should work just like in Web [IN:8230]</li> <li>Add Press and Long Press toolbar buttons to Mobile Spy [IN:8233]</li> </ul>"},{"location":"New/8_0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Create New Test - Last selected product not saved [IN:7545]</li> <li>WebSpy text/count queries stopped working [IN:7602]</li> <li>Local browser profile is always modified if a test is saved into Spira [IN:7603]</li> <li>(//div)[1] - this does not work in test location in WebSpy [IN:7604]</li> <li>Click in Selenium library sometimes is not working  [IN:7609]</li> <li>TestParams changed in a Test do not make it modified [IN:7613]</li> <li>Some button names are truncated in UI on 100%  [IN:7616]</li> <li>RapiseLauncher should correctly process empty Test Sets  [IN:7621]</li> <li>Do not record empty title attributes for Web elements [IN:7623]</li> <li>Query to list columns when scrolling in AgGrid is incorrect [IN:7624]</li> <li>Duplicate Rapise Screenshots folders created by Rapise Launcher [IN:7626]</li> <li>Problems with restoring minimized Rapise window in nodejs mode [IN:7637]</li> <li>Fix Shadow DOM support to make it compatible with ServiceNow [IN:7646]</li> <li>Find&amp;Replace issue: after replacing HHHHHH it becomes hHhHhH instead of hhhhhh [IN:7656]</li> <li>Duplicated global objects in the object tree [IN:7658]</li> <li>REST: report crash if response size &gt;32k [IN:7668]</li> <li>Do not create Reports folders in Spira when saving a test [IN:7670]</li> <li>Memory issue when loading big frameworks from Spira [IN:7671]</li> <li>Issue Opening Save/Load from Spira dialog on a fresh machine [IN:7677]</li> <li>Missing buttons in Find/Replace dialog [IN:7686]</li> <li>Some functions missing from <code>Functions</code> view [IN:7691]</li> <li>Problems in Editor with JSON files in Node mode [IN:7693]</li> <li>Sort objects in the object tree [IN:7697]</li> <li>Weird Jump-Scroll in Library chooser on click [IN:7698]</li> <li>Don't remove target folder when test checked out via GitClone.cmd [IN:7712]</li> <li>Problem running test set of test cases saved one-by-one (no framework) by Rapise 7.4 [IN:7802]</li> <li>Screen Capture under Selenium takes full screen instead of just object (crop issue) [IN:7846]</li> <li>RVL Script path should be updated properly when cloning test case [IN:7865]</li> <li><code>Navigator.DOMFindByXPath</code> does not understand <code>css=</code> in Selenium mode [IN:7890]</li> <li>Crash when changing test param with report open  [IN:7931]</li> <li>Showing values from Dropdowns.xlsx is slow [IN:7984]</li> <li>Error attaching to spreadsheet having time cells (without dates) [IN:8037]</li> <li><code>Text.FileContains</code> works incorrectly if the search string is at the very beginning of a file [IN:8042]</li> <li><code>AppiumDriver.HideKeyboard</code> does not work for Android [IN:8047]</li> <li>WebSpy Learn Object detects wrong window name [IN:8057]</li> <li>Object Manager: Switch side is not working, Relearn Mode is obsolete [IN:8066]</li> <li>When new JS PageObject created, show its PO js, not its Main.js [IN:8068]</li> <li>Malformed <code>WebAppProfile.json</code> causes script to fail without proper message [IN:8069]</li> <li>Go to line on double clicking an error line does not work in NodeJS in some cases [IN:8073]</li> <li>Global Settings/Engine re-enables Debugger [IN:8076]</li> <li>Reports - make it a RealFolder [IN:8077]</li> <li>Browser Selector in Framework Mode should remember its value (when selected for playing a test) [IN:8078]</li> <li>Mobile ProfileSelector in Framework Mode should remember its value (when selected for playing a test) [IN:8079]</li> <li>WebElementWrapper.GetLocation =&gt; convert to JS object {X:, Y:} [IN:8084]</li> <li>If GlobalObject is defined in Public\\Scripts it should also be shown in the object tree [IN:8089]</li> <li>Mobile Reconnect stopped working [IN:8106]</li> <li>Rapise fails to get DOM tree if a frame contains an attribute with double quotes [IN:8122]</li> <li>Loading UIAutomation and Mobile in a test removes DoLDClick from desktop objects [IN:8225]</li> <li>Mobile screenshots must be added to the report just like all other screenshots do [IN:8241]</li> <li>Reconnecting with Mobile Spy to a WEBVIEW context is not working [IN:8300]</li> <li>Mobile Spy: sometimes tap not working on Android applications [IN:8303]</li> </ul>"},{"location":"New/8_1/","title":"New in Rapise 8.1 (December 2023)","text":"<p>Summary</p> <ul> <li>Folder hierarchy for Web Services (REST) requests [IN:7913]</li> <li>Run multiple test cases from Rapise [IN:8900]</li> <li>Incorporate Chrome for Testing into Web Testing workflow [IN:8921]</li> </ul>"},{"location":"New/8_1/#changelog","title":"Changelog","text":""},{"location":"New/8_1/#features","title":"Features","text":"<ul> <li>Enable JS Formatter/Beautifier for JS Editor to simplify code formatting [IN:7667]</li> <li>Enable Proxy support for REST/SOAP service testing [IN:7678]</li> <li>Folder hierarchy for Web Services (REST) requests [IN:7913]</li> <li> <p>Add support for connecting with Web Spy to WEBVIEWs on Mobile targets [IN:8571]</p> <p>When mobile testing session is in progress launch Web Spy to connect to a WEBVIEW displayed on a mobile device.</p> </li> <li> <p>Run multiple test cases from Rapise [IN:8900]</p> </li> <li>Incorporate Chrome for Testing into Web Testing workflow [IN:8921]</li> </ul>"},{"location":"New/8_1/#rvl-enhancements-improvements","title":"RVL Enhancements &amp; Improvements","text":"<ul> <li> <p>Question mark (?) in Flow column of RVL [IN:8080]</p> <p>Applicable to <code>Object.DoAction</code> type of steps in RVL. If an object is not found, don't do the action and do not report an error. Use to interact with objects that may not appear during playback (e.g. Accept Cookies button).</p> </li> <li> <p>Drag&amp;Drop sheet into RVL should generate RVL.DoPlaySheet for local sheets [IN:8874]</p> </li> <li>Double click on boolean action param in RVL should negate current value  [IN:8956]</li> </ul>"},{"location":"New/8_1/#new-object-api","title":"New Object API","text":"<ul> <li>Text.IncrementDate [IN:7679]</li> <li>Navigator.CheckObjectActive [IN:8157]</li> <li>AppiumDriver.SeSFind [IN:8171]</li> <li>Global.DoRunTest [IN:8630]</li> <li>UIAObject.DoFindByLocation [IN:8661]</li> <li>AppiumDriver.DoSendKeys [IN:8881]</li> <li>Text.Base64Encode [IN:9001]</li> <li>Generator.RandomString [IN:9003]</li> <li>RVL.DoRunTest [IN:9049]</li> <li>Text.Base64Decode [IN:9050]</li> </ul>"},{"location":"New/8_1/#improvements","title":"Improvements","text":"<ul> <li>In Debugger disable Continue, Step In, Step Out, Step Over buttons when we are not paused [IN:7505]</li> <li>UIAutomation Spy, add popup menu item to call Default Action [IN:7663]</li> <li>Browserstack support, allow setting username in a profile and access key in an external file [IN:7939]</li> <li>Upgrade JavaScript parser from ES2015 to ES2020 [IN:8051]</li> <li>Update Object Manager Icons [IN:8101]</li> <li>In Mobile and Web Spy rename top menu Spy to Spy Menu [IN:8117]</li> <li>Ignore tag in the Execution monitor (show colored/formatted messages) [IN:8223]</li> <li>Navigator.DoScreenshot should add screenshots to the Screen Flow area and allow labels [IN:8240]</li> <li>On test set run automatically create an automation host for a local machine if missing in the Spira project [IN:8305]</li> <li>F12 for DoPlayTest/DoPlaySheet/DoPlayScript [IN:8306]</li> <li> <p>Encrypt toolbar item for built-in Excel editor to encrypt passwords in data sheets [IN:8307]</p> <p>In built-in Excel editor select a cell and click Encrypt button in the Cells group on the toolbar.</p> </li> <li> <p>Dashboard, exclude test cases with <code>internal</code> tag from showing in the tree [IN:8309]</p> </li> <li>Update default mobile profiles for Android [IN:8332]</li> <li>AppiumDriver.FindElementByXPath and others should not throw exceptions when element is not found [IN:8335]</li> <li>Allow to include unlinked test cases into a Test Set in the Dashboard [IN:8406]</li> <li>Add support for automatic downloading of chromedriver for Chrome 115 and above [IN:8411]</li> <li>Scale Recording Activity dialog so the buttons are fully visible on 125-150% [IN:8415]</li> <li>Add <code>New Dropdowns.xlsx</code> Shared node menu item [IN:8423]</li> <li>Dashboard, add a tooltip to explain reordering of test cases [IN:8433]</li> <li>Dashboard, allow empty data files and user-defined values instead of column names [IN:8434]</li> <li>Make SeSVSUnit friendly to 64-bit xunit.console.exe  [IN:8454]</li> <li>Improve Disp error messages for NodeJS engine [IN:8468]</li> <li>Improve heuristics for detecting window name when learning/re-learning [IN:8477]</li> <li>Improve support for recording/learning SVG elements [IN:8494]</li> <li>Disable Activation menu item until we get information about the license [IN:8518]</li> <li>Add Verbose Level to the list of built-in framework parameters [IN:8519]</li> <li>UIAutomation, improve object name detection (sometimes use ID instead of Text1, Text2) [IN:8659]</li> <li> <p>Allow /../ in UIAutomation locators to select parent element [IN:8660]</p> <p>Example: <code>../[3]/Button[1]</code> - go to parent, then 4<sup>th</sup> child, then find 2<sup>nd</sup> button.</p> </li> <li> <p>Add ComputedStyle property for Web objects to show in Verify dialog [IN:8690]</p> </li> <li>Upgrade SeSWait to do progressive Sleep [IN:8692]</li> <li>Enable usage of Web Spy and Mobile Spy in the same test [IN:8693]</li> <li>Allow <code>,</code> as path separator for Find in Files dialog [IN:8695]</li> <li>Make it impossible to edit autogenerated .js files [IN:8702]</li> <li> Performance optimizations for Spira Dashboard (link/unlink/search) [IN:8736]</li> <li>Enable interactive mode in custom hooks for file save and Spira save [IN:8737]</li> <li> Upgrade to NodeJS 18 [IN:8738]</li> <li>Enable <code>Execute on Host</code> of the original test set [IN:8739]</li> <li>Add Show Disk Files root node item and Add All Files folder menu item in Files view [IN:8764]</li> <li>When new browser/mobile profile is created the active test must switch to it [IN:8784]</li> <li> Optimize Test Case tree reload [IN:8809]</li> <li>Update UsingReporting sample to include HTML generation in the end [IN:8812]</li> <li>Allow to import files into Shared section in Framework Mode [IN:8876]</li> <li>It would be great to have Rename for Shared files [IN:8878]</li> <li>Add popup menu Reveal in Explorer for Folders [IN:8879]</li> <li>Allow choosing of an active configuration in Choose Test Case dialog [IN:8886]</li> <li>Show shared PO objects as [Objects@POName] [IN:8893]</li> <li>Add Connection Timeout setting for Rapise Launcher [IN:8897]</li> <li> <p>Allow to override Chrome binary location from GetWebDriverNonProfileCapabilities  [IN:8948]</p> <p><code>caps[\"binary\"] = \"c:\\\\ProgramData\\\\Inflectra\\\\Rapise\\\\SeleniumChrome\\\\119.0.6002.0\\\\chrome.exe\";</code></p> </li> <li> <p>Add column number limit to Spreadsheet. [IN:8972]</p> </li> <li>Rerun Failed Tests on Host must copy Release information to a host-specific Test Set [IN:8991]</li> <li> <p>Make LastObject and LastAction from RVL available in JavaScript [IN:8993]</p> <p>it's now possible to use these variable in callbacks, such as SeSOnReportMessage.</p> </li> <li> <p> Change icon for .trp file [IN:9002]</p> </li> <li> SAPUI5 table structure changed, update DomSAPTable object [IN:9064]</li> <li>When running multiple test cases - show the report in Hierarchical, Collapsed mode [IN:9071]</li> <li><code>Play All</code> and <code>Play All (Recursive)</code> for Test Case groups [IN:9094]</li> </ul>"},{"location":"New/8_1/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Hide SOAP/REST tab when switching/creating test [IN:8061]</li> <li>Updating a license requires Rapise restart to apply the change [IN:8224]</li> <li>WebService.DoExecute must return true on success [IN:8316]</li> <li>A file with name <code>debug</code> is created in application Bin folder [IN:8334]</li> <li>Renaming Object fails in RVL Editor if there is an object with the same ID in one of previous test cases [IN:8345]</li> <li>Switching browser/mobile profile in the main window dropdown does not affect <code>Play Selection</code> in RVL [IN:8352]</li> <li>Page Object &gt; DoInvoke action ignores LastConfig.user.json [IN:8364]</li> <li>Crash of Mobile Spy on monitors with 250% scaling [IN:8393]</li> <li>Expanding/Double Clicking a Main.rvl.xlsx node in Test Tree scrolls the whole tree to the top [IN:8407]</li> <li>Creating Sub-Sub-Test leads to adding a Group [IN:8408]</li> <li>Update Copyright year in About dialog [IN:8410]</li> <li>Adding file using <code>+</code> and reloading of Functions/Variables are slow in big projects [IN:8412]</li> <li>Double-click on .rvl.xlsx file somewhere on the bottom, scrolls Test Tree to the top. [IN:8413]</li> <li>File / Add To Framework / Spreadsheet fails to create a shared spreadsheet [IN:8424]</li> <li>Load From Spira filters out repository files based on Filter in Synchronize Files dialog [IN:8426]</li> <li>Parameters page crashes if new Data File added to Shared section [IN:8427]</li> <li>Create Spreadhseet dialog does not submit data on <code>Enter</code> [IN:8428]</li> <li>Managed library is slow finding elements on playback [IN:8443]</li> <li>Intermittent issues in Managed targets [IN:8453]</li> <li>Return back popup menu item Collapse All for Object Repositories [IN:8458]</li> <li>WebDriver.FindElementsByXPath does not work with frames (returns empty array if there is @@@) [IN:8459]</li> <li>Report is empty when running Global.DoRunTestSet [IN:8460]</li> <li>WebDriver.FindElementsByXPath/CSS are broken, frame support is not working [IN:8462]</li> <li>SeSSpreadsheet does not support files with quoted values [IN:8466]</li> <li>Navigator.DoScreenshot is crashing if Alert/Confirmation is shown [IN:8467]</li> <li>Forbid Page Object names: User, Main, Objects [IN:8469]</li> <li>Global.DoLaunch should also attach to a process with exactly same path as provided [IN:8486]</li> <li>SaveAs does not copy Profiles folder [IN:8487]</li> <li>Recording Activity dialog, Edit action, Action dropdown is empty [IN:8488]</li> <li>If Do<code>Action</code> returns 0 it should not be considered as failure  [IN:8489]</li> <li>Self-Healing feature is broken in Framework Mode [IN:8505]</li> <li>Web Spy doesnt show up for 2<sup>nd</sup> time [IN:8506]</li> <li>Selenium, alerts/confirmations are vanished by Screenshots or ExecuteScript [IN:8511]</li> <li>SeSOverrideAction is not working [IN:8558]</li> <li>Make <code>RealFolder</code> tag optional [IN:8559]</li> <li>Chrome prefs in Selenium profile converted to string [IN:8569]</li> <li>Selenium targets do not load WebAppProfile handlers [IN:8572]</li> <li>Recording Activity dialog, last captured object in Web is always HTMLObject [IN:8573]</li> <li>Generated play.cmd does not work with NodeJS default engine [IN:8631]</li> <li>Global.DoCmd destroys Execution monitor [IN:8635]</li> <li>Rapise CDM license, generate non-generic Machine ID for AWS VMs [IN:8647]</li> <li>Mobile Spy and Web Spy window settings become corrupted in some cases [IN:8691]</li> <li>RVL weird resize effect on open [IN:8715]</li> <li>Clicking <code>+</code> for large projects is causing a great delay [IN:8725]</li> <li>Web apps that use Prototype library break Click recording [IN:8783]</li> <li>Video recording in Android does not save local mp4 file [IN:8792]</li> <li>Android.DoSwipe does not work with relative units [IN:8793]</li> <li>Object Tree Parser, only parse <code>shared</code> and <code>user</code> files by default [IN:8808]</li> <li>g_util.Base64Decode fails to decode string [IN:8827]</li> <li>Recording Activity dialog shows incorrect XPath on Edit [IN:8850]</li> <li>Objects inside Shadow DOM that is inside a Frame are not recorded [IN:8851]</li> <li>Save of DOM tree into XML does not work for Shadow DOM [IN:8855]</li> <li>Calling local sheet with <code>RVL.DoPlayTest</code> producing failed test report [IN:8875]</li> <li>Forbid creation of Test Cases and Modules with reserved names [IN:8880]</li> <li>Adding <code>Cross Browser</code> library to an existing desktop test produces an error [IN:8889]</li> <li>Dropdown for Mobile and Selenium profiles is terribly slow [IN:8920]</li> <li>Combobox recording in Selenium-Edge does not work [IN:8930]</li> <li>Offline Deactivation shows error and it's not clear what to do next [IN:8931]</li> <li>UIAutomation PasswordBox SetText is not properly recorded [IN:8947]</li> <li>UIAutomation: When spy covers LISWpf window, the learn from Spy captures window <code>Rapise Spy</code> [IN:8952]</li> <li>Framework clone, then save to Spira with Git repository, it links to previous repository Test Cases and Test Sets [IN:8973]</li> <li>Saving of old type repository can corrupt the repository in Spira [IN:8992]</li> <li>Saving JS file in a test with SOAP Service reloads SOAP panel [IN:9018]</li> <li>Recording of a Web combobox is catching body behind the dropdown [IN:9020]</li> <li>RapiseLauncher leaves test sets in <code>In Progress</code> state in case of internal errors [IN:9062]</li> </ul>"},{"location":"New/8_2/","title":"New in Rapise 8.2 (July 2024)","text":"<p>Summary</p> <ul> <li>AI capabilities for scenario, code and data generation [IN:9689]</li> </ul>"},{"location":"New/8_2/#changelog","title":"Changelog","text":""},{"location":"New/8_2/#features","title":"Features","text":"<ul> <li>Enhance CSS selectors to pierce open shadow DOM [IN:9230]</li> <li>Implement <code>Repository</code> RVL command [IN:9316]</li> <li>Add support for W3C actions in Web/Selenium [IN:9381]</li> <li>Add support for W3C Actions in Mobile/Appium [IN:9521]</li> <li>AI capabilities for scenario, code and data generation [IN:9689]</li> <li>Appium 2.0 support [IN:9694]</li> <li> Optimize Rapise for swift support of large frameworks with &gt; 1k test cases [IN:9695]</li> <li>Convert to AI for Manual tests [IN:9783]</li> <li>Enable page object import directly from github repository [IN:9839]</li> </ul>"},{"location":"New/8_2/#new-object-api","title":"New Object API","text":"<ul> <li>Global.DoLaunch - add a parameter to specify a parent process [IN:9422]</li> <li>AppiumDriver.CreatePointerInput [IN:9690]</li> <li>AppiumDriver.PerformActions [IN:9691]</li> <li>WebDriver.CreatePointerInput [IN:9692]</li> <li>WebDriver.PerformActions [IN:9693]</li> </ul>"},{"location":"New/8_2/#improvements","title":"Improvements","text":"<ul> <li>Global object renaming [IN:8680]</li> <li>Allow to change local execution parameters without playing a test [IN:8949]</li> <li>Make Test Framework a Default [IN:9205]</li> <li>Increase max Test Case loading count in Spira Dashboard to 10k  [IN:9236]</li> <li>Drag &amp; Drop object from repository to <code>objectId</code> parameter value in RVL [IN:9278]</li> <li>Don't create Spira test case for <code>template</code> test cases [IN:9281]</li> <li>Make active test set actions more visible on the Framework page [IN:9283]</li> <li>Add <code>deasync</code> to default NPM packages [IN:9303]</li> <li> Speed up test loading when many RVL files are open [IN:9317]</li> <li><code>Add all Files</code> - make recursive [IN:9319]</li> <li>Auto-fix JS cache issues [IN:9322]</li> <li>Skip <code>template</code> test cases from <code>Play All</code> [IN:9328]</li> <li>Set embedded Node engine global module path to <code>ProgramData</code> [IN:9333]</li> <li>WebAppProfile: treatMouseUpAsClick and treatMouseDownAsClick options [IN:9379]</li> <li>When we stop Debugging manually - do not open Report [IN:9392]</li> <li>Add tags <code>recorder</code> and <code>skip</code> to shared .js files [IN:9425]</li> <li> Large project: improve speed of switching between tabs and opening a new document [IN:9426]</li> <li> Spira Dashboard: improve test case search speed on Framework tab [IN:9472]</li> <li>Disable all navigation in Spira Dashboard while Sync with Spira is in progress [IN:9475]</li> <li>OnSave hook [IN:9520]</li> <li>In Node Engine show null in watch as null, not as {...} [IN:9567]</li> <li>Allow to specify additional arguments for Chrome embedded into Rapise [IN:9580]</li> <li>Allow to merge Browserstack mobile params set via profile and via additional capabilities callback [IN:9674]</li> <li>Remove <code>Personalize your web experience</code> popup in Edge for Web tests [IN:9734]</li> <li>New Splash Screen [IN:9749]</li> <li>Enable regex:.* in locators for managed [IN:9751]</li> <li>Add support for contenteditable attribute [IN:9769]</li> <li>Do not record on change events with isTrusted == false [IN:9774]</li> <li>Save AI sessions and messages inside framework [IN:9815]</li> <li>Enhance Text.Format to allow simple string parameters [IN:9824]</li> <li>AgGrid: support for treegrid role [IN:9833]</li> </ul>"},{"location":"New/8_2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Spira integration: take into account that a test case can be named just like framework itself [IN:9267]</li> <li>Spira integration: if for some reason a test can not be loaded - do not switch project id [IN:9268]</li> <li>Spira integration: if a user does not have access to the selected project - Load From Spira dialog is not opening [IN:9269]</li> <li>Reveal in explorer fails if test case name contains , [IN:9280]</li> <li>Delete test set on Framework tab should also delete it in Spira [IN:9282]</li> <li>When a test case is deleted in Rapise, its link to Spira should be removed [IN:9284]</li> <li>Load from Spira does not load metadata files for Frameworks [IN:9288]</li> <li>Trailing whitespace in Spira server URL breaks dashboard &amp; savetospira [IN:9302]</li> <li>Play All defaults to WScript [IN:9315]</li> <li>Find in Files hangs when one of framework files does not exist [IN:9318]</li> <li>Automation host token gets cut [IN:9325]</li> <li>RapiseLauncher failes to clone a repository after update [IN:9326]</li> <li>Wrong test case is selected in Choose Test Case dialog [IN:9327]</li> <li>Trailing slash in Appium URL in Mobile Profile causes inability to connect [IN:9360]</li> <li>New Test Case with Mobile methodology does not see local mobile profiles [IN:9361]</li> <li>Play This in Object Tree starts playback from the very beginning [IN:9382]</li> <li>ParamStartPage - Fails if test path root contains whitespaces [IN:9404]</li> <li>Rapise stays collapsed if debugger stays on breakpoint to quickly [IN:9423]</li> <li>RaspieLauncher incorrectly overrides GitRoot set in GitCredentials using Env Var [IN:9473]</li> <li>Spira Dashboard deletes Framework root test case when saving to Spira in case of Git repository [IN:9474]</li> <li>SeSOnTestFailed not executed for nested tests [IN:9498]</li> <li>Functions/Variables are vanished when new test case is created [IN:9499]</li> <li>Show Location in RVL does not work if object is from Shared repository [IN:9505]</li> <li>Rapise - creating a new json file doesn't work properly, causes issues with .sstest file [IN:9508]</li> <li>Fix Azure TAP writer [IN:9553]</li> <li>Salesforce Classic Grid - DoClick not working with Sleenium - Chrome profile [IN:9557]</li> <li>Corrupted .sstest leads to infinite loading. Need to show some more verbose. [IN:9583]</li> <li>Confirmation and Prompt alerts return wrong value [IN:9721]</li> <li>StopOnError works incorrectly for AssertEqual/AssertSmth [IN:9738]</li> <li>Save To Spira: incompatibility with Spira before version 6.10 [IN:9762]</li> <li>REST tab is not added when adding 1<sup>st</sup> REST file to a new framework [IN:9768]</li> <li>Problem in saving web request when an object file contains objects with \"-\" in name [IN:9892]</li> </ul>"},{"location":"New/Roadmap/","title":"Development Roadmap","text":"<p>About</p> <p>This roadmap document outlines the functionality planned for the future releases of Rapise. We are responsive to feedback so the contents of each individual release will be subject to change.</p> <p>Releases will also include lower level enhancements and bug fixes. We do not provide a public list of open bugs or enhancement requests at this time.</p> <p>If you have any feedback or suggestions regarding this roadmap, please email us at support@inflectra.com.</p>"},{"location":"New/Roadmap/#version-83-q4-2024","title":"Version 8.3 (Q4 2024)","text":"<ul> <li>Add support for Appium Windows Driver</li> <li>Integrate with Playwright</li> <li>Enhance CSS locators</li> <li>AI features fixes and improvements</li> <li>Performance optimization for test frameworks with 20k+ test cases</li> </ul>"},{"location":"New/Roadmap/#2024","title":"2024","text":"<p>We will continue to work on deep integration between Rapise, Spira and Git. The focus is on simplicity of building test frameworks and execution of tests. Also as usual we will keep up-to-date our support for selected CRM/ERP systems: Microsoft Dynamics family of products, Salesforce, Oracle and SAP.</p> <p>We are also going to expand our AI research and equip Rapise with AI-based features. These features will help in areas such as test data generation, test case creation, code generation, manual test conversion, UI element recognition and framework management.</p>"},{"location":"New/Roadmap/#backlog","title":"Backlog","text":""},{"location":"New/Roadmap/#spiratest-integration-enhancements","title":"SpiraTest Integration Enhancements","text":"<ul> <li>Flaky tests support: Auto detect that a test is flaky and mark the test case and test run details.</li> </ul>"},{"location":"New/Roadmap/#object-repository-management","title":"Object Repository Management","text":"<ul> <li>Remove unused objects: Option to remove objects that are not used explicitly in RVL or JavaScript modules.</li> </ul>"},{"location":"New/Roadmap/#run-tests-on-linuxmacos","title":"Run Tests on Linux/macOS","text":"<ul> <li>NodeJS based Mobile execution: Run mobile tests on Non-Windows hosts.</li> <li>NodeJS based RapiseLauncher: Connect to Spira from Non-Windows hosts and execute tests.</li> </ul>"},{"location":"New/Roadmap/#ux-enhancements","title":"UX Enhancements","text":"<ul> <li>Recorder Dialog 2.0: Ability to fine tune captured steps during recording.</li> <li>Simplified installation/upgrade: Do not require to uninstall Rapise before upgrade.</li> <li>Dark mode: Someday, really :)</li> <li>Custom Start Page. Allow test framework or test to have custom start page that may interact with test (re-build test structure, display graph, modify test) and show some application-specific information regarding test.</li> <li>Mobile: mirror device screen during recording/playback.</li> </ul>"},{"location":"New/Roadmap/#integrations","title":"Integrations","text":"<ul> <li>GitHub Actions - run Rapise tests as a step of GitHub CI/CD workflow.</li> <li>Proxy setting for JMeter Configuration - make it easier to record Rapise API tests with JMeter.</li> <li>Reporter API: Callbacks to plug in third-party reporting engines.</li> <li>Jenkins plugin: Plugin to simplify running Rapise tests from Jenkins.</li> <li>Visual Studio Code integration: Code helper for Rapise objects/actions. Start recording/playback from VS Code.</li> <li>Azure Test Plans integration: Linking to a test case in an Azure Test Plan.</li> </ul>"},{"location":"New/Roadmap/#features","title":"Features","text":"<ul> <li>FileCompare - add FileCompare UI to assist with adding file checkpoints on recording, updating checkpoints and analyzing differences after execution for files (txt, PDF, doc, JSON, csv) and text fields of runtime objects (Window text, Object Value).</li> </ul>"},{"location":"New/Roadmap/#smart-features-ai-based","title":"Smart Features (AI-based)","text":""},{"location":"New/Roadmap/#chat-with-rapise","title":"Chat with Rapise","text":"<p>Interact with the opened testing framework to ask questions and create test cases or page objects from a text prompt.</p>"},{"location":"New/Roadmap/#prompt-examples","title":"Prompt Examples","text":"<ol> <li>How many test cases do I have?</li> <li>How many draft test cases are in my framework?</li> <li>How many test cases are currently in a failed status?</li> <li>Are there any failed test cases?</li> <li>Create a new test case: \"View Authors\" in the \"Author Management\" folder.</li> <li>Generate an RVL module named \"LoginPage\" with actions: DoLogin, DoLogout.</li> </ol>"},{"location":"New/Roadmap/#chat-example","title":"Chat Example","text":"<p>Generate test case templates for a framework based on the description of the application under test (AUT):</p> <ul> <li>Generate 20 test case templates for a Library Information System website that manages a list of books and authors.</li> <li>Organize the generated test case names into logical groups based on the functional areas of the application.</li> <li>Create test case folders and templates for each group.</li> </ul>"},{"location":"New/Roadmap/#computer-vision-based-element-locator","title":"Computer Vision-Based Element Locator","text":"<p>This locator should be capable of identifying an element's bounding rectangle using a page screenshot and a text prompt. It can be used during test step generation and for automatic locator self-healing.</p> <p>Examples:</p> <ul> <li>Locate the \"Username\" text field.</li> <li>Locate the \"Edit\" button for the book The Adventures of Tom Sawyer.</li> </ul>"},{"location":"New/Roadmap/#visual-checkpoints","title":"Visual Checkpoints","text":"<p>Implement functionality to capture screenshots of the UI at predefined points in the test flow and compare them to baseline images. Any visual differences beyond a configurable threshold (e.g., pixel-level or layout variations) will be automatically flagged as failures for review.</p>"},{"location":"New/Roadmap/#add-ocr-capabilities","title":"Add OCR Capabilities","text":"<p>Leverage AI to extract text from UI elements when accessing it through the DOM is not possible.</p>"},{"location":"New/Roadmap/#ai-technology","title":"AI Technology","text":"<ul> <li>Improve token spending by leveraging more optimal RAG and prompt tuning methods.</li> <li>Improve automatic error correction efficiency by automatic try &amp; fix loops.</li> <li>Add support for Google and Amazon models.</li> </ul>"},{"location":"New/Roadmap/#technologies","title":"Technologies","text":"<ul> <li>SAP desktop GUI support</li> <li>Flutter framework support</li> </ul>"},{"location":"RVL/AI/","title":"AI","text":"<p>In RVL, the <code>AI</code> action is used to trigger static AI code generation. The format of the AI command without parameters is:</p> FlowTypeObjectActionParamNameParamTypeParamValue AI Command text explaining the command step <p>Example:</p> Screenshot <p></p> Transcript <p> FlowTypeObjectActionParamNameParamTypeParamValue AI Login to the system as librarian/librarian </p> <p>Or together with parameters:</p> FlowTypeObjectActionParamNameParamTypeParamValue AICommand text explaining the command step and using {someParam1}, {someParam2}, {...} etc Param someParam1 string ... Param someParam2 string ... Param ... string ... <p>i.e. if you want to pass some parameter, you need to mention it in the AI command in curly braces, i.e. {param1} and then have a parameter with the same name without curly braces - param1.</p> <p>AI command parameters represent dynamic values that may vary during the execution. So the generated code stays intact while values may be different.</p> <p>Example:</p> Screenshot <p></p> Transcript <p> FlowTypeObjectActionParamNameParamTypeParamValue AILogin to the system as {username}/{password} Param username string librarian Param password string librarian </p>"},{"location":"RVL/AI/#editing-and-multiline-commands","title":"Editing and Multiline Commands","text":"<p>If the row type is <code>AI</code> then there should be a non-empty command description. An <code>AI</code> command may be multiline with limited formatting options (bold and italic).</p> <p></p> <p>When editing a cell and want to add a new line, you need to press the F2 button. Then hitting ENTER will add a new line.</p>"},{"location":"RVL/AI/#implementation","title":"Implementation","text":"<p>Each AI action will be transformed into a JavaScript code snippet. Given the unpredictable nature of today\u2019s LLMs, all the AI activity is expected to be performed once and reviewed by the test developer. No AI interactions are carried out during runtime to avoid intermittent and unpredictable results. The AI-generated code gets cached and is reused when you play the test.</p> <p>All cached information regarding AI interactions is saved in the <code>%WORKDIR%\\AI</code> subfolder.</p> <p></p>"},{"location":"RVL/AI/#action-context","title":"Action Context","text":"<p>Every <code>AI</code> action is performed within a specific context, which can include several elements such as previous actions, variables, repository objects, positive and negative examples, and shared instructions.</p>"},{"location":"RVL/AI/#ai-prompt-comments","title":"AI Prompt Comments","text":"<p>AI prompt comments start with <code>##</code> and are passed directly to the <code>AI</code> command prompt. Such comments help clarify some common details that may assist in interpreting commands.</p> <p>For example, this testing framework has page objects <code>POAPI</code> and <code>POCommon</code>. Each has a <code>DoLogin</code> command, i.e., <code>POPAPI.DoLogin</code> and <code>POCommon.DoLogin</code>. So, it is up to AI to choose which one to use when generating code. In this example, it preferred to use API:</p> <p></p> <p>Now if we want the test case to use the UI, we may need an additional instruction. We start it with <code>##</code> to let Rapise know that it is for <code>AI</code>. We want to tell that all the actions in this RVL should be done using UI, not API, and here is the result:</p> <p></p>"},{"location":"RVL/AI/#previous-actions","title":"Previous Actions","text":"<p>It is often necessary to reference previous actions to ensure that the current AI-generated command harmonizes well with preceding steps. This helps maintain continuity and coherence in the automated sequence of steps within the test case.</p> <p>For example, here the 2<sup>nd</sup> action adds an author named after the logged-in user for testing purposes:</p> <p></p> <p>Note that the <code>AI</code> command in row 3 uses same name and the generated code uses <code>librarian</code> from the previous command. I.e., the command is assumed within the context.</p>"},{"location":"RVL/AI/#variables","title":"Variables","text":"<p>Variables allow dynamic data to be used in AI command code. For example, POCommon.DoCreateAuthor has 2 parameters - <code>authorName</code> and <code>authorAge</code>. The default behavior of AI is to use reasonable values when creating an author, in this case, it is 30:</p> <p></p> <p>But if we have a variable for that, it would try to use it when generating code. See how it used the <code>authorAge</code> variable:</p> <p></p>"},{"location":"RVL/AI/#repository-objects","title":"Repository Objects","text":"<p>Repository objects play a critical role in contextualizing AI actions within the testing framework. They serve as references to UI elements, enabling the AI-generated commands to interact appropriately with these elements.</p> <p>There are three ways of having repository objects in the test:</p> <ol> <li>Use objects belonging to the test case.</li> <li>Explicitly include objects using the Repository command.</li> </ol>"},{"location":"RVL/AI/#test-case-repository","title":"Test Case Repository","text":"<p>In the example below, we have a Calculator application. The calculator UI is a set of buttons and a result display. We learned all objects using the Learn tool:</p> Application Window Objects <p>Now we want to implement simple calculation examples, such as checking that 12.5 + 2.5 = 15. AI helps us link it all together like this:</p> <p></p> <p>Here you may see that it split the input into individual button clicks (12.5 is Click on 1, Click on 2, Click on Decimal Separator, Click on 5).</p> <pre><code>SeS(\"Clear\").DoClick()\nSeS(\"1\").DoClick()\nSeS(\"2\").DoClick()\nSeS(\"Decimal_separator\").DoClick()\nSeS(\"5\").DoClick()\n</code></pre> <p>So to summarize, it re-used the test case's own repository to implement user actions.</p>"},{"location":"RVL/AI/#using-external-repository","title":"Using External Repository","text":"<p>The <code>AI</code> command understands external Repositories just like local repositories. So whatever is defined using the <code>Repository</code> command will be used.</p> <p></p> <p>Each object belonging to an external repository will also be wrapped into the <code>O(id)</code> wrapper, which is needed to map from the external repository ID containing the prefix to an actual object:</p> <pre><code>SeS(O(\"CalcButtons/Subtract\")).DoClick();\n</code></pre>"},{"location":"RVL/AI/#tuning-with-positive-and-negative-examples","title":"Tuning with Positive and Negative Examples","text":"<p>Incorporating positive and negative examples can substantially enhance the accuracy and reliability of AI-generated commands. By providing examples of both correct and incorrect outputs, you can guide the AI in generating more precise and relevant code.</p> <p>Here is an example. Suppose that we have an <code>AI</code> command that is supposed to validate the output of the calculator. Here are the results of generation:</p> <p></p> <p>It is trying to use a non-existing action DoVerifyText, and thus the snippet code will fail when executed:</p> <p></p> <p>One way to proceed is to declare that this code is not good by using the thumbs down icon:</p> <p></p> <p>This way, the example is registered in <code>AIExamples.txt</code>, which will be used with each subsequent call to AI as a reference:</p> <p></p> <p>And subsequent attempts to generate code will use alternative ways for the same:</p> <p></p> <p>The code is still wrong, but it is closer to what is needed and may be tweaked.</p> <p>You may tweak <code>AIExamples.txt</code> any time later by adding/removing positive and negative examples. You may open it from the <code>Shared/AI</code> node.</p> <p></p> <p>We may provide a good example to AI by changing the code. For example, the validation above:</p> <pre><code>Tester.AssertEqual(SeS(\"Result\").GetText(), \"15\")\n</code></pre> <p>Needs to be tweaked because <code>GetText()</code> returns the name of the object, while the actual result of the calculation is returned from the <code>GetValue()</code> as we can see it from the Verify Object Properties dialog:</p> <p></p> <p>Also, we see that the calc result may contain spaces, so the result of 3+2 will actually be \"5 \". So we need to trim it for comparison (i.e., use Text.Trim).</p> <p>One more correction: Tester.Assert... methods always expect the 1<sup>st</sup> parameter to be a message for the assertion. So putting it all together, we may prune the validation manually to be like:</p> <pre><code>Tester.AssertEqual(\"Check that the result is 15\", Text.Trim(SeS(\"Result\").GetValue()), \"15\")\n</code></pre> <p>After executing it and making sure it is working, we may mark it as a reference example for other parts of the testing framework by using the thumbs up:</p> <p></p> <p>And it gets registered in <code>AIExamples.txt</code> as a positive example:</p> <p></p> <p>Once we have this example, the generation for other cases also changes. I.e.:</p> <p></p> <p>Note</p> <p>Rapise looks for AIExamples.txt file in two folders: %WORKDIR%/AI and %WORKDIR%/Shared. If both files exist then information from both of them is used.</p>"},{"location":"RVL/AI/#shared-instructions","title":"Shared Instructions","text":"<p>Shared instructions streamline the AI code generation process by providing general guidelines and frameworks that apply across multiple test cases. These instructions ensure consistency and standardization in the AI-generated code.</p> <p>Shared instructions are defined in the file <code>%WORKDIR%/Shared/AIPrompt.txt</code>. Anything from this file gets appended to each AI request.</p> <p>For example, when we do a test for Calculator, we always want to press the Clear or C button before doing any subsequent calculation.</p> <p></p> <p>Once it is defined, we need to re-generate code. And we may see that each test now begins with the same instruction:</p> <pre><code>SeS(O(\"CalcButtons/Clear\")).DoClick()\n</code></pre> <p>I.e.: </p> <p>In this example, we may see that it is clever enough to do clear only before the calculation starts, and not before we need to check the result:</p> <p></p> <p>Note</p> <p>Rapise looks for AIPrompt.txt file in two folders: %WORKDIR%/AI and %WORKDIR%/Shared. If both files exist then information from both of them is used.</p>"},{"location":"RVL/AI/#naming","title":"Naming","text":"<p>Now, with AI, naming of objects, actions, and methods as well as descriptive comments become even more important. The better you express your application and API, the better AI may combine it to implement the test. It all together helps to improve both the quality of test cases and the integrity of the testing framework.</p>"},{"location":"RVL/AI/#token-saving","title":"Token Saving","text":"<p>When working with AI-generated commands, it is crucial to be mindful of token consumption, as excessive use can lead to costs. Strategies for saving tokens include optimizing prompts, reusing parameterized commands, and minimizing unnecessary elaboration in command descriptions. This ensures that the AI-driven testing process remains efficient and cost-effective.</p> <p>In Rapise, the whole approach is intended to save cost while maximizing efficiency. Rapise provides AI with well-defined objects and page objects, and AI uses them to generate the code. The generation is done while the test is created, and no AI access is required during runtime.</p> <p>The only exception is if you updated the AI command and didn't re-generate it\u2014then the test will generate and save it to the cache before executing the command. But in most cases, executing the test does not spend any tokens.</p>"},{"location":"RVL/AI/#see-also","title":"See Also","text":"<ul> <li>AI Dashboard</li> <li>AI Panel</li> </ul>"},{"location":"RVL/Actions/","title":"Actions","text":"<p>In RVL Action always refers to an operation performed with object.</p> Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 <p>If row type is <code>Action</code> then there must be Object and Action cells defined.</p> <p>Note: In this example we call an operation that would look in JavaScript as follows:</p> <pre><code>SeS('MyButton').DoClick(5,7);\n</code></pre>"},{"location":"RVL/Actions/#object-actions","title":"Object Actions","text":"<p><code>Object</code> is an ID of learned or Global object. Available objects may be found in the <code>Object Tree</code>:</p> Screenshot <p></p> Transcript <ol> <li>Calculator<ul> <li>_1 [1]</li> <li>_2 [2]</li> <li>Add [Add]</li> <li>Equals [Equals]</li> <li>Result [Result]</li> </ul> </li> <li> <p>Global</p> <ul> <li>Android [Android]</li> <li>Database [Database]</li> <li>File [File]</li> <li>Global [Global]</li> <li>iOS [iOS]</li> <li>Navigator [Navigator]</li> <li>NeoLoad [NeoLoad]</li> <li>Ocr [Ocr]</li> <li>Session [Session]</li> <li>Spreadsheet [Spreadsheet]</li> <li>Tester [Tester]</li> <li>WebDriver [WebDriver]</li> </ul> </li> <li> <p>User Functions</p> </li> <li> <p>User Variables</p> </li> </ol> <p>Object tree contains list of available objects, including:</p> <ol> <li> <p>Local objects (1) learned recorded or learned from the application under test.</p> </li> <li> <p>Global object. Always available set of objects containing most common utility functions and operations.</p> </li> <li> <p>Functions. Represent global JavaScript functions. Each time you define a global function in .user.js file it becomes available for calling from RVL with special object ID Functions.</p> </li> </ol> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action Functions MyFunction str1 string Some Test Param b2 boolean false Param n3 number 0 <p>Each Object has its own set of actions. You may also see them in the object tree:</p> Screenshot <p></p> Transcript Object Action [Add] DoAction DoAnalogPlay DoClick DoDumpWidget DoEnsureVisible DoButtonDown DoButtonUp DoDClick <p>An Action may have any number of parameters. See Params for more info.</p>"},{"location":"RVL/Actions/#conditional-actions","title":"Conditional Actions","text":"<p>Actions with a \"?\" in the <code>Flow</code> cell are considered conditional. This means that the Action is only executed if the object is found.</p> <p>For example, if the <code>AcceptCookies</code> object is found, it is clicked on:</p> Flow Type Object Action ParamName ParamType ParamValue ? Action AcceptCookies DoClick <p>If the object is not found, the conditional action simply moves on without leaving any trace in the report.</p>"},{"location":"RVL/Actions/#editing-action","title":"Editing Action","text":"<p>An Action may have both mandatory and optional params. When action is selected from the dropdown its params are displayed:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action Global DoLaunch cmdLine string wrkDir string attachIfExists boolean <p>By default RVL editor pre-fills only mandatory params for you when you select an action from the dropdown. In this example <code>DoLaunch</code> has one mandatory parameter <code>cmdLine</code> so here is what you get when you select it:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action Global DoLaunch cmdLine string <p>However the situation is differs if you hold the Shift key while choosing an Action from the dropdown:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action Global DoLaunch cmdLine string Param wrkDir string . Param attachIfExists boolean false Param attachToWindow string null <p>You may see that all parameters are applied in this case.</p> <ul> <li>Note: if you you already have have the same action and select it with Shift key again, no optional params are applied. You need to clean the Action cell and re-select it with Shift if you want to achieve the desired effect.</li> </ul>"},{"location":"RVL/Actions/#examples","title":"Examples","text":"<p>Action without parameters</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Click on Home Action A Home DoClick <p>Action with single parameter. In RVL each parameter takes one line with Action=<code>Param</code>. However for the 1<sup>st</sup> param there is an exception. It may occupy the same line as <code>Action</code> itself:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Set test 'librarian' in  Username_ Action Username_ DoSetText txt string librarian <p>Action with many parameters:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action Global DoLaunch cmdLine string Param wrkDir string . Param attachIfExists boolean false Param attachToWindow string null"},{"location":"RVL/Assertions/","title":"Assertions","text":"<p>Assert is an essential operation for testing and validation. RVL provides special structure for it to make it more readable.</p> <p>Assertion has 2 parts: 1<sup>st</sup> row is Assert containing assertion message and then goes Condition:</p> Flow Type Object Action ParamName ParamType ParamValue Assert message string Param param1 Condition condition statement Param param2 <p>Assertion first line is always the same except the Param Value.</p> <p>In RVL Action always refers to an operation performed with object.</p> Flow Type Object Action ParamName ParamType ParamValue Assert message string Assertion text to be displayed in the report Param param1 string Text1 Condition param1!=param2 Param param2 string Text2"},{"location":"RVL/Assertions/#examples","title":"Examples","text":"<p>Compare object property InnerText with expected value:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Assert message string Verify that: InnerText=Sister Carrie Action Sister_Carrie GetInnerText Condition output1 == param2 Param param2 string Sister Carrie <p>Check if object exists on the screen:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Check that object 'Sister_Carrie' exists Assert message string Check that object 'Sister_Carrie' exists Action Global DoWaitFor objectId objectid Sister_Carrie Condition output1 IsSet <p>Check if variable <code>Age</code> has value '74':</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Check that variable 'Age' contains value 74 Assert message string Check that Age=74 Param param1 variable Age Condition param1 == param2 Param param2 string 74"},{"location":"RVL/Cheatsheet/","title":"RVL Quick Reference Guide","text":"<p>An RVL script is structured as a table with seven columns: Flow, Type, Object, Action, ParamName, ParamType, and ParamValue. Each RVL script comprises numerous RVL operations, which are stored within this table. An operation can be an Action, Comment, Variable, Loop, Map, an empty row, among others. Examples of these operations can be found in the subsequent section of this guide.</p>"},{"location":"RVL/Cheatsheet/#empty-rvl","title":"Empty RVL","text":"Flow Type Object Action ParamName ParamType ParamValue # This is an empty RVL, containing only one comment <p>JS Representation of this RVL:</p> <pre><code>// This is an empty RVL, containing only one comment\n</code></pre>"},{"location":"RVL/Cheatsheet/#rvl-variable-local-to-current-sheet","title":"RVL Variable - local to current sheet","text":"Flow Type Object Action ParamName ParamType ParamValue Variable MyVar string TBD <p>JS Representation of this RVL:</p> <pre><code>var MyVar = \"TBD\"\n</code></pre>"},{"location":"RVL/Cheatsheet/#rvl-global-variable-contains-defaultvalue-it-is-only-used-if-variable-were-not-yet-initialized-before","title":"RVL Global Variable - contains defaultValue. It is only used if variable were not yet initialized before","text":"Flow Type Object Action ParamName ParamType ParamValue Variable Global MyVar Param defaultValue string TBD <p>JS Representation of this RVL:</p> <pre><code>if(typeof(MyVar)=='undefined') MyVar = \"TBD\"\n</code></pre>"},{"location":"RVL/Cheatsheet/#rvl-map-with-local-data-contains-4-columns-colcol1-col2-col3","title":"RVL Map with local data, contains 4 columns (Col,Col1, COl2, Col3)","text":"Flow Type Object Action ParamName ParamType ParamValue Map Rows MyMap1 Col Col1 Col2 Col3 r1 r11 r12 r13 r2 r21 r22 r23 # Add more rows if needed End of Map"},{"location":"RVL/Cheatsheet/#rvl-map-read-values-from-excel-spreadsheet","title":"RVL Map - read values from excel spreadsheet","text":"Flow Type Object Action ParamName ParamType ParamValue Map Range MyMap1 fileName string %WORKDIR%\\Data.xlsx Param sheetName string Sheet1 End of Map <p>JS Representation of this RVL:</p> <pre><code>var MyMap1 = Spreadsheet.DoAttach(\"%WORKDIR%\\\\Data.xlsx\",\"Sheet1\")\n</code></pre>"},{"location":"RVL/Cheatsheet/#assertion-statement","title":"Assertion statement","text":"Flow Type Object Action ParamName ParamType ParamValue Assert message string Report message Param param1 string Value 1 Condition param1 == param2 Param param2 string Value 2 <p>JS Representation of this RVL:</p> <pre><code>Tester.Assert(\"Report message\", \"Value 1\"==\"Value 2\")\n</code></pre>"},{"location":"RVL/Cheatsheet/#action-call-dolaunch-for-an-object-global","title":"Action, Call DoLaunch for an object Global","text":"Flow Type Object Action ParamName ParamType ParamValue Action Global DoLaunch cmdLine string c:\\temp\\calc.exe Param wrkDir string c:\\temp <p>JS Representation of this RVL:</p> <pre><code>Global.DoLaunch(\"c:\\\\temp\\\\calc.exe\", \"c:\\\\temp\")\n</code></pre>"},{"location":"RVL/Cheatsheet/#conditional-if-statement","title":"Conditional If statement","text":"Flow Type Object Action ParamName ParamType ParamValue If Param param1 string TBD Condition param1 == param2 Param param2 string TBD # If actions End of If <p>JS Representation of this RVL:</p> <pre><code>if( \"TBD\" == \"TBD\" )\n{\n    // If actions\n} // of If\n</code></pre>"},{"location":"RVL/Cheatsheet/#conditional-if-else","title":"Conditional If-Else","text":"Flow Type Object Action ParamName ParamType ParamValue If Param param1 string TBD Condition param1 == param2 Param param2 string TBD # If actions Else # Else actions End of Else <p>JS Representation of this RVL:</p> <pre><code>if( \"TBD\" == \"TBD\" )\n{\n    // If actions\n} else {\n    // Else actions\n} // of Else\n</code></pre>"},{"location":"RVL/Cheatsheet/#conditional-if-elseif-else","title":"Conditional if-elseif-else","text":"Flow Type Object Action ParamName ParamType ParamValue If Param param1 string TBD1 Condition param1 == param2 Param param2 string TBD2 # If actions ElseIf Param param1 string TBD3 Condition param1 == param2 Param param2 string TBD4 # ElseIf actions End of ElseIf <p>JS Representation of this RVL:</p> <pre><code>if( \"TBD1\" == \"TBD2\" )\n{\n    // If actions\n} else if ( \"TBD3\" == \"TBD4\" ) {\n    // ElseIf actions\n} // of ElseIf\n</code></pre>"},{"location":"RVL/Cheatsheet/#multiline-comment","title":"Multiline comment","text":"Flow Type Object Action ParamName ParamType ParamValue /* This is a multi-line comment. It includes all lines from \"/*\" Up to final  \"*/\" in the flow column */ <p>JS Representation of this RVL:</p> <pre><code>/*\nThis is a multi-line comment.\nIt includes all lines from \"/*\"\nUp to final  \"*\\/\" in the flow column\n*/\n</code></pre>"},{"location":"RVL/Cheatsheet/#loop-through-map","title":"Loop through map","text":"Flow Type Object Action ParamName ParamType ParamValue Loop Map MyMap1 # Loop body Action Tester Message message string Map cell: Param message MyMap1 Col End of Loop <p>JS Representation of this RVL:</p> <pre><code>while(MyMap1.DoSequential())\n{\n    Tester.Message(\"Map cell:\", MyMap1.GetCell(\"Col\"))\n}\n</code></pre>"},{"location":"RVL/Cheatsheet/#loop-by-variable-i-similar-to-for-var-i-from-1-to-10-loop","title":"Loop by variable i (similar to \"for var i from 1 to 10\" loop)","text":"Flow Type Object Action ParamName ParamType ParamValue Loop Variable i from number 1 Param to number 10 # Loop body End of Loop <p>JS Representation of this RVL:</p> <pre><code>for(var i=1;i&lt;=10;i++)\n{\n    // Loop body\n}\n</code></pre>"},{"location":"RVL/Cheatsheet/#loop-by-condition-while-loop","title":"Loop by condition (while loop)","text":"Flow Type Object Action ParamName ParamType ParamValue Loop Param param1 number 1 Condition param1 == param2 Param param2 number 2 # Loop body End of Loop <p>JS Representation of this RVL:</p> <pre><code>while(1==2)\n{\n    // Loop body\n}\n</code></pre>"},{"location":"RVL/Columns/","title":"Columns","text":"<p>RVL script is a spreadsheet containing set of 7 columns in fixed order:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # My scenario goes here Action Global DoLaunch cmdLine string calc Param wrkDir string . Param attachIfExists boolean true Param attachToWindow string Calculator Action _1 DoClick x number 18 Param y number 15 Action Add DoClick x number 21 Param y number 19 Action _2 DoClick x number 14 Param y number 13 Action Equals DoClick x number 12 Param y number 23"},{"location":"RVL/Columns/#default-columns","title":"Default Columns","text":"1 - Flow <p>This column is dedicated to specifying structural information such as blocks, branches (If-Else), loops.</p> <p>Also it contains information about single row and multi row comments. Possible values are limited by the list:</p> <ul> <li><code>\\#</code> or <code>//</code> - single row  comment</li> <li><code>/*</code> - begin of multi row comment (comment is valid up to line starting with <code>*/</code>)</li> <li><code>*/</code> - end of multi row comment started earlier from <code>/*</code></li> <li><code>If</code> - conditional branch. Row type must be <code>Condition</code>. The row may be followed with one or more <code>ElseIf</code> statements, zero or one <code>Else</code> statement and then should end with <code>End</code>.</li> <li><code>?</code> - conditional action.</li> </ul> 2 - Type <p>Type of operation specified in this row. One of: </p> <ul> <li><code>Action</code> - row defines an action. Action is a call for operation for one of the objects. Object is defined in the next column. See Actions.</li> <li><code>Param</code> - signals that this row contains action parameter or condition parameter defined in last 3 columns (<code>ParamName</code>, <code>ParamType</code> and <code>ParamValue</code>).</li> <li><code>Output</code> - this type of row must go after last Param for an action and defines a variable that should accept output value returned from the call to the Action.</li> <li><code>Variable</code> - this row defines or assigns value to a local or global variable. See Variables.</li> <li><code>Assert</code> - first row for the Assertion. See Assertions.</li> <li><code>Condition</code></li> </ul> 3 - Object <p>Id of the object to be used for an action. Rapise provides set of predefined global objects and objects recorded/learned from the AUT.</p> 4 - Action <p>One of the actions applicable to the object selected in the previous column: <code>DoAction</code>, <code>DoClick</code>, <code>GetText</code> etc.</p> 5 - ParamName <p>Name of a parameter to the action selected in the previous column. See Params for more details.</p> 6 - ParamType <p>The type of a parameter determines valid input for the next <code>ParamValue</code> column.</p> <ul> <li><code>bool</code> - ParamValue should be <code>true</code> or <code>false</code>,</li> <li><code>string</code> - ParamValue is a text string</li> <li><code>number</code> - ParamValue is an integer or floating point number,</li> <li><code>variable</code> - ParamValue is a variable name. Actual value is read from the variable.</li> <li><code>Map Name</code> - ParamValue is a column name from the given <code>Map</code>. Usually this feature is used for data driven testing.</li> </ul> 7 - ParamValue <p>This columns defines actual values passed to actions. Depends on the ParamType.</p> <p>In addition to these columns there may be any number of other columns used for storing supplementary data, comments, calculations, thoughts etc. Additional columns may be utilized for script itself (i.e. contain expected values or reference data).</p>"},{"location":"RVL/Columns/#adding-custom-columns","title":"Adding Custom Columns","text":"<p>By default RVL always displays column <code>H</code>. It is sometimes useful (to store temp value, add a note etc).</p> <p>One may show more columns. To do this open the file (i.e. <code>Main.rvl.xlsx</code>) in the spreadsheet editor or Excel and define some values in columns <code>I</code>, <code>J</code> etc respectively:</p> Screenshot <p></p> Transcript <p>Sheet name: RVL</p> A B C D E F G H I J K Flow Type Object Action ParamName ParamType ParamValue H I J K <p>Now if you re-open this document in RVL these columns will also be displayed:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue H I J K <p>The usage of this columns is up to you. You may use them just for information or make them 'live' by assigning custom actions as will be described in the next section.</p>"},{"location":"RVL/Columns/#custom-column-actions","title":"Custom Column Actions","text":"<p>RVL is flexible and one may use more columns to implement custom script logic.</p> <p>The script occupies first 7 columns of the spreadsheet (A, B, C, D, E, F, G).</p> <p>By default the script also displays the column H. It may also display as many additional columns as needed (see previous section). It may have some value but has no side effects, i.e.:</p> <ul> <li>Provide links (to requirements, documentation)</li> <li>Mark Status (review) and notes.</li> </ul> <p>However the script may see this value and use it for own purpose, i.e.:</p> <ul> <li>Set report attribute</li> <li>Assign global variable</li> <li>Do Screenshot</li> <li>Do custom action.</li> </ul> <p>You may have one or more custom columns defined in the script to achieve necessary goals. This will require you to override <code>OnRVLScriptStep</code> function as described below.</p>"},{"location":"RVL/Columns/#onrvlscriptstep","title":"OnRVLScriptStep","text":"<p>Note</p> <p>The information below requires some JavaScript knowledge. In most cases all you need is to copy relevant snippet from the documentation or KB to achieve desired behavior</p> <p>Custom column actions are processed in the <code>OnRVLScriptStep</code> function that should be defined in the <code>User.js</code> file or in the custom library.</p> <pre><code>function OnRVLScriptStep(item, place, status, ctx, stackItem)\n</code></pre> <p>The function is mostly intended for internal use. Here you need information about the following parameters:</p> <ul> <li><code>item</code> - current RVL action item. We need to use the following property of this item:</li> <li><code>item.Startrow</code> - First RVL row for given item (in RVL each statement takes one or more rows).<ul> <li><code>item.Startrow.SheetRowIndex</code> - Row index in the current sheet.</li> <li><code>item.Startrow.Ext</code> - The structure, containing values for rows <code>H</code>, <code>I</code> and <code>J</code>, i.e.:</li> <li><code>item.Startrow.Ext.H</code> - Cell <code>H</code> for the current action</li> <li><code>item.Startrow.Ext.I</code> - Cell <code>I</code> for the current action</li> <li><code>item.Startrow.Ext.J</code> - Cell <code>J</code> for the current action</li> </ul> </li> <li><code>place</code> - One of <code>\"before\"</code> - callback just before executing row action, <code>\"after\"</code> - callback called after action has just been done.</li> </ul>"},{"location":"RVL/Columns/#see-also","title":"See Also","text":"<ul> <li>KB 433 Using Extra Columns in RVL to add Report Attributes</li> </ul>"},{"location":"RVL/Comments/","title":"Comments","text":""},{"location":"RVL/Comments/#single-row-comments","title":"Single Row Comments","text":"<p>RVL has two types of single line comments depending on the purpose.</p> <p>Sometimes comment is used to exclude line of code from execution. </p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue // Action Global DoLaunch cmdLine string calc.exe <p>There is a special type of single row comments intended to put long text comments into the document.</p> <p>Single row comment is displayed as long text providing that: 1. Flow is set to <code>#</code> or <code>//</code> 2. Text is completely typed into the <code>Type</code> cell. 3. Other cells after <code>Type</code> are empty.</p> <p>In such case the text is displayed through the whole line:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # My scenario goes here. We are going to perform arithmetical operation with Calculator. Action _1 DoClick x number 18 y number 15"},{"location":"RVL/Comments/#multiple-row-comments","title":"Multiple Row Comments","text":"<p>Used to disable several rows of script:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue /* Assert message string TBD Action Global GetCurrentDir Condition output IsTrue */"},{"location":"RVL/Conditions/","title":"Conditions","text":"<p>Conditions used in <code>If</code> and <code>Assert</code> statements. </p>"},{"location":"RVL/Conditions/#types-of-conditions","title":"Types of Conditions","text":"<p>Condition accepts one or two Params. </p> <ol> <li>There might be just one Param. Such condition is called unary, for example <code>param1 is true</code> or <code>output1 is true</code>.</li> <li>There might be second Param. Such condition is called binary, for example <code>param1 == param2</code>. </li> <li>Condition parameter may be either Param or Action output.</li> <li>Param is some fixed value, variable or expression.</li> </ol> <p>Binary condition with two *Param*s named <code>param1</code> and <code>param2</code>:</p> ... Type ... Action ParamName ... Param param1 Condition param1 == param2 Param param2 <p>Binary condition with Action and Param named <code>output1</code> and <code>param2</code>:</p> ... Type Object Action ParamName ... Action MyButton GetText Condition output1 == param2 Param param2 <p>Binary condition with two *Action*s named <code>output1</code> and <code>output2</code>:</p> ... Type Object Action ParamName ... Action MyButton1 GetText Condition output1 != output2 Action MyButton2 GetText <p>Unary condition with Param <code>param1</code>:</p> ... Type ... Action ParamName ... Param param1 Condition param1 IsFalse <p>Unary condition with Action <code>output1</code>:</p> ... Type Object Action ParamName ... Action MyButton GetEnabled Condition output1 IsTrue"},{"location":"RVL/Conditions/#all-conditions","title":"All Conditions","text":""},{"location":"RVL/Conditions/#unary-conditions-with-param","title":"Unary conditions with Param","text":"Caption Description <code>param1</code> IsTrue Check if <code>param1</code> is true <code>param1</code> IsFalse Check if <code>param1</code> is false <code>param1</code> IsNull Check if <code>param1</code> is null <code>param1</code> IsNotNull Check if <code>param1</code> is NOT null <code>param1</code> IsSet Check if <code>param1</code> is NOT null, false, 0, empty string or undefined <code>param1</code> IsNotSet Check if <code>param1</code> is null, 0, false, empty string or undefined"},{"location":"RVL/Conditions/#unary-conditions-with-action","title":"Unary conditions with Action","text":"Caption Description <code>output1</code> IsTrue Check if <code>output1</code> is true <code>output1</code> IsFalse Check if <code>output1</code> is false <code>output1</code> IsNull Check if <code>output1</code> is null <code>output1</code> IsNotNull Check if <code>output1</code> is NOT null <code>output1</code> IsSet Check if <code>output1</code> is NOT null, false, 0, empty string or undefined <code>output1</code> IsNotSet Check if <code>output1</code> is null, 0, false, empty string or undefined"},{"location":"RVL/Conditions/#binary-conditions-with-params","title":"Binary conditions with *Param*s","text":"Caption Description <code>param1</code> == <code>param2</code> Check if <code>param1</code> equals to <code>param2</code> <code>param1</code> != <code>param2</code> Check if <code>param1</code> NOT equal to <code>param2</code> <code>param1</code> &gt; <code>param2</code> Check if <code>param1</code> is more than <code>param2</code> <code>param1</code> &gt;= <code>param2</code> Check if <code>param1</code> is more or equal to <code>param2</code> <code>param1</code> &lt;= <code>param2</code> Check if <code>param1</code> is less or equal to <code>param2</code> <code>param1</code> &lt; <code>param2</code> Check if <code>param1</code> is less than <code>param2</code> <code>param1</code> contains <code>param2</code> Check if <code>param1</code> contains <code>param2</code> as substring CmpImage <code>param1</code>, <code>param2</code> Compare 1<sup>st</sup> image and image represented by <code>param2</code>"},{"location":"RVL/Conditions/#binary-conditions-with-action-and-param","title":"Binary conditions with Action and Param","text":"Caption Description <code>output1</code> == <code>param2</code> Check if <code>output1</code> equals to <code>param2</code> <code>output1</code> != <code>param2</code> Check if <code>output1</code> NOT equal to <code>param2</code> <code>output1</code> &gt; <code>param2</code> Check if <code>output1</code> is more than <code>param2</code> <code>output1</code> &gt;= <code>param2</code> Check if <code>output1</code> is more or equal to <code>param2</code> <code>output1</code> &lt;= <code>param2</code> Check if <code>output1</code> is less or equal to <code>param2</code> <code>output1</code> &lt; <code>param2</code> Check if <code>output1</code> is less than <code>param2</code> <code>output1</code> contains <code>param2</code> Check if <code>output1</code> contains <code>param2</code> as substring CmpImage <code>output1</code>, <code>param2</code> Compare 1<sup>st</sup> image and image represented by <code>param2</code>"},{"location":"RVL/Conditions/#binary-conditions-with-actions","title":"Binary conditions with *Action*s","text":"Caption Description <code>output1</code> == <code>output2</code> Check if <code>output1</code> equals to <code>output2</code> <code>output1</code> != <code>output2</code> Check if <code>output1</code> NOT equal to <code>output2</code> <code>output1</code> &gt; <code>output2</code> Check if <code>output1</code> is more than <code>output2</code> <code>output1</code> &gt;= <code>output2</code> Check if <code>output1</code> is more or equal to <code>output2</code> <code>output1</code> &lt;= <code>output2</code> Check if <code>output1</code> is less or equal to <code>output2</code> <code>output1</code> &lt; <code>output2</code> Check if <code>output1</code> is less than <code>output2</code> <code>output1</code> contains <code>output2</code> Check if <code>output1</code> contains <code>output2</code> as substring CmpImage <code>output1</code>, <code>output2</code> Compare 1<sup>st</sup> image and image represented by <code>output2</code>"},{"location":"RVL/Conditions/#and-or-conditions","title":"And, Or Conditions","text":"<p>It is possible to make more complex conditions by using And and Or keyword in the Flow column.</p> Flow Type Object Action ParamName ParamType ParamValue If Param param1 variable <code>Result1</code> Condition param1 IsFalse And Param param1 variable <code>Result2</code> Condition param1 IsTrue # If Block End of If <p>This piece forms a condition checking that <code>Result1</code> is false AND <code>Result2</code> is true at the same time.</p> Flow Type Object Action ParamName ParamType ParamValue If Action MyButton GetEnabled Condition output1 IsFalse Or Param param1 variable <code>Result1</code> Condition param1 IsTrue # If Block End of If <p>This piece forms a condition checking that MyButton is Enabled OR <code>Result2</code> is true at the same time.</p>"},{"location":"RVL/Conditions/#examples","title":"Examples","text":"<p>Condition is never used alone. You may find examples of conditions in chapters devoted to Assertions and If-Then-Else.</p>"},{"location":"RVL/Conditions/#short-condition-syntax","title":"Short Condition Syntax","text":"<p>All binary conditions with <code>param2</code> take 3 rows. Sometimes it is more convenient to use shorter 2 row syntax where <code>param2</code> value is specified on the same row as the condition itself:</p> Flow Type Object Action ParamName ParamType ParamValue Param param1 ... ... Condition param1 == param2 param2 ... ... <p>Here is the same condition presented in 3 rows (default) and 2 rows (short) form:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # 3 rows condition If Param param1 string TBD Condition param1 == param2 Param param2 string TBD End of If # Same condition in 2 rows If Param param1 string TBD Condition param1 == param2 param2 string TBD End of If <p>2 rows condition syntax together with If-Else may be used to mimic a <code>switch</code> statement:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Global variable, assigned elsewhere Variable Global Direction If Param param1 variable Direction Condition param1 == param2 Param param2 string Up # Case 'Up' ElseIf Param param1 variable Direction Condition param1 == param2 Param param2 string Down # Case 'Down' ElseIf Param param1 variable Direction Condition param1 == param2 param2 string Left # Case 'Left' ElseIf Param param1 variable Direction Condition param1 == param2 Param param2 string Right # Case 'Right' End of ElseIf <p>If there is an <code>Action</code> result used instead of <code>param</code> then it is recommended to first save it to the Variable.</p>"},{"location":"RVL/IfElse/","title":"If - Else","text":"<p><code>If</code> using for branching statements in RVL.</p> <p>Basic branch statement has 2 parts: 1<sup>st</sup> row is <code>If</code> flow with Condition:</p>"},{"location":"RVL/IfElse/#if","title":"If","text":"Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 some actions go here End <p>Actions after <code>If</code> condition and up to <code>End</code> statement are executed when condition is truth.</p>"},{"location":"RVL/IfElse/#if-else_1","title":"If-Else","text":"<p><code>If-Else</code> statement is similar to <code>If</code> with one extension. It contains an alternative <code>Else</code> section that is executed when <code>If</code> condition is false:</p> Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 # some actions go here Else # other actions go here End"},{"location":"RVL/IfElse/#if-elseif","title":"If-ElseIf","text":"<p><code>ElseIf</code> is a way to establish a chain of conditions. Each condition is evaluated with previous is false.</p> <p><code>If-Else</code> statement is similar to <code>If</code> with one extension. It contains an alternative <code>Else</code> section that is executed when <code>If</code> condition is false:</p> Flow Type ... Action ParamName ... If Param param1 Condition condition statement Param param2 # some actions go here ElseIf Param param1 Condition condition statement Param param2 # other actions go here End <p>There may be many ElseIf` blocks:</p> Flow Type Object Action ParamName ParamType ParamValue If Param param1 Condition condition statement Param param2 # some actions go here ElseIf Param param1 Condition condition statement Param param2 # other actions go here ElseIf Param param1 Condition condition statement Param param2 # other actions go here End <p>And there might also be an <code>Else</code> block in the end:</p> Flow Type Object Action ParamName ParamType ParamValue If Param param1 Condition condition statement Param param2 # some actions go here ElseIf Param param1 Condition condition statement Param param2 # other actions go here ElseIf Param param1 Condition condition statement Param param2 # other actions go here Else # other actions go here End"},{"location":"RVL/IfElse/#examples","title":"Examples","text":"<p>Check if <code>Log In</code> link available. If so, do login:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue If Action Global DoWaitFor objectId objectId Log_In Condition output1 IsSet # If actions Action Log_In DoClick Action Username DoSetText txt string librarian Action Password DoSetText txt string librarian Action ctl00MainContentLoginUser$LoginButton DoClick End <p>Check if we use old version of OS and assign a variable <code>OldWindows</code> accordingly:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue If Action Global GetOsType Condition output1 contains param2 Param param2 string Windows 7 # If actions Variable OldWindows boolean true Else # Else actions Variable OldWindows boolean false End"},{"location":"RVL/Loops/","title":"Loops","text":"<p>Loops serve several needs in RVL:</p> <ol> <li>Iterate through Maps to make data-driven testing easier.</li> <li>Allows you to repeat a set of actions for a given number of iterations.</li> <li>Lets you repeat a loop body while some Condition is satisfied.</li> </ol>"},{"location":"RVL/Loops/#loop-map","title":"Loop Map","text":"<p>A Map allows both reading script data from the table defined in the same script or from external data source such as spreadsheet, file or database. Once a Map is defined, the loop is the simplest way of traversing it.</p> Flow Type Object Action ParamName ParamType ParamValue Loop <code>Map</code> MapName ... ... ... ... ... End <p>Where MapName should be name of the map declared earlier in the same script.</p> <p>The loop goes through either the map rows or through the map columns depending on the type of map:</p> <ul> <li>For <code>Rows</code>, <code>Range</code> or <code>Database</code> type of Map, the loop goes through rows. I.e. 1<sup>st</sup> iteration points to 1<sup>st</sup> Row, then 2<sup>nd</sup> iteration points to 2<sup>nd</sup> row etc.</li> <li>For <code>Columns</code> and <code>Table</code> types of Map, the iteration goes through the columns.</li> </ul>"},{"location":"RVL/Loops/#loop-variable","title":"Loop Variable","text":"Screenshot Transcript Flow Type Object Action ParamName ParamType ParamValue Loop Variable i from number 1 Param to number 10 # Loop body End Flow Type Object Action ParamName ParamType ParamValue Loop Variable VarName <code>from</code> number from value Param <code>to</code> number to value Param <code>step</code> number step value ... ... ... ... ... End <p>Where:</p> <ul> <li> <p>VarName is an optional name of variable. It may be avoided if the goal is just to do specified number of iterations. If VarName is set, then the corresponding variable is assigned with the <code>from</code> value and incremented up to the <code>to</code> value throughout the loop. If VarName refers to an existing local or global variable then it is used, otherwise a local variable named VarName is created.</p> </li> <li> <p>from initial value of the loop variable</p> </li> <li>to final value of the loop variable</li> <li>step optional, default is 1. Loop step to increment in each iteration.</li> </ul>"},{"location":"RVL/Loops/#loop-condition","title":"Loop Condition","text":"Screenshot Transcript Flow Type Object Action ParamName ParamType ParamValue Loop Param param1 variable ind Condition param1 &lt; param2 Param param2 number 2 # Loop body End <p>Loop repeats while condition is satisfied (i.e. <code>while( param1 &lt; param2 )</code>).</p>"},{"location":"RVL/Maps/","title":"Maps","text":"<p>A Map is designed to be an easy way to define tables of data. Items in the map may be accessed by name (if defined) or by index.</p> <p>The indexed dimensions in the map may also be iterated by the [Loop][Loops.md] function, thus making it useful feature for Data-Driven Testing.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins Login Password John pass1 Sarah pass2 End of Map <p>An RVL script has at least 7 columns. However the Map may take as many columns as needed.</p>"},{"location":"RVL/Maps/#map-definition","title":"Map Definition","text":"<p>Typical declaration of map looks like:</p> Flow Type Object Action ParamName ParamType ParamValue Map <code>MapType</code> MapName ... ... ... End <p>Where <code>MapType</code> is either inplace: Table, Rows, Columns, or external: Range or Database.</p>"},{"location":"RVL/Maps/#in-place-maps","title":"In-place Maps","text":"<p>In-place map data is defined right in the RVL script. In-place map rows may be selected using This flow or skipped with a Comment. So in-place maps serve as a part of the executable script.</p> <ul> <li>Table</li> <li>Rows</li> <li>Columns</li> </ul>"},{"location":"RVL/Maps/#external-maps","title":"External Maps","text":"<ul> <li>Range</li> <li>Database</li> </ul> <p>External maps are defined in an external spreadsheet, file or a database.</p>"},{"location":"RVL/Maps/#using-maps","title":"Using Maps","text":"<p>Once map is defined it may be used as a regular Object. </p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins Login Password John pass1 Sarah pass2 End of Map # Move to next sequential row in Login map Action Login DoSequential"},{"location":"RVL/Maps/#reading-in-a-loop","title":"Reading in a Loop","text":"<p>See Loops part for <code>Map</code> type of loops.</p>"},{"location":"RVL/Maps/#maps-types","title":"Maps Types","text":""},{"location":"RVL/Maps/#rows-map","title":"Rows Map","text":"<p>A <code>Rows</code> Map is the most useful for data feeds. Each of the set of values is a row in a table that look like:</p> Flow Type Object Action ParamName ParamType ParamValue Map <code>Rows</code> MapName Col1 Col2 Col3 Col4 val11 val12 val13 val14 ... ... End <p><code>This</code> and comments are specific features of the <code>Rows</code> Map. For example, only the 2<sup>nd</sup> row of data will be executed in this case:</p> Flow Type Object Action ParamName ParamType ParamValue Map <code>Rows</code> MapName Col1 Col2 Col3 Col4 ... This ... ... End <p><code>Rows</code> are designed to be iterated in a Loop</p> <p>In real example it looks like this:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Rows MyMap1 Login Password John testpass Sarah testpass This Jim testpass Peter testpass John testpass Fred testpass End <p>Comments may also be used to skip specific rows or row sets.</p>"},{"location":"RVL/Maps/#columns-map","title":"Columns Map","text":"<p>A <code>Columns</code> Map is a convenient way for representing data when you have many options combined in few sets. </p> Flow Type Object Action ParamName ParamType ParamValue Map <code>Columns</code> MapName Row1 ... Row2 ... Row3 ... End <p>The same may be represented as <code>Rows</code> but would require many columns and sometimes it is harder to read. So columns is ideal for storing configuration structures:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Columns ConfigData Url http://localhost:8080/ Login testuser Password testpass Age 44 End <p>When a <code>Columns</code> Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. the 1<sup>st</sup> iteration chooses 1<sup>st</sup> column, 2<sup>nd</sup> goes to 2<sup>nd</sup> column and so on.</p>"},{"location":"RVL/Maps/#table-map","title":"Table Map","text":"<p>A Table map has both columns and rows named.</p> Flow Type Object Action ParamName ParamType ParamValue Map <code>Table</code> MapName Col1 Col2 Col3 Col4 Row1 ... Row2 ... Row3 ... End Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Table TableMap Staging QA Prod Url http://staging.myho... http://qa.myhost.co... http://myhost.com/ User test qatest john Password pass pass QAasd*&amp;8983 Age 33 33 33 End <p>When a <code>Table</code> Map is used in the Loop, then the iteration is performed through the columns and addresses the rows by name within the loop. I.e. 1<sup>st</sup> iteration chooses 1<sup>st</sup> column, 2<sup>nd</sup> goes to 2<sup>nd</sup> column and so on.</p> <p>It is convenient to use a <code>Table</code> Map when you have several columns and many rows so it perfectly fits into the screen. For example you may have several alternative configuration sections and want to use them depending on the situation. In the example below we have several sites (Testing, QA, Prod) each having own Url, Login etc. So we want to quickly switch between sites when working with test.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Table TableMap Staging QA Prod Url http://staging.myho... http://qa.myhost.com/ http://myhost.com/ User test qatest john Password pass pass QAasd*&amp;8983 Age 33 33 33 End of Map Action TableMap DoMoveToColumn colInd string QA Action Navigator Open url TableMap Url"},{"location":"RVL/Maps/#range-map","title":"Range Map","text":"<p><code>Range</code> map contains no in-place data, but defines a region in the external spreadsheet to read information from.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Range MyMap1 fileName string Calc.xls Param sheetName string Data$ Param fromRow number 0 Param fromCol number 0 Param toRow number 2 Param toCol number 10 End <p>A <code>Range</code> map definition contains a number of required parameters:</p> <ul> <li>fileName Path to file containing data.  It may point to .xls, .xlsx or .csv file. If when it is empty we assume that data is stored in the same .rvl.xls spreadsheet as the script.</li> <li>sheetName Excel Sheet name. May be empty for .csv spreadsheets.</li> <li>fromRow 0-based index of the first row containing data. Usually first row is assigned as a header containing column names.</li> <li>fromCol 0-based index of the first column containing data.</li> <li>toRow final row index. If set to -1 then final row is detected automatically (as last row containing some data in the 1<sup>st</sup> column)</li> <li>toCol final column index. If set to -1 then final column is detected automatically as last column containing data in the 1<sup>st</sup> row.</li> </ul> <p>Also there are a hidden parameters:</p> <ul> <li>chooseRow select rows with matching value of the 1<sup>st</sup> column. May be used to pre-select some specific row in a Map. For example, if Map contains credentials, and 1<sup>st</sup> column is User Name then <code>chooseRow=Some Name</code> limits a Map to that user.</li> <li>hasColumnNames boolean. By default it is <code>true</code> meaning that 1<sup>st</sup> rows is assumed to contain column names. Once it is <code>false</code> the columns will have no names and may only be accessed by 0-based index.</li> </ul> <p>Data in the <code>Range</code> map is assumed to be similar to <code>Rows</code> map, but defined externally. Looping is done by rows. Typical external file containing data may look like that:</p> Screenshot <p></p> Transcript A B C C Item1 Operation Item2 Result 15 + 13 28 5 * 6 30 19 - 3 16 8 / 4 2"},{"location":"RVL/Maps/#database-map","title":"Database Map","text":"<p>A <code>Database</code> map contains no in-place data, but defines a connection to the database result set. </p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Database MyMap1 connectionString string MYSQL1 Param query string select * from contacts End <p>The <code>Database</code> map definition contains two parameters:</p> <ul> <li>connectionString ADO connection string. </li> <li>query usually it is an SQL query to execute.</li> </ul> <p>connectionString parameter allows accessing wide variety of different database sources. You may learn ore here: https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/connectionstring-property-ado.</p> <p>Some samples of typical ADO connection string values:</p>"},{"location":"RVL/Maps/#microsoft-access","title":"Microsoft Access","text":"<pre><code>Provider=MSDASQL; Driver={Microsoft Access Driver (*.mdb)}; DBQ=C:\\path\\filename.mdb;\n</code></pre>"},{"location":"RVL/Maps/#microsoft-excel","title":"Microsoft Excel","text":"<pre><code>Provider=MSDASQL; Driver={Microsoft Excel Driver (*.xls)}; DBQ=C:\\path\\filename.xls;\n</code></pre>"},{"location":"RVL/Maps/#microsoft-text","title":"Microsoft Text","text":"<pre><code>Provider=MSDASQL; Driver={Microsoft Text Driver (*.txt; *.csv)}; DBQ=C:\\path\\;\n</code></pre> <p>An example below refers to ODBC Data Source defined as follows:</p> Screenshot <p></p> Transcript <p>Screenshot start Maps_DatabaseODBC.png</p> <p>[ODBC Data Source Administrator (32-bit)]</p> <ul> <li> <p>User DSN | System DSN | File DSN | Drivers | Tracing | Connection Pooling | About</p> </li> <li> <p>System Data Sources:</p> <ul> <li>Name: MYSQL1</li> <li>Platform: 32-bit</li> <li>Driver: MySQL ODBC 5.1 Driver</li> </ul> </li> <li> <p>[Add...] [Remove] [Configure...]</p> </li> <li> <p>An ODBC System data source stores information about how to connect to the indicated data provider. A System data source is visible to all users of this computer, including NT services.</p> </li> <li> <p>[OK] [Cancel] [Apply] [Help]</p> </li> </ul> <p>Screenshot end Maps_DatabaseODBC.png</p>"},{"location":"RVL/Overview/","title":"Why RVL?","text":"<p>RVL stands for Rapise Visual Language. It is inspired by well known software testing methodologies Keyword Driven Testing and Data Driven Testing.</p> <p>This section contains a review of current approaches and concepts to highlight the ideas behind RVL design. You don't need to read this section if you want to learn RVL. However you may need it if you want to understand how it compares to other approaches and why we believe it is not just yet another approach but the way forward to diminish struggling while building real live UI Automation.</p>"},{"location":"RVL/Overview/#keyword-driven-testing","title":"Keyword Driven Testing","text":"<p>Keyword Driven Testing separates the documentation of test cases -including the data to use- from the prescription of the way the test cases are executed. As a result it separates the test creation process into two distinct stages: a design and development stage, and an execution stage.</p> A B C D . First Name Last Name Age Enter Patient John Smith 45 Enter Patient Sarah Connor 32 <p>Keyword Driven Testing: Column A contains a Keyword, columns B, C, D provide parameters for a Keyword.</p>"},{"location":"RVL/Overview/#data-driven-testing","title":"Data Driven Testing","text":"<p>Data Driven Testing is the creation of test scripts to run together with their related data sets in a framework. The framework provides re-usable test logic to reduce maintenance and improve test coverage. Input and result (test criteria) data values can be stored in one or more central data sources or databases, the actual format and organization can be implementation specific.</p> A B C First Name Last Name Age John Smith 45 Sarah Connor 32 <p>Data Driven Testing: We have test input and expected output in data sources.</p>"},{"location":"RVL/Overview/#gherkin-cucumber","title":"Gherkin / Cucumber","text":"<p>There are known approaches intended to make scripting more close to spoken languages. </p> <p>This is a very wise approach improving test readability. The test case is described in Gherkin - business readable, domain specific language. It describes behavior without detailing how that behavior is implemented.</p> <p>Essential part of this framework is implementation of Given-When-Then steps that should be done with one of the common programming languages. Here is the place where the need in scripting skills are still required.</p>"},{"location":"RVL/Overview/#why-rvl_1","title":"Why RVL?","text":"<p>Initially Rapise has everything to build Data Driven and Keyword Driven test frameworks. Even without RVL. </p> <p>It is possible do define scenarios or keywords, connect to Spreadsheet or Database and build the test set.</p> <p>Framework based approaches require one to split data from test logic and maintain them separately. So: * When AUT or SUT changes (new theme, new widget, new layout) then test logic is updated and data stays the same * When test scenarios are enriched or updated then test logic is kept intact and only data sheets are updated.</p> <p>The reality of this approach leads to some challenges. These challenges are common for all test frameworks mentioned here. </p> <ol> <li>Design of test scripts require scripting and programming skills. That person is likely to be a programmer. </li> <li>Design of good test data requires knowledge in target domain. For example, if you application is for Blood Bank then one should have some medical skills. If it is some device control app, then you should have engineering knowledge about physical limitations of the device.</li> </ol> <p>So in ideal world there are two persons working as a team: UI Automation scripting expert and target domain specialist.</p> <p>In reality we see that due to real life limitations it is common that all scripting and test data is done by one person. It is either a programmer who gets familiar with target AUT domain or analyst who has some scripting skills.</p>"},{"location":"RVL/Overview/#reasons-for-struggling","title":"Reasons for struggling","text":"<p>There are several reasons that make a learning curve longer and adoption harder.</p>"},{"location":"RVL/Overview/#syntax-sugar","title":"Syntax Sugar","text":"<p>We found a reason why people get stuck while trying to implement a test case.</p> <p>Most of programming languages including JavaScript were designed by people with mathematical background.  So this statement appears clear and simple for a programmer:</p> <p><pre><code>Deposit('John', 'O\\'Connor', 17.99);\n</code></pre> Programmer easily reads this as:</p> <pre><code>Deposit $17.99 to John O'Connor\n</code></pre> <p>So what is the difference between these notations? We found that the first and most important difficulty lays in so called syntactical sugar. Symbols <code>' \" ; , . ( ) [ ] { } &amp; $ % # @</code> do have meaning for language notation however are not important for understanding the matter.</p> <p>This is true even for programmers. When switching from similarly looking languages some differences easily cause frustration. For example, the same construct: <pre><code>$a = \"Number \" + 1;\n</code></pre> Means text concatenation in JavaScript, however the same is mathematical operation in PHP. </p> <p>Comparison like: <pre><code>if( value == \"OK\" )\n</code></pre></p> <p>Is good for JavaScript or C# world and leads <code>false</code> results in Java.</p> <p>So even if we have programming skills it is still a problem to switch from one language to another and may produce potential issues.</p>"},{"location":"RVL/Overview/#data-tables","title":"Data Tables","text":"<p>With Keyword Driven and Data Driven approach we get a table that represents a sequence. Sequence of patients to proceed, sequence of user logins etc. </p> <p>And sometimes we feel the lack of common debugging facilities: - run keyword for only one line, - start from specific row, - or stop before processing specific line.</p> <p>So here we get to a point where the table should better be a part of the script rather than just external data source.</p>"},{"location":"RVL/Overview/#state-of-the-art","title":"State of The Art","text":"<p>RVL reflects a common trend in programming languages where computational power and flexibility are sacrificed towards clarity and readability.</p> <p>Some language is reduced to a reasonable subset in the sake of more concise and focused presentation. Just couple of examples.</p> <p>Jade template engine simplifies writing HTML pages by clearing syntax sugar (<code>&lt; &gt; / %</code>) so HTML code: <pre><code>  &lt;body&gt;\n    &lt;p class=\"greeting\"&gt;Hello, World!&lt;/p&gt;\n  &lt;/body&gt;\n</code></pre> Gets reduced to more textual view: <pre><code>    body\n        p.greeting Hello, World!\n</code></pre></p> <p>Go language is promoted as Go is expressive, concise, clean, and efficient.. In fact its authors sacrificed many advanced features of common programming languages (classes, inheritance, templates) to get more clarity. This is extremely important because sophisticated features produce sophisticated problems that are hard to nail down. And if you deal with high-load distributed systems minor gain through use of unclear feature may lead to major unpredictable loss.</p>"},{"location":"RVL/Overview/#rvl-concepts","title":"RVL Concepts","text":"<p>RVL's goal is to minimize the struggling. </p> <ol> <li>We assume that one should have minimal care about the syntax sugar and syntax rules. This means that we must avoid braces, quotes or any special symbols <code>' \" ; , . ( ) [ ] { } &amp; $ % # @</code> and make it possible to maintain the script without them.</li> <li>We want script to be close to Keyword Driven and Data Driven testing concept. So test data and test results should be representable as data tables. This reduces the struggling of attaching the data feed to a test set.</li> <li>We still want to have a solid language. We seek for a balance between clarity and power of language. So we want the script to be implemented on the same language. Both keyword, scenarios and data feeds should be done in a same way. This means one RVL skill is required for everything. </li> <li>In many cases grids or tables are used to represent test data. So we want the script itself to be a grid. So all parts of it including data tables are debuggable as a part of the solid script.</li> <li>When we think about working with table data the most common format that comes to our mind is XLS, XLSX or CSV. These formats are supported by powerful tools that make it easier to prepare data for feeding into the test set. So RVL is itself an .xls spreadsheet so its logic is expressed right there.</li> <li>Even with Spreadsheet there is a question what may be entered into the particular cell. With RVL we have an editor where you start from left to right and each cell has limited number of options. So if you don't know language it will guide you.</li> </ol>"},{"location":"RVL/Params/","title":"Params","text":"<p>The last 3 columns in the RVL table are used for passing parameters:</p> ... ParamName ParamType ParamValue ... text string John Smith ... x number 5 ... y number 7 ... forceEvent boolean true <ul> <li>The 5<sup>th</sup> column - ParamName - specifies the name of the parameter. While it does not affect execution, it is important for readability and understanding the provided input options. The ParamName is significant in cases such as RVL.DoPlayTest, RVL.DoPlaySheet, RVL.SetLocatorOpt, and RVL.FormatString. See extra parameters for more information.</li> <li>The 6<sup>th</sup> column - ParamType - value type. This may be a basic scalar type (<code>number</code>, <code>string</code>, <code>boolean</code>) as well as one of the following additional 'special' types:<ul> <li><code>expression</code> - any valid JavaScript expression that may involve global variables and functions and local variables.</li> <li><code>variable</code> - the parameter value is read from a variable.</li> <li><code>objectid</code> - ID of one of the learned Objects.</li> <li><code>password</code> - means that value is encrypted string that is decrypted in runtime.</li> <li><code>relpath</code> - means path relative to position of the current RVL file. This parameter is automatically translated to a full path before being passed into the action/function.</li> <li><code>testparam</code> - the value of the parameter passed to the test.</li> <li><code>&lt;mapname&gt;</code> - see Map params.</li> </ul> </li> <li>The 7<sup>th</sup> column - ParamValue - specifies the value acceptable for the corresponding ParamType. For <code>boolean</code>, it can be either <code>true</code> or <code>false</code>. For <code>number</code>, it can be any floating point number (e.g., <code>3.14</code>). For <code>string</code>, it can be any text without quotes or escape signs. For <code>relpath</code>, it should be a valid relative path, and for <code>testparam</code>, it is the name of the parameter (e.g., <code>Browser</code>).</li> </ul>"},{"location":"RVL/Params/#param-rows","title":"Param Rows","text":"<p>In RVL each parameter takes one row:</p> Flow Type Object Action ParamName ParamType ParamValue ... Param text string John Smith ... Param x number 5 ... Param y number 7 ... Param forceEvent boolean true"},{"location":"RVL/Params/#param-arrays","title":"Param Arrays","text":"<p>Some methods accept arrays of values as input values. For example <code>Tester.Message</code> may take its 1<sup>st</sup> <code>message</code> parameter as an array and prints them combined. Making an array is easy, several consequent parameters having the same name are combined into an array, i.e.:</p> Flow Type Object Action ParamName ParamType ParamValue Action Tester Message message string MyVar1 value: Param message variable MyVar1 Param message string MyVar2 value: Param message variable MyVar2 <p>Should report a message like:</p> <pre><code>MyVar1 value: 25 MyVar2 value: 33\n</code></pre>"},{"location":"RVL/Params/#extra-parameters","title":"Extra Parameters","text":"<p>Several functions of the RVL Object support variable parameters (<code>RVL.DoPlaySheet</code>, <code>RVL.DoPlayScript</code>, <code>RVL.SetLocatorOpts</code>, <code>RVL.FormatString</code>, <code>RVL.DoPlayTest</code>) and <code>RVL.DoPlayTestParallel</code>) support extra parameters.</p> <p>Custom parameters added by user manually, by specifying row type <code>Param</code> and assigning any required param name.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Action RVL DoPlaySheet sheetName string SheetWithParams Param User string ExtUser Param Password string ExtPassword Param OtherVarName string somevalue Action RVL DoPlayScript scriptPath string %WORKDIR%\\Main.rvl.xlsx Param sheetName string SheetWithParams Param Password string OnlyPasswordChanged <p>There my be as many extra parameters as needed.</p>"},{"location":"RVL/Params/#mixed-rows","title":"Mixed Rows","text":"<p>In some cases it is convenient to mix parameter cells with an Action or Condition. </p> <p>For example, the 1<sup>st</sup> parameter of an Action may share the <code>Action</code> row:</p> Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick x number 5 Param y number 7 <p>And this is equivalent to putting it in the next row:</p> Flow Type Object Action ParamName ParamType ParamValue Action MyButton DoClick Param x number 5 Param y number 7 <p>Or <code>param2</code> of the condition may be on the same row:</p> Flow Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 param2 string Text2 <p>Which is equivalent to:</p> Flow Type Object Action ParamName ParamType ParamValue Param param1 string Text1 Condition param1!=param2 Param param2 string Text2 <p>This allows saving space while keeping same readability. See also short condition syntax for real live example of mixed rows usage.</p>"},{"location":"RVL/Params/#map-params","title":"Map Params","text":"<p>If map is defined in the script it may be used directly as a parameter. ParamType should be set to Map Name and ParamValue is a column (or row) name:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Map Rows Logins Login Password John pass1 Sarah pass2 End of Map Action Tester Message message Logins Password"},{"location":"RVL/Preamble/","title":"Sheet Preamble","text":"<p>Preamble is a beginning of each RVL sheet containing common data definitions.</p> <p>Preamble is executed every time when one does Play Selection or Play From Here in RVL. So if the piece that you try to have executed refers Variables, Repositories or Maps then executed statement will 'see' them as if they are part of the selection.</p> <p>The preamble is detected automatically. Everything before first Action, Assertion, Loop or Condition is a preamble.</p> <p>For example, Preamble here ends at the row 10 (because row 11 is Action)</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Variable Login string librarian Variable Global g_password string librarian Map Rows MyMap1 Col Col1 Col2 Col3 r1 r11 r12 r13 End of Map # Following action ends the preamble Action Tester Message message string Starting Script Action Tester Message message string Login name: Param message variable Login Action Tester Message message string Value from Map: MyMap1 Col Action RVL DoPlaySheet sheetName string DefaultValue"},{"location":"RVL/RVL_DoPlay/","title":"RVL.DoPlaySheet and RVL.DoPlayScript","text":"<pre><code>DoPlayScript(/**string*/ scriptPath, /**string*/ sheetName)\n</code></pre> <p>Play RVL sheet <code>sheetName</code> from workbook <code>scriptPath</code>.</p> <ul> <li><code>scriptPath</code>: Path to script</li> <li><code>sheetName</code>: Excel sheet containing the script</li> <li>[extraParams]: default variable values</li> </ul> <pre><code>DoPlaySheet(/**string*/ sheetName)\n</code></pre> <p>Play RVL sheet <code>sheetName</code> from current workbook.</p> <ul> <li><code>sheetName</code>: Excel sheet containing the script</li> <li>[extraParams]: default variable values</li> </ul>"},{"location":"RVL/RVL_DoPlay/#passing-input-parameters","title":"Passing Input Parameters","text":"<p>Extra parameters [extraParams] used in these calls are default values for local variables defined in the destination scripts.</p> <p>So the following call:</p> Screenshot <p></p> Transcript <p>Sheet name: RVL</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL DoPlaySheet sheetName string SheetWithParams Param User string ExtUser Param Password string ExtPassword Param OtherVarName string somevalue <p>passes <code>User=ExtUser</code>, <code>Password=ExtPassword</code>, <code>OtherVarName=somevalue</code> to the destination script. It may now be used as follows:</p> Screenshot <p></p> Transcript <p>Sheet name: SheetWithParams</p> Flow Type Object Action ParamName ParamType ParamValue Variable User string DefUser Variable Password string DefPassword Action Tester Message message string Logging In as: Param message variable User Param message string / Param message variable Password <p>So local variable <code>User</code> is assigned to value <code>ExtUser</code> when called. However, if you play this sheet using <code>Play Sheet</code> then this variable would have value <code>DefUser</code>.</p> <p>This helps to make sheets more universal: it should be possible to execute the sheet or any statement in a sheet alone as well as call it from outside and pass parameters.</p>"},{"location":"RVL/Repository/","title":"Repository","text":"<p>In RVL, the Repository declaration is used to import objects from external repositories into the current RVL sheet:</p> Flow Type Object Action ParamName ParamType ParamValue Repository prefixpath <p>Here, path refers to the <code>Objects.js</code> file that contains the object definitions, and prefix is a string you can specify to be appended to each object's ID.</p>"},{"location":"RVL/Repository/#example","title":"Example:","text":"Flow Type Object Action ParamName ParamType ParamValue Repository AuthorsView/ %WORKDIR%\\TestCases\\AuthorManagement\\AuthorsView\\Objects.js <p>In this example, if AuthorsView contains a button labeled \"Save\", it will be accessible in RVL as \"AuthorsView/Save\".</p>"},{"location":"RVL/Repository/#adding-an-external-repository","title":"Adding an External Repository","text":"<p>Consider a scenario where we have a test case named CalcButtons that contains all the buttons from the Calculator application. Now, if we want to use these pre-learned buttons in another scenario called CalcAddition:</p> <p></p> <p>We can define a Repository command to import the objects with a \"Buttons/\" prefix. This way, all imported objects will appear in the dropdown with the \"Buttons/\" prefix:</p> <p></p> <p>Finally, you can implement the entire scenario using these imported objects:</p> <p></p>"},{"location":"RVL/Repository/#using-an-empty-prefix","title":"Using an Empty Prefix","text":"<p>The previous example can also be implemented with an empty Repository prefix, as shown below:</p> <p></p> <p>In this case, Repository objects are accessed exactly as they are listed in the Objects tree.</p>"},{"location":"RVL/Repository/#importing-multiple-repositories","title":"Importing Multiple Repositories","text":"<p>Often, it's more practical to divide the object repository into smaller segments and include only those necessary for a specific test case.</p> <p>Consider a LibraryInformationSystem application with several screens. We've defined multiple test cases in a folder named Views, each containing objects from a specific screen.</p> <ul> <li>Nav contains a navigation bar:</li> </ul> <p></p> <ul> <li>Authors contains an author list:</li> </ul> <p></p> <ul> <li>EditAuthor contains controls for an author editor form:</li> </ul> <p></p> <p>Now, if we want to implement a scenario where a new author is created, we need to navigate to the Authors view using the link from the Nav bar, click the Create New Author link, and then fill out the Edit Author form.</p> <p>We can achieve this by including objects from each of these views using the <code>Repository</code> command with the respective prefix values: Nav/, Authors/, and EditAuthor/.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Repository Nav/ %WORKDIR%\\TestCases\\Views\\Nav\\Objects.js Repository Authors/ %WORKDIR%\\TestCases\\Views\\Authors\\Objects.js Repository EditAuthor/ %WORKDIR%\\TestCases\\Views\\EditAuthor\\Objects.js <p>Now, each object is available with its prefix. For example, to click on the \"Authors\" link from the Nav bar, use \"Nav/Authors\". To save, use \"EditAuthor/Save_Author\", etc.:</p> <p></p>"},{"location":"RVL/Repository/#using-drag-drop","title":"Using Drag &amp; Drop","text":"<p>You can either declare the repository by typing it manually or add it by dragging and dropping the [Objects] node into the RVL:</p> <p></p> <p>By default, the prefix is assigned as &lt;test case name&gt;/, where &lt;test case name&gt; represents the name of the test case owning the repository, and / is used as a delimiter for readability.</p>"},{"location":"RVL/Repository/#preamble","title":"Preamble","text":"<p>It is advisable to declare <code>Repository</code> entries in the RVL preamble, which means placing them at the beginning of the script.</p>"},{"location":"RVL/Sheets/","title":"RVL Sheets","text":"<p>RVL script may contain one or more sheets distributed over one or more workbooks.</p> Screenshot <p></p> Transcript <p>Workbook with 4 sheets: RVL, Browsers, Users, Login</p> <p>Active Sheet: RVL</p> Flow Type Object Action ParamName ParamType ParamValue Action RVL DoPlaySheet sheetName string Browsers <p>Sheet is an atomic building block for implementing test frameworks and sharing logic.</p> <p>For example, there may be a Sheet called <code>Login</code> and it may be re-used by CreateNewBook, CreateExistingBook  and other test scenarios that require Login logic.</p> <p>Default sheet name is <code>RVL</code>. You may rename it. You may add more sheets.</p> <p>RVL sheet is executable when it have 7 pre-defined Columns. The workbook may contain both executable and data sheets.</p>"},{"location":"RVL/Sheets/#calling-sheets","title":"Calling Sheets","text":"<p>It is possible to do calls between scripts using RVL.DoPlayScript and RVL.DoPlaySheet.</p>"},{"location":"RVL/Sheets/#passing-parameters","title":"Passing Parameters","text":"<p>It is possible to pass parameters between sheets. See Passing Input Parameters</p>"},{"location":"RVL/Sheets/#passing-maps","title":"Passing Maps","text":"<p>You may pass a Map between sheets as  input parameters.</p> <p>For example, here we pass a map <code>FullLoginData</code>:</p> Screenshot <p></p> Transcript <p>Sheet name: LoginAll</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows FullLoginData User Password user3 password3 user4 password4 user5 password5 End of Map Action RVL DoPlaySheet sheetName string Login Param UserLogins expression FullLoginData <p>as a value to override the map <code>UserLogins</code> on the <code>Login</code> sheet:</p> Screenshot <p></p> Transcript <p>Sheet name: Login</p> Flow Type Object Action ParamName ParamType ParamValue Map Rows UserLogins User Password user1 password1 End of Map Loop Map UserLogins # Loop body Action Tester Message message string User: Param message UserLogins User Param message string / Param message UserLogins Password End of Loop"},{"location":"RVL/Sheets/#rvl-file","title":"RVL File","text":"<p>Default file format for RVL scripts is an Excel workbook. It makes it easier to combine data with script logic. Any RVL file has extension <code>.rvl.xlsx</code> and may be open in MS Excel directly.</p>"},{"location":"RVL/Variables/","title":"Variables","text":"<p>In RVL, variables are useful for storing intermediate results as well as accessing and passing global values to external JavaScript functions.</p> <p>Variables may be used in Params to Conditions and in Actions.</p>"},{"location":"RVL/Variables/#declaring","title":"Declaring","text":"<p>This line declares a variable without any values. Its value may be assigned later:</p> Flow Type Object Action ParamName ParamType ParamValue Variable <code>MyVar1</code>"},{"location":"RVL/Variables/#local-variables","title":"Local Variables","text":"<p>By default declared variables are assumed to be local. Local variables may be used only within the current RVL script and not visible from other RVL scripts or JavaScript code.</p>"},{"location":"RVL/Variables/#global-variables","title":"Global Variables","text":"<p>You may have a JavaScript variable defined in the user Functions file (<code>*.user.js</code>), i.e.:</p> <pre><code>// Piece from User.js\nvar globalVar = \"Value\";\n</code></pre> <p>Then in the RVL you may declare <code>globalVar</code> as global and access it (read or assign values). Declaring a variable as global is simple:</p> Flow Type Object Action ParamName ParamType ParamValue Variable Global <code>globalVar</code> <p>Global variables are useful for exchanging and/or sharing data between different RVL scripts or between RVL and JavaScript.</p>"},{"location":"RVL/Variables/#default-value-for-global-variable","title":"Default Value for Global Variable","text":"<p>Special parameter name <code>defaultValue</code> of the Global variable definition allows setting default value. This may be needed when you don't know if variable was set before calling this script. So the value will only be assigned is variable is currently undefined. Otherwise the Variable keeps its defined value.</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Variable Global g_loginName Param defaultValue string librarian Variable Global g_password Param defaultValue string librarian Variable Global g_name Param defaultValue string librarian <p>This helps to make sheets using global variables to be executable standalone. I.e. you may use Play This Sheet in RVL and be sure that Global variable will have a value.</p>"},{"location":"RVL/Variables/#assigning","title":"Assigning","text":""},{"location":"RVL/Variables/#assignment-expression","title":"Assignment Expression","text":"<p>This line declares and assigns value 5 to a variable <code>MyVar2</code>:</p> Flow Type Object Action ParamName ParamType ParamValue Variable <code>MyVar2</code> number 5 <p>If the variable is declared earlier, then assignment just changes its value. If the variable is not yet declared, then assignment is actually a declaration with assignment.</p>"},{"location":"RVL/Variables/#action-output","title":"Action Output","text":"<p>If an action returns a value it can be assigned to a variable via <code>Output</code>.</p> Flow Type Object Action ParamName ParamType ParamValue Variable <code>OsVersion</code> Action Global GetOsVersion Output variable OsVersion"},{"location":"RVL/Variables/#auto-assignment","title":"Auto Assignment","text":"<p>There are two auto assigned variables in RVL:  <code>LastResult</code> and <code>LastObject</code>. If an action returns some value then it is assigned to <code>LastResult</code>. <code>LastObject</code> is effectively an alias to the last used object in Object column.</p> Flow Type Object Action ParamName ParamType ParamValue Action Global GetOsVersion Action Tester Message variable LastResult <p>This snippet prints OS version to the report.</p>"},{"location":"RVL/Variables/#using","title":"Using","text":"<p>Any Params value may accept a variable:</p> Flow Type Object Action ParamName ParamType ParamValue ... Param text variable <code>MyVar1</code> <p>Any Params value may accept an expression using variables:</p> Flow Type Object Action ParamName ParamType ParamValue ... Param text expression <code>MyVar2 + 4</code> <p>Any Action may write its return value to a variable using the Output statement:</p> Flow Type Object Action ParamName ParamType ParamValue Action Global DoTrim str string text to trim Output variable <code>MyVar1</code> <p>The Output value may then be used as a param value in actions, conditions, assertions and expressions.</p>"},{"location":"RVL/Variables/#variable-actions","title":"Variable Actions","text":"<p>One may use an expression to change the value of a variable. Here are several common variable operations that may be used to modify variable values:</p> <ol> <li> <p>Increment is an operation where numeric value is increased by <code>1</code> or any other specified value. The variable must have a numeric value. Otherwise the result is <code>NaN</code>.</p> <p>If no param to Increment is specified then <code>1</code> is assumed:</p> Flow Type Object Action ParamName ParamType ParamValue Variable Increment <code>numVar</code> <p>Otherwise it is any value:</p> Flow Type Object Action ParamName ParamType ParamValue Variable Increment <code>numVar</code> <code>number</code> value </li> <li> <p>Decrement is the same as increment but the value is subtracted from the variable.</p> </li> <li> <p>Append adds the value as text to the specified variable. This operation is useful for constructing text messages:</p> Flow Type Object Action ParamName ParamType ParamValue Variable Append <code>textVar</code> <code>string</code> Final value: Variable Append <code>textVar</code> <code>variable</code> <code>numVar</code> <p>In this example if <code>textVar</code> was empty and <code>numVar</code> had value <code>5</code> then the final value of <code>textVar</code> is the following text:   <code>Final value: 5</code></p> </li> </ol>"},{"location":"RVL/Variables/#variables-as-objects","title":"Variables as Objects","text":"<p>A variable in Rapise can hold an object from the repository, and when it is a repository object, it can have actions that can be executed.</p> <p>When declaring a variable with the <code>objectid</code> ParamType, you are indicating to the RVL editor that the variable has either:</p> <ol> <li>The type of the object when the <code>objectid</code> matches the ID from the object repository.</li> <li> <p>The type by name when the <code>objectid</code> matches a well-known object type. You can find object names in the documentation for each library. For example, the topic Java Objects lists all known object types for the Java library.</p> Screenshot <p></p> Transcript <p>Documentation Navigation</p> <ul> <li><code>#</code></li> <li><code>User's Guide</code></li> <li><code>RVL</code></li> <li><code>Libraries</code></li> <li><code>Manuals</code></li> <li><code>KB</code></li> <li><code>Education</code></li> <li><code>Release Notes</code></li> </ul> <p>Libraries Section</p> <ul> <li><code>ActiveXC1 &gt;</code></li> <li><code>ActiveXSft &gt;</code></li> <li><code>FarPoint &gt;</code></li> <li><code>VSFlexGrid &gt;</code></li> <li><code>Java &gt;</code><ul> <li>Java Objects<ul> <li><code>JavaButton</code></li> <li><code>JavaCheckBox</code></li> <li><code>JavaChoice</code></li> <li><code>JavaLabel</code></li> <li><code>JavaList</code></li> <li><code>JavaObject</code></li> <li><code>JavaSwingButton</code></li> </ul> </li> </ul> </li> </ul> <p>(Note: The image also includes a navigation flow marked with a dotted line, connecting the 'Java' section with 'JavaButton', then leading to a list of Java components including 'JavaCheckBox', 'JavaChoice', 'JavaLabel', 'JavaList', 'JavaObject', and 'JavaSwingButton'.)</p> <p>Additionally, you can use the type specified in the object's definition properties. For example, most web objects have the type HTMLObject, as shown in the object properties:</p> Screenshot <p></p> Transcript <p>Test Management Interface</p> <p>Test Cases Section</p> <ul> <li><code>Test Cases</code></li> <li><code>Author Management</code><ul> <li><code>![Full - Author Management](link-to-green-check-icon) Full - Author Management</code></li> <li><code>![Check](link-to-check-icon) Check Author Summary</code></li> <li><code>![Create](link-to-plus-icon) Create a New Author</code></li> <li><code>[Objects]</code></li> <li><code>[Inflectra | Library Information System]</code><ul> <li><code>&gt; Add</code></li> <li><code>&gt; Age</code></li> <li><code>&gt; Name</code></li> </ul> </li> <li><code>[Library Information System | Author]</code></li> <li><code>[Library Information System | Book M]</code></li> <li><code>[RVL]</code></li> <li><code>![Edit](link-to-pencil-icon) Edit Existing Author</code></li> </ul> </li> </ul> <p>Object Tree Tab</p> <ul> <li><code>Object Tree</code></li> <li><code>Files</code></li> </ul> <p>Properties Panel</p> <ul> <li><code>Properties</code><ul> <li><code>Class: Selenium</code></li> <li><code>Flavor: Button</code></li> <li><code>Ignore Object Name: True</code></li> <li><code>Library: Selenium</code></li> <li><code>Name: Add</code></li> <li><code>Role:</code></li> <li><code>Text:</code></li> <li><code>Type: ![HTML Object](link-to-red-circled-icon) HTMLObject</code></li> <li><code>Window:</code></li> <li><code>ID:</code></li> <li><code>Type: HTMLObject</code></li> </ul> </li> </ul> <p>(*Note: The image indicates a software interface with a navigation tree on the top and properties of a selected object at the bottom. Selected object is <code>Add</code>. The properties are for an object of class 'Selenium' and type 'HTMLObject'. *)</p> </li> </ol> <p>The RVL editor knows how to handle such a variable and provides necessary hints to choose an action for it:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Variable EditAuthor objectid HTMLObject Action Navigator DOMFindByXpath xpath string //td[normalize-space(.)='Charles Dickens'] Action EditAuthor DoClick"},{"location":"RVL/Variables/#examples","title":"Examples","text":"<p>Variables may be declared as Local or Global. Declaration may or may not contain initial value</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Declare global variables. If it is assigned earlier then keep its value Variable Global g_bookName # Declare global variables and assign its value Variable Global g_genre string NonFiction # Declare local variable without value with explicit Local keyword Variable Local Osversion # Declare local variables and assign initial values, use explicit local keyword Variable Local StringVar string some text Variable Local NumVar number 35 Variable Local BoolVar boolean false # Declare local variable without value Variable Osversion # Declare and assign local variables Variable StringVar string some text Variable NumVar number 35 Variable BoolVar boolean false <p>Variables may accept output from the Action:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue Variable Local OsVersion Action Global GetOsVersion Output Output variable OsVersion <p>Variables may be used as input to the Action:</p> Screenshot <p></p> Transcript Flow Type Object Action ParamName ParamType ParamValue # Use variable as a parameter Action Tester Message message variable OsVersion"}]}